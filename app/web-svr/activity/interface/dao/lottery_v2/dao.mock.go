// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package lottery is a generated GoMock package.
package lottery

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	lottery "go-gateway/app/web-svr/activity/interface/model/lottery_v2"
	reflect "reflect"
)

// MockDao is a mock of Dao interface
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDao) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDaoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDao)(nil).Close))
}

// RawLottery mocks base method
func (m *MockDao) RawLottery(c context.Context, sid string) (*lottery.Lottery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLottery", c, sid)
	ret0, _ := ret[0].(*lottery.Lottery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLottery indicates an expected call of RawLottery
func (mr *MockDaoMockRecorder) RawLottery(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLottery", reflect.TypeOf((*MockDao)(nil).RawLottery), c, sid)
}

// RawLotteryInfo mocks base method
func (m *MockDao) RawLotteryInfo(c context.Context, sid string) (*lottery.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLotteryInfo", c, sid)
	ret0, _ := ret[0].(*lottery.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLotteryInfo indicates an expected call of RawLotteryInfo
func (mr *MockDaoMockRecorder) RawLotteryInfo(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLotteryInfo", reflect.TypeOf((*MockDao)(nil).RawLotteryInfo), c, sid)
}

// RawLotteryTimesConfig mocks base method
func (m *MockDao) RawLotteryTimesConfig(c context.Context, sid string) ([]*lottery.TimesConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLotteryTimesConfig", c, sid)
	ret0, _ := ret[0].([]*lottery.TimesConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLotteryTimesConfig indicates an expected call of RawLotteryTimesConfig
func (mr *MockDaoMockRecorder) RawLotteryTimesConfig(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLotteryTimesConfig", reflect.TypeOf((*MockDao)(nil).RawLotteryTimesConfig), c, sid)
}

// RawLotteryGift mocks base method
func (m *MockDao) RawLotteryGift(c context.Context, sid string) ([]*lottery.GiftDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLotteryGift", c, sid)
	ret0, _ := ret[0].([]*lottery.GiftDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLotteryGift indicates an expected call of RawLotteryGift
func (mr *MockDaoMockRecorder) RawLotteryGift(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLotteryGift", reflect.TypeOf((*MockDao)(nil).RawLotteryGift), c, sid)
}

// RawLotteryAddrCheck mocks base method
func (m *MockDao) RawLotteryAddrCheck(c context.Context, id, mid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLotteryAddrCheck", c, id, mid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLotteryAddrCheck indicates an expected call of RawLotteryAddrCheck
func (mr *MockDaoMockRecorder) RawLotteryAddrCheck(c, id, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLotteryAddrCheck", reflect.TypeOf((*MockDao)(nil).RawLotteryAddrCheck), c, id, mid)
}

// InsertLotteryAddr mocks base method
func (m *MockDao) InsertLotteryAddr(c context.Context, id, mid, addressID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLotteryAddr", c, id, mid, addressID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLotteryAddr indicates an expected call of InsertLotteryAddr
func (mr *MockDaoMockRecorder) InsertLotteryAddr(c, id, mid, addressID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLotteryAddr", reflect.TypeOf((*MockDao)(nil).InsertLotteryAddr), c, id, mid, addressID)
}

// InsertLotteryAddTimes mocks base method
func (m *MockDao) InsertLotteryAddTimes(c context.Context, id, mid int64, addType, num int, cid int64, ip, orderNo string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLotteryAddTimes", c, id, mid, addType, num, cid, ip, orderNo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLotteryAddTimes indicates an expected call of InsertLotteryAddTimes
func (mr *MockDaoMockRecorder) InsertLotteryAddTimes(c, id, mid, addType, num, cid, ip, orderNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLotteryAddTimes", reflect.TypeOf((*MockDao)(nil).InsertLotteryAddTimes), c, id, mid, addType, num, cid, ip, orderNo)
}

// InsertLotteryRecard mocks base method
func (m *MockDao) InsertLotteryRecard(c context.Context, id int64, record []*lottery.InsertRecord, gid []int64, ip string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLotteryRecard", c, id, record, gid, ip)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLotteryRecard indicates an expected call of InsertLotteryRecard
func (mr *MockDaoMockRecorder) InsertLotteryRecard(c, id, record, gid, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLotteryRecard", reflect.TypeOf((*MockDao)(nil).InsertLotteryRecard), c, id, record, gid, ip)
}

// RawLotteryUsedTimes mocks base method
func (m *MockDao) RawLotteryUsedTimes(c context.Context, id, mid int64) ([]*lottery.RecordDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLotteryUsedTimes", c, id, mid)
	ret0, _ := ret[0].([]*lottery.RecordDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLotteryUsedTimes indicates an expected call of RawLotteryUsedTimes
func (mr *MockDaoMockRecorder) RawLotteryUsedTimes(c, id, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLotteryUsedTimes", reflect.TypeOf((*MockDao)(nil).RawLotteryUsedTimes), c, id, mid)
}

// RawLotteryAddTimes mocks base method
func (m *MockDao) RawLotteryAddTimes(c context.Context, id, mid int64) ([]*lottery.AddTimes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLotteryAddTimes", c, id, mid)
	ret0, _ := ret[0].([]*lottery.AddTimes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLotteryAddTimes indicates an expected call of RawLotteryAddTimes
func (mr *MockDaoMockRecorder) RawLotteryAddTimes(c, id, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLotteryAddTimes", reflect.TypeOf((*MockDao)(nil).RawLotteryAddTimes), c, id, mid)
}

// RawMemberGroup mocks base method
func (m *MockDao) RawMemberGroup(c context.Context, sid string) ([]*lottery.MemberGroupDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawMemberGroup", c, sid)
	ret0, _ := ret[0].([]*lottery.MemberGroupDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawMemberGroup indicates an expected call of RawMemberGroup
func (mr *MockDaoMockRecorder) RawMemberGroup(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawMemberGroup", reflect.TypeOf((*MockDao)(nil).RawMemberGroup), c, sid)
}

// UpdatelotteryGiftNumSQL mocks base method
func (m *MockDao) UpdatelotteryGiftNumSQL(c context.Context, id int64, num int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatelotteryGiftNumSQL", c, id, num)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatelotteryGiftNumSQL indicates an expected call of UpdatelotteryGiftNumSQL
func (mr *MockDaoMockRecorder) UpdatelotteryGiftNumSQL(c, id, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatelotteryGiftNumSQL", reflect.TypeOf((*MockDao)(nil).UpdatelotteryGiftNumSQL), c, id, num)
}

// InsertLotteryWin mocks base method
func (m *MockDao) InsertLotteryWin(c context.Context, id, giftID, mid int64, ip string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLotteryWin", c, id, giftID, mid, ip)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLotteryWin indicates an expected call of InsertLotteryWin
func (mr *MockDaoMockRecorder) InsertLotteryWin(c, id, giftID, mid, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLotteryWin", reflect.TypeOf((*MockDao)(nil).InsertLotteryWin), c, id, giftID, mid, ip)
}

// UpdateLotteryWin mocks base method
func (m *MockDao) UpdateLotteryWin(c context.Context, id, mid, giftID int64, ip string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLotteryWin", c, id, mid, giftID, ip)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLotteryWin indicates an expected call of UpdateLotteryWin
func (mr *MockDaoMockRecorder) UpdateLotteryWin(c, id, mid, giftID, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLotteryWin", reflect.TypeOf((*MockDao)(nil).UpdateLotteryWin), c, id, mid, giftID, ip)
}

// RawLotteryWinOne mocks base method
func (m *MockDao) RawLotteryWinOne(c context.Context, id, mid, giftID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLotteryWinOne", c, id, mid, giftID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLotteryWinOne indicates an expected call of RawLotteryWinOne
func (mr *MockDaoMockRecorder) RawLotteryWinOne(c, id, mid, giftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLotteryWinOne", reflect.TypeOf((*MockDao)(nil).RawLotteryWinOne), c, id, mid, giftID)
}

// RawLotteryWinList mocks base method
func (m *MockDao) RawLotteryWinList(c context.Context, id, num int64) ([]*lottery.GiftMid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawLotteryWinList", c, id, num)
	ret0, _ := ret[0].([]*lottery.GiftMid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawLotteryWinList indicates an expected call of RawLotteryWinList
func (mr *MockDaoMockRecorder) RawLotteryWinList(c, id, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawLotteryWinList", reflect.TypeOf((*MockDao)(nil).RawLotteryWinList), c, id, num)
}

// CacheLottery mocks base method
func (m *MockDao) CacheLottery(c context.Context, sid string) (*lottery.Lottery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLottery", c, sid)
	ret0, _ := ret[0].(*lottery.Lottery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLottery indicates an expected call of CacheLottery
func (mr *MockDaoMockRecorder) CacheLottery(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLottery", reflect.TypeOf((*MockDao)(nil).CacheLottery), c, sid)
}

// AddCacheLottery mocks base method
func (m *MockDao) AddCacheLottery(c context.Context, sid string, val *lottery.Lottery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLottery", c, sid, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLottery indicates an expected call of AddCacheLottery
func (mr *MockDaoMockRecorder) AddCacheLottery(c, sid, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLottery", reflect.TypeOf((*MockDao)(nil).AddCacheLottery), c, sid, val)
}

// DeleteLottery mocks base method
func (m *MockDao) DeleteLottery(c context.Context, sid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLottery", c, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLottery indicates an expected call of DeleteLottery
func (mr *MockDaoMockRecorder) DeleteLottery(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLottery", reflect.TypeOf((*MockDao)(nil).DeleteLottery), c, sid)
}

// CacheLotteryInfo mocks base method
func (m *MockDao) CacheLotteryInfo(c context.Context, sid string) (*lottery.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLotteryInfo", c, sid)
	ret0, _ := ret[0].(*lottery.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLotteryInfo indicates an expected call of CacheLotteryInfo
func (mr *MockDaoMockRecorder) CacheLotteryInfo(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLotteryInfo", reflect.TypeOf((*MockDao)(nil).CacheLotteryInfo), c, sid)
}

// AddCacheLotteryInfo mocks base method
func (m *MockDao) AddCacheLotteryInfo(c context.Context, sid string, val *lottery.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLotteryInfo", c, sid, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLotteryInfo indicates an expected call of AddCacheLotteryInfo
func (mr *MockDaoMockRecorder) AddCacheLotteryInfo(c, sid, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLotteryInfo", reflect.TypeOf((*MockDao)(nil).AddCacheLotteryInfo), c, sid, val)
}

// DeleteLotteryInfo mocks base method
func (m *MockDao) DeleteLotteryInfo(c context.Context, sid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLotteryInfo", c, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLotteryInfo indicates an expected call of DeleteLotteryInfo
func (mr *MockDaoMockRecorder) DeleteLotteryInfo(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLotteryInfo", reflect.TypeOf((*MockDao)(nil).DeleteLotteryInfo), c, sid)
}

// CacheLotteryTimesConfig mocks base method
func (m *MockDao) CacheLotteryTimesConfig(c context.Context, sid string) ([]*lottery.TimesConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLotteryTimesConfig", c, sid)
	ret0, _ := ret[0].([]*lottery.TimesConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLotteryTimesConfig indicates an expected call of CacheLotteryTimesConfig
func (mr *MockDaoMockRecorder) CacheLotteryTimesConfig(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLotteryTimesConfig", reflect.TypeOf((*MockDao)(nil).CacheLotteryTimesConfig), c, sid)
}

// AddCacheLotteryTimesConfig mocks base method
func (m *MockDao) AddCacheLotteryTimesConfig(c context.Context, sid string, list []*lottery.TimesConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLotteryTimesConfig", c, sid, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLotteryTimesConfig indicates an expected call of AddCacheLotteryTimesConfig
func (mr *MockDaoMockRecorder) AddCacheLotteryTimesConfig(c, sid, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLotteryTimesConfig", reflect.TypeOf((*MockDao)(nil).AddCacheLotteryTimesConfig), c, sid, list)
}

// DeleteLotteryTimesConfig mocks base method
func (m *MockDao) DeleteLotteryTimesConfig(c context.Context, sid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLotteryTimesConfig", c, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLotteryTimesConfig indicates an expected call of DeleteLotteryTimesConfig
func (mr *MockDaoMockRecorder) DeleteLotteryTimesConfig(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLotteryTimesConfig", reflect.TypeOf((*MockDao)(nil).DeleteLotteryTimesConfig), c, sid)
}

// CacheLotteryGift mocks base method
func (m *MockDao) CacheLotteryGift(c context.Context, sid string) ([]*lottery.Gift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLotteryGift", c, sid)
	ret0, _ := ret[0].([]*lottery.Gift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLotteryGift indicates an expected call of CacheLotteryGift
func (mr *MockDaoMockRecorder) CacheLotteryGift(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLotteryGift", reflect.TypeOf((*MockDao)(nil).CacheLotteryGift), c, sid)
}

// AddCacheLotteryGift mocks base method
func (m *MockDao) AddCacheLotteryGift(c context.Context, sid string, list []*lottery.Gift) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLotteryGift", c, sid, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLotteryGift indicates an expected call of AddCacheLotteryGift
func (mr *MockDaoMockRecorder) AddCacheLotteryGift(c, sid, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLotteryGift", reflect.TypeOf((*MockDao)(nil).AddCacheLotteryGift), c, sid, list)
}

// DeleteLotteryGift mocks base method
func (m *MockDao) DeleteLotteryGift(c context.Context, sid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLotteryGift", c, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLotteryGift indicates an expected call of DeleteLotteryGift
func (mr *MockDaoMockRecorder) DeleteLotteryGift(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLotteryGift", reflect.TypeOf((*MockDao)(nil).DeleteLotteryGift), c, sid)
}

// CacheLotteryAddrCheck mocks base method
func (m *MockDao) CacheLotteryAddrCheck(c context.Context, id, mid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLotteryAddrCheck", c, id, mid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLotteryAddrCheck indicates an expected call of CacheLotteryAddrCheck
func (mr *MockDaoMockRecorder) CacheLotteryAddrCheck(c, id, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLotteryAddrCheck", reflect.TypeOf((*MockDao)(nil).CacheLotteryAddrCheck), c, id, mid)
}

// AddCacheLotteryAddrCheck mocks base method
func (m *MockDao) AddCacheLotteryAddrCheck(c context.Context, id, mid, val int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLotteryAddrCheck", c, id, mid, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLotteryAddrCheck indicates an expected call of AddCacheLotteryAddrCheck
func (mr *MockDaoMockRecorder) AddCacheLotteryAddrCheck(c, id, mid, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLotteryAddrCheck", reflect.TypeOf((*MockDao)(nil).AddCacheLotteryAddrCheck), c, id, mid, val)
}

// CacheIPRequestCheck mocks base method
func (m *MockDao) CacheIPRequestCheck(c context.Context, ip string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheIPRequestCheck", c, ip)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheIPRequestCheck indicates an expected call of CacheIPRequestCheck
func (mr *MockDaoMockRecorder) CacheIPRequestCheck(c, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheIPRequestCheck", reflect.TypeOf((*MockDao)(nil).CacheIPRequestCheck), c, ip)
}

// AddCacheIPRequestCheck mocks base method
func (m *MockDao) AddCacheIPRequestCheck(c context.Context, ip string, val int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheIPRequestCheck", c, ip, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheIPRequestCheck indicates an expected call of AddCacheIPRequestCheck
func (mr *MockDaoMockRecorder) AddCacheIPRequestCheck(c, ip, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheIPRequestCheck", reflect.TypeOf((*MockDao)(nil).AddCacheIPRequestCheck), c, ip, val)
}

// AddCacheLotteryTimes mocks base method
func (m *MockDao) AddCacheLotteryTimes(c context.Context, sid, mid int64, remark string, list map[string]int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLotteryTimes", c, sid, mid, remark, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLotteryTimes indicates an expected call of AddCacheLotteryTimes
func (mr *MockDaoMockRecorder) AddCacheLotteryTimes(c, sid, mid, remark, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLotteryTimes", reflect.TypeOf((*MockDao)(nil).AddCacheLotteryTimes), c, sid, mid, remark, list)
}

// CacheLotteryTimes mocks base method
func (m *MockDao) CacheLotteryTimes(c context.Context, sid, mid int64, remark string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLotteryTimes", c, sid, mid, remark)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLotteryTimes indicates an expected call of CacheLotteryTimes
func (mr *MockDaoMockRecorder) CacheLotteryTimes(c, sid, mid, remark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLotteryTimes", reflect.TypeOf((*MockDao)(nil).CacheLotteryTimes), c, sid, mid, remark)
}

// IncrTimes mocks base method
func (m *MockDao) IncrTimes(c context.Context, sid, mid int64, list map[string]int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrTimes", c, sid, mid, list, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrTimes indicates an expected call of IncrTimes
func (mr *MockDaoMockRecorder) IncrTimes(c, sid, mid, list, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrTimes", reflect.TypeOf((*MockDao)(nil).IncrTimes), c, sid, mid, list, status)
}

// CacheLotteryWinList mocks base method
func (m *MockDao) CacheLotteryWinList(c context.Context, sid int64) ([]*lottery.GiftMid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLotteryWinList", c, sid)
	ret0, _ := ret[0].([]*lottery.GiftMid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLotteryWinList indicates an expected call of CacheLotteryWinList
func (mr *MockDaoMockRecorder) CacheLotteryWinList(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLotteryWinList", reflect.TypeOf((*MockDao)(nil).CacheLotteryWinList), c, sid)
}

// CacheLotteryActionLog mocks base method
func (m *MockDao) CacheLotteryActionLog(c context.Context, sid, mid, start, end int64) ([]*lottery.RecordDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLotteryActionLog", c, sid, mid, start, end)
	ret0, _ := ret[0].([]*lottery.RecordDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLotteryActionLog indicates an expected call of CacheLotteryActionLog
func (mr *MockDaoMockRecorder) CacheLotteryActionLog(c, sid, mid, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLotteryActionLog", reflect.TypeOf((*MockDao)(nil).CacheLotteryActionLog), c, sid, mid, start, end)
}

// AddCacheLotteryActionLog mocks base method
func (m *MockDao) AddCacheLotteryActionLog(c context.Context, sid, mid int64, list []*lottery.RecordDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLotteryActionLog", c, sid, mid, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLotteryActionLog indicates an expected call of AddCacheLotteryActionLog
func (mr *MockDaoMockRecorder) AddCacheLotteryActionLog(c, sid, mid, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLotteryActionLog", reflect.TypeOf((*MockDao)(nil).AddCacheLotteryActionLog), c, sid, mid, list)
}

// AddLotteryActionLog mocks base method
func (m *MockDao) AddLotteryActionLog(c context.Context, sid, mid int64, list []*lottery.RecordDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLotteryActionLog", c, sid, mid, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLotteryActionLog indicates an expected call of AddLotteryActionLog
func (mr *MockDaoMockRecorder) AddLotteryActionLog(c, sid, mid, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLotteryActionLog", reflect.TypeOf((*MockDao)(nil).AddLotteryActionLog), c, sid, mid, list)
}

// CacheSendGiftNum mocks base method
func (m *MockDao) CacheSendGiftNum(c context.Context, sid int64, giftIds []int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheSendGiftNum", c, sid, giftIds)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheSendGiftNum indicates an expected call of CacheSendGiftNum
func (mr *MockDaoMockRecorder) CacheSendGiftNum(c, sid, giftIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheSendGiftNum", reflect.TypeOf((*MockDao)(nil).CacheSendGiftNum), c, sid, giftIds)
}

// IncrGiftSendNum mocks base method
func (m *MockDao) IncrGiftSendNum(c context.Context, sid int64, giftIDNum map[int64]int) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrGiftSendNum", c, sid, giftIDNum)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrGiftSendNum indicates an expected call of IncrGiftSendNum
func (mr *MockDaoMockRecorder) IncrGiftSendNum(c, sid, giftIDNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrGiftSendNum", reflect.TypeOf((*MockDao)(nil).IncrGiftSendNum), c, sid, giftIDNum)
}

// CacheSendDayGiftNum mocks base method
func (m *MockDao) CacheSendDayGiftNum(c context.Context, sid int64, day string, giftKeys []string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheSendDayGiftNum", c, sid, day, giftKeys)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheSendDayGiftNum indicates an expected call of CacheSendDayGiftNum
func (mr *MockDaoMockRecorder) CacheSendDayGiftNum(c, sid, day, giftKeys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheSendDayGiftNum", reflect.TypeOf((*MockDao)(nil).CacheSendDayGiftNum), c, sid, day, giftKeys)
}

// AddCacheMemberGroup mocks base method
func (m *MockDao) AddCacheMemberGroup(c context.Context, sid string, list []*lottery.MemberGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheMemberGroup", c, sid, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheMemberGroup indicates an expected call of AddCacheMemberGroup
func (mr *MockDaoMockRecorder) AddCacheMemberGroup(c, sid, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheMemberGroup", reflect.TypeOf((*MockDao)(nil).AddCacheMemberGroup), c, sid, list)
}

// DeleteMemberGroup mocks base method
func (m *MockDao) DeleteMemberGroup(c context.Context, sid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemberGroup", c, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemberGroup indicates an expected call of DeleteMemberGroup
func (mr *MockDaoMockRecorder) DeleteMemberGroup(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemberGroup", reflect.TypeOf((*MockDao)(nil).DeleteMemberGroup), c, sid)
}

// CacheMemberGroup mocks base method
func (m *MockDao) CacheMemberGroup(c context.Context, sid string) ([]*lottery.MemberGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheMemberGroup", c, sid)
	ret0, _ := ret[0].([]*lottery.MemberGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheMemberGroup indicates an expected call of CacheMemberGroup
func (mr *MockDaoMockRecorder) CacheMemberGroup(c, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheMemberGroup", reflect.TypeOf((*MockDao)(nil).CacheMemberGroup), c, sid)
}

// IncrGiftSendDayNum mocks base method
func (m *MockDao) IncrGiftSendDayNum(c context.Context, sid int64, day string, giftKeysNum map[string]int) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrGiftSendDayNum", c, sid, day, giftKeysNum)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrGiftSendDayNum indicates an expected call of IncrGiftSendDayNum
func (mr *MockDaoMockRecorder) IncrGiftSendDayNum(c, sid, day, giftKeysNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrGiftSendDayNum", reflect.TypeOf((*MockDao)(nil).IncrGiftSendDayNum), c, sid, day, giftKeysNum)
}

// CacheLotteryMcNum mocks base method
func (m *MockDao) CacheLotteryMcNum(c context.Context, sid int64, high, mc int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheLotteryMcNum", c, sid, high, mc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheLotteryMcNum indicates an expected call of CacheLotteryMcNum
func (mr *MockDaoMockRecorder) CacheLotteryMcNum(c, sid, high, mc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheLotteryMcNum", reflect.TypeOf((*MockDao)(nil).CacheLotteryMcNum), c, sid, high, mc)
}

// AddCacheLotteryMcNum mocks base method
func (m *MockDao) AddCacheLotteryMcNum(c context.Context, sid int64, high, mc int, val int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLotteryMcNum", c, sid, high, mc, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLotteryMcNum indicates an expected call of AddCacheLotteryMcNum
func (mr *MockDaoMockRecorder) AddCacheLotteryMcNum(c, sid, high, mc, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLotteryMcNum", reflect.TypeOf((*MockDao)(nil).AddCacheLotteryMcNum), c, sid, high, mc, val)
}

// AddCacheLotteryWinList mocks base method
func (m *MockDao) AddCacheLotteryWinList(c context.Context, sid int64, list []*lottery.GiftMid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCacheLotteryWinList", c, sid, list)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCacheLotteryWinList indicates an expected call of AddCacheLotteryWinList
func (mr *MockDaoMockRecorder) AddCacheLotteryWinList(c, sid, list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCacheLotteryWinList", reflect.TypeOf((*MockDao)(nil).AddCacheLotteryWinList), c, sid, list)
}

// CacheQPSLimit mocks base method
func (m *MockDao) CacheQPSLimit(c context.Context, mid int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheQPSLimit", c, mid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheQPSLimit indicates an expected call of CacheQPSLimit
func (mr *MockDaoMockRecorder) CacheQPSLimit(c, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheQPSLimit", reflect.TypeOf((*MockDao)(nil).CacheQPSLimit), c, mid)
}

// DeleteLotteryActionLog mocks base method
func (m *MockDao) DeleteLotteryActionLog(c context.Context, sid, mid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLotteryActionLog", c, sid, mid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLotteryActionLog indicates an expected call of DeleteLotteryActionLog
func (mr *MockDaoMockRecorder) DeleteLotteryActionLog(c, sid, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLotteryActionLog", reflect.TypeOf((*MockDao)(nil).DeleteLotteryActionLog), c, sid, mid)
}

// SendSysMsg mocks base method
func (m *MockDao) SendSysMsg(c context.Context, uids []int64, mc, title, context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSysMsg", c, uids, mc, title, context, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSysMsg indicates an expected call of SendSysMsg
func (mr *MockDaoMockRecorder) SendSysMsg(c, uids, mc, title, context, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSysMsg", reflect.TypeOf((*MockDao)(nil).SendSysMsg), c, uids, mc, title, context, ip)
}

// GetMemberAddress mocks base method
func (m *MockDao) GetMemberAddress(c context.Context, id, mid int64) (*lottery.AddressInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberAddress", c, id, mid)
	ret0, _ := ret[0].(*lottery.AddressInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberAddress indicates an expected call of GetMemberAddress
func (mr *MockDaoMockRecorder) GetMemberAddress(c, id, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberAddress", reflect.TypeOf((*MockDao)(nil).GetMemberAddress), c, id, mid)
}

// SendVipBuyCoupon mocks base method
func (m *MockDao) SendVipBuyCoupon(c context.Context, clientIP, couponID, sourceActivityID, sourceBizID, uname string, sourceID, mid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVipBuyCoupon", c, clientIP, couponID, sourceActivityID, sourceBizID, uname, sourceID, mid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVipBuyCoupon indicates an expected call of SendVipBuyCoupon
func (mr *MockDaoMockRecorder) SendVipBuyCoupon(c, clientIP, couponID, sourceActivityID, sourceBizID, uname, sourceID, mid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVipBuyCoupon", reflect.TypeOf((*MockDao)(nil).SendVipBuyCoupon), c, clientIP, couponID, sourceActivityID, sourceBizID, uname, sourceID, mid)
}
