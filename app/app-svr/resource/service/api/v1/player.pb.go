// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: player.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetPlayerCustomizedPanelReq struct {
	// 视频tagid
	Tids                 []int64  `protobuf:"varint,1,rep,packed,name=tids,proto3" json:"tids" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPlayerCustomizedPanelReq) Reset()         { *m = GetPlayerCustomizedPanelReq{} }
func (m *GetPlayerCustomizedPanelReq) String() string { return proto.CompactTextString(m) }
func (*GetPlayerCustomizedPanelReq) ProtoMessage()    {}
func (*GetPlayerCustomizedPanelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{0}
}
func (m *GetPlayerCustomizedPanelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerCustomizedPanelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerCustomizedPanelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerCustomizedPanelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerCustomizedPanelReq.Merge(m, src)
}
func (m *GetPlayerCustomizedPanelReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerCustomizedPanelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerCustomizedPanelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerCustomizedPanelReq proto.InternalMessageInfo

func (m *GetPlayerCustomizedPanelReq) GetTids() []int64 {
	if m != nil {
		return m.Tids
	}
	return nil
}

type GetPlayerCustomizedPanelV2Rep struct {
	// 不存在时返回nil
	Item                 *GetPlayerCustomizedPanelRep `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetPlayerCustomizedPanelV2Rep) Reset()         { *m = GetPlayerCustomizedPanelV2Rep{} }
func (m *GetPlayerCustomizedPanelV2Rep) String() string { return proto.CompactTextString(m) }
func (*GetPlayerCustomizedPanelV2Rep) ProtoMessage()    {}
func (*GetPlayerCustomizedPanelV2Rep) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{1}
}
func (m *GetPlayerCustomizedPanelV2Rep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerCustomizedPanelV2Rep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerCustomizedPanelV2Rep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerCustomizedPanelV2Rep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerCustomizedPanelV2Rep.Merge(m, src)
}
func (m *GetPlayerCustomizedPanelV2Rep) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerCustomizedPanelV2Rep) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerCustomizedPanelV2Rep.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerCustomizedPanelV2Rep proto.InternalMessageInfo

func (m *GetPlayerCustomizedPanelV2Rep) GetItem() *GetPlayerCustomizedPanelRep {
	if m != nil {
		return m.Item
	}
	return nil
}

type GetPlayerCustomizedPanelRep struct {
	// panel配置id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 按钮素材
	BtnImg string `protobuf:"bytes,2,opt,name=btnImg,json=btn_img,proto3" json:"btn_img"`
	// 按钮文案
	BtnText string `protobuf:"bytes,3,opt,name=btnText,json=btn_text,proto3" json:"btn_text"`
	// 字体颜色
	TextColor string `protobuf:"bytes,4,opt,name=textColor,json=text_color,proto3" json:"text_color"`
	// 跳转链接
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link"`
	// 新增需求，免流试看面板，1-5为兼容方案
	Panels               []*PlayerPanel `protobuf:"bytes,6,rep,name=panels,proto3" json:"panels"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetPlayerCustomizedPanelRep) Reset()         { *m = GetPlayerCustomizedPanelRep{} }
func (m *GetPlayerCustomizedPanelRep) String() string { return proto.CompactTextString(m) }
func (*GetPlayerCustomizedPanelRep) ProtoMessage()    {}
func (*GetPlayerCustomizedPanelRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{2}
}
func (m *GetPlayerCustomizedPanelRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayerCustomizedPanelRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayerCustomizedPanelRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayerCustomizedPanelRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerCustomizedPanelRep.Merge(m, src)
}
func (m *GetPlayerCustomizedPanelRep) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayerCustomizedPanelRep) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerCustomizedPanelRep.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerCustomizedPanelRep proto.InternalMessageInfo

func (m *GetPlayerCustomizedPanelRep) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetPlayerCustomizedPanelRep) GetBtnImg() string {
	if m != nil {
		return m.BtnImg
	}
	return ""
}

func (m *GetPlayerCustomizedPanelRep) GetBtnText() string {
	if m != nil {
		return m.BtnText
	}
	return ""
}

func (m *GetPlayerCustomizedPanelRep) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *GetPlayerCustomizedPanelRep) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *GetPlayerCustomizedPanelRep) GetPanels() []*PlayerPanel {
	if m != nil {
		return m.Panels
	}
	return nil
}

type PlayerPanel struct {
	// panel配置id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 按钮素材
	BtnImg string `protobuf:"bytes,2,opt,name=btnImg,json=btn_img,proto3" json:"btn_img"`
	// 按钮文案
	BtnText string `protobuf:"bytes,3,opt,name=btnText,json=btn_text,proto3" json:"btn_text"`
	// 字体颜色
	TextColor string `protobuf:"bytes,4,opt,name=textColor,json=text_color,proto3" json:"text_color"`
	// 跳转链接
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link"`
	// 面板文案
	Label string `protobuf:"bytes,6,opt,name=label,proto3" json:"label"`
	// 展现阶段, 播放前:before_play,试看后：after_free_play
	DisplayStage string `protobuf:"bytes,7,opt,name=displayStage,json=display_stage,proto3" json:"display_stage"`
	// 运营商
	Operator             string   `protobuf:"bytes,8,opt,name=operator,proto3" json:"operator"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerPanel) Reset()         { *m = PlayerPanel{} }
func (m *PlayerPanel) String() string { return proto.CompactTextString(m) }
func (*PlayerPanel) ProtoMessage()    {}
func (*PlayerPanel) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{3}
}
func (m *PlayerPanel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerPanel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerPanel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerPanel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerPanel.Merge(m, src)
}
func (m *PlayerPanel) XXX_Size() int {
	return m.Size()
}
func (m *PlayerPanel) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerPanel.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerPanel proto.InternalMessageInfo

func (m *PlayerPanel) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerPanel) GetBtnImg() string {
	if m != nil {
		return m.BtnImg
	}
	return ""
}

func (m *PlayerPanel) GetBtnText() string {
	if m != nil {
		return m.BtnText
	}
	return ""
}

func (m *PlayerPanel) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *PlayerPanel) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *PlayerPanel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *PlayerPanel) GetDisplayStage() string {
	if m != nil {
		return m.DisplayStage
	}
	return ""
}

func (m *PlayerPanel) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func init() {
	proto.RegisterType((*GetPlayerCustomizedPanelReq)(nil), "resource.service.v1.GetPlayerCustomizedPanelReq")
	proto.RegisterType((*GetPlayerCustomizedPanelV2Rep)(nil), "resource.service.v1.GetPlayerCustomizedPanelV2Rep")
	proto.RegisterType((*GetPlayerCustomizedPanelRep)(nil), "resource.service.v1.GetPlayerCustomizedPanelRep")
	proto.RegisterType((*PlayerPanel)(nil), "resource.service.v1.PlayerPanel")
}

func init() { proto.RegisterFile("player.proto", fileDescriptor_41d803d1b635d5c6) }

var fileDescriptor_41d803d1b635d5c6 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x9d, 0xc4, 0x4d, 0x36, 0x01, 0xc1, 0x56, 0x42, 0x2b, 0x7e, 0xb2, 0x91, 0x85, 0x84,
	0x2f, 0x75, 0x69, 0x2a, 0x71, 0xe0, 0xe8, 0x56, 0x42, 0xdc, 0xaa, 0x05, 0x71, 0xe0, 0x12, 0xd9,
	0xf1, 0x60, 0x56, 0xd8, 0x59, 0x77, 0xbd, 0x8e, 0x0a, 0x2f, 0xc2, 0x0b, 0x71, 0xe0, 0xc8, 0x13,
	0xac, 0x50, 0x8e, 0x3e, 0xf2, 0x04, 0x68, 0x27, 0x69, 0x29, 0x52, 0xcb, 0x9d, 0x8b, 0xe7, 0xfb,
	0xbe, 0xf9, 0x76, 0x3c, 0x33, 0xd2, 0x90, 0x49, 0x5d, 0xa6, 0x9f, 0x41, 0xc7, 0xb5, 0x56, 0x46,
	0xd1, 0x7d, 0x0d, 0x8d, 0x6a, 0xf5, 0x12, 0xe2, 0x06, 0xf4, 0x5a, 0x2e, 0x21, 0x5e, 0x1f, 0x3d,
	0x3c, 0x28, 0xa4, 0xf9, 0xd8, 0x66, 0xf1, 0x52, 0x55, 0x87, 0x85, 0x2a, 0xd4, 0x21, 0x7a, 0xb3,
	0xf6, 0x03, 0x32, 0x24, 0x88, 0xb6, 0x35, 0x42, 0x41, 0x1e, 0xbd, 0x02, 0x73, 0x86, 0x65, 0x4f,
	0xda, 0xc6, 0xa8, 0x4a, 0x7e, 0x81, 0xfc, 0x2c, 0x5d, 0x41, 0x29, 0xe0, 0x9c, 0x1e, 0x93, 0xbe,
	0x91, 0x79, 0xc3, 0xbc, 0x59, 0x2f, 0xea, 0x25, 0xbc, 0xb3, 0x1c, 0xf9, 0x2f, 0xcb, 0xf7, 0xd7,
	0x69, 0x29, 0xf3, 0xd4, 0xc0, 0xcb, 0x50, 0xc3, 0x79, 0x2b, 0x35, 0xe4, 0xa1, 0xc0, 0x64, 0x08,
	0xe4, 0xc9, 0x6d, 0x35, 0xdf, 0xcd, 0x05, 0xd4, 0xf4, 0x94, 0xf4, 0xa5, 0x81, 0x8a, 0x79, 0x33,
	0x2f, 0x1a, 0xcf, 0x9f, 0xc7, 0x37, 0xcc, 0x11, 0xdf, 0xde, 0x55, 0x2d, 0xf0, 0x75, 0xf8, 0xd5,
	0xff, 0x57, 0xef, 0x35, 0x7d, 0x40, 0x7c, 0x99, 0xe3, 0x3f, 0x06, 0x49, 0xd0, 0x59, 0xee, 0xcb,
	0x5c, 0xf8, 0x32, 0xa7, 0x4f, 0x49, 0x90, 0x99, 0xd5, 0xeb, 0xaa, 0x60, 0xfe, 0xcc, 0x8b, 0x46,
	0xc9, 0xb8, 0xb3, 0x7c, 0x2f, 0x33, 0xab, 0x85, 0xac, 0x0a, 0x71, 0x09, 0xe8, 0x33, 0xe2, 0xe0,
	0x5b, 0xb8, 0x30, 0xac, 0x87, 0xb6, 0x49, 0x67, 0xf9, 0xd0, 0x65, 0x0d, 0x5c, 0x18, 0x71, 0x85,
	0xe8, 0x01, 0x19, 0xb9, 0x78, 0xa2, 0x4a, 0xa5, 0x59, 0x1f, 0xad, 0x77, 0x3b, 0xcb, 0x89, 0x13,
	0x17, 0x4b, 0xa7, 0x8a, 0x6b, 0x98, 0x3e, 0x26, 0xfd, 0x52, 0xae, 0x3e, 0xb1, 0x01, 0x3a, 0x87,
	0x6e, 0xa3, 0x8e, 0x0b, 0xfc, 0xd2, 0x53, 0x12, 0xd4, 0xae, 0xff, 0x86, 0x05, 0xb3, 0x5e, 0x34,
	0x9e, 0xcf, 0x6e, 0xdc, 0xcd, 0x76, 0x64, 0x1c, 0x34, 0x21, 0x9d, 0xe5, 0xbb, 0x37, 0x62, 0x17,
	0xc3, 0x6f, 0x3e, 0x19, 0x5f, 0xf3, 0xfc, 0x97, 0x9b, 0xe0, 0x64, 0x50, 0xa6, 0x19, 0x94, 0x2c,
	0xc0, 0xf4, 0xa8, 0xb3, 0x7c, 0x2b, 0x88, 0x6d, 0xa0, 0x2f, 0xc8, 0x24, 0x97, 0x8d, 0x3b, 0x88,
	0x37, 0x26, 0x2d, 0x80, 0xed, 0xa1, 0xef, 0x7e, 0x67, 0xf9, 0x9d, 0x9d, 0xbe, 0x68, 0x5c, 0x42,
	0xfc, 0x4d, 0x69, 0x44, 0x86, 0xaa, 0x06, 0x9d, 0x1a, 0xa5, 0xd9, 0xf0, 0xcf, 0x3c, 0x97, 0x9a,
	0xb8, 0x42, 0xc9, 0xbd, 0xef, 0x9b, 0xa9, 0xf7, 0x63, 0x33, 0xf5, 0x7e, 0x6e, 0xa6, 0xde, 0x7b,
	0x7f, 0x7d, 0x94, 0x05, 0x78, 0x34, 0xc7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xab, 0x3b,
	0xb1, 0x88, 0x03, 0x00, 0x00,
}

func (m *GetPlayerCustomizedPanelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerCustomizedPanelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerCustomizedPanelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tids) > 0 {
		dAtA2 := make([]byte, len(m.Tids)*10)
		var j1 int
		for _, num1 := range m.Tids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPlayer(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerCustomizedPanelV2Rep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerCustomizedPanelV2Rep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerCustomizedPanelV2Rep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPlayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPlayerCustomizedPanelRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayerCustomizedPanelRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPlayerCustomizedPanelRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Panels) > 0 {
		for iNdEx := len(m.Panels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Panels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPlayer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BtnText) > 0 {
		i -= len(m.BtnText)
		copy(dAtA[i:], m.BtnText)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.BtnText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BtnImg) > 0 {
		i -= len(m.BtnImg)
		copy(dAtA[i:], m.BtnImg)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.BtnImg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerPanel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerPanel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerPanel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DisplayStage) > 0 {
		i -= len(m.DisplayStage)
		copy(dAtA[i:], m.DisplayStage)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.DisplayStage)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BtnText) > 0 {
		i -= len(m.BtnText)
		copy(dAtA[i:], m.BtnText)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.BtnText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BtnImg) > 0 {
		i -= len(m.BtnImg)
		copy(dAtA[i:], m.BtnImg)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.BtnImg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayer(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPlayerCustomizedPanelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tids) > 0 {
		l = 0
		for _, e := range m.Tids {
			l += sovPlayer(uint64(e))
		}
		n += 1 + sovPlayer(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPlayerCustomizedPanelV2Rep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovPlayer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPlayerCustomizedPanelRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlayer(uint64(m.Id))
	}
	l = len(m.BtnImg)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.BtnText)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	if len(m.Panels) > 0 {
		for _, e := range m.Panels {
			l = e.Size()
			n += 1 + l + sovPlayer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlayer(uint64(m.Id))
	}
	l = len(m.BtnImg)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.BtnText)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.DisplayStage)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPlayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayer(x uint64) (n int) {
	return sovPlayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetPlayerCustomizedPanelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerCustomizedPanelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerCustomizedPanelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tids = append(m.Tids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPlayer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPlayer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tids) == 0 {
					m.Tids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tids = append(m.Tids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerCustomizedPanelV2Rep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerCustomizedPanelV2Rep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerCustomizedPanelV2Rep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &GetPlayerCustomizedPanelRep{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayerCustomizedPanelRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayerCustomizedPanelRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayerCustomizedPanelRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtnImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtnText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Panels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Panels = append(m.Panels, &PlayerPanel{})
			if err := m.Panels[len(m.Panels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerPanel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPanel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPanel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtnImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtnText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayer = fmt.Errorf("proto: unexpected end of group")
)
