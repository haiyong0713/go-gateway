// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

package poll

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	go_common_library_time "go-common/library/time"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PollOption struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PollId               int64    `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Image                string   `protobuf:"bytes,4,opt,name=image,proto3" json:"image"`
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group"`
	IsDeleted            bool     `protobuf:"varint,6,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollOption) Reset()         { *m = PollOption{} }
func (m *PollOption) String() string { return proto.CompactTextString(m) }
func (*PollOption) ProtoMessage()    {}
func (*PollOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}
func (m *PollOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOption.Merge(m, src)
}
func (m *PollOption) XXX_Size() int {
	return m.Size()
}
func (m *PollOption) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOption.DiscardUnknown(m)
}

var xxx_messageInfo_PollOption proto.InternalMessageInfo

func (m *PollOption) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PollOption) GetPollId() int64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *PollOption) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PollOption) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PollOption) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PollOption) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type PollOptionStat struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PollId               int64    `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id"`
	PollOptionId         int64    `protobuf:"varint,3,opt,name=poll_option_id,json=pollOptionId,proto3" json:"poll_option_id"`
	TicketSum            int64    `protobuf:"varint,4,opt,name=ticket_sum,json=ticketSum,proto3" json:"ticket_sum"`
	VoteSum              int64    `protobuf:"varint,5,opt,name=vote_sum,json=voteSum,proto3" json:"vote_sum"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollOptionStat) Reset()         { *m = PollOptionStat{} }
func (m *PollOptionStat) String() string { return proto.CompactTextString(m) }
func (*PollOptionStat) ProtoMessage()    {}
func (*PollOptionStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}
func (m *PollOptionStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptionStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptionStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptionStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptionStat.Merge(m, src)
}
func (m *PollOptionStat) XXX_Size() int {
	return m.Size()
}
func (m *PollOptionStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptionStat.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptionStat proto.InternalMessageInfo

func (m *PollOptionStat) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PollOptionStat) GetPollId() int64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *PollOptionStat) GetPollOptionId() int64 {
	if m != nil {
		return m.PollOptionId
	}
	return 0
}

func (m *PollOptionStat) GetTicketSum() int64 {
	if m != nil {
		return m.TicketSum
	}
	return 0
}

func (m *PollOptionStat) GetVoteSum() int64 {
	if m != nil {
		return m.VoteSum
	}
	return 0
}

type PollMeta struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	UniqueTable          bool     `protobuf:"varint,3,opt,name=unique_table,json=uniqueTable,proto3" json:"unique_table"`
	Repeatable           bool     `protobuf:"varint,4,opt,name=repeatable,proto3" json:"repeatable"`
	DailyChance          int64    `protobuf:"varint,5,opt,name=daily_chance,json=dailyChance,proto3" json:"daily_chance"`
	VoteMaximum          int64    `protobuf:"varint,6,opt,name=vote_maximum,json=voteMaximum,proto3" json:"vote_maximum"`
	EndAt                int64    `protobuf:"varint,7,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollMeta) Reset()         { *m = PollMeta{} }
func (m *PollMeta) String() string { return proto.CompactTextString(m) }
func (*PollMeta) ProtoMessage()    {}
func (*PollMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{2}
}
func (m *PollMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollMeta.Merge(m, src)
}
func (m *PollMeta) XXX_Size() int {
	return m.Size()
}
func (m *PollMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_PollMeta.DiscardUnknown(m)
}

var xxx_messageInfo_PollMeta proto.InternalMessageInfo

func (m *PollMeta) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PollMeta) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PollMeta) GetUniqueTable() bool {
	if m != nil {
		return m.UniqueTable
	}
	return false
}

func (m *PollMeta) GetRepeatable() bool {
	if m != nil {
		return m.Repeatable
	}
	return false
}

func (m *PollMeta) GetDailyChance() int64 {
	if m != nil {
		return m.DailyChance
	}
	return 0
}

func (m *PollMeta) GetVoteMaximum() int64 {
	if m != nil {
		return m.VoteMaximum
	}
	return 0
}

func (m *PollMeta) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

type PollVote struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PollId               int64    `protobuf:"varint,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid"`
	PollOptionId         int64    `protobuf:"varint,4,opt,name=poll_option_id,json=pollOptionId,proto3" json:"poll_option_id"`
	TicketCount          int64    `protobuf:"varint,5,opt,name=ticket_count,json=ticketCount,proto3" json:"ticket_count"`
	VoteAt               int64    `protobuf:"varint,6,opt,name=vote_at,json=voteAt,proto3" json:"vote_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollVote) Reset()         { *m = PollVote{} }
func (m *PollVote) String() string { return proto.CompactTextString(m) }
func (*PollVote) ProtoMessage()    {}
func (*PollVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{3}
}
func (m *PollVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollVote.Merge(m, src)
}
func (m *PollVote) XXX_Size() int {
	return m.Size()
}
func (m *PollVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PollVote.DiscardUnknown(m)
}

var xxx_messageInfo_PollVote proto.InternalMessageInfo

func (m *PollVote) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PollVote) GetPollId() int64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *PollVote) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PollVote) GetPollOptionId() int64 {
	if m != nil {
		return m.PollOptionId
	}
	return 0
}

func (m *PollVote) GetTicketCount() int64 {
	if m != nil {
		return m.TicketCount
	}
	return 0
}

func (m *PollVote) GetVoteAt() int64 {
	if m != nil {
		return m.VoteAt
	}
	return 0
}

type PollVoteUserStat struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	PollId               int64                       `protobuf:"varint,3,opt,name=poll_id,json=pollId,proto3" json:"poll_id"`
	Date                 go_common_library_time.Time `protobuf:"varint,4,opt,name=date,proto3,casttype=go-common/library/time.Time" json:"date"`
	VoteCount            int64                       `protobuf:"varint,5,opt,name=vote_count,json=voteCount,proto3" json:"vote_count"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PollVoteUserStat) Reset()         { *m = PollVoteUserStat{} }
func (m *PollVoteUserStat) String() string { return proto.CompactTextString(m) }
func (*PollVoteUserStat) ProtoMessage()    {}
func (*PollVoteUserStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{4}
}
func (m *PollVoteUserStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollVoteUserStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollVoteUserStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollVoteUserStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollVoteUserStat.Merge(m, src)
}
func (m *PollVoteUserStat) XXX_Size() int {
	return m.Size()
}
func (m *PollVoteUserStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PollVoteUserStat.DiscardUnknown(m)
}

var xxx_messageInfo_PollVoteUserStat proto.InternalMessageInfo

func (m *PollVoteUserStat) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PollVoteUserStat) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PollVoteUserStat) GetPollId() int64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *PollVoteUserStat) GetDate() go_common_library_time.Time {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *PollVoteUserStat) GetVoteCount() int64 {
	if m != nil {
		return m.VoteCount
	}
	return 0
}

func init() {
	proto.RegisterType((*PollOption)(nil), "PollOption")
	proto.RegisterType((*PollOptionStat)(nil), "PollOptionStat")
	proto.RegisterType((*PollMeta)(nil), "PollMeta")
	proto.RegisterType((*PollVote)(nil), "PollVote")
	proto.RegisterType((*PollVoteUserStat)(nil), "PollVoteUserStat")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x31, 0x6f, 0xdb, 0x3c,
	0x10, 0x85, 0x24, 0x5b, 0xb6, 0x29, 0x23, 0x08, 0x34, 0x7c, 0xd0, 0xd7, 0x02, 0x61, 0x6a, 0x14,
	0x48, 0x96, 0xd8, 0x43, 0x96, 0x02, 0x9d, 0xe2, 0x74, 0xc9, 0x10, 0xb4, 0x60, 0xd2, 0x0e, 0x5d,
	0x04, 0x5a, 0x64, 0x15, 0xa2, 0xa2, 0xa8, 0xca, 0x54, 0xd1, 0xfc, 0xb0, 0xfe, 0x87, 0x8e, 0xdd,
	0xba, 0x14, 0x42, 0x90, 0x51, 0xbf, 0xa0, 0xe8, 0x54, 0xf0, 0xa8, 0x58, 0x6a, 0x11, 0x17, 0x05,
	0xb2, 0x98, 0xf7, 0x1e, 0x1f, 0xcd, 0x7b, 0x77, 0x47, 0xa1, 0x40, 0x2a, 0xc6, 0xb3, 0x79, 0x51,
	0x2a, 0xad, 0x1e, 0x1d, 0xa5, 0x42, 0x5f, 0x55, 0xab, 0x79, 0xa2, 0xe4, 0x22, 0x55, 0xa9, 0x5a,
	0x00, 0xbd, 0xaa, 0xde, 0x01, 0x02, 0x00, 0x91, 0x95, 0xcf, 0xbe, 0x3b, 0x08, 0xbd, 0x52, 0x59,
	0xf6, 0xb2, 0xd0, 0x42, 0xe5, 0xe1, 0x7f, 0xc8, 0x15, 0x2c, 0x72, 0xf6, 0x9d, 0x43, 0x6f, 0xe9,
	0x37, 0x35, 0x76, 0x05, 0x23, 0xae, 0x60, 0xe1, 0x53, 0x34, 0x2a, 0x54, 0x96, 0xc5, 0x82, 0x45,
	0x2e, 0x6c, 0x06, 0x4d, 0x8d, 0xef, 0x28, 0xe2, 0x9b, 0xe0, 0x8c, 0x85, 0x18, 0x0d, 0xb5, 0xd0,
	0x19, 0x8f, 0xbc, 0x7d, 0xe7, 0x70, 0xb2, 0x9c, 0x34, 0x35, 0xb6, 0x04, 0xb1, 0x8b, 0x11, 0x08,
	0x49, 0x53, 0x1e, 0x0d, 0x3a, 0x01, 0x10, 0xc4, 0x2e, 0x46, 0x90, 0x96, 0xaa, 0x2a, 0xa2, 0x61,
	0x27, 0x00, 0x82, 0xd8, 0x25, 0x3c, 0x42, 0x48, 0xac, 0x63, 0xc6, 0x33, 0xae, 0x39, 0x8b, 0xfc,
	0x7d, 0xe7, 0x70, 0xbc, 0xdc, 0x69, 0x6a, 0xdc, 0x63, 0xc9, 0x44, 0xac, 0x5f, 0xd8, 0x70, 0x76,
	0xe3, 0xa0, 0x9d, 0xce, 0xde, 0x85, 0xa6, 0xfa, 0x81, 0x16, 0x9f, 0xa1, 0x1d, 0xa0, 0x14, 0xfc,
	0xa1, 0x11, 0x7b, 0x20, 0x0e, 0x9b, 0x1a, 0xff, 0xb1, 0x43, 0xa6, 0xc5, 0xe6, 0xe6, 0x33, 0x66,
	0x32, 0xd7, 0x22, 0x79, 0xcf, 0x75, 0xbc, 0xae, 0x24, 0x14, 0xc0, 0xb3, 0x99, 0x77, 0x2c, 0x99,
	0xd8, 0xf8, 0xa2, 0x92, 0xe1, 0x01, 0x1a, 0x7f, 0x54, 0x9a, 0x83, 0x78, 0x08, 0xe2, 0x69, 0x53,
	0xe3, 0x0d, 0x47, 0x46, 0x26, 0xba, 0xa8, 0xe4, 0xec, 0xb3, 0x8b, 0xc6, 0xc6, 0xe2, 0x39, 0xd7,
	0x74, 0xab, 0xb9, 0x4d, 0x67, 0xdc, 0x2d, 0x9d, 0x39, 0x46, 0xd3, 0x2a, 0x17, 0x1f, 0x2a, 0x1e,
	0x6b, 0xba, 0x6a, 0x3b, 0x38, 0x5e, 0xee, 0x36, 0x35, 0xfe, 0x8d, 0x27, 0x81, 0x45, 0x97, 0x06,
	0x84, 0x73, 0x84, 0x4a, 0x5e, 0x70, 0x6a, 0x8f, 0x0c, 0xba, 0x66, 0x74, 0x2c, 0xe9, 0xc5, 0xe6,
	0x12, 0x46, 0x45, 0x76, 0x1d, 0x27, 0x57, 0x34, 0x4f, 0x78, 0xeb, 0x0b, 0x2e, 0xe9, 0xf3, 0x24,
	0x00, 0x74, 0x0a, 0xc0, 0x1c, 0x02, 0xd3, 0x92, 0x7e, 0x12, 0xb2, 0x92, 0xd0, 0xf3, 0xf6, 0x50,
	0x9f, 0x27, 0x81, 0x41, 0xe7, 0x16, 0x84, 0x4f, 0x90, 0xcf, 0x73, 0x16, 0x53, 0x1d, 0x8d, 0x40,
	0x8e, 0x9a, 0x1a, 0xb7, 0x0c, 0x19, 0xf2, 0x9c, 0x9d, 0xe8, 0xd9, 0x0f, 0xc7, 0xd6, 0xed, 0x8d,
	0xd2, 0xfc, 0x81, 0x43, 0xf1, 0x3f, 0xf2, 0xe4, 0x66, 0x12, 0x46, 0x4d, 0x8d, 0x0d, 0x24, 0xe6,
	0xe7, 0x9e, 0x79, 0x19, 0xfc, 0xe3, 0xbc, 0x1c, 0xa3, 0x69, 0x3b, 0x19, 0x89, 0xaa, 0x72, 0xdd,
	0x2f, 0x56, 0x9f, 0x27, 0x81, 0x45, 0xa7, 0x06, 0x98, 0x7c, 0xa1, 0x28, 0x54, 0xb7, 0x75, 0x82,
	0x7c, 0x5b, 0x8a, 0xf8, 0x26, 0x38, 0xd1, 0xb3, 0x6f, 0x0e, 0xda, 0xbd, 0xb3, 0xfe, 0x7a, 0xcd,
	0xcb, 0xbf, 0xbe, 0x8b, 0xd6, 0x9c, 0x7b, 0x8f, 0xb9, 0x5e, 0x75, 0xbc, 0xed, 0xd5, 0x79, 0x8e,
	0x06, 0x8c, 0x6a, 0xde, 0x1a, 0x3f, 0x68, 0x6a, 0x0c, 0xf8, 0x67, 0x8d, 0x1f, 0xa7, 0xea, 0x28,
	0x51, 0x52, 0xaa, 0x7c, 0x91, 0x89, 0x55, 0x49, 0xcb, 0xeb, 0x85, 0x16, 0x92, 0xcf, 0x2f, 0x85,
	0xe4, 0x04, 0x44, 0xe6, 0xd5, 0x40, 0xf6, 0xfd, 0x1a, 0xc0, 0x88, 0x75, 0x2c, 0x99, 0x98, 0x18,
	0xfc, 0x2f, 0xc3, 0x2f, 0xb7, 0x7b, 0xce, 0xd7, 0xdb, 0x3d, 0xe7, 0xe6, 0x76, 0xcf, 0x79, 0x3b,
	0x30, 0x19, 0xac, 0x7c, 0xf8, 0xd2, 0x1d, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x52, 0xfb, 0x22,
	0x82, 0x27, 0x05, 0x00, 0x00,
}

func (m *PollOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Id))
	}
	if m.PollId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.PollId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Group) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Group)))
		i += copy(dAtA[i:], m.Group)
	}
	if m.IsDeleted {
		dAtA[i] = 0x30
		i++
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PollOptionStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptionStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Id))
	}
	if m.PollId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.PollId))
	}
	if m.PollOptionId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.PollOptionId))
	}
	if m.TicketSum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.TicketSum))
	}
	if m.VoteSum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VoteSum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PollMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.UniqueTable {
		dAtA[i] = 0x18
		i++
		if m.UniqueTable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Repeatable {
		dAtA[i] = 0x20
		i++
		if m.Repeatable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DailyChance != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.DailyChance))
	}
	if m.VoteMaximum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VoteMaximum))
	}
	if m.EndAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.EndAt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PollVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Id))
	}
	if m.PollId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.PollId))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if m.PollOptionId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.PollOptionId))
	}
	if m.TicketCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.TicketCount))
	}
	if m.VoteAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VoteAt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PollVoteUserStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollVoteUserStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Id))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if m.PollId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.PollId))
	}
	if m.Date != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Date))
	}
	if m.VoteCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VoteCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PollOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModel(uint64(m.Id))
	}
	if m.PollId != 0 {
		n += 1 + sovModel(uint64(m.PollId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollOptionStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModel(uint64(m.Id))
	}
	if m.PollId != 0 {
		n += 1 + sovModel(uint64(m.PollId))
	}
	if m.PollOptionId != 0 {
		n += 1 + sovModel(uint64(m.PollOptionId))
	}
	if m.TicketSum != 0 {
		n += 1 + sovModel(uint64(m.TicketSum))
	}
	if m.VoteSum != 0 {
		n += 1 + sovModel(uint64(m.VoteSum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModel(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.UniqueTable {
		n += 2
	}
	if m.Repeatable {
		n += 2
	}
	if m.DailyChance != 0 {
		n += 1 + sovModel(uint64(m.DailyChance))
	}
	if m.VoteMaximum != 0 {
		n += 1 + sovModel(uint64(m.VoteMaximum))
	}
	if m.EndAt != 0 {
		n += 1 + sovModel(uint64(m.EndAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModel(uint64(m.Id))
	}
	if m.PollId != 0 {
		n += 1 + sovModel(uint64(m.PollId))
	}
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	if m.PollOptionId != 0 {
		n += 1 + sovModel(uint64(m.PollOptionId))
	}
	if m.TicketCount != 0 {
		n += 1 + sovModel(uint64(m.TicketCount))
	}
	if m.VoteAt != 0 {
		n += 1 + sovModel(uint64(m.VoteAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PollVoteUserStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModel(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	if m.PollId != 0 {
		n += 1 + sovModel(uint64(m.PollId))
	}
	if m.Date != 0 {
		n += 1 + sovModel(uint64(m.Date))
	}
	if m.VoteCount != 0 {
		n += 1 + sovModel(uint64(m.VoteCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PollOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptionStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptionStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptionStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollOptionId", wireType)
			}
			m.PollOptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollOptionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketSum", wireType)
			}
			m.TicketSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketSum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteSum", wireType)
			}
			m.VoteSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteSum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueTable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UniqueTable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repeatable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Repeatable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyChance", wireType)
			}
			m.DailyChance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyChance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteMaximum", wireType)
			}
			m.VoteMaximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteMaximum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollOptionId", wireType)
			}
			m.PollOptionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollOptionId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketCount", wireType)
			}
			m.TicketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteAt", wireType)
			}
			m.VoteAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollVoteUserStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollVoteUserStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollVoteUserStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteCount", wireType)
			}
			m.VoteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)
