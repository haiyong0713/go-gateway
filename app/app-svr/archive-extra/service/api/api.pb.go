// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/archive-extra/service/api/api.proto

// use {app_id}.{version} as package name

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddArchiveExtraValueReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" form: "biz_type" validate:"required"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty" form: "biz_value" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddArchiveExtraValueReq) Reset()         { *m = AddArchiveExtraValueReq{} }
func (m *AddArchiveExtraValueReq) String() string { return proto.CompactTextString(m) }
func (*AddArchiveExtraValueReq) ProtoMessage()    {}
func (*AddArchiveExtraValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{0}
}
func (m *AddArchiveExtraValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddArchiveExtraValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddArchiveExtraValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddArchiveExtraValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddArchiveExtraValueReq.Merge(m, src)
}
func (m *AddArchiveExtraValueReq) XXX_Size() int {
	return m.Size()
}
func (m *AddArchiveExtraValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddArchiveExtraValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddArchiveExtraValueReq proto.InternalMessageInfo

func (m *AddArchiveExtraValueReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AddArchiveExtraValueReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AddArchiveExtraValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BatchAddArchiveExtraValueReq struct {
	Key                  string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" validate:"required"`
	AidValues            map[int64]string `protobuf:"bytes,2,rep,name=aid_values,json=aidValues,proto3" json:"aid_values,omitempty" validate:"required" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BatchAddArchiveExtraValueReq) Reset()         { *m = BatchAddArchiveExtraValueReq{} }
func (m *BatchAddArchiveExtraValueReq) String() string { return proto.CompactTextString(m) }
func (*BatchAddArchiveExtraValueReq) ProtoMessage()    {}
func (*BatchAddArchiveExtraValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{1}
}
func (m *BatchAddArchiveExtraValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchAddArchiveExtraValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchAddArchiveExtraValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchAddArchiveExtraValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchAddArchiveExtraValueReq.Merge(m, src)
}
func (m *BatchAddArchiveExtraValueReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchAddArchiveExtraValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchAddArchiveExtraValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchAddArchiveExtraValueReq proto.InternalMessageInfo

func (m *BatchAddArchiveExtraValueReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *BatchAddArchiveExtraValueReq) GetAidValues() map[int64]string {
	if m != nil {
		return m.AidValues
	}
	return nil
}

type RemoveArchiveExtraValueReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveArchiveExtraValueReq) Reset()         { *m = RemoveArchiveExtraValueReq{} }
func (m *RemoveArchiveExtraValueReq) String() string { return proto.CompactTextString(m) }
func (*RemoveArchiveExtraValueReq) ProtoMessage()    {}
func (*RemoveArchiveExtraValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{2}
}
func (m *RemoveArchiveExtraValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveArchiveExtraValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveArchiveExtraValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveArchiveExtraValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveArchiveExtraValueReq.Merge(m, src)
}
func (m *RemoveArchiveExtraValueReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveArchiveExtraValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveArchiveExtraValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveArchiveExtraValueReq proto.InternalMessageInfo

func (m *RemoveArchiveExtraValueReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *RemoveArchiveExtraValueReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type BatchRemoveArchiveExtraValueReq struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" validate:"required"`
	Aids                 []int64  `protobuf:"varint,2,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,dive,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchRemoveArchiveExtraValueReq) Reset()         { *m = BatchRemoveArchiveExtraValueReq{} }
func (m *BatchRemoveArchiveExtraValueReq) String() string { return proto.CompactTextString(m) }
func (*BatchRemoveArchiveExtraValueReq) ProtoMessage()    {}
func (*BatchRemoveArchiveExtraValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{3}
}
func (m *BatchRemoveArchiveExtraValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchRemoveArchiveExtraValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchRemoveArchiveExtraValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchRemoveArchiveExtraValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRemoveArchiveExtraValueReq.Merge(m, src)
}
func (m *BatchRemoveArchiveExtraValueReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchRemoveArchiveExtraValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRemoveArchiveExtraValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRemoveArchiveExtraValueReq proto.InternalMessageInfo

func (m *BatchRemoveArchiveExtraValueReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *BatchRemoveArchiveExtraValueReq) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

type GetArchiveExtraValueReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetArchiveExtraValueReq) Reset()         { *m = GetArchiveExtraValueReq{} }
func (m *GetArchiveExtraValueReq) String() string { return proto.CompactTextString(m) }
func (*GetArchiveExtraValueReq) ProtoMessage()    {}
func (*GetArchiveExtraValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{4}
}
func (m *GetArchiveExtraValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArchiveExtraValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArchiveExtraValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArchiveExtraValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArchiveExtraValueReq.Merge(m, src)
}
func (m *GetArchiveExtraValueReq) XXX_Size() int {
	return m.Size()
}
func (m *GetArchiveExtraValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArchiveExtraValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetArchiveExtraValueReq proto.InternalMessageInfo

func (m *GetArchiveExtraValueReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type BatchGetArchiveExtraValueReq struct {
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,dive,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetArchiveExtraValueReq) Reset()         { *m = BatchGetArchiveExtraValueReq{} }
func (m *BatchGetArchiveExtraValueReq) String() string { return proto.CompactTextString(m) }
func (*BatchGetArchiveExtraValueReq) ProtoMessage()    {}
func (*BatchGetArchiveExtraValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{5}
}
func (m *BatchGetArchiveExtraValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchGetArchiveExtraValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchGetArchiveExtraValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchGetArchiveExtraValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetArchiveExtraValueReq.Merge(m, src)
}
func (m *BatchGetArchiveExtraValueReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchGetArchiveExtraValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetArchiveExtraValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetArchiveExtraValueReq proto.InternalMessageInfo

func (m *BatchGetArchiveExtraValueReq) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

type GetArchiveExtraBasedOnKeysReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"required"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty" validate:"max=50,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetArchiveExtraBasedOnKeysReq) Reset()         { *m = GetArchiveExtraBasedOnKeysReq{} }
func (m *GetArchiveExtraBasedOnKeysReq) String() string { return proto.CompactTextString(m) }
func (*GetArchiveExtraBasedOnKeysReq) ProtoMessage()    {}
func (*GetArchiveExtraBasedOnKeysReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{6}
}
func (m *GetArchiveExtraBasedOnKeysReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArchiveExtraBasedOnKeysReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArchiveExtraBasedOnKeysReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArchiveExtraBasedOnKeysReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArchiveExtraBasedOnKeysReq.Merge(m, src)
}
func (m *GetArchiveExtraBasedOnKeysReq) XXX_Size() int {
	return m.Size()
}
func (m *GetArchiveExtraBasedOnKeysReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArchiveExtraBasedOnKeysReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetArchiveExtraBasedOnKeysReq proto.InternalMessageInfo

func (m *GetArchiveExtraBasedOnKeysReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *GetArchiveExtraBasedOnKeysReq) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ArchiveExtraValueReply struct {
	ExtraInfo            map[string]string `protobuf:"bytes,1,rep,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ArchiveExtraValueReply) Reset()         { *m = ArchiveExtraValueReply{} }
func (m *ArchiveExtraValueReply) String() string { return proto.CompactTextString(m) }
func (*ArchiveExtraValueReply) ProtoMessage()    {}
func (*ArchiveExtraValueReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{7}
}
func (m *ArchiveExtraValueReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveExtraValueReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveExtraValueReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveExtraValueReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveExtraValueReply.Merge(m, src)
}
func (m *ArchiveExtraValueReply) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveExtraValueReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveExtraValueReply.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveExtraValueReply proto.InternalMessageInfo

func (m *ArchiveExtraValueReply) GetExtraInfo() map[string]string {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

type MultiArchiveExtraValueReply struct {
	// aid为key的稿件额外信息
	ExtraInfos           map[int64]*ArchiveExtraValueReply `protobuf:"bytes,2,rep,name=extra_infos,json=extraInfos,proto3" json:"extra_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *MultiArchiveExtraValueReply) Reset()         { *m = MultiArchiveExtraValueReply{} }
func (m *MultiArchiveExtraValueReply) String() string { return proto.CompactTextString(m) }
func (*MultiArchiveExtraValueReply) ProtoMessage()    {}
func (*MultiArchiveExtraValueReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{8}
}
func (m *MultiArchiveExtraValueReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiArchiveExtraValueReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiArchiveExtraValueReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiArchiveExtraValueReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiArchiveExtraValueReply.Merge(m, src)
}
func (m *MultiArchiveExtraValueReply) XXX_Size() int {
	return m.Size()
}
func (m *MultiArchiveExtraValueReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiArchiveExtraValueReply.DiscardUnknown(m)
}

var xxx_messageInfo_MultiArchiveExtraValueReply proto.InternalMessageInfo

func (m *MultiArchiveExtraValueReply) GetExtraInfos() map[int64]*ArchiveExtraValueReply {
	if m != nil {
		return m.ExtraInfos
	}
	return nil
}

type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_34cb684c5f1b1c4d, []int{9}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddArchiveExtraValueReq)(nil), "archive.extra.service.v1.AddArchiveExtraValueReq")
	proto.RegisterType((*BatchAddArchiveExtraValueReq)(nil), "archive.extra.service.v1.BatchAddArchiveExtraValueReq")
	proto.RegisterMapType((map[int64]string)(nil), "archive.extra.service.v1.BatchAddArchiveExtraValueReq.AidValuesEntry")
	proto.RegisterType((*RemoveArchiveExtraValueReq)(nil), "archive.extra.service.v1.RemoveArchiveExtraValueReq")
	proto.RegisterType((*BatchRemoveArchiveExtraValueReq)(nil), "archive.extra.service.v1.BatchRemoveArchiveExtraValueReq")
	proto.RegisterType((*GetArchiveExtraValueReq)(nil), "archive.extra.service.v1.GetArchiveExtraValueReq")
	proto.RegisterType((*BatchGetArchiveExtraValueReq)(nil), "archive.extra.service.v1.BatchGetArchiveExtraValueReq")
	proto.RegisterType((*GetArchiveExtraBasedOnKeysReq)(nil), "archive.extra.service.v1.GetArchiveExtraBasedOnKeysReq")
	proto.RegisterType((*ArchiveExtraValueReply)(nil), "archive.extra.service.v1.ArchiveExtraValueReply")
	proto.RegisterMapType((map[string]string)(nil), "archive.extra.service.v1.ArchiveExtraValueReply.ExtraInfoEntry")
	proto.RegisterType((*MultiArchiveExtraValueReply)(nil), "archive.extra.service.v1.MultiArchiveExtraValueReply")
	proto.RegisterMapType((map[int64]*ArchiveExtraValueReply)(nil), "archive.extra.service.v1.MultiArchiveExtraValueReply.ExtraInfosEntry")
	proto.RegisterType((*NoReply)(nil), "archive.extra.service.v1.NoReply")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/archive-extra/service/api/api.proto", fileDescriptor_34cb684c5f1b1c4d)
}

var fileDescriptor_34cb684c5f1b1c4d = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xbe, 0x13, 0xf7, 0xf6, 0xde, 0x9c, 0x48, 0xf7, 0xa2, 0xa1, 0x90, 0xe0, 0x96, 0x38, 0x58,
	0x20, 0xa5, 0x52, 0xe3, 0xb4, 0x29, 0xe5, 0x27, 0xa2, 0xaa, 0x12, 0xa9, 0xa0, 0x0a, 0x01, 0x52,
	0x90, 0x58, 0xb0, 0xa0, 0x9a, 0xc4, 0x93, 0x74, 0xd4, 0x24, 0x76, 0x6d, 0xc7, 0xad, 0xf9, 0x93,
	0xd8, 0x80, 0xc4, 0x13, 0xf0, 0x24, 0x3c, 0x02, 0x62, 0xc9, 0x13, 0x44, 0xa8, 0xbc, 0x41, 0x16,
	0x5d, 0x23, 0x8f, 0x1d, 0x9c, 0x16, 0x4f, 0x9a, 0x94, 0x2e, 0x2c, 0x79, 0xe2, 0x73, 0xce, 0xf7,
	0x9d, 0xef, 0x9c, 0xf9, 0x14, 0x28, 0xb7, 0x8c, 0x42, 0x8b, 0x38, 0x74, 0x9f, 0x78, 0x45, 0x62,
	0x9a, 0xfe, 0x53, 0xb0, 0x5d, 0xab, 0x48, 0xac, 0xc6, 0x0e, 0x73, 0x69, 0x81, 0x1e, 0x38, 0x16,
	0x29, 0xda, 0xd4, 0x72, 0x59, 0x83, 0x16, 0x89, 0xc9, 0xfc, 0x47, 0x33, 0x2d, 0xc3, 0x31, 0x70,
	0x26, 0x0c, 0xd2, 0x78, 0x90, 0x16, 0x06, 0x69, 0xee, 0x8a, 0x5c, 0x68, 0x31, 0x67, 0xa7, 0x57,
	0xd7, 0x1a, 0x46, 0xa7, 0xd8, 0x32, 0x5a, 0x46, 0x91, 0x27, 0xd4, 0x7b, 0x4d, 0x7e, 0xe2, 0x07,
	0xfe, 0x16, 0x14, 0x52, 0xbf, 0x20, 0x48, 0x57, 0x74, 0xbd, 0x12, 0x94, 0xdb, 0xf4, 0xab, 0x3d,
	0x23, 0xed, 0x1e, 0xad, 0xd1, 0x3d, 0xac, 0x81, 0x44, 0x98, 0x9e, 0x41, 0x39, 0x94, 0x97, 0xaa,
	0x0b, 0x83, 0xbe, 0x92, 0x71, 0x49, 0x9b, 0xe9, 0xc4, 0xa1, 0x65, 0xb5, 0xe5, 0xac, 0x2f, 0x2f,
	0x59, 0x74, 0xaf, 0xc7, 0x2c, 0xaa, 0xab, 0x35, 0x3f, 0x10, 0x97, 0x41, 0xda, 0xa5, 0x5e, 0x26,
	0x91, 0x43, 0xf9, 0x64, 0x35, 0x3f, 0xe8, 0x2b, 0xd7, 0x9b, 0x86, 0xd5, 0x29, 0xe7, 0xd4, 0x3a,
	0x7b, 0xb9, 0xed, 0x78, 0x26, 0x55, 0x73, 0x51, 0x81, 0x91, 0xdc, 0x5d, 0xea, 0xe1, 0x0d, 0xf8,
	0xdb, 0xf5, 0x71, 0x33, 0x12, 0xcf, 0x5e, 0x1c, 0xf4, 0x95, 0x1b, 0x23, 0xd9, 0xfc, 0x5b, 0x7c,
	0x7a, 0x90, 0xa7, 0xbe, 0x4f, 0xc0, 0x42, 0x95, 0x38, 0x8d, 0x1d, 0x51, 0x37, 0x8b, 0x01, 0x3b,
	0xc4, 0xeb, 0xa7, 0x07, 0x7d, 0xe5, 0xa2, 0x90, 0xcc, 0x1b, 0x00, 0xc2, 0xf4, 0x00, 0xd4, 0xce,
	0x24, 0x72, 0x52, 0x3e, 0x55, 0xda, 0xd4, 0x44, 0x92, 0x6b, 0xe3, 0x60, 0xb5, 0x0a, 0xd3, 0xf9,
	0xbb, 0xbd, 0xd9, 0x75, 0x2c, 0x4f, 0x0c, 0x9c, 0x24, 0xc3, 0x40, 0xf9, 0x1e, 0xfc, 0x77, 0x3c,
	0x0b, 0x5f, 0x88, 0xb8, 0x4b, 0x01, 0xc5, 0xb9, 0xa1, 0x5e, 0x5c, 0xed, 0x50, 0x84, 0x72, 0xe2,
	0x0e, 0x52, 0xf7, 0x41, 0xae, 0xd1, 0x8e, 0xe1, 0xd2, 0x73, 0x99, 0xe9, 0xe2, 0xe8, 0x4c, 0xc7,
	0xaa, 0xa6, 0xbe, 0x43, 0xa0, 0x70, 0x29, 0xc6, 0xc0, 0x4f, 0x31, 0x84, 0x55, 0x98, 0x21, 0x4c,
	0x0f, 0xe4, 0x97, 0xaa, 0xca, 0xa0, 0xaf, 0xcc, 0x47, 0xb1, 0x1d, 0x72, 0xb0, 0xbe, 0xb6, 0xbc,
	0xa4, 0x33, 0x97, 0x2e, 0xf9, 0xb4, 0xd5, 0x1a, 0x0f, 0x56, 0xb7, 0x20, 0xfd, 0x80, 0x3a, 0xe7,
	0xd1, 0xb9, 0xfa, 0x34, 0xdc, 0x27, 0x51, 0xbd, 0x21, 0x3f, 0x34, 0x0d, 0xbf, 0xb7, 0x70, 0xf5,
	0x44, 0xbd, 0x2a, 0xb1, 0xa9, 0xfe, 0xa4, 0xfb, 0x90, 0x7a, 0x76, 0x28, 0x50, 0xc4, 0x52, 0x2c,
	0x90, 0x3f, 0x9a, 0x12, 0xcc, 0xec, 0x52, 0x2f, 0x10, 0x28, 0x59, 0xcd, 0x0e, 0xfa, 0x8a, 0xfc,
	0x1b, 0x81, 0x28, 0x85, 0xc7, 0xaa, 0x9f, 0x11, 0x5c, 0x8e, 0xe9, 0xc6, 0x6c, 0x7b, 0xf8, 0x05,
	0x00, 0xdf, 0xec, 0x6d, 0xd6, 0x6d, 0x1a, 0xbc, 0xab, 0x54, 0x69, 0x43, 0xbc, 0xf4, 0xf1, 0x55,
	0x34, 0x7e, 0xde, 0xea, 0x36, 0x0d, 0xbe, 0xb8, 0xb5, 0x24, 0x1d, 0x9e, 0xfd, 0xad, 0x3e, 0xfe,
	0x71, 0x74, 0xab, 0x93, 0xa7, 0x6d, 0xf5, 0x11, 0x82, 0xf9, 0x47, 0xbd, 0xb6, 0xc3, 0x04, 0xec,
	0x9b, 0x90, 0x8a, 0xd8, 0x4f, 0x70, 0x67, 0xc7, 0xd4, 0x8a, 0x7a, 0x08, 0x6e, 0x5f, 0x0d, 0x7e,
	0x35, 0x61, 0xcb, 0x06, 0xfc, 0x7f, 0xe2, 0x73, 0xcc, 0xe5, 0xbc, 0x3f, 0xda, 0x46, 0xaa, 0xb4,
	0x3c, 0xad, 0x8a, 0xa3, 0x8d, 0x27, 0xe1, 0x9f, 0xc7, 0x06, 0xff, 0xb5, 0x74, 0x34, 0x0b, 0xff,
	0x56, 0xac, 0x06, 0x0f, 0xc6, 0x6d, 0x98, 0x8b, 0xb3, 0x1c, 0xbc, 0x32, 0x06, 0x2c, 0xde, 0xa2,
	0xe4, 0x6b, 0xe2, 0x94, 0x10, 0x1a, 0xbb, 0x70, 0x45, 0xe8, 0x72, 0xf8, 0xd6, 0xd9, 0xac, 0x71,
	0x12, 0x5c, 0x0b, 0xd2, 0x02, 0x37, 0xc1, 0x37, 0xc5, 0xd9, 0x62, 0x03, 0x9a, 0x04, 0xf3, 0x75,
	0x78, 0xf1, 0x45, 0xc0, 0x77, 0x4f, 0x69, 0xf7, 0xcf, 0xd0, 0x5f, 0xc1, 0x5c, 0x9c, 0xe3, 0x8c,
	0x9b, 0xab, 0xc0, 0xa1, 0xe4, 0xa9, 0xf7, 0x0e, 0x7f, 0x44, 0xe1, 0x9c, 0x63, 0x29, 0x9c, 0x36,
	0x67, 0x11, 0x8f, 0xb5, 0x33, 0x5d, 0x43, 0xfc, 0x01, 0x81, 0x2c, 0x36, 0x4b, 0x7c, 0x7b, 0x62,
	0x41, 0x8e, 0x5b, 0xec, 0xf4, 0xb2, 0x54, 0x2f, 0x7d, 0x3d, 0xcc, 0xa2, 0x6f, 0x87, 0x59, 0xf4,
	0xfd, 0x30, 0x8b, 0x3e, 0xfd, 0xc8, 0xfe, 0xf5, 0x5c, 0x22, 0x26, 0xab, 0xcf, 0xf2, 0xbf, 0x50,
	0xab, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x06, 0x93, 0x6e, 0xc9, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArcExtraClient is the client API for ArcExtra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArcExtraClient interface {
	// 写入/更新 archive_extra业务信息
	AddArchiveExtraValue(ctx context.Context, in *AddArchiveExtraValueReq, opts ...grpc.CallOption) (*NoReply, error)
	// 批量写入/批量更新 archive_extra 单个业务信息
	BatchAddArchiveExtraValue(ctx context.Context, in *BatchAddArchiveExtraValueReq, opts ...grpc.CallOption) (*NoReply, error)
	// 清除 archive_extra业务信息
	RemoveArchiveExtraValue(ctx context.Context, in *RemoveArchiveExtraValueReq, opts ...grpc.CallOption) (*NoReply, error)
	// 批量清除 archive_extra 单个业务信息
	BatchRemoveArchiveExtraValue(ctx context.Context, in *BatchRemoveArchiveExtraValueReq, opts ...grpc.CallOption) (*NoReply, error)
	// 获取 archive_extra 所有业务信息
	GetArchiveExtraValue(ctx context.Context, in *GetArchiveExtraValueReq, opts ...grpc.CallOption) (*ArchiveExtraValueReply, error)
	// 批量获取 archive_extra 所有业务信息
	BatchGetArchiveExtraValue(ctx context.Context, in *BatchGetArchiveExtraValueReq, opts ...grpc.CallOption) (*MultiArchiveExtraValueReply, error)
	// 获取 archive_extra 多个业务信息
	GetArchiveExtraBasedOnKeys(ctx context.Context, in *GetArchiveExtraBasedOnKeysReq, opts ...grpc.CallOption) (*ArchiveExtraValueReply, error)
}

type arcExtraClient struct {
	cc *grpc.ClientConn
}

func NewArcExtraClient(cc *grpc.ClientConn) ArcExtraClient {
	return &arcExtraClient{cc}
}

func (c *arcExtraClient) AddArchiveExtraValue(ctx context.Context, in *AddArchiveExtraValueReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/archive.extra.service.v1.ArcExtra/AddArchiveExtraValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcExtraClient) BatchAddArchiveExtraValue(ctx context.Context, in *BatchAddArchiveExtraValueReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/archive.extra.service.v1.ArcExtra/BatchAddArchiveExtraValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcExtraClient) RemoveArchiveExtraValue(ctx context.Context, in *RemoveArchiveExtraValueReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/archive.extra.service.v1.ArcExtra/RemoveArchiveExtraValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcExtraClient) BatchRemoveArchiveExtraValue(ctx context.Context, in *BatchRemoveArchiveExtraValueReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/archive.extra.service.v1.ArcExtra/BatchRemoveArchiveExtraValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcExtraClient) GetArchiveExtraValue(ctx context.Context, in *GetArchiveExtraValueReq, opts ...grpc.CallOption) (*ArchiveExtraValueReply, error) {
	out := new(ArchiveExtraValueReply)
	err := c.cc.Invoke(ctx, "/archive.extra.service.v1.ArcExtra/GetArchiveExtraValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcExtraClient) BatchGetArchiveExtraValue(ctx context.Context, in *BatchGetArchiveExtraValueReq, opts ...grpc.CallOption) (*MultiArchiveExtraValueReply, error) {
	out := new(MultiArchiveExtraValueReply)
	err := c.cc.Invoke(ctx, "/archive.extra.service.v1.ArcExtra/BatchGetArchiveExtraValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arcExtraClient) GetArchiveExtraBasedOnKeys(ctx context.Context, in *GetArchiveExtraBasedOnKeysReq, opts ...grpc.CallOption) (*ArchiveExtraValueReply, error) {
	out := new(ArchiveExtraValueReply)
	err := c.cc.Invoke(ctx, "/archive.extra.service.v1.ArcExtra/GetArchiveExtraBasedOnKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArcExtraServer is the server API for ArcExtra service.
type ArcExtraServer interface {
	// 写入/更新 archive_extra业务信息
	AddArchiveExtraValue(context.Context, *AddArchiveExtraValueReq) (*NoReply, error)
	// 批量写入/批量更新 archive_extra 单个业务信息
	BatchAddArchiveExtraValue(context.Context, *BatchAddArchiveExtraValueReq) (*NoReply, error)
	// 清除 archive_extra业务信息
	RemoveArchiveExtraValue(context.Context, *RemoveArchiveExtraValueReq) (*NoReply, error)
	// 批量清除 archive_extra 单个业务信息
	BatchRemoveArchiveExtraValue(context.Context, *BatchRemoveArchiveExtraValueReq) (*NoReply, error)
	// 获取 archive_extra 所有业务信息
	GetArchiveExtraValue(context.Context, *GetArchiveExtraValueReq) (*ArchiveExtraValueReply, error)
	// 批量获取 archive_extra 所有业务信息
	BatchGetArchiveExtraValue(context.Context, *BatchGetArchiveExtraValueReq) (*MultiArchiveExtraValueReply, error)
	// 获取 archive_extra 多个业务信息
	GetArchiveExtraBasedOnKeys(context.Context, *GetArchiveExtraBasedOnKeysReq) (*ArchiveExtraValueReply, error)
}

// UnimplementedArcExtraServer can be embedded to have forward compatible implementations.
type UnimplementedArcExtraServer struct {
}

func (*UnimplementedArcExtraServer) AddArchiveExtraValue(ctx context.Context, req *AddArchiveExtraValueReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArchiveExtraValue not implemented")
}
func (*UnimplementedArcExtraServer) BatchAddArchiveExtraValue(ctx context.Context, req *BatchAddArchiveExtraValueReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddArchiveExtraValue not implemented")
}
func (*UnimplementedArcExtraServer) RemoveArchiveExtraValue(ctx context.Context, req *RemoveArchiveExtraValueReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveArchiveExtraValue not implemented")
}
func (*UnimplementedArcExtraServer) BatchRemoveArchiveExtraValue(ctx context.Context, req *BatchRemoveArchiveExtraValueReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRemoveArchiveExtraValue not implemented")
}
func (*UnimplementedArcExtraServer) GetArchiveExtraValue(ctx context.Context, req *GetArchiveExtraValueReq) (*ArchiveExtraValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchiveExtraValue not implemented")
}
func (*UnimplementedArcExtraServer) BatchGetArchiveExtraValue(ctx context.Context, req *BatchGetArchiveExtraValueReq) (*MultiArchiveExtraValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetArchiveExtraValue not implemented")
}
func (*UnimplementedArcExtraServer) GetArchiveExtraBasedOnKeys(ctx context.Context, req *GetArchiveExtraBasedOnKeysReq) (*ArchiveExtraValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchiveExtraBasedOnKeys not implemented")
}

func RegisterArcExtraServer(s *grpc.Server, srv ArcExtraServer) {
	s.RegisterService(&_ArcExtra_serviceDesc, srv)
}

func _ArcExtra_AddArchiveExtraValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArchiveExtraValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcExtraServer).AddArchiveExtraValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.extra.service.v1.ArcExtra/AddArchiveExtraValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcExtraServer).AddArchiveExtraValue(ctx, req.(*AddArchiveExtraValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcExtra_BatchAddArchiveExtraValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddArchiveExtraValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcExtraServer).BatchAddArchiveExtraValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.extra.service.v1.ArcExtra/BatchAddArchiveExtraValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcExtraServer).BatchAddArchiveExtraValue(ctx, req.(*BatchAddArchiveExtraValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcExtra_RemoveArchiveExtraValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveArchiveExtraValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcExtraServer).RemoveArchiveExtraValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.extra.service.v1.ArcExtra/RemoveArchiveExtraValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcExtraServer).RemoveArchiveExtraValue(ctx, req.(*RemoveArchiveExtraValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcExtra_BatchRemoveArchiveExtraValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRemoveArchiveExtraValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcExtraServer).BatchRemoveArchiveExtraValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.extra.service.v1.ArcExtra/BatchRemoveArchiveExtraValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcExtraServer).BatchRemoveArchiveExtraValue(ctx, req.(*BatchRemoveArchiveExtraValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcExtra_GetArchiveExtraValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveExtraValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcExtraServer).GetArchiveExtraValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.extra.service.v1.ArcExtra/GetArchiveExtraValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcExtraServer).GetArchiveExtraValue(ctx, req.(*GetArchiveExtraValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcExtra_BatchGetArchiveExtraValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetArchiveExtraValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcExtraServer).BatchGetArchiveExtraValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.extra.service.v1.ArcExtra/BatchGetArchiveExtraValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcExtraServer).BatchGetArchiveExtraValue(ctx, req.(*BatchGetArchiveExtraValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArcExtra_GetArchiveExtraBasedOnKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveExtraBasedOnKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcExtraServer).GetArchiveExtraBasedOnKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.extra.service.v1.ArcExtra/GetArchiveExtraBasedOnKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcExtraServer).GetArchiveExtraBasedOnKeys(ctx, req.(*GetArchiveExtraBasedOnKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArcExtra_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archive.extra.service.v1.ArcExtra",
	HandlerType: (*ArcExtraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddArchiveExtraValue",
			Handler:    _ArcExtra_AddArchiveExtraValue_Handler,
		},
		{
			MethodName: "BatchAddArchiveExtraValue",
			Handler:    _ArcExtra_BatchAddArchiveExtraValue_Handler,
		},
		{
			MethodName: "RemoveArchiveExtraValue",
			Handler:    _ArcExtra_RemoveArchiveExtraValue_Handler,
		},
		{
			MethodName: "BatchRemoveArchiveExtraValue",
			Handler:    _ArcExtra_BatchRemoveArchiveExtraValue_Handler,
		},
		{
			MethodName: "GetArchiveExtraValue",
			Handler:    _ArcExtra_GetArchiveExtraValue_Handler,
		},
		{
			MethodName: "BatchGetArchiveExtraValue",
			Handler:    _ArcExtra_BatchGetArchiveExtraValue_Handler,
		},
		{
			MethodName: "GetArchiveExtraBasedOnKeys",
			Handler:    _ArcExtra_GetArchiveExtraBasedOnKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/archive-extra/service/api/api.proto",
}

func (m *AddArchiveExtraValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddArchiveExtraValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddArchiveExtraValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchAddArchiveExtraValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchAddArchiveExtraValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchAddArchiveExtraValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AidValues) > 0 {
		for k := range m.AidValues {
			v := m.AidValues[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveArchiveExtraValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveArchiveExtraValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveArchiveExtraValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchRemoveArchiveExtraValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchRemoveArchiveExtraValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchRemoveArchiveExtraValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA2 := make([]byte, len(m.Aids)*10)
		var j1 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArchiveExtraValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArchiveExtraValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArchiveExtraValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchGetArchiveExtraValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchGetArchiveExtraValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchGetArchiveExtraValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA4 := make([]byte, len(m.Aids)*10)
		var j3 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetArchiveExtraBasedOnKeysReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArchiveExtraBasedOnKeysReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArchiveExtraBasedOnKeysReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveExtraValueReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveExtraValueReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveExtraValueReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtraInfo) > 0 {
		for k := range m.ExtraInfo {
			v := m.ExtraInfo[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MultiArchiveExtraValueReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiArchiveExtraValueReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiArchiveExtraValueReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtraInfos) > 0 {
		for k := range m.ExtraInfos {
			v := m.ExtraInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddArchiveExtraValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchAddArchiveExtraValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.AidValues) > 0 {
		for k, v := range m.AidValues {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveArchiveExtraValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchRemoveArchiveExtraValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetArchiveExtraValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchGetArchiveExtraValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetArchiveExtraBasedOnKeysReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArchiveExtraValueReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtraInfo) > 0 {
		for k, v := range m.ExtraInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiArchiveExtraValueReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtraInfos) > 0 {
		for k, v := range m.ExtraInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddArchiveExtraValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddArchiveExtraValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddArchiveExtraValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchAddArchiveExtraValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchAddArchiveExtraValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchAddArchiveExtraValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AidValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AidValues == nil {
				m.AidValues = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AidValues[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveArchiveExtraValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveArchiveExtraValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveArchiveExtraValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchRemoveArchiveExtraValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchRemoveArchiveExtraValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchRemoveArchiveExtraValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArchiveExtraValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArchiveExtraValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArchiveExtraValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchGetArchiveExtraValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchGetArchiveExtraValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchGetArchiveExtraValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArchiveExtraBasedOnKeysReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArchiveExtraBasedOnKeysReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArchiveExtraBasedOnKeysReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveExtraValueReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveExtraValueReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveExtraValueReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiArchiveExtraValueReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiArchiveExtraValueReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiArchiveExtraValueReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfos == nil {
				m.ExtraInfos = make(map[int64]*ArchiveExtraValueReply)
			}
			var mapkey int64
			var mapvalue *ArchiveExtraValueReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ArchiveExtraValueReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
