// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-dynamic/interface/api/v2/campus.proto

package v2

import (
	context "context"
	fmt "fmt"
	pagination "git.bilibili.co/bapis/bapis-go/bilibili/pagination"
	proto "github.com/golang/protobuf/proto"
	common "go-gateway/app/app-svr/app-dynamic/interface/api/common"
	v1 "go-gateway/app/app-svr/archive/middleware/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WFItemType int32

const (
	// 无效类型
	WFItemType_WATER_FLOW_TYPE_NONE WFItemType = 0
	// 稿件 使用 WFItemDefault
	WFItemType_WATER_FLOW_TYPE_ARCHIVE WFItemType = 1
	// 动态 使用 WFItemDefault
	WFItemType_WATER_FLOW_TYPE_DYNAMIC WFItemType = 2
)

var WFItemType_name = map[int32]string{
	0: "WATER_FLOW_TYPE_NONE",
	1: "WATER_FLOW_TYPE_ARCHIVE",
	2: "WATER_FLOW_TYPE_DYNAMIC",
}

var WFItemType_value = map[string]int32{
	"WATER_FLOW_TYPE_NONE":    0,
	"WATER_FLOW_TYPE_ARCHIVE": 1,
	"WATER_FLOW_TYPE_DYNAMIC": 2,
}

func (x WFItemType) String() string {
	return proto.EnumName(WFItemType_name, int32(x))
}

func (WFItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f991e8941bc0b18b, []int{0}
}

// 瀑布流默认的橱窗样式
type WFItemDefault struct {
	// 标题
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 封面
	Cover string `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	// 封面左下角 从左往右 第1个
	BottomLeft_1 *CoverIconWithText `protobuf:"bytes,3,opt,name=bottom_left_1,json=bottomLeft1,proto3" json:"bottom_left_1,omitempty"`
	// 封面左下角 从左往右 第2个
	BottomLeft_2 *CoverIconWithText `protobuf:"bytes,4,opt,name=bottom_left_2,json=bottomLeft2,proto3" json:"bottom_left_2,omitempty"`
	// 封面右下角 从右往左 第1个
	BottomRight_1 *CoverIconWithText `protobuf:"bytes,5,opt,name=bottom_right_1,json=bottomRight1,proto3" json:"bottom_right_1,omitempty"`
	// 跳转链接
	Uri string `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
	// 推荐理由
	RcmdReason *RcmdReason `protobuf:"bytes,7,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	// UI无关的注解信息
	// 例如埋点需要的 aid/cid/dynamic_id/track_id等等
	Annotations          map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WFItemDefault) Reset()         { *m = WFItemDefault{} }
func (m *WFItemDefault) String() string { return proto.CompactTextString(m) }
func (*WFItemDefault) ProtoMessage()    {}
func (*WFItemDefault) Descriptor() ([]byte, []int) {
	return fileDescriptor_f991e8941bc0b18b, []int{0}
}
func (m *WFItemDefault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WFItemDefault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WFItemDefault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WFItemDefault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WFItemDefault.Merge(m, src)
}
func (m *WFItemDefault) XXX_Size() int {
	return m.Size()
}
func (m *WFItemDefault) XXX_DiscardUnknown() {
	xxx_messageInfo_WFItemDefault.DiscardUnknown(m)
}

var xxx_messageInfo_WFItemDefault proto.InternalMessageInfo

func (m *WFItemDefault) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *WFItemDefault) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *WFItemDefault) GetBottomLeft_1() *CoverIconWithText {
	if m != nil {
		return m.BottomLeft_1
	}
	return nil
}

func (m *WFItemDefault) GetBottomLeft_2() *CoverIconWithText {
	if m != nil {
		return m.BottomLeft_2
	}
	return nil
}

func (m *WFItemDefault) GetBottomRight_1() *CoverIconWithText {
	if m != nil {
		return m.BottomRight_1
	}
	return nil
}

func (m *WFItemDefault) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *WFItemDefault) GetRcmdReason() *RcmdReason {
	if m != nil {
		return m.RcmdReason
	}
	return nil
}

func (m *WFItemDefault) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type CampusWaterFlowItem struct {
	// 卡片类型
	ItemType WFItemType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=bilibili.app.dynamic.v2.WFItemType" json:"item_type,omitempty"`
	// 卡片比例 缺失该字段时客户端丢卡
	WhRatio *common.ItemWHRatio `protobuf:"bytes,2,opt,name=wh_ratio,json=whRatio,proto3" json:"wh_ratio,omitempty"`
	// 卡片数据类型列表
	//
	// Types that are valid to be assigned to FlowItem:
	//	*CampusWaterFlowItem_ItemDefault
	FlowItem             isCampusWaterFlowItem_FlowItem `protobuf_oneof:"flow_item"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CampusWaterFlowItem) Reset()         { *m = CampusWaterFlowItem{} }
func (m *CampusWaterFlowItem) String() string { return proto.CompactTextString(m) }
func (*CampusWaterFlowItem) ProtoMessage()    {}
func (*CampusWaterFlowItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f991e8941bc0b18b, []int{1}
}
func (m *CampusWaterFlowItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CampusWaterFlowItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CampusWaterFlowItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CampusWaterFlowItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CampusWaterFlowItem.Merge(m, src)
}
func (m *CampusWaterFlowItem) XXX_Size() int {
	return m.Size()
}
func (m *CampusWaterFlowItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CampusWaterFlowItem.DiscardUnknown(m)
}

var xxx_messageInfo_CampusWaterFlowItem proto.InternalMessageInfo

type isCampusWaterFlowItem_FlowItem interface {
	isCampusWaterFlowItem_FlowItem()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CampusWaterFlowItem_ItemDefault struct {
	ItemDefault *WFItemDefault `protobuf:"bytes,3,opt,name=item_default,json=itemDefault,proto3,oneof" json:"item_default,omitempty"`
}

func (*CampusWaterFlowItem_ItemDefault) isCampusWaterFlowItem_FlowItem() {}

func (m *CampusWaterFlowItem) GetFlowItem() isCampusWaterFlowItem_FlowItem {
	if m != nil {
		return m.FlowItem
	}
	return nil
}

func (m *CampusWaterFlowItem) GetItemType() WFItemType {
	if m != nil {
		return m.ItemType
	}
	return WFItemType_WATER_FLOW_TYPE_NONE
}

func (m *CampusWaterFlowItem) GetWhRatio() *common.ItemWHRatio {
	if m != nil {
		return m.WhRatio
	}
	return nil
}

func (m *CampusWaterFlowItem) GetItemDefault() *WFItemDefault {
	if x, ok := m.GetFlowItem().(*CampusWaterFlowItem_ItemDefault); ok {
		return x.ItemDefault
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CampusWaterFlowItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CampusWaterFlowItem_ItemDefault)(nil),
	}
}

type WaterFlowRcmdReq struct {
	// 页面的学校ID
	CampusId int64 `protobuf:"varint,1,opt,name=campus_id,json=campusId,proto3" json:"campus_id,omitempty"`
	// 翻页参数
	Page *pagination.FeedPagination `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	// 秒开用
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,3,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	// 页面请求来源
	From                 CampusRcmdReqFrom `protobuf:"varint,4,opt,name=from,proto3,enum=bilibili.app.dynamic.v2.CampusRcmdReqFrom" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WaterFlowRcmdReq) Reset()         { *m = WaterFlowRcmdReq{} }
func (m *WaterFlowRcmdReq) String() string { return proto.CompactTextString(m) }
func (*WaterFlowRcmdReq) ProtoMessage()    {}
func (*WaterFlowRcmdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f991e8941bc0b18b, []int{2}
}
func (m *WaterFlowRcmdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaterFlowRcmdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaterFlowRcmdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaterFlowRcmdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaterFlowRcmdReq.Merge(m, src)
}
func (m *WaterFlowRcmdReq) XXX_Size() int {
	return m.Size()
}
func (m *WaterFlowRcmdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WaterFlowRcmdReq.DiscardUnknown(m)
}

var xxx_messageInfo_WaterFlowRcmdReq proto.InternalMessageInfo

func (m *WaterFlowRcmdReq) GetCampusId() int64 {
	if m != nil {
		return m.CampusId
	}
	return 0
}

func (m *WaterFlowRcmdReq) GetPage() *pagination.FeedPagination {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *WaterFlowRcmdReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *WaterFlowRcmdReq) GetFrom() CampusRcmdReqFrom {
	if m != nil {
		return m.From
	}
	return CampusRcmdReqFrom_CAMPUS_RCMD_FROM_UNKNOWN
}

type WaterFlowRcmdResp struct {
	// 推荐卡片列表
	Items []*CampusWaterFlowItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// 翻页用 next为空或者该结构为空时说明已经到底了
	Offset               *pagination.FeedPaginationReply `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *WaterFlowRcmdResp) Reset()         { *m = WaterFlowRcmdResp{} }
func (m *WaterFlowRcmdResp) String() string { return proto.CompactTextString(m) }
func (*WaterFlowRcmdResp) ProtoMessage()    {}
func (*WaterFlowRcmdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f991e8941bc0b18b, []int{3}
}
func (m *WaterFlowRcmdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaterFlowRcmdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WaterFlowRcmdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WaterFlowRcmdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaterFlowRcmdResp.Merge(m, src)
}
func (m *WaterFlowRcmdResp) XXX_Size() int {
	return m.Size()
}
func (m *WaterFlowRcmdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WaterFlowRcmdResp.DiscardUnknown(m)
}

var xxx_messageInfo_WaterFlowRcmdResp proto.InternalMessageInfo

func (m *WaterFlowRcmdResp) GetItems() []*CampusWaterFlowItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *WaterFlowRcmdResp) GetOffset() *pagination.FeedPaginationReply {
	if m != nil {
		return m.Offset
	}
	return nil
}

func init() {
	proto.RegisterEnum("bilibili.app.dynamic.v2.WFItemType", WFItemType_name, WFItemType_value)
	proto.RegisterType((*WFItemDefault)(nil), "bilibili.app.dynamic.v2.WFItemDefault")
	proto.RegisterMapType((map[string]string)(nil), "bilibili.app.dynamic.v2.WFItemDefault.AnnotationsEntry")
	proto.RegisterType((*CampusWaterFlowItem)(nil), "bilibili.app.dynamic.v2.CampusWaterFlowItem")
	proto.RegisterType((*WaterFlowRcmdReq)(nil), "bilibili.app.dynamic.v2.WaterFlowRcmdReq")
	proto.RegisterType((*WaterFlowRcmdResp)(nil), "bilibili.app.dynamic.v2.WaterFlowRcmdResp")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-dynamic/interface/api/v2/campus.proto", fileDescriptor_f991e8941bc0b18b)
}

var fileDescriptor_f991e8941bc0b18b = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdb, 0x6e, 0xe3, 0x44,
	0x18, 0xae, 0xd3, 0xc3, 0xb6, 0xe3, 0x6d, 0x15, 0x86, 0x95, 0xd6, 0xea, 0x4a, 0x55, 0x29, 0x08,
	0x85, 0x8a, 0xb5, 0x15, 0x73, 0xb1, 0x68, 0x2f, 0x56, 0xcd, 0x51, 0x8d, 0x28, 0x69, 0x34, 0x8a,
	0x36, 0x2a, 0x37, 0x66, 0x62, 0x8f, 0x93, 0x11, 0xb6, 0x67, 0x18, 0x4f, 0x1c, 0xfc, 0x26, 0x70,
	0x87, 0x78, 0x1a, 0x2e, 0x79, 0x04, 0x54, 0xde, 0x01, 0x89, 0x3b, 0x34, 0x63, 0x37, 0x27, 0x36,
	0xcb, 0x2e, 0x5c, 0x58, 0xfe, 0x67, 0xe6, 0xff, 0xbe, 0xf9, 0xbf, 0xff, 0x60, 0x83, 0xab, 0x09,
	0x7b, 0x3e, 0xc1, 0x92, 0xcc, 0x71, 0xee, 0x60, 0xce, 0xd5, 0xf3, 0x3c, 0xcd, 0x84, 0x7e, 0x07,
	0x79, 0x82, 0x63, 0xea, 0x3b, 0x34, 0x91, 0x44, 0x84, 0xd8, 0x27, 0x0e, 0xe6, 0xd4, 0xc9, 0x5c,
	0xc7, 0xc7, 0x31, 0x9f, 0xa5, 0x36, 0x17, 0x4c, 0x32, 0xf8, 0x74, 0x4c, 0x23, 0xaa, 0x1e, 0x1b,
	0x73, 0x6e, 0x97, 0x18, 0x3b, 0x73, 0x4f, 0xdb, 0xef, 0x4d, 0xed, 0xb3, 0x38, 0x66, 0x49, 0xf9,
	0x2a, 0xe8, 0x4f, 0x5b, 0xff, 0x25, 0xc0, 0xf2, 0xe0, 0xb5, 0x5b, 0x92, 0xbc, 0xdc, 0x46, 0x22,
	0xfc, 0x29, 0xcd, 0x88, 0x13, 0xd3, 0x20, 0x88, 0xc8, 0x1c, 0x0b, 0xe2, 0x64, 0x75, 0x87, 0x0b,
	0x12, 0x31, 0x1c, 0x94, 0xd8, 0x4f, 0x1e, 0xf4, 0x39, 0x1c, 0x4f, 0x68, 0x82, 0x25, 0x65, 0xc9,
	0x8a, 0x59, 0x78, 0x5d, 0xfc, 0xbc, 0x07, 0x8e, 0x47, 0xdd, 0x9e, 0x24, 0x71, 0x9b, 0x84, 0x78,
	0x16, 0x49, 0xf8, 0x04, 0xec, 0x4b, 0x2a, 0x23, 0x62, 0x19, 0xe7, 0x46, 0xed, 0x08, 0x15, 0x0b,
	0xb5, 0xeb, 0xb3, 0x8c, 0x08, 0xab, 0x52, 0xec, 0xea, 0x05, 0xec, 0x83, 0xe3, 0x31, 0x93, 0x92,
	0xc5, 0x5e, 0x44, 0x42, 0xe9, 0xd5, 0xad, 0xdd, 0x73, 0xa3, 0x66, 0xba, 0x97, 0xf6, 0x96, 0xdc,
	0xda, 0x2d, 0x05, 0xeb, 0xf9, 0x2c, 0x19, 0x51, 0x39, 0x1d, 0x92, 0x1f, 0x24, 0x32, 0x0b, 0x82,
	0x1b, 0x12, 0xca, 0xfa, 0x26, 0x9f, 0x6b, 0xed, 0xfd, 0x1f, 0x3e, 0x17, 0x0e, 0xc0, 0x49, 0xc9,
	0x27, 0xe8, 0x64, 0xaa, 0x02, 0xdc, 0x7f, 0x6f, 0xc2, 0xc7, 0x05, 0x03, 0x52, 0x04, 0x75, 0x58,
	0x05, 0xbb, 0x33, 0x41, 0xad, 0x03, 0x9d, 0x05, 0x65, 0xc2, 0x36, 0x30, 0x85, 0x1f, 0x07, 0x9e,
	0x20, 0x38, 0x65, 0x89, 0xf5, 0x48, 0x5f, 0xf0, 0xf1, 0xd6, 0x0b, 0x90, 0x1f, 0x07, 0x48, 0xbb,
	0x22, 0x20, 0x16, 0x36, 0xbc, 0x03, 0x26, 0x4e, 0x12, 0x26, 0x75, 0x6d, 0x52, 0xeb, 0xf0, 0x7c,
	0xb7, 0x66, 0xba, 0x2f, 0xb6, 0xb2, 0xac, 0x95, 0xcc, 0x6e, 0x2c, 0x91, 0x9d, 0x44, 0x8a, 0x1c,
	0xad, 0x72, 0x9d, 0xbe, 0x02, 0xd5, 0x4d, 0x07, 0x25, 0xe3, 0x3b, 0x92, 0x97, 0x25, 0x56, 0xa6,
	0x2a, 0x70, 0x86, 0xa3, 0x19, 0x79, 0x28, 0xb0, 0x5e, 0xbc, 0xac, 0x7c, 0x69, 0x5c, 0xfc, 0x69,
	0x80, 0x0f, 0x5b, 0x7a, 0x72, 0x46, 0x58, 0x12, 0xd1, 0x8d, 0xd8, 0x5c, 0x5d, 0x0e, 0xaf, 0xc0,
	0x11, 0x95, 0x24, 0xf6, 0x64, 0xce, 0x8b, 0x66, 0x39, 0x79, 0x8b, 0xec, 0x22, 0xe0, 0x61, 0xce,
	0x09, 0x3a, 0xa4, 0xa5, 0x05, 0x5b, 0xe0, 0x70, 0x3e, 0xf5, 0x84, 0x0a, 0x4c, 0x5f, 0x6b, 0xba,
	0xb5, 0x37, 0x13, 0x94, 0x93, 0xa5, 0x28, 0x46, 0xd7, 0x48, 0xf9, 0xa3, 0x47, 0xf3, 0xa9, 0x36,
	0xe0, 0x57, 0xe0, 0xb1, 0x0e, 0x23, 0x28, 0x92, 0x51, 0xb6, 0xe0, 0xa7, 0xef, 0x96, 0xba, 0xeb,
	0x1d, 0x64, 0xd2, 0xe5, 0xb2, 0x69, 0x82, 0xa3, 0x30, 0x62, 0x73, 0x4f, 0xed, 0x5d, 0xfc, 0x65,
	0x80, 0xea, 0x42, 0x72, 0x51, 0xb7, 0xef, 0xe1, 0x33, 0x70, 0x54, 0x7c, 0x46, 0x3c, 0x1a, 0x68,
	0xd5, 0xbb, 0xe8, 0xb0, 0xd8, 0xe8, 0x05, 0xf0, 0x05, 0xd8, 0xe3, 0x78, 0x42, 0x4a, 0x31, 0x2b,
	0xd9, 0x58, 0x99, 0xbb, 0x2e, 0x21, 0xc1, 0x60, 0xb1, 0x44, 0x1a, 0x00, 0x6f, 0x81, 0xc9, 0x23,
	0x9c, 0x13, 0xe1, 0x61, 0x31, 0x49, 0x4b, 0x0d, 0xf6, 0xba, 0x86, 0x72, 0xe8, 0xed, 0xe5, 0xd0,
	0xdb, 0x59, 0xdd, 0x1e, 0x68, 0x58, 0x43, 0x4c, 0x52, 0x04, 0xf8, 0xc2, 0x86, 0xaf, 0xc0, 0x5e,
	0x28, 0x58, 0xac, 0x07, 0xe8, 0xe4, 0x6d, 0xfd, 0xae, 0x43, 0x2f, 0xc5, 0x75, 0x05, 0x8b, 0x91,
	0xc6, 0x5d, 0xfc, 0x64, 0x80, 0x0f, 0x36, 0xb4, 0xa7, 0x1c, 0x36, 0xc1, 0xbe, 0xca, 0x4c, 0x6a,
	0x19, 0xba, 0x3f, 0x3f, 0xff, 0x17, 0xda, 0xb5, 0x7e, 0x41, 0x05, 0x14, 0x5e, 0x81, 0x03, 0x16,
	0x86, 0x29, 0x91, 0xff, 0x2c, 0xf9, 0xf6, 0x2c, 0x11, 0x1e, 0xe5, 0xa8, 0xc4, 0x5d, 0x7e, 0x0b,
	0xc0, 0xb2, 0x9d, 0xa0, 0x05, 0x9e, 0x8c, 0x1a, 0xc3, 0x0e, 0xf2, 0xba, 0x37, 0xb7, 0x23, 0x6f,
	0x78, 0x37, 0xe8, 0x78, 0xfd, 0xdb, 0x7e, 0xa7, 0xba, 0x03, 0x9f, 0x81, 0xa7, 0x9b, 0x27, 0x0d,
	0xd4, 0xba, 0xee, 0xbd, 0xee, 0x54, 0x8d, 0x37, 0x1d, 0xb6, 0xef, 0xfa, 0x8d, 0xaf, 0x7b, 0xad,
	0x6a, 0xc5, 0xe5, 0xe0, 0xa0, 0x50, 0x00, 0x43, 0x70, 0xbc, 0x96, 0x06, 0xf8, 0xd9, 0xf6, 0xc6,
	0xda, 0x68, 0x95, 0xd3, 0xcb, 0x77, 0x75, 0x4d, 0x79, 0xf3, 0xe6, 0xd7, 0xfb, 0x33, 0xe3, 0xb7,
	0xfb, 0x33, 0xe3, 0xf7, 0xfb, 0x33, 0xe3, 0xc7, 0x3f, 0xce, 0x76, 0xc0, 0x47, 0x3e, 0x8b, 0xed,
	0x31, 0xe6, 0x34, 0xdd, 0x46, 0x33, 0x30, 0xbe, 0xa9, 0x64, 0xee, 0x2f, 0x95, 0x6a, 0xb3, 0x31,
	0xe8, 0x35, 0x38, 0x6f, 0x3f, 0xfc, 0x3d, 0xc6, 0x07, 0xfa, 0xe3, 0xfe, 0xc5, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x5c, 0x90, 0x73, 0x26, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CampusClient is the client API for Campus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CampusClient interface {
	// 校园双列瀑布流推荐 (其他院校/首页未开放推荐feed)
	WaterFlowRcmd(ctx context.Context, in *WaterFlowRcmdReq, opts ...grpc.CallOption) (*WaterFlowRcmdResp, error)
}

type campusClient struct {
	cc *grpc.ClientConn
}

func NewCampusClient(cc *grpc.ClientConn) CampusClient {
	return &campusClient{cc}
}

func (c *campusClient) WaterFlowRcmd(ctx context.Context, in *WaterFlowRcmdReq, opts ...grpc.CallOption) (*WaterFlowRcmdResp, error) {
	out := new(WaterFlowRcmdResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.dynamic.v2.Campus/WaterFlowRcmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampusServer is the server API for Campus service.
type CampusServer interface {
	// 校园双列瀑布流推荐 (其他院校/首页未开放推荐feed)
	WaterFlowRcmd(context.Context, *WaterFlowRcmdReq) (*WaterFlowRcmdResp, error)
}

// UnimplementedCampusServer can be embedded to have forward compatible implementations.
type UnimplementedCampusServer struct {
}

func (*UnimplementedCampusServer) WaterFlowRcmd(ctx context.Context, req *WaterFlowRcmdReq) (*WaterFlowRcmdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaterFlowRcmd not implemented")
}

func RegisterCampusServer(s *grpc.Server, srv CampusServer) {
	s.RegisterService(&_Campus_serviceDesc, srv)
}

func _Campus_WaterFlowRcmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaterFlowRcmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampusServer).WaterFlowRcmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.dynamic.v2.Campus/WaterFlowRcmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampusServer).WaterFlowRcmd(ctx, req.(*WaterFlowRcmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Campus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.dynamic.v2.Campus",
	HandlerType: (*CampusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WaterFlowRcmd",
			Handler:    _Campus_WaterFlowRcmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-dynamic/interface/api/v2/campus.proto",
}

func (m *WFItemDefault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WFItemDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WFItemDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCampus(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCampus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCampus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.RcmdReason != nil {
		{
			size, err := m.RcmdReason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintCampus(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x32
	}
	if m.BottomRight_1 != nil {
		{
			size, err := m.BottomRight_1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BottomLeft_2 != nil {
		{
			size, err := m.BottomLeft_2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BottomLeft_1 != nil {
		{
			size, err := m.BottomLeft_1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintCampus(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCampus(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CampusWaterFlowItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampusWaterFlowItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CampusWaterFlowItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlowItem != nil {
		{
			size := m.FlowItem.Size()
			i -= size
			if _, err := m.FlowItem.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.WhRatio != nil {
		{
			size, err := m.WhRatio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ItemType != 0 {
		i = encodeVarintCampus(dAtA, i, uint64(m.ItemType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CampusWaterFlowItem_ItemDefault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CampusWaterFlowItem_ItemDefault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ItemDefault != nil {
		{
			size, err := m.ItemDefault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WaterFlowRcmdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaterFlowRcmdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaterFlowRcmdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintCampus(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x20
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CampusId != 0 {
		i = encodeVarintCampus(dAtA, i, uint64(m.CampusId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WaterFlowRcmdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaterFlowRcmdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaterFlowRcmdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != nil {
		{
			size, err := m.Offset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCampus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCampus(dAtA []byte, offset int, v uint64) int {
	offset -= sovCampus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WFItemDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCampus(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovCampus(uint64(l))
	}
	if m.BottomLeft_1 != nil {
		l = m.BottomLeft_1.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	if m.BottomLeft_2 != nil {
		l = m.BottomLeft_2.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	if m.BottomRight_1 != nil {
		l = m.BottomRight_1.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovCampus(uint64(l))
	}
	if m.RcmdReason != nil {
		l = m.RcmdReason.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCampus(uint64(len(k))) + 1 + len(v) + sovCampus(uint64(len(v)))
			n += mapEntrySize + 1 + sovCampus(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CampusWaterFlowItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemType != 0 {
		n += 1 + sovCampus(uint64(m.ItemType))
	}
	if m.WhRatio != nil {
		l = m.WhRatio.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	if m.FlowItem != nil {
		n += m.FlowItem.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CampusWaterFlowItem_ItemDefault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemDefault != nil {
		l = m.ItemDefault.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	return n
}
func (m *WaterFlowRcmdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CampusId != 0 {
		n += 1 + sovCampus(uint64(m.CampusId))
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovCampus(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WaterFlowRcmdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCampus(uint64(l))
		}
	}
	if m.Offset != nil {
		l = m.Offset.Size()
		n += 1 + l + sovCampus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCampus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCampus(x uint64) (n int) {
	return sovCampus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WFItemDefault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WFItemDefault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WFItemDefault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomLeft_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BottomLeft_1 == nil {
				m.BottomLeft_1 = &CoverIconWithText{}
			}
			if err := m.BottomLeft_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomLeft_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BottomLeft_2 == nil {
				m.BottomLeft_2 = &CoverIconWithText{}
			}
			if err := m.BottomLeft_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomRight_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BottomRight_1 == nil {
				m.BottomRight_1 = &CoverIconWithText{}
			}
			if err := m.BottomRight_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReason == nil {
				m.RcmdReason = &RcmdReason{}
			}
			if err := m.RcmdReason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCampus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCampus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCampus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCampus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCampus
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCampus
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCampus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCampus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampusWaterFlowItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampusWaterFlowItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampusWaterFlowItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			m.ItemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemType |= WFItemType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WhRatio == nil {
				m.WhRatio = &common.ItemWHRatio{}
			}
			if err := m.WhRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WFItemDefault{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowItem = &CampusWaterFlowItem_ItemDefault{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaterFlowRcmdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaterFlowRcmdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaterFlowRcmdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampusId", wireType)
			}
			m.CampusId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampusId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &pagination.FeedPagination{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= CampusRcmdReqFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCampus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaterFlowRcmdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaterFlowRcmdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaterFlowRcmdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CampusWaterFlowItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Offset == nil {
				m.Offset = &pagination.FeedPaginationReply{}
			}
			if err := m.Offset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCampus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCampus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCampus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCampus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCampus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCampus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCampus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCampus = fmt.Errorf("proto: unexpected end of group")
)
