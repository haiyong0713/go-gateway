// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-interface/interface-legacy/api/space/space.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	v2 "go-gateway/app/app-svr/app-dynamic/interface/api/v2"
	v1 "go-gateway/app/app-svr/archive/middleware/v1"
	api "go-gateway/app/app-svr/archive/service/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type From int32

const (
	// 稿件
	From_ArchiveTab From = 0
	// 动态
	From_DynamicTab From = 1
)

var From_name = map[int32]string{
	0: "ArchiveTab",
	1: "DynamicTab",
}

var From_value = map[string]int32{
	"ArchiveTab": 0,
	"DynamicTab": 1,
}

func (x From) String() string {
	return proto.EnumName(From_name, int32(x))
}

func (From) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{0}
}

type SearchTabReq struct {
	// 关键词
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty" validate:"required"`
	// up主mid
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	// 来源
	From                 From     `protobuf:"varint,3,opt,name=from,proto3,enum=bilibili.app.interface.v1.From" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchTabReq) Reset()         { *m = SearchTabReq{} }
func (m *SearchTabReq) String() string { return proto.CompactTextString(m) }
func (*SearchTabReq) ProtoMessage()    {}
func (*SearchTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{0}
}
func (m *SearchTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTabReq.Merge(m, src)
}
func (m *SearchTabReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTabReq proto.InternalMessageInfo

func (m *SearchTabReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchTabReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SearchTabReq) GetFrom() From {
	if m != nil {
		return m.From
	}
	return From_ArchiveTab
}

type SearchTabReply struct {
	// 展示哪个标签页
	Focus int64 `protobuf:"varint,1,opt,name=focus,proto3" json:"focus,omitempty"`
	// 标签页列表
	Tabs                 []*Tab   `protobuf:"bytes,2,rep,name=tabs,proto3" json:"tabs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchTabReply) Reset()         { *m = SearchTabReply{} }
func (m *SearchTabReply) String() string { return proto.CompactTextString(m) }
func (*SearchTabReply) ProtoMessage()    {}
func (*SearchTabReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{1}
}
func (m *SearchTabReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTabReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTabReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTabReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTabReply.Merge(m, src)
}
func (m *SearchTabReply) XXX_Size() int {
	return m.Size()
}
func (m *SearchTabReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTabReply.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTabReply proto.InternalMessageInfo

func (m *SearchTabReply) GetFocus() int64 {
	if m != nil {
		return m.Focus
	}
	return 0
}

func (m *SearchTabReply) GetTabs() []*Tab {
	if m != nil {
		return m.Tabs
	}
	return nil
}

type Tab struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Uri                  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tab) Reset()         { *m = Tab{} }
func (m *Tab) String() string { return proto.CompactTextString(m) }
func (*Tab) ProtoMessage()    {}
func (*Tab) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{2}
}
func (m *Tab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tab.Merge(m, src)
}
func (m *Tab) XXX_Size() int {
	return m.Size()
}
func (m *Tab) XXX_DiscardUnknown() {
	xxx_messageInfo_Tab.DiscardUnknown(m)
}

var xxx_messageInfo_Tab proto.InternalMessageInfo

func (m *Tab) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Tab) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type SearchArchiveReq struct {
	// 关键词
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty" validate:"required"`
	// up主mid
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Pn  int64 `protobuf:"varint,3,opt,name=pn,proto3" json:"pn,omitempty" validate:"min=1"`
	Ps  int64 `protobuf:"varint,4,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=50"`
	// 秒开用参数
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,5,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SearchArchiveReq) Reset()         { *m = SearchArchiveReq{} }
func (m *SearchArchiveReq) String() string { return proto.CompactTextString(m) }
func (*SearchArchiveReq) ProtoMessage()    {}
func (*SearchArchiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{3}
}
func (m *SearchArchiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchArchiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchArchiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchArchiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchArchiveReq.Merge(m, src)
}
func (m *SearchArchiveReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchArchiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchArchiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchArchiveReq proto.InternalMessageInfo

func (m *SearchArchiveReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchArchiveReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SearchArchiveReq) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *SearchArchiveReq) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *SearchArchiveReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

type SearchArchiveReply struct {
	Archives []*Arc `protobuf:"bytes,1,rep,name=archives,proto3" json:"archives,omitempty"`
	// total 总数
	Total                int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchArchiveReply) Reset()         { *m = SearchArchiveReply{} }
func (m *SearchArchiveReply) String() string { return proto.CompactTextString(m) }
func (*SearchArchiveReply) ProtoMessage()    {}
func (*SearchArchiveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{4}
}
func (m *SearchArchiveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchArchiveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchArchiveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchArchiveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchArchiveReply.Merge(m, src)
}
func (m *SearchArchiveReply) XXX_Size() int {
	return m.Size()
}
func (m *SearchArchiveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchArchiveReply.DiscardUnknown(m)
}

var xxx_messageInfo_SearchArchiveReply proto.InternalMessageInfo

func (m *SearchArchiveReply) GetArchives() []*Arc {
	if m != nil {
		return m.Archives
	}
	return nil
}

func (m *SearchArchiveReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Arc struct {
	// 稿件信息
	Archive *api.Arc `protobuf:"bytes,1,opt,name=archive,proto3" json:"archive,omitempty"`
	// 跳转地址含秒开地址
	Uri                  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Arc) Reset()         { *m = Arc{} }
func (m *Arc) String() string { return proto.CompactTextString(m) }
func (*Arc) ProtoMessage()    {}
func (*Arc) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{5}
}
func (m *Arc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arc.Merge(m, src)
}
func (m *Arc) XXX_Size() int {
	return m.Size()
}
func (m *Arc) XXX_DiscardUnknown() {
	xxx_messageInfo_Arc.DiscardUnknown(m)
}

var xxx_messageInfo_Arc proto.InternalMessageInfo

func (m *Arc) GetArchive() *api.Arc {
	if m != nil {
		return m.Archive
	}
	return nil
}

func (m *Arc) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type SearchDynamicReq struct {
	// 关键词
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty" validate:"required"`
	// up主mid
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Pn  int64 `protobuf:"varint,3,opt,name=pn,proto3" json:"pn,omitempty" validate:"min=1"`
	Ps  int64 `protobuf:"varint,4,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=50"`
	// 秒开用参数
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,5,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SearchDynamicReq) Reset()         { *m = SearchDynamicReq{} }
func (m *SearchDynamicReq) String() string { return proto.CompactTextString(m) }
func (*SearchDynamicReq) ProtoMessage()    {}
func (*SearchDynamicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{6}
}
func (m *SearchDynamicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchDynamicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchDynamicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchDynamicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchDynamicReq.Merge(m, src)
}
func (m *SearchDynamicReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchDynamicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchDynamicReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchDynamicReq proto.InternalMessageInfo

func (m *SearchDynamicReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchDynamicReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SearchDynamicReq) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *SearchDynamicReq) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *SearchDynamicReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

type SearchDynamicReply struct {
	Dynamics []*Dynamic `protobuf:"bytes,1,rep,name=dynamics,proto3" json:"dynamics,omitempty"`
	// total 总数
	Total                int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchDynamicReply) Reset()         { *m = SearchDynamicReply{} }
func (m *SearchDynamicReply) String() string { return proto.CompactTextString(m) }
func (*SearchDynamicReply) ProtoMessage()    {}
func (*SearchDynamicReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{7}
}
func (m *SearchDynamicReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchDynamicReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchDynamicReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchDynamicReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchDynamicReply.Merge(m, src)
}
func (m *SearchDynamicReply) XXX_Size() int {
	return m.Size()
}
func (m *SearchDynamicReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchDynamicReply.DiscardUnknown(m)
}

var xxx_messageInfo_SearchDynamicReply proto.InternalMessageInfo

func (m *SearchDynamicReply) GetDynamics() []*Dynamic {
	if m != nil {
		return m.Dynamics
	}
	return nil
}

func (m *SearchDynamicReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Dynamic struct {
	// 动态信息
	Dynamic              *v2.DynamicItem `protobuf:"bytes,1,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Dynamic) Reset()         { *m = Dynamic{} }
func (m *Dynamic) String() string { return proto.CompactTextString(m) }
func (*Dynamic) ProtoMessage()    {}
func (*Dynamic) Descriptor() ([]byte, []int) {
	return fileDescriptor_5081585035fd403d, []int{8}
}
func (m *Dynamic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dynamic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dynamic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dynamic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dynamic.Merge(m, src)
}
func (m *Dynamic) XXX_Size() int {
	return m.Size()
}
func (m *Dynamic) XXX_DiscardUnknown() {
	xxx_messageInfo_Dynamic.DiscardUnknown(m)
}

var xxx_messageInfo_Dynamic proto.InternalMessageInfo

func (m *Dynamic) GetDynamic() *v2.DynamicItem {
	if m != nil {
		return m.Dynamic
	}
	return nil
}

func init() {
	proto.RegisterEnum("bilibili.app.interface.v1.From", From_name, From_value)
	proto.RegisterType((*SearchTabReq)(nil), "bilibili.app.interface.v1.SearchTabReq")
	proto.RegisterType((*SearchTabReply)(nil), "bilibili.app.interface.v1.SearchTabReply")
	proto.RegisterType((*Tab)(nil), "bilibili.app.interface.v1.Tab")
	proto.RegisterType((*SearchArchiveReq)(nil), "bilibili.app.interface.v1.SearchArchiveReq")
	proto.RegisterType((*SearchArchiveReply)(nil), "bilibili.app.interface.v1.SearchArchiveReply")
	proto.RegisterType((*Arc)(nil), "bilibili.app.interface.v1.Arc")
	proto.RegisterType((*SearchDynamicReq)(nil), "bilibili.app.interface.v1.SearchDynamicReq")
	proto.RegisterType((*SearchDynamicReply)(nil), "bilibili.app.interface.v1.SearchDynamicReply")
	proto.RegisterType((*Dynamic)(nil), "bilibili.app.interface.v1.Dynamic")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-interface/interface-legacy/api/space/space.proto", fileDescriptor_5081585035fd403d)
}

var fileDescriptor_5081585035fd403d = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xed, 0xf4, 0x6b, 0x3b, 0xf9, 0xa8, 0xa2, 0xa1, 0xa8, 0x21, 0x48, 0x49, 0x64, 0xaa,
	0x12, 0x28, 0xb1, 0x89, 0x0b, 0x9b, 0x4a, 0xad, 0x94, 0xa8, 0x42, 0x0a, 0x1b, 0x2a, 0x37, 0x62,
	0xd1, 0x4d, 0x35, 0xb6, 0x27, 0xee, 0x50, 0x3b, 0x9e, 0x8e, 0x1d, 0x97, 0x3c, 0x06, 0x3b, 0x56,
	0x2c, 0x78, 0x14, 0x56, 0x2c, 0x79, 0x82, 0x0a, 0x95, 0x37, 0xe8, 0x13, 0xa0, 0x19, 0xff, 0x24,
	0xa9, 0x94, 0x9f, 0x0d, 0x3b, 0x16, 0x4e, 0xe6, 0xc6, 0xe7, 0x9e, 0xb9, 0x73, 0xce, 0x9d, 0x1b,
	0x70, 0xec, 0x06, 0x4d, 0x17, 0x45, 0xf8, 0x1a, 0x8d, 0x74, 0x44, 0x29, 0x7f, 0x9a, 0x61, 0xcc,
	0xc4, 0x37, 0x19, 0x44, 0x98, 0xf5, 0x91, 0x8d, 0xf5, 0xf1, 0x0a, 0x51, 0xa2, 0x87, 0x94, 0xaf,
	0xc4, 0xa7, 0x46, 0x59, 0x10, 0x05, 0xf0, 0xb1, 0x45, 0x3c, 0xc2, 0x1f, 0x0d, 0x51, 0xaa, 0xe5,
	0x68, 0x2d, 0x6e, 0x55, 0x0e, 0x66, 0x6d, 0xc0, 0xec, 0x0b, 0x12, 0x63, 0xdd, 0x27, 0x8e, 0xe3,
	0xe1, 0x6b, 0xc4, 0xb0, 0x1e, 0xb7, 0x74, 0xca, 0xb0, 0x17, 0x20, 0x27, 0xa1, 0xad, 0xbc, 0x5e,
	0x90, 0x1b, 0x62, 0x16, 0x93, 0xb4, 0x28, 0x44, 0x49, 0x9a, 0x75, 0x38, 0xe7, 0x48, 0xce, 0x68,
	0x80, 0x7c, 0x62, 0xdf, 0x3b, 0x50, 0x6c, 0x4c, 0xa4, 0x37, 0x5d, 0x12, 0x5d, 0x0c, 0x2d, 0xcd,
	0x0e, 0x7c, 0xdd, 0x0d, 0xdc, 0x40, 0x17, 0x3f, 0x5b, 0xc3, 0xbe, 0x88, 0x44, 0x20, 0x56, 0x09,
	0x5c, 0xfd, 0x2a, 0x81, 0xff, 0x4f, 0x31, 0xaf, 0xa8, 0x87, 0x2c, 0x13, 0x5f, 0xc1, 0x16, 0x58,
	0xbb, 0xc4, 0xa3, 0xeb, 0x80, 0x39, 0x65, 0xa9, 0x2e, 0x35, 0x36, 0x3a, 0xdb, 0x77, 0x37, 0xb5,
	0x87, 0x31, 0xf2, 0x88, 0x83, 0x22, 0x7c, 0xa0, 0x32, 0x7c, 0x35, 0x24, 0x0c, 0x3b, 0xaa, 0x99,
	0xe1, 0xe0, 0x2e, 0x50, 0x7c, 0xe2, 0x94, 0xe5, 0xba, 0xd4, 0x50, 0x3a, 0x5b, 0x77, 0x37, 0xb5,
	0xd2, 0x18, 0xee, 0x93, 0xc1, 0x61, 0x4b, 0x35, 0x39, 0x00, 0xee, 0x83, 0x42, 0x9f, 0x05, 0x7e,
	0x59, 0xa9, 0x4b, 0x8d, 0x4d, 0xa3, 0xa6, 0xcd, 0x54, 0x5d, 0x7b, 0xcb, 0x02, 0xdf, 0x14, 0x60,
	0xf5, 0x0c, 0x6c, 0x4e, 0xd4, 0x47, 0xbd, 0x11, 0xdc, 0x02, 0xab, 0xfd, 0xc0, 0x1e, 0x86, 0xa2,
	0x3e, 0xc5, 0x4c, 0x02, 0x68, 0x80, 0x42, 0x84, 0xac, 0xb0, 0x2c, 0xd7, 0x95, 0x46, 0xd1, 0xa8,
	0xce, 0x21, 0xe7, 0x44, 0x02, 0xab, 0x36, 0x81, 0xd2, 0x43, 0x16, 0x27, 0x8c, 0x48, 0xe4, 0xe1,
	0xe4, 0xc0, 0x66, 0x12, 0xc0, 0x12, 0x50, 0x86, 0x8c, 0x88, 0x53, 0x6d, 0x98, 0x7c, 0xa9, 0x7e,
	0x96, 0x41, 0x29, 0xa9, 0xa5, 0x9d, 0x38, 0xf8, 0x97, 0xf5, 0xda, 0x01, 0x32, 0x1d, 0x08, 0xb5,
	0x66, 0xc1, 0x64, 0x3a, 0x80, 0x7b, 0x40, 0xa6, 0x61, 0xb9, 0x20, 0x50, 0x4f, 0xee, 0x6e, 0x6a,
	0xdb, 0xf7, 0x50, 0x2f, 0x7d, 0xf4, 0xe9, 0xf0, 0xcd, 0x2b, 0x0e, 0x0e, 0xe1, 0x7b, 0x50, 0xa4,
	0x1e, 0x1a, 0x61, 0x76, 0x8e, 0x98, 0x1b, 0x96, 0x57, 0xeb, 0x52, 0xa3, 0x68, 0x68, 0xd3, 0x62,
	0xa5, 0xed, 0xa9, 0x8d, 0x5b, 0x9b, 0xab, 0x76, 0x22, 0xd2, 0xda, 0xcc, 0x0d, 0x4d, 0x40, 0xf3,
	0xb5, 0xda, 0x07, 0xf0, 0x9e, 0x24, 0xdc, 0xa2, 0x03, 0xb0, 0x9e, 0xb2, 0x70, 0x97, 0x16, 0x19,
	0xd2, 0x66, 0xb6, 0x99, 0xe3, 0x85, 0x1b, 0x41, 0x84, 0xbc, 0x44, 0x1f, 0x33, 0x09, 0xd4, 0x77,
	0x40, 0x69, 0x33, 0x9b, 0xab, 0x9d, 0x02, 0x85, 0xda, 0x45, 0x63, 0x3b, 0x2f, 0x37, 0xbd, 0x4d,
	0x19, 0x61, 0x86, 0x9b, 0xeb, 0xe3, 0x71, 0x72, 0x9f, 0xfe, 0xf9, 0xa8, 0x7e, 0xcc, 0x7c, 0xcc,
	0x25, 0xe1, 0x3e, 0x1e, 0x81, 0xf5, 0x74, 0xe4, 0x64, 0x3e, 0xaa, 0x73, 0x7c, 0xcc, 0x52, 0xf3,
	0x9c, 0x19, 0x5e, 0x76, 0xc1, 0x5a, 0x0a, 0x85, 0x47, 0x60, 0x2d, 0x05, 0xa7, 0x7e, 0xee, 0x4c,
	0xf3, 0xa7, 0x2f, 0xb5, 0xd8, 0xc8, 0xd8, 0xbb, 0x11, 0xf6, 0xcd, 0x2c, 0xe9, 0xc5, 0x2e, 0x28,
	0xf0, 0x59, 0x01, 0x37, 0x01, 0x48, 0x1b, 0xb0, 0x87, 0xac, 0xd2, 0x0a, 0x8f, 0x53, 0x3c, 0x8f,
	0x25, 0xe3, 0xbb, 0x0c, 0x56, 0x4f, 0xf9, 0xc4, 0x87, 0xe7, 0x60, 0x23, 0x9f, 0x27, 0xf0, 0xd9,
	0x9c, 0xd3, 0x4c, 0x4e, 0xc5, 0xca, 0xf3, 0xe5, 0x80, 0x5c, 0xb3, 0x4b, 0xf0, 0x60, 0xea, 0x46,
	0xc0, 0xbd, 0x85, 0xb9, 0xe3, 0x71, 0x52, 0x69, 0x2e, 0x0f, 0x9e, 0xda, 0x2c, 0x13, 0x74, 0xf1,
	0x66, 0xe3, 0x9e, 0x5f, 0x62, 0xb3, 0xc9, 0x6e, 0xe8, 0xf4, 0x7e, 0xdc, 0x56, 0xa5, 0x9f, 0xb7,
	0x55, 0xe9, 0xd7, 0x6d, 0x55, 0xfa, 0xf2, 0xbb, 0xba, 0x02, 0x9e, 0xda, 0x81, 0x3f, 0xe6, 0x70,
	0x19, 0xb5, 0xa7, 0x89, 0x42, 0x2d, 0x6e, 0x9d, 0x48, 0x67, 0x0a, 0xa2, 0xe4, 0x9b, 0xfc, 0xa8,
	0xd3, 0x3e, 0xe9, 0x76, 0xb3, 0x57, 0x1f, 0x5a, 0xc9, 0x0e, 0xd6, 0x7f, 0xe2, 0x8f, 0x68, 0xff,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xd3, 0x7a, 0xad, 0xcb, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpaceClient is the client API for Space service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpaceClient interface {
	// 空间搜索标签列表
	SearchTab(ctx context.Context, in *SearchTabReq, opts ...grpc.CallOption) (*SearchTabReply, error)
	// 空间搜索稿件列表
	SearchArchive(ctx context.Context, in *SearchArchiveReq, opts ...grpc.CallOption) (*SearchArchiveReply, error)
	// 空间搜索动态列表
	SearchDynamic(ctx context.Context, in *SearchDynamicReq, opts ...grpc.CallOption) (*SearchDynamicReply, error)
}

type spaceClient struct {
	cc *grpc.ClientConn
}

func NewSpaceClient(cc *grpc.ClientConn) SpaceClient {
	return &spaceClient{cc}
}

func (c *spaceClient) SearchTab(ctx context.Context, in *SearchTabReq, opts ...grpc.CallOption) (*SearchTabReply, error) {
	out := new(SearchTabReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Space/SearchTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SearchArchive(ctx context.Context, in *SearchArchiveReq, opts ...grpc.CallOption) (*SearchArchiveReply, error) {
	out := new(SearchArchiveReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Space/SearchArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SearchDynamic(ctx context.Context, in *SearchDynamicReq, opts ...grpc.CallOption) (*SearchDynamicReply, error) {
	out := new(SearchDynamicReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Space/SearchDynamic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceServer is the server API for Space service.
type SpaceServer interface {
	// 空间搜索标签列表
	SearchTab(context.Context, *SearchTabReq) (*SearchTabReply, error)
	// 空间搜索稿件列表
	SearchArchive(context.Context, *SearchArchiveReq) (*SearchArchiveReply, error)
	// 空间搜索动态列表
	SearchDynamic(context.Context, *SearchDynamicReq) (*SearchDynamicReply, error)
}

// UnimplementedSpaceServer can be embedded to have forward compatible implementations.
type UnimplementedSpaceServer struct {
}

func (*UnimplementedSpaceServer) SearchTab(ctx context.Context, req *SearchTabReq) (*SearchTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTab not implemented")
}
func (*UnimplementedSpaceServer) SearchArchive(ctx context.Context, req *SearchArchiveReq) (*SearchArchiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArchive not implemented")
}
func (*UnimplementedSpaceServer) SearchDynamic(ctx context.Context, req *SearchDynamicReq) (*SearchDynamicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDynamic not implemented")
}

func RegisterSpaceServer(s *grpc.Server, srv SpaceServer) {
	s.RegisterService(&_Space_serviceDesc, srv)
}

func _Space_SearchTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SearchTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Space/SearchTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SearchTab(ctx, req.(*SearchTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SearchArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SearchArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Space/SearchArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SearchArchive(ctx, req.(*SearchArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SearchDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDynamicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SearchDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Space/SearchDynamic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SearchDynamic(ctx, req.(*SearchDynamicReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Space_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.interface.v1.Space",
	HandlerType: (*SpaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchTab",
			Handler:    _Space_SearchTab_Handler,
		},
		{
			MethodName: "SearchArchive",
			Handler:    _Space_SearchArchive_Handler,
		},
		{
			MethodName: "SearchDynamic",
			Handler:    _Space_SearchDynamic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-interface/interface-legacy/api/space/space.proto",
}

func (m *SearchTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTabReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTabReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.From != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintSpace(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchTabReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTabReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTabReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tabs) > 0 {
		for iNdEx := len(m.Tabs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tabs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpace(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Focus != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Focus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintSpace(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSpace(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchArchiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchArchiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchArchiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Ps != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.Pn != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintSpace(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchArchiveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchArchiveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchArchiveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Archives) > 0 {
		for iNdEx := len(m.Archives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Archives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpace(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Arc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintSpace(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if m.Archive != nil {
		{
			size, err := m.Archive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchDynamicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchDynamicReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchDynamicReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Ps != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.Pn != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintSpace(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchDynamicReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchDynamicReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchDynamicReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintSpace(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Dynamics) > 0 {
		for iNdEx := len(m.Dynamics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dynamics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpace(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Dynamic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dynamic != nil {
		{
			size, err := m.Dynamic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpace(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpace(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpace(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SearchTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovSpace(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovSpace(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovSpace(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchTabReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Focus != 0 {
		n += 1 + sovSpace(uint64(m.Focus))
	}
	if len(m.Tabs) > 0 {
		for _, e := range m.Tabs {
			l = e.Size()
			n += 1 + l + sovSpace(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpace(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovSpace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchArchiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovSpace(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovSpace(uint64(m.Mid))
	}
	if m.Pn != 0 {
		n += 1 + sovSpace(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovSpace(uint64(m.Ps))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovSpace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchArchiveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovSpace(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSpace(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Arc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Archive != nil {
		l = m.Archive.Size()
		n += 1 + l + sovSpace(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovSpace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchDynamicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovSpace(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovSpace(uint64(m.Mid))
	}
	if m.Pn != 0 {
		n += 1 + sovSpace(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovSpace(uint64(m.Ps))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovSpace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchDynamicReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dynamics) > 0 {
		for _, e := range m.Dynamics {
			l = e.Size()
			n += 1 + l + sovSpace(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSpace(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dynamic != nil {
		l = m.Dynamic.Size()
		n += 1 + l + sovSpace(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpace(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpace(x uint64) (n int) {
	return sovSpace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= From(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTabReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTabReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTabReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Focus", wireType)
			}
			m.Focus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Focus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tabs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tabs = append(m.Tabs, &Tab{})
			if err := m.Tabs[len(m.Tabs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchArchiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchArchiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchArchiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchArchiveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchArchiveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchArchiveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &Arc{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Archive == nil {
				m.Archive = &api.Arc{}
			}
			if err := m.Archive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchDynamicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchDynamicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchDynamicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchDynamicReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchDynamicReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchDynamicReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dynamics = append(m.Dynamics, &Dynamic{})
			if err := m.Dynamics[len(m.Dynamics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dynamic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dynamic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dynamic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpace
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpace
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dynamic == nil {
				m.Dynamic = &v2.DynamicItem{}
			}
			if err := m.Dynamic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpace
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpace
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpace
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpace        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpace          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpace = fmt.Errorf("proto: unexpected end of group")
)
