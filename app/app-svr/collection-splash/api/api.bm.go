// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: go-gateway/app/app-svr/collection-splash/api/api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

It is generated from these files:

	go-gateway/app/app-svr/collection-splash/api/api.proto
*/
package api

import (
	"context"

	bm "go-common/library/net/http/blademaster"
	"go-common/library/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathCollectionSplashAddSplash = "/collection.splash.v1.CollectionSplash/AddSplash"
var PathCollectionSplashUpdateSplash = "/collection.splash.v1.CollectionSplash/UpdateSplash"
var PathCollectionSplashDeleteSplash = "/collection.splash.v1.CollectionSplash/DeleteSplash"
var PathCollectionSplashSplash = "/collection.splash.v1.CollectionSplash/Splash"
var PathCollectionSplashSplashList = "/collection.splash.v1.CollectionSplash/SplashList"

// CollectionSplashBMServer is the server API for CollectionSplash service.
type CollectionSplashBMServer interface {
	AddSplash(ctx context.Context, req *AddSplashReq) (resp *SetSplashReply, err error)

	UpdateSplash(ctx context.Context, req *UpdateSplashReq) (resp *SetSplashReply, err error)

	DeleteSplash(ctx context.Context, req *SplashReq) (resp *SetSplashReply, err error)

	Splash(ctx context.Context, req *SplashReq) (resp *SplashReply, err error)

	SplashList(ctx context.Context, req *google_protobuf1.Empty) (resp *SplashListReply, err error)
}

var CollectionSplashSvc CollectionSplashBMServer

func collectionSplashAddSplash(c *bm.Context) {
	p := new(AddSplashReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := CollectionSplashSvc.AddSplash(c, p)
	c.JSON(resp, err)
}

func collectionSplashUpdateSplash(c *bm.Context) {
	p := new(UpdateSplashReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := CollectionSplashSvc.UpdateSplash(c, p)
	c.JSON(resp, err)
}

func collectionSplashDeleteSplash(c *bm.Context) {
	p := new(SplashReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := CollectionSplashSvc.DeleteSplash(c, p)
	c.JSON(resp, err)
}

func collectionSplashSplash(c *bm.Context) {
	p := new(SplashReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := CollectionSplashSvc.Splash(c, p)
	c.JSON(resp, err)
}

func collectionSplashSplashList(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := CollectionSplashSvc.SplashList(c, p)
	c.JSON(resp, err)
}

// RegisterCollectionSplashBMServer Register the blademaster route
func RegisterCollectionSplashBMServer(e *bm.Engine, server CollectionSplashBMServer) {
	CollectionSplashSvc = server
	e.GET("/collection.splash.v1.CollectionSplash/AddSplash", collectionSplashAddSplash)
	e.GET("/collection.splash.v1.CollectionSplash/UpdateSplash", collectionSplashUpdateSplash)
	e.GET("/collection.splash.v1.CollectionSplash/DeleteSplash", collectionSplashDeleteSplash)
	e.GET("/collection.splash.v1.CollectionSplash/Splash", collectionSplashSplash)
	e.GET("/collection.splash.v1.CollectionSplash/SplashList", collectionSplashSplashList)
}
