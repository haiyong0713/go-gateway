// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/topic/interface/api/api.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	proto1 "go-gateway/app/app-svr/app-card/interface/model/card/proto"
	v2 "go-gateway/app/app-svr/app-dynamic/interface/api/v2"
	v1 "go-gateway/app/app-svr/archive/middleware/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TopicDetailsExtMode 话题详情页附加模式
type TopicDetailsExtMode int32

const (
	TopicDetailsExtMode_MODE_ILLEGAL_TYPE TopicDetailsExtMode = 0
	TopicDetailsExtMode_STORY             TopicDetailsExtMode = 1
)

var TopicDetailsExtMode_name = map[int32]string{
	0: "MODE_ILLEGAL_TYPE",
	1: "STORY",
}

var TopicDetailsExtMode_value = map[string]int32{
	"MODE_ILLEGAL_TYPE": 0,
	"STORY":             1,
}

func (x TopicDetailsExtMode) String() string {
	return proto.EnumName(TopicDetailsExtMode_name, int32(x))
}

func (TopicDetailsExtMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{0}
}

// TopicCardType 枚举-话题卡类型
type TopicCardType int32

const (
	TopicCardType_ILLEGAL_TYPE     TopicCardType = 0
	TopicCardType_DYNAMIC          TopicCardType = 1
	TopicCardType_FOLD             TopicCardType = 2
	TopicCardType_VIDEO_SMALL_CARD TopicCardType = 3
)

var TopicCardType_name = map[int32]string{
	0: "ILLEGAL_TYPE",
	1: "DYNAMIC",
	2: "FOLD",
	3: "VIDEO_SMALL_CARD",
}

var TopicCardType_value = map[string]int32{
	"ILLEGAL_TYPE":     0,
	"DYNAMIC":          1,
	"FOLD":             2,
	"VIDEO_SMALL_CARD": 3,
}

func (x TopicCardType) String() string {
	return proto.EnumName(TopicCardType_name, int32(x))
}

func (TopicCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{1}
}

// TopicTopCard 枚举-话题顶部卡类型
type TopicTopCardType int32

const (
	TopicTopCardType_Unknown_Type            TopicTopCardType = 0
	TopicTopCardType_Capsules_Type           TopicTopCardType = 1
	TopicTopCardType_Traffic_Card_Type       TopicTopCardType = 2
	TopicTopCardType_Game_Card_Type          TopicTopCardType = 3
	TopicTopCardType_Time_Line_Type          TopicTopCardType = 4
	TopicTopCardType_Large_Cover_Inline_Type TopicTopCardType = 5
	TopicTopCardType_Reservation_Card_Type   TopicTopCardType = 6
	TopicTopCardType_Esport_Card_Type        TopicTopCardType = 7
)

var TopicTopCardType_name = map[int32]string{
	0: "Unknown_Type",
	1: "Capsules_Type",
	2: "Traffic_Card_Type",
	3: "Game_Card_Type",
	4: "Time_Line_Type",
	5: "Large_Cover_Inline_Type",
	6: "Reservation_Card_Type",
	7: "Esport_Card_Type",
}

var TopicTopCardType_value = map[string]int32{
	"Unknown_Type":            0,
	"Capsules_Type":           1,
	"Traffic_Card_Type":       2,
	"Game_Card_Type":          3,
	"Time_Line_Type":          4,
	"Large_Cover_Inline_Type": 5,
	"Reservation_Card_Type":   6,
	"Esport_Card_Type":        7,
}

func (x TopicTopCardType) String() string {
	return proto.EnumName(TopicTopCardType_name, int32(x))
}

func (TopicTopCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{2}
}

type ReserveButtonStatus int32

const (
	ReserveButtonStatus_RESERVE_BUTTON_STATUS_NONE    ReserveButtonStatus = 0
	ReserveButtonStatus_RESERVE_BUTTON_STATUS_UNCHECK ReserveButtonStatus = 1
	ReserveButtonStatus_RESERVE_BUTTON_STATUS_CHECK   ReserveButtonStatus = 2
)

var ReserveButtonStatus_name = map[int32]string{
	0: "RESERVE_BUTTON_STATUS_NONE",
	1: "RESERVE_BUTTON_STATUS_UNCHECK",
	2: "RESERVE_BUTTON_STATUS_CHECK",
}

var ReserveButtonStatus_value = map[string]int32{
	"RESERVE_BUTTON_STATUS_NONE":    0,
	"RESERVE_BUTTON_STATUS_UNCHECK": 1,
	"RESERVE_BUTTON_STATUS_CHECK":   2,
}

func (x ReserveButtonStatus) String() string {
	return proto.EnumName(ReserveButtonStatus_name, int32(x))
}

func (ReserveButtonStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{3}
}

type ReserveButtonMode int32

const (
	ReserveButtonMode_RESERVE_BUTTON_MODE_NONE      ReserveButtonMode = 0
	ReserveButtonMode_RESERVE_BUTTON_MODE_RESERVE   ReserveButtonMode = 1
	ReserveButtonMode_RESERVE_BUTTON_MODE_UP_CANCEL ReserveButtonMode = 2
)

var ReserveButtonMode_name = map[int32]string{
	0: "RESERVE_BUTTON_MODE_NONE",
	1: "RESERVE_BUTTON_MODE_RESERVE",
	2: "RESERVE_BUTTON_MODE_UP_CANCEL",
}

var ReserveButtonMode_value = map[string]int32{
	"RESERVE_BUTTON_MODE_NONE":      0,
	"RESERVE_BUTTON_MODE_RESERVE":   1,
	"RESERVE_BUTTON_MODE_UP_CANCEL": 2,
}

func (x ReserveButtonMode) String() string {
	return proto.EnumName(ReserveButtonMode_name, int32(x))
}

func (ReserveButtonMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{4}
}

type TopicMergedResourceReq struct {
	TopicId              int64          `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Type                 int32          `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Rid                  int64          `protobuf:"varint,3,opt,name=rid,proto3" json:"rid,omitempty"`
	MergeType            int32          `protobuf:"varint,4,opt,name=merge_type,json=mergeType,proto3" json:"merge_type,omitempty"`
	Offset               string         `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	LocalTime            int32          `protobuf:"varint,6,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,7,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	FromSortBy           int64          `protobuf:"varint,8,opt,name=from_sort_by,json=fromSortBy,proto3" json:"from_sort_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TopicMergedResourceReq) Reset()         { *m = TopicMergedResourceReq{} }
func (m *TopicMergedResourceReq) String() string { return proto.CompactTextString(m) }
func (*TopicMergedResourceReq) ProtoMessage()    {}
func (*TopicMergedResourceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{0}
}
func (m *TopicMergedResourceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMergedResourceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMergedResourceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMergedResourceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMergedResourceReq.Merge(m, src)
}
func (m *TopicMergedResourceReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicMergedResourceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMergedResourceReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMergedResourceReq proto.InternalMessageInfo

func (m *TopicMergedResourceReq) GetTopicId() int64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *TopicMergedResourceReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TopicMergedResourceReq) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *TopicMergedResourceReq) GetMergeType() int32 {
	if m != nil {
		return m.MergeType
	}
	return 0
}

func (m *TopicMergedResourceReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *TopicMergedResourceReq) GetLocalTime() int32 {
	if m != nil {
		return m.LocalTime
	}
	return 0
}

func (m *TopicMergedResourceReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *TopicMergedResourceReq) GetFromSortBy() int64 {
	if m != nil {
		return m.FromSortBy
	}
	return 0
}

type TopicMergedResourceReply struct {
	TopicCardList        *TopicCardList `protobuf:"bytes,1,opt,name=topic_card_list,json=topicCardList,proto3" json:"topic_card_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TopicMergedResourceReply) Reset()         { *m = TopicMergedResourceReply{} }
func (m *TopicMergedResourceReply) String() string { return proto.CompactTextString(m) }
func (*TopicMergedResourceReply) ProtoMessage()    {}
func (*TopicMergedResourceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{1}
}
func (m *TopicMergedResourceReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicMergedResourceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicMergedResourceReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicMergedResourceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicMergedResourceReply.Merge(m, src)
}
func (m *TopicMergedResourceReply) XXX_Size() int {
	return m.Size()
}
func (m *TopicMergedResourceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicMergedResourceReply.DiscardUnknown(m)
}

var xxx_messageInfo_TopicMergedResourceReply proto.InternalMessageInfo

func (m *TopicMergedResourceReply) GetTopicCardList() *TopicCardList {
	if m != nil {
		return m.TopicCardList
	}
	return nil
}

type TopicSetDetailsReq struct {
	SetId                int64    `protobuf:"varint,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty" validate:"gt=0,required"`
	SortBy               int64    `protobuf:"varint,2,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	Offset               string   `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	PageSize             int32    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicSetDetailsReq) Reset()         { *m = TopicSetDetailsReq{} }
func (m *TopicSetDetailsReq) String() string { return proto.CompactTextString(m) }
func (*TopicSetDetailsReq) ProtoMessage()    {}
func (*TopicSetDetailsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{2}
}
func (m *TopicSetDetailsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicSetDetailsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicSetDetailsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicSetDetailsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicSetDetailsReq.Merge(m, src)
}
func (m *TopicSetDetailsReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicSetDetailsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicSetDetailsReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicSetDetailsReq proto.InternalMessageInfo

func (m *TopicSetDetailsReq) GetSetId() int64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

func (m *TopicSetDetailsReq) GetSortBy() int64 {
	if m != nil {
		return m.SortBy
	}
	return 0
}

func (m *TopicSetDetailsReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *TopicSetDetailsReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type TopicSetHeadInfo struct {
	TopicSet             *TopicSet `protobuf:"bytes,1,opt,name=topic_set,json=topicSet,proto3" json:"topic_set,omitempty"`
	TopicCntText         string    `protobuf:"bytes,2,opt,name=topic_cnt_text,json=topicCntText,proto3" json:"topic_cnt_text,omitempty"`
	HeadImgUrl           string    `protobuf:"bytes,3,opt,name=head_img_url,json=headImgUrl,proto3" json:"head_img_url,omitempty"`
	MissionUrl           string    `protobuf:"bytes,4,opt,name=mission_url,json=missionUrl,proto3" json:"mission_url,omitempty"`
	MissionText          string    `protobuf:"bytes,5,opt,name=mission_text,json=missionText,proto3" json:"mission_text,omitempty"`
	IconUrl              string    `protobuf:"bytes,6,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	IsFav                bool      `protobuf:"varint,7,opt,name=is_fav,json=isFav,proto3" json:"is_fav,omitempty"`
	IsFirstTime          bool      `protobuf:"varint,8,opt,name=is_first_time,json=isFirstTime,proto3" json:"is_first_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TopicSetHeadInfo) Reset()         { *m = TopicSetHeadInfo{} }
func (m *TopicSetHeadInfo) String() string { return proto.CompactTextString(m) }
func (*TopicSetHeadInfo) ProtoMessage()    {}
func (*TopicSetHeadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{3}
}
func (m *TopicSetHeadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicSetHeadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicSetHeadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicSetHeadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicSetHeadInfo.Merge(m, src)
}
func (m *TopicSetHeadInfo) XXX_Size() int {
	return m.Size()
}
func (m *TopicSetHeadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicSetHeadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TopicSetHeadInfo proto.InternalMessageInfo

func (m *TopicSetHeadInfo) GetTopicSet() *TopicSet {
	if m != nil {
		return m.TopicSet
	}
	return nil
}

func (m *TopicSetHeadInfo) GetTopicCntText() string {
	if m != nil {
		return m.TopicCntText
	}
	return ""
}

func (m *TopicSetHeadInfo) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *TopicSetHeadInfo) GetMissionUrl() string {
	if m != nil {
		return m.MissionUrl
	}
	return ""
}

func (m *TopicSetHeadInfo) GetMissionText() string {
	if m != nil {
		return m.MissionText
	}
	return ""
}

func (m *TopicSetHeadInfo) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *TopicSetHeadInfo) GetIsFav() bool {
	if m != nil {
		return m.IsFav
	}
	return false
}

func (m *TopicSetHeadInfo) GetIsFirstTime() bool {
	if m != nil {
		return m.IsFirstTime
	}
	return false
}

type TopicSetDetailsReply struct {
	TopicSetHeadInfo     *TopicSetHeadInfo `protobuf:"bytes,1,opt,name=topic_set_head_info,json=topicSetHeadInfo,proto3" json:"topic_set_head_info,omitempty"`
	TopicInfo            []*TopicInfo      `protobuf:"bytes,2,rep,name=topic_info,json=topicInfo,proto3" json:"topic_info,omitempty"`
	HasMore              bool              `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Offset               string            `protobuf:"bytes,4,opt,name=offset,proto3" json:"offset,omitempty"`
	SortCfg              *TopicSetSortCfg  `protobuf:"bytes,5,opt,name=sort_cfg,json=sortCfg,proto3" json:"sort_cfg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TopicSetDetailsReply) Reset()         { *m = TopicSetDetailsReply{} }
func (m *TopicSetDetailsReply) String() string { return proto.CompactTextString(m) }
func (*TopicSetDetailsReply) ProtoMessage()    {}
func (*TopicSetDetailsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{4}
}
func (m *TopicSetDetailsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicSetDetailsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicSetDetailsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicSetDetailsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicSetDetailsReply.Merge(m, src)
}
func (m *TopicSetDetailsReply) XXX_Size() int {
	return m.Size()
}
func (m *TopicSetDetailsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicSetDetailsReply.DiscardUnknown(m)
}

var xxx_messageInfo_TopicSetDetailsReply proto.InternalMessageInfo

func (m *TopicSetDetailsReply) GetTopicSetHeadInfo() *TopicSetHeadInfo {
	if m != nil {
		return m.TopicSetHeadInfo
	}
	return nil
}

func (m *TopicSetDetailsReply) GetTopicInfo() []*TopicInfo {
	if m != nil {
		return m.TopicInfo
	}
	return nil
}

func (m *TopicSetDetailsReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *TopicSetDetailsReply) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *TopicSetDetailsReply) GetSortCfg() *TopicSetSortCfg {
	if m != nil {
		return m.SortCfg
	}
	return nil
}

type TopicSetSortCfg struct {
	DefaultSortBy        int64          `protobuf:"varint,1,opt,name=default_sort_by,json=defaultSortBy,proto3" json:"default_sort_by,omitempty"`
	AllSortBy            []*SortContent `protobuf:"bytes,2,rep,name=all_sort_by,json=allSortBy,proto3" json:"all_sort_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TopicSetSortCfg) Reset()         { *m = TopicSetSortCfg{} }
func (m *TopicSetSortCfg) String() string { return proto.CompactTextString(m) }
func (*TopicSetSortCfg) ProtoMessage()    {}
func (*TopicSetSortCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{5}
}
func (m *TopicSetSortCfg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicSetSortCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicSetSortCfg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicSetSortCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicSetSortCfg.Merge(m, src)
}
func (m *TopicSetSortCfg) XXX_Size() int {
	return m.Size()
}
func (m *TopicSetSortCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicSetSortCfg.DiscardUnknown(m)
}

var xxx_messageInfo_TopicSetSortCfg proto.InternalMessageInfo

func (m *TopicSetSortCfg) GetDefaultSortBy() int64 {
	if m != nil {
		return m.DefaultSortBy
	}
	return 0
}

func (m *TopicSetSortCfg) GetAllSortBy() []*SortContent {
	if m != nil {
		return m.AllSortBy
	}
	return nil
}

type TopicDetailsAllReq struct {
	TopicId              int64               `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	SortBy               int64               `protobuf:"varint,2,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	Offset               string              `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	PageSize             int32               `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	LocalTime            int32               `protobuf:"varint,5,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	PlayerArgs           *v1.PlayerArgs      `protobuf:"bytes,6,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	NeedRefresh          int32               `protobuf:"varint,7,opt,name=need_refresh,json=needRefresh,proto3" json:"need_refresh,omitempty"`
	Source               string              `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty" default:"APP"`
	TopicDetailsExtMode  TopicDetailsExtMode `protobuf:"varint,9,opt,name=topic_details_ext_mode,json=topicDetailsExtMode,proto3,enum=bilibili.app.topic.v1.TopicDetailsExtMode" json:"topic_details_ext_mode,omitempty"`
	FromSpmid            string              `protobuf:"bytes,10,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TopicDetailsAllReq) Reset()         { *m = TopicDetailsAllReq{} }
func (m *TopicDetailsAllReq) String() string { return proto.CompactTextString(m) }
func (*TopicDetailsAllReq) ProtoMessage()    {}
func (*TopicDetailsAllReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{6}
}
func (m *TopicDetailsAllReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDetailsAllReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDetailsAllReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDetailsAllReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDetailsAllReq.Merge(m, src)
}
func (m *TopicDetailsAllReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicDetailsAllReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDetailsAllReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDetailsAllReq proto.InternalMessageInfo

func (m *TopicDetailsAllReq) GetTopicId() int64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *TopicDetailsAllReq) GetSortBy() int64 {
	if m != nil {
		return m.SortBy
	}
	return 0
}

func (m *TopicDetailsAllReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *TopicDetailsAllReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *TopicDetailsAllReq) GetLocalTime() int32 {
	if m != nil {
		return m.LocalTime
	}
	return 0
}

func (m *TopicDetailsAllReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *TopicDetailsAllReq) GetNeedRefresh() int32 {
	if m != nil {
		return m.NeedRefresh
	}
	return 0
}

func (m *TopicDetailsAllReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *TopicDetailsAllReq) GetTopicDetailsExtMode() TopicDetailsExtMode {
	if m != nil {
		return m.TopicDetailsExtMode
	}
	return TopicDetailsExtMode_MODE_ILLEGAL_TYPE
}

func (m *TopicDetailsAllReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

type TopicDetailsAllReply struct {
	DetailsTopInfo       *DetailsTopInfo    `protobuf:"bytes,1,opt,name=details_top_info,json=detailsTopInfo,proto3" json:"details_top_info,omitempty"`
	TopicActivities      *TopicActivities   `protobuf:"bytes,2,opt,name=topic_activities,json=topicActivities,proto3" json:"topic_activities,omitempty"`
	TopicCardList        *TopicCardList     `protobuf:"bytes,3,opt,name=topic_card_list,json=topicCardList,proto3" json:"topic_card_list,omitempty"`
	FunctionalCard       *FunctionalCard    `protobuf:"bytes,4,opt,name=functional_card,json=functionalCard,proto3" json:"functional_card,omitempty"`
	PubLayer             *PubLayer          `protobuf:"bytes,5,opt,name=pub_layer,json=pubLayer,proto3" json:"pub_layer,omitempty"`
	TimeLineResource     *TimeLineResource  `protobuf:"bytes,6,opt,name=time_line_resource,json=timeLineResource,proto3" json:"time_line_resource,omitempty"`
	TopicServerConfig    *TopicServerConfig `protobuf:"bytes,7,opt,name=topic_server_config,json=topicServerConfig,proto3" json:"topic_server_config,omitempty"`
	TopicOnline          *TopicOnline       `protobuf:"bytes,8,opt,name=topic_online,json=topicOnline,proto3" json:"topic_online,omitempty"`
	TopicTopCards        []*TopicTopCard    `protobuf:"bytes,9,rep,name=topic_top_cards,json=topicTopCards,proto3" json:"topic_top_cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TopicDetailsAllReply) Reset()         { *m = TopicDetailsAllReply{} }
func (m *TopicDetailsAllReply) String() string { return proto.CompactTextString(m) }
func (*TopicDetailsAllReply) ProtoMessage()    {}
func (*TopicDetailsAllReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{7}
}
func (m *TopicDetailsAllReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDetailsAllReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDetailsAllReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDetailsAllReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDetailsAllReply.Merge(m, src)
}
func (m *TopicDetailsAllReply) XXX_Size() int {
	return m.Size()
}
func (m *TopicDetailsAllReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDetailsAllReply.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDetailsAllReply proto.InternalMessageInfo

func (m *TopicDetailsAllReply) GetDetailsTopInfo() *DetailsTopInfo {
	if m != nil {
		return m.DetailsTopInfo
	}
	return nil
}

func (m *TopicDetailsAllReply) GetTopicActivities() *TopicActivities {
	if m != nil {
		return m.TopicActivities
	}
	return nil
}

func (m *TopicDetailsAllReply) GetTopicCardList() *TopicCardList {
	if m != nil {
		return m.TopicCardList
	}
	return nil
}

func (m *TopicDetailsAllReply) GetFunctionalCard() *FunctionalCard {
	if m != nil {
		return m.FunctionalCard
	}
	return nil
}

func (m *TopicDetailsAllReply) GetPubLayer() *PubLayer {
	if m != nil {
		return m.PubLayer
	}
	return nil
}

func (m *TopicDetailsAllReply) GetTimeLineResource() *TimeLineResource {
	if m != nil {
		return m.TimeLineResource
	}
	return nil
}

func (m *TopicDetailsAllReply) GetTopicServerConfig() *TopicServerConfig {
	if m != nil {
		return m.TopicServerConfig
	}
	return nil
}

func (m *TopicDetailsAllReply) GetTopicOnline() *TopicOnline {
	if m != nil {
		return m.TopicOnline
	}
	return nil
}

func (m *TopicDetailsAllReply) GetTopicTopCards() []*TopicTopCard {
	if m != nil {
		return m.TopicTopCards
	}
	return nil
}

type TopicServerConfig struct {
	PubEventsIncreaseThreshold      int64    `protobuf:"varint,1,opt,name=pub_events_increase_threshold,json=pubEventsIncreaseThreshold,proto3" json:"pub_events_increase_threshold,omitempty"`
	PubEventsHiddenTimeoutThreshold int64    `protobuf:"varint,2,opt,name=pub_events_hidden_timeout_threshold,json=pubEventsHiddenTimeoutThreshold,proto3" json:"pub_events_hidden_timeout_threshold,omitempty"`
	VertOnlineRefreshTime           int64    `protobuf:"varint,3,opt,name=vert_online_refresh_time,json=vertOnlineRefreshTime,proto3" json:"vert_online_refresh_time,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *TopicServerConfig) Reset()         { *m = TopicServerConfig{} }
func (m *TopicServerConfig) String() string { return proto.CompactTextString(m) }
func (*TopicServerConfig) ProtoMessage()    {}
func (*TopicServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{8}
}
func (m *TopicServerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicServerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicServerConfig.Merge(m, src)
}
func (m *TopicServerConfig) XXX_Size() int {
	return m.Size()
}
func (m *TopicServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TopicServerConfig proto.InternalMessageInfo

func (m *TopicServerConfig) GetPubEventsIncreaseThreshold() int64 {
	if m != nil {
		return m.PubEventsIncreaseThreshold
	}
	return 0
}

func (m *TopicServerConfig) GetPubEventsHiddenTimeoutThreshold() int64 {
	if m != nil {
		return m.PubEventsHiddenTimeoutThreshold
	}
	return 0
}

func (m *TopicServerConfig) GetVertOnlineRefreshTime() int64 {
	if m != nil {
		return m.VertOnlineRefreshTime
	}
	return 0
}

type TimeLineResource struct {
	TimeLineId           int64             `protobuf:"varint,1,opt,name=time_line_id,json=timeLineId,proto3" json:"time_line_id,omitempty"`
	TimeLineTitle        string            `protobuf:"bytes,2,opt,name=time_line_title,json=timeLineTitle,proto3" json:"time_line_title,omitempty"`
	TimeLineEvents       []*TimeLineEvents `protobuf:"bytes,3,rep,name=time_line_events,json=timeLineEvents,proto3" json:"time_line_events,omitempty"`
	HasMore              bool              `protobuf:"varint,4,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	StartTime            int64             `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64             `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TimeLineResource) Reset()         { *m = TimeLineResource{} }
func (m *TimeLineResource) String() string { return proto.CompactTextString(m) }
func (*TimeLineResource) ProtoMessage()    {}
func (*TimeLineResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{9}
}
func (m *TimeLineResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeLineResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeLineResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeLineResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeLineResource.Merge(m, src)
}
func (m *TimeLineResource) XXX_Size() int {
	return m.Size()
}
func (m *TimeLineResource) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeLineResource.DiscardUnknown(m)
}

var xxx_messageInfo_TimeLineResource proto.InternalMessageInfo

func (m *TimeLineResource) GetTimeLineId() int64 {
	if m != nil {
		return m.TimeLineId
	}
	return 0
}

func (m *TimeLineResource) GetTimeLineTitle() string {
	if m != nil {
		return m.TimeLineTitle
	}
	return ""
}

func (m *TimeLineResource) GetTimeLineEvents() []*TimeLineEvents {
	if m != nil {
		return m.TimeLineEvents
	}
	return nil
}

func (m *TimeLineResource) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *TimeLineResource) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TimeLineResource) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type TimeLineEvents struct {
	EventId              int64    `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TimeDesc             string   `protobuf:"bytes,3,opt,name=time_desc,json=timeDesc,proto3" json:"time_desc,omitempty"`
	JumpLink             string   `protobuf:"bytes,4,opt,name=jump_link,json=jumpLink,proto3" json:"jump_link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeLineEvents) Reset()         { *m = TimeLineEvents{} }
func (m *TimeLineEvents) String() string { return proto.CompactTextString(m) }
func (*TimeLineEvents) ProtoMessage()    {}
func (*TimeLineEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{10}
}
func (m *TimeLineEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeLineEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeLineEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeLineEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeLineEvents.Merge(m, src)
}
func (m *TimeLineEvents) XXX_Size() int {
	return m.Size()
}
func (m *TimeLineEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeLineEvents.DiscardUnknown(m)
}

var xxx_messageInfo_TimeLineEvents proto.InternalMessageInfo

func (m *TimeLineEvents) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *TimeLineEvents) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TimeLineEvents) GetTimeDesc() string {
	if m != nil {
		return m.TimeDesc
	}
	return ""
}

func (m *TimeLineEvents) GetJumpLink() string {
	if m != nil {
		return m.JumpLink
	}
	return ""
}

type PubLayer struct {
	// 话题发布展示样式 0-默认样式
	// 20-默认展开+头像 21-默认展开+icon 22-默认收起+头像
	// story入口展示样式 11-当前样式修改动画生效时间：页面停留2s，参与按钮展开；12-底部常驻悬浮大按钮
	ShowType             int32       `protobuf:"varint,1,opt,name=show_type,json=showType,proto3" json:"show_type,omitempty"`
	JumpLink             string      `protobuf:"bytes,2,opt,name=jump_link,json=jumpLink,proto3" json:"jump_link,omitempty"`
	ButtonMeta           *ButtonMeta `protobuf:"bytes,3,opt,name=button_meta,json=buttonMeta,proto3" json:"button_meta,omitempty"`
	ClosePubLayerEntry   bool        `protobuf:"varint,4,opt,name=close_pub_layer_entry,json=closePubLayerEntry,proto3" json:"close_pub_layer_entry,omitempty"`
	UserAvatar           string      `protobuf:"bytes,5,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PubLayer) Reset()         { *m = PubLayer{} }
func (m *PubLayer) String() string { return proto.CompactTextString(m) }
func (*PubLayer) ProtoMessage()    {}
func (*PubLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{11}
}
func (m *PubLayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubLayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubLayer.Merge(m, src)
}
func (m *PubLayer) XXX_Size() int {
	return m.Size()
}
func (m *PubLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_PubLayer.DiscardUnknown(m)
}

var xxx_messageInfo_PubLayer proto.InternalMessageInfo

func (m *PubLayer) GetShowType() int32 {
	if m != nil {
		return m.ShowType
	}
	return 0
}

func (m *PubLayer) GetJumpLink() string {
	if m != nil {
		return m.JumpLink
	}
	return ""
}

func (m *PubLayer) GetButtonMeta() *ButtonMeta {
	if m != nil {
		return m.ButtonMeta
	}
	return nil
}

func (m *PubLayer) GetClosePubLayerEntry() bool {
	if m != nil {
		return m.ClosePubLayerEntry
	}
	return false
}

func (m *PubLayer) GetUserAvatar() string {
	if m != nil {
		return m.UserAvatar
	}
	return ""
}

type ButtonMeta struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Icon                 string   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ButtonMeta) Reset()         { *m = ButtonMeta{} }
func (m *ButtonMeta) String() string { return proto.CompactTextString(m) }
func (*ButtonMeta) ProtoMessage()    {}
func (*ButtonMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{12}
}
func (m *ButtonMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ButtonMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ButtonMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ButtonMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ButtonMeta.Merge(m, src)
}
func (m *ButtonMeta) XXX_Size() int {
	return m.Size()
}
func (m *ButtonMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ButtonMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ButtonMeta proto.InternalMessageInfo

func (m *ButtonMeta) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ButtonMeta) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type FunctionalCard struct {
	Capsules             []*TopicCapsule `protobuf:"bytes,1,rep,name=capsules,proto3" json:"capsules,omitempty"`
	TrafficCard          *TrafficCard    `protobuf:"bytes,2,opt,name=traffic_card,json=trafficCard,proto3" json:"traffic_card,omitempty"`
	GameCard             *GameCard       `protobuf:"bytes,3,opt,name=game_card,json=gameCard,proto3" json:"game_card,omitempty"`
	StartTime            int64           `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64           `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FunctionalCard) Reset()         { *m = FunctionalCard{} }
func (m *FunctionalCard) String() string { return proto.CompactTextString(m) }
func (*FunctionalCard) ProtoMessage()    {}
func (*FunctionalCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{13}
}
func (m *FunctionalCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionalCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionalCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionalCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionalCard.Merge(m, src)
}
func (m *FunctionalCard) XXX_Size() int {
	return m.Size()
}
func (m *FunctionalCard) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionalCard.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionalCard proto.InternalMessageInfo

func (m *FunctionalCard) GetCapsules() []*TopicCapsule {
	if m != nil {
		return m.Capsules
	}
	return nil
}

func (m *FunctionalCard) GetTrafficCard() *TrafficCard {
	if m != nil {
		return m.TrafficCard
	}
	return nil
}

func (m *FunctionalCard) GetGameCard() *GameCard {
	if m != nil {
		return m.GameCard
	}
	return nil
}

func (m *FunctionalCard) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FunctionalCard) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type GameCard struct {
	GameId               int64    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameIcon             string   `protobuf:"bytes,2,opt,name=game_icon,json=gameIcon,proto3" json:"game_icon,omitempty"`
	GameName             string   `protobuf:"bytes,3,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	Score                string   `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	GameTags             string   `protobuf:"bytes,5,opt,name=game_tags,json=gameTags,proto3" json:"game_tags,omitempty"`
	Notice               string   `protobuf:"bytes,6,opt,name=notice,proto3" json:"notice,omitempty"`
	GameLink             string   `protobuf:"bytes,7,opt,name=game_link,json=gameLink,proto3" json:"game_link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameCard) Reset()         { *m = GameCard{} }
func (m *GameCard) String() string { return proto.CompactTextString(m) }
func (*GameCard) ProtoMessage()    {}
func (*GameCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{14}
}
func (m *GameCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameCard.Merge(m, src)
}
func (m *GameCard) XXX_Size() int {
	return m.Size()
}
func (m *GameCard) XXX_DiscardUnknown() {
	xxx_messageInfo_GameCard.DiscardUnknown(m)
}

var xxx_messageInfo_GameCard proto.InternalMessageInfo

func (m *GameCard) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GameCard) GetGameIcon() string {
	if m != nil {
		return m.GameIcon
	}
	return ""
}

func (m *GameCard) GetGameName() string {
	if m != nil {
		return m.GameName
	}
	return ""
}

func (m *GameCard) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *GameCard) GetGameTags() string {
	if m != nil {
		return m.GameTags
	}
	return ""
}

func (m *GameCard) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

func (m *GameCard) GetGameLink() string {
	if m != nil {
		return m.GameLink
	}
	return ""
}

type TopicCapsule struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	JumpUrl              string   `protobuf:"bytes,2,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	IconUrl              string   `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicCapsule) Reset()         { *m = TopicCapsule{} }
func (m *TopicCapsule) String() string { return proto.CompactTextString(m) }
func (*TopicCapsule) ProtoMessage()    {}
func (*TopicCapsule) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{15}
}
func (m *TopicCapsule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicCapsule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicCapsule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicCapsule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicCapsule.Merge(m, src)
}
func (m *TopicCapsule) XXX_Size() int {
	return m.Size()
}
func (m *TopicCapsule) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicCapsule.DiscardUnknown(m)
}

var xxx_messageInfo_TopicCapsule proto.InternalMessageInfo

func (m *TopicCapsule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TopicCapsule) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *TopicCapsule) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

type TrafficCard struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	JumpUrl              string   `protobuf:"bytes,2,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	IconUrl              string   `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	BasePic              string   `protobuf:"bytes,4,opt,name=base_pic,json=basePic,proto3" json:"base_pic,omitempty"`
	BenefitPoint         string   `protobuf:"bytes,5,opt,name=benefit_point,json=benefitPoint,proto3" json:"benefit_point,omitempty"`
	CardDesc             string   `protobuf:"bytes,6,opt,name=card_desc,json=cardDesc,proto3" json:"card_desc,omitempty"`
	JumpTitle            string   `protobuf:"bytes,7,opt,name=jump_title,json=jumpTitle,proto3" json:"jump_title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficCard) Reset()         { *m = TrafficCard{} }
func (m *TrafficCard) String() string { return proto.CompactTextString(m) }
func (*TrafficCard) ProtoMessage()    {}
func (*TrafficCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{16}
}
func (m *TrafficCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficCard.Merge(m, src)
}
func (m *TrafficCard) XXX_Size() int {
	return m.Size()
}
func (m *TrafficCard) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficCard.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficCard proto.InternalMessageInfo

func (m *TrafficCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrafficCard) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *TrafficCard) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *TrafficCard) GetBasePic() string {
	if m != nil {
		return m.BasePic
	}
	return ""
}

func (m *TrafficCard) GetBenefitPoint() string {
	if m != nil {
		return m.BenefitPoint
	}
	return ""
}

func (m *TrafficCard) GetCardDesc() string {
	if m != nil {
		return m.CardDesc
	}
	return ""
}

func (m *TrafficCard) GetJumpTitle() string {
	if m != nil {
		return m.JumpTitle
	}
	return ""
}

type DetailsTopInfo struct {
	TopicInfo             *TopicInfo        `protobuf:"bytes,1,opt,name=topic_info,json=topicInfo,proto3" json:"topic_info,omitempty"`
	User                  *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	StatsDesc             string            `protobuf:"bytes,3,opt,name=stats_desc,json=statsDesc,proto3" json:"stats_desc,omitempty"`
	HasCreateJurisdiction bool              `protobuf:"varint,4,opt,name=has_create_jurisdiction,json=hasCreateJurisdiction,proto3" json:"has_create_jurisdiction,omitempty"`
	OperationContent      *OperationContent `protobuf:"bytes,5,opt,name=operation_content,json=operationContent,proto3" json:"operation_content,omitempty"`
	HeadImgUrl            string            `protobuf:"bytes,6,opt,name=head_img_url,json=headImgUrl,proto3" json:"head_img_url,omitempty"`
	HeadImgBackcolor      string            `protobuf:"bytes,7,opt,name=head_img_backcolor,json=headImgBackcolor,proto3" json:"head_img_backcolor,omitempty"`
	WordColor             int32             `protobuf:"varint,8,opt,name=word_color,json=wordColor,proto3" json:"word_color,omitempty"`
	MissionPageShowType   int32             `protobuf:"varint,9,opt,name=mission_page_show_type,json=missionPageShowType,proto3" json:"mission_page_show_type,omitempty"`
	MissionUrl            string            `protobuf:"bytes,10,opt,name=mission_url,json=missionUrl,proto3" json:"mission_url,omitempty"`
	MissionText           string            `protobuf:"bytes,11,opt,name=mission_text,json=missionText,proto3" json:"mission_text,omitempty"`
	TopicSet              *TopicSet         `protobuf:"bytes,12,opt,name=topic_set,json=topicSet,proto3" json:"topic_set,omitempty"`
	Symbol                string            `protobuf:"bytes,13,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}          `json:"-"`
	XXX_unrecognized      []byte            `json:"-"`
	XXX_sizecache         int32             `json:"-"`
}

func (m *DetailsTopInfo) Reset()         { *m = DetailsTopInfo{} }
func (m *DetailsTopInfo) String() string { return proto.CompactTextString(m) }
func (*DetailsTopInfo) ProtoMessage()    {}
func (*DetailsTopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{17}
}
func (m *DetailsTopInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetailsTopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetailsTopInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetailsTopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetailsTopInfo.Merge(m, src)
}
func (m *DetailsTopInfo) XXX_Size() int {
	return m.Size()
}
func (m *DetailsTopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DetailsTopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DetailsTopInfo proto.InternalMessageInfo

func (m *DetailsTopInfo) GetTopicInfo() *TopicInfo {
	if m != nil {
		return m.TopicInfo
	}
	return nil
}

func (m *DetailsTopInfo) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *DetailsTopInfo) GetStatsDesc() string {
	if m != nil {
		return m.StatsDesc
	}
	return ""
}

func (m *DetailsTopInfo) GetHasCreateJurisdiction() bool {
	if m != nil {
		return m.HasCreateJurisdiction
	}
	return false
}

func (m *DetailsTopInfo) GetOperationContent() *OperationContent {
	if m != nil {
		return m.OperationContent
	}
	return nil
}

func (m *DetailsTopInfo) GetHeadImgUrl() string {
	if m != nil {
		return m.HeadImgUrl
	}
	return ""
}

func (m *DetailsTopInfo) GetHeadImgBackcolor() string {
	if m != nil {
		return m.HeadImgBackcolor
	}
	return ""
}

func (m *DetailsTopInfo) GetWordColor() int32 {
	if m != nil {
		return m.WordColor
	}
	return 0
}

func (m *DetailsTopInfo) GetMissionPageShowType() int32 {
	if m != nil {
		return m.MissionPageShowType
	}
	return 0
}

func (m *DetailsTopInfo) GetMissionUrl() string {
	if m != nil {
		return m.MissionUrl
	}
	return ""
}

func (m *DetailsTopInfo) GetMissionText() string {
	if m != nil {
		return m.MissionText
	}
	return ""
}

func (m *DetailsTopInfo) GetTopicSet() *TopicSet {
	if m != nil {
		return m.TopicSet
	}
	return nil
}

func (m *DetailsTopInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type TopicSet struct {
	SetId                int64    `protobuf:"varint,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	SetName              string   `protobuf:"bytes,2,opt,name=set_name,json=setName,proto3" json:"set_name,omitempty"`
	JumpUrl              string   `protobuf:"bytes,3,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	Desc                 string   `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicSet) Reset()         { *m = TopicSet{} }
func (m *TopicSet) String() string { return proto.CompactTextString(m) }
func (*TopicSet) ProtoMessage()    {}
func (*TopicSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{18}
}
func (m *TopicSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicSet.Merge(m, src)
}
func (m *TopicSet) XXX_Size() int {
	return m.Size()
}
func (m *TopicSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicSet.DiscardUnknown(m)
}

var xxx_messageInfo_TopicSet proto.InternalMessageInfo

func (m *TopicSet) GetSetId() int64 {
	if m != nil {
		return m.SetId
	}
	return 0
}

func (m *TopicSet) GetSetName() string {
	if m != nil {
		return m.SetName
	}
	return ""
}

func (m *TopicSet) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *TopicSet) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type OperationContent struct {
	OperationCard        *OperationCard `protobuf:"bytes,1,opt,name=operation_card,json=operationCard,proto3" json:"operation_card,omitempty"`
	StartTime            int64          `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64          `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *OperationContent) Reset()         { *m = OperationContent{} }
func (m *OperationContent) String() string { return proto.CompactTextString(m) }
func (*OperationContent) ProtoMessage()    {}
func (*OperationContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{19}
}
func (m *OperationContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationContent.Merge(m, src)
}
func (m *OperationContent) XXX_Size() int {
	return m.Size()
}
func (m *OperationContent) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationContent.DiscardUnknown(m)
}

var xxx_messageInfo_OperationContent proto.InternalMessageInfo

func (m *OperationContent) GetOperationCard() *OperationCard {
	if m != nil {
		return m.OperationCard
	}
	return nil
}

func (m *OperationContent) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *OperationContent) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type OperationCard struct {
	// Types that are valid to be assigned to Card:
	//	*OperationCard_LargeCoverInline
	Card                 isOperationCard_Card `protobuf_oneof:"Card"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OperationCard) Reset()         { *m = OperationCard{} }
func (m *OperationCard) String() string { return proto.CompactTextString(m) }
func (*OperationCard) ProtoMessage()    {}
func (*OperationCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{20}
}
func (m *OperationCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationCard.Merge(m, src)
}
func (m *OperationCard) XXX_Size() int {
	return m.Size()
}
func (m *OperationCard) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationCard.DiscardUnknown(m)
}

var xxx_messageInfo_OperationCard proto.InternalMessageInfo

type isOperationCard_Card interface {
	isOperationCard_Card()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OperationCard_LargeCoverInline struct {
	LargeCoverInline *LargeCoverInline `protobuf:"bytes,1,opt,name=large_cover_inline,json=largeCoverInline,proto3,oneof" json:"large_cover_inline,omitempty"`
}

func (*OperationCard_LargeCoverInline) isOperationCard_Card() {}

func (m *OperationCard) GetCard() isOperationCard_Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *OperationCard) GetLargeCoverInline() *LargeCoverInline {
	if x, ok := m.GetCard().(*OperationCard_LargeCoverInline); ok {
		return x.LargeCoverInline
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OperationCard) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OperationCard_LargeCoverInline)(nil),
	}
}

type LargeCoverInline struct {
	Base                 *proto1.Base       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CoverLeftText_1      string             `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      int32              `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2      string             `protobuf:"bytes,4,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2      int32              `protobuf:"varint,5,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3" json:"cover_left_icon_2,omitempty"`
	RightTopLiveBadge    *RightTopLiveBadge `protobuf:"bytes,6,opt,name=right_top_live_badge,json=rightTopLiveBadge,proto3" json:"right_top_live_badge,omitempty"`
	ExtraUri             string             `protobuf:"bytes,7,opt,name=extra_uri,json=extraUri,proto3" json:"extra_uri,omitempty"`
	InlineProgressBar    *InlineProgressBar `protobuf:"bytes,8,opt,name=inline_progress_bar,json=inlineProgressBar,proto3" json:"inline_progress_bar,omitempty"`
	TopicThreePoint      *TopicThreePoint   `protobuf:"bytes,9,opt,name=topic_three_point,json=topicThreePoint,proto3" json:"topic_three_point,omitempty"`
	CoverLeftDesc        string             `protobuf:"bytes,10,opt,name=cover_left_desc,json=coverLeftDesc,proto3" json:"cover_left_desc,omitempty"`
	HideDanmuSwitch      bool               `protobuf:"varint,11,opt,name=hide_danmu_switch,json=hideDanmuSwitch,proto3" json:"hide_danmu_switch,omitempty"`
	DisableDanmu         bool               `protobuf:"varint,12,opt,name=disable_danmu,json=disableDanmu,proto3" json:"disable_danmu,omitempty"`
	CanPlay              int32              `protobuf:"varint,13,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	DurationText         string             `protobuf:"bytes,14,opt,name=duration_text,json=durationText,proto3" json:"duration_text,omitempty"`
	RelationData         *RelationData      `protobuf:"bytes,15,opt,name=relation_data,json=relationData,proto3" json:"relation_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LargeCoverInline) Reset()         { *m = LargeCoverInline{} }
func (m *LargeCoverInline) String() string { return proto.CompactTextString(m) }
func (*LargeCoverInline) ProtoMessage()    {}
func (*LargeCoverInline) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{21}
}
func (m *LargeCoverInline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LargeCoverInline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LargeCoverInline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LargeCoverInline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LargeCoverInline.Merge(m, src)
}
func (m *LargeCoverInline) XXX_Size() int {
	return m.Size()
}
func (m *LargeCoverInline) XXX_DiscardUnknown() {
	xxx_messageInfo_LargeCoverInline.DiscardUnknown(m)
}

var xxx_messageInfo_LargeCoverInline proto.InternalMessageInfo

func (m *LargeCoverInline) GetBase() *proto1.Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *LargeCoverInline) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *LargeCoverInline) GetCoverLeftIcon_1() int32 {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *LargeCoverInline) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *LargeCoverInline) GetCoverLeftIcon_2() int32 {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *LargeCoverInline) GetRightTopLiveBadge() *RightTopLiveBadge {
	if m != nil {
		return m.RightTopLiveBadge
	}
	return nil
}

func (m *LargeCoverInline) GetExtraUri() string {
	if m != nil {
		return m.ExtraUri
	}
	return ""
}

func (m *LargeCoverInline) GetInlineProgressBar() *InlineProgressBar {
	if m != nil {
		return m.InlineProgressBar
	}
	return nil
}

func (m *LargeCoverInline) GetTopicThreePoint() *TopicThreePoint {
	if m != nil {
		return m.TopicThreePoint
	}
	return nil
}

func (m *LargeCoverInline) GetCoverLeftDesc() string {
	if m != nil {
		return m.CoverLeftDesc
	}
	return ""
}

func (m *LargeCoverInline) GetHideDanmuSwitch() bool {
	if m != nil {
		return m.HideDanmuSwitch
	}
	return false
}

func (m *LargeCoverInline) GetDisableDanmu() bool {
	if m != nil {
		return m.DisableDanmu
	}
	return false
}

func (m *LargeCoverInline) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *LargeCoverInline) GetDurationText() string {
	if m != nil {
		return m.DurationText
	}
	return ""
}

func (m *LargeCoverInline) GetRelationData() *RelationData {
	if m != nil {
		return m.RelationData
	}
	return nil
}

type RelationData struct {
	IsFav                bool     `protobuf:"varint,1,opt,name=is_fav,json=isFav,proto3" json:"is_fav,omitempty"`
	IsCoin               bool     `protobuf:"varint,2,opt,name=is_coin,json=isCoin,proto3" json:"is_coin,omitempty"`
	IsFollow             bool     `protobuf:"varint,3,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	IsLike               bool     `protobuf:"varint,4,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	LikeCount            int64    `protobuf:"varint,5,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationData) Reset()         { *m = RelationData{} }
func (m *RelationData) String() string { return proto.CompactTextString(m) }
func (*RelationData) ProtoMessage()    {}
func (*RelationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{22}
}
func (m *RelationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationData.Merge(m, src)
}
func (m *RelationData) XXX_Size() int {
	return m.Size()
}
func (m *RelationData) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationData.DiscardUnknown(m)
}

var xxx_messageInfo_RelationData proto.InternalMessageInfo

func (m *RelationData) GetIsFav() bool {
	if m != nil {
		return m.IsFav
	}
	return false
}

func (m *RelationData) GetIsCoin() bool {
	if m != nil {
		return m.IsCoin
	}
	return false
}

func (m *RelationData) GetIsFollow() bool {
	if m != nil {
		return m.IsFollow
	}
	return false
}

func (m *RelationData) GetIsLike() bool {
	if m != nil {
		return m.IsLike
	}
	return false
}

func (m *RelationData) GetLikeCount() int64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

type TopicThreePoint struct {
	DynThreePointItems   []*v2.ThreePointItem `protobuf:"bytes,1,rep,name=dyn_three_point_items,json=dynThreePointItems,proto3" json:"dyn_three_point_items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TopicThreePoint) Reset()         { *m = TopicThreePoint{} }
func (m *TopicThreePoint) String() string { return proto.CompactTextString(m) }
func (*TopicThreePoint) ProtoMessage()    {}
func (*TopicThreePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{23}
}
func (m *TopicThreePoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicThreePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicThreePoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicThreePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicThreePoint.Merge(m, src)
}
func (m *TopicThreePoint) XXX_Size() int {
	return m.Size()
}
func (m *TopicThreePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicThreePoint.DiscardUnknown(m)
}

var xxx_messageInfo_TopicThreePoint proto.InternalMessageInfo

func (m *TopicThreePoint) GetDynThreePointItems() []*v2.ThreePointItem {
	if m != nil {
		return m.DynThreePointItems
	}
	return nil
}

type ThreePointItem struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	JumpUrl              string   `protobuf:"bytes,2,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThreePointItem) Reset()         { *m = ThreePointItem{} }
func (m *ThreePointItem) String() string { return proto.CompactTextString(m) }
func (*ThreePointItem) ProtoMessage()    {}
func (*ThreePointItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{24}
}
func (m *ThreePointItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreePointItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreePointItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreePointItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreePointItem.Merge(m, src)
}
func (m *ThreePointItem) XXX_Size() int {
	return m.Size()
}
func (m *ThreePointItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreePointItem.DiscardUnknown(m)
}

var xxx_messageInfo_ThreePointItem proto.InternalMessageInfo

func (m *ThreePointItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ThreePointItem) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

type InlineProgressBar struct {
	IconDrag             string   `protobuf:"bytes,1,opt,name=icon_drag,json=iconDrag,proto3" json:"icon_drag,omitempty"`
	IconDragHash         string   `protobuf:"bytes,2,opt,name=icon_drag_hash,json=iconDragHash,proto3" json:"icon_drag_hash,omitempty"`
	IconStop             string   `protobuf:"bytes,3,opt,name=icon_stop,json=iconStop,proto3" json:"icon_stop,omitempty"`
	IconStopHash         string   `protobuf:"bytes,4,opt,name=icon_stop_hash,json=iconStopHash,proto3" json:"icon_stop_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InlineProgressBar) Reset()         { *m = InlineProgressBar{} }
func (m *InlineProgressBar) String() string { return proto.CompactTextString(m) }
func (*InlineProgressBar) ProtoMessage()    {}
func (*InlineProgressBar) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{25}
}
func (m *InlineProgressBar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineProgressBar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InlineProgressBar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InlineProgressBar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineProgressBar.Merge(m, src)
}
func (m *InlineProgressBar) XXX_Size() int {
	return m.Size()
}
func (m *InlineProgressBar) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineProgressBar.DiscardUnknown(m)
}

var xxx_messageInfo_InlineProgressBar proto.InternalMessageInfo

func (m *InlineProgressBar) GetIconDrag() string {
	if m != nil {
		return m.IconDrag
	}
	return ""
}

func (m *InlineProgressBar) GetIconDragHash() string {
	if m != nil {
		return m.IconDragHash
	}
	return ""
}

func (m *InlineProgressBar) GetIconStop() string {
	if m != nil {
		return m.IconStop
	}
	return ""
}

func (m *InlineProgressBar) GetIconStopHash() string {
	if m != nil {
		return m.IconStopHash
	}
	return ""
}

type RightTopLiveBadge struct {
	LiveStatus           int64              `protobuf:"varint,1,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	InLive               *LiveBadgeResource `protobuf:"bytes,2,opt,name=in_live,json=inLive,proto3" json:"in_live,omitempty"`
	LiveStatsDesc        string             `protobuf:"bytes,3,opt,name=live_stats_desc,json=liveStatsDesc,proto3" json:"live_stats_desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RightTopLiveBadge) Reset()         { *m = RightTopLiveBadge{} }
func (m *RightTopLiveBadge) String() string { return proto.CompactTextString(m) }
func (*RightTopLiveBadge) ProtoMessage()    {}
func (*RightTopLiveBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{26}
}
func (m *RightTopLiveBadge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RightTopLiveBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RightTopLiveBadge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RightTopLiveBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RightTopLiveBadge.Merge(m, src)
}
func (m *RightTopLiveBadge) XXX_Size() int {
	return m.Size()
}
func (m *RightTopLiveBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_RightTopLiveBadge.DiscardUnknown(m)
}

var xxx_messageInfo_RightTopLiveBadge proto.InternalMessageInfo

func (m *RightTopLiveBadge) GetLiveStatus() int64 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *RightTopLiveBadge) GetInLive() *LiveBadgeResource {
	if m != nil {
		return m.InLive
	}
	return nil
}

func (m *RightTopLiveBadge) GetLiveStatsDesc() string {
	if m != nil {
		return m.LiveStatsDesc
	}
	return ""
}

type LiveBadgeResource struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	AnimationUrl         string   `protobuf:"bytes,2,opt,name=animation_url,json=animationUrl,proto3" json:"animation_url,omitempty"`
	AnimationUrlHash     string   `protobuf:"bytes,3,opt,name=animation_url_hash,json=animationUrlHash,proto3" json:"animation_url_hash,omitempty"`
	BackgroundColorLight string   `protobuf:"bytes,4,opt,name=background_color_light,json=backgroundColorLight,proto3" json:"background_color_light,omitempty"`
	BackgroundColorNight string   `protobuf:"bytes,5,opt,name=background_color_night,json=backgroundColorNight,proto3" json:"background_color_night,omitempty"`
	AlphaLight           int64    `protobuf:"varint,6,opt,name=alpha_light,json=alphaLight,proto3" json:"alpha_light,omitempty"`
	AlphaNight           int64    `protobuf:"varint,7,opt,name=alpha_night,json=alphaNight,proto3" json:"alpha_night,omitempty"`
	FontColor            string   `protobuf:"bytes,8,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveBadgeResource) Reset()         { *m = LiveBadgeResource{} }
func (m *LiveBadgeResource) String() string { return proto.CompactTextString(m) }
func (*LiveBadgeResource) ProtoMessage()    {}
func (*LiveBadgeResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{27}
}
func (m *LiveBadgeResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveBadgeResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveBadgeResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveBadgeResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveBadgeResource.Merge(m, src)
}
func (m *LiveBadgeResource) XXX_Size() int {
	return m.Size()
}
func (m *LiveBadgeResource) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveBadgeResource.DiscardUnknown(m)
}

var xxx_messageInfo_LiveBadgeResource proto.InternalMessageInfo

func (m *LiveBadgeResource) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *LiveBadgeResource) GetAnimationUrl() string {
	if m != nil {
		return m.AnimationUrl
	}
	return ""
}

func (m *LiveBadgeResource) GetAnimationUrlHash() string {
	if m != nil {
		return m.AnimationUrlHash
	}
	return ""
}

func (m *LiveBadgeResource) GetBackgroundColorLight() string {
	if m != nil {
		return m.BackgroundColorLight
	}
	return ""
}

func (m *LiveBadgeResource) GetBackgroundColorNight() string {
	if m != nil {
		return m.BackgroundColorNight
	}
	return ""
}

func (m *LiveBadgeResource) GetAlphaLight() int64 {
	if m != nil {
		return m.AlphaLight
	}
	return 0
}

func (m *LiveBadgeResource) GetAlphaNight() int64 {
	if m != nil {
		return m.AlphaNight
	}
	return 0
}

func (m *LiveBadgeResource) GetFontColor() string {
	if m != nil {
		return m.FontColor
	}
	return ""
}

type User struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Face                 string   `protobuf:"bytes,2,opt,name=face,proto3" json:"face,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NameDesc             string   `protobuf:"bytes,4,opt,name=name_desc,json=nameDesc,proto3" json:"name_desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{28}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *User) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetNameDesc() string {
	if m != nil {
		return m.NameDesc
	}
	return ""
}

type TopicActivities struct {
	Activity             []*TopicActivity `protobuf:"bytes,1,rep,name=activity,proto3" json:"activity,omitempty"`
	ActListTitle         string           `protobuf:"bytes,2,opt,name=act_list_title,json=actListTitle,proto3" json:"act_list_title,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TopicActivities) Reset()         { *m = TopicActivities{} }
func (m *TopicActivities) String() string { return proto.CompactTextString(m) }
func (*TopicActivities) ProtoMessage()    {}
func (*TopicActivities) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{29}
}
func (m *TopicActivities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicActivities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicActivities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicActivities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicActivities.Merge(m, src)
}
func (m *TopicActivities) XXX_Size() int {
	return m.Size()
}
func (m *TopicActivities) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicActivities.DiscardUnknown(m)
}

var xxx_messageInfo_TopicActivities proto.InternalMessageInfo

func (m *TopicActivities) GetActivity() []*TopicActivity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (m *TopicActivities) GetActListTitle() string {
	if m != nil {
		return m.ActListTitle
	}
	return ""
}

type TopicCardList struct {
	TopicCardItems       []*TopicCardItem   `protobuf:"bytes,1,rep,name=topic_card_items,json=topicCardItems,proto3" json:"topic_card_items,omitempty"`
	Offset               string             `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	HasMore              bool               `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	TopicSortByConf      *TopicSortByConf   `protobuf:"bytes,4,opt,name=topic_sort_by_conf,json=topicSortByConf,proto3" json:"topic_sort_by_conf,omitempty"`
	NoCardResultReply    *NoCardResultReply `protobuf:"bytes,5,opt,name=no_card_result_reply,json=noCardResultReply,proto3" json:"no_card_result_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TopicCardList) Reset()         { *m = TopicCardList{} }
func (m *TopicCardList) String() string { return proto.CompactTextString(m) }
func (*TopicCardList) ProtoMessage()    {}
func (*TopicCardList) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{30}
}
func (m *TopicCardList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicCardList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicCardList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicCardList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicCardList.Merge(m, src)
}
func (m *TopicCardList) XXX_Size() int {
	return m.Size()
}
func (m *TopicCardList) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicCardList.DiscardUnknown(m)
}

var xxx_messageInfo_TopicCardList proto.InternalMessageInfo

func (m *TopicCardList) GetTopicCardItems() []*TopicCardItem {
	if m != nil {
		return m.TopicCardItems
	}
	return nil
}

func (m *TopicCardList) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *TopicCardList) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *TopicCardList) GetTopicSortByConf() *TopicSortByConf {
	if m != nil {
		return m.TopicSortByConf
	}
	return nil
}

func (m *TopicCardList) GetNoCardResultReply() *NoCardResultReply {
	if m != nil {
		return m.NoCardResultReply
	}
	return nil
}

type NoCardResultReply struct {
	DefaultGuideText     string      `protobuf:"bytes,1,opt,name=default_guide_text,json=defaultGuideText,proto3" json:"default_guide_text,omitempty"`
	ShowButton           *ShowButton `protobuf:"bytes,2,opt,name=show_button,json=showButton,proto3" json:"show_button,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NoCardResultReply) Reset()         { *m = NoCardResultReply{} }
func (m *NoCardResultReply) String() string { return proto.CompactTextString(m) }
func (*NoCardResultReply) ProtoMessage()    {}
func (*NoCardResultReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{31}
}
func (m *NoCardResultReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoCardResultReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoCardResultReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoCardResultReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoCardResultReply.Merge(m, src)
}
func (m *NoCardResultReply) XXX_Size() int {
	return m.Size()
}
func (m *NoCardResultReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoCardResultReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoCardResultReply proto.InternalMessageInfo

func (m *NoCardResultReply) GetDefaultGuideText() string {
	if m != nil {
		return m.DefaultGuideText
	}
	return ""
}

func (m *NoCardResultReply) GetShowButton() *ShowButton {
	if m != nil {
		return m.ShowButton
	}
	return nil
}

type ShowButton struct {
	ShowText             string   `protobuf:"bytes,1,opt,name=show_text,json=showText,proto3" json:"show_text,omitempty"`
	JumpUrl              string   `protobuf:"bytes,2,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShowButton) Reset()         { *m = ShowButton{} }
func (m *ShowButton) String() string { return proto.CompactTextString(m) }
func (*ShowButton) ProtoMessage()    {}
func (*ShowButton) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{32}
}
func (m *ShowButton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowButton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowButton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowButton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowButton.Merge(m, src)
}
func (m *ShowButton) XXX_Size() int {
	return m.Size()
}
func (m *ShowButton) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowButton.DiscardUnknown(m)
}

var xxx_messageInfo_ShowButton proto.InternalMessageInfo

func (m *ShowButton) GetShowText() string {
	if m != nil {
		return m.ShowText
	}
	return ""
}

func (m *ShowButton) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

type TopicCardItem struct {
	Type                 TopicCardType       `protobuf:"varint,1,opt,name=type,proto3,enum=bilibili.app.topic.v1.TopicCardType" json:"type,omitempty"`
	DynamicItem          *v2.DynamicItem     `protobuf:"bytes,2,opt,name=dynamic_item,json=dynamicItem,proto3" json:"dynamic_item,omitempty"`
	FordCardItem         *FoldCardItem       `protobuf:"bytes,3,opt,name=ford_card_item,json=fordCardItem,proto3" json:"ford_card_item,omitempty"`
	VideoSmallCardItem   *VideoSmallCardItem `protobuf:"bytes,4,opt,name=video_small_card_item,json=videoSmallCardItem,proto3" json:"video_small_card_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TopicCardItem) Reset()         { *m = TopicCardItem{} }
func (m *TopicCardItem) String() string { return proto.CompactTextString(m) }
func (*TopicCardItem) ProtoMessage()    {}
func (*TopicCardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{33}
}
func (m *TopicCardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicCardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicCardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicCardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicCardItem.Merge(m, src)
}
func (m *TopicCardItem) XXX_Size() int {
	return m.Size()
}
func (m *TopicCardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicCardItem.DiscardUnknown(m)
}

var xxx_messageInfo_TopicCardItem proto.InternalMessageInfo

func (m *TopicCardItem) GetType() TopicCardType {
	if m != nil {
		return m.Type
	}
	return TopicCardType_ILLEGAL_TYPE
}

func (m *TopicCardItem) GetDynamicItem() *v2.DynamicItem {
	if m != nil {
		return m.DynamicItem
	}
	return nil
}

func (m *TopicCardItem) GetFordCardItem() *FoldCardItem {
	if m != nil {
		return m.FordCardItem
	}
	return nil
}

func (m *TopicCardItem) GetVideoSmallCardItem() *VideoSmallCardItem {
	if m != nil {
		return m.VideoSmallCardItem
	}
	return nil
}

type VideoSmallCardItem struct {
	VideoCardBase        *VideoCardBase `protobuf:"bytes,1,opt,name=video_card_base,json=videoCardBase,proto3" json:"video_card_base,omitempty"`
	CoverLeftBadgeText   string         `protobuf:"bytes,2,opt,name=cover_left_badge_text,json=coverLeftBadgeText,proto3" json:"cover_left_badge_text,omitempty"`
	CardStatIcon_1       int64          `protobuf:"varint,3,opt,name=card_stat_icon_1,json=cardStatIcon1,proto3" json:"card_stat_icon_1,omitempty"`
	CardStatText_1       string         `protobuf:"bytes,4,opt,name=card_stat_text_1,json=cardStatText1,proto3" json:"card_stat_text_1,omitempty"`
	CardStatIcon_2       int64          `protobuf:"varint,5,opt,name=card_stat_icon_2,json=cardStatIcon2,proto3" json:"card_stat_icon_2,omitempty"`
	CardStatText_2       string         `protobuf:"bytes,6,opt,name=card_stat_text_2,json=cardStatText2,proto3" json:"card_stat_text_2,omitempty"`
	ServerInfo           string         `protobuf:"bytes,7,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VideoSmallCardItem) Reset()         { *m = VideoSmallCardItem{} }
func (m *VideoSmallCardItem) String() string { return proto.CompactTextString(m) }
func (*VideoSmallCardItem) ProtoMessage()    {}
func (*VideoSmallCardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{34}
}
func (m *VideoSmallCardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoSmallCardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoSmallCardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoSmallCardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoSmallCardItem.Merge(m, src)
}
func (m *VideoSmallCardItem) XXX_Size() int {
	return m.Size()
}
func (m *VideoSmallCardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoSmallCardItem.DiscardUnknown(m)
}

var xxx_messageInfo_VideoSmallCardItem proto.InternalMessageInfo

func (m *VideoSmallCardItem) GetVideoCardBase() *VideoCardBase {
	if m != nil {
		return m.VideoCardBase
	}
	return nil
}

func (m *VideoSmallCardItem) GetCoverLeftBadgeText() string {
	if m != nil {
		return m.CoverLeftBadgeText
	}
	return ""
}

func (m *VideoSmallCardItem) GetCardStatIcon_1() int64 {
	if m != nil {
		return m.CardStatIcon_1
	}
	return 0
}

func (m *VideoSmallCardItem) GetCardStatText_1() string {
	if m != nil {
		return m.CardStatText_1
	}
	return ""
}

func (m *VideoSmallCardItem) GetCardStatIcon_2() int64 {
	if m != nil {
		return m.CardStatIcon_2
	}
	return 0
}

func (m *VideoSmallCardItem) GetCardStatText_2() string {
	if m != nil {
		return m.CardStatText_2
	}
	return ""
}

func (m *VideoSmallCardItem) GetServerInfo() string {
	if m != nil {
		return m.ServerInfo
	}
	return ""
}

type VideoCardBase struct {
	Cover                string   `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UpName               string   `protobuf:"bytes,3,opt,name=up_name,json=upName,proto3" json:"up_name,omitempty"`
	Play                 int64    `protobuf:"varint,4,opt,name=play,proto3" json:"play,omitempty"`
	JumpLink             string   `protobuf:"bytes,5,opt,name=jump_link,json=jumpLink,proto3" json:"jump_link,omitempty"`
	Aid                  int64    `protobuf:"varint,6,opt,name=aid,proto3" json:"aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoCardBase) Reset()         { *m = VideoCardBase{} }
func (m *VideoCardBase) String() string { return proto.CompactTextString(m) }
func (*VideoCardBase) ProtoMessage()    {}
func (*VideoCardBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{35}
}
func (m *VideoCardBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoCardBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoCardBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoCardBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoCardBase.Merge(m, src)
}
func (m *VideoCardBase) XXX_Size() int {
	return m.Size()
}
func (m *VideoCardBase) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoCardBase.DiscardUnknown(m)
}

var xxx_messageInfo_VideoCardBase proto.InternalMessageInfo

func (m *VideoCardBase) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *VideoCardBase) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *VideoCardBase) GetUpName() string {
	if m != nil {
		return m.UpName
	}
	return ""
}

func (m *VideoCardBase) GetPlay() int64 {
	if m != nil {
		return m.Play
	}
	return 0
}

func (m *VideoCardBase) GetJumpLink() string {
	if m != nil {
		return m.JumpLink
	}
	return ""
}

func (m *VideoCardBase) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type FoldCardItem struct {
	IsShowFold           int32    `protobuf:"varint,1,opt,name=is_show_fold,json=isShowFold,proto3" json:"is_show_fold,omitempty"`
	FoldCount            int64    `protobuf:"varint,2,opt,name=fold_count,json=foldCount,proto3" json:"fold_count,omitempty"`
	CardShowDesc         string   `protobuf:"bytes,3,opt,name=card_show_desc,json=cardShowDesc,proto3" json:"card_show_desc,omitempty"`
	FoldDesc             string   `protobuf:"bytes,4,opt,name=fold_desc,json=foldDesc,proto3" json:"fold_desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FoldCardItem) Reset()         { *m = FoldCardItem{} }
func (m *FoldCardItem) String() string { return proto.CompactTextString(m) }
func (*FoldCardItem) ProtoMessage()    {}
func (*FoldCardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{36}
}
func (m *FoldCardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FoldCardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FoldCardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FoldCardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FoldCardItem.Merge(m, src)
}
func (m *FoldCardItem) XXX_Size() int {
	return m.Size()
}
func (m *FoldCardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_FoldCardItem.DiscardUnknown(m)
}

var xxx_messageInfo_FoldCardItem proto.InternalMessageInfo

func (m *FoldCardItem) GetIsShowFold() int32 {
	if m != nil {
		return m.IsShowFold
	}
	return 0
}

func (m *FoldCardItem) GetFoldCount() int64 {
	if m != nil {
		return m.FoldCount
	}
	return 0
}

func (m *FoldCardItem) GetCardShowDesc() string {
	if m != nil {
		return m.CardShowDesc
	}
	return ""
}

func (m *FoldCardItem) GetFoldDesc() string {
	if m != nil {
		return m.FoldDesc
	}
	return ""
}

type TopicDetailsFoldReq struct {
	TopicId              int64          `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Offset               string         `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	PageSize             int32          `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	LocalTime            int32          `protobuf:"varint,4,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,5,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	FromSortBy           int64          `protobuf:"varint,6,opt,name=from_sort_by,json=fromSortBy,proto3" json:"from_sort_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TopicDetailsFoldReq) Reset()         { *m = TopicDetailsFoldReq{} }
func (m *TopicDetailsFoldReq) String() string { return proto.CompactTextString(m) }
func (*TopicDetailsFoldReq) ProtoMessage()    {}
func (*TopicDetailsFoldReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{37}
}
func (m *TopicDetailsFoldReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDetailsFoldReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDetailsFoldReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDetailsFoldReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDetailsFoldReq.Merge(m, src)
}
func (m *TopicDetailsFoldReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicDetailsFoldReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDetailsFoldReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDetailsFoldReq proto.InternalMessageInfo

func (m *TopicDetailsFoldReq) GetTopicId() int64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *TopicDetailsFoldReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *TopicDetailsFoldReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *TopicDetailsFoldReq) GetLocalTime() int32 {
	if m != nil {
		return m.LocalTime
	}
	return 0
}

func (m *TopicDetailsFoldReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *TopicDetailsFoldReq) GetFromSortBy() int64 {
	if m != nil {
		return m.FromSortBy
	}
	return 0
}

type TopicDetailsFoldReply struct {
	TopicCardList        *TopicCardList `protobuf:"bytes,1,opt,name=topic_card_list,json=topicCardList,proto3" json:"topic_card_list,omitempty"`
	FoldCount            int64          `protobuf:"varint,2,opt,name=fold_count,json=foldCount,proto3" json:"fold_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TopicDetailsFoldReply) Reset()         { *m = TopicDetailsFoldReply{} }
func (m *TopicDetailsFoldReply) String() string { return proto.CompactTextString(m) }
func (*TopicDetailsFoldReply) ProtoMessage()    {}
func (*TopicDetailsFoldReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{38}
}
func (m *TopicDetailsFoldReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicDetailsFoldReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicDetailsFoldReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicDetailsFoldReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicDetailsFoldReply.Merge(m, src)
}
func (m *TopicDetailsFoldReply) XXX_Size() int {
	return m.Size()
}
func (m *TopicDetailsFoldReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicDetailsFoldReply.DiscardUnknown(m)
}

var xxx_messageInfo_TopicDetailsFoldReply proto.InternalMessageInfo

func (m *TopicDetailsFoldReply) GetTopicCardList() *TopicCardList {
	if m != nil {
		return m.TopicCardList
	}
	return nil
}

func (m *TopicDetailsFoldReply) GetFoldCount() int64 {
	if m != nil {
		return m.FoldCount
	}
	return 0
}

type TopicInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uid                  int64    `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	View                 int64    `protobuf:"varint,4,opt,name=view,proto3" json:"view,omitempty"`
	Discuss              int64    `protobuf:"varint,5,opt,name=discuss,proto3" json:"discuss,omitempty"`
	Fav                  int64    `protobuf:"varint,6,opt,name=fav,proto3" json:"fav,omitempty"`
	Dynamics             int64    `protobuf:"varint,7,opt,name=dynamics,proto3" json:"dynamics,omitempty"`
	State                int32    `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	JumpUrl              string   `protobuf:"bytes,9,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	Backcolor            string   `protobuf:"bytes,10,opt,name=backcolor,proto3" json:"backcolor,omitempty"`
	IsFav                bool     `protobuf:"varint,11,opt,name=is_fav,json=isFav,proto3" json:"is_fav,omitempty"`
	Description          string   `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	CreateSource         int32    `protobuf:"varint,13,opt,name=create_source,json=createSource,proto3" json:"create_source,omitempty"`
	SharePic             string   `protobuf:"bytes,14,opt,name=share_pic,json=sharePic,proto3" json:"share_pic,omitempty"`
	Share                int64    `protobuf:"varint,15,opt,name=share,proto3" json:"share,omitempty"`
	Like                 int64    `protobuf:"varint,16,opt,name=like,proto3" json:"like,omitempty"`
	ShareUrl             string   `protobuf:"bytes,17,opt,name=share_url,json=shareUrl,proto3" json:"share_url,omitempty"`
	IsLike               bool     `protobuf:"varint,18,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	Type                 int32    `protobuf:"varint,19,opt,name=type,proto3" json:"type,omitempty"`
	StatsDesc            string   `protobuf:"bytes,20,opt,name=stats_desc,json=statsDesc,proto3" json:"stats_desc,omitempty"`
	FixedTopicIcon       string   `protobuf:"bytes,21,opt,name=fixed_topic_icon,json=fixedTopicIcon,proto3" json:"fixed_topic_icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicInfo) Reset()         { *m = TopicInfo{} }
func (m *TopicInfo) String() string { return proto.CompactTextString(m) }
func (*TopicInfo) ProtoMessage()    {}
func (*TopicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{39}
}
func (m *TopicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicInfo.Merge(m, src)
}
func (m *TopicInfo) XXX_Size() int {
	return m.Size()
}
func (m *TopicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TopicInfo proto.InternalMessageInfo

func (m *TopicInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TopicInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TopicInfo) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TopicInfo) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *TopicInfo) GetDiscuss() int64 {
	if m != nil {
		return m.Discuss
	}
	return 0
}

func (m *TopicInfo) GetFav() int64 {
	if m != nil {
		return m.Fav
	}
	return 0
}

func (m *TopicInfo) GetDynamics() int64 {
	if m != nil {
		return m.Dynamics
	}
	return 0
}

func (m *TopicInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TopicInfo) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *TopicInfo) GetBackcolor() string {
	if m != nil {
		return m.Backcolor
	}
	return ""
}

func (m *TopicInfo) GetIsFav() bool {
	if m != nil {
		return m.IsFav
	}
	return false
}

func (m *TopicInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TopicInfo) GetCreateSource() int32 {
	if m != nil {
		return m.CreateSource
	}
	return 0
}

func (m *TopicInfo) GetSharePic() string {
	if m != nil {
		return m.SharePic
	}
	return ""
}

func (m *TopicInfo) GetShare() int64 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *TopicInfo) GetLike() int64 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *TopicInfo) GetShareUrl() string {
	if m != nil {
		return m.ShareUrl
	}
	return ""
}

func (m *TopicInfo) GetIsLike() bool {
	if m != nil {
		return m.IsLike
	}
	return false
}

func (m *TopicInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TopicInfo) GetStatsDesc() string {
	if m != nil {
		return m.StatsDesc
	}
	return ""
}

func (m *TopicInfo) GetFixedTopicIcon() string {
	if m != nil {
		return m.FixedTopicIcon
	}
	return ""
}

type TopicActivity struct {
	ActivityId           int64    `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityName         string   `protobuf:"bytes,2,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`
	JumpUrl              string   `protobuf:"bytes,3,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url,omitempty"`
	IconUrl              string   `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicActivity) Reset()         { *m = TopicActivity{} }
func (m *TopicActivity) String() string { return proto.CompactTextString(m) }
func (*TopicActivity) ProtoMessage()    {}
func (*TopicActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{40}
}
func (m *TopicActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicActivity.Merge(m, src)
}
func (m *TopicActivity) XXX_Size() int {
	return m.Size()
}
func (m *TopicActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicActivity.DiscardUnknown(m)
}

var xxx_messageInfo_TopicActivity proto.InternalMessageInfo

func (m *TopicActivity) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *TopicActivity) GetActivityName() string {
	if m != nil {
		return m.ActivityName
	}
	return ""
}

func (m *TopicActivity) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *TopicActivity) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

type TopicSortByConf struct {
	DefaultSortBy        int64          `protobuf:"varint,1,opt,name=default_sort_by,json=defaultSortBy,proto3" json:"default_sort_by,omitempty"`
	AllSortBy            []*SortContent `protobuf:"bytes,2,rep,name=all_sort_by,json=allSortBy,proto3" json:"all_sort_by,omitempty"`
	ShowSortBy           int64          `protobuf:"varint,3,opt,name=show_sort_by,json=showSortBy,proto3" json:"show_sort_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TopicSortByConf) Reset()         { *m = TopicSortByConf{} }
func (m *TopicSortByConf) String() string { return proto.CompactTextString(m) }
func (*TopicSortByConf) ProtoMessage()    {}
func (*TopicSortByConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{41}
}
func (m *TopicSortByConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicSortByConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicSortByConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicSortByConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicSortByConf.Merge(m, src)
}
func (m *TopicSortByConf) XXX_Size() int {
	return m.Size()
}
func (m *TopicSortByConf) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicSortByConf.DiscardUnknown(m)
}

var xxx_messageInfo_TopicSortByConf proto.InternalMessageInfo

func (m *TopicSortByConf) GetDefaultSortBy() int64 {
	if m != nil {
		return m.DefaultSortBy
	}
	return 0
}

func (m *TopicSortByConf) GetAllSortBy() []*SortContent {
	if m != nil {
		return m.AllSortBy
	}
	return nil
}

func (m *TopicSortByConf) GetShowSortBy() int64 {
	if m != nil {
		return m.ShowSortBy
	}
	return 0
}

type SortContent struct {
	SortBy               int64    `protobuf:"varint,1,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortName             string   `protobuf:"bytes,2,opt,name=sort_name,json=sortName,proto3" json:"sort_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SortContent) Reset()         { *m = SortContent{} }
func (m *SortContent) String() string { return proto.CompactTextString(m) }
func (*SortContent) ProtoMessage()    {}
func (*SortContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{42}
}
func (m *SortContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortContent.Merge(m, src)
}
func (m *SortContent) XXX_Size() int {
	return m.Size()
}
func (m *SortContent) XXX_DiscardUnknown() {
	xxx_messageInfo_SortContent.DiscardUnknown(m)
}

var xxx_messageInfo_SortContent proto.InternalMessageInfo

func (m *SortContent) GetSortBy() int64 {
	if m != nil {
		return m.SortBy
	}
	return 0
}

func (m *SortContent) GetSortName() string {
	if m != nil {
		return m.SortName
	}
	return ""
}

type TopicOnline struct {
	OnlineNum            int64    `protobuf:"varint,1,opt,name=online_num,json=onlineNum,proto3" json:"online_num,omitempty"`
	OnlineText           string   `protobuf:"bytes,2,opt,name=online_text,json=onlineText,proto3" json:"online_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicOnline) Reset()         { *m = TopicOnline{} }
func (m *TopicOnline) String() string { return proto.CompactTextString(m) }
func (*TopicOnline) ProtoMessage()    {}
func (*TopicOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{43}
}
func (m *TopicOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicOnline.Merge(m, src)
}
func (m *TopicOnline) XXX_Size() int {
	return m.Size()
}
func (m *TopicOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicOnline.DiscardUnknown(m)
}

var xxx_messageInfo_TopicOnline proto.InternalMessageInfo

func (m *TopicOnline) GetOnlineNum() int64 {
	if m != nil {
		return m.OnlineNum
	}
	return 0
}

func (m *TopicOnline) GetOnlineText() string {
	if m != nil {
		return m.OnlineText
	}
	return ""
}

type TopicTopCard struct {
	Type TopicTopCardType `protobuf:"varint,1,opt,name=type,proto3,enum=bilibili.app.topic.v1.TopicTopCardType" json:"type,omitempty"`
	// Types that are valid to be assigned to CardItem:
	//	*TopicTopCard_Capsules
	//	*TopicTopCard_TrafficCard
	//	*TopicTopCard_GameCard
	//	*TopicTopCard_TimeLineResource
	//	*TopicTopCard_LargeCoverInline
	//	*TopicTopCard_ReservationCard
	//	*TopicTopCard_EsportCard
	CardItem             isTopicTopCard_CardItem `protobuf_oneof:"card_item"`
	StartTime            int64                   `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64                   `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TopicTopCard) Reset()         { *m = TopicTopCard{} }
func (m *TopicTopCard) String() string { return proto.CompactTextString(m) }
func (*TopicTopCard) ProtoMessage()    {}
func (*TopicTopCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{44}
}
func (m *TopicTopCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicTopCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicTopCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicTopCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicTopCard.Merge(m, src)
}
func (m *TopicTopCard) XXX_Size() int {
	return m.Size()
}
func (m *TopicTopCard) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicTopCard.DiscardUnknown(m)
}

var xxx_messageInfo_TopicTopCard proto.InternalMessageInfo

type isTopicTopCard_CardItem interface {
	isTopicTopCard_CardItem()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TopicTopCard_Capsules struct {
	Capsules *TopicCapsuleInfo `protobuf:"bytes,2,opt,name=capsules,proto3,oneof" json:"capsules,omitempty"`
}
type TopicTopCard_TrafficCard struct {
	TrafficCard *TrafficCard `protobuf:"bytes,3,opt,name=traffic_card,json=trafficCard,proto3,oneof" json:"traffic_card,omitempty"`
}
type TopicTopCard_GameCard struct {
	GameCard *GameCard `protobuf:"bytes,4,opt,name=game_card,json=gameCard,proto3,oneof" json:"game_card,omitempty"`
}
type TopicTopCard_TimeLineResource struct {
	TimeLineResource *TimeLineResource `protobuf:"bytes,5,opt,name=time_line_resource,json=timeLineResource,proto3,oneof" json:"time_line_resource,omitempty"`
}
type TopicTopCard_LargeCoverInline struct {
	LargeCoverInline *LargeCoverInline `protobuf:"bytes,6,opt,name=large_cover_inline,json=largeCoverInline,proto3,oneof" json:"large_cover_inline,omitempty"`
}
type TopicTopCard_ReservationCard struct {
	ReservationCard *ReserveRelationInfo `protobuf:"bytes,7,opt,name=reservation_card,json=reservationCard,proto3,oneof" json:"reservation_card,omitempty"`
}
type TopicTopCard_EsportCard struct {
	EsportCard *EsportInfo `protobuf:"bytes,8,opt,name=esport_card,json=esportCard,proto3,oneof" json:"esport_card,omitempty"`
}

func (*TopicTopCard_Capsules) isTopicTopCard_CardItem()         {}
func (*TopicTopCard_TrafficCard) isTopicTopCard_CardItem()      {}
func (*TopicTopCard_GameCard) isTopicTopCard_CardItem()         {}
func (*TopicTopCard_TimeLineResource) isTopicTopCard_CardItem() {}
func (*TopicTopCard_LargeCoverInline) isTopicTopCard_CardItem() {}
func (*TopicTopCard_ReservationCard) isTopicTopCard_CardItem()  {}
func (*TopicTopCard_EsportCard) isTopicTopCard_CardItem()       {}

func (m *TopicTopCard) GetCardItem() isTopicTopCard_CardItem {
	if m != nil {
		return m.CardItem
	}
	return nil
}

func (m *TopicTopCard) GetType() TopicTopCardType {
	if m != nil {
		return m.Type
	}
	return TopicTopCardType_Unknown_Type
}

func (m *TopicTopCard) GetCapsules() *TopicCapsuleInfo {
	if x, ok := m.GetCardItem().(*TopicTopCard_Capsules); ok {
		return x.Capsules
	}
	return nil
}

func (m *TopicTopCard) GetTrafficCard() *TrafficCard {
	if x, ok := m.GetCardItem().(*TopicTopCard_TrafficCard); ok {
		return x.TrafficCard
	}
	return nil
}

func (m *TopicTopCard) GetGameCard() *GameCard {
	if x, ok := m.GetCardItem().(*TopicTopCard_GameCard); ok {
		return x.GameCard
	}
	return nil
}

func (m *TopicTopCard) GetTimeLineResource() *TimeLineResource {
	if x, ok := m.GetCardItem().(*TopicTopCard_TimeLineResource); ok {
		return x.TimeLineResource
	}
	return nil
}

func (m *TopicTopCard) GetLargeCoverInline() *LargeCoverInline {
	if x, ok := m.GetCardItem().(*TopicTopCard_LargeCoverInline); ok {
		return x.LargeCoverInline
	}
	return nil
}

func (m *TopicTopCard) GetReservationCard() *ReserveRelationInfo {
	if x, ok := m.GetCardItem().(*TopicTopCard_ReservationCard); ok {
		return x.ReservationCard
	}
	return nil
}

func (m *TopicTopCard) GetEsportCard() *EsportInfo {
	if x, ok := m.GetCardItem().(*TopicTopCard_EsportCard); ok {
		return x.EsportCard
	}
	return nil
}

func (m *TopicTopCard) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TopicTopCard) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TopicTopCard) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TopicTopCard_Capsules)(nil),
		(*TopicTopCard_TrafficCard)(nil),
		(*TopicTopCard_GameCard)(nil),
		(*TopicTopCard_TimeLineResource)(nil),
		(*TopicTopCard_LargeCoverInline)(nil),
		(*TopicTopCard_ReservationCard)(nil),
		(*TopicTopCard_EsportCard)(nil),
	}
}

type TopicCapsuleInfo struct {
	Capsules             []*TopicCapsule `protobuf:"bytes,1,rep,name=capsules,proto3" json:"capsules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TopicCapsuleInfo) Reset()         { *m = TopicCapsuleInfo{} }
func (m *TopicCapsuleInfo) String() string { return proto.CompactTextString(m) }
func (*TopicCapsuleInfo) ProtoMessage()    {}
func (*TopicCapsuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{45}
}
func (m *TopicCapsuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicCapsuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicCapsuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicCapsuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicCapsuleInfo.Merge(m, src)
}
func (m *TopicCapsuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *TopicCapsuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicCapsuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TopicCapsuleInfo proto.InternalMessageInfo

func (m *TopicCapsuleInfo) GetCapsules() []*TopicCapsule {
	if m != nil {
		return m.Capsules
	}
	return nil
}

type ReserveRelationInfo struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Stime                int64    `protobuf:"varint,4,opt,name=stime,proto3" json:"stime,omitempty"`
	Etime                int64    `protobuf:"varint,5,opt,name=etime,proto3" json:"etime,omitempty"`
	IsFollow             int64    `protobuf:"varint,6,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	State                int32    `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	Oid                  string   `protobuf:"bytes,8,opt,name=oid,proto3" json:"oid,omitempty"`
	Type                 int32    `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
	Upmid                int64    `protobuf:"varint,10,opt,name=upmid,proto3" json:"upmid,omitempty"`
	ReserveRecordCtime   int64    `protobuf:"varint,11,opt,name=reserve_record_ctime,json=reserveRecordCtime,proto3" json:"reserve_record_ctime,omitempty"`
	LivePlanStartTime    int64    `protobuf:"varint,12,opt,name=live_plan_start_time,json=livePlanStartTime,proto3" json:"live_plan_start_time,omitempty"`
	TimeDescText         string   `protobuf:"bytes,13,opt,name=time_desc_text,json=timeDescText,proto3" json:"time_desc_text,omitempty"`
	NumberDescText       string   `protobuf:"bytes,14,opt,name=number_desc_text,json=numberDescText,proto3" json:"number_desc_text,omitempty"`
	StartTime            int64    `protobuf:"varint,15,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64    `protobuf:"varint,16,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveRelationInfo) Reset()         { *m = ReserveRelationInfo{} }
func (m *ReserveRelationInfo) String() string { return proto.CompactTextString(m) }
func (*ReserveRelationInfo) ProtoMessage()    {}
func (*ReserveRelationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{46}
}
func (m *ReserveRelationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveRelationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveRelationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveRelationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveRelationInfo.Merge(m, src)
}
func (m *ReserveRelationInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReserveRelationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveRelationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveRelationInfo proto.InternalMessageInfo

func (m *ReserveRelationInfo) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *ReserveRelationInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReserveRelationInfo) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ReserveRelationInfo) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *ReserveRelationInfo) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *ReserveRelationInfo) GetIsFollow() int64 {
	if m != nil {
		return m.IsFollow
	}
	return 0
}

func (m *ReserveRelationInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ReserveRelationInfo) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *ReserveRelationInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReserveRelationInfo) GetUpmid() int64 {
	if m != nil {
		return m.Upmid
	}
	return 0
}

func (m *ReserveRelationInfo) GetReserveRecordCtime() int64 {
	if m != nil {
		return m.ReserveRecordCtime
	}
	return 0
}

func (m *ReserveRelationInfo) GetLivePlanStartTime() int64 {
	if m != nil {
		return m.LivePlanStartTime
	}
	return 0
}

func (m *ReserveRelationInfo) GetTimeDescText() string {
	if m != nil {
		return m.TimeDescText
	}
	return ""
}

func (m *ReserveRelationInfo) GetNumberDescText() string {
	if m != nil {
		return m.NumberDescText
	}
	return ""
}

func (m *ReserveRelationInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ReserveRelationInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// 赛事信息
type EsportInfo struct {
	Id                   int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Items                []*MatchInfo `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	StartTime            int64        `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64        `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EsportInfo) Reset()         { *m = EsportInfo{} }
func (m *EsportInfo) String() string { return proto.CompactTextString(m) }
func (*EsportInfo) ProtoMessage()    {}
func (*EsportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{47}
}
func (m *EsportInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EsportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EsportInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EsportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EsportInfo.Merge(m, src)
}
func (m *EsportInfo) XXX_Size() int {
	return m.Size()
}
func (m *EsportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EsportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EsportInfo proto.InternalMessageInfo

func (m *EsportInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EsportInfo) GetItems() []*MatchInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *EsportInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *EsportInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// 赛程信息
type MatchInfo struct {
	Id                   int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               int32             `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	MatchStage           string            `protobuf:"bytes,3,opt,name=match_stage,json=matchStage,proto3" json:"match_stage,omitempty"`
	Home                 *MatchTeamInfo    `protobuf:"bytes,4,opt,name=home,proto3" json:"home,omitempty"`
	Away                 *MatchTeamInfo    `protobuf:"bytes,5,opt,name=away,proto3" json:"away,omitempty"`
	MatchLabel           *MatchCardDisplay `protobuf:"bytes,6,opt,name=match_label,json=matchLabel,proto3" json:"match_label,omitempty"`
	MatchTime            *MatchCardDisplay `protobuf:"bytes,7,opt,name=match_time,json=matchTime,proto3" json:"match_time,omitempty"`
	MatchButton          *MatchCardDisplay `protobuf:"bytes,8,opt,name=match_button,json=matchButton,proto3" json:"match_button,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MatchInfo) Reset()         { *m = MatchInfo{} }
func (m *MatchInfo) String() string { return proto.CompactTextString(m) }
func (*MatchInfo) ProtoMessage()    {}
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{48}
}
func (m *MatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchInfo.Merge(m, src)
}
func (m *MatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *MatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MatchInfo proto.InternalMessageInfo

func (m *MatchInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MatchInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MatchInfo) GetMatchStage() string {
	if m != nil {
		return m.MatchStage
	}
	return ""
}

func (m *MatchInfo) GetHome() *MatchTeamInfo {
	if m != nil {
		return m.Home
	}
	return nil
}

func (m *MatchInfo) GetAway() *MatchTeamInfo {
	if m != nil {
		return m.Away
	}
	return nil
}

func (m *MatchInfo) GetMatchLabel() *MatchCardDisplay {
	if m != nil {
		return m.MatchLabel
	}
	return nil
}

func (m *MatchInfo) GetMatchTime() *MatchCardDisplay {
	if m != nil {
		return m.MatchTime
	}
	return nil
}

func (m *MatchInfo) GetMatchButton() *MatchCardDisplay {
	if m != nil {
		return m.MatchButton
	}
	return nil
}

// 队伍信息
type MatchTeamInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Cover                string   `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	Score                int64    `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchTeamInfo) Reset()         { *m = MatchTeamInfo{} }
func (m *MatchTeamInfo) String() string { return proto.CompactTextString(m) }
func (*MatchTeamInfo) ProtoMessage()    {}
func (*MatchTeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{49}
}
func (m *MatchTeamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchTeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchTeamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchTeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchTeamInfo.Merge(m, src)
}
func (m *MatchTeamInfo) XXX_Size() int {
	return m.Size()
}
func (m *MatchTeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchTeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MatchTeamInfo proto.InternalMessageInfo

func (m *MatchTeamInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MatchTeamInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MatchTeamInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *MatchTeamInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

// 卡片展示信息
type MatchCardDisplay struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TextColor            string   `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	TextColorNight       string   `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	Uri                  string   `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	LiveLink             string   `protobuf:"bytes,5,opt,name=live_link,json=liveLink,proto3" json:"live_link,omitempty"`
	Texts                *Texts   `protobuf:"bytes,6,opt,name=texts,proto3" json:"texts,omitempty"`
	State                int32    `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchCardDisplay) Reset()         { *m = MatchCardDisplay{} }
func (m *MatchCardDisplay) String() string { return proto.CompactTextString(m) }
func (*MatchCardDisplay) ProtoMessage()    {}
func (*MatchCardDisplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{50}
}
func (m *MatchCardDisplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchCardDisplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchCardDisplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchCardDisplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchCardDisplay.Merge(m, src)
}
func (m *MatchCardDisplay) XXX_Size() int {
	return m.Size()
}
func (m *MatchCardDisplay) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchCardDisplay.DiscardUnknown(m)
}

var xxx_messageInfo_MatchCardDisplay proto.InternalMessageInfo

func (m *MatchCardDisplay) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MatchCardDisplay) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *MatchCardDisplay) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *MatchCardDisplay) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MatchCardDisplay) GetLiveLink() string {
	if m != nil {
		return m.LiveLink
	}
	return ""
}

func (m *MatchCardDisplay) GetTexts() *Texts {
	if m != nil {
		return m.Texts
	}
	return nil
}

func (m *MatchCardDisplay) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type Texts struct {
	BookingText          string   `protobuf:"bytes,1,opt,name=booking_text,json=bookingText,proto3" json:"booking_text,omitempty"`
	UnbookingText        string   `protobuf:"bytes,2,opt,name=unbooking_text,json=unbookingText,proto3" json:"unbooking_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Texts) Reset()         { *m = Texts{} }
func (m *Texts) String() string { return proto.CompactTextString(m) }
func (*Texts) ProtoMessage()    {}
func (*Texts) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{51}
}
func (m *Texts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Texts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Texts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Texts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Texts.Merge(m, src)
}
func (m *Texts) XXX_Size() int {
	return m.Size()
}
func (m *Texts) XXX_DiscardUnknown() {
	xxx_messageInfo_Texts.DiscardUnknown(m)
}

var xxx_messageInfo_Texts proto.InternalMessageInfo

func (m *Texts) GetBookingText() string {
	if m != nil {
		return m.BookingText
	}
	return ""
}

func (m *Texts) GetUnbookingText() string {
	if m != nil {
		return m.UnbookingText
	}
	return ""
}

type TopicReserveButtonClickReq struct {
	Uid                  int64               `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ReserveId            int64               `protobuf:"varint,2,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"`
	ReserveTotal         int64               `protobuf:"varint,3,opt,name=reserve_total,json=reserveTotal,proto3" json:"reserve_total,omitempty"`
	CurBtnStatus         ReserveButtonStatus `protobuf:"varint,4,opt,name=cur_btn_status,json=curBtnStatus,proto3,enum=bilibili.app.topic.v1.ReserveButtonStatus" json:"cur_btn_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TopicReserveButtonClickReq) Reset()         { *m = TopicReserveButtonClickReq{} }
func (m *TopicReserveButtonClickReq) String() string { return proto.CompactTextString(m) }
func (*TopicReserveButtonClickReq) ProtoMessage()    {}
func (*TopicReserveButtonClickReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{52}
}
func (m *TopicReserveButtonClickReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicReserveButtonClickReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicReserveButtonClickReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicReserveButtonClickReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicReserveButtonClickReq.Merge(m, src)
}
func (m *TopicReserveButtonClickReq) XXX_Size() int {
	return m.Size()
}
func (m *TopicReserveButtonClickReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicReserveButtonClickReq.DiscardUnknown(m)
}

var xxx_messageInfo_TopicReserveButtonClickReq proto.InternalMessageInfo

func (m *TopicReserveButtonClickReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TopicReserveButtonClickReq) GetReserveId() int64 {
	if m != nil {
		return m.ReserveId
	}
	return 0
}

func (m *TopicReserveButtonClickReq) GetReserveTotal() int64 {
	if m != nil {
		return m.ReserveTotal
	}
	return 0
}

func (m *TopicReserveButtonClickReq) GetCurBtnStatus() ReserveButtonStatus {
	if m != nil {
		return m.CurBtnStatus
	}
	return ReserveButtonStatus_RESERVE_BUTTON_STATUS_NONE
}

type TopicReserveButtonClickReply struct {
	FinalBtnStatus       ReserveButtonStatus  `protobuf:"varint,1,opt,name=final_btn_status,json=finalBtnStatus,proto3,enum=bilibili.app.topic.v1.ReserveButtonStatus" json:"final_btn_status,omitempty"`
	BtnMode              ReserveButtonMode    `protobuf:"varint,2,opt,name=btn_mode,json=btnMode,proto3,enum=bilibili.app.topic.v1.ReserveButtonMode" json:"btn_mode,omitempty"`
	ReserveUpdate        int64                `protobuf:"varint,3,opt,name=reserve_update,json=reserveUpdate,proto3" json:"reserve_update,omitempty"`
	DescUpdate           string               `protobuf:"bytes,4,opt,name=desc_update,json=descUpdate,proto3" json:"desc_update,omitempty"`
	HasActivity          bool                 `protobuf:"varint,5,opt,name=has_activity,json=hasActivity,proto3" json:"has_activity,omitempty"`
	ActivityUrl          string               `protobuf:"bytes,6,opt,name=activity_url,json=activityUrl,proto3" json:"activity_url,omitempty"`
	Toast                string               `protobuf:"bytes,7,opt,name=toast,proto3" json:"toast,omitempty"`
	ReserveCalendarInfo  *ReserveCalendarInfo `protobuf:"bytes,8,opt,name=reserve_calendar_info,json=reserveCalendarInfo,proto3" json:"reserve_calendar_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TopicReserveButtonClickReply) Reset()         { *m = TopicReserveButtonClickReply{} }
func (m *TopicReserveButtonClickReply) String() string { return proto.CompactTextString(m) }
func (*TopicReserveButtonClickReply) ProtoMessage()    {}
func (*TopicReserveButtonClickReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{53}
}
func (m *TopicReserveButtonClickReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicReserveButtonClickReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicReserveButtonClickReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicReserveButtonClickReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicReserveButtonClickReply.Merge(m, src)
}
func (m *TopicReserveButtonClickReply) XXX_Size() int {
	return m.Size()
}
func (m *TopicReserveButtonClickReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicReserveButtonClickReply.DiscardUnknown(m)
}

var xxx_messageInfo_TopicReserveButtonClickReply proto.InternalMessageInfo

func (m *TopicReserveButtonClickReply) GetFinalBtnStatus() ReserveButtonStatus {
	if m != nil {
		return m.FinalBtnStatus
	}
	return ReserveButtonStatus_RESERVE_BUTTON_STATUS_NONE
}

func (m *TopicReserveButtonClickReply) GetBtnMode() ReserveButtonMode {
	if m != nil {
		return m.BtnMode
	}
	return ReserveButtonMode_RESERVE_BUTTON_MODE_NONE
}

func (m *TopicReserveButtonClickReply) GetReserveUpdate() int64 {
	if m != nil {
		return m.ReserveUpdate
	}
	return 0
}

func (m *TopicReserveButtonClickReply) GetDescUpdate() string {
	if m != nil {
		return m.DescUpdate
	}
	return ""
}

func (m *TopicReserveButtonClickReply) GetHasActivity() bool {
	if m != nil {
		return m.HasActivity
	}
	return false
}

func (m *TopicReserveButtonClickReply) GetActivityUrl() string {
	if m != nil {
		return m.ActivityUrl
	}
	return ""
}

func (m *TopicReserveButtonClickReply) GetToast() string {
	if m != nil {
		return m.Toast
	}
	return ""
}

func (m *TopicReserveButtonClickReply) GetReserveCalendarInfo() *ReserveCalendarInfo {
	if m != nil {
		return m.ReserveCalendarInfo
	}
	return nil
}

type ReserveCalendarInfo struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	StartTs              int64    `protobuf:"varint,2,opt,name=startTs,proto3" json:"startTs,omitempty"`
	EndTs                int64    `protobuf:"varint,3,opt,name=endTs,proto3" json:"endTs,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	BusinessId           string   `protobuf:"bytes,5,opt,name=businessId,proto3" json:"businessId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReserveCalendarInfo) Reset()         { *m = ReserveCalendarInfo{} }
func (m *ReserveCalendarInfo) String() string { return proto.CompactTextString(m) }
func (*ReserveCalendarInfo) ProtoMessage()    {}
func (*ReserveCalendarInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91baf575d5b97db3, []int{54}
}
func (m *ReserveCalendarInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveCalendarInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveCalendarInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveCalendarInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveCalendarInfo.Merge(m, src)
}
func (m *ReserveCalendarInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReserveCalendarInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveCalendarInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveCalendarInfo proto.InternalMessageInfo

func (m *ReserveCalendarInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReserveCalendarInfo) GetStartTs() int64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *ReserveCalendarInfo) GetEndTs() int64 {
	if m != nil {
		return m.EndTs
	}
	return 0
}

func (m *ReserveCalendarInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReserveCalendarInfo) GetBusinessId() string {
	if m != nil {
		return m.BusinessId
	}
	return ""
}

func init() {
	proto.RegisterEnum("bilibili.app.topic.v1.TopicDetailsExtMode", TopicDetailsExtMode_name, TopicDetailsExtMode_value)
	proto.RegisterEnum("bilibili.app.topic.v1.TopicCardType", TopicCardType_name, TopicCardType_value)
	proto.RegisterEnum("bilibili.app.topic.v1.TopicTopCardType", TopicTopCardType_name, TopicTopCardType_value)
	proto.RegisterEnum("bilibili.app.topic.v1.ReserveButtonStatus", ReserveButtonStatus_name, ReserveButtonStatus_value)
	proto.RegisterEnum("bilibili.app.topic.v1.ReserveButtonMode", ReserveButtonMode_name, ReserveButtonMode_value)
	proto.RegisterType((*TopicMergedResourceReq)(nil), "bilibili.app.topic.v1.TopicMergedResourceReq")
	proto.RegisterType((*TopicMergedResourceReply)(nil), "bilibili.app.topic.v1.TopicMergedResourceReply")
	proto.RegisterType((*TopicSetDetailsReq)(nil), "bilibili.app.topic.v1.TopicSetDetailsReq")
	proto.RegisterType((*TopicSetHeadInfo)(nil), "bilibili.app.topic.v1.TopicSetHeadInfo")
	proto.RegisterType((*TopicSetDetailsReply)(nil), "bilibili.app.topic.v1.TopicSetDetailsReply")
	proto.RegisterType((*TopicSetSortCfg)(nil), "bilibili.app.topic.v1.TopicSetSortCfg")
	proto.RegisterType((*TopicDetailsAllReq)(nil), "bilibili.app.topic.v1.TopicDetailsAllReq")
	proto.RegisterType((*TopicDetailsAllReply)(nil), "bilibili.app.topic.v1.TopicDetailsAllReply")
	proto.RegisterType((*TopicServerConfig)(nil), "bilibili.app.topic.v1.TopicServerConfig")
	proto.RegisterType((*TimeLineResource)(nil), "bilibili.app.topic.v1.TimeLineResource")
	proto.RegisterType((*TimeLineEvents)(nil), "bilibili.app.topic.v1.TimeLineEvents")
	proto.RegisterType((*PubLayer)(nil), "bilibili.app.topic.v1.PubLayer")
	proto.RegisterType((*ButtonMeta)(nil), "bilibili.app.topic.v1.ButtonMeta")
	proto.RegisterType((*FunctionalCard)(nil), "bilibili.app.topic.v1.FunctionalCard")
	proto.RegisterType((*GameCard)(nil), "bilibili.app.topic.v1.GameCard")
	proto.RegisterType((*TopicCapsule)(nil), "bilibili.app.topic.v1.TopicCapsule")
	proto.RegisterType((*TrafficCard)(nil), "bilibili.app.topic.v1.TrafficCard")
	proto.RegisterType((*DetailsTopInfo)(nil), "bilibili.app.topic.v1.DetailsTopInfo")
	proto.RegisterType((*TopicSet)(nil), "bilibili.app.topic.v1.TopicSet")
	proto.RegisterType((*OperationContent)(nil), "bilibili.app.topic.v1.OperationContent")
	proto.RegisterType((*OperationCard)(nil), "bilibili.app.topic.v1.OperationCard")
	proto.RegisterType((*LargeCoverInline)(nil), "bilibili.app.topic.v1.LargeCoverInline")
	proto.RegisterType((*RelationData)(nil), "bilibili.app.topic.v1.RelationData")
	proto.RegisterType((*TopicThreePoint)(nil), "bilibili.app.topic.v1.TopicThreePoint")
	proto.RegisterType((*ThreePointItem)(nil), "bilibili.app.topic.v1.ThreePointItem")
	proto.RegisterType((*InlineProgressBar)(nil), "bilibili.app.topic.v1.InlineProgressBar")
	proto.RegisterType((*RightTopLiveBadge)(nil), "bilibili.app.topic.v1.RightTopLiveBadge")
	proto.RegisterType((*LiveBadgeResource)(nil), "bilibili.app.topic.v1.LiveBadgeResource")
	proto.RegisterType((*User)(nil), "bilibili.app.topic.v1.User")
	proto.RegisterType((*TopicActivities)(nil), "bilibili.app.topic.v1.TopicActivities")
	proto.RegisterType((*TopicCardList)(nil), "bilibili.app.topic.v1.TopicCardList")
	proto.RegisterType((*NoCardResultReply)(nil), "bilibili.app.topic.v1.NoCardResultReply")
	proto.RegisterType((*ShowButton)(nil), "bilibili.app.topic.v1.ShowButton")
	proto.RegisterType((*TopicCardItem)(nil), "bilibili.app.topic.v1.TopicCardItem")
	proto.RegisterType((*VideoSmallCardItem)(nil), "bilibili.app.topic.v1.VideoSmallCardItem")
	proto.RegisterType((*VideoCardBase)(nil), "bilibili.app.topic.v1.VideoCardBase")
	proto.RegisterType((*FoldCardItem)(nil), "bilibili.app.topic.v1.FoldCardItem")
	proto.RegisterType((*TopicDetailsFoldReq)(nil), "bilibili.app.topic.v1.TopicDetailsFoldReq")
	proto.RegisterType((*TopicDetailsFoldReply)(nil), "bilibili.app.topic.v1.TopicDetailsFoldReply")
	proto.RegisterType((*TopicInfo)(nil), "bilibili.app.topic.v1.TopicInfo")
	proto.RegisterType((*TopicActivity)(nil), "bilibili.app.topic.v1.TopicActivity")
	proto.RegisterType((*TopicSortByConf)(nil), "bilibili.app.topic.v1.TopicSortByConf")
	proto.RegisterType((*SortContent)(nil), "bilibili.app.topic.v1.SortContent")
	proto.RegisterType((*TopicOnline)(nil), "bilibili.app.topic.v1.TopicOnline")
	proto.RegisterType((*TopicTopCard)(nil), "bilibili.app.topic.v1.TopicTopCard")
	proto.RegisterType((*TopicCapsuleInfo)(nil), "bilibili.app.topic.v1.TopicCapsuleInfo")
	proto.RegisterType((*ReserveRelationInfo)(nil), "bilibili.app.topic.v1.ReserveRelationInfo")
	proto.RegisterType((*EsportInfo)(nil), "bilibili.app.topic.v1.EsportInfo")
	proto.RegisterType((*MatchInfo)(nil), "bilibili.app.topic.v1.MatchInfo")
	proto.RegisterType((*MatchTeamInfo)(nil), "bilibili.app.topic.v1.MatchTeamInfo")
	proto.RegisterType((*MatchCardDisplay)(nil), "bilibili.app.topic.v1.MatchCardDisplay")
	proto.RegisterType((*Texts)(nil), "bilibili.app.topic.v1.Texts")
	proto.RegisterType((*TopicReserveButtonClickReq)(nil), "bilibili.app.topic.v1.TopicReserveButtonClickReq")
	proto.RegisterType((*TopicReserveButtonClickReply)(nil), "bilibili.app.topic.v1.TopicReserveButtonClickReply")
	proto.RegisterType((*ReserveCalendarInfo)(nil), "bilibili.app.topic.v1.ReserveCalendarInfo")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/topic/interface/api/api.proto", fileDescriptor_91baf575d5b97db3)
}

var fileDescriptor_91baf575d5b97db3 = []byte{
	// 4959 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7b, 0xcd, 0x8f, 0x1b, 0xc9,
	0x75, 0xb8, 0x9a, 0x1f, 0x33, 0xe4, 0x23, 0x87, 0xe2, 0xb4, 0x34, 0xd2, 0x68, 0x76, 0xf5, 0xc5,
	0x95, 0xbd, 0x5a, 0xfd, 0x76, 0x67, 0xac, 0xd9, 0x85, 0xfd, 0xc3, 0x26, 0x8e, 0x33, 0x5f, 0x92,
	0xc6, 0x4b, 0x8d, 0xc6, 0x3d, 0xd4, 0xae, 0xd7, 0x48, 0xd2, 0x28, 0xb2, 0x8b, 0x64, 0x59, 0xcd,
	0xee, 0x76, 0x77, 0x93, 0xd2, 0x38, 0xc8, 0x21, 0x41, 0x72, 0x0a, 0x10, 0x04, 0xc9, 0x61, 0x93,
	0x43, 0x60, 0xc0, 0x48, 0xf2, 0x07, 0x24, 0x47, 0x23, 0x97, 0xc0, 0xf9, 0x38, 0x06, 0xc8, 0x2d,
	0x4e, 0x8c, 0x60, 0x73, 0xc9, 0x25, 0x17, 0x5f, 0x72, 0x0d, 0xde, 0xab, 0xea, 0xee, 0x6a, 0x72,
	0xc8, 0x19, 0x65, 0x17, 0x39, 0x0c, 0xa6, 0xeb, 0xd5, 0xab, 0x57, 0x55, 0xaf, 0xde, 0x77, 0x15,
	0xe1, 0x83, 0x81, 0xff, 0xde, 0x80, 0xc5, 0xfc, 0x25, 0x3b, 0xdd, 0x62, 0x41, 0x80, 0x7f, 0xef,
	0x45, 0x93, 0x70, 0x2b, 0xf6, 0x03, 0xd1, 0xdb, 0x12, 0x5e, 0xcc, 0xc3, 0x3e, 0xeb, 0xf1, 0x2d,
	0x16, 0x08, 0xfc, 0xdb, 0x0c, 0x42, 0x3f, 0xf6, 0xcd, 0xb5, 0xae, 0x70, 0x05, 0xfe, 0x6d, 0xb2,
	0x20, 0xd8, 0x24, 0xdc, 0xcd, 0xc9, 0xc3, 0x8d, 0x0f, 0xe7, 0x10, 0x63, 0x61, 0x6f, 0x28, 0x26,
	0x7c, 0x6b, 0x24, 0x1c, 0xc7, 0xe5, 0x2f, 0x59, 0xc8, 0xb7, 0x26, 0x0f, 0xb7, 0x82, 0x90, 0xbb,
	0x3e, 0x73, 0x24, 0xc9, 0x8d, 0x6f, 0xce, 0x1b, 0x1b, 0x04, 0xef, 0x39, 0xa7, 0x1e, 0x1b, 0xcd,
	0x2c, 0x67, 0xb2, 0x9d, 0xad, 0x68, 0xe3, 0xf1, 0x82, 0xe1, 0x3d, 0x16, 0x3a, 0xda, 0xd8, 0x91,
	0xef, 0x70, 0x77, 0x8b, 0x80, 0x34, 0x76, 0xab, 0xe7, 0x8f, 0x46, 0xbe, 0xa7, 0x08, 0xbd, 0x37,
	0x10, 0xf1, 0x70, 0xdc, 0xdd, 0xec, 0xf9, 0xa3, 0xad, 0x81, 0x3f, 0xf0, 0x25, 0x4e, 0x77, 0xdc,
	0xa7, 0x96, 0x1c, 0x80, 0x5f, 0x12, 0xbd, 0xf5, 0xe3, 0x02, 0x5c, 0xeb, 0xe0, 0xfe, 0x9f, 0xf2,
	0x70, 0xc0, 0x1d, 0x8b, 0x47, 0xfe, 0x38, 0xec, 0x71, 0x8b, 0xff, 0xc0, 0xbc, 0x01, 0x15, 0xe2,
	0x8c, 0x2d, 0x9c, 0x75, 0xe3, 0x8e, 0x71, 0xbf, 0x68, 0x2d, 0x53, 0xfb, 0xd0, 0x31, 0x4d, 0x28,
	0xc5, 0xa7, 0x01, 0x5f, 0x2f, 0xdc, 0x31, 0xee, 0x97, 0x2d, 0xfa, 0x36, 0x9b, 0x50, 0x0c, 0x85,
	0xb3, 0x5e, 0x24, 0x4c, 0xfc, 0x34, 0x6f, 0x02, 0x8c, 0x90, 0xaa, 0x4d, 0xb8, 0x25, 0xc2, 0xad,
	0x12, 0xa4, 0x83, 0x03, 0xae, 0xc1, 0x92, 0xdf, 0xef, 0x47, 0x3c, 0x5e, 0x2f, 0xdf, 0x31, 0xee,
	0x57, 0x2d, 0xd5, 0xc2, 0x61, 0xae, 0xdf, 0x63, 0xae, 0x1d, 0x8b, 0x11, 0x5f, 0x5f, 0x92, 0xc3,
	0x08, 0xd2, 0x11, 0x23, 0x6e, 0x3e, 0x83, 0x5a, 0xe0, 0xb2, 0x53, 0x1e, 0xda, 0x2c, 0x1c, 0x44,
	0xeb, 0xcb, 0x77, 0x8c, 0xfb, 0xb5, 0xed, 0xcd, 0xcd, 0xdc, 0x89, 0xaa, 0x03, 0xdb, 0xcc, 0x0e,
	0x6c, 0x73, 0xf2, 0x70, 0xf3, 0x98, 0x86, 0xed, 0x84, 0x83, 0xc8, 0x82, 0x20, 0xfd, 0x36, 0xef,
	0x40, 0xbd, 0x1f, 0xfa, 0x23, 0x3b, 0xf2, 0xc3, 0xd8, 0xee, 0x9e, 0xae, 0x57, 0x68, 0x07, 0x80,
	0xb0, 0x13, 0x3f, 0x8c, 0x77, 0x4f, 0x5b, 0x43, 0x58, 0x3f, 0x93, 0x47, 0x81, 0x7b, 0x6a, 0xb6,
	0xe1, 0xb2, 0xe4, 0x12, 0x1e, 0x88, 0xed, 0x8a, 0x28, 0x26, 0x66, 0xd5, 0xb6, 0xef, 0x6d, 0x9e,
	0x29, 0x64, 0x9b, 0x44, 0x69, 0x8f, 0x85, 0x4e, 0x5b, 0x44, 0xb1, 0xb5, 0x12, 0xeb, 0xcd, 0xd6,
	0x67, 0x06, 0x98, 0x84, 0x70, 0xc2, 0xe3, 0x7d, 0x1e, 0x33, 0xe1, 0x46, 0x78, 0x14, 0xef, 0xc3,
	0x52, 0xc4, 0xe3, 0xf4, 0x20, 0x76, 0xdf, 0xfc, 0xc5, 0xcf, 0x6f, 0xaf, 0x4f, 0x98, 0x2b, 0x1c,
	0x16, 0xf3, 0x0f, 0x5b, 0x83, 0xf8, 0x9b, 0x5f, 0x7b, 0x37, 0xe4, 0x3f, 0x18, 0x8b, 0x90, 0x3b,
	0x2d, 0xab, 0x1c, 0xf1, 0xf8, 0xd0, 0x31, 0xaf, 0xc3, 0x72, 0xb2, 0xa5, 0x02, 0x6d, 0x69, 0x29,
	0xa2, 0xed, 0x68, 0x8c, 0x2f, 0xe6, 0x18, 0xff, 0x06, 0x54, 0x03, 0x36, 0xe0, 0x76, 0x24, 0x7e,
	0x98, 0x1c, 0x57, 0x05, 0x01, 0x27, 0xe2, 0x87, 0xbc, 0xf5, 0x57, 0x05, 0x68, 0x26, 0x2b, 0x7b,
	0xc2, 0x99, 0x73, 0xe8, 0xf5, 0x7d, 0xf3, 0x97, 0xa1, 0x2a, 0x37, 0x8f, 0xc4, 0xe4, 0xb6, 0x6f,
	0x2f, 0xda, 0xf6, 0x09, 0x8f, 0x2d, 0x29, 0x54, 0x27, 0x3c, 0x36, 0xef, 0x41, 0x43, 0xb1, 0xce,
	0x8b, 0xed, 0x98, 0xbf, 0x8a, 0x69, 0x9d, 0x55, 0xab, 0x2e, 0x79, 0xe2, 0xc5, 0x1d, 0xfe, 0x2a,
	0xc6, 0xe3, 0x19, 0x72, 0xe6, 0xd8, 0x62, 0x34, 0xb0, 0xc7, 0xa1, 0xab, 0xd6, 0x0c, 0x08, 0x3b,
	0x1c, 0x0d, 0x9e, 0x87, 0xae, 0x79, 0x1b, 0x6a, 0x23, 0x11, 0x45, 0xc2, 0xf7, 0x08, 0xa1, 0x24,
	0x11, 0x14, 0x08, 0x11, 0xee, 0x42, 0x3d, 0x41, 0xa0, 0x69, 0xa4, 0xbc, 0x25, 0x83, 0x68, 0x96,
	0x1b, 0x50, 0x11, 0x3d, 0x45, 0x60, 0x89, 0xba, 0x97, 0xb1, 0x8d, 0xa3, 0xd7, 0x60, 0x49, 0x44,
	0x76, 0x9f, 0x4d, 0x48, 0xd6, 0x2a, 0x56, 0x59, 0x44, 0x8f, 0xd8, 0xc4, 0x6c, 0xc1, 0x0a, 0x82,
	0x45, 0x18, 0xc5, 0x52, 0x52, 0x2b, 0xd4, 0x5b, 0x13, 0xd1, 0x23, 0x84, 0xa1, 0xac, 0xb6, 0xfe,
	0xa2, 0x00, 0x57, 0x67, 0x8e, 0x13, 0xa5, 0xe6, 0x63, 0xb8, 0x92, 0x32, 0xce, 0x96, 0xdb, 0xf3,
	0xfa, 0xbe, 0x62, 0xe1, 0xdb, 0xe7, 0xb0, 0x30, 0x61, 0xbf, 0xd5, 0x8c, 0xa7, 0x0f, 0xe4, 0x5b,
	0x00, 0x4a, 0x67, 0x91, 0x5c, 0xe1, 0x4e, 0xf1, 0x7e, 0x6d, 0xfb, 0xce, 0x22, 0x72, 0x44, 0x47,
	0x1e, 0x22, 0x11, 0xb8, 0x01, 0x95, 0x21, 0x8b, 0xec, 0x91, 0x1f, 0x72, 0xe2, 0x74, 0xc5, 0x5a,
	0x1e, 0xb2, 0xe8, 0xa9, 0x1f, 0xea, 0xfa, 0x5a, 0xca, 0x89, 0xcd, 0x0e, 0x54, 0x48, 0xce, 0x7a,
	0xfd, 0x01, 0x71, 0xb6, 0xb6, 0xfd, 0xd5, 0x73, 0x36, 0x80, 0x6a, 0xb5, 0xd7, 0x1f, 0x58, 0x24,
	0x9f, 0x7b, 0xfd, 0x41, 0xeb, 0xb7, 0xe0, 0xf2, 0x54, 0x9f, 0xf9, 0x55, 0xb8, 0xec, 0xf0, 0x3e,
	0x1b, 0xbb, 0x71, 0xaa, 0x98, 0xd2, 0x08, 0xad, 0x28, 0xb0, 0xd4, 0x4d, 0x73, 0x17, 0x6a, 0xcc,
	0x75, 0xed, 0x4c, 0xd2, 0x71, 0xcb, 0xad, 0x39, 0x0b, 0x20, 0xe2, 0xbe, 0x17, 0x73, 0x2f, 0xb6,
	0xaa, 0xcc, 0x75, 0x95, 0x7e, 0xff, 0xa4, 0xa8, 0xb4, 0x4e, 0x9d, 0xd1, 0x8e, 0xeb, 0x9e, 0x63,
	0x00, 0xbf, 0x54, 0xdd, 0x9a, 0xb2, 0x78, 0xe5, 0x73, 0x2c, 0xde, 0xd2, 0x17, 0xb6, 0x78, 0x77,
	0xa1, 0xee, 0x71, 0xee, 0xd8, 0x21, 0xef, 0x87, 0x3c, 0x1a, 0x92, 0x5c, 0x97, 0xad, 0x1a, 0xc2,
	0x2c, 0x09, 0x32, 0xdf, 0x81, 0x25, 0x69, 0xe5, 0x48, 0xac, 0xab, 0xbb, 0xab, 0xbf, 0xf8, 0xf9,
	0xed, 0x84, 0xf3, 0x1f, 0xb6, 0x76, 0x8e, 0x8f, 0x5b, 0x96, 0x42, 0x30, 0x6d, 0xb8, 0x26, 0xd9,
	0xe4, 0x48, 0xee, 0xd9, 0xfc, 0x55, 0x6c, 0xa3, 0x93, 0x5a, 0xaf, 0xde, 0x31, 0xee, 0x37, 0xb6,
	0x1f, 0x2c, 0x92, 0x06, 0xc5, 0xf1, 0x83, 0x57, 0xf1, 0x53, 0xdf, 0xe1, 0x96, 0xd4, 0x8a, 0x3c,
	0x10, 0xd9, 0x23, 0x0d, 0x74, 0x30, 0x12, 0xce, 0x3a, 0x10, 0x5f, 0xab, 0x64, 0x9e, 0x11, 0xd0,
	0xfa, 0x59, 0x59, 0x29, 0x99, 0x7e, 0x7a, 0xa8, 0x64, 0xcf, 0xa0, 0x99, 0x2c, 0x29, 0xf6, 0x03,
	0x5d, 0xc3, 0xbe, 0x32, 0x67, 0x49, 0x8a, 0x42, 0xc7, 0x0f, 0x48, 0x2f, 0x1a, 0x4e, 0xae, 0x6d,
	0x7e, 0x07, 0xa4, 0xc6, 0xd9, 0xac, 0x17, 0x8b, 0x89, 0x88, 0x05, 0x8f, 0xe8, 0xf8, 0xcf, 0x91,
	0xf8, 0x9d, 0x14, 0xdb, 0x92, 0xbe, 0x22, 0x03, 0x9c, 0xe5, 0x3e, 0x8a, 0xff, 0x6b, 0xf7, 0x61,
	0x1e, 0xc1, 0xe5, 0xfe, 0xd8, 0xeb, 0xc5, 0xc2, 0xf7, 0x98, 0x4b, 0x24, 0x49, 0xd6, 0xe6, 0x6f,
	0xf8, 0x51, 0x8a, 0x8d, 0x34, 0xac, 0x46, 0x3f, 0xd7, 0x46, 0xfb, 0x1e, 0x8c, 0xbb, 0x36, 0x49,
	0x8e, 0xd2, 0xed, 0x79, 0xf6, 0xfd, 0x78, 0xdc, 0x6d, 0x23, 0x9a, 0x55, 0x09, 0xd4, 0x97, 0xf9,
	0x1c, 0x4c, 0x14, 0x68, 0xdb, 0x15, 0x1e, 0xb7, 0x43, 0xe5, 0x35, 0x95, 0xf8, 0xce, 0xb5, 0x71,
	0x62, 0xc4, 0xdb, 0xc2, 0xe3, 0xa9, 0x93, 0x6d, 0xc6, 0x53, 0x10, 0xf3, 0xbb, 0x99, 0xed, 0x0c,
	0x27, 0x3c, 0xb4, 0x7b, 0xbe, 0xd7, 0x17, 0x03, 0x15, 0x08, 0xdc, 0x5f, 0x6c, 0x7a, 0x70, 0xc0,
	0x1e, 0xe1, 0x5b, 0xab, 0xf1, 0x34, 0xc8, 0x3c, 0x00, 0xe9, 0x7a, 0x6c, 0xdf, 0xc3, 0x35, 0x93,
	0xe8, 0xcf, 0x37, 0x26, 0x44, 0xf2, 0x19, 0x61, 0x5a, 0xb5, 0x38, 0x6b, 0x98, 0x1f, 0x25, 0x67,
	0x8a, 0x52, 0x87, 0x87, 0x10, 0xad, 0x57, 0xc9, 0x2c, 0xbd, 0xb5, 0x88, 0x52, 0xc7, 0x0f, 0xe8,
	0x0c, 0xe4, 0x91, 0xaa, 0x56, 0xd4, 0xfa, 0x37, 0x03, 0x56, 0x67, 0x16, 0x6f, 0xee, 0xc0, 0x4d,
	0x3c, 0x18, 0x3e, 0xe1, 0x5e, 0x1c, 0xd9, 0xc2, 0xeb, 0x85, 0x9c, 0x45, 0xdc, 0x8e, 0x87, 0xa8,
	0xbc, 0xbe, 0x9b, 0xd8, 0xab, 0x8d, 0x60, 0xdc, 0x3d, 0x20, 0x9c, 0x43, 0x85, 0xd2, 0x49, 0x30,
	0xcc, 0x36, 0xbc, 0xa5, 0x91, 0x18, 0x0a, 0xc7, 0xe1, 0x1e, 0x19, 0x20, 0x7f, 0x1c, 0x6b, 0x84,
	0xa4, 0x79, 0xbb, 0x9d, 0x12, 0x7a, 0x42, 0x88, 0x1d, 0x89, 0x97, 0x51, 0xfb, 0x06, 0xac, 0x4f,
	0x78, 0x18, 0x2b, 0xce, 0x25, 0x96, 0x45, 0x1a, 0x34, 0x19, 0x12, 0xae, 0x61, 0xbf, 0x62, 0x97,
	0xec, 0x25, 0x17, 0xf9, 0x3b, 0x18, 0x57, 0x4c, 0x1f, 0xf1, 0x1d, 0xa8, 0x67, 0x92, 0x93, 0x5a,
	0x5f, 0x48, 0x44, 0xe1, 0xd0, 0x41, 0xf7, 0x90, 0x61, 0xc4, 0x22, 0x76, 0xb9, 0x0a, 0x1e, 0x56,
	0x12, 0xa4, 0x0e, 0x02, 0xd1, 0x06, 0x64, 0x78, 0x72, 0xaf, 0xeb, 0x45, 0x3a, 0x8c, 0xaf, 0x9c,
	0x23, 0x81, 0x72, 0xbb, 0x56, 0x23, 0xce, 0xb5, 0x73, 0x0e, 0xb2, 0x94, 0x77, 0x90, 0x37, 0x01,
	0xa2, 0x98, 0x85, 0x71, 0x66, 0xc6, 0x8b, 0x56, 0x95, 0x20, 0x64, 0xc6, 0x6f, 0x40, 0x85, 0x7b,
	0x4e, 0x16, 0xd5, 0x16, 0xad, 0x65, 0xee, 0x39, 0xc4, 0x84, 0xdf, 0x84, 0x46, 0x67, 0x66, 0x1a,
	0x5a, 0xad, 0xe6, 0x7b, 0xa8, 0x7d, 0xe8, 0x98, 0x57, 0xa1, 0xac, 0x6f, 0x58, 0x36, 0xd0, 0xc1,
	0xd0, 0x46, 0x1d, 0x1e, 0xf5, 0x94, 0xef, 0xa9, 0x20, 0x60, 0x9f, 0x47, 0x3d, 0xec, 0xfc, 0xfe,
	0x78, 0x14, 0x20, 0x17, 0x5e, 0x28, 0xef, 0x5d, 0x41, 0x40, 0x5b, 0x78, 0x2f, 0x5a, 0xff, 0x6a,
	0x40, 0x25, 0xd1, 0x5e, 0xc4, 0x8c, 0x86, 0xfe, 0x4b, 0x19, 0xb2, 0x1b, 0xd2, 0x4f, 0x21, 0x80,
	0x22, 0xf6, 0x1c, 0x99, 0x42, 0x9e, 0x0c, 0x3a, 0xe2, 0xee, 0x38, 0x8e, 0x7d, 0xcf, 0x1e, 0xf1,
	0x98, 0x29, 0x2b, 0x76, 0x77, 0x0e, 0x93, 0x77, 0x09, 0xf3, 0x29, 0x8f, 0x99, 0x05, 0xdd, 0xf4,
	0xdb, 0x7c, 0x08, 0x6b, 0x3d, 0xd7, 0x8f, 0xb8, 0x9d, 0x5a, 0x1d, 0x9b, 0x7b, 0x71, 0x78, 0xaa,
	0x38, 0x6d, 0x52, 0x67, 0xb2, 0xd6, 0x03, 0xec, 0xc1, 0xe0, 0x6f, 0x1c, 0xa1, 0x6b, 0x9c, 0xb0,
	0x98, 0x85, 0x2a, 0xb4, 0x03, 0x04, 0xed, 0x10, 0xa4, 0xf5, 0x01, 0x40, 0x36, 0x1b, 0x65, 0x2e,
	0x18, 0x02, 0x1a, 0x84, 0x47, 0xdf, 0x08, 0xc3, 0x58, 0x4f, 0xed, 0x88, 0xbe, 0x5b, 0x7f, 0x58,
	0x80, 0x46, 0xde, 0x38, 0x9a, 0xdf, 0x82, 0x4a, 0x8f, 0x05, 0xd1, 0xd8, 0xe5, 0xd1, 0xba, 0x71,
	0xbe, 0x3e, 0xef, 0x49, 0x5c, 0x2b, 0x1d, 0x44, 0xe6, 0x25, 0x64, 0xfd, 0xbe, 0xb2, 0xf6, 0xca,
	0x75, 0xcc, 0x35, 0x2f, 0x12, 0x95, 0x6c, 0x42, 0x2d, 0xce, 0x1a, 0x68, 0x94, 0x07, 0x6c, 0xc4,
	0x25, 0x8d, 0xe2, 0x42, 0xa3, 0xfc, 0x98, 0x8d, 0x38, 0x11, 0xa8, 0x0c, 0xd4, 0xd7, 0x94, 0x90,
	0x96, 0x16, 0x09, 0x69, 0x39, 0x2f, 0xa4, 0x7f, 0x67, 0x40, 0x25, 0x21, 0x88, 0x01, 0x10, 0x2d,
	0x22, 0x15, 0xcf, 0x25, 0x6c, 0x1e, 0x3a, 0x28, 0x23, 0xb2, 0x23, 0xe3, 0x28, 0x4d, 0x7e, 0xd8,
	0xf3, 0xbd, 0xb4, 0xd3, 0x63, 0xca, 0x2c, 0xa8, 0xce, 0x23, 0x36, 0xe2, 0x28, 0xd7, 0x51, 0x2f,
	0x51, 0xab, 0xaa, 0x25, 0x1b, 0xe9, 0x90, 0x98, 0x0d, 0x22, 0x75, 0xba, 0x34, 0xa4, 0xc3, 0x06,
	0x11, 0x46, 0x5b, 0x9e, 0x1f, 0x0b, 0xe5, 0x55, 0xaa, 0x96, 0x6a, 0xa5, 0x83, 0x48, 0x50, 0x97,
	0xb3, 0x41, 0x24, 0xef, 0xdf, 0x85, 0xba, 0x7e, 0x40, 0x78, 0xfc, 0xb4, 0x1e, 0x25, 0x12, 0xf8,
	0x8d, 0x6c, 0x20, 0x49, 0xc7, 0x74, 0x40, 0x6e, 0x62, 0x19, 0xdb, 0x98, 0x0e, 0xe8, 0x99, 0x42,
	0x31, 0x97, 0x29, 0xb4, 0xfe, 0xd9, 0x80, 0x9a, 0x76, 0x6c, 0x5f, 0x1e, 0x65, 0xec, 0xea, 0xa2,
	0x81, 0x0f, 0x44, 0x4f, 0xb1, 0x67, 0x19, 0xdb, 0xc7, 0xa2, 0x67, 0xbe, 0x05, 0x2b, 0x5d, 0xee,
	0xf1, 0xbe, 0x88, 0xed, 0xc0, 0x17, 0x5e, 0x92, 0xdd, 0xd4, 0x15, 0xf0, 0x18, 0x61, 0xc8, 0x10,
	0x0a, 0x30, 0xc8, 0x3a, 0x48, 0x5e, 0x55, 0x10, 0x40, 0xd6, 0xe1, 0x26, 0x00, 0x2d, 0x49, 0x5a,
	0x15, 0xc9, 0x2e, 0x52, 0x74, 0x32, 0xa1, 0xad, 0xff, 0x2a, 0x41, 0x23, 0x1f, 0x18, 0x4d, 0xa5,
	0x19, 0x32, 0xa6, 0x7a, 0xad, 0x34, 0x63, 0x0b, 0x4a, 0xa8, 0xa2, 0x4a, 0x05, 0xde, 0x98, 0x33,
	0xf4, 0x79, 0xc4, 0x43, 0x8b, 0x10, 0x95, 0xd8, 0xc6, 0x91, 0x6e, 0xdf, 0xaa, 0x04, 0xa1, 0x2d,
	0x7c, 0x1d, 0xae, 0xa3, 0x55, 0x46, 0x1f, 0x17, 0x73, 0xfb, 0xfb, 0xe3, 0x50, 0x44, 0x8e, 0x20,
	0xe5, 0x55, 0xa6, 0x63, 0x6d, 0xc8, 0xa2, 0x3d, 0xea, 0xfd, 0xb6, 0xd6, 0x69, 0x76, 0x60, 0xd5,
	0x0f, 0x78, 0xc8, 0xb0, 0x81, 0x81, 0x04, 0x66, 0x06, 0x2a, 0xd0, 0x99, 0x17, 0xa1, 0x3c, 0x4b,
	0xf0, 0x93, 0x44, 0xa2, 0xe9, 0x4f, 0x41, 0x66, 0x52, 0xd6, 0xa5, 0x99, 0x94, 0xf5, 0x5d, 0x30,
	0x53, 0x8c, 0x2e, 0xeb, 0xbd, 0xe8, 0xf9, 0xae, 0x1f, 0x2a, 0xd6, 0x37, 0x15, 0xde, 0x6e, 0x02,
	0xc7, 0xcd, 0xbf, 0xf4, 0x43, 0xc7, 0x96, 0x58, 0x15, 0x99, 0x1f, 0x20, 0x64, 0x8f, 0xba, 0xdf,
	0x87, 0x6b, 0x49, 0x7a, 0x2b, 0x73, 0x8c, 0xd4, 0x80, 0x57, 0x09, 0xf5, 0x8a, 0xea, 0x3d, 0xc6,
	0x7c, 0x23, 0xb1, 0xe5, 0x53, 0x49, 0x33, 0x9c, 0x9b, 0x34, 0xd7, 0x66, 0x93, 0xe6, 0x5c, 0xfa,
	0x5f, 0x7f, 0xdd, 0xf4, 0xff, 0x1a, 0x2c, 0x45, 0xa7, 0xa3, 0xae, 0xef, 0xae, 0xaf, 0x48, 0xe5,
	0x95, 0xad, 0xd6, 0x0b, 0xa8, 0x24, 0xd8, 0x98, 0x7b, 0xeb, 0x85, 0x8f, 0xa4, 0xb4, 0x71, 0x03,
	0x2a, 0x08, 0x26, 0xe5, 0x52, 0x4a, 0x14, 0xf1, 0xf8, 0x68, 0x5a, 0xbf, 0x8a, 0x79, 0xfd, 0x32,
	0xa1, 0x44, 0xd2, 0x23, 0x15, 0x88, 0xbe, 0x5b, 0x7f, 0x6a, 0x40, 0x73, 0xfa, 0x44, 0xcd, 0x8f,
	0xa0, 0xa1, 0x49, 0x05, 0x9a, 0xd9, 0xc5, 0x25, 0x9d, 0x8c, 0x00, 0x05, 0x70, 0xbe, 0xde, 0x9c,
	0x32, 0xb8, 0x85, 0x45, 0x06, 0xb7, 0x98, 0x37, 0xb8, 0x01, 0xac, 0xe4, 0x28, 0x9b, 0x9f, 0x80,
	0xe9, 0xb2, 0x70, 0xc0, 0xed, 0x9e, 0x8f, 0x81, 0xaf, 0x90, 0x51, 0xea, 0xe2, 0xa2, 0x41, 0x1b,
	0x07, 0xec, 0x21, 0xfe, 0x21, 0xa1, 0x3f, 0xb9, 0x64, 0x35, 0xdd, 0x29, 0xd8, 0xee, 0x12, 0x94,
	0x70, 0x82, 0xd6, 0x67, 0x4b, 0xd0, 0x9c, 0x1e, 0x60, 0x6e, 0x42, 0x09, 0x6d, 0x8d, 0x9a, 0x67,
	0x23, 0x3f, 0x0f, 0x72, 0x87, 0x1c, 0x3a, 0x8b, 0xb8, 0x45, 0x78, 0xe6, 0x3b, 0xb0, 0x2a, 0xd7,
	0xe7, 0xf2, 0xbe, 0xac, 0xeb, 0xd8, 0x0f, 0xd5, 0x29, 0x35, 0xa8, 0xa3, 0xcd, 0xfb, 0x54, 0xda,
	0x79, 0x38, 0x85, 0x4a, 0xc6, 0xef, 0x21, 0x71, 0xa1, 0xac, 0xa1, 0xa2, 0xe7, 0x78, 0x78, 0x16,
	0xd5, 0x6d, 0x75, 0x92, 0x79, 0xaa, 0xdb, 0x67, 0x51, 0xdd, 0x56, 0x59, 0x75, 0x9e, 0xea, 0xb6,
	0xf9, 0x29, 0x5c, 0x0d, 0xc5, 0x60, 0x18, 0x53, 0xa8, 0xee, 0x8a, 0x09, 0xb7, 0xbb, 0xcc, 0x19,
	0x24, 0x49, 0xca, 0xbc, 0x64, 0xc2, 0xc2, 0x21, 0x1d, 0x3f, 0x68, 0x8b, 0x09, 0xdf, 0x45, 0x7c,
	0x6b, 0x35, 0x9c, 0x06, 0xa1, 0xc9, 0xe5, 0xaf, 0xe2, 0x90, 0xd9, 0xe3, 0x50, 0x24, 0x3e, 0x88,
	0x00, 0xcf, 0x43, 0x81, 0x39, 0x8c, 0x3c, 0x3d, 0x3b, 0x08, 0xfd, 0x41, 0xc8, 0xa3, 0xc8, 0xee,
	0xb2, 0x50, 0x25, 0x1c, 0xf3, 0xa6, 0x95, 0xe7, 0x71, 0xac, 0x06, 0xec, 0xb2, 0xd0, 0x5a, 0x15,
	0xd3, 0x20, 0xd3, 0x82, 0x55, 0x95, 0x7c, 0x0c, 0x43, 0xce, 0x95, 0x4b, 0xa8, 0x9e, 0x9f, 0xa4,
	0x62, 0x28, 0xcf, 0xc9, 0x59, 0xa8, 0x24, 0x35, 0x03, 0x60, 0xb0, 0xad, 0x31, 0x94, 0x74, 0x48,
	0xda, 0x8b, 0x95, 0x94, 0x9d, 0x64, 0x85, 0x1f, 0xc0, 0xea, 0x50, 0x38, 0xdc, 0x76, 0x98, 0x37,
	0x1a, 0xdb, 0xd1, 0x4b, 0x11, 0xf7, 0x86, 0x64, 0x37, 0x2a, 0xd6, 0x65, 0xec, 0xd8, 0x47, 0xf8,
	0x09, 0x81, 0xd1, 0x6d, 0x39, 0x22, 0x62, 0x5d, 0x57, 0xa1, 0x93, 0xfd, 0xa8, 0x58, 0x75, 0x05,
	0x24, 0x54, 0x54, 0x8e, 0x1e, 0xf3, 0xec, 0xc0, 0x65, 0xa7, 0x64, 0x24, 0xca, 0xd6, 0x72, 0x8f,
	0x79, 0xc7, 0x2e, 0x3b, 0xa5, 0xf1, 0x63, 0xa5, 0xa2, 0x64, 0x9f, 0x1a, 0xd2, 0xed, 0x25, 0x40,
	0x32, 0x50, 0x4f, 0x60, 0x25, 0xe4, 0xae, 0x44, 0x72, 0x58, 0xcc, 0xd6, 0x2f, 0x13, 0x23, 0xe6,
	0xc5, 0x6d, 0x96, 0xc2, 0xdd, 0x67, 0x31, 0xb3, 0xea, 0xa1, 0xd6, 0x6a, 0xfd, 0xb1, 0x01, 0x75,
	0xbd, 0x5b, 0xab, 0x0a, 0x1a, 0x7a, 0x55, 0xf0, 0x3a, 0x2c, 0x8b, 0xc8, 0xee, 0xf9, 0x42, 0x06,
	0x3f, 0x15, 0x6b, 0x49, 0x44, 0x7b, 0xbe, 0xa0, 0xd0, 0x07, 0xf1, 0x7d, 0xd7, 0xf5, 0x5f, 0xaa,
	0xca, 0x5a, 0x45, 0x44, 0x8f, 0xa8, 0xad, 0x46, 0xb9, 0xe2, 0x45, 0x92, 0x53, 0x2c, 0x89, 0xa8,
	0x2d, 0x5e, 0xc8, 0xca, 0x90, 0x78, 0x81, 0x0a, 0x3f, 0x56, 0x8e, 0xa9, 0x68, 0x55, 0x11, 0xb2,
	0x87, 0x80, 0xd6, 0x48, 0xd5, 0xcd, 0xb4, 0xb3, 0xfa, 0x1e, 0xac, 0x39, 0xa7, 0x9e, 0x7e, 0xfa,
	0xb6, 0x88, 0xf9, 0x28, 0x09, 0x59, 0xa7, 0xcc, 0x84, 0xba, 0x99, 0xd8, 0x9c, 0x6c, 0x6f, 0x66,
	0x34, 0x0e, 0x63, 0x3e, 0xb2, 0x4c, 0xe7, 0xd4, 0xcb, 0x83, 0xa2, 0xd6, 0x0e, 0x34, 0xf2, 0xa0,
	0x2c, 0x17, 0x31, 0xf4, 0x5c, 0x64, 0x7e, 0x8c, 0x83, 0xf6, 0x76, 0x75, 0x46, 0x8e, 0x89, 0x39,
	0xa8, 0xa6, 0x4e, 0xc8, 0x06, 0x8a, 0x14, 0x85, 0x42, 0xfb, 0x21, 0x1b, 0x98, 0xf7, 0xa0, 0x91,
	0x76, 0xda, 0x43, 0x16, 0x0d, 0x93, 0x32, 0x71, 0x82, 0xf1, 0x84, 0x45, 0xc3, 0x94, 0x44, 0x14,
	0xfb, 0x41, 0x12, 0x5a, 0x22, 0xe0, 0x24, 0xf6, 0x83, 0x94, 0x04, 0x76, 0x4a, 0x12, 0xa5, 0x8c,
	0x04, 0x62, 0x20, 0x89, 0xd6, 0x8f, 0x0c, 0x58, 0x9d, 0x51, 0x6d, 0x74, 0x94, 0x64, 0x18, 0x30,
	0xd8, 0x18, 0x47, 0x49, 0x2a, 0x8a, 0xa0, 0x13, 0x82, 0x98, 0x3b, 0xb0, 0x2c, 0x3c, 0x32, 0x1e,
	0x2a, 0x9c, 0x99, 0xa7, 0xbf, 0x99, 0xb9, 0x48, 0x8a, 0x1b, 0x4b, 0xc2, 0x43, 0x20, 0x2a, 0x58,
	0x3a, 0x47, 0x2e, 0xc4, 0x59, 0x49, 0xe6, 0xa1, 0x30, 0xa7, 0xf5, 0x0f, 0x05, 0x58, 0x9d, 0xa1,
	0x72, 0x66, 0x4e, 0xf3, 0x16, 0xac, 0x30, 0x4f, 0x8c, 0xa4, 0xe8, 0x67, 0xe7, 0x50, 0x4f, 0x81,
	0x2a, 0x0a, 0xc9, 0x21, 0x49, 0xd6, 0xc8, 0x99, 0x9b, 0x3a, 0x26, 0x71, 0xf8, 0x03, 0xb8, 0x86,
	0xa1, 0xca, 0x20, 0xf4, 0xc7, 0x9e, 0x8a, 0x45, 0x6c, 0x17, 0xd9, 0xa5, 0x98, 0x79, 0x35, 0xeb,
	0xa5, 0xb8, 0xa4, 0x8d, 0x7d, 0x67, 0x8e, 0xf2, 0x68, 0x54, 0xf9, 0xcc, 0x51, 0x47, 0x34, 0xea,
	0x36, 0xd4, 0x98, 0x1b, 0x0c, 0x99, 0x9a, 0x40, 0xa6, 0xcb, 0x40, 0xa0, 0x76, 0x1e, 0x41, 0xd2,
	0x5a, 0xd6, 0x10, 0x24, 0x85, 0x9b, 0x00, 0x7d, 0xdf, 0x8b, 0xb5, 0x98, 0xa9, 0x6a, 0x55, 0x11,
	0x42, 0xb3, 0xb4, 0x7e, 0x1d, 0x4a, 0x18, 0x5d, 0x9a, 0x4d, 0x28, 0x8e, 0xd3, 0xe8, 0x02, 0x3f,
	0x91, 0x9b, 0x7d, 0xd6, 0x4b, 0xe2, 0x0a, 0xfa, 0x4e, 0x03, 0xf9, 0xa2, 0x16, 0xc8, 0xbf, 0x01,
	0x55, 0xfc, 0x6f, 0x6b, 0x21, 0x45, 0x05, 0x01, 0x74, 0x50, 0xa7, 0x4a, 0x31, 0xb5, 0x4a, 0xdf,
	0xaf, 0x42, 0x45, 0x95, 0x0d, 0x4f, 0x95, 0x2e, 0xde, 0xbb, 0x40, 0xd1, 0xf0, 0xd4, 0x4a, 0x47,
	0xa1, 0x14, 0xb3, 0x5e, 0x4c, 0x45, 0xc2, 0x5c, 0xc9, 0xa3, 0xce, 0x7a, 0x71, 0x5b, 0x44, 0xb1,
	0x0c, 0xd7, 0xff, 0xb6, 0x00, 0x2b, 0x9d, 0xa9, 0xaa, 0x60, 0x53, 0xab, 0x31, 0xea, 0xd6, 0xe0,
	0xdc, 0x22, 0x23, 0x99, 0x82, 0x46, 0xac, 0x37, 0x23, 0xad, 0xc6, 0x5d, 0xc8, 0xd5, 0xb8, 0x17,
	0xdc, 0x1d, 0x9c, 0x80, 0xa9, 0x22, 0x45, 0x59, 0x35, 0xa7, 0xa2, 0x9d, 0xaa, 0x4d, 0x2e, 0xbe,
	0x2d, 0xa0, 0xb2, 0xfa, 0x9e, 0xef, 0xf5, 0x95, 0x5b, 0xca, 0x00, 0xe8, 0xbc, 0x3d, 0x5f, 0x6e,
	0x2a, 0xe4, 0xd1, 0xd8, 0x8d, 0xed, 0x90, 0x07, 0xee, 0xa9, 0x8a, 0xdf, 0xe7, 0x69, 0xe1, 0x91,
	0x4f, 0x51, 0x1a, 0x0d, 0xa0, 0x3a, 0xb1, 0xb5, 0xea, 0x4d, 0x83, 0x5a, 0xbf, 0x67, 0xc0, 0xea,
	0x0c, 0x22, 0xea, 0x4b, 0x72, 0x27, 0x31, 0x18, 0xa3, 0xa3, 0xd3, 0xd4, 0xae, 0xa9, 0x7a, 0x1e,
	0x63, 0x07, 0x39, 0x9f, 0x5d, 0xa8, 0x51, 0x24, 0x2e, 0xeb, 0x1b, 0xca, 0x36, 0xcc, 0x2b, 0x88,
	0x60, 0x5c, 0x2e, 0xcb, 0x14, 0x16, 0x44, 0xe9, 0x77, 0x6b, 0x1f, 0x20, 0xeb, 0xc9, 0x8a, 0x33,
	0xd9, 0xb4, 0xb2, 0x38, 0xa3, 0x6e, 0xb0, 0xe6, 0x19, 0xdd, 0x9f, 0xe8, 0x22, 0x41, 0x76, 0xfb,
	0xff, 0xab, 0x0b, 0x5c, 0x83, 0x2a, 0xf4, 0xe7, 0x8a, 0x01, 0x66, 0x0c, 0xea, 0x9a, 0xf7, 0x31,
	0xd4, 0x95, 0xd3, 0x20, 0x49, 0x52, 0xdb, 0xba, 0x37, 0xd7, 0xad, 0xec, 0xcb, 0x4f, 0x12, 0xa4,
	0x9a, 0x93, 0x35, 0xcc, 0x43, 0x68, 0xf4, 0x29, 0xa9, 0x49, 0x84, 0x52, 0xd5, 0x32, 0xe6, 0x39,
	0xe7, 0x47, 0xbe, 0xeb, 0xa4, 0x22, 0x59, 0xc7, 0xa1, 0xe9, 0x6e, 0x7e, 0x0d, 0xd6, 0x26, 0xc2,
	0xe1, 0xbe, 0x1d, 0x8d, 0x98, 0xeb, 0x6a, 0x14, 0xa5, 0x80, 0xbd, 0x33, 0x87, 0xe2, 0xc7, 0x38,
	0xe6, 0x04, 0x87, 0xa4, 0x74, 0xcd, 0xc9, 0x0c, 0xac, 0xf5, 0x2f, 0x05, 0x30, 0x67, 0x51, 0xcd,
	0x36, 0x5c, 0x96, 0x93, 0xd2, 0x74, 0x5a, 0x84, 0x7c, 0x6f, 0xd1, 0x74, 0x38, 0x9c, 0x62, 0xe5,
	0x95, 0x89, 0xde, 0xa4, 0xca, 0x57, 0x16, 0x62, 0x51, 0x10, 0xaa, 0x5f, 0x89, 0x9a, 0x69, 0xa0,
	0x45, 0xa6, 0x9f, 0x0e, 0xfc, 0x6d, 0x68, 0xd2, 0xd4, 0xe8, 0x34, 0xf4, 0xd8, 0xb9, 0x68, 0xad,
	0x20, 0x1c, 0xbd, 0x86, 0x0c, 0x9d, 0x73, 0x88, 0x2a, 0x1e, 0x2f, 0xa9, 0xf8, 0x4d, 0x21, 0xca,
	0x70, 0x7c, 0x96, 0xe2, 0xb6, 0x8a, 0x39, 0x72, 0x14, 0xb7, 0xcf, 0xa0, 0xb8, 0xad, 0x92, 0xdc,
	0x1c, 0xc5, 0x6d, 0x34, 0xd3, 0xaa, 0x4a, 0x4f, 0x95, 0x02, 0x19, 0x06, 0x83, 0x04, 0x1d, 0x7a,
	0x7d, 0xbf, 0xf5, 0x99, 0x01, 0x2b, 0x39, 0xc6, 0x60, 0x48, 0x41, 0x9b, 0x4d, 0x42, 0x0a, 0x6a,
	0xcc, 0x29, 0x7a, 0x5e, 0x87, 0xe5, 0x71, 0xa0, 0x57, 0x93, 0x96, 0xc6, 0x01, 0x65, 0x81, 0x26,
	0x94, 0x28, 0x68, 0x94, 0xf5, 0x2d, 0xfa, 0xce, 0x57, 0x2f, 0xcb, 0x53, 0xd5, 0xcb, 0x26, 0x14,
	0x99, 0x70, 0x94, 0xa3, 0xc1, 0xcf, 0xd6, 0x1f, 0x19, 0x50, 0xd7, 0x65, 0x0e, 0xb3, 0x7a, 0x11,
	0xc9, 0xe4, 0xba, 0x9f, 0x94, 0xd8, 0xcb, 0x16, 0x88, 0x08, 0x35, 0x14, 0x31, 0xa5, 0xcf, 0x71,
	0x1d, 0x15, 0xad, 0xa9, 0x54, 0x0f, 0x21, 0x14, 0xad, 0xa1, 0xfd, 0x96, 0x5c, 0x43, 0x12, 0x9a,
	0x93, 0xaf, 0x13, 0xcf, 0x86, 0xfe, 0xcb, 0xa4, 0x56, 0x4b, 0x44, 0x74, 0xbf, 0x82, 0x00, 0xf2,
	0x2b, 0xff, 0x6d, 0xc0, 0x15, 0xfd, 0xae, 0x0b, 0xa7, 0x3d, 0xe7, 0xaa, 0x72, 0x9e, 0xb5, 0xce,
	0xdd, 0x48, 0x16, 0x17, 0xde, 0x48, 0x96, 0xce, 0xb9, 0x91, 0x2c, 0x7f, 0xe9, 0x6f, 0x30, 0x96,
	0x66, 0xde, 0x60, 0xfc, 0xae, 0x01, 0x6b, 0xb3, 0x3b, 0xff, 0xd2, 0x5f, 0x60, 0x9c, 0x73, 0x86,
	0xad, 0x3f, 0x2f, 0x41, 0x35, 0xad, 0x68, 0x99, 0x0d, 0x28, 0xa4, 0x0c, 0x2f, 0x88, 0xac, 0xe0,
	0x57, 0xd0, 0xe2, 0x04, 0x15, 0x61, 0x14, 0x73, 0x11, 0xc6, 0x44, 0xf0, 0x97, 0x89, 0x70, 0xe2,
	0xb7, 0xb9, 0x0e, 0xcb, 0x8e, 0x88, 0x7a, 0xe3, 0x28, 0x4a, 0xca, 0xae, 0xaa, 0x89, 0xe3, 0x31,
	0xcb, 0x50, 0x92, 0xd9, 0x67, 0x13, 0x73, 0x03, 0x2a, 0xca, 0x90, 0x46, 0x2a, 0xf0, 0x49, 0xdb,
	0x54, 0x44, 0x8d, 0x59, 0xcc, 0x55, 0x95, 0x48, 0x36, 0x72, 0xbe, 0xa1, 0x9a, 0x2f, 0x8a, 0xbc,
	0x09, 0xd5, 0xac, 0x00, 0xa5, 0xee, 0x56, 0x53, 0x80, 0x96, 0xe5, 0xd4, 0xf4, 0x2c, 0xe7, 0x0e,
	0xd4, 0x50, 0x3c, 0x43, 0x11, 0x50, 0x89, 0xad, 0x2e, 0x4b, 0x43, 0x1a, 0x08, 0xe3, 0x4f, 0x55,
	0x8c, 0x53, 0xd7, 0x7e, 0x32, 0x7d, 0xab, 0x4b, 0xe0, 0x89, 0x0c, 0x5c, 0xc9, 0x9f, 0xb1, 0x50,
	0x96, 0x35, 0x1b, 0x89, 0x3f, 0x63, 0x21, 0xd5, 0x35, 0x71, 0x27, 0xf8, 0x4d, 0x39, 0x5b, 0xd1,
	0x92, 0x0d, 0xe4, 0x1d, 0xa5, 0x49, 0x4d, 0xc9, 0x3b, 0xfc, 0xce, 0xc8, 0xe0, 0xf6, 0x56, 0x35,
	0x32, 0xb8, 0x3f, 0x2d, 0xb5, 0x32, 0x73, 0xa9, 0x55, 0xf2, 0x86, 0xe9, 0x8a, 0xf6, 0x86, 0x29,
	0x5f, 0x65, 0xbc, 0x3a, 0x5d, 0x65, 0xbc, 0x0f, 0xcd, 0xbe, 0x78, 0xc5, 0x1d, 0x5b, 0xe9, 0x5a,
	0xcf, 0xf7, 0xd6, 0xd7, 0x64, 0x09, 0x82, 0xe0, 0x52, 0x30, 0x7a, 0xbe, 0xd7, 0xfa, 0x7d, 0x43,
	0x79, 0xdc, 0x24, 0x8c, 0xa3, 0x80, 0x55, 0x7d, 0x6b, 0x37, 0x5a, 0x09, 0xe8, 0xd0, 0xa1, 0x88,
	0x3d, 0x41, 0xd0, 0x84, 0xa8, 0x9e, 0x00, 0xcf, 0xab, 0x6e, 0xe9, 0xd5, 0xe3, 0x52, 0xbe, 0x2e,
	0xfd, 0x23, 0x23, 0x79, 0x5f, 0x91, 0x05, 0x4f, 0xff, 0x87, 0xef, 0x2b, 0x50, 0xbb, 0xc9, 0xe6,
	0x25, 0x44, 0xa4, 0x2e, 0x50, 0x9c, 0xa3, 0xb4, 0x7b, 0x0f, 0x6a, 0xda, 0x58, 0xfd, 0x79, 0x85,
	0x91, 0x7b, 0x5e, 0x81, 0x47, 0x8d, 0x1d, 0x1a, 0x83, 0xe8, 0xf1, 0x09, 0x32, 0xa7, 0xf5, 0x14,
	0x6a, 0xda, 0x9d, 0x2c, 0x1e, 0xa6, 0xba, 0x8d, 0xf4, 0xc6, 0x23, 0x45, 0xa7, 0x2a, 0x21, 0x47,
	0xe3, 0x11, 0x1e, 0x88, 0xea, 0xd6, 0xfc, 0xac, 0x1a, 0x81, 0xce, 0xab, 0xf5, 0xd7, 0x65, 0x75,
	0x51, 0xa0, 0xee, 0x62, 0xcd, 0x5f, 0xca, 0x05, 0x4d, 0x6f, 0x5f, 0xe0, 0x32, 0x57, 0x8b, 0x9b,
	0x0e, 0xb4, 0xdb, 0xa3, 0xc2, 0xf9, 0xcf, 0x7c, 0xd4, 0xe5, 0x04, 0x5a, 0x99, 0x27, 0x97, 0xb4,
	0x3b, 0xa4, 0xc7, 0x53, 0x77, 0x48, 0xc5, 0x8b, 0xde, 0x21, 0x3d, 0xb9, 0x94, 0xbf, 0x45, 0xfa,
	0x15, 0xfd, 0x16, 0xa9, 0x74, 0xa1, 0x5b, 0x24, 0x5c, 0x48, 0x7a, 0x8f, 0xf4, 0xc9, 0x99, 0x97,
	0xfb, 0xe5, 0xd7, 0xba, 0xdc, 0x7f, 0x72, 0xe9, 0x8c, 0xeb, 0xfd, 0xb3, 0x8b, 0x9c, 0x4b, 0x5f,
	0xb8, 0xc8, 0x69, 0x7e, 0x02, 0xcd, 0x90, 0x63, 0xe8, 0xa1, 0xd5, 0x75, 0xe5, 0xa3, 0x81, 0x07,
	0x73, 0xeb, 0x41, 0x14, 0xa9, 0x24, 0x75, 0x1f, 0x75, 0x18, 0x97, 0x35, 0x2a, 0xc4, 0x8a, 0x7d,
	0xa8, 0xf1, 0x28, 0xa0, 0x27, 0x50, 0x48, 0xb3, 0xb2, 0x30, 0xd0, 0x3f, 0x20, 0x4c, 0x45, 0x0a,
	0xe4, 0xb8, 0x33, 0xea, 0xc4, 0xd5, 0x45, 0x75, 0x62, 0xc8, 0xd5, 0x89, 0x77, 0x6b, 0xea, 0x72,
	0x07, 0x43, 0xde, 0xd6, 0x89, 0x7a, 0xa6, 0xa7, 0x09, 0xd0, 0x17, 0xbe, 0xb9, 0x6c, 0xfd, 0xac,
	0x08, 0x57, 0xce, 0x60, 0x06, 0xfa, 0xa6, 0x28, 0xcb, 0x9e, 0x23, 0x31, 0xef, 0x72, 0x1a, 0xa1,
	0x7e, 0xcc, 0x5c, 0xa5, 0xf9, 0xb2, 0x21, 0x7d, 0x55, 0x76, 0x0b, 0x29, 0x1b, 0x08, 0xe5, 0xda,
	0xf5, 0xa3, 0x6c, 0xe4, 0xcb, 0x67, 0xd2, 0x17, 0x66, 0xe5, 0xb3, 0xd4, 0xe9, 0x2d, 0xeb, 0x4e,
	0xaf, 0x09, 0x45, 0x5f, 0x38, 0x2a, 0xf5, 0xc7, 0xcf, 0xd4, 0xe4, 0x57, 0x35, 0x93, 0x7f, 0x15,
	0xca, 0xe3, 0xf4, 0x5d, 0x51, 0xd1, 0x92, 0x0d, 0xf3, 0x6b, 0x70, 0x55, 0x9e, 0x32, 0xca, 0x76,
	0x8f, 0xd2, 0x14, 0x5a, 0x53, 0x8d, 0x90, 0xcc, 0x30, 0xe1, 0x05, 0x76, 0xed, 0xd1, 0x02, 0xb7,
	0xe0, 0x2a, 0x95, 0x70, 0x02, 0x97, 0x79, 0xb6, 0x76, 0x90, 0x75, 0x1a, 0xb1, 0x8a, 0x7d, 0xc7,
	0x2e, 0xf3, 0x4e, 0xd2, 0x03, 0xbd, 0x07, 0x8d, 0xf4, 0xc2, 0x5e, 0x9a, 0xa0, 0x15, 0xf5, 0xfa,
	0x51, 0xdd, 0xda, 0x53, 0x90, 0x7f, 0x1f, 0x9a, 0xde, 0x78, 0xd4, 0xe5, 0xa1, 0x86, 0x27, 0x3d,
	0x65, 0x43, 0xc2, 0x53, 0xcc, 0xbc, 0xfc, 0x5c, 0x5e, 0x24, 0x3f, 0xcd, 0xfc, 0x3d, 0xc3, 0x1f,
	0x18, 0x00, 0x99, 0x58, 0xce, 0x04, 0x35, 0x5f, 0x87, 0xb2, 0xac, 0x19, 0x2c, 0x7e, 0x4e, 0xf8,
	0x94, 0xc5, 0xbd, 0x21, 0xdd, 0xf3, 0x49, 0xf4, 0xa9, 0x05, 0x15, 0x17, 0x2d, 0xa8, 0x94, 0x5f,
	0xd0, 0x5f, 0x16, 0xa1, 0x9a, 0x92, 0x9b, 0x59, 0xcf, 0x35, 0x58, 0x52, 0xb5, 0x38, 0xf9, 0xfc,
	0x58, 0xb5, 0xe8, 0x46, 0x0b, 0x07, 0x21, 0xf7, 0x07, 0x49, 0x42, 0x00, 0x04, 0x3a, 0x41, 0x08,
	0x26, 0xbd, 0x43, 0x5f, 0xcd, 0x36, 0x3f, 0x3a, 0xa4, 0x89, 0x3b, 0x9c, 0x8d, 0x68, 0x2f, 0x34,
	0x02, 0x47, 0xb2, 0x97, 0x2c, 0xa9, 0x2c, 0x5c, 0x70, 0x24, 0x8e, 0x30, 0x9f, 0x24, 0x8b, 0x72,
	0x59, 0x97, 0xbb, 0xe7, 0x98, 0x31, 0x22, 0x80, 0xc6, 0x60, 0x5f, 0x44, 0x18, 0x1c, 0xab, 0xd5,
	0xb7, 0x71, 0xa8, 0xf9, 0x08, 0x64, 0x4b, 0x72, 0x6c, 0xf9, 0xf5, 0x08, 0x55, 0x69, 0x28, 0xf1,
	0xfd, 0xdb, 0x50, 0x97, 0x74, 0x54, 0x5d, 0xa2, 0xf2, 0x7a, 0x94, 0xe4, 0x76, 0x54, 0x79, 0x82,
	0xc1, 0x4a, 0x6e, 0xd3, 0x33, 0x67, 0x35, 0xd7, 0x1c, 0xc8, 0x14, 0xaf, 0x38, 0x95, 0xe2, 0x65,
	0xf7, 0xff, 0x45, 0x75, 0xff, 0xdf, 0xfa, 0x4f, 0x03, 0x9a, 0xd3, 0x8b, 0x38, 0xb3, 0xe2, 0x79,
	0x13, 0x80, 0x32, 0x51, 0x19, 0xc9, 0xca, 0xf9, 0xaa, 0x08, 0x91, 0x97, 0xa4, 0xf7, 0xa1, 0x99,
	0x75, 0xab, 0xaa, 0xa1, 0x9c, 0xbe, 0x91, 0x22, 0xc9, 0xca, 0x21, 0x06, 0xec, 0xa1, 0x50, 0x31,
	0x14, 0x7e, 0xa2, 0xf1, 0x21, 0xdd, 0xd6, 0x33, 0x47, 0x04, 0x50, 0xe6, 0xb8, 0x0d, 0x65, 0x24,
	0x90, 0xbc, 0xcb, 0x7c, 0x73, 0x9e, 0x65, 0x45, 0x1c, 0x4b, 0xa2, 0x9e, 0x6d, 0xb0, 0x5a, 0xdf,
	0x81, 0x32, 0x61, 0x99, 0x77, 0xa1, 0xde, 0xf5, 0xfd, 0x17, 0xc2, 0x1b, 0xe8, 0xa5, 0x9e, 0x9a,
	0x82, 0x91, 0xb6, 0x7f, 0x05, 0x1a, 0x63, 0x2f, 0x87, 0xa4, 0x9e, 0x3f, 0xa5, 0x50, 0x8a, 0x61,
	0x7e, 0x6a, 0xc0, 0x06, 0xd9, 0x74, 0x65, 0xbd, 0xe5, 0xb9, 0xed, 0xb9, 0xa2, 0xf7, 0x02, 0xd3,
	0xc6, 0xd9, 0xea, 0xe7, 0x4d, 0x80, 0xc4, 0xf0, 0x89, 0xe4, 0xf1, 0x57, 0x55, 0x41, 0x64, 0x90,
	0x9a, 0x74, 0xeb, 0x06, 0xbd, 0xae, 0x80, 0x1d, 0xb2, 0xeb, 0xc7, 0xd0, 0xe8, 0x8d, 0x43, 0xbb,
	0x1b, 0x7b, 0x49, 0xd1, 0xbc, 0xb4, 0xf0, 0x21, 0x68, 0x6e, 0x6d, 0xb2, 0xa8, 0x6e, 0xd5, 0x7b,
	0xe3, 0x70, 0x37, 0x56, 0xad, 0xd6, 0xdf, 0x14, 0xe1, 0xcd, 0xb9, 0xdb, 0xc0, 0x1c, 0xb0, 0x83,
	0x91, 0xb9, 0xc7, 0x5c, 0x7d, 0x52, 0xe3, 0xb5, 0x27, 0x6d, 0x10, 0x8d, 0x74, 0x5a, 0x73, 0x0f,
	0x2a, 0x48, 0x8f, 0xde, 0xb2, 0x16, 0x88, 0xda, 0xfd, 0x8b, 0x50, 0xa3, 0x97, 0xac, 0xcb, 0xdd,
	0x98, 0x3e, 0xf0, 0xa4, 0x12, 0x96, 0x8d, 0x03, 0x07, 0x0f, 0x5d, 0x15, 0x69, 0x14, 0xf4, 0x39,
	0x01, 0xd1, 0x7a, 0x91, 0x85, 0x57, 0x38, 0xea, 0x11, 0x3b, 0x82, 0x14, 0xc2, 0x5d, 0xa8, 0x0f,
	0x59, 0x64, 0xa7, 0x35, 0xe4, 0xb2, 0x7c, 0x6e, 0x3e, 0x64, 0x51, 0x9a, 0x63, 0xdc, 0x85, 0x34,
	0x5b, 0xd0, 0xde, 0x1d, 0xa4, 0x79, 0x07, 0x66, 0x09, 0xe4, 0x89, 0x59, 0x14, 0xab, 0x52, 0x8c,
	0x6c, 0x98, 0xbf, 0x01, 0x6b, 0xc9, 0x1a, 0x7b, 0xcc, 0xe5, 0x9e, 0xc3, 0x54, 0xc1, 0xa6, 0x72,
	0x91, 0xf8, 0x68, 0x4f, 0x0d, 0x21, 0xb3, 0x77, 0x25, 0x9c, 0x05, 0xb6, 0xfe, 0xcc, 0x48, 0xe3,
	0x07, 0x1d, 0x3e, 0xe7, 0xfa, 0x68, 0x1d, 0x96, 0xa5, 0x9b, 0x88, 0x94, 0x00, 0x26, 0x4d, 0x8a,
	0x0d, 0x3c, 0xa7, 0x13, 0x25, 0x71, 0x04, 0x35, 0xa6, 0xb3, 0xd1, 0xd2, 0x6c, 0x36, 0x7a, 0x0b,
	0xa0, 0x3b, 0x8e, 0x84, 0xc7, 0xa3, 0xe8, 0xd0, 0x49, 0xde, 0x88, 0x65, 0x90, 0x07, 0xdf, 0xc8,
	0x57, 0x55, 0x92, 0x87, 0xc7, 0x6b, 0xb0, 0xfa, 0xf4, 0xd9, 0xfe, 0x81, 0x7d, 0xd8, 0x6e, 0x1f,
	0x3c, 0xde, 0x69, 0xdb, 0x9d, 0x4f, 0x8f, 0x0f, 0x9a, 0x97, 0xcc, 0x2a, 0x94, 0x4f, 0x3a, 0xcf,
	0xac, 0x4f, 0x9b, 0xc6, 0x83, 0x23, 0xad, 0xb0, 0xda, 0x91, 0xbf, 0x82, 0xa9, 0x4f, 0x61, 0xd7,
	0x60, 0x79, 0xff, 0xd3, 0xa3, 0x9d, 0xa7, 0x87, 0x7b, 0x4d, 0xc3, 0xac, 0x40, 0xe9, 0xd1, 0xb3,
	0xf6, 0x7e, 0xb3, 0x60, 0x5e, 0x85, 0xe6, 0xc7, 0x87, 0xfb, 0x07, 0xcf, 0xec, 0x93, 0xa7, 0x3b,
	0xed, 0xb6, 0xbd, 0xb7, 0x63, 0xed, 0x37, 0x8b, 0x0f, 0x7e, 0x6a, 0xa8, 0xf0, 0x4d, 0x4b, 0x20,
	0x90, 0xe6, 0x73, 0xef, 0x85, 0xe7, 0xbf, 0xf4, 0x6c, 0x6c, 0x37, 0x2f, 0x99, 0xab, 0xb0, 0xa2,
	0x82, 0xb4, 0x48, 0x82, 0x0c, 0x5c, 0xab, 0x8a, 0xf6, 0x6d, 0x1c, 0x28, 0xc1, 0x05, 0xd3, 0x84,
	0x06, 0x86, 0xef, 0x1a, 0xac, 0x88, 0x30, 0xf4, 0x04, 0x36, 0x86, 0xdd, 0x12, 0x56, 0x32, 0xdf,
	0x80, 0xeb, 0x14, 0x44, 0xdb, 0x14, 0x31, 0xdb, 0x32, 0x64, 0x96, 0x9d, 0x65, 0xf3, 0x06, 0xac,
	0x59, 0x5a, 0xe4, 0x9c, 0xd1, 0x5a, 0xc2, 0x6d, 0xc8, 0xd0, 0x41, 0x83, 0x2e, 0x3f, 0x38, 0x4d,
	0x8f, 0x5b, 0xd7, 0x2f, 0xf3, 0x16, 0x6c, 0x58, 0x07, 0x27, 0x07, 0xd6, 0xc7, 0x07, 0xf6, 0xee,
	0xf3, 0x4e, 0xe7, 0xd9, 0x91, 0x7d, 0xd2, 0xd9, 0xe9, 0x3c, 0x3f, 0xb1, 0x8f, 0x9e, 0x1d, 0x21,
	0xab, 0xee, 0xc2, 0xcd, 0xb3, 0xfb, 0x9f, 0x1f, 0xed, 0x3d, 0x39, 0xd8, 0xfb, 0xa8, 0x69, 0x98,
	0xb7, 0xe1, 0x8d, 0xb3, 0x51, 0x24, 0x42, 0xe1, 0xc1, 0x18, 0x56, 0x67, 0x94, 0xd1, 0x7c, 0x13,
	0xd6, 0xa7, 0x46, 0xd1, 0xb9, 0xaa, 0x69, 0x67, 0x69, 0x52, 0xaf, 0x82, 0x35, 0x8d, 0x33, 0xd6,
	0x45, 0x08, 0xcf, 0x8f, 0xed, 0xbd, 0x9d, 0xa3, 0xbd, 0x83, 0x76, 0xb3, 0xb0, 0xfd, 0xf7, 0x25,
	0x28, 0xd3, 0xc1, 0x99, 0x42, 0xe5, 0xda, 0xd9, 0x6b, 0x74, 0xf3, 0x9d, 0x0b, 0xbc, 0x80, 0x97,
	0xbf, 0x39, 0xd8, 0xf8, 0x7f, 0x17, 0x45, 0x45, 0xab, 0xe7, 0x2a, 0x61, 0xd1, 0x4a, 0x62, 0xe6,
	0x45, 0x5e, 0xdb, 0xab, 0xaa, 0xe1, 0xc6, 0xbb, 0x17, 0xc6, 0xc5, 0xd9, 0x44, 0xf6, 0x23, 0x0d,
	0xd5, 0xb7, 0x78, 0x63, 0xb9, 0x9f, 0x30, 0x2d, 0xde, 0xd8, 0xf4, 0xcf, 0x63, 0xc6, 0x4a, 0x1f,
	0xf3, 0x3f, 0xb8, 0x32, 0xdf, 0x5b, 0x44, 0x63, 0xe6, 0x07, 0x6c, 0x1b, 0x5b, 0xaf, 0x83, 0x8e,
	0xd3, 0xfe, 0xb6, 0x01, 0xd7, 0xe7, 0xb8, 0x19, 0xf3, 0xe1, 0x22, 0x62, 0x67, 0x7a, 0xd7, 0x8d,
	0xf7, 0x5f, 0x77, 0x48, 0xe0, 0x9e, 0xee, 0x3e, 0xf9, 0xc7, 0xcf, 0x6f, 0x19, 0xff, 0xf4, 0xf9,
	0x2d, 0xe3, 0xdf, 0x3f, 0xbf, 0x65, 0xfc, 0xc9, 0x7f, 0xdc, 0xba, 0x04, 0xb7, 0x7b, 0xfe, 0x68,
	0xb3, 0xcb, 0x02, 0x11, 0x9d, 0x4d, 0xef, 0xd8, 0xf8, 0x5e, 0x61, 0xf2, 0xf0, 0xc7, 0x85, 0xc6,
	0xee, 0xce, 0xf1, 0xe1, 0x4e, 0x10, 0x10, 0xf9, 0x8f, 0x1f, 0x76, 0x97, 0xe8, 0x17, 0x7e, 0xef,
	0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x3d, 0x8a, 0x69, 0x23, 0x39, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopicClient is the client API for Topic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopicClient interface {
	// 话题详情页总数据
	TopicDetailsAll(ctx context.Context, in *TopicDetailsAllReq, opts ...grpc.CallOption) (*TopicDetailsAllReply, error)
	// 话题详情页折叠数据
	TopicDetailsFold(ctx context.Context, in *TopicDetailsFoldReq, opts ...grpc.CallOption) (*TopicDetailsFoldReply, error)
	// 新话题话题集聚合页
	TopicSetDetails(ctx context.Context, in *TopicSetDetailsReq, opts ...grpc.CallOption) (*TopicSetDetailsReply, error)
	// 新话题收拢动态页
	TopicMergedResource(ctx context.Context, in *TopicMergedResourceReq, opts ...grpc.CallOption) (*TopicMergedResourceReply, error)
	// 预约按钮点击事件
	TopicReserveButtonClick(ctx context.Context, in *TopicReserveButtonClickReq, opts ...grpc.CallOption) (*TopicReserveButtonClickReply, error)
}

type topicClient struct {
	cc *grpc.ClientConn
}

func NewTopicClient(cc *grpc.ClientConn) TopicClient {
	return &topicClient{cc}
}

func (c *topicClient) TopicDetailsAll(ctx context.Context, in *TopicDetailsAllReq, opts ...grpc.CallOption) (*TopicDetailsAllReply, error) {
	out := new(TopicDetailsAllReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.topic.v1.Topic/TopicDetailsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicClient) TopicDetailsFold(ctx context.Context, in *TopicDetailsFoldReq, opts ...grpc.CallOption) (*TopicDetailsFoldReply, error) {
	out := new(TopicDetailsFoldReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.topic.v1.Topic/TopicDetailsFold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicClient) TopicSetDetails(ctx context.Context, in *TopicSetDetailsReq, opts ...grpc.CallOption) (*TopicSetDetailsReply, error) {
	out := new(TopicSetDetailsReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.topic.v1.Topic/TopicSetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicClient) TopicMergedResource(ctx context.Context, in *TopicMergedResourceReq, opts ...grpc.CallOption) (*TopicMergedResourceReply, error) {
	out := new(TopicMergedResourceReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.topic.v1.Topic/TopicMergedResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicClient) TopicReserveButtonClick(ctx context.Context, in *TopicReserveButtonClickReq, opts ...grpc.CallOption) (*TopicReserveButtonClickReply, error) {
	out := new(TopicReserveButtonClickReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.topic.v1.Topic/TopicReserveButtonClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicServer is the server API for Topic service.
type TopicServer interface {
	// 话题详情页总数据
	TopicDetailsAll(context.Context, *TopicDetailsAllReq) (*TopicDetailsAllReply, error)
	// 话题详情页折叠数据
	TopicDetailsFold(context.Context, *TopicDetailsFoldReq) (*TopicDetailsFoldReply, error)
	// 新话题话题集聚合页
	TopicSetDetails(context.Context, *TopicSetDetailsReq) (*TopicSetDetailsReply, error)
	// 新话题收拢动态页
	TopicMergedResource(context.Context, *TopicMergedResourceReq) (*TopicMergedResourceReply, error)
	// 预约按钮点击事件
	TopicReserveButtonClick(context.Context, *TopicReserveButtonClickReq) (*TopicReserveButtonClickReply, error)
}

// UnimplementedTopicServer can be embedded to have forward compatible implementations.
type UnimplementedTopicServer struct {
}

func (*UnimplementedTopicServer) TopicDetailsAll(ctx context.Context, req *TopicDetailsAllReq) (*TopicDetailsAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicDetailsAll not implemented")
}
func (*UnimplementedTopicServer) TopicDetailsFold(ctx context.Context, req *TopicDetailsFoldReq) (*TopicDetailsFoldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicDetailsFold not implemented")
}
func (*UnimplementedTopicServer) TopicSetDetails(ctx context.Context, req *TopicSetDetailsReq) (*TopicSetDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicSetDetails not implemented")
}
func (*UnimplementedTopicServer) TopicMergedResource(ctx context.Context, req *TopicMergedResourceReq) (*TopicMergedResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicMergedResource not implemented")
}
func (*UnimplementedTopicServer) TopicReserveButtonClick(ctx context.Context, req *TopicReserveButtonClickReq) (*TopicReserveButtonClickReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicReserveButtonClick not implemented")
}

func RegisterTopicServer(s *grpc.Server, srv TopicServer) {
	s.RegisterService(&_Topic_serviceDesc, srv)
}

func _Topic_TopicDetailsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicDetailsAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).TopicDetailsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.topic.v1.Topic/TopicDetailsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).TopicDetailsAll(ctx, req.(*TopicDetailsAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topic_TopicDetailsFold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicDetailsFoldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).TopicDetailsFold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.topic.v1.Topic/TopicDetailsFold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).TopicDetailsFold(ctx, req.(*TopicDetailsFoldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topic_TopicSetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicSetDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).TopicSetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.topic.v1.Topic/TopicSetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).TopicSetDetails(ctx, req.(*TopicSetDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topic_TopicMergedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicMergedResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).TopicMergedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.topic.v1.Topic/TopicMergedResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).TopicMergedResource(ctx, req.(*TopicMergedResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topic_TopicReserveButtonClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicReserveButtonClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServer).TopicReserveButtonClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.topic.v1.Topic/TopicReserveButtonClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServer).TopicReserveButtonClick(ctx, req.(*TopicReserveButtonClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Topic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.topic.v1.Topic",
	HandlerType: (*TopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopicDetailsAll",
			Handler:    _Topic_TopicDetailsAll_Handler,
		},
		{
			MethodName: "TopicDetailsFold",
			Handler:    _Topic_TopicDetailsFold_Handler,
		},
		{
			MethodName: "TopicSetDetails",
			Handler:    _Topic_TopicSetDetails_Handler,
		},
		{
			MethodName: "TopicMergedResource",
			Handler:    _Topic_TopicMergedResource_Handler,
		},
		{
			MethodName: "TopicReserveButtonClick",
			Handler:    _Topic_TopicReserveButtonClick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/topic/interface/api/api.proto",
}

func (m *TopicMergedResourceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMergedResourceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicMergedResourceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FromSortBy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FromSortBy))
		i--
		dAtA[i] = 0x40
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LocalTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LocalTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MergeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MergeType))
		i--
		dAtA[i] = 0x20
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicMergedResourceReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicMergedResourceReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicMergedResourceReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TopicCardList != nil {
		{
			size, err := m.TopicCardList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopicSetDetailsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicSetDetailsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicSetDetailsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SortBy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SortBy))
		i--
		dAtA[i] = 0x10
	}
	if m.SetId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicSetHeadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicSetHeadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicSetHeadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFirstTime {
		i--
		if m.IsFirstTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsFav {
		i--
		if m.IsFav {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MissionText) > 0 {
		i -= len(m.MissionText)
		copy(dAtA[i:], m.MissionText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MissionText)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MissionUrl) > 0 {
		i -= len(m.MissionUrl)
		copy(dAtA[i:], m.MissionUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MissionUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HeadImgUrl) > 0 {
		i -= len(m.HeadImgUrl)
		copy(dAtA[i:], m.HeadImgUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HeadImgUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TopicCntText) > 0 {
		i -= len(m.TopicCntText)
		copy(dAtA[i:], m.TopicCntText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TopicCntText)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicSet != nil {
		{
			size, err := m.TopicSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopicSetDetailsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicSetDetailsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicSetDetailsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SortCfg != nil {
		{
			size, err := m.SortCfg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TopicInfo) > 0 {
		for iNdEx := len(m.TopicInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopicInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TopicSetHeadInfo != nil {
		{
			size, err := m.TopicSetHeadInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopicSetSortCfg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicSetSortCfg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicSetSortCfg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AllSortBy) > 0 {
		for iNdEx := len(m.AllSortBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllSortBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DefaultSortBy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DefaultSortBy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicDetailsAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDetailsAllReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicDetailsAllReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x52
	}
	if m.TopicDetailsExtMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TopicDetailsExtMode))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x42
	}
	if m.NeedRefresh != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NeedRefresh))
		i--
		dAtA[i] = 0x38
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LocalTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LocalTime))
		i--
		dAtA[i] = 0x28
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SortBy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SortBy))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicDetailsAllReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDetailsAllReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicDetailsAllReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TopicTopCards) > 0 {
		for iNdEx := len(m.TopicTopCards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopicTopCards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.TopicOnline != nil {
		{
			size, err := m.TopicOnline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TopicServerConfig != nil {
		{
			size, err := m.TopicServerConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TimeLineResource != nil {
		{
			size, err := m.TimeLineResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PubLayer != nil {
		{
			size, err := m.PubLayer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FunctionalCard != nil {
		{
			size, err := m.FunctionalCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TopicCardList != nil {
		{
			size, err := m.TopicCardList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TopicActivities != nil {
		{
			size, err := m.TopicActivities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DetailsTopInfo != nil {
		{
			size, err := m.DetailsTopInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopicServerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicServerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicServerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VertOnlineRefreshTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VertOnlineRefreshTime))
		i--
		dAtA[i] = 0x18
	}
	if m.PubEventsHiddenTimeoutThreshold != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PubEventsHiddenTimeoutThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.PubEventsIncreaseThreshold != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PubEventsIncreaseThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimeLineResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeLineResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeLineResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x30
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x28
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.TimeLineEvents) > 0 {
		for iNdEx := len(m.TimeLineEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeLineEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TimeLineTitle) > 0 {
		i -= len(m.TimeLineTitle)
		copy(dAtA[i:], m.TimeLineTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TimeLineTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.TimeLineId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TimeLineId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimeLineEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeLineEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeLineEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpLink) > 0 {
		i -= len(m.JumpLink)
		copy(dAtA[i:], m.JumpLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpLink)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TimeDesc) > 0 {
		i -= len(m.TimeDesc)
		copy(dAtA[i:], m.TimeDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TimeDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubLayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubLayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserAvatar) > 0 {
		i -= len(m.UserAvatar)
		copy(dAtA[i:], m.UserAvatar)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserAvatar)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ClosePubLayerEntry {
		i--
		if m.ClosePubLayerEntry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ButtonMeta != nil {
		{
			size, err := m.ButtonMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JumpLink) > 0 {
		i -= len(m.JumpLink)
		copy(dAtA[i:], m.JumpLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpLink)))
		i--
		dAtA[i] = 0x12
	}
	if m.ShowType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShowType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ButtonMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ButtonMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ButtonMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FunctionalCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionalCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionalCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.GameCard != nil {
		{
			size, err := m.GameCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TrafficCard != nil {
		{
			size, err := m.TrafficCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Capsules) > 0 {
		for iNdEx := len(m.Capsules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Capsules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameLink) > 0 {
		i -= len(m.GameLink)
		copy(dAtA[i:], m.GameLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameLink)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GameTags) > 0 {
		i -= len(m.GameTags)
		copy(dAtA[i:], m.GameTags)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameTags)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GameName) > 0 {
		i -= len(m.GameName)
		copy(dAtA[i:], m.GameName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameIcon) > 0 {
		i -= len(m.GameIcon)
		copy(dAtA[i:], m.GameIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameIcon)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicCapsule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicCapsule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicCapsule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrafficCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrafficCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpTitle) > 0 {
		i -= len(m.JumpTitle)
		copy(dAtA[i:], m.JumpTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpTitle)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CardDesc) > 0 {
		i -= len(m.CardDesc)
		copy(dAtA[i:], m.CardDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardDesc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BenefitPoint) > 0 {
		i -= len(m.BenefitPoint)
		copy(dAtA[i:], m.BenefitPoint)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BenefitPoint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BasePic) > 0 {
		i -= len(m.BasePic)
		copy(dAtA[i:], m.BasePic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BasePic)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetailsTopInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetailsTopInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetailsTopInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x6a
	}
	if m.TopicSet != nil {
		{
			size, err := m.TopicSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.MissionText) > 0 {
		i -= len(m.MissionText)
		copy(dAtA[i:], m.MissionText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MissionText)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MissionUrl) > 0 {
		i -= len(m.MissionUrl)
		copy(dAtA[i:], m.MissionUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MissionUrl)))
		i--
		dAtA[i] = 0x52
	}
	if m.MissionPageShowType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MissionPageShowType))
		i--
		dAtA[i] = 0x48
	}
	if m.WordColor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WordColor))
		i--
		dAtA[i] = 0x40
	}
	if len(m.HeadImgBackcolor) > 0 {
		i -= len(m.HeadImgBackcolor)
		copy(dAtA[i:], m.HeadImgBackcolor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HeadImgBackcolor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HeadImgUrl) > 0 {
		i -= len(m.HeadImgUrl)
		copy(dAtA[i:], m.HeadImgUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HeadImgUrl)))
		i--
		dAtA[i] = 0x32
	}
	if m.OperationContent != nil {
		{
			size, err := m.OperationContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.HasCreateJurisdiction {
		i--
		if m.HasCreateJurisdiction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.StatsDesc) > 0 {
		i -= len(m.StatsDesc)
		copy(dAtA[i:], m.StatsDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StatsDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TopicInfo != nil {
		{
			size, err := m.TopicInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopicSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SetName) > 0 {
		i -= len(m.SetName)
		copy(dAtA[i:], m.SetName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SetName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SetId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperationContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.OperationCard != nil {
		{
			size, err := m.OperationCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperationCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Card != nil {
		{
			size := m.Card.Size()
			i -= size
			if _, err := m.Card.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperationCard_LargeCoverInline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationCard_LargeCoverInline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LargeCoverInline != nil {
		{
			size, err := m.LargeCoverInline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *LargeCoverInline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LargeCoverInline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LargeCoverInline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RelationData != nil {
		{
			size, err := m.RelationData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DurationText) > 0 {
		i -= len(m.DurationText)
		copy(dAtA[i:], m.DurationText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DurationText)))
		i--
		dAtA[i] = 0x72
	}
	if m.CanPlay != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x68
	}
	if m.DisableDanmu {
		i--
		if m.DisableDanmu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.HideDanmuSwitch {
		i--
		if m.HideDanmuSwitch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.CoverLeftDesc) > 0 {
		i -= len(m.CoverLeftDesc)
		copy(dAtA[i:], m.CoverLeftDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftDesc)))
		i--
		dAtA[i] = 0x52
	}
	if m.TopicThreePoint != nil {
		{
			size, err := m.TopicThreePoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.InlineProgressBar != nil {
		{
			size, err := m.InlineProgressBar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExtraUri) > 0 {
		i -= len(m.ExtraUri)
		copy(dAtA[i:], m.ExtraUri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExtraUri)))
		i--
		dAtA[i] = 0x3a
	}
	if m.RightTopLiveBadge != nil {
		{
			size, err := m.RightTopLiveBadge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LikeCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x28
	}
	if m.IsLike {
		i--
		if m.IsLike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsFollow {
		i--
		if m.IsFollow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsCoin {
		i--
		if m.IsCoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsFav {
		i--
		if m.IsFav {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicThreePoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicThreePoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicThreePoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DynThreePointItems) > 0 {
		for iNdEx := len(m.DynThreePointItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DynThreePointItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ThreePointItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreePointItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreePointItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InlineProgressBar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineProgressBar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineProgressBar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IconStopHash) > 0 {
		i -= len(m.IconStopHash)
		copy(dAtA[i:], m.IconStopHash)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconStopHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IconStop) > 0 {
		i -= len(m.IconStop)
		copy(dAtA[i:], m.IconStop)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconStop)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IconDragHash) > 0 {
		i -= len(m.IconDragHash)
		copy(dAtA[i:], m.IconDragHash)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconDragHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IconDrag) > 0 {
		i -= len(m.IconDrag)
		copy(dAtA[i:], m.IconDrag)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconDrag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RightTopLiveBadge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RightTopLiveBadge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RightTopLiveBadge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LiveStatsDesc) > 0 {
		i -= len(m.LiveStatsDesc)
		copy(dAtA[i:], m.LiveStatsDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LiveStatsDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InLive != nil {
		{
			size, err := m.InLive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LiveStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiveBadgeResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveBadgeResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveBadgeResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FontColor) > 0 {
		i -= len(m.FontColor)
		copy(dAtA[i:], m.FontColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FontColor)))
		i--
		dAtA[i] = 0x42
	}
	if m.AlphaNight != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AlphaNight))
		i--
		dAtA[i] = 0x38
	}
	if m.AlphaLight != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AlphaLight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BackgroundColorNight) > 0 {
		i -= len(m.BackgroundColorNight)
		copy(dAtA[i:], m.BackgroundColorNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackgroundColorNight)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BackgroundColorLight) > 0 {
		i -= len(m.BackgroundColorLight)
		copy(dAtA[i:], m.BackgroundColorLight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackgroundColorLight)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AnimationUrlHash) > 0 {
		i -= len(m.AnimationUrlHash)
		copy(dAtA[i:], m.AnimationUrlHash)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AnimationUrlHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AnimationUrl) > 0 {
		i -= len(m.AnimationUrl)
		copy(dAtA[i:], m.AnimationUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AnimationUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NameDesc) > 0 {
		i -= len(m.NameDesc)
		copy(dAtA[i:], m.NameDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NameDesc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicActivities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicActivities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicActivities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActListTitle) > 0 {
		i -= len(m.ActListTitle)
		copy(dAtA[i:], m.ActListTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActListTitle)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Activity) > 0 {
		for iNdEx := len(m.Activity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopicCardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicCardList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicCardList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoCardResultReply != nil {
		{
			size, err := m.NoCardResultReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TopicSortByConf != nil {
		{
			size, err := m.TopicSortByConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopicCardItems) > 0 {
		for iNdEx := len(m.TopicCardItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopicCardItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoCardResultReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoCardResultReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoCardResultReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowButton != nil {
		{
			size, err := m.ShowButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DefaultGuideText) > 0 {
		i -= len(m.DefaultGuideText)
		copy(dAtA[i:], m.DefaultGuideText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DefaultGuideText)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShowButton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowButton) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowButton) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShowText) > 0 {
		i -= len(m.ShowText)
		copy(dAtA[i:], m.ShowText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShowText)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopicCardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicCardItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicCardItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VideoSmallCardItem != nil {
		{
			size, err := m.VideoSmallCardItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FordCardItem != nil {
		{
			size, err := m.FordCardItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DynamicItem != nil {
		{
			size, err := m.DynamicItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoSmallCardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoSmallCardItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoSmallCardItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServerInfo) > 0 {
		i -= len(m.ServerInfo)
		copy(dAtA[i:], m.ServerInfo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ServerInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CardStatText_2) > 0 {
		i -= len(m.CardStatText_2)
		copy(dAtA[i:], m.CardStatText_2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardStatText_2)))
		i--
		dAtA[i] = 0x32
	}
	if m.CardStatIcon_2 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardStatIcon_2))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CardStatText_1) > 0 {
		i -= len(m.CardStatText_1)
		copy(dAtA[i:], m.CardStatText_1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardStatText_1)))
		i--
		dAtA[i] = 0x22
	}
	if m.CardStatIcon_1 != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardStatIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftBadgeText) > 0 {
		i -= len(m.CoverLeftBadgeText)
		copy(dAtA[i:], m.CoverLeftBadgeText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoverLeftBadgeText)))
		i--
		dAtA[i] = 0x12
	}
	if m.VideoCardBase != nil {
		{
			size, err := m.VideoCardBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoCardBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoCardBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoCardBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.JumpLink) > 0 {
		i -= len(m.JumpLink)
		copy(dAtA[i:], m.JumpLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpLink)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Play != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Play))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UpName) > 0 {
		i -= len(m.UpName)
		copy(dAtA[i:], m.UpName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FoldCardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoldCardItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FoldCardItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FoldDesc) > 0 {
		i -= len(m.FoldDesc)
		copy(dAtA[i:], m.FoldDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FoldDesc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CardShowDesc) > 0 {
		i -= len(m.CardShowDesc)
		copy(dAtA[i:], m.CardShowDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardShowDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FoldCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FoldCount))
		i--
		dAtA[i] = 0x10
	}
	if m.IsShowFold != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsShowFold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicDetailsFoldReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDetailsFoldReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicDetailsFoldReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FromSortBy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FromSortBy))
		i--
		dAtA[i] = 0x30
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LocalTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LocalTime))
		i--
		dAtA[i] = 0x20
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicDetailsFoldReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicDetailsFoldReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicDetailsFoldReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FoldCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FoldCount))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicCardList != nil {
		{
			size, err := m.TopicCardList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FixedTopicIcon) > 0 {
		i -= len(m.FixedTopicIcon)
		copy(dAtA[i:], m.FixedTopicIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FixedTopicIcon)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.StatsDesc) > 0 {
		i -= len(m.StatsDesc)
		copy(dAtA[i:], m.StatsDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StatsDesc)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.IsLike {
		i--
		if m.IsLike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.ShareUrl) > 0 {
		i -= len(m.ShareUrl)
		copy(dAtA[i:], m.ShareUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Like != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Share != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Share))
		i--
		dAtA[i] = 0x78
	}
	if len(m.SharePic) > 0 {
		i -= len(m.SharePic)
		copy(dAtA[i:], m.SharePic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SharePic)))
		i--
		dAtA[i] = 0x72
	}
	if m.CreateSource != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreateSource))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x62
	}
	if m.IsFav {
		i--
		if m.IsFav {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Backcolor) > 0 {
		i -= len(m.Backcolor)
		copy(dAtA[i:], m.Backcolor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Backcolor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.Dynamics != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Dynamics))
		i--
		dAtA[i] = 0x38
	}
	if m.Fav != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fav))
		i--
		dAtA[i] = 0x30
	}
	if m.Discuss != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Discuss))
		i--
		dAtA[i] = 0x28
	}
	if m.View != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x20
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ActivityName) > 0 {
		i -= len(m.ActivityName)
		copy(dAtA[i:], m.ActivityName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActivityName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicSortByConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicSortByConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicSortByConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowSortBy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShowSortBy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AllSortBy) > 0 {
		for iNdEx := len(m.AllSortBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllSortBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DefaultSortBy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DefaultSortBy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SortContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SortName) > 0 {
		i -= len(m.SortName)
		copy(dAtA[i:], m.SortName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SortName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SortBy != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SortBy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OnlineText) > 0 {
		i -= len(m.OnlineText)
		copy(dAtA[i:], m.OnlineText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OnlineText)))
		i--
		dAtA[i] = 0x12
	}
	if m.OnlineNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OnlineNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicTopCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicTopCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTopCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x50
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x48
	}
	if m.CardItem != nil {
		{
			size := m.CardItem.Size()
			i -= size
			if _, err := m.CardItem.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicTopCard_Capsules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTopCard_Capsules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Capsules != nil {
		{
			size, err := m.Capsules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TopicTopCard_TrafficCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTopCard_TrafficCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TrafficCard != nil {
		{
			size, err := m.TrafficCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TopicTopCard_GameCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTopCard_GameCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GameCard != nil {
		{
			size, err := m.GameCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TopicTopCard_TimeLineResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTopCard_TimeLineResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimeLineResource != nil {
		{
			size, err := m.TimeLineResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TopicTopCard_LargeCoverInline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTopCard_LargeCoverInline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LargeCoverInline != nil {
		{
			size, err := m.LargeCoverInline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *TopicTopCard_ReservationCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTopCard_ReservationCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReservationCard != nil {
		{
			size, err := m.ReservationCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *TopicTopCard_EsportCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicTopCard_EsportCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EsportCard != nil {
		{
			size, err := m.EsportCard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *TopicCapsuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicCapsuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicCapsuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Capsules) > 0 {
		for iNdEx := len(m.Capsules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Capsules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReserveRelationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveRelationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveRelationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x78
	}
	if len(m.NumberDescText) > 0 {
		i -= len(m.NumberDescText)
		copy(dAtA[i:], m.NumberDescText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NumberDescText)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.TimeDescText) > 0 {
		i -= len(m.TimeDescText)
		copy(dAtA[i:], m.TimeDescText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TimeDescText)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LivePlanStartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LivePlanStartTime))
		i--
		dAtA[i] = 0x60
	}
	if m.ReserveRecordCtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveRecordCtime))
		i--
		dAtA[i] = 0x58
	}
	if m.Upmid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Upmid))
		i--
		dAtA[i] = 0x50
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0x42
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.IsFollow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFollow))
		i--
		dAtA[i] = 0x30
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x28
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x20
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EsportInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EsportInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EsportInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatchButton != nil {
		{
			size, err := m.MatchButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MatchTime != nil {
		{
			size, err := m.MatchTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.MatchLabel != nil {
		{
			size, err := m.MatchLabel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Away != nil {
		{
			size, err := m.Away.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Home != nil {
		{
			size, err := m.Home.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.MatchStage) > 0 {
		i -= len(m.MatchStage)
		copy(dAtA[i:], m.MatchStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MatchStage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MatchTeamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchTeamInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchTeamInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MatchCardDisplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchCardDisplay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchCardDisplay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.Texts != nil {
		{
			size, err := m.Texts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.LiveLink) > 0 {
		i -= len(m.LiveLink)
		copy(dAtA[i:], m.LiveLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LiveLink)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Texts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Texts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Texts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UnbookingText) > 0 {
		i -= len(m.UnbookingText)
		copy(dAtA[i:], m.UnbookingText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UnbookingText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BookingText) > 0 {
		i -= len(m.BookingText)
		copy(dAtA[i:], m.BookingText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BookingText)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopicReserveButtonClickReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicReserveButtonClickReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicReserveButtonClickReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurBtnStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurBtnStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.ReserveTotal != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveTotal))
		i--
		dAtA[i] = 0x18
	}
	if m.ReserveId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveId))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicReserveButtonClickReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicReserveButtonClickReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicReserveButtonClickReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ReserveCalendarInfo != nil {
		{
			size, err := m.ReserveCalendarInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Toast) > 0 {
		i -= len(m.Toast)
		copy(dAtA[i:], m.Toast)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Toast)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ActivityUrl) > 0 {
		i -= len(m.ActivityUrl)
		copy(dAtA[i:], m.ActivityUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActivityUrl)))
		i--
		dAtA[i] = 0x32
	}
	if m.HasActivity {
		i--
		if m.HasActivity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.DescUpdate) > 0 {
		i -= len(m.DescUpdate)
		copy(dAtA[i:], m.DescUpdate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DescUpdate)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReserveUpdate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReserveUpdate))
		i--
		dAtA[i] = 0x18
	}
	if m.BtnMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BtnMode))
		i--
		dAtA[i] = 0x10
	}
	if m.FinalBtnStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FinalBtnStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReserveCalendarInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveCalendarInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveCalendarInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BusinessId) > 0 {
		i -= len(m.BusinessId)
		copy(dAtA[i:], m.BusinessId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BusinessId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTs != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTs))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTs != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TopicMergedResourceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovApi(uint64(m.TopicId))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	if m.MergeType != 0 {
		n += 1 + sovApi(uint64(m.MergeType))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LocalTime != 0 {
		n += 1 + sovApi(uint64(m.LocalTime))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FromSortBy != 0 {
		n += 1 + sovApi(uint64(m.FromSortBy))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicMergedResourceReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicCardList != nil {
		l = m.TopicCardList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicSetDetailsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetId != 0 {
		n += 1 + sovApi(uint64(m.SetId))
	}
	if m.SortBy != 0 {
		n += 1 + sovApi(uint64(m.SortBy))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicSetHeadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicSet != nil {
		l = m.TopicSet.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TopicCntText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MissionUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MissionText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsFav {
		n += 2
	}
	if m.IsFirstTime {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicSetDetailsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicSetHeadInfo != nil {
		l = m.TopicSetHeadInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.TopicInfo) > 0 {
		for _, e := range m.TopicInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SortCfg != nil {
		l = m.SortCfg.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicSetSortCfg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSortBy != 0 {
		n += 1 + sovApi(uint64(m.DefaultSortBy))
	}
	if len(m.AllSortBy) > 0 {
		for _, e := range m.AllSortBy {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDetailsAllReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovApi(uint64(m.TopicId))
	}
	if m.SortBy != 0 {
		n += 1 + sovApi(uint64(m.SortBy))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.LocalTime != 0 {
		n += 1 + sovApi(uint64(m.LocalTime))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NeedRefresh != 0 {
		n += 1 + sovApi(uint64(m.NeedRefresh))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TopicDetailsExtMode != 0 {
		n += 1 + sovApi(uint64(m.TopicDetailsExtMode))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDetailsAllReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetailsTopInfo != nil {
		l = m.DetailsTopInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TopicActivities != nil {
		l = m.TopicActivities.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TopicCardList != nil {
		l = m.TopicCardList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FunctionalCard != nil {
		l = m.FunctionalCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PubLayer != nil {
		l = m.PubLayer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TimeLineResource != nil {
		l = m.TimeLineResource.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TopicServerConfig != nil {
		l = m.TopicServerConfig.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TopicOnline != nil {
		l = m.TopicOnline.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.TopicTopCards) > 0 {
		for _, e := range m.TopicTopCards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicServerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubEventsIncreaseThreshold != 0 {
		n += 1 + sovApi(uint64(m.PubEventsIncreaseThreshold))
	}
	if m.PubEventsHiddenTimeoutThreshold != 0 {
		n += 1 + sovApi(uint64(m.PubEventsHiddenTimeoutThreshold))
	}
	if m.VertOnlineRefreshTime != 0 {
		n += 1 + sovApi(uint64(m.VertOnlineRefreshTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimeLineResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeLineId != 0 {
		n += 1 + sovApi(uint64(m.TimeLineId))
	}
	l = len(m.TimeLineTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.TimeLineEvents) > 0 {
		for _, e := range m.TimeLineEvents {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimeLineEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovApi(uint64(m.EventId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TimeDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PubLayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShowType != 0 {
		n += 1 + sovApi(uint64(m.ShowType))
	}
	l = len(m.JumpLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ButtonMeta != nil {
		l = m.ButtonMeta.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ClosePubLayerEntry {
		n += 2
	}
	l = len(m.UserAvatar)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ButtonMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FunctionalCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Capsules) > 0 {
		for _, e := range m.Capsules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TrafficCard != nil {
		l = m.TrafficCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameCard != nil {
		l = m.GameCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	l = len(m.GameIcon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameTags)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GameLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicCapsule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrafficCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BasePic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BenefitPoint)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CardDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DetailsTopInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicInfo != nil {
		l = m.TopicInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.StatsDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasCreateJurisdiction {
		n += 2
	}
	if m.OperationContent != nil {
		l = m.OperationContent.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HeadImgUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HeadImgBackcolor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.WordColor != 0 {
		n += 1 + sovApi(uint64(m.WordColor))
	}
	if m.MissionPageShowType != 0 {
		n += 1 + sovApi(uint64(m.MissionPageShowType))
	}
	l = len(m.MissionUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MissionText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TopicSet != nil {
		l = m.TopicSet.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetId != 0 {
		n += 1 + sovApi(uint64(m.SetId))
	}
	l = len(m.SetName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperationCard != nil {
		l = m.OperationCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Card != nil {
		n += m.Card.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationCard_LargeCoverInline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LargeCoverInline != nil {
		l = m.LargeCoverInline.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *LargeCoverInline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovApi(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovApi(uint64(m.CoverLeftIcon_2))
	}
	if m.RightTopLiveBadge != nil {
		l = m.RightTopLiveBadge.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExtraUri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.InlineProgressBar != nil {
		l = m.InlineProgressBar.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TopicThreePoint != nil {
		l = m.TopicThreePoint.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HideDanmuSwitch {
		n += 2
	}
	if m.DisableDanmu {
		n += 2
	}
	if m.CanPlay != 0 {
		n += 1 + sovApi(uint64(m.CanPlay))
	}
	l = len(m.DurationText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RelationData != nil {
		l = m.RelationData.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsFav {
		n += 2
	}
	if m.IsCoin {
		n += 2
	}
	if m.IsFollow {
		n += 2
	}
	if m.IsLike {
		n += 2
	}
	if m.LikeCount != 0 {
		n += 1 + sovApi(uint64(m.LikeCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicThreePoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DynThreePointItems) > 0 {
		for _, e := range m.DynThreePointItems {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreePointItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InlineProgressBar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IconDrag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconDragHash)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconStop)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconStopHash)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RightTopLiveBadge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiveStatus != 0 {
		n += 1 + sovApi(uint64(m.LiveStatus))
	}
	if m.InLive != nil {
		l = m.InLive.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LiveStatsDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LiveBadgeResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AnimationUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AnimationUrlHash)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackgroundColorLight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackgroundColorNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AlphaLight != 0 {
		n += 1 + sovApi(uint64(m.AlphaLight))
	}
	if m.AlphaNight != 0 {
		n += 1 + sovApi(uint64(m.AlphaNight))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NameDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicActivities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Activity) > 0 {
		for _, e := range m.Activity {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.ActListTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicCardList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicCardItems) > 0 {
		for _, e := range m.TopicCardItems {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasMore {
		n += 2
	}
	if m.TopicSortByConf != nil {
		l = m.TopicSortByConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NoCardResultReply != nil {
		l = m.NoCardResultReply.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoCardResultReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefaultGuideText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShowButton != nil {
		l = m.ShowButton.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShowButton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShowText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicCardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.DynamicItem != nil {
		l = m.DynamicItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FordCardItem != nil {
		l = m.FordCardItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VideoSmallCardItem != nil {
		l = m.VideoSmallCardItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoSmallCardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VideoCardBase != nil {
		l = m.VideoCardBase.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoverLeftBadgeText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CardStatIcon_1 != 0 {
		n += 1 + sovApi(uint64(m.CardStatIcon_1))
	}
	l = len(m.CardStatText_1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CardStatIcon_2 != 0 {
		n += 1 + sovApi(uint64(m.CardStatIcon_2))
	}
	l = len(m.CardStatText_2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ServerInfo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoCardBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UpName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Play != 0 {
		n += 1 + sovApi(uint64(m.Play))
	}
	l = len(m.JumpLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FoldCardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsShowFold != 0 {
		n += 1 + sovApi(uint64(m.IsShowFold))
	}
	if m.FoldCount != 0 {
		n += 1 + sovApi(uint64(m.FoldCount))
	}
	l = len(m.CardShowDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FoldDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDetailsFoldReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovApi(uint64(m.TopicId))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.LocalTime != 0 {
		n += 1 + sovApi(uint64(m.LocalTime))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FromSortBy != 0 {
		n += 1 + sovApi(uint64(m.FromSortBy))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicDetailsFoldReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicCardList != nil {
		l = m.TopicCardList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FoldCount != 0 {
		n += 1 + sovApi(uint64(m.FoldCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.View != 0 {
		n += 1 + sovApi(uint64(m.View))
	}
	if m.Discuss != 0 {
		n += 1 + sovApi(uint64(m.Discuss))
	}
	if m.Fav != 0 {
		n += 1 + sovApi(uint64(m.Fav))
	}
	if m.Dynamics != 0 {
		n += 1 + sovApi(uint64(m.Dynamics))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Backcolor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsFav {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreateSource != 0 {
		n += 1 + sovApi(uint64(m.CreateSource))
	}
	l = len(m.SharePic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Share != 0 {
		n += 1 + sovApi(uint64(m.Share))
	}
	if m.Like != 0 {
		n += 2 + sovApi(uint64(m.Like))
	}
	l = len(m.ShareUrl)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.IsLike {
		n += 3
	}
	if m.Type != 0 {
		n += 2 + sovApi(uint64(m.Type))
	}
	l = len(m.StatsDesc)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.FixedTopicIcon)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovApi(uint64(m.ActivityId))
	}
	l = len(m.ActivityName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicSortByConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultSortBy != 0 {
		n += 1 + sovApi(uint64(m.DefaultSortBy))
	}
	if len(m.AllSortBy) > 0 {
		for _, e := range m.AllSortBy {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.ShowSortBy != 0 {
		n += 1 + sovApi(uint64(m.ShowSortBy))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SortContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SortBy != 0 {
		n += 1 + sovApi(uint64(m.SortBy))
	}
	l = len(m.SortName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnlineNum != 0 {
		n += 1 + sovApi(uint64(m.OnlineNum))
	}
	l = len(m.OnlineText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTopCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.CardItem != nil {
		n += m.CardItem.Size()
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicTopCard_Capsules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Capsules != nil {
		l = m.Capsules.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopicTopCard_TrafficCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrafficCard != nil {
		l = m.TrafficCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopicTopCard_GameCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameCard != nil {
		l = m.GameCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopicTopCard_TimeLineResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeLineResource != nil {
		l = m.TimeLineResource.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopicTopCard_LargeCoverInline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LargeCoverInline != nil {
		l = m.LargeCoverInline.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopicTopCard_ReservationCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservationCard != nil {
		l = m.ReservationCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopicTopCard_EsportCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EsportCard != nil {
		l = m.EsportCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopicCapsuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Capsules) > 0 {
		for _, e := range m.Capsules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveRelationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.IsFollow != 0 {
		n += 1 + sovApi(uint64(m.IsFollow))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Upmid != 0 {
		n += 1 + sovApi(uint64(m.Upmid))
	}
	if m.ReserveRecordCtime != 0 {
		n += 1 + sovApi(uint64(m.ReserveRecordCtime))
	}
	if m.LivePlanStartTime != 0 {
		n += 1 + sovApi(uint64(m.LivePlanStartTime))
	}
	l = len(m.TimeDescText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NumberDescText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 2 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EsportInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.MatchStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Home != nil {
		l = m.Home.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Away != nil {
		l = m.Away.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MatchLabel != nil {
		l = m.MatchLabel.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MatchTime != nil {
		l = m.MatchTime.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MatchButton != nil {
		l = m.MatchButton.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchTeamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchCardDisplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LiveLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Texts != nil {
		l = m.Texts.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Texts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BookingText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UnbookingText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicReserveButtonClickReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.ReserveId != 0 {
		n += 1 + sovApi(uint64(m.ReserveId))
	}
	if m.ReserveTotal != 0 {
		n += 1 + sovApi(uint64(m.ReserveTotal))
	}
	if m.CurBtnStatus != 0 {
		n += 1 + sovApi(uint64(m.CurBtnStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopicReserveButtonClickReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalBtnStatus != 0 {
		n += 1 + sovApi(uint64(m.FinalBtnStatus))
	}
	if m.BtnMode != 0 {
		n += 1 + sovApi(uint64(m.BtnMode))
	}
	if m.ReserveUpdate != 0 {
		n += 1 + sovApi(uint64(m.ReserveUpdate))
	}
	l = len(m.DescUpdate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasActivity {
		n += 2
	}
	l = len(m.ActivityUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Toast)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReserveCalendarInfo != nil {
		l = m.ReserveCalendarInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReserveCalendarInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovApi(uint64(m.StartTs))
	}
	if m.EndTs != 0 {
		n += 1 + sovApi(uint64(m.EndTs))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BusinessId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TopicMergedResourceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMergedResourceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMergedResourceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeType", wireType)
			}
			m.MergeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MergeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTime", wireType)
			}
			m.LocalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSortBy", wireType)
			}
			m.FromSortBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromSortBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicMergedResourceReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicMergedResourceReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicMergedResourceReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicCardList == nil {
				m.TopicCardList = &TopicCardList{}
			}
			if err := m.TopicCardList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicSetDetailsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicSetDetailsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicSetDetailsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			m.SortBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicSetHeadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicSetHeadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicSetHeadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicSet == nil {
				m.TopicSet = &TopicSet{}
			}
			if err := m.TopicSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCntText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicCntText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFav", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFav = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirstTime = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicSetDetailsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicSetDetailsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicSetDetailsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicSetHeadInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicSetHeadInfo == nil {
				m.TopicSetHeadInfo = &TopicSetHeadInfo{}
			}
			if err := m.TopicSetHeadInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicInfo = append(m.TopicInfo, &TopicInfo{})
			if err := m.TopicInfo[len(m.TopicInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SortCfg == nil {
				m.SortCfg = &TopicSetSortCfg{}
			}
			if err := m.SortCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicSetSortCfg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicSetSortCfg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicSetSortCfg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSortBy", wireType)
			}
			m.DefaultSortBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultSortBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSortBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllSortBy = append(m.AllSortBy, &SortContent{})
			if err := m.AllSortBy[len(m.AllSortBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDetailsAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDetailsAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDetailsAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			m.SortBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTime", wireType)
			}
			m.LocalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedRefresh", wireType)
			}
			m.NeedRefresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedRefresh |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicDetailsExtMode", wireType)
			}
			m.TopicDetailsExtMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicDetailsExtMode |= TopicDetailsExtMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDetailsAllReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDetailsAllReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDetailsAllReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailsTopInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DetailsTopInfo == nil {
				m.DetailsTopInfo = &DetailsTopInfo{}
			}
			if err := m.DetailsTopInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicActivities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicActivities == nil {
				m.TopicActivities = &TopicActivities{}
			}
			if err := m.TopicActivities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicCardList == nil {
				m.TopicCardList = &TopicCardList{}
			}
			if err := m.TopicCardList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionalCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FunctionalCard == nil {
				m.FunctionalCard = &FunctionalCard{}
			}
			if err := m.FunctionalCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubLayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubLayer == nil {
				m.PubLayer = &PubLayer{}
			}
			if err := m.PubLayer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLineResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeLineResource == nil {
				m.TimeLineResource = &TimeLineResource{}
			}
			if err := m.TimeLineResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicServerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicServerConfig == nil {
				m.TopicServerConfig = &TopicServerConfig{}
			}
			if err := m.TopicServerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicOnline == nil {
				m.TopicOnline = &TopicOnline{}
			}
			if err := m.TopicOnline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicTopCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicTopCards = append(m.TopicTopCards, &TopicTopCard{})
			if err := m.TopicTopCards[len(m.TopicTopCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicServerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicServerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicServerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubEventsIncreaseThreshold", wireType)
			}
			m.PubEventsIncreaseThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubEventsIncreaseThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubEventsHiddenTimeoutThreshold", wireType)
			}
			m.PubEventsHiddenTimeoutThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubEventsHiddenTimeoutThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertOnlineRefreshTime", wireType)
			}
			m.VertOnlineRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VertOnlineRefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeLineResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeLineResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeLineResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLineId", wireType)
			}
			m.TimeLineId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeLineId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLineTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeLineTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLineEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeLineEvents = append(m.TimeLineEvents, &TimeLineEvents{})
			if err := m.TimeLineEvents[len(m.TimeLineEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeLineEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeLineEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeLineEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowType", wireType)
			}
			m.ShowType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ButtonMeta == nil {
				m.ButtonMeta = &ButtonMeta{}
			}
			if err := m.ButtonMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosePubLayerEntry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClosePubLayerEntry = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAvatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAvatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ButtonMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ButtonMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ButtonMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FunctionalCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionalCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionalCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capsules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capsules = append(m.Capsules, &TopicCapsule{})
			if err := m.Capsules[len(m.Capsules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrafficCard == nil {
				m.TrafficCard = &TrafficCard{}
			}
			if err := m.TrafficCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameCard == nil {
				m.GameCard = &GameCard{}
			}
			if err := m.GameCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameTags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicCapsule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicCapsule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicCapsule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BenefitPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BenefitPoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetailsTopInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailsTopInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailsTopInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicInfo == nil {
				m.TopicInfo = &TopicInfo{}
			}
			if err := m.TopicInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatsDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasCreateJurisdiction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasCreateJurisdiction = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationContent == nil {
				m.OperationContent = &OperationContent{}
			}
			if err := m.OperationContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadImgBackcolor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadImgBackcolor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordColor", wireType)
			}
			m.WordColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WordColor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionPageShowType", wireType)
			}
			m.MissionPageShowType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionPageShowType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissionText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicSet == nil {
				m.TopicSet = &TopicSet{}
			}
			if err := m.TopicSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetId", wireType)
			}
			m.SetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperationCard == nil {
				m.OperationCard = &OperationCard{}
			}
			if err := m.OperationCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LargeCoverInline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LargeCoverInline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &OperationCard_LargeCoverInline{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LargeCoverInline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LargeCoverInline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LargeCoverInline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &proto1.Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightTopLiveBadge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightTopLiveBadge == nil {
				m.RightTopLiveBadge = &RightTopLiveBadge{}
			}
			if err := m.RightTopLiveBadge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineProgressBar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InlineProgressBar == nil {
				m.InlineProgressBar = &InlineProgressBar{}
			}
			if err := m.InlineProgressBar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicThreePoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicThreePoint == nil {
				m.TopicThreePoint = &TopicThreePoint{}
			}
			if err := m.TopicThreePoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideDanmuSwitch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideDanmuSwitch = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableDanmu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableDanmu = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DurationText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelationData == nil {
				m.RelationData = &RelationData{}
			}
			if err := m.RelationData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFav", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFav = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCoin = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollow = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLike = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicThreePoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicThreePoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicThreePoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynThreePointItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynThreePointItems = append(m.DynThreePointItems, &v2.ThreePointItem{})
			if err := m.DynThreePointItems[len(m.DynThreePointItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreePointItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreePointItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreePointItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineProgressBar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineProgressBar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineProgressBar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconDrag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconDrag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconDragHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconDragHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconStop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconStop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconStopHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconStopHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RightTopLiveBadge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RightTopLiveBadge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RightTopLiveBadge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InLive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InLive == nil {
				m.InLive = &LiveBadgeResource{}
			}
			if err := m.InLive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatsDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveStatsDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveBadgeResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveBadgeResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveBadgeResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnimationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimationUrlHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnimationUrlHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundColorLight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackgroundColorLight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackgroundColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaLight", wireType)
			}
			m.AlphaLight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlphaLight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaNight", wireType)
			}
			m.AlphaNight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AlphaNight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicActivities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicActivities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicActivities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = append(m.Activity, &TopicActivity{})
			if err := m.Activity[len(m.Activity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActListTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActListTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicCardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicCardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicCardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCardItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicCardItems = append(m.TopicCardItems, &TopicCardItem{})
			if err := m.TopicCardItems[len(m.TopicCardItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicSortByConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicSortByConf == nil {
				m.TopicSortByConf = &TopicSortByConf{}
			}
			if err := m.TopicSortByConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoCardResultReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoCardResultReply == nil {
				m.NoCardResultReply = &NoCardResultReply{}
			}
			if err := m.NoCardResultReply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoCardResultReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoCardResultReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoCardResultReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGuideText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGuideText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowButton == nil {
				m.ShowButton = &ShowButton{}
			}
			if err := m.ShowButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowButton) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowButton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowButton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicCardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicCardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicCardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TopicCardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicItem == nil {
				m.DynamicItem = &v2.DynamicItem{}
			}
			if err := m.DynamicItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FordCardItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FordCardItem == nil {
				m.FordCardItem = &FoldCardItem{}
			}
			if err := m.FordCardItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoSmallCardItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoSmallCardItem == nil {
				m.VideoSmallCardItem = &VideoSmallCardItem{}
			}
			if err := m.VideoSmallCardItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoSmallCardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoSmallCardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoSmallCardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCardBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoCardBase == nil {
				m.VideoCardBase = &VideoCardBase{}
			}
			if err := m.VideoCardBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftBadgeText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftBadgeText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardStatIcon_1", wireType)
			}
			m.CardStatIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardStatIcon_1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardStatText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardStatText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardStatIcon_2", wireType)
			}
			m.CardStatIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardStatIcon_2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardStatText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardStatText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoCardBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoCardBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoCardBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Play", wireType)
			}
			m.Play = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Play |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoldCardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoldCardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoldCardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShowFold", wireType)
			}
			m.IsShowFold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsShowFold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoldCount", wireType)
			}
			m.FoldCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoldCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardShowDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardShowDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoldDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FoldDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDetailsFoldReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDetailsFoldReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDetailsFoldReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTime", wireType)
			}
			m.LocalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSortBy", wireType)
			}
			m.FromSortBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromSortBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicDetailsFoldReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicDetailsFoldReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicDetailsFoldReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicCardList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopicCardList == nil {
				m.TopicCardList = &TopicCardList{}
			}
			if err := m.TopicCardList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoldCount", wireType)
			}
			m.FoldCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoldCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discuss", wireType)
			}
			m.Discuss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Discuss |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			m.Fav = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fav |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamics", wireType)
			}
			m.Dynamics = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dynamics |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backcolor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backcolor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFav", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFav = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateSource", wireType)
			}
			m.CreateSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateSource |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLike = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatsDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedTopicIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixedTopicIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicSortByConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicSortByConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicSortByConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSortBy", wireType)
			}
			m.DefaultSortBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultSortBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSortBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllSortBy = append(m.AllSortBy, &SortContent{})
			if err := m.AllSortBy[len(m.AllSortBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowSortBy", wireType)
			}
			m.ShowSortBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowSortBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			m.SortBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortBy |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineNum", wireType)
			}
			m.OnlineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlineText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicTopCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicTopCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicTopCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TopicTopCardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capsules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TopicCapsuleInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &TopicTopCard_Capsules{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrafficCard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &TopicTopCard_TrafficCard{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GameCard{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &TopicTopCard_GameCard{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLineResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimeLineResource{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &TopicTopCard_TimeLineResource{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LargeCoverInline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LargeCoverInline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &TopicTopCard_LargeCoverInline{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReserveRelationInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &TopicTopCard_ReservationCard{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsportCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EsportInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &TopicTopCard_EsportCard{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicCapsuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicCapsuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicCapsuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capsules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capsules = append(m.Capsules, &TopicCapsule{})
			if err := m.Capsules[len(m.Capsules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveRelationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveRelationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveRelationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			m.IsFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upmid", wireType)
			}
			m.Upmid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Upmid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveRecordCtime", wireType)
			}
			m.ReserveRecordCtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveRecordCtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePlanStartTime", wireType)
			}
			m.LivePlanStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LivePlanStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeDescText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeDescText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberDescText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumberDescText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EsportInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EsportInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EsportInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MatchInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Home == nil {
				m.Home = &MatchTeamInfo{}
			}
			if err := m.Home.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Away", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Away == nil {
				m.Away = &MatchTeamInfo{}
			}
			if err := m.Away.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchLabel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchLabel == nil {
				m.MatchLabel = &MatchCardDisplay{}
			}
			if err := m.MatchLabel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchTime == nil {
				m.MatchTime = &MatchCardDisplay{}
			}
			if err := m.MatchTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchButton == nil {
				m.MatchButton = &MatchCardDisplay{}
			}
			if err := m.MatchButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchTeamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchTeamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchTeamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchCardDisplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchCardDisplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchCardDisplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Texts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Texts == nil {
				m.Texts = &Texts{}
			}
			if err := m.Texts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Texts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Texts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Texts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookingText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookingText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbookingText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbookingText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicReserveButtonClickReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicReserveButtonClickReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicReserveButtonClickReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveId", wireType)
			}
			m.ReserveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveTotal", wireType)
			}
			m.ReserveTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurBtnStatus", wireType)
			}
			m.CurBtnStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurBtnStatus |= ReserveButtonStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicReserveButtonClickReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicReserveButtonClickReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicReserveButtonClickReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalBtnStatus", wireType)
			}
			m.FinalBtnStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalBtnStatus |= ReserveButtonStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnMode", wireType)
			}
			m.BtnMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtnMode |= ReserveButtonMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveUpdate", wireType)
			}
			m.ReserveUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReserveUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescUpdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescUpdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasActivity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasActivity = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Toast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Toast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveCalendarInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReserveCalendarInfo == nil {
				m.ReserveCalendarInfo = &ReserveCalendarInfo{}
			}
			if err := m.ReserveCalendarInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveCalendarInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveCalendarInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveCalendarInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTs", wireType)
			}
			m.EndTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
