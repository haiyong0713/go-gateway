// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ugctab.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UgcTabReq struct {
	// 分区
	Tid int64 `protobuf:"varint,1,opt,name=tid,proto3" json:"tid"`
	// tag
	Tag []int64 `protobuf:"varint,2,rep,packed,name=tag,proto3" json:"tag"`
	// up
	UpId []int64 `protobuf:"varint,3,rep,packed,name=up_id,json=upid,proto3" json:"upid"`
	// 稿件
	AvId int64 `protobuf:"varint,4,opt,name=av_id,json=avid,proto3" json:"avid"`
	// 平台
	Plat int32 `protobuf:"varint,5,opt,name=plat,proto3" json:"plat"`
	// 版本
	Build                int32    `protobuf:"varint,6,opt,name=build,proto3" json:"build"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UgcTabReq) Reset()         { *m = UgcTabReq{} }
func (m *UgcTabReq) String() string { return proto.CompactTextString(m) }
func (*UgcTabReq) ProtoMessage()    {}
func (*UgcTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417f7b27afa990b, []int{0}
}
func (m *UgcTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcTabReq.Merge(m, src)
}
func (m *UgcTabReq) XXX_Size() int {
	return m.Size()
}
func (m *UgcTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_UgcTabReq proto.InternalMessageInfo

func (m *UgcTabReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *UgcTabReq) GetTag() []int64 {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *UgcTabReq) GetUpId() []int64 {
	if m != nil {
		return m.UpId
	}
	return nil
}

func (m *UgcTabReq) GetAvId() int64 {
	if m != nil {
		return m.AvId
	}
	return 0
}

func (m *UgcTabReq) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *UgcTabReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

type UgcTabV2Reply struct {
	//不存在返回nil
	Item                 *UgcTabReply `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UgcTabV2Reply) Reset()         { *m = UgcTabV2Reply{} }
func (m *UgcTabV2Reply) String() string { return proto.CompactTextString(m) }
func (*UgcTabV2Reply) ProtoMessage()    {}
func (*UgcTabV2Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417f7b27afa990b, []int{1}
}
func (m *UgcTabV2Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcTabV2Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcTabV2Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcTabV2Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcTabV2Reply.Merge(m, src)
}
func (m *UgcTabV2Reply) XXX_Size() int {
	return m.Size()
}
func (m *UgcTabV2Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcTabV2Reply.DiscardUnknown(m)
}

var xxx_messageInfo_UgcTabV2Reply proto.InternalMessageInfo

func (m *UgcTabV2Reply) GetItem() *UgcTabReply {
	if m != nil {
		return m.Item
	}
	return nil
}

type UgcTabReply struct {
	// 主键id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// Tab样式,1-文字，2-图片
	TabType int32 `protobuf:"varint,2,opt,name=tab_type,proto3" json:"tab_type"`
	// Tab内容，当type为1时tab为文字，为2时为图片地址
	Tab string `protobuf:"bytes,3,opt,name=tab,proto3" json:"tab"`
	// LinkTab,1-H5链接，2-Native ID
	LinkType int32 `protobuf:"varint,4,opt,name=link_type,proto3" json:"link_type"`
	// Link内容,当link_type为1时为H5链接，为2时为Native ID
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link"`
	// 背景
	Bg string `protobuf:"bytes,6,opt,name=bg,json=background,proto3" json:"background"`
	// tab字体颜色选中状态
	Selected string `protobuf:"bytes,7,opt,name=selected,proto3" json:"selected"`
	// tab字体颜色
	Color                string   `protobuf:"bytes,8,opt,name=color,proto3" json:"color"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UgcTabReply) Reset()         { *m = UgcTabReply{} }
func (m *UgcTabReply) String() string { return proto.CompactTextString(m) }
func (*UgcTabReply) ProtoMessage()    {}
func (*UgcTabReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417f7b27afa990b, []int{2}
}
func (m *UgcTabReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcTabReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcTabReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcTabReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcTabReply.Merge(m, src)
}
func (m *UgcTabReply) XXX_Size() int {
	return m.Size()
}
func (m *UgcTabReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcTabReply.DiscardUnknown(m)
}

var xxx_messageInfo_UgcTabReply proto.InternalMessageInfo

func (m *UgcTabReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UgcTabReply) GetTabType() int32 {
	if m != nil {
		return m.TabType
	}
	return 0
}

func (m *UgcTabReply) GetTab() string {
	if m != nil {
		return m.Tab
	}
	return ""
}

func (m *UgcTabReply) GetLinkType() int32 {
	if m != nil {
		return m.LinkType
	}
	return 0
}

func (m *UgcTabReply) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *UgcTabReply) GetBg() string {
	if m != nil {
		return m.Bg
	}
	return ""
}

func (m *UgcTabReply) GetSelected() string {
	if m != nil {
		return m.Selected
	}
	return ""
}

func (m *UgcTabReply) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type UgcInfo struct {
	// 分区
	Tid int64 `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	// tag
	Tag []int64 `protobuf:"varint,2,rep,packed,name=tag,proto3" json:"tag,omitempty"`
	// up
	UpId                 []int64  `protobuf:"varint,3,rep,packed,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UgcInfo) Reset()         { *m = UgcInfo{} }
func (m *UgcInfo) String() string { return proto.CompactTextString(m) }
func (*UgcInfo) ProtoMessage()    {}
func (*UgcInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417f7b27afa990b, []int{3}
}
func (m *UgcInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcInfo.Merge(m, src)
}
func (m *UgcInfo) XXX_Size() int {
	return m.Size()
}
func (m *UgcInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UgcInfo proto.InternalMessageInfo

func (m *UgcInfo) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *UgcInfo) GetTag() []int64 {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *UgcInfo) GetUpId() []int64 {
	if m != nil {
		return m.UpId
	}
	return nil
}

type UgcTabBatchReq struct {
	// 稿件map
	Arcs map[int64]*UgcInfo `protobuf:"bytes,1,rep,name=arcs,proto3" json:"arcs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 平台
	Plat int32 `protobuf:"varint,2,opt,name=plat,proto3" json:"plat,omitempty"`
	// 版本
	Build                int32    `protobuf:"varint,3,opt,name=build,proto3" json:"build,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UgcTabBatchReq) Reset()         { *m = UgcTabBatchReq{} }
func (m *UgcTabBatchReq) String() string { return proto.CompactTextString(m) }
func (*UgcTabBatchReq) ProtoMessage()    {}
func (*UgcTabBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417f7b27afa990b, []int{4}
}
func (m *UgcTabBatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcTabBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcTabBatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcTabBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcTabBatchReq.Merge(m, src)
}
func (m *UgcTabBatchReq) XXX_Size() int {
	return m.Size()
}
func (m *UgcTabBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcTabBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_UgcTabBatchReq proto.InternalMessageInfo

func (m *UgcTabBatchReq) GetArcs() map[int64]*UgcInfo {
	if m != nil {
		return m.Arcs
	}
	return nil
}

func (m *UgcTabBatchReq) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *UgcTabBatchReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

type UgcTabBatchReply struct {
	// tab配制
	Tabs                 map[int64]*UgcTabReply `protobuf:"bytes,1,rep,name=tabs,proto3" json:"tabs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UgcTabBatchReply) Reset()         { *m = UgcTabBatchReply{} }
func (m *UgcTabBatchReply) String() string { return proto.CompactTextString(m) }
func (*UgcTabBatchReply) ProtoMessage()    {}
func (*UgcTabBatchReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5417f7b27afa990b, []int{5}
}
func (m *UgcTabBatchReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UgcTabBatchReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UgcTabBatchReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UgcTabBatchReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UgcTabBatchReply.Merge(m, src)
}
func (m *UgcTabBatchReply) XXX_Size() int {
	return m.Size()
}
func (m *UgcTabBatchReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UgcTabBatchReply.DiscardUnknown(m)
}

var xxx_messageInfo_UgcTabBatchReply proto.InternalMessageInfo

func (m *UgcTabBatchReply) GetTabs() map[int64]*UgcTabReply {
	if m != nil {
		return m.Tabs
	}
	return nil
}

func init() {
	proto.RegisterType((*UgcTabReq)(nil), "resource.service.v1.UgcTabReq")
	proto.RegisterType((*UgcTabV2Reply)(nil), "resource.service.v1.UgcTabV2Reply")
	proto.RegisterType((*UgcTabReply)(nil), "resource.service.v1.UgcTabReply")
	proto.RegisterType((*UgcInfo)(nil), "resource.service.v1.UgcInfo")
	proto.RegisterType((*UgcTabBatchReq)(nil), "resource.service.v1.UgcTabBatchReq")
	proto.RegisterMapType((map[int64]*UgcInfo)(nil), "resource.service.v1.UgcTabBatchReq.ArcsEntry")
	proto.RegisterType((*UgcTabBatchReply)(nil), "resource.service.v1.UgcTabBatchReply")
	proto.RegisterMapType((map[int64]*UgcTabReply)(nil), "resource.service.v1.UgcTabBatchReply.TabsEntry")
}

func init() { proto.RegisterFile("ugctab.proto", fileDescriptor_5417f7b27afa990b) }

var fileDescriptor_5417f7b27afa990b = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x6a, 0xdc, 0x30,
	0x10, 0x45, 0xb6, 0x37, 0x89, 0xb5, 0x49, 0x58, 0x94, 0x52, 0xdc, 0x90, 0xc6, 0x8b, 0x0f, 0x65,
	0xa1, 0xc4, 0x21, 0xdb, 0x52, 0x4a, 0x6f, 0xd9, 0x92, 0x43, 0xae, 0x22, 0x29, 0xb4, 0x97, 0x20,
	0xc9, 0x8a, 0x63, 0xd6, 0x59, 0xbb, 0x5e, 0xd9, 0xe0, 0x3f, 0xea, 0xb9, 0x1f, 0xd0, 0x73, 0x8f,
	0x3d, 0xf4, 0x6c, 0x4a, 0x8e, 0xfe, 0x8a, 0xa2, 0x51, 0xec, 0xec, 0x42, 0xda, 0x5c, 0xc6, 0x33,
	0xf3, 0x46, 0xe2, 0xcd, 0xd3, 0xc3, 0x78, 0xbb, 0x8c, 0x85, 0x62, 0x3c, 0xcc, 0x8b, 0x4c, 0x65,
	0x64, 0xaf, 0x90, 0xcb, 0xac, 0x2c, 0x84, 0x0c, 0x97, 0xb2, 0xa8, 0x12, 0x21, 0xc3, 0xea, 0x64,
	0xff, 0x28, 0x4e, 0xd4, 0x4d, 0xc9, 0x43, 0x91, 0xdd, 0x1e, 0xc7, 0x59, 0x9c, 0x1d, 0xc3, 0x2c,
	0x2f, 0xaf, 0xa1, 0x82, 0x02, 0x32, 0x73, 0x47, 0xf0, 0x03, 0x61, 0xf7, 0x32, 0x16, 0x17, 0x8c,
	0x53, 0xf9, 0x95, 0xbc, 0xc0, 0xb6, 0x4a, 0x22, 0x0f, 0x8d, 0xd1, 0xc4, 0x9e, 0x6d, 0xb6, 0x8d,
	0xaf, 0x4b, 0xaa, 0x03, 0x40, 0x2c, 0xf6, 0xac, 0xb1, 0xdd, 0x43, 0x2c, 0xa6, 0x3a, 0x90, 0x97,
	0x78, 0x50, 0xe6, 0x57, 0x49, 0xe4, 0xd9, 0x00, 0x6e, 0xb5, 0x8d, 0xef, 0x94, 0x79, 0x12, 0x51,
	0x88, 0x1a, 0x66, 0x95, 0x86, 0x1d, 0xb8, 0x16, 0x60, 0x56, 0x69, 0x58, 0x47, 0x72, 0x80, 0x9d,
	0x3c, 0x65, 0xca, 0x1b, 0x8c, 0xd1, 0x64, 0x60, 0x50, 0x5d, 0x53, 0x88, 0xc4, 0xc7, 0x03, 0x5e,
	0x26, 0x69, 0xe4, 0x6d, 0x00, 0xec, 0xb6, 0x8d, 0x6f, 0x1a, 0xd4, 0x7c, 0x82, 0x33, 0xbc, 0x63,
	0xf8, 0x7f, 0x9a, 0x52, 0x99, 0xa7, 0x35, 0x79, 0x8b, 0x9d, 0x44, 0xc9, 0x5b, 0x58, 0x62, 0x38,
	0x1d, 0x87, 0x8f, 0x88, 0x14, 0x76, 0x1b, 0xe7, 0x69, 0x4d, 0x61, 0x3a, 0xf8, 0x66, 0xe1, 0xe1,
	0x4a, 0x97, 0x3c, 0xc7, 0x56, 0x2f, 0xc4, 0x46, 0xdb, 0xf8, 0x56, 0x12, 0x51, 0x2b, 0x89, 0xc8,
	0x04, 0x6f, 0x29, 0xc6, 0xaf, 0x54, 0x9d, 0x4b, 0xcf, 0x02, 0x4a, 0xdb, 0x6d, 0xe3, 0xf7, 0x3d,
	0xda, 0x67, 0x46, 0x30, 0xee, 0xd9, 0x63, 0x34, 0x71, 0x3b, 0xc1, 0xb8, 0x16, 0x8c, 0x93, 0xd7,
	0xd8, 0x4d, 0x93, 0xc5, 0xdc, 0xdc, 0xe2, 0xc0, 0x2d, 0x3b, 0x6d, 0xe3, 0x3f, 0x34, 0xe9, 0x43,
	0xaa, 0xf5, 0xd1, 0x05, 0xe8, 0xe3, 0x1a, 0x7d, 0x74, 0x4d, 0x21, 0x92, 0x57, 0xd8, 0xe2, 0x31,
	0x88, 0xe3, 0xce, 0x76, 0xdb, 0xc6, 0xc7, 0x9c, 0x89, 0x79, 0x5c, 0x64, 0xe5, 0x22, 0xa2, 0x2b,
	0xb9, 0xe6, 0xbd, 0x94, 0xa9, 0x14, 0x4a, 0x46, 0xde, 0x26, 0x4c, 0x03, 0xef, 0xae, 0x47, 0xfb,
	0x4c, 0x2b, 0x2e, 0xb2, 0x34, 0x2b, 0xbc, 0x2d, 0x18, 0x03, 0xc5, 0xa1, 0x41, 0xcd, 0x27, 0x98,
	0xe1, 0xcd, 0xcb, 0x58, 0x9c, 0x2f, 0xae, 0x33, 0x32, 0x5a, 0xf1, 0x8b, 0xb1, 0xc9, 0x68, 0xc5,
	0x26, 0xc6, 0x1d, 0x7b, 0x6b, 0xee, 0xd0, 0x9e, 0x38, 0x8f, 0x82, 0xdf, 0x08, 0xef, 0x1a, 0xb9,
	0x67, 0x4c, 0x89, 0x1b, 0xed, 0xbd, 0x53, 0xec, 0xb0, 0x42, 0x2c, 0x3d, 0x34, 0xb6, 0x27, 0xc3,
	0xe9, 0xd1, 0x7f, 0xde, 0xad, 0x3b, 0x12, 0x9e, 0x16, 0x62, 0x79, 0xb6, 0x50, 0x45, 0x4d, 0xe1,
	0x28, 0x21, 0xf7, 0x56, 0x82, 0x87, 0xb9, 0x37, 0xd0, 0xb3, 0xce, 0x40, 0x36, 0x34, 0x4d, 0xb1,
	0x7f, 0x89, 0xdd, 0xfe, 0xb0, 0xe6, 0x3c, 0x97, 0x75, 0xb7, 0xc5, 0x5c, 0xd6, 0x64, 0x8a, 0x07,
	0x15, 0x4b, 0x4b, 0xf3, 0xc4, 0xc3, 0xe9, 0xc1, 0xbf, 0xc8, 0x68, 0x11, 0xa8, 0x19, 0xfd, 0x60,
	0xbd, 0x47, 0xc1, 0x77, 0x84, 0x47, 0x6b, 0x1c, 0xb5, 0x95, 0x3e, 0x62, 0x47, 0x31, 0xde, 0x2d,
	0x76, 0xfc, 0xf4, 0x62, 0x79, 0x5a, 0x87, 0x17, 0x8c, 0x77, 0xab, 0xe9, 0xc3, 0xfb, 0x9f, 0xb1,
	0xdb, 0xb7, 0x1e, 0x21, 0xfc, 0x6e, 0x9d, 0xf0, 0xd3, 0xae, 0x7f, 0x20, 0x3d, 0x1b, 0xfd, 0xbc,
	0x3b, 0x44, 0xbf, 0xee, 0x0e, 0xd1, 0x9f, 0xbb, 0x43, 0xf4, 0xc5, 0xaa, 0x4e, 0xf8, 0x06, 0xfc,
	0x1b, 0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x2c, 0x1a, 0x60, 0x6f, 0x04, 0x00, 0x00,
}

func (m *UgcTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcTabReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcTabReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Build != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x30
	}
	if m.Plat != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x28
	}
	if m.AvId != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.AvId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UpId) > 0 {
		dAtA2 := make([]byte, len(m.UpId)*10)
		var j1 int
		for _, num1 := range m.UpId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintUgctab(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		dAtA4 := make([]byte, len(m.Tag)*10)
		var j3 int
		for _, num1 := range m.Tag {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintUgctab(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.Tid != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UgcTabV2Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcTabV2Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcTabV2Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUgctab(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UgcTabReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcTabReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcTabReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintUgctab(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Selected) > 0 {
		i -= len(m.Selected)
		copy(dAtA[i:], m.Selected)
		i = encodeVarintUgctab(dAtA, i, uint64(len(m.Selected)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Bg) > 0 {
		i -= len(m.Bg)
		copy(dAtA[i:], m.Bg)
		i = encodeVarintUgctab(dAtA, i, uint64(len(m.Bg)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintUgctab(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LinkType != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.LinkType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Tab) > 0 {
		i -= len(m.Tab)
		copy(dAtA[i:], m.Tab)
		i = encodeVarintUgctab(dAtA, i, uint64(len(m.Tab)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TabType != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.TabType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UgcInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpId) > 0 {
		dAtA7 := make([]byte, len(m.UpId)*10)
		var j6 int
		for _, num1 := range m.UpId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintUgctab(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		dAtA9 := make([]byte, len(m.Tag)*10)
		var j8 int
		for _, num1 := range m.Tag {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintUgctab(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if m.Tid != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UgcTabBatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcTabBatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcTabBatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Build != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x18
	}
	if m.Plat != 0 {
		i = encodeVarintUgctab(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Arcs) > 0 {
		for k := range m.Arcs {
			v := m.Arcs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintUgctab(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintUgctab(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUgctab(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UgcTabBatchReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UgcTabBatchReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UgcTabBatchReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tabs) > 0 {
		for k := range m.Tabs {
			v := m.Tabs[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintUgctab(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintUgctab(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintUgctab(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUgctab(dAtA []byte, offset int, v uint64) int {
	offset -= sovUgctab(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UgcTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovUgctab(uint64(m.Tid))
	}
	if len(m.Tag) > 0 {
		l = 0
		for _, e := range m.Tag {
			l += sovUgctab(uint64(e))
		}
		n += 1 + sovUgctab(uint64(l)) + l
	}
	if len(m.UpId) > 0 {
		l = 0
		for _, e := range m.UpId {
			l += sovUgctab(uint64(e))
		}
		n += 1 + sovUgctab(uint64(l)) + l
	}
	if m.AvId != 0 {
		n += 1 + sovUgctab(uint64(m.AvId))
	}
	if m.Plat != 0 {
		n += 1 + sovUgctab(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovUgctab(uint64(m.Build))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UgcTabV2Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovUgctab(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UgcTabReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUgctab(uint64(m.Id))
	}
	if m.TabType != 0 {
		n += 1 + sovUgctab(uint64(m.TabType))
	}
	l = len(m.Tab)
	if l > 0 {
		n += 1 + l + sovUgctab(uint64(l))
	}
	if m.LinkType != 0 {
		n += 1 + sovUgctab(uint64(m.LinkType))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovUgctab(uint64(l))
	}
	l = len(m.Bg)
	if l > 0 {
		n += 1 + l + sovUgctab(uint64(l))
	}
	l = len(m.Selected)
	if l > 0 {
		n += 1 + l + sovUgctab(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovUgctab(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UgcInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovUgctab(uint64(m.Tid))
	}
	if len(m.Tag) > 0 {
		l = 0
		for _, e := range m.Tag {
			l += sovUgctab(uint64(e))
		}
		n += 1 + sovUgctab(uint64(l)) + l
	}
	if len(m.UpId) > 0 {
		l = 0
		for _, e := range m.UpId {
			l += sovUgctab(uint64(e))
		}
		n += 1 + sovUgctab(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UgcTabBatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arcs) > 0 {
		for k, v := range m.Arcs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUgctab(uint64(l))
			}
			mapEntrySize := 1 + sovUgctab(uint64(k)) + l
			n += mapEntrySize + 1 + sovUgctab(uint64(mapEntrySize))
		}
	}
	if m.Plat != 0 {
		n += 1 + sovUgctab(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovUgctab(uint64(m.Build))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UgcTabBatchReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tabs) > 0 {
		for k, v := range m.Tabs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUgctab(uint64(l))
			}
			mapEntrySize := 1 + sovUgctab(uint64(k)) + l
			n += mapEntrySize + 1 + sovUgctab(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUgctab(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUgctab(x uint64) (n int) {
	return sovUgctab(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UgcTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUgctab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tag = append(m.Tag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUgctab
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUgctab
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tag) == 0 {
					m.Tag = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUgctab
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tag = append(m.Tag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UpId = append(m.UpId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUgctab
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUgctab
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UpId) == 0 {
					m.UpId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUgctab
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UpId = append(m.UpId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UpId", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvId", wireType)
			}
			m.AvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUgctab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UgcTabV2Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUgctab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcTabV2Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcTabV2Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUgctab
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUgctab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &UgcTabReply{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUgctab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UgcTabReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUgctab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcTabReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcTabReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabType", wireType)
			}
			m.TabType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUgctab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUgctab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tab = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkType", wireType)
			}
			m.LinkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUgctab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUgctab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUgctab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUgctab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUgctab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUgctab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selected = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUgctab
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUgctab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUgctab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UgcInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUgctab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tag = append(m.Tag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUgctab
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUgctab
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tag) == 0 {
					m.Tag = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUgctab
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tag = append(m.Tag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UpId = append(m.UpId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUgctab
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUgctab
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UpId) == 0 {
					m.UpId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUgctab
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UpId = append(m.UpId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UpId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUgctab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UgcTabBatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUgctab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcTabBatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcTabBatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUgctab
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUgctab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arcs == nil {
				m.Arcs = make(map[int64]*UgcInfo)
			}
			var mapkey int64
			var mapvalue *UgcInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUgctab
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUgctab
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUgctab
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUgctab
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UgcInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUgctab(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUgctab
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Arcs[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUgctab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UgcTabBatchReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUgctab
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UgcTabBatchReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UgcTabBatchReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tabs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUgctab
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUgctab
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tabs == nil {
				m.Tabs = make(map[int64]*UgcTabReply)
			}
			var mapkey int64
			var mapvalue *UgcTabReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUgctab
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUgctab
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUgctab
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUgctab
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUgctab
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UgcTabReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUgctab(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUgctab
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tabs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUgctab(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUgctab
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUgctab(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUgctab
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUgctab
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUgctab
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUgctab
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUgctab
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUgctab        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUgctab          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUgctab = fmt.Errorf("proto: unexpected end of group")
)
