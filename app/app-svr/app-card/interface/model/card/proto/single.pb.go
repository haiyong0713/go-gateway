// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-card/interface/model/card/proto/single.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_gateway_app_app_svr_app_card_interface_model "go-gateway/app/app-svr/app-card/interface/model"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SmallCoverV5 struct {
	*Base            `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverGif         string                                               `protobuf:"bytes,2,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	Up               *Up                                                  `protobuf:"bytes,3,opt,name=up,proto3" json:"up,omitempty"`
	CoverRightText_1 string                                               `protobuf:"bytes,4,opt,name=cover_right_text_1,json=coverRightText1,proto3" json:"cover_right_text_1,omitempty"`
	RightDesc_1      string                                               `protobuf:"bytes,5,opt,name=right_desc_1,json=rightDesc1,proto3" json:"right_desc_1,omitempty"`
	RightDesc_2      string                                               `protobuf:"bytes,6,opt,name=right_desc_2,json=rightDesc2,proto3" json:"right_desc_2,omitempty"`
	RcmdReasonStyle  *ReasonStyle                                         `protobuf:"bytes,7,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	HotwordEntrance  *HotwordEntrance                                     `protobuf:"bytes,8,opt,name=hotword_entrance,json=hotwordEntrance,proto3" json:"hotword_entrance,omitempty"`
	CornerMarkStyle  *ReasonStyle                                         `protobuf:"bytes,9,opt,name=corner_mark_style,json=cornerMarkStyle,proto3" json:"corner_mark_style,omitempty"`
	RightIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,10,opt,name=right_icon_1,json=rightIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"right_icon_1,omitempty"`
	RightIcon_2      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,11,opt,name=right_icon_2,json=rightIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"right_icon_2,omitempty"`
	// 左上角角标
	LeftCornerMarkStyle              *ReasonStyle `protobuf:"bytes,12,opt,name=left_corner_mark_style,json=leftCornerMarkStyle,proto3" json:"left_corner_mark_style,omitempty"`
	CoverRightTextContentDescription string       `protobuf:"bytes,13,opt,name=cover_right_text_content_description,json=coverRightTextContentDescription,proto3" json:"cover_right_text_content_description,omitempty"`
	RightDesc_1ContentDescription    string       `protobuf:"bytes,14,opt,name=right_desc_1_content_description,json=rightDesc1ContentDescription,proto3" json:"right_desc_1_content_description,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}     `json:"-"`
	XXX_unrecognized                 []byte       `json:"-"`
	XXX_sizecache                    int32        `json:"-"`
}

func (m *SmallCoverV5) Reset()         { *m = SmallCoverV5{} }
func (m *SmallCoverV5) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV5) ProtoMessage()    {}
func (*SmallCoverV5) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{0}
}
func (m *SmallCoverV5) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV5) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV5.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV5) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV5.Merge(m, src)
}
func (m *SmallCoverV5) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV5) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV5.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV5 proto.InternalMessageInfo

func (m *SmallCoverV5) GetCoverGif() string {
	if m != nil {
		return m.CoverGif
	}
	return ""
}

func (m *SmallCoverV5) GetUp() *Up {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *SmallCoverV5) GetCoverRightText_1() string {
	if m != nil {
		return m.CoverRightText_1
	}
	return ""
}

func (m *SmallCoverV5) GetRightDesc_1() string {
	if m != nil {
		return m.RightDesc_1
	}
	return ""
}

func (m *SmallCoverV5) GetRightDesc_2() string {
	if m != nil {
		return m.RightDesc_2
	}
	return ""
}

func (m *SmallCoverV5) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

func (m *SmallCoverV5) GetHotwordEntrance() *HotwordEntrance {
	if m != nil {
		return m.HotwordEntrance
	}
	return nil
}

func (m *SmallCoverV5) GetCornerMarkStyle() *ReasonStyle {
	if m != nil {
		return m.CornerMarkStyle
	}
	return nil
}

func (m *SmallCoverV5) GetRightIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.RightIcon_1
	}
	return 0
}

func (m *SmallCoverV5) GetRightIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.RightIcon_2
	}
	return 0
}

func (m *SmallCoverV5) GetLeftCornerMarkStyle() *ReasonStyle {
	if m != nil {
		return m.LeftCornerMarkStyle
	}
	return nil
}

func (m *SmallCoverV5) GetCoverRightTextContentDescription() string {
	if m != nil {
		return m.CoverRightTextContentDescription
	}
	return ""
}

func (m *SmallCoverV5) GetRightDesc_1ContentDescription() string {
	if m != nil {
		return m.RightDesc_1ContentDescription
	}
	return ""
}

type SmallCoverV5Ad struct {
	*Base            `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverGif         string                                               `protobuf:"bytes,2,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	Up               *Up                                                  `protobuf:"bytes,3,opt,name=up,proto3" json:"up,omitempty"`
	CoverRightText_1 string                                               `protobuf:"bytes,4,opt,name=cover_right_text_1,json=coverRightText1,proto3" json:"cover_right_text_1,omitempty"`
	RightDesc_1      string                                               `protobuf:"bytes,5,opt,name=right_desc_1,json=rightDesc1,proto3" json:"right_desc_1,omitempty"`
	RightDesc_2      string                                               `protobuf:"bytes,6,opt,name=right_desc_2,json=rightDesc2,proto3" json:"right_desc_2,omitempty"`
	RcmdReasonStyle  *ReasonStyle                                         `protobuf:"bytes,7,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	HotwordEntrance  *HotwordEntrance                                     `protobuf:"bytes,8,opt,name=hotword_entrance,json=hotwordEntrance,proto3" json:"hotword_entrance,omitempty"`
	CornerMarkStyle  *ReasonStyle                                         `protobuf:"bytes,9,opt,name=corner_mark_style,json=cornerMarkStyle,proto3" json:"corner_mark_style,omitempty"`
	RightIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,10,opt,name=right_icon_1,json=rightIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"right_icon_1,omitempty"`
	RightIcon_2      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,11,opt,name=right_icon_2,json=rightIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"right_icon_2,omitempty"`
	// 左上角角标
	LeftCornerMarkStyle              *ReasonStyle `protobuf:"bytes,12,opt,name=left_corner_mark_style,json=leftCornerMarkStyle,proto3" json:"left_corner_mark_style,omitempty"`
	CoverRightTextContentDescription string       `protobuf:"bytes,13,opt,name=cover_right_text_content_description,json=coverRightTextContentDescription,proto3" json:"cover_right_text_content_description,omitempty"`
	RightDesc_1ContentDescription    string       `protobuf:"bytes,14,opt,name=right_desc_1_content_description,json=rightDesc1ContentDescription,proto3" json:"right_desc_1_content_description,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}     `json:"-"`
	XXX_unrecognized                 []byte       `json:"-"`
	XXX_sizecache                    int32        `json:"-"`
}

func (m *SmallCoverV5Ad) Reset()         { *m = SmallCoverV5Ad{} }
func (m *SmallCoverV5Ad) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV5Ad) ProtoMessage()    {}
func (*SmallCoverV5Ad) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{1}
}
func (m *SmallCoverV5Ad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV5Ad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV5Ad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV5Ad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV5Ad.Merge(m, src)
}
func (m *SmallCoverV5Ad) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV5Ad) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV5Ad.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV5Ad proto.InternalMessageInfo

func (m *SmallCoverV5Ad) GetCoverGif() string {
	if m != nil {
		return m.CoverGif
	}
	return ""
}

func (m *SmallCoverV5Ad) GetUp() *Up {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *SmallCoverV5Ad) GetCoverRightText_1() string {
	if m != nil {
		return m.CoverRightText_1
	}
	return ""
}

func (m *SmallCoverV5Ad) GetRightDesc_1() string {
	if m != nil {
		return m.RightDesc_1
	}
	return ""
}

func (m *SmallCoverV5Ad) GetRightDesc_2() string {
	if m != nil {
		return m.RightDesc_2
	}
	return ""
}

func (m *SmallCoverV5Ad) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

func (m *SmallCoverV5Ad) GetHotwordEntrance() *HotwordEntrance {
	if m != nil {
		return m.HotwordEntrance
	}
	return nil
}

func (m *SmallCoverV5Ad) GetCornerMarkStyle() *ReasonStyle {
	if m != nil {
		return m.CornerMarkStyle
	}
	return nil
}

func (m *SmallCoverV5Ad) GetRightIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.RightIcon_1
	}
	return 0
}

func (m *SmallCoverV5Ad) GetRightIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.RightIcon_2
	}
	return 0
}

func (m *SmallCoverV5Ad) GetLeftCornerMarkStyle() *ReasonStyle {
	if m != nil {
		return m.LeftCornerMarkStyle
	}
	return nil
}

func (m *SmallCoverV5Ad) GetCoverRightTextContentDescription() string {
	if m != nil {
		return m.CoverRightTextContentDescription
	}
	return ""
}

func (m *SmallCoverV5Ad) GetRightDesc_1ContentDescription() string {
	if m != nil {
		return m.RightDesc_1ContentDescription
	}
	return ""
}

type HotwordEntrance struct {
	HotwordId            int64    `protobuf:"varint,1,opt,name=hotword_id,json=hotwordId,proto3" json:"hotword_id,omitempty"`
	HotText              string   `protobuf:"bytes,2,opt,name=hot_text,json=hotText,proto3" json:"hot_text,omitempty"`
	H5Url                string   `protobuf:"bytes,3,opt,name=h5_url,json=h5Url,proto3" json:"h5_url,omitempty"`
	Icon                 string   `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotwordEntrance) Reset()         { *m = HotwordEntrance{} }
func (m *HotwordEntrance) String() string { return proto.CompactTextString(m) }
func (*HotwordEntrance) ProtoMessage()    {}
func (*HotwordEntrance) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{2}
}
func (m *HotwordEntrance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotwordEntrance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotwordEntrance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotwordEntrance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotwordEntrance.Merge(m, src)
}
func (m *HotwordEntrance) XXX_Size() int {
	return m.Size()
}
func (m *HotwordEntrance) XXX_DiscardUnknown() {
	xxx_messageInfo_HotwordEntrance.DiscardUnknown(m)
}

var xxx_messageInfo_HotwordEntrance proto.InternalMessageInfo

func (m *HotwordEntrance) GetHotwordId() int64 {
	if m != nil {
		return m.HotwordId
	}
	return 0
}

func (m *HotwordEntrance) GetHotText() string {
	if m != nil {
		return m.HotText
	}
	return ""
}

func (m *HotwordEntrance) GetH5Url() string {
	if m != nil {
		return m.H5Url
	}
	return ""
}

func (m *HotwordEntrance) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type LargeCoverV1 struct {
	*Base                 `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverGif              string                                               `protobuf:"bytes,2,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	Avatar                *Avatar                                              `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CoverLeftText_1       string                                               `protobuf:"bytes,4,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftText_2       string                                               `protobuf:"bytes,5,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftText_3       string                                               `protobuf:"bytes,6,opt,name=cover_left_text_3,json=coverLeftText3,proto3" json:"cover_left_text_3,omitempty"`
	CoverBadge            string                                               `protobuf:"bytes,7,opt,name=cover_badge,json=coverBadge,proto3" json:"cover_badge,omitempty"`
	TopRcmdReason         string                                               `protobuf:"bytes,8,opt,name=top_rcmd_reason,json=topRcmdReason,proto3" json:"top_rcmd_reason,omitempty"`
	BottomRcmdReason      string                                               `protobuf:"bytes,9,opt,name=bottom_rcmd_reason,json=bottomRcmdReason,proto3" json:"bottom_rcmd_reason,omitempty"`
	Desc                  string                                               `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`
	OfficialIcon          go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,11,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	CanPlay               int32                                                `protobuf:"varint,12,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	TopRcmdReasonStyle    *ReasonStyle                                         `protobuf:"bytes,13,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	BottomRcmdReasonStyle *ReasonStyle                                         `protobuf:"bytes,14,opt,name=bottom_rcmd_reason_style,json=bottomRcmdReasonStyle,proto3" json:"bottom_rcmd_reason_style,omitempty"`
	RcmdReasonStyleV2     *ReasonStyle                                         `protobuf:"bytes,15,opt,name=rcmd_reason_style_v2,json=rcmdReasonStyleV2,proto3" json:"rcmd_reason_style_v2,omitempty"`
	LeftCoverBadgeStyle   *ReasonStyle                                         `protobuf:"bytes,16,opt,name=left_cover_badge_style,json=leftCoverBadgeStyle,proto3" json:"left_cover_badge_style,omitempty"`
	RightCoverBadgeStyle  *ReasonStyle                                         `protobuf:"bytes,17,opt,name=right_cover_badge_style,json=rightCoverBadgeStyle,proto3" json:"right_cover_badge_style,omitempty"`
	CoverBadge_2          string                                               `protobuf:"bytes,18,opt,name=cover_badge_2,json=coverBadge2,proto3" json:"cover_badge_2,omitempty"`
	LikeButton            *LikeButton                                          `protobuf:"bytes,19,opt,name=like_button,json=likeButton,proto3" json:"like_button,omitempty"`
	TitleSingleLine       int32                                                `protobuf:"varint,20,opt,name=title_single_line,json=titleSingleLine,proto3" json:"title_single_line,omitempty"`
	CoverRightText        string                                               `protobuf:"bytes,21,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                             `json:"-"`
	XXX_unrecognized      []byte                                               `json:"-"`
	XXX_sizecache         int32                                                `json:"-"`
}

func (m *LargeCoverV1) Reset()         { *m = LargeCoverV1{} }
func (m *LargeCoverV1) String() string { return proto.CompactTextString(m) }
func (*LargeCoverV1) ProtoMessage()    {}
func (*LargeCoverV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{3}
}
func (m *LargeCoverV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LargeCoverV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LargeCoverV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LargeCoverV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LargeCoverV1.Merge(m, src)
}
func (m *LargeCoverV1) XXX_Size() int {
	return m.Size()
}
func (m *LargeCoverV1) XXX_DiscardUnknown() {
	xxx_messageInfo_LargeCoverV1.DiscardUnknown(m)
}

var xxx_messageInfo_LargeCoverV1 proto.InternalMessageInfo

func (m *LargeCoverV1) GetCoverGif() string {
	if m != nil {
		return m.CoverGif
	}
	return ""
}

func (m *LargeCoverV1) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *LargeCoverV1) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *LargeCoverV1) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *LargeCoverV1) GetCoverLeftText_3() string {
	if m != nil {
		return m.CoverLeftText_3
	}
	return ""
}

func (m *LargeCoverV1) GetCoverBadge() string {
	if m != nil {
		return m.CoverBadge
	}
	return ""
}

func (m *LargeCoverV1) GetTopRcmdReason() string {
	if m != nil {
		return m.TopRcmdReason
	}
	return ""
}

func (m *LargeCoverV1) GetBottomRcmdReason() string {
	if m != nil {
		return m.BottomRcmdReason
	}
	return ""
}

func (m *LargeCoverV1) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *LargeCoverV1) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

func (m *LargeCoverV1) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *LargeCoverV1) GetTopRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.TopRcmdReasonStyle
	}
	return nil
}

func (m *LargeCoverV1) GetBottomRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.BottomRcmdReasonStyle
	}
	return nil
}

func (m *LargeCoverV1) GetRcmdReasonStyleV2() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyleV2
	}
	return nil
}

func (m *LargeCoverV1) GetLeftCoverBadgeStyle() *ReasonStyle {
	if m != nil {
		return m.LeftCoverBadgeStyle
	}
	return nil
}

func (m *LargeCoverV1) GetRightCoverBadgeStyle() *ReasonStyle {
	if m != nil {
		return m.RightCoverBadgeStyle
	}
	return nil
}

func (m *LargeCoverV1) GetCoverBadge_2() string {
	if m != nil {
		return m.CoverBadge_2
	}
	return ""
}

func (m *LargeCoverV1) GetLikeButton() *LikeButton {
	if m != nil {
		return m.LikeButton
	}
	return nil
}

func (m *LargeCoverV1) GetTitleSingleLine() int32 {
	if m != nil {
		return m.TitleSingleLine
	}
	return 0
}

func (m *LargeCoverV1) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

type ThreeItemAllV2 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	TopRcmdReasonStyle   *ReasonStyle      `protobuf:"bytes,2,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	Item                 []*TwoItemHV1Item `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ThreeItemAllV2) Reset()         { *m = ThreeItemAllV2{} }
func (m *ThreeItemAllV2) String() string { return proto.CompactTextString(m) }
func (*ThreeItemAllV2) ProtoMessage()    {}
func (*ThreeItemAllV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{4}
}
func (m *ThreeItemAllV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemAllV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemAllV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemAllV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemAllV2.Merge(m, src)
}
func (m *ThreeItemAllV2) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemAllV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemAllV2.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemAllV2 proto.InternalMessageInfo

func (m *ThreeItemAllV2) GetTopRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.TopRcmdReasonStyle
	}
	return nil
}

func (m *ThreeItemAllV2) GetItem() []*TwoItemHV1Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type TwoItemHV1Item struct {
	Title                string                                               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover                string                                               `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Uri                  string                                               `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Param                string                                               `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
	Args                 *Args                                                `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
	Goto                 string                                               `protobuf:"bytes,6,opt,name=goto,proto3" json:"goto,omitempty"`
	CoverLeftText_1      string                                               `protobuf:"bytes,7,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,8,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverRightText       string                                               `protobuf:"bytes,9,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *TwoItemHV1Item) Reset()         { *m = TwoItemHV1Item{} }
func (m *TwoItemHV1Item) String() string { return proto.CompactTextString(m) }
func (*TwoItemHV1Item) ProtoMessage()    {}
func (*TwoItemHV1Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{5}
}
func (m *TwoItemHV1Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwoItemHV1Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwoItemHV1Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwoItemHV1Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoItemHV1Item.Merge(m, src)
}
func (m *TwoItemHV1Item) XXX_Size() int {
	return m.Size()
}
func (m *TwoItemHV1Item) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoItemHV1Item.DiscardUnknown(m)
}

var xxx_messageInfo_TwoItemHV1Item proto.InternalMessageInfo

func (m *TwoItemHV1Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TwoItemHV1Item) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *TwoItemHV1Item) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *TwoItemHV1Item) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *TwoItemHV1Item) GetArgs() *Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TwoItemHV1Item) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *TwoItemHV1Item) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *TwoItemHV1Item) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *TwoItemHV1Item) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

type RcmdOneItem struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	TopRcmdReasonStyle   *ReasonStyle        `protobuf:"bytes,2,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	Item                 *SmallCoverRcmdItem `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RcmdOneItem) Reset()         { *m = RcmdOneItem{} }
func (m *RcmdOneItem) String() string { return proto.CompactTextString(m) }
func (*RcmdOneItem) ProtoMessage()    {}
func (*RcmdOneItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{6}
}
func (m *RcmdOneItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RcmdOneItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RcmdOneItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RcmdOneItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdOneItem.Merge(m, src)
}
func (m *RcmdOneItem) XXX_Size() int {
	return m.Size()
}
func (m *RcmdOneItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdOneItem.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdOneItem proto.InternalMessageInfo

func (m *RcmdOneItem) GetTopRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.TopRcmdReasonStyle
	}
	return nil
}

func (m *RcmdOneItem) GetItem() *SmallCoverRcmdItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type SmallCoverRcmdItem struct {
	Title                            string                                               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cover                            string                                               `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	Uri                              string                                               `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Param                            string                                               `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
	Goto                             string                                               `protobuf:"bytes,5,opt,name=goto,proto3" json:"goto,omitempty"`
	CoverRightText_1                 string                                               `protobuf:"bytes,6,opt,name=cover_right_text_1,json=coverRightText1,proto3" json:"cover_right_text_1,omitempty"`
	RightDesc_1                      string                                               `protobuf:"bytes,7,opt,name=right_desc_1,json=rightDesc1,proto3" json:"right_desc_1,omitempty"`
	RightDesc_2                      string                                               `protobuf:"bytes,8,opt,name=right_desc_2,json=rightDesc2,proto3" json:"right_desc_2,omitempty"`
	CoverGif                         string                                               `protobuf:"bytes,9,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	RightIcon_1                      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,10,opt,name=right_icon_1,json=rightIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"right_icon_1,omitempty"`
	RightIcon_2                      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,11,opt,name=right_icon_2,json=rightIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"right_icon_2,omitempty"`
	CoverRightTextContentDescription string                                               `protobuf:"bytes,12,opt,name=cover_right_text_content_description,json=coverRightTextContentDescription,proto3" json:"cover_right_text_content_description,omitempty"`
	RightDesc_1ContentDescription    string                                               `protobuf:"bytes,13,opt,name=right_desc_1_content_description,json=rightDesc1ContentDescription,proto3" json:"right_desc_1_content_description,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}                                             `json:"-"`
	XXX_unrecognized                 []byte                                               `json:"-"`
	XXX_sizecache                    int32                                                `json:"-"`
}

func (m *SmallCoverRcmdItem) Reset()         { *m = SmallCoverRcmdItem{} }
func (m *SmallCoverRcmdItem) String() string { return proto.CompactTextString(m) }
func (*SmallCoverRcmdItem) ProtoMessage()    {}
func (*SmallCoverRcmdItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{7}
}
func (m *SmallCoverRcmdItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverRcmdItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverRcmdItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverRcmdItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverRcmdItem.Merge(m, src)
}
func (m *SmallCoverRcmdItem) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverRcmdItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverRcmdItem.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverRcmdItem proto.InternalMessageInfo

func (m *SmallCoverRcmdItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetCoverRightText_1() string {
	if m != nil {
		return m.CoverRightText_1
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetRightDesc_1() string {
	if m != nil {
		return m.RightDesc_1
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetRightDesc_2() string {
	if m != nil {
		return m.RightDesc_2
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetCoverGif() string {
	if m != nil {
		return m.CoverGif
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetRightIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.RightIcon_1
	}
	return 0
}

func (m *SmallCoverRcmdItem) GetRightIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.RightIcon_2
	}
	return 0
}

func (m *SmallCoverRcmdItem) GetCoverRightTextContentDescription() string {
	if m != nil {
		return m.CoverRightTextContentDescription
	}
	return ""
}

func (m *SmallCoverRcmdItem) GetRightDesc_1ContentDescription() string {
	if m != nil {
		return m.RightDesc_1ContentDescription
	}
	return ""
}

type ThreeItemV1 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	TitleIcon            go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,2,opt,name=title_icon,json=titleIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"title_icon,omitempty"`
	MoreUri              string                                               `protobuf:"bytes,3,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	MoreText             string                                               `protobuf:"bytes,4,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	Items                []*ThreeItemV1Item                                   `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ThreeItemV1) Reset()         { *m = ThreeItemV1{} }
func (m *ThreeItemV1) String() string { return proto.CompactTextString(m) }
func (*ThreeItemV1) ProtoMessage()    {}
func (*ThreeItemV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{8}
}
func (m *ThreeItemV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemV1.Merge(m, src)
}
func (m *ThreeItemV1) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemV1) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemV1.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemV1 proto.InternalMessageInfo

func (m *ThreeItemV1) GetTitleIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.TitleIcon
	}
	return 0
}

func (m *ThreeItemV1) GetMoreUri() string {
	if m != nil {
		return m.MoreUri
	}
	return ""
}

func (m *ThreeItemV1) GetMoreText() string {
	if m != nil {
		return m.MoreText
	}
	return ""
}

func (m *ThreeItemV1) GetItems() []*ThreeItemV1Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type ThreeItemV1Item struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText        string                                               `protobuf:"bytes,2,opt,name=cover_left_text,json=coverLeftText,proto3" json:"cover_left_text,omitempty"`
	CoverLeftIcon        go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon,json=coverLeftIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon,omitempty"`
	Desc_1               string                                               `protobuf:"bytes,4,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	Desc_2               string                                               `protobuf:"bytes,5,opt,name=desc_2,json=desc2,proto3" json:"desc_2,omitempty"`
	Badge                string                                               `protobuf:"bytes,6,opt,name=badge,proto3" json:"badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ThreeItemV1Item) Reset()         { *m = ThreeItemV1Item{} }
func (m *ThreeItemV1Item) String() string { return proto.CompactTextString(m) }
func (*ThreeItemV1Item) ProtoMessage()    {}
func (*ThreeItemV1Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{9}
}
func (m *ThreeItemV1Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemV1Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemV1Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemV1Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemV1Item.Merge(m, src)
}
func (m *ThreeItemV1Item) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemV1Item) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemV1Item.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemV1Item proto.InternalMessageInfo

func (m *ThreeItemV1Item) GetCoverLeftText() string {
	if m != nil {
		return m.CoverLeftText
	}
	return ""
}

func (m *ThreeItemV1Item) GetCoverLeftIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon
	}
	return 0
}

func (m *ThreeItemV1Item) GetDesc_1() string {
	if m != nil {
		return m.Desc_1
	}
	return ""
}

func (m *ThreeItemV1Item) GetDesc_2() string {
	if m != nil {
		return m.Desc_2
	}
	return ""
}

func (m *ThreeItemV1Item) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

type HotTopic struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc                 string          `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Items                []*HotTopicItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HotTopic) Reset()         { *m = HotTopic{} }
func (m *HotTopic) String() string { return proto.CompactTextString(m) }
func (*HotTopic) ProtoMessage()    {}
func (*HotTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{10}
}
func (m *HotTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotTopic.Merge(m, src)
}
func (m *HotTopic) XXX_Size() int {
	return m.Size()
}
func (m *HotTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_HotTopic.DiscardUnknown(m)
}

var xxx_messageInfo_HotTopic proto.InternalMessageInfo

func (m *HotTopic) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *HotTopic) GetItems() []*HotTopicItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type HotTopicItem struct {
	Cover                string   `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	Uri                  string   `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Param                string   `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HotTopicItem) Reset()         { *m = HotTopicItem{} }
func (m *HotTopicItem) String() string { return proto.CompactTextString(m) }
func (*HotTopicItem) ProtoMessage()    {}
func (*HotTopicItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{11}
}
func (m *HotTopicItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotTopicItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotTopicItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotTopicItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotTopicItem.Merge(m, src)
}
func (m *HotTopicItem) XXX_Size() int {
	return m.Size()
}
func (m *HotTopicItem) XXX_DiscardUnknown() {
	xxx_messageInfo_HotTopicItem.DiscardUnknown(m)
}

var xxx_messageInfo_HotTopicItem proto.InternalMessageInfo

func (m *HotTopicItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *HotTopicItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HotTopicItem) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *HotTopicItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DynamicHot struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	TopLeftTitle         string       `protobuf:"bytes,2,opt,name=top_left_title,json=topLeftTitle,proto3" json:"top_left_title,omitempty"`
	Desc1                string       `protobuf:"bytes,3,opt,name=desc1,proto3" json:"desc1,omitempty"`
	Desc2                string       `protobuf:"bytes,4,opt,name=desc2,proto3" json:"desc2,omitempty"`
	MoreUri              string       `protobuf:"bytes,5,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	MoreText             string       `protobuf:"bytes,6,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	Covers               []string     `protobuf:"bytes,7,rep,name=covers,proto3" json:"covers,omitempty"`
	CoverRightText       string       `protobuf:"bytes,8,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	TopRcmdReasonStyle   *ReasonStyle `protobuf:"bytes,9,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DynamicHot) Reset()         { *m = DynamicHot{} }
func (m *DynamicHot) String() string { return proto.CompactTextString(m) }
func (*DynamicHot) ProtoMessage()    {}
func (*DynamicHot) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{12}
}
func (m *DynamicHot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicHot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicHot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicHot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicHot.Merge(m, src)
}
func (m *DynamicHot) XXX_Size() int {
	return m.Size()
}
func (m *DynamicHot) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicHot.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicHot proto.InternalMessageInfo

func (m *DynamicHot) GetTopLeftTitle() string {
	if m != nil {
		return m.TopLeftTitle
	}
	return ""
}

func (m *DynamicHot) GetDesc1() string {
	if m != nil {
		return m.Desc1
	}
	return ""
}

func (m *DynamicHot) GetDesc2() string {
	if m != nil {
		return m.Desc2
	}
	return ""
}

func (m *DynamicHot) GetMoreUri() string {
	if m != nil {
		return m.MoreUri
	}
	return ""
}

func (m *DynamicHot) GetMoreText() string {
	if m != nil {
		return m.MoreText
	}
	return ""
}

func (m *DynamicHot) GetCovers() []string {
	if m != nil {
		return m.Covers
	}
	return nil
}

func (m *DynamicHot) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *DynamicHot) GetTopRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.TopRcmdReasonStyle
	}
	return nil
}

type MiddleCoverV3 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc1                string       `protobuf:"bytes,2,opt,name=desc1,proto3" json:"desc1,omitempty"`
	Desc2                string       `protobuf:"bytes,3,opt,name=desc2,proto3" json:"desc2,omitempty"`
	CoverBadgeStyle      *ReasonStyle `protobuf:"bytes,4,opt,name=cover_badge_style,json=coverBadgeStyle,proto3" json:"cover_badge_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MiddleCoverV3) Reset()         { *m = MiddleCoverV3{} }
func (m *MiddleCoverV3) String() string { return proto.CompactTextString(m) }
func (*MiddleCoverV3) ProtoMessage()    {}
func (*MiddleCoverV3) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{13}
}
func (m *MiddleCoverV3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiddleCoverV3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiddleCoverV3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiddleCoverV3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiddleCoverV3.Merge(m, src)
}
func (m *MiddleCoverV3) XXX_Size() int {
	return m.Size()
}
func (m *MiddleCoverV3) XXX_DiscardUnknown() {
	xxx_messageInfo_MiddleCoverV3.DiscardUnknown(m)
}

var xxx_messageInfo_MiddleCoverV3 proto.InternalMessageInfo

func (m *MiddleCoverV3) GetDesc1() string {
	if m != nil {
		return m.Desc1
	}
	return ""
}

func (m *MiddleCoverV3) GetDesc2() string {
	if m != nil {
		return m.Desc2
	}
	return ""
}

func (m *MiddleCoverV3) GetCoverBadgeStyle() *ReasonStyle {
	if m != nil {
		return m.CoverBadgeStyle
	}
	return nil
}

type SmallCoverV1 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverBadge           string                                               `protobuf:"bytes,2,opt,name=cover_badge,json=coverBadge,proto3" json:"cover_badge,omitempty"`
	CoverLeftText        string                                               `protobuf:"bytes,3,opt,name=cover_left_text,json=coverLeftText,proto3" json:"cover_left_text,omitempty"`
	Desc_1               string                                               `protobuf:"bytes,4,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	Desc_2               string                                               `protobuf:"bytes,5,opt,name=desc_2,json=desc2,proto3" json:"desc_2,omitempty"`
	Desc_3               string                                               `protobuf:"bytes,6,opt,name=desc_3,json=desc3,proto3" json:"desc_3,omitempty"`
	TitleRightText       string                                               `protobuf:"bytes,7,opt,name=title_right_text,json=titleRightText,proto3" json:"title_right_text,omitempty"`
	TitleRightPic        go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,8,opt,name=title_right_pic,json=titleRightPic,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"title_right_pic,omitempty"`
	TopRcmdReasonStyle   *ReasonStyle                                         `protobuf:"bytes,9,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *SmallCoverV1) Reset()         { *m = SmallCoverV1{} }
func (m *SmallCoverV1) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV1) ProtoMessage()    {}
func (*SmallCoverV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{14}
}
func (m *SmallCoverV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV1.Merge(m, src)
}
func (m *SmallCoverV1) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV1) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV1.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV1 proto.InternalMessageInfo

func (m *SmallCoverV1) GetCoverBadge() string {
	if m != nil {
		return m.CoverBadge
	}
	return ""
}

func (m *SmallCoverV1) GetCoverLeftText() string {
	if m != nil {
		return m.CoverLeftText
	}
	return ""
}

func (m *SmallCoverV1) GetDesc_1() string {
	if m != nil {
		return m.Desc_1
	}
	return ""
}

func (m *SmallCoverV1) GetDesc_2() string {
	if m != nil {
		return m.Desc_2
	}
	return ""
}

func (m *SmallCoverV1) GetDesc_3() string {
	if m != nil {
		return m.Desc_3
	}
	return ""
}

func (m *SmallCoverV1) GetTitleRightText() string {
	if m != nil {
		return m.TitleRightText
	}
	return ""
}

func (m *SmallCoverV1) GetTitleRightPic() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.TitleRightPic
	}
	return 0
}

func (m *SmallCoverV1) GetTopRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.TopRcmdReasonStyle
	}
	return nil
}

type MiddleCover struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Ratio                int32                                                `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Badge                string                                               `protobuf:"bytes,3,opt,name=badge,proto3" json:"badge,omitempty"`
	Desc                 string                                               `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	CoverLeftText_1      string                                               `protobuf:"bytes,5,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,6,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2      string                                               `protobuf:"bytes,7,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,8,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverLeftText_3      string                                               `protobuf:"bytes,9,opt,name=cover_left_text_3,json=coverLeftText3,proto3" json:"cover_left_text_3,omitempty"`
	CoverRightText       string                                               `protobuf:"bytes,10,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	TopRcmdReasonStyle   *ReasonStyle                                         `protobuf:"bytes,11,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	RcmdReasonStyle      *ReasonStyle                                         `protobuf:"bytes,12,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *MiddleCover) Reset()         { *m = MiddleCover{} }
func (m *MiddleCover) String() string { return proto.CompactTextString(m) }
func (*MiddleCover) ProtoMessage()    {}
func (*MiddleCover) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{15}
}
func (m *MiddleCover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiddleCover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiddleCover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiddleCover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiddleCover.Merge(m, src)
}
func (m *MiddleCover) XXX_Size() int {
	return m.Size()
}
func (m *MiddleCover) XXX_DiscardUnknown() {
	xxx_messageInfo_MiddleCover.DiscardUnknown(m)
}

var xxx_messageInfo_MiddleCover proto.InternalMessageInfo

func (m *MiddleCover) GetRatio() int32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *MiddleCover) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *MiddleCover) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MiddleCover) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *MiddleCover) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *MiddleCover) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *MiddleCover) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *MiddleCover) GetCoverLeftText_3() string {
	if m != nil {
		return m.CoverLeftText_3
	}
	return ""
}

func (m *MiddleCover) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *MiddleCover) GetTopRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.TopRcmdReasonStyle
	}
	return nil
}

func (m *MiddleCover) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

type ThreeItemH struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Items                []*ThreeItemHItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ThreeItemH) Reset()         { *m = ThreeItemH{} }
func (m *ThreeItemH) String() string { return proto.CompactTextString(m) }
func (*ThreeItemH) ProtoMessage()    {}
func (*ThreeItemH) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{16}
}
func (m *ThreeItemH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemH.Merge(m, src)
}
func (m *ThreeItemH) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemH) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemH.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemH proto.InternalMessageInfo

func (m *ThreeItemH) GetItems() []*ThreeItemHItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ThreeItemHItem struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverType            go_gateway_app_app_svr_app_card_interface_model.Type `protobuf:"varint,2,opt,name=cover_type,json=coverType,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Type" json:"cover_type,omitempty"`
	Desc                 string                                               `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	OfficialIcon         go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,4,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ThreeItemHItem) Reset()         { *m = ThreeItemHItem{} }
func (m *ThreeItemHItem) String() string { return proto.CompactTextString(m) }
func (*ThreeItemHItem) ProtoMessage()    {}
func (*ThreeItemHItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{17}
}
func (m *ThreeItemHItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemHItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemHItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemHItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemHItem.Merge(m, src)
}
func (m *ThreeItemHItem) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemHItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemHItem.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemHItem proto.InternalMessageInfo

func (m *ThreeItemHItem) GetCoverType() go_gateway_app_app_svr_app_card_interface_model.Type {
	if m != nil {
		return m.CoverType
	}
	return 0
}

func (m *ThreeItemHItem) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ThreeItemHItem) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

type ThreeItemHV3 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Covers               []string                                             `protobuf:"bytes,2,rep,name=covers,proto3" json:"covers,omitempty"`
	CoverTopText_1       string                                               `protobuf:"bytes,3,opt,name=cover_top_text_1,json=coverTopText1,proto3" json:"cover_top_text_1,omitempty"`
	CoverTopText_2       string                                               `protobuf:"bytes,4,opt,name=cover_top_text_2,json=coverTopText2,proto3" json:"cover_top_text_2,omitempty"`
	Desc                 string                                               `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Avatar               *Avatar                                              `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	OfficialIcon         go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,7,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ThreeItemHV3) Reset()         { *m = ThreeItemHV3{} }
func (m *ThreeItemHV3) String() string { return proto.CompactTextString(m) }
func (*ThreeItemHV3) ProtoMessage()    {}
func (*ThreeItemHV3) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{18}
}
func (m *ThreeItemHV3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemHV3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemHV3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemHV3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemHV3.Merge(m, src)
}
func (m *ThreeItemHV3) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemHV3) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemHV3.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemHV3 proto.InternalMessageInfo

func (m *ThreeItemHV3) GetCovers() []string {
	if m != nil {
		return m.Covers
	}
	return nil
}

func (m *ThreeItemHV3) GetCoverTopText_1() string {
	if m != nil {
		return m.CoverTopText_1
	}
	return ""
}

func (m *ThreeItemHV3) GetCoverTopText_2() string {
	if m != nil {
		return m.CoverTopText_2
	}
	return ""
}

func (m *ThreeItemHV3) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ThreeItemHV3) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *ThreeItemHV3) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

type TwoItemV1 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Items                []*TwoItemV1Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TwoItemV1) Reset()         { *m = TwoItemV1{} }
func (m *TwoItemV1) String() string { return proto.CompactTextString(m) }
func (*TwoItemV1) ProtoMessage()    {}
func (*TwoItemV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{19}
}
func (m *TwoItemV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwoItemV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwoItemV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwoItemV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoItemV1.Merge(m, src)
}
func (m *TwoItemV1) XXX_Size() int {
	return m.Size()
}
func (m *TwoItemV1) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoItemV1.DiscardUnknown(m)
}

var xxx_messageInfo_TwoItemV1 proto.InternalMessageInfo

func (m *TwoItemV1) GetItems() []*TwoItemV1Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type TwoItemV1Item struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverBadge           string   `protobuf:"bytes,2,opt,name=cover_badge,json=coverBadge,proto3" json:"cover_badge,omitempty"`
	CoverLeftText_1      string   `protobuf:"bytes,3,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TwoItemV1Item) Reset()         { *m = TwoItemV1Item{} }
func (m *TwoItemV1Item) String() string { return proto.CompactTextString(m) }
func (*TwoItemV1Item) ProtoMessage()    {}
func (*TwoItemV1Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{20}
}
func (m *TwoItemV1Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwoItemV1Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwoItemV1Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwoItemV1Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoItemV1Item.Merge(m, src)
}
func (m *TwoItemV1Item) XXX_Size() int {
	return m.Size()
}
func (m *TwoItemV1Item) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoItemV1Item.DiscardUnknown(m)
}

var xxx_messageInfo_TwoItemV1Item proto.InternalMessageInfo

func (m *TwoItemV1Item) GetCoverBadge() string {
	if m != nil {
		return m.CoverBadge
	}
	return ""
}

func (m *TwoItemV1Item) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

type CoverOnly struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoverOnly) Reset()         { *m = CoverOnly{} }
func (m *CoverOnly) String() string { return proto.CompactTextString(m) }
func (*CoverOnly) ProtoMessage()    {}
func (*CoverOnly) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{21}
}
func (m *CoverOnly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoverOnly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoverOnly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoverOnly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoverOnly.Merge(m, src)
}
func (m *CoverOnly) XXX_Size() int {
	return m.Size()
}
func (m *CoverOnly) XXX_DiscardUnknown() {
	xxx_messageInfo_CoverOnly.DiscardUnknown(m)
}

var xxx_messageInfo_CoverOnly proto.InternalMessageInfo

type Banner struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Hash                 string        `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	BannerItem           []*BannerItem `protobuf:"bytes,3,rep,name=banner_item,json=bannerItem,proto3" json:"banner_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Banner) Reset()         { *m = Banner{} }
func (m *Banner) String() string { return proto.CompactTextString(m) }
func (*Banner) ProtoMessage()    {}
func (*Banner) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{22}
}
func (m *Banner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Banner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Banner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Banner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Banner.Merge(m, src)
}
func (m *Banner) XXX_Size() int {
	return m.Size()
}
func (m *Banner) XXX_DiscardUnknown() {
	xxx_messageInfo_Banner.DiscardUnknown(m)
}

var xxx_messageInfo_Banner proto.InternalMessageInfo

func (m *Banner) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Banner) GetBannerItem() []*BannerItem {
	if m != nil {
		return m.BannerItem
	}
	return nil
}

type Topstick struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topstick) Reset()         { *m = Topstick{} }
func (m *Topstick) String() string { return proto.CompactTextString(m) }
func (*Topstick) ProtoMessage()    {}
func (*Topstick) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{23}
}
func (m *Topstick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topstick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topstick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Topstick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topstick.Merge(m, src)
}
func (m *Topstick) XXX_Size() int {
	return m.Size()
}
func (m *Topstick) XXX_DiscardUnknown() {
	xxx_messageInfo_Topstick.DiscardUnknown(m)
}

var xxx_messageInfo_Topstick proto.InternalMessageInfo

func (m *Topstick) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type ChannelSquare struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc_1               string               `protobuf:"bytes,2,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	Desc_2               string               `protobuf:"bytes,3,opt,name=desc_2,json=desc2,proto3" json:"desc_2,omitempty"`
	Item                 []*ChannelSquareItem `protobuf:"bytes,4,rep,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ChannelSquare) Reset()         { *m = ChannelSquare{} }
func (m *ChannelSquare) String() string { return proto.CompactTextString(m) }
func (*ChannelSquare) ProtoMessage()    {}
func (*ChannelSquare) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{24}
}
func (m *ChannelSquare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelSquare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelSquare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelSquare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelSquare.Merge(m, src)
}
func (m *ChannelSquare) XXX_Size() int {
	return m.Size()
}
func (m *ChannelSquare) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelSquare.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelSquare proto.InternalMessageInfo

func (m *ChannelSquare) GetDesc_1() string {
	if m != nil {
		return m.Desc_1
	}
	return ""
}

func (m *ChannelSquare) GetDesc_2() string {
	if m != nil {
		return m.Desc_2
	}
	return ""
}

func (m *ChannelSquare) GetItem() []*ChannelSquareItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type ChannelSquareItem struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1      string                                               `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2      string                                               `protobuf:"bytes,4,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverLeftText_3      string                                               `protobuf:"bytes,6,opt,name=cover_left_text_3,json=coverLeftText3,proto3" json:"cover_left_text_3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ChannelSquareItem) Reset()         { *m = ChannelSquareItem{} }
func (m *ChannelSquareItem) String() string { return proto.CompactTextString(m) }
func (*ChannelSquareItem) ProtoMessage()    {}
func (*ChannelSquareItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{25}
}
func (m *ChannelSquareItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelSquareItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelSquareItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelSquareItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelSquareItem.Merge(m, src)
}
func (m *ChannelSquareItem) XXX_Size() int {
	return m.Size()
}
func (m *ChannelSquareItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelSquareItem.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelSquareItem proto.InternalMessageInfo

func (m *ChannelSquareItem) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *ChannelSquareItem) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *ChannelSquareItem) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *ChannelSquareItem) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *ChannelSquareItem) GetCoverLeftText_3() string {
	if m != nil {
		return m.CoverLeftText_3
	}
	return ""
}

type ThreeItemHV4 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	MoreUri              string              `protobuf:"bytes,2,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	MoreText             string              `protobuf:"bytes,3,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	Items                []*ThreeItemHV4Item `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ThreeItemHV4) Reset()         { *m = ThreeItemHV4{} }
func (m *ThreeItemHV4) String() string { return proto.CompactTextString(m) }
func (*ThreeItemHV4) ProtoMessage()    {}
func (*ThreeItemHV4) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{26}
}
func (m *ThreeItemHV4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemHV4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemHV4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemHV4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemHV4.Merge(m, src)
}
func (m *ThreeItemHV4) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemHV4) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemHV4.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemHV4 proto.InternalMessageInfo

func (m *ThreeItemHV4) GetMoreUri() string {
	if m != nil {
		return m.MoreUri
	}
	return ""
}

func (m *ThreeItemHV4) GetMoreText() string {
	if m != nil {
		return m.MoreText
	}
	return ""
}

func (m *ThreeItemHV4) GetItems() []*ThreeItemHV4Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type ThreeItemHV4Item struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	CoverBadge           string   `protobuf:"bytes,3,opt,name=cover_badge,json=coverBadge,proto3" json:"cover_badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThreeItemHV4Item) Reset()         { *m = ThreeItemHV4Item{} }
func (m *ThreeItemHV4Item) String() string { return proto.CompactTextString(m) }
func (*ThreeItemHV4Item) ProtoMessage()    {}
func (*ThreeItemHV4Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{27}
}
func (m *ThreeItemHV4Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemHV4Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemHV4Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemHV4Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemHV4Item.Merge(m, src)
}
func (m *ThreeItemHV4Item) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemHV4Item) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemHV4Item.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemHV4Item proto.InternalMessageInfo

func (m *ThreeItemHV4Item) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ThreeItemHV4Item) GetCoverBadge() string {
	if m != nil {
		return m.CoverBadge
	}
	return ""
}

type UpRcmdCover struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverType            go_gateway_app_app_svr_app_card_interface_model.Type `protobuf:"varint,2,opt,name=cover_type,json=coverType,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Type" json:"cover_type,omitempty"`
	Level                int32                                                `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	OfficialIcon         go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,4,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	Desc_1               string                                               `protobuf:"bytes,5,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	Desc_2               string                                               `protobuf:"bytes,6,opt,name=desc_2,json=desc2,proto3" json:"desc_2,omitempty"`
	Desc_3               string                                               `protobuf:"bytes,7,opt,name=desc_3,json=desc3,proto3" json:"desc_3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *UpRcmdCover) Reset()         { *m = UpRcmdCover{} }
func (m *UpRcmdCover) String() string { return proto.CompactTextString(m) }
func (*UpRcmdCover) ProtoMessage()    {}
func (*UpRcmdCover) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{28}
}
func (m *UpRcmdCover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpRcmdCover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpRcmdCover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpRcmdCover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpRcmdCover.Merge(m, src)
}
func (m *UpRcmdCover) XXX_Size() int {
	return m.Size()
}
func (m *UpRcmdCover) XXX_DiscardUnknown() {
	xxx_messageInfo_UpRcmdCover.DiscardUnknown(m)
}

var xxx_messageInfo_UpRcmdCover proto.InternalMessageInfo

func (m *UpRcmdCover) GetCoverType() go_gateway_app_app_svr_app_card_interface_model.Type {
	if m != nil {
		return m.CoverType
	}
	return 0
}

func (m *UpRcmdCover) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UpRcmdCover) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

func (m *UpRcmdCover) GetDesc_1() string {
	if m != nil {
		return m.Desc_1
	}
	return ""
}

func (m *UpRcmdCover) GetDesc_2() string {
	if m != nil {
		return m.Desc_2
	}
	return ""
}

func (m *UpRcmdCover) GetDesc_3() string {
	if m != nil {
		return m.Desc_3
	}
	return ""
}

type ThreeItemAll struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Items                []*ThreeItemAllItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ThreeItemAll) Reset()         { *m = ThreeItemAll{} }
func (m *ThreeItemAll) String() string { return proto.CompactTextString(m) }
func (*ThreeItemAll) ProtoMessage()    {}
func (*ThreeItemAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{29}
}
func (m *ThreeItemAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemAll.Merge(m, src)
}
func (m *ThreeItemAll) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemAll) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemAll.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemAll proto.InternalMessageInfo

func (m *ThreeItemAll) GetItems() []*ThreeItemAllItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ThreeItemAllItem struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverType            go_gateway_app_app_svr_app_card_interface_model.Type `protobuf:"varint,2,opt,name=cover_type,json=coverType,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Type" json:"cover_type,omitempty"`
	Desc                 string                                               `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	OfficialIcon         go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,4,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	VipType              int32                                                `protobuf:"varint,5,opt,name=vip_type,json=vipType,proto3" json:"vip_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ThreeItemAllItem) Reset()         { *m = ThreeItemAllItem{} }
func (m *ThreeItemAllItem) String() string { return proto.CompactTextString(m) }
func (*ThreeItemAllItem) ProtoMessage()    {}
func (*ThreeItemAllItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{30}
}
func (m *ThreeItemAllItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemAllItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemAllItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemAllItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemAllItem.Merge(m, src)
}
func (m *ThreeItemAllItem) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemAllItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemAllItem.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemAllItem proto.InternalMessageInfo

func (m *ThreeItemAllItem) GetCoverType() go_gateway_app_app_svr_app_card_interface_model.Type {
	if m != nil {
		return m.CoverType
	}
	return 0
}

func (m *ThreeItemAllItem) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ThreeItemAllItem) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

func (m *ThreeItemAllItem) GetVipType() int32 {
	if m != nil {
		return m.VipType
	}
	return 0
}

type TwoItemHV1 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc                 string            `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Item                 []*TwoItemHV1Item `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TwoItemHV1) Reset()         { *m = TwoItemHV1{} }
func (m *TwoItemHV1) String() string { return proto.CompactTextString(m) }
func (*TwoItemHV1) ProtoMessage()    {}
func (*TwoItemHV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{31}
}
func (m *TwoItemHV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwoItemHV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwoItemHV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwoItemHV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoItemHV1.Merge(m, src)
}
func (m *TwoItemHV1) XXX_Size() int {
	return m.Size()
}
func (m *TwoItemHV1) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoItemHV1.DiscardUnknown(m)
}

var xxx_messageInfo_TwoItemHV1 proto.InternalMessageInfo

func (m *TwoItemHV1) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *TwoItemHV1) GetItem() []*TwoItemHV1Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type SmallCoverV6 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc_1               string   `protobuf:"bytes,2,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SmallCoverV6) Reset()         { *m = SmallCoverV6{} }
func (m *SmallCoverV6) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV6) ProtoMessage()    {}
func (*SmallCoverV6) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{32}
}
func (m *SmallCoverV6) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV6.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV6.Merge(m, src)
}
func (m *SmallCoverV6) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV6) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV6.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV6 proto.InternalMessageInfo

func (m *SmallCoverV6) GetDesc_1() string {
	if m != nil {
		return m.Desc_1
	}
	return ""
}

type SmallCoverConvergeV1 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1      string       `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverRightTopText    string       `protobuf:"bytes,3,opt,name=cover_right_top_text,json=coverRightTopText,proto3" json:"cover_right_top_text,omitempty"`
	RightDesc_1          string       `protobuf:"bytes,4,opt,name=right_desc_1,json=rightDesc1,proto3" json:"right_desc_1,omitempty"`
	RcmdReasonStyle      *ReasonStyle `protobuf:"bytes,5,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	RcmdReasonStyleV2    *ReasonStyle `protobuf:"bytes,6,opt,name=rcmd_reason_style_v2,json=rcmdReasonStyleV2,proto3" json:"rcmd_reason_style_v2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SmallCoverConvergeV1) Reset()         { *m = SmallCoverConvergeV1{} }
func (m *SmallCoverConvergeV1) String() string { return proto.CompactTextString(m) }
func (*SmallCoverConvergeV1) ProtoMessage()    {}
func (*SmallCoverConvergeV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{33}
}
func (m *SmallCoverConvergeV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverConvergeV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverConvergeV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverConvergeV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverConvergeV1.Merge(m, src)
}
func (m *SmallCoverConvergeV1) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverConvergeV1) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverConvergeV1.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverConvergeV1 proto.InternalMessageInfo

func (m *SmallCoverConvergeV1) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *SmallCoverConvergeV1) GetCoverRightTopText() string {
	if m != nil {
		return m.CoverRightTopText
	}
	return ""
}

func (m *SmallCoverConvergeV1) GetRightDesc_1() string {
	if m != nil {
		return m.RightDesc_1
	}
	return ""
}

func (m *SmallCoverConvergeV1) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

func (m *SmallCoverConvergeV1) GetRcmdReasonStyleV2() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyleV2
	}
	return nil
}

type ChannelNew struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	DescButton_2         *Button           `protobuf:"bytes,2,opt,name=desc_button_2,json=descButton2,proto3" json:"desc_button_2,omitempty"`
	Desc_1               string            `protobuf:"bytes,3,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	Items                []*ChannelNewItem `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChannelNew) Reset()         { *m = ChannelNew{} }
func (m *ChannelNew) String() string { return proto.CompactTextString(m) }
func (*ChannelNew) ProtoMessage()    {}
func (*ChannelNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{34}
}
func (m *ChannelNew) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelNew.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelNew.Merge(m, src)
}
func (m *ChannelNew) XXX_Size() int {
	return m.Size()
}
func (m *ChannelNew) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelNew.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelNew proto.InternalMessageInfo

func (m *ChannelNew) GetDescButton_2() *Button {
	if m != nil {
		return m.DescButton_2
	}
	return nil
}

func (m *ChannelNew) GetDesc_1() string {
	if m != nil {
		return m.Desc_1
	}
	return ""
}

func (m *ChannelNew) GetItems() []*ChannelNewItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChannelNewItem struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1      string                                               `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2      string                                               `protobuf:"bytes,4,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverLeftText_3      string                                               `protobuf:"bytes,6,opt,name=cover_left_text_3,json=coverLeftText3,proto3" json:"cover_left_text_3,omitempty"`
	Badge                *ChannelBadge                                        `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
	LeftText_1           string                                               `protobuf:"bytes,8,opt,name=left_text_1,json=leftText1,proto3" json:"left_text_1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ChannelNewItem) Reset()         { *m = ChannelNewItem{} }
func (m *ChannelNewItem) String() string { return proto.CompactTextString(m) }
func (*ChannelNewItem) ProtoMessage()    {}
func (*ChannelNewItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{35}
}
func (m *ChannelNewItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelNewItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelNewItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelNewItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelNewItem.Merge(m, src)
}
func (m *ChannelNewItem) XXX_Size() int {
	return m.Size()
}
func (m *ChannelNewItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelNewItem.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelNewItem proto.InternalMessageInfo

func (m *ChannelNewItem) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *ChannelNewItem) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *ChannelNewItem) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *ChannelNewItem) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *ChannelNewItem) GetCoverLeftText_3() string {
	if m != nil {
		return m.CoverLeftText_3
	}
	return ""
}

func (m *ChannelNewItem) GetBadge() *ChannelBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *ChannelNewItem) GetLeftText_1() string {
	if m != nil {
		return m.LeftText_1
	}
	return ""
}

type LargeChannelSpecial struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	BgCover              string       `protobuf:"bytes,2,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	Desc_1               string       `protobuf:"bytes,3,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	Desc_2               string       `protobuf:"bytes,4,opt,name=desc_2,json=desc2,proto3" json:"desc_2,omitempty"`
	Badge                string       `protobuf:"bytes,5,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReasonStyle_2    *ReasonStyle `protobuf:"bytes,6,opt,name=rcmd_reason_style_2,json=rcmdReasonStyle2,proto3" json:"rcmd_reason_style_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LargeChannelSpecial) Reset()         { *m = LargeChannelSpecial{} }
func (m *LargeChannelSpecial) String() string { return proto.CompactTextString(m) }
func (*LargeChannelSpecial) ProtoMessage()    {}
func (*LargeChannelSpecial) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{36}
}
func (m *LargeChannelSpecial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LargeChannelSpecial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LargeChannelSpecial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LargeChannelSpecial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LargeChannelSpecial.Merge(m, src)
}
func (m *LargeChannelSpecial) XXX_Size() int {
	return m.Size()
}
func (m *LargeChannelSpecial) XXX_DiscardUnknown() {
	xxx_messageInfo_LargeChannelSpecial.DiscardUnknown(m)
}

var xxx_messageInfo_LargeChannelSpecial proto.InternalMessageInfo

func (m *LargeChannelSpecial) GetBgCover() string {
	if m != nil {
		return m.BgCover
	}
	return ""
}

func (m *LargeChannelSpecial) GetDesc_1() string {
	if m != nil {
		return m.Desc_1
	}
	return ""
}

func (m *LargeChannelSpecial) GetDesc_2() string {
	if m != nil {
		return m.Desc_2
	}
	return ""
}

func (m *LargeChannelSpecial) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *LargeChannelSpecial) GetRcmdReasonStyle_2() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle_2
	}
	return nil
}

type ChannelThreeItemHV1 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	MoreText             string                        `protobuf:"bytes,2,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	MoreUri              string                        `protobuf:"bytes,3,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	Items                []*ChannelNewDetailCustomItem `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ChannelThreeItemHV1) Reset()         { *m = ChannelThreeItemHV1{} }
func (m *ChannelThreeItemHV1) String() string { return proto.CompactTextString(m) }
func (*ChannelThreeItemHV1) ProtoMessage()    {}
func (*ChannelThreeItemHV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{37}
}
func (m *ChannelThreeItemHV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelThreeItemHV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelThreeItemHV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelThreeItemHV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelThreeItemHV1.Merge(m, src)
}
func (m *ChannelThreeItemHV1) XXX_Size() int {
	return m.Size()
}
func (m *ChannelThreeItemHV1) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelThreeItemHV1.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelThreeItemHV1 proto.InternalMessageInfo

func (m *ChannelThreeItemHV1) GetMoreText() string {
	if m != nil {
		return m.MoreText
	}
	return ""
}

func (m *ChannelThreeItemHV1) GetMoreUri() string {
	if m != nil {
		return m.MoreUri
	}
	return ""
}

func (m *ChannelThreeItemHV1) GetItems() []*ChannelNewDetailCustomItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChannelNewDetailCustomItem struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1      string                                               `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	Badge                *ChannelBadge                                        `protobuf:"bytes,4,opt,name=badge,proto3" json:"badge,omitempty"`
	Position             int64                                                `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ChannelNewDetailCustomItem) Reset()         { *m = ChannelNewDetailCustomItem{} }
func (m *ChannelNewDetailCustomItem) String() string { return proto.CompactTextString(m) }
func (*ChannelNewDetailCustomItem) ProtoMessage()    {}
func (*ChannelNewDetailCustomItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{38}
}
func (m *ChannelNewDetailCustomItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelNewDetailCustomItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelNewDetailCustomItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelNewDetailCustomItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelNewDetailCustomItem.Merge(m, src)
}
func (m *ChannelNewDetailCustomItem) XXX_Size() int {
	return m.Size()
}
func (m *ChannelNewDetailCustomItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelNewDetailCustomItem.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelNewDetailCustomItem proto.InternalMessageInfo

func (m *ChannelNewDetailCustomItem) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *ChannelNewDetailCustomItem) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *ChannelNewDetailCustomItem) GetBadge() *ChannelBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *ChannelNewDetailCustomItem) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type ChannelThreeItemHV2 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	MoreText             string                         `protobuf:"bytes,2,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	MoreUri              string                         `protobuf:"bytes,3,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	Items                []*ChannelNewDetailCustomItem2 `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ChannelThreeItemHV2) Reset()         { *m = ChannelThreeItemHV2{} }
func (m *ChannelThreeItemHV2) String() string { return proto.CompactTextString(m) }
func (*ChannelThreeItemHV2) ProtoMessage()    {}
func (*ChannelThreeItemHV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{39}
}
func (m *ChannelThreeItemHV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelThreeItemHV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelThreeItemHV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelThreeItemHV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelThreeItemHV2.Merge(m, src)
}
func (m *ChannelThreeItemHV2) XXX_Size() int {
	return m.Size()
}
func (m *ChannelThreeItemHV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelThreeItemHV2.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelThreeItemHV2 proto.InternalMessageInfo

func (m *ChannelThreeItemHV2) GetMoreText() string {
	if m != nil {
		return m.MoreText
	}
	return ""
}

func (m *ChannelThreeItemHV2) GetMoreUri() string {
	if m != nil {
		return m.MoreUri
	}
	return ""
}

func (m *ChannelThreeItemHV2) GetItems() []*ChannelNewDetailCustomItem2 {
	if m != nil {
		return m.Items
	}
	return nil
}

type ChannelNewDetailCustomItem2 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1      string                                               `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	Badge                *ChannelBadge                                        `protobuf:"bytes,4,opt,name=badge,proto3" json:"badge,omitempty"`
	Position             int64                                                `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ChannelNewDetailCustomItem2) Reset()         { *m = ChannelNewDetailCustomItem2{} }
func (m *ChannelNewDetailCustomItem2) String() string { return proto.CompactTextString(m) }
func (*ChannelNewDetailCustomItem2) ProtoMessage()    {}
func (*ChannelNewDetailCustomItem2) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{40}
}
func (m *ChannelNewDetailCustomItem2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelNewDetailCustomItem2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelNewDetailCustomItem2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelNewDetailCustomItem2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelNewDetailCustomItem2.Merge(m, src)
}
func (m *ChannelNewDetailCustomItem2) XXX_Size() int {
	return m.Size()
}
func (m *ChannelNewDetailCustomItem2) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelNewDetailCustomItem2.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelNewDetailCustomItem2 proto.InternalMessageInfo

func (m *ChannelNewDetailCustomItem2) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *ChannelNewDetailCustomItem2) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *ChannelNewDetailCustomItem2) GetBadge() *ChannelBadge {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *ChannelNewDetailCustomItem2) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

type Option struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Option               []string `protobuf:"bytes,2,rep,name=option,proto3" json:"option,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Option) Reset()         { *m = Option{} }
func (m *Option) String() string { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()    {}
func (*Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{41}
}
func (m *Option) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Option.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Option.Merge(m, src)
}
func (m *Option) XXX_Size() int {
	return m.Size()
}
func (m *Option) XXX_DiscardUnknown() {
	xxx_messageInfo_Option.DiscardUnknown(m)
}

var xxx_messageInfo_Option proto.InternalMessageInfo

func (m *Option) GetOption() []string {
	if m != nil {
		return m.Option
	}
	return nil
}

type Select struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	LeftButton           *Button  `protobuf:"bytes,3,opt,name=left_button,json=leftButton,proto3" json:"left_button,omitempty"`
	RightButton          *Button  `protobuf:"bytes,4,opt,name=right_button,json=rightButton,proto3" json:"right_button,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Select) Reset()         { *m = Select{} }
func (m *Select) String() string { return proto.CompactTextString(m) }
func (*Select) ProtoMessage()    {}
func (*Select) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{42}
}
func (m *Select) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Select) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Select.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Select) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Select.Merge(m, src)
}
func (m *Select) XXX_Size() int {
	return m.Size()
}
func (m *Select) XXX_DiscardUnknown() {
	xxx_messageInfo_Select.DiscardUnknown(m)
}

var xxx_messageInfo_Select proto.InternalMessageInfo

func (m *Select) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Select) GetLeftButton() *Button {
	if m != nil {
		return m.LeftButton
	}
	return nil
}

func (m *Select) GetRightButton() *Button {
	if m != nil {
		return m.RightButton
	}
	return nil
}

type SmallCoverV8 struct {
	*Base                 `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverBadge            string       `protobuf:"bytes,2,opt,name=cover_badge,json=coverBadge,proto3" json:"cover_badge,omitempty"`
	RightDesc_1           string       `protobuf:"bytes,3,opt,name=right_desc_1,json=rightDesc1,proto3" json:"right_desc_1,omitempty"`
	RightDesc_2           string       `protobuf:"bytes,4,opt,name=right_desc_2,json=rightDesc2,proto3" json:"right_desc_2,omitempty"`
	CoverRightText        string       `protobuf:"bytes,5,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	BottomRcmdReasonStyle *ReasonStyle `protobuf:"bytes,6,opt,name=bottom_rcmd_reason_style,json=bottomRcmdReasonStyle,proto3" json:"bottom_rcmd_reason_style,omitempty"`
	TopRcmdReasonStyle    *ReasonStyle `protobuf:"bytes,7,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *SmallCoverV8) Reset()         { *m = SmallCoverV8{} }
func (m *SmallCoverV8) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV8) ProtoMessage()    {}
func (*SmallCoverV8) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{43}
}
func (m *SmallCoverV8) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV8) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV8.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV8) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV8.Merge(m, src)
}
func (m *SmallCoverV8) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV8) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV8.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV8 proto.InternalMessageInfo

func (m *SmallCoverV8) GetCoverBadge() string {
	if m != nil {
		return m.CoverBadge
	}
	return ""
}

func (m *SmallCoverV8) GetRightDesc_1() string {
	if m != nil {
		return m.RightDesc_1
	}
	return ""
}

func (m *SmallCoverV8) GetRightDesc_2() string {
	if m != nil {
		return m.RightDesc_2
	}
	return ""
}

func (m *SmallCoverV8) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *SmallCoverV8) GetBottomRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.BottomRcmdReasonStyle
	}
	return nil
}

func (m *SmallCoverV8) GetTopRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.TopRcmdReasonStyle
	}
	return nil
}

type Introduction struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Introduction) Reset()         { *m = Introduction{} }
func (m *Introduction) String() string { return proto.CompactTextString(m) }
func (*Introduction) ProtoMessage()    {}
func (*Introduction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{44}
}
func (m *Introduction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Introduction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Introduction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Introduction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Introduction.Merge(m, src)
}
func (m *Introduction) XXX_Size() int {
	return m.Size()
}
func (m *Introduction) XXX_DiscardUnknown() {
	xxx_messageInfo_Introduction.DiscardUnknown(m)
}

var xxx_messageInfo_Introduction proto.InternalMessageInfo

type LargeCoverV4 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1      string   `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftText_2      string   `protobuf:"bytes,3,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftText_3      string   `protobuf:"bytes,4,opt,name=cover_left_text_3,json=coverLeftText3,proto3" json:"cover_left_text_3,omitempty"`
	CoverBadge           string   `protobuf:"bytes,5,opt,name=cover_badge,json=coverBadge,proto3" json:"cover_badge,omitempty"`
	CanPlay              int32    `protobuf:"varint,6,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	Up                   *Up      `protobuf:"bytes,7,opt,name=up,proto3" json:"up,omitempty"`
	ShortLink            string   `protobuf:"bytes,8,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	ShareSubtitle        string   `protobuf:"bytes,9,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	PlayNumber           string   `protobuf:"bytes,10,opt,name=play_number,json=playNumber,proto3" json:"play_number,omitempty"`
	Bvid                 string   `protobuf:"bytes,11,opt,name=bvid,proto3" json:"bvid,omitempty"`
	SubParam             string   `protobuf:"bytes,12,opt,name=sub_param,json=subParam,proto3" json:"sub_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LargeCoverV4) Reset()         { *m = LargeCoverV4{} }
func (m *LargeCoverV4) String() string { return proto.CompactTextString(m) }
func (*LargeCoverV4) ProtoMessage()    {}
func (*LargeCoverV4) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{45}
}
func (m *LargeCoverV4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LargeCoverV4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LargeCoverV4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LargeCoverV4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LargeCoverV4.Merge(m, src)
}
func (m *LargeCoverV4) XXX_Size() int {
	return m.Size()
}
func (m *LargeCoverV4) XXX_DiscardUnknown() {
	xxx_messageInfo_LargeCoverV4.DiscardUnknown(m)
}

var xxx_messageInfo_LargeCoverV4 proto.InternalMessageInfo

func (m *LargeCoverV4) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *LargeCoverV4) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *LargeCoverV4) GetCoverLeftText_3() string {
	if m != nil {
		return m.CoverLeftText_3
	}
	return ""
}

func (m *LargeCoverV4) GetCoverBadge() string {
	if m != nil {
		return m.CoverBadge
	}
	return ""
}

func (m *LargeCoverV4) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *LargeCoverV4) GetUp() *Up {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *LargeCoverV4) GetShortLink() string {
	if m != nil {
		return m.ShortLink
	}
	return ""
}

func (m *LargeCoverV4) GetShareSubtitle() string {
	if m != nil {
		return m.ShareSubtitle
	}
	return ""
}

func (m *LargeCoverV4) GetPlayNumber() string {
	if m != nil {
		return m.PlayNumber
	}
	return ""
}

func (m *LargeCoverV4) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *LargeCoverV4) GetSubParam() string {
	if m != nil {
		return m.SubParam
	}
	return ""
}

type PopularTopEntrance struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Items                []*EntranceItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PopularTopEntrance) Reset()         { *m = PopularTopEntrance{} }
func (m *PopularTopEntrance) String() string { return proto.CompactTextString(m) }
func (*PopularTopEntrance) ProtoMessage()    {}
func (*PopularTopEntrance) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{46}
}
func (m *PopularTopEntrance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PopularTopEntrance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PopularTopEntrance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PopularTopEntrance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PopularTopEntrance.Merge(m, src)
}
func (m *PopularTopEntrance) XXX_Size() int {
	return m.Size()
}
func (m *PopularTopEntrance) XXX_DiscardUnknown() {
	xxx_messageInfo_PopularTopEntrance.DiscardUnknown(m)
}

var xxx_messageInfo_PopularTopEntrance proto.InternalMessageInfo

func (m *PopularTopEntrance) GetItems() []*EntranceItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type EntranceItem struct {
	Goto                 string   `protobuf:"bytes,1,opt,name=goto,proto3" json:"goto,omitempty"`
	Icon                 string   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ModuleId             string   `protobuf:"bytes,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	Uri                  string   `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	EntranceId           int64    `protobuf:"varint,6,opt,name=entrance_id,json=entranceId,proto3" json:"entrance_id,omitempty"`
	Bubble               *Bubble  `protobuf:"bytes,7,opt,name=bubble,proto3" json:"bubble,omitempty"`
	EntranceType         int32    `protobuf:"varint,8,opt,name=entrance_type,json=entranceType,proto3" json:"entrance_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntranceItem) Reset()         { *m = EntranceItem{} }
func (m *EntranceItem) String() string { return proto.CompactTextString(m) }
func (*EntranceItem) ProtoMessage()    {}
func (*EntranceItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{47}
}
func (m *EntranceItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntranceItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntranceItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntranceItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntranceItem.Merge(m, src)
}
func (m *EntranceItem) XXX_Size() int {
	return m.Size()
}
func (m *EntranceItem) XXX_DiscardUnknown() {
	xxx_messageInfo_EntranceItem.DiscardUnknown(m)
}

var xxx_messageInfo_EntranceItem proto.InternalMessageInfo

func (m *EntranceItem) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *EntranceItem) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *EntranceItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EntranceItem) GetModuleId() string {
	if m != nil {
		return m.ModuleId
	}
	return ""
}

func (m *EntranceItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *EntranceItem) GetEntranceId() int64 {
	if m != nil {
		return m.EntranceId
	}
	return 0
}

func (m *EntranceItem) GetBubble() *Bubble {
	if m != nil {
		return m.Bubble
	}
	return nil
}

func (m *EntranceItem) GetEntranceType() int32 {
	if m != nil {
		return m.EntranceType
	}
	return 0
}

type Bubble struct {
	BubbleContent        string   `protobuf:"bytes,1,opt,name=bubble_content,json=bubbleContent,proto3" json:"bubble_content,omitempty"`
	Version              int32    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Stime                int64    `protobuf:"varint,3,opt,name=stime,proto3" json:"stime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bubble) Reset()         { *m = Bubble{} }
func (m *Bubble) String() string { return proto.CompactTextString(m) }
func (*Bubble) ProtoMessage()    {}
func (*Bubble) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd7c75d4da5659a, []int{48}
}
func (m *Bubble) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bubble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bubble.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bubble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bubble.Merge(m, src)
}
func (m *Bubble) XXX_Size() int {
	return m.Size()
}
func (m *Bubble) XXX_DiscardUnknown() {
	xxx_messageInfo_Bubble.DiscardUnknown(m)
}

var xxx_messageInfo_Bubble proto.InternalMessageInfo

func (m *Bubble) GetBubbleContent() string {
	if m != nil {
		return m.BubbleContent
	}
	return ""
}

func (m *Bubble) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Bubble) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func init() {
	proto.RegisterType((*SmallCoverV5)(nil), "bilibili.app.card.v1.SmallCoverV5")
	proto.RegisterType((*SmallCoverV5Ad)(nil), "bilibili.app.card.v1.SmallCoverV5Ad")
	proto.RegisterType((*HotwordEntrance)(nil), "bilibili.app.card.v1.HotwordEntrance")
	proto.RegisterType((*LargeCoverV1)(nil), "bilibili.app.card.v1.LargeCoverV1")
	proto.RegisterType((*ThreeItemAllV2)(nil), "bilibili.app.card.v1.ThreeItemAllV2")
	proto.RegisterType((*TwoItemHV1Item)(nil), "bilibili.app.card.v1.TwoItemHV1Item")
	proto.RegisterType((*RcmdOneItem)(nil), "bilibili.app.card.v1.RcmdOneItem")
	proto.RegisterType((*SmallCoverRcmdItem)(nil), "bilibili.app.card.v1.SmallCoverRcmdItem")
	proto.RegisterType((*ThreeItemV1)(nil), "bilibili.app.card.v1.ThreeItemV1")
	proto.RegisterType((*ThreeItemV1Item)(nil), "bilibili.app.card.v1.ThreeItemV1Item")
	proto.RegisterType((*HotTopic)(nil), "bilibili.app.card.v1.HotTopic")
	proto.RegisterType((*HotTopicItem)(nil), "bilibili.app.card.v1.HotTopicItem")
	proto.RegisterType((*DynamicHot)(nil), "bilibili.app.card.v1.DynamicHot")
	proto.RegisterType((*MiddleCoverV3)(nil), "bilibili.app.card.v1.MiddleCoverV3")
	proto.RegisterType((*SmallCoverV1)(nil), "bilibili.app.card.v1.SmallCoverV1")
	proto.RegisterType((*MiddleCover)(nil), "bilibili.app.card.v1.MiddleCover")
	proto.RegisterType((*ThreeItemH)(nil), "bilibili.app.card.v1.ThreeItemH")
	proto.RegisterType((*ThreeItemHItem)(nil), "bilibili.app.card.v1.ThreeItemHItem")
	proto.RegisterType((*ThreeItemHV3)(nil), "bilibili.app.card.v1.ThreeItemHV3")
	proto.RegisterType((*TwoItemV1)(nil), "bilibili.app.card.v1.TwoItemV1")
	proto.RegisterType((*TwoItemV1Item)(nil), "bilibili.app.card.v1.TwoItemV1Item")
	proto.RegisterType((*CoverOnly)(nil), "bilibili.app.card.v1.CoverOnly")
	proto.RegisterType((*Banner)(nil), "bilibili.app.card.v1.Banner")
	proto.RegisterType((*Topstick)(nil), "bilibili.app.card.v1.Topstick")
	proto.RegisterType((*ChannelSquare)(nil), "bilibili.app.card.v1.ChannelSquare")
	proto.RegisterType((*ChannelSquareItem)(nil), "bilibili.app.card.v1.ChannelSquareItem")
	proto.RegisterType((*ThreeItemHV4)(nil), "bilibili.app.card.v1.ThreeItemHV4")
	proto.RegisterType((*ThreeItemHV4Item)(nil), "bilibili.app.card.v1.ThreeItemHV4Item")
	proto.RegisterType((*UpRcmdCover)(nil), "bilibili.app.card.v1.UpRcmdCover")
	proto.RegisterType((*ThreeItemAll)(nil), "bilibili.app.card.v1.ThreeItemAll")
	proto.RegisterType((*ThreeItemAllItem)(nil), "bilibili.app.card.v1.ThreeItemAllItem")
	proto.RegisterType((*TwoItemHV1)(nil), "bilibili.app.card.v1.TwoItemHV1")
	proto.RegisterType((*SmallCoverV6)(nil), "bilibili.app.card.v1.SmallCoverV6")
	proto.RegisterType((*SmallCoverConvergeV1)(nil), "bilibili.app.card.v1.SmallCoverConvergeV1")
	proto.RegisterType((*ChannelNew)(nil), "bilibili.app.card.v1.ChannelNew")
	proto.RegisterType((*ChannelNewItem)(nil), "bilibili.app.card.v1.ChannelNewItem")
	proto.RegisterType((*LargeChannelSpecial)(nil), "bilibili.app.card.v1.LargeChannelSpecial")
	proto.RegisterType((*ChannelThreeItemHV1)(nil), "bilibili.app.card.v1.ChannelThreeItemHV1")
	proto.RegisterType((*ChannelNewDetailCustomItem)(nil), "bilibili.app.card.v1.ChannelNewDetailCustomItem")
	proto.RegisterType((*ChannelThreeItemHV2)(nil), "bilibili.app.card.v1.ChannelThreeItemHV2")
	proto.RegisterType((*ChannelNewDetailCustomItem2)(nil), "bilibili.app.card.v1.ChannelNewDetailCustomItem2")
	proto.RegisterType((*Option)(nil), "bilibili.app.card.v1.Option")
	proto.RegisterType((*Select)(nil), "bilibili.app.card.v1.Select")
	proto.RegisterType((*SmallCoverV8)(nil), "bilibili.app.card.v1.SmallCoverV8")
	proto.RegisterType((*Introduction)(nil), "bilibili.app.card.v1.Introduction")
	proto.RegisterType((*LargeCoverV4)(nil), "bilibili.app.card.v1.LargeCoverV4")
	proto.RegisterType((*PopularTopEntrance)(nil), "bilibili.app.card.v1.PopularTopEntrance")
	proto.RegisterType((*EntranceItem)(nil), "bilibili.app.card.v1.EntranceItem")
	proto.RegisterType((*Bubble)(nil), "bilibili.app.card.v1.Bubble")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-card/interface/model/card/proto/single.proto", fileDescriptor_0bd7c75d4da5659a)
}

var fileDescriptor_0bd7c75d4da5659a = []byte{
	// 2807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcd, 0x6f, 0xdc, 0xc6,
	0x15, 0x0f, 0xc9, 0xfd, 0xd0, 0xbe, 0xdd, 0xd5, 0x07, 0x2d, 0xa7, 0x5b, 0x27, 0x91, 0x55, 0xc6,
	0x49, 0xd4, 0x8f, 0x48, 0xd5, 0x5a, 0x29, 0xd4, 0xc4, 0x45, 0x2b, 0xc9, 0x89, 0x25, 0xc0, 0x1f,
	0x02, 0x25, 0x2b, 0x81, 0x81, 0x82, 0xe6, 0x72, 0x47, 0xbb, 0x84, 0xb8, 0x1c, 0x96, 0xcb, 0x5d,
	0x47, 0xb7, 0xb4, 0x87, 0xa2, 0xbd, 0x16, 0x4d, 0xe0, 0xf4, 0xd6, 0xfe, 0x0b, 0xed, 0xa1, 0x87,
	0xb6, 0xa7, 0x02, 0xed, 0xad, 0x3e, 0xf5, 0x60, 0x03, 0x46, 0xe1, 0x5e, 0x8a, 0x5e, 0x8a, 0x9e,
	0x0a, 0xf4, 0x54, 0xcc, 0x07, 0x77, 0x87, 0x5c, 0xae, 0xb4, 0x12, 0x57, 0xae, 0x5b, 0xe8, 0x60,
	0x8b, 0x1c, 0x3e, 0x3e, 0x0e, 0x1f, 0x7f, 0xef, 0x37, 0xbf, 0x99, 0x79, 0x0b, 0x37, 0x1a, 0xf8,
	0xed, 0x86, 0x19, 0xa0, 0x07, 0xe6, 0xe1, 0x92, 0xe9, 0x79, 0xe4, 0xdf, 0xdb, 0xed, 0xae, 0x4f,
	0xff, 0x5a, 0xa6, 0x5f, 0x5f, 0xb2, 0xdd, 0x00, 0xf9, 0xfb, 0xa6, 0x85, 0x96, 0x5a, 0xb8, 0x8e,
	0x9c, 0x25, 0xda, 0xe8, 0xf9, 0x38, 0xc0, 0x4b, 0x6d, 0xdb, 0x6d, 0x38, 0x68, 0x91, 0x9e, 0xa8,
	0xb3, 0x35, 0xdb, 0xb1, 0xc9, 0xbf, 0x45, 0xd3, 0xf3, 0x16, 0x89, 0xd5, 0x62, 0x77, 0xf9, 0xd2,
	0xdb, 0x0d, 0x3b, 0x68, 0x76, 0x6a, 0x8b, 0x16, 0x6e, 0x2d, 0x35, 0x70, 0x03, 0xb3, 0x3b, 0x6b,
	0x9d, 0x7d, 0x7a, 0xc6, 0xdc, 0x90, 0x23, 0xe6, 0xe4, 0x52, 0x9a, 0xde, 0x58, 0xb8, 0xd5, 0xc2,
	0xee, 0x18, 0x1c, 0xd5, 0x4c, 0xd7, 0x45, 0x3e, 0x73, 0xa4, 0x3d, 0xcc, 0x43, 0x69, 0xa7, 0x65,
	0x3a, 0xce, 0x06, 0xee, 0x22, 0x7f, 0xef, 0x1d, 0x75, 0x15, 0x32, 0x35, 0xb3, 0x8d, 0x2a, 0xd2,
	0xbc, 0xb4, 0x50, 0xac, 0x5e, 0x5a, 0x4c, 0x7a, 0xed, 0xc5, 0x75, 0xb3, 0x8d, 0xd6, 0x27, 0x1e,
	0x3d, 0xbd, 0x2c, 0xfd, 0xfd, 0xe9, 0xe5, 0x97, 0x74, 0x7a, 0x87, 0xfa, 0x0a, 0x14, 0x2c, 0xe2,
	0xc4, 0x68, 0xd8, 0xfb, 0x15, 0x79, 0x5e, 0x5a, 0x28, 0xe8, 0x13, 0xb4, 0xe1, 0x86, 0xbd, 0xaf,
	0x2e, 0x80, 0xdc, 0xf1, 0x2a, 0x0a, 0x75, 0x5a, 0x49, 0x76, 0x7a, 0xd7, 0xd3, 0xe5, 0x8e, 0xa7,
	0x7e, 0x15, 0x54, 0xe6, 0xc6, 0xb7, 0x1b, 0xcd, 0xc0, 0x08, 0xd0, 0xc7, 0x81, 0xb1, 0x5c, 0xc9,
	0x50, 0x7f, 0x53, 0xf4, 0x8a, 0x4e, 0x2e, 0xec, 0xa2, 0x8f, 0x83, 0x65, 0x75, 0x1e, 0x4a, 0xcc,
	0xac, 0x8e, 0xda, 0x96, 0xb1, 0x5c, 0xc9, 0x52, 0x33, 0xa0, 0x6d, 0xd7, 0x51, 0xdb, 0x8a, 0x5b,
	0x54, 0x2b, 0xb9, 0x98, 0x45, 0x55, 0xbd, 0x05, 0x33, 0xbe, 0xd5, 0xaa, 0x1b, 0x3e, 0x32, 0xdb,
	0xd8, 0x35, 0xda, 0xc1, 0xa1, 0x83, 0x2a, 0x79, 0xda, 0xd3, 0x2f, 0x25, 0xf7, 0x54, 0xa7, 0x96,
	0x3b, 0xc4, 0x50, 0x9f, 0x22, 0xf7, 0x0a, 0x0d, 0xea, 0x36, 0x4c, 0x37, 0x71, 0xf0, 0x00, 0xfb,
	0x75, 0x03, 0xb9, 0x81, 0x6f, 0xba, 0x16, 0xaa, 0x4c, 0x50, 0x6f, 0x6f, 0x24, 0x7b, 0xdb, 0x64,
	0xd6, 0xef, 0x73, 0x63, 0x7d, 0xaa, 0x19, 0x6d, 0x20, 0x1d, 0xb4, 0xb0, 0xef, 0x22, 0xdf, 0x68,
	0x99, 0xfe, 0x01, 0xef, 0x60, 0x61, 0xe4, 0x0e, 0xb2, 0x7b, 0x6f, 0x99, 0xfe, 0x01, 0xeb, 0xe0,
	0xbd, 0x30, 0x22, 0xb6, 0x85, 0x5d, 0x63, 0xb9, 0x02, 0xf3, 0xd2, 0x42, 0x76, 0x7d, 0xf5, 0xdf,
	0x4f, 0x2f, 0xaf, 0x9c, 0x10, 0x55, 0x8b, 0x5b, 0x16, 0x76, 0x79, 0x2c, 0xc9, 0xe1, 0x72, 0xcc,
	0x77, 0xb5, 0x52, 0x1c, 0x9b, 0xef, 0xaa, 0xba, 0x07, 0x2f, 0x3b, 0x68, 0x3f, 0x30, 0x06, 0x63,
	0x51, 0x1a, 0x35, 0x16, 0x17, 0x88, 0x83, 0x8d, 0x58, 0x3c, 0x6e, 0xc3, 0x95, 0x01, 0xc0, 0x59,
	0xd8, 0x0d, 0x90, 0xcb, 0x40, 0xe3, 0xdb, 0x5e, 0x60, 0x63, 0xb7, 0x52, 0xa6, 0xc8, 0x99, 0x8f,
	0x42, 0x70, 0x83, 0x19, 0x5e, 0xef, 0xdb, 0xa9, 0x1f, 0xc0, 0xbc, 0x88, 0xc9, 0x44, 0x5f, 0x93,
	0xd4, 0xd7, 0xab, 0x7d, 0x9c, 0x0e, 0xfa, 0xd1, 0x7e, 0x96, 0x87, 0x49, 0x31, 0x35, 0xd7, 0xea,
	0xe7, 0xc9, 0x79, 0x9e, 0x9c, 0xe7, 0xc9, 0xf9, 0x42, 0x24, 0x67, 0x17, 0xa6, 0x62, 0xd0, 0x50,
	0x5f, 0x03, 0x08, 0xb1, 0x65, 0xd7, 0x69, 0x8a, 0x2a, 0x7a, 0x81, 0xb7, 0x6c, 0xd5, 0xd5, 0x2f,
	0xc2, 0x44, 0x13, 0xb3, 0x37, 0xe0, 0x09, 0x98, 0x6f, 0x62, 0xda, 0x4d, 0xf5, 0x22, 0xe4, 0x9a,
	0xef, 0x18, 0x1d, 0xdf, 0xa1, 0x39, 0x58, 0xd0, 0xb3, 0xcd, 0x77, 0xee, 0xfa, 0x8e, 0xaa, 0x42,
	0x86, 0x7c, 0x29, 0x9e, 0x5e, 0xf4, 0x58, 0xfb, 0xac, 0x00, 0xa5, 0x9b, 0xa6, 0xdf, 0x40, 0x8c,
	0x14, 0x96, 0xcf, 0x8a, 0x12, 0x56, 0x20, 0x67, 0x76, 0xcd, 0xc0, 0xf4, 0x39, 0x2d, 0xbc, 0x9a,
	0xec, 0x78, 0x8d, 0xda, 0xe8, 0xdc, 0x56, 0xfd, 0x32, 0x49, 0x06, 0xe2, 0x92, 0x62, 0x21, 0xc2,
	0x0e, 0x93, 0xf4, 0xc2, 0x4d, 0xb4, 0xcf, 0xc9, 0x21, 0xc1, 0xb4, 0xca, 0x19, 0x22, 0x6a, 0x5a,
	0x4d, 0x32, 0xbd, 0xca, 0xa9, 0x22, 0x6a, 0x7a, 0x55, 0xbd, 0x0c, 0x45, 0x66, 0x5a, 0x33, 0xeb,
	0x0d, 0x46, 0x14, 0x05, 0x1d, 0x68, 0xd3, 0x3a, 0x69, 0x51, 0xdf, 0x84, 0xa9, 0x00, 0x7b, 0x86,
	0xc0, 0x29, 0x34, 0xff, 0x0b, 0x7a, 0x39, 0xc0, 0x9e, 0xde, 0x63, 0x0b, 0xf5, 0x6b, 0xa0, 0xd6,
	0x70, 0x10, 0xe0, 0x56, 0xc4, 0xb4, 0x40, 0x4d, 0xa7, 0xd9, 0x15, 0xc1, 0x5a, 0x85, 0x0c, 0x01,
	0x10, 0xcd, 0xd6, 0x82, 0x4e, 0x8f, 0xd5, 0xef, 0x42, 0x19, 0xef, 0xef, 0xdb, 0x96, 0x6d, 0x3a,
	0x34, 0xe1, 0x52, 0xa7, 0x5b, 0x29, 0x74, 0x47, 0xce, 0x08, 0x9c, 0x2c, 0xd3, 0x35, 0x3c, 0xc7,
	0x3c, 0xa4, 0x29, 0x96, 0xd5, 0xf3, 0x96, 0xe9, 0x6e, 0x3b, 0xe6, 0xa1, 0xba, 0x0b, 0x17, 0x63,
	0xef, 0xc8, 0x53, 0xb1, 0x3c, 0x6a, 0x2a, 0xaa, 0x91, 0x60, 0x84, 0xcc, 0x54, 0x19, 0x8c, 0x08,
	0x77, 0x3c, 0x39, 0xaa, 0xe3, 0x8b, 0xf1, 0xd0, 0x31, 0xdf, 0x3a, 0xcc, 0x0e, 0x38, 0x35, 0xba,
	0xd5, 0xca, 0xd4, 0xa8, 0x7e, 0x67, 0x62, 0x44, 0xbf, 0x27, 0x32, 0x52, 0x0f, 0x0f, 0xbc, 0xb7,
	0xd3, 0x27, 0x64, 0xa4, 0x10, 0x3c, 0xac, 0xaf, 0x1f, 0xc1, 0x17, 0x18, 0x83, 0x0c, 0x3a, 0x9e,
	0x19, 0xd5, 0xf1, 0x2c, 0xf5, 0x10, 0xf7, 0xac, 0x41, 0x59, 0xf4, 0x59, 0xad, 0xa8, 0x14, 0x4e,
	0xc5, 0x3e, 0x7c, 0xab, 0xea, 0x1a, 0x14, 0x1d, 0xfb, 0x00, 0x19, 0xb5, 0x4e, 0x10, 0x60, 0xb7,
	0x72, 0x81, 0x3e, 0x71, 0x3e, 0xf9, 0x89, 0x37, 0xed, 0x03, 0xb4, 0x4e, 0xed, 0x74, 0x70, 0x7a,
	0xc7, 0xea, 0x57, 0x60, 0x26, 0xb0, 0x03, 0x07, 0x19, 0x6c, 0x7e, 0x63, 0x38, 0xb6, 0x8b, 0x2a,
	0xb3, 0x14, 0x42, 0x53, 0xf4, 0xc2, 0x0e, 0x6d, 0xbf, 0x69, 0xbb, 0x48, 0x5d, 0x80, 0xe9, 0x38,
	0xfd, 0x56, 0x2e, 0x0a, 0x99, 0xd7, 0xa3, 0x5a, 0xed, 0xb1, 0x04, 0x93, 0xbb, 0x4d, 0x1f, 0xa1,
	0xad, 0x00, 0xb5, 0xd6, 0x1c, 0x67, 0xaf, 0x9a, 0x82, 0x9a, 0x86, 0x22, 0x58, 0x4e, 0x83, 0xe0,
	0x55, 0xc8, 0xd8, 0x01, 0x6a, 0x55, 0x94, 0x79, 0x65, 0xa1, 0x58, 0xbd, 0x92, 0xec, 0x64, 0xf7,
	0x01, 0x26, 0x6f, 0xb0, 0xb9, 0xb7, 0x4c, 0xfe, 0xe8, 0xf4, 0x0e, 0xed, 0x99, 0x0c, 0x93, 0xd1,
	0x0b, 0xea, 0x2c, 0x64, 0x69, 0xb0, 0xe8, 0xdb, 0x15, 0x74, 0x76, 0x42, 0x5a, 0x69, 0x5c, 0x38,
	0x9f, 0xb2, 0x13, 0x75, 0x1a, 0x94, 0x8e, 0x6f, 0x73, 0x72, 0x27, 0x87, 0xc4, 0xce, 0x33, 0x7d,
	0xb3, 0xc5, 0xc9, 0x91, 0x9d, 0xa8, 0x8b, 0x90, 0x31, 0xfd, 0x46, 0x9b, 0xd2, 0xe0, 0xd0, 0x80,
	0xad, 0xf9, 0x8d, 0xb6, 0x4e, 0xed, 0x08, 0xed, 0x34, 0x70, 0x80, 0x39, 0x17, 0xd2, 0xe3, 0x64,
	0x0a, 0xce, 0x27, 0x52, 0xb0, 0x15, 0x31, 0xe5, 0x82, 0x63, 0x22, 0x25, 0x4b, 0xf5, 0x1f, 0xc2,
	0x44, 0x47, 0x12, 0x82, 0x0a, 0x89, 0x08, 0x7a, 0x22, 0x41, 0x91, 0x7c, 0xb2, 0x3b, 0x2e, 0xc5,
	0xd0, 0x0b, 0x07, 0x9f, 0x6b, 0x3d, 0xf8, 0x10, 0x27, 0x0b, 0xc9, 0x4e, 0xfa, 0x82, 0x9d, 0xdc,
	0x2e, 0x40, 0xe8, 0x71, 0x06, 0xd4, 0xc1, 0x8b, 0x67, 0x02, 0xa3, 0x10, 0x16, 0x59, 0x01, 0x16,
	0xc9, 0xc2, 0x3d, 0x37, 0x9a, 0x70, 0xcf, 0x1f, 0x2b, 0xdc, 0x27, 0x06, 0x84, 0x7b, 0x44, 0x5d,
	0x14, 0x62, 0xea, 0xe2, 0x7f, 0x55, 0xe5, 0x8e, 0xaa, 0x46, 0x4b, 0x63, 0x54, 0xa3, 0xe5, 0x11,
	0xd4, 0xe8, 0xa7, 0x32, 0x14, 0x7b, 0xe4, 0x9b, 0x4a, 0x14, 0x7e, 0x08, 0xc0, 0x06, 0x07, 0x2a,
	0x59, 0xe4, 0x94, 0xb1, 0x2b, 0x50, 0x5f, 0xa1, 0x5e, 0x69, 0x61, 0x1f, 0x19, 0x7d, 0x04, 0xe7,
	0xc9, 0xf9, 0x5d, 0xdf, 0x26, 0x50, 0xa1, 0x97, 0x28, 0x37, 0x30, 0x24, 0x53, 0x5b, 0xaa, 0x8d,
	0xdf, 0x83, 0x2c, 0xc9, 0x1f, 0x42, 0x8a, 0xca, 0xf0, 0x69, 0x9a, 0xf0, 0xf2, 0x34, 0xe7, 0xd8,
	0x3d, 0xda, 0xe7, 0x32, 0x4c, 0xc5, 0x2e, 0xa5, 0x88, 0xcd, 0x9b, 0x30, 0x15, 0xa3, 0x56, 0x9e,
	0x9f, 0xe5, 0x08, 0xb1, 0xaa, 0xf7, 0x23, 0x76, 0x34, 0x90, 0x4a, 0xca, 0x40, 0x96, 0x23, 0xac,
	0x4a, 0x26, 0x0c, 0x3c, 0x35, 0x79, 0xe2, 0xd7, 0x69, 0x56, 0x86, 0xcd, 0xa1, 0x90, 0xa6, 0xcd,
	0x55, 0xc2, 0x12, 0x4c, 0x0e, 0xb3, 0x74, 0x67, 0x27, 0xda, 0x4f, 0x24, 0x98, 0xd8, 0xc4, 0xc1,
	0x2e, 0xf6, 0x6c, 0x2b, 0x45, 0x50, 0x42, 0xe9, 0x2b, 0x0b, 0xd2, 0x77, 0x35, 0xfc, 0x66, 0x6c,
	0xa4, 0xd5, 0x86, 0x4e, 0xad, 0xe9, 0xc3, 0xc5, 0x0f, 0x76, 0x1f, 0x4a, 0x62, 0x73, 0x9f, 0x08,
	0xa5, 0x04, 0x22, 0x94, 0x13, 0x88, 0x50, 0x89, 0x11, 0xa1, 0x6b, 0xb6, 0x50, 0x38, 0x81, 0x22,
	0xc7, 0xda, 0xdf, 0x64, 0x80, 0xeb, 0x87, 0xae, 0xd9, 0xb2, 0xad, 0x4d, 0x1c, 0xa4, 0x78, 0xf1,
	0x2b, 0x30, 0x49, 0x06, 0x19, 0x86, 0x05, 0x4a, 0xe1, 0xac, 0x3f, 0xa5, 0x00, 0x7b, 0x14, 0x0a,
	0x21, 0x93, 0xd3, 0x6f, 0x13, 0x76, 0x8c, 0x7d, 0x28, 0xde, 0x5a, 0x15, 0x3f, 0x5f, 0x35, 0x92,
	0x22, 0xd9, 0x23, 0x52, 0x24, 0x17, 0x4b, 0x91, 0x97, 0x21, 0x47, 0xe3, 0xd2, 0xae, 0xe4, 0xe7,
	0x95, 0x85, 0x82, 0xce, 0xcf, 0x12, 0x87, 0xde, 0x89, 0xa4, 0xa1, 0x77, 0xf8, 0x80, 0x59, 0x48,
	0x31, 0x60, 0x6a, 0xbf, 0x97, 0xa0, 0x7c, 0xcb, 0xae, 0xd7, 0x1d, 0x3e, 0x59, 0xbd, 0x9a, 0x22,
	0xda, 0xbd, 0x38, 0xca, 0x89, 0x71, 0x54, 0xc4, 0x38, 0xde, 0x0a, 0x75, 0x8d, 0xa8, 0xcd, 0x33,
	0x27, 0x58, 0x92, 0x89, 0xc8, 0x72, 0xed, 0xd7, 0x4a, 0x64, 0x89, 0x3c, 0x0d, 0xbb, 0xc6, 0xa6,
	0xa7, 0x72, 0xd2, 0xf4, 0x34, 0x4e, 0x31, 0x4a, 0x12, 0xc5, 0x9c, 0x8c, 0x00, 0xc2, 0xe6, 0x70,
	0xd6, 0x4c, 0x9b, 0xaf, 0x12, 0x7c, 0x30, 0xae, 0x17, 0xf0, 0xc1, 0x95, 0x22, 0x6d, 0xef, 0xe3,
	0xe3, 0x3e, 0x4c, 0x89, 0x96, 0x9e, 0x6d, 0xa5, 0xd6, 0x89, 0xe5, 0xfe, 0x23, 0xb6, 0x6d, 0xeb,
	0x8c, 0x10, 0xf8, 0xf3, 0x2c, 0x14, 0x05, 0x04, 0xa6, 0xc3, 0x9f, 0x6f, 0x06, 0x36, 0x66, 0x43,
	0xa2, 0xce, 0x4e, 0xfa, 0xcc, 0xaa, 0x08, 0xcc, 0xda, 0xa3, 0xc4, 0x8c, 0x40, 0x89, 0x89, 0xb2,
	0x3c, 0x3b, 0xba, 0x2c, 0xcf, 0x8d, 0x59, 0x96, 0x27, 0x2e, 0xbf, 0xe4, 0x13, 0x97, 0x5f, 0x12,
	0xfa, 0x53, 0x1d, 0xf3, 0x34, 0x61, 0xc8, 0x1a, 0x4f, 0x21, 0x71, 0x8d, 0x27, 0x89, 0xd6, 0xe0,
	0x64, 0xb4, 0x56, 0x4c, 0x33, 0x0f, 0x48, 0x5c, 0x92, 0x2e, 0x9d, 0x76, 0x49, 0x5a, 0xfb, 0x81,
	0x04, 0xd0, 0xd3, 0x28, 0x9b, 0x29, 0x20, 0xfa, 0x6e, 0x38, 0xea, 0xca, 0x47, 0xce, 0x6f, 0x7b,
	0x8f, 0x12, 0xc7, 0xdd, 0xcf, 0x64, 0x61, 0xf6, 0xbe, 0x99, 0x52, 0x27, 0x7d, 0x08, 0x8c, 0xd2,
	0x8c, 0xe0, 0xd0, 0x43, 0x69, 0x34, 0xe4, 0xee, 0xa1, 0x87, 0x74, 0x36, 0x8d, 0x20, 0x87, 0xbd,
	0xc4, 0x52, 0x8e, 0x5a, 0x66, 0xcb, 0x8c, 0x73, 0x99, 0x4d, 0x7b, 0x22, 0x43, 0xa9, 0x1f, 0x98,
	0x54, 0x43, 0x58, 0x7f, 0x98, 0x96, 0x23, 0xc3, 0xf4, 0x5b, 0x21, 0x9e, 0x09, 0x56, 0x39, 0x33,
	0x88, 0xa4, 0xbf, 0x8b, 0x3d, 0x46, 0x0c, 0x83, 0x86, 0xa1, 0x80, 0x88, 0x18, 0x56, 0x7b, 0x71,
	0xca, 0x0a, 0x71, 0xea, 0x2f, 0xe8, 0xe6, 0x4e, 0xb0, 0xa0, 0x3b, 0x10, 0xdd, 0xfc, 0x58, 0xa3,
	0xfb, 0x89, 0x04, 0x05, 0xbe, 0xae, 0x92, 0x6a, 0x5c, 0xfd, 0x66, 0x14, 0xfa, 0xaf, 0x1f, 0xb9,
	0xb4, 0x13, 0x9d, 0x22, 0x7c, 0x2a, 0x41, 0x39, 0x72, 0xe1, 0x2c, 0x87, 0xf7, 0xc4, 0x51, 0x40,
	0x49, 0x1a, 0x05, 0xb4, 0xf7, 0xa1, 0x40, 0xc7, 0xac, 0x3b, 0xae, 0x73, 0x78, 0xfa, 0x2e, 0x69,
	0x9f, 0x4b, 0x90, 0x5b, 0xa7, 0x1b, 0xfe, 0xe9, 0x34, 0x7e, 0xd3, 0x6c, 0x37, 0x43, 0x8d, 0x4f,
	0x8e, 0xd5, 0x35, 0x28, 0xb2, 0x42, 0x02, 0x43, 0x58, 0x53, 0x9b, 0x1f, 0xe6, 0x94, 0x18, 0xd2,
	0xa8, 0x43, 0xad, 0x77, 0xac, 0x7d, 0x04, 0x13, 0xbb, 0xd8, 0x6b, 0x07, 0xb6, 0x75, 0x30, 0xde,
	0x09, 0x88, 0xf6, 0x2b, 0x09, 0xca, 0x1b, 0x4d, 0xf2, 0x24, 0x67, 0xe7, 0x7b, 0x1d, 0xd3, 0x47,
	0x29, 0xfc, 0xf7, 0xa5, 0x96, 0x9c, 0x2c, 0xb5, 0x22, 0xda, 0xf3, 0x3d, 0xbe, 0x48, 0x94, 0xa1,
	0xf1, 0x78, 0x2b, 0xf9, 0x39, 0x91, 0xae, 0x09, 0x6b, 0x44, 0x0f, 0x15, 0x98, 0x19, 0xb8, 0x96,
	0xa2, 0xeb, 0x89, 0x70, 0x93, 0x47, 0x17, 0x1d, 0xca, 0xf3, 0x10, 0x1d, 0x99, 0xd1, 0x45, 0x47,
	0xf6, 0x79, 0x88, 0x8e, 0xc4, 0x8d, 0x25, 0xed, 0x77, 0x52, 0x64, 0x1c, 0x58, 0x49, 0xf1, 0x55,
	0xc4, 0x69, 0x9e, 0x7c, 0xc4, 0x34, 0x4f, 0x89, 0x4d, 0xf3, 0xae, 0x85, 0x24, 0xc7, 0xb0, 0xf5,
	0xe6, 0x71, 0xe3, 0xfb, 0xde, 0x8a, 0xc8, 0x73, 0xdf, 0x97, 0x60, 0x3a, 0x7e, 0x6d, 0xcc, 0xd3,
	0xfe, 0x18, 0xfd, 0x29, 0x71, 0xfa, 0xd3, 0x1e, 0xcb, 0x50, 0xbc, 0x4b, 0xf5, 0x54, 0x5a, 0x39,
	0x7e, 0x66, 0x12, 0x63, 0x16, 0xb2, 0x0e, 0xea, 0x22, 0xb6, 0x13, 0x9b, 0xd5, 0xd9, 0xc9, 0x19,
	0x8b, 0x0c, 0x81, 0x62, 0xb2, 0xc9, 0x14, 0x93, 0x4b, 0x9e, 0xcd, 0xe5, 0x85, 0xd9, 0x9c, 0xf6,
	0x43, 0x11, 0xa1, 0x6b, 0x8e, 0x93, 0x22, 0xba, 0xd7, 0xa2, 0xc3, 0xe9, 0x71, 0x48, 0x5b, 0x73,
	0x1c, 0x11, 0x69, 0xbf, 0x94, 0x05, 0xa4, 0xf1, 0x6b, 0xe7, 0x6a, 0x32, 0x5c, 0x04, 0xed, 0xda,
	0x1e, 0x7b, 0x93, 0x2c, 0xdb, 0xb4, 0xed, 0xda, 0x1e, 0xe9, 0x8d, 0xf6, 0x53, 0x32, 0x0d, 0xe8,
	0x6d, 0x31, 0x8d, 0x7d, 0x41, 0xee, 0xb4, 0x3b, 0x5f, 0x46, 0x64, 0xed, 0xe3, 0x1b, 0x63, 0x1f,
	0x47, 0xb5, 0x7f, 0xca, 0x30, 0xdb, 0x7f, 0xc2, 0x06, 0x76, 0xbb, 0xc8, 0x6f, 0xa0, 0x54, 0x11,
	0x38, 0xc1, 0xb0, 0xb7, 0x04, 0xb3, 0x91, 0xb9, 0x24, 0x17, 0xd6, 0x1c, 0x13, 0x33, 0xc2, 0x7c,
	0x92, 0x69, 0xeb, 0x81, 0xad, 0x91, 0xcc, 0xc0, 0xd6, 0x48, 0xe2, 0xf4, 0x30, 0x7b, 0xea, 0x8a,
	0xa5, 0x61, 0x5b, 0xe3, 0xb9, 0xd3, 0x6f, 0x8d, 0x6b, 0x4f, 0x24, 0x00, 0xae, 0x33, 0x6e, 0xa3,
	0x07, 0x29, 0x22, 0xfd, 0x1d, 0x28, 0xd3, 0x38, 0xb0, 0xdd, 0x68, 0xa3, 0xca, 0x37, 0xd8, 0x86,
	0xcc, 0x2d, 0xf8, 0x5e, 0x74, 0x91, 0xdc, 0xc2, 0x8e, 0xab, 0x02, 0x2a, 0x22, 0x0b, 0xa4, 0xef,
	0x46, 0xc7, 0xba, 0x2b, 0x47, 0xea, 0xa8, 0xdb, 0xe8, 0x81, 0xc8, 0x3f, 0xff, 0x50, 0x60, 0x32,
	0x7a, 0xe5, 0x5c, 0x42, 0xbd, 0x00, 0x12, 0x4a, 0x5d, 0x0d, 0x17, 0xcb, 0x58, 0xf9, 0x9e, 0x76,
	0xe4, 0x37, 0xa5, 0x82, 0x21, 0x5c, 0x50, 0x9b, 0x83, 0xa2, 0x18, 0x7e, 0xb6, 0x86, 0x5d, 0x70,
	0x7a, 0x73, 0xa5, 0x4f, 0x64, 0xb8, 0xc0, 0x8a, 0xa2, 0xb8, 0x78, 0xf6, 0x10, 0xa1, 0xdc, 0x74,
	0x1a, 0xad, 0xd6, 0x30, 0xc4, 0x3d, 0xd8, 0x7c, 0xad, 0xc1, 0x44, 0xcb, 0x10, 0xc4, 0xf6, 0x07,
	0xeb, 0x4c, 0xe2, 0xde, 0x4b, 0x56, 0x5c, 0x21, 0xdc, 0x86, 0x0b, 0x83, 0x49, 0x7d, 0x82, 0x9c,
	0x9e, 0x8e, 0xe5, 0x74, 0x55, 0xfb, 0x93, 0x04, 0x17, 0xf8, 0xdb, 0x0b, 0x2a, 0x2f, 0x65, 0x79,
	0x58, 0x5f, 0x8b, 0xca, 0x31, 0x2d, 0x7a, 0xc4, 0x6e, 0xde, 0x07, 0xd1, 0xd4, 0xfd, 0xfa, 0x71,
	0xa9, 0x7b, 0x1d, 0x05, 0xa6, 0xed, 0x6c, 0x74, 0xda, 0x01, 0x6e, 0x89, 0x69, 0xfc, 0x1b, 0x19,
	0x2e, 0x0d, 0xb7, 0xfa, 0x3f, 0x4a, 0xe9, 0x5e, 0x5e, 0x64, 0x4e, 0x9a, 0x17, 0x97, 0x60, 0xc2,
	0xc3, 0x6d, 0x9b, 0x6e, 0x13, 0x67, 0x69, 0xbd, 0x61, 0xef, 0x5c, 0x7b, 0x94, 0x08, 0x88, 0xea,
	0x7f, 0x01, 0x10, 0x37, 0xa2, 0x80, 0x58, 0x3e, 0x29, 0x20, 0xaa, 0x21, 0x22, 0x7e, 0x2b, 0xc3,
	0x2b, 0x47, 0x98, 0x9d, 0x43, 0xe2, 0x18, 0x48, 0xdc, 0x83, 0xdc, 0x1d, 0x56, 0x77, 0x90, 0x6a,
	0x11, 0x13, 0xb3, 0xba, 0x04, 0xbe, 0x88, 0xc9, 0xce, 0xb4, 0x3f, 0x4b, 0x90, 0xdb, 0x41, 0x0e,
	0xb2, 0x82, 0x31, 0x4b, 0xd7, 0x6f, 0x71, 0xee, 0xe7, 0x05, 0x6f, 0xca, 0x08, 0x02, 0x03, 0xc8,
	0x0d, 0xbc, 0xd8, 0xed, 0xdb, 0xa1, 0x5e, 0xe3, 0xf7, 0x67, 0x46, 0x11, 0x28, 0xf4, 0x0e, 0x76,
	0xa2, 0xfd, 0x38, 0xba, 0xfb, 0xb7, 0x7a, 0x96, 0xcb, 0x83, 0x71, 0x71, 0xa9, 0x1c, 0x5b, 0x77,
	0x93, 0x19, 0xa8, 0xbb, 0x49, 0xda, 0x1d, 0xc9, 0x26, 0xee, 0x8e, 0x1c, 0x55, 0xd0, 0x99, 0x4b,
	0x59, 0xd0, 0x39, 0x74, 0xe7, 0x25, 0x9f, 0x66, 0x3b, 0x6f, 0x13, 0x4a, 0x5b, 0x6e, 0xe0, 0xe3,
	0x7a, 0xc7, 0x4a, 0x07, 0x63, 0xed, 0x0f, 0x4a, 0xa4, 0x8c, 0x7a, 0xe5, 0xf9, 0x70, 0x47, 0xa2,
	0x78, 0x53, 0x46, 0xaf, 0x79, 0xce, 0x8c, 0x52, 0xf3, 0x9c, 0x1d, 0x80, 0x95, 0x58, 0x2a, 0x9c,
	0x8b, 0x96, 0x0a, 0xb3, 0x5f, 0x7e, 0xe4, 0x47, 0xf8, 0xe5, 0xc7, 0x6b, 0x00, 0xed, 0x26, 0xf6,
	0x03, 0xc3, 0xb1, 0xdd, 0x83, 0x50, 0x82, 0xd1, 0x96, 0x9b, 0xb6, 0x7b, 0xa0, 0xbe, 0x01, 0x93,
	0xed, 0xa6, 0xe9, 0x23, 0xa3, 0xdd, 0xa9, 0xb1, 0x6a, 0x08, 0xb6, 0x79, 0x57, 0xa6, 0xad, 0x3b,
	0xbc, 0x91, 0xf4, 0x95, 0x74, 0xc3, 0x70, 0x3b, 0xad, 0x1a, 0xf2, 0xf9, 0xb6, 0x1d, 0x90, 0xa6,
	0xdb, 0xb4, 0x85, 0x50, 0x40, 0xad, 0x6b, 0xd7, 0xe9, 0x0e, 0x5d, 0x41, 0xa7, 0xc7, 0x64, 0xe0,
	0x69, 0x77, 0x6a, 0x06, 0x2b, 0xf0, 0x60, 0xa5, 0x55, 0x13, 0xed, 0x4e, 0x6d, 0x9b, 0x9c, 0x6b,
	0x3f, 0x92, 0x40, 0xdd, 0xc6, 0x5e, 0xc7, 0x31, 0xfd, 0x5d, 0xec, 0xf5, 0x8a, 0xf1, 0x4f, 0xff,
	0x3d, 0x57, 0xa3, 0x8b, 0x1f, 0x43, 0xb8, 0x37, 0x7c, 0x90, 0xa8, 0x58, 0xfe, 0x25, 0x41, 0x49,
	0x6c, 0xef, 0x15, 0xe2, 0x49, 0x42, 0x21, 0x5e, 0x58, 0xd4, 0x2f, 0xf7, 0x8b, 0xfa, 0xfb, 0x45,
	0x80, 0x8a, 0x58, 0x04, 0x48, 0xc7, 0xdb, 0x7a, 0xc7, 0x41, 0x86, 0x5d, 0xef, 0x97, 0x45, 0x91,
	0x86, 0xad, 0x7a, 0x58, 0x02, 0x93, 0xed, 0x97, 0xc0, 0x5c, 0x86, 0x62, 0xf8, 0x93, 0x16, 0x72,
	0x43, 0x8e, 0x92, 0x3f, 0x84, 0x4d, 0x5b, 0x75, 0x75, 0x05, 0x72, 0xb5, 0x4e, 0xad, 0xd6, 0x4b,
	0xc2, 0xa1, 0x24, 0x48, 0x6c, 0x74, 0x6e, 0xab, 0xbe, 0x0e, 0xe5, 0x9e, 0x5b, 0xba, 0x6e, 0x41,
	0x77, 0x7e, 0xf5, 0x52, 0xd8, 0x48, 0x17, 0x2f, 0x0c, 0xc8, 0xb1, 0xdb, 0x08, 0x0e, 0xd8, 0x8d,
	0x61, 0x2d, 0x1b, 0x7f, 0xf9, 0x32, 0x6b, 0xe5, 0xb5, 0x6b, 0x6a, 0x05, 0xf2, 0x5d, 0xe4, 0xb7,
	0xed, 0xb0, 0xc6, 0x4c, 0x0f, 0x4f, 0x49, 0x2c, 0xda, 0x81, 0xdd, 0x62, 0xb1, 0x50, 0x74, 0x76,
	0xb2, 0xbe, 0xf9, 0xc7, 0x67, 0x73, 0xd2, 0xa3, 0x67, 0x73, 0xd2, 0x5f, 0x9e, 0xcd, 0x49, 0x0f,
	0xff, 0x3a, 0xf7, 0x12, 0xcc, 0x59, 0xb8, 0xb5, 0x58, 0x33, 0x3d, 0xbb, 0x9d, 0xf8, 0x1a, 0xdb,
	0xd2, 0x3d, 0xc5, 0xf4, 0xec, 0x5f, 0xc8, 0x93, 0xeb, 0x6b, 0xdb, 0x5b, 0x1b, 0xa6, 0x5f, 0xdf,
	0x5b, 0x26, 0xff, 0xd7, 0x72, 0xf4, 0x77, 0x8f, 0x57, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7b,
	0xbe, 0x20, 0x79, 0x19, 0x3a, 0x00, 0x00,
}

func (m *SmallCoverV5) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV5) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV5) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RightDesc_1ContentDescription) > 0 {
		i -= len(m.RightDesc_1ContentDescription)
		copy(dAtA[i:], m.RightDesc_1ContentDescription)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_1ContentDescription)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CoverRightTextContentDescription) > 0 {
		i -= len(m.CoverRightTextContentDescription)
		copy(dAtA[i:], m.CoverRightTextContentDescription)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightTextContentDescription)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LeftCornerMarkStyle != nil {
		{
			size, err := m.LeftCornerMarkStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RightIcon_2 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.RightIcon_2))
		i--
		dAtA[i] = 0x58
	}
	if m.RightIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.RightIcon_1))
		i--
		dAtA[i] = 0x50
	}
	if m.CornerMarkStyle != nil {
		{
			size, err := m.CornerMarkStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.HotwordEntrance != nil {
		{
			size, err := m.HotwordEntrance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RightDesc_2) > 0 {
		i -= len(m.RightDesc_2)
		copy(dAtA[i:], m.RightDesc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_2)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RightDesc_1) > 0 {
		i -= len(m.RightDesc_1)
		copy(dAtA[i:], m.RightDesc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverRightText_1) > 0 {
		i -= len(m.CoverRightText_1)
		copy(dAtA[i:], m.CoverRightText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightText_1)))
		i--
		dAtA[i] = 0x22
	}
	if m.Up != nil {
		{
			size, err := m.Up.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverGif) > 0 {
		i -= len(m.CoverGif)
		copy(dAtA[i:], m.CoverGif)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverGif)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverV5Ad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV5Ad) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV5Ad) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RightDesc_1ContentDescription) > 0 {
		i -= len(m.RightDesc_1ContentDescription)
		copy(dAtA[i:], m.RightDesc_1ContentDescription)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_1ContentDescription)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CoverRightTextContentDescription) > 0 {
		i -= len(m.CoverRightTextContentDescription)
		copy(dAtA[i:], m.CoverRightTextContentDescription)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightTextContentDescription)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LeftCornerMarkStyle != nil {
		{
			size, err := m.LeftCornerMarkStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RightIcon_2 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.RightIcon_2))
		i--
		dAtA[i] = 0x58
	}
	if m.RightIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.RightIcon_1))
		i--
		dAtA[i] = 0x50
	}
	if m.CornerMarkStyle != nil {
		{
			size, err := m.CornerMarkStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.HotwordEntrance != nil {
		{
			size, err := m.HotwordEntrance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RightDesc_2) > 0 {
		i -= len(m.RightDesc_2)
		copy(dAtA[i:], m.RightDesc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_2)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RightDesc_1) > 0 {
		i -= len(m.RightDesc_1)
		copy(dAtA[i:], m.RightDesc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverRightText_1) > 0 {
		i -= len(m.CoverRightText_1)
		copy(dAtA[i:], m.CoverRightText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightText_1)))
		i--
		dAtA[i] = 0x22
	}
	if m.Up != nil {
		{
			size, err := m.Up.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverGif) > 0 {
		i -= len(m.CoverGif)
		copy(dAtA[i:], m.CoverGif)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverGif)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HotwordEntrance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotwordEntrance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HotwordEntrance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.H5Url) > 0 {
		i -= len(m.H5Url)
		copy(dAtA[i:], m.H5Url)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.H5Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HotText) > 0 {
		i -= len(m.HotText)
		copy(dAtA[i:], m.HotText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.HotText)))
		i--
		dAtA[i] = 0x12
	}
	if m.HotwordId != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.HotwordId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LargeCoverV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LargeCoverV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LargeCoverV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.TitleSingleLine != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.TitleSingleLine))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.LikeButton != nil {
		{
			size, err := m.LikeButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.CoverBadge_2) > 0 {
		i -= len(m.CoverBadge_2)
		copy(dAtA[i:], m.CoverBadge_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverBadge_2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.RightCoverBadgeStyle != nil {
		{
			size, err := m.RightCoverBadgeStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.LeftCoverBadgeStyle != nil {
		{
			size, err := m.LeftCoverBadgeStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.RcmdReasonStyleV2 != nil {
		{
			size, err := m.RcmdReasonStyleV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.BottomRcmdReasonStyle != nil {
		{
			size, err := m.BottomRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.TopRcmdReasonStyle != nil {
		{
			size, err := m.TopRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CanPlay != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x60
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BottomRcmdReason) > 0 {
		i -= len(m.BottomRcmdReason)
		copy(dAtA[i:], m.BottomRcmdReason)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.BottomRcmdReason)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TopRcmdReason) > 0 {
		i -= len(m.TopRcmdReason)
		copy(dAtA[i:], m.TopRcmdReason)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.TopRcmdReason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CoverBadge) > 0 {
		i -= len(m.CoverBadge)
		copy(dAtA[i:], m.CoverBadge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverBadge)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CoverLeftText_3) > 0 {
		i -= len(m.CoverLeftText_3)
		copy(dAtA[i:], m.CoverLeftText_3)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_3)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x22
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverGif) > 0 {
		i -= len(m.CoverGif)
		copy(dAtA[i:], m.CoverGif)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverGif)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemAllV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemAllV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemAllV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TopRcmdReasonStyle != nil {
		{
			size, err := m.TopRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TwoItemHV1Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwoItemHV1Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TwoItemHV1Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x32
	}
	if m.Args != nil {
		{
			size, err := m.Args.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RcmdOneItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RcmdOneItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RcmdOneItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TopRcmdReasonStyle != nil {
		{
			size, err := m.TopRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverRcmdItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverRcmdItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverRcmdItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RightDesc_1ContentDescription) > 0 {
		i -= len(m.RightDesc_1ContentDescription)
		copy(dAtA[i:], m.RightDesc_1ContentDescription)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_1ContentDescription)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CoverRightTextContentDescription) > 0 {
		i -= len(m.CoverRightTextContentDescription)
		copy(dAtA[i:], m.CoverRightTextContentDescription)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightTextContentDescription)))
		i--
		dAtA[i] = 0x62
	}
	if m.RightIcon_2 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.RightIcon_2))
		i--
		dAtA[i] = 0x58
	}
	if m.RightIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.RightIcon_1))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CoverGif) > 0 {
		i -= len(m.CoverGif)
		copy(dAtA[i:], m.CoverGif)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverGif)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RightDesc_2) > 0 {
		i -= len(m.RightDesc_2)
		copy(dAtA[i:], m.RightDesc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_2)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RightDesc_1) > 0 {
		i -= len(m.RightDesc_1)
		copy(dAtA[i:], m.RightDesc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_1)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CoverRightText_1) > 0 {
		i -= len(m.CoverRightText_1)
		copy(dAtA[i:], m.CoverRightText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightText_1)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MoreText) > 0 {
		i -= len(m.MoreText)
		copy(dAtA[i:], m.MoreText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MoreUri) > 0 {
		i -= len(m.MoreUri)
		copy(dAtA[i:], m.MoreUri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreUri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TitleIcon != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.TitleIcon))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemV1Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemV1Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemV1Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Desc_2) > 0 {
		i -= len(m.Desc_2)
		copy(dAtA[i:], m.Desc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc_1) > 0 {
		i -= len(m.Desc_1)
		copy(dAtA[i:], m.Desc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_1)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText) > 0 {
		i -= len(m.CoverLeftText)
		copy(dAtA[i:], m.CoverLeftText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HotTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HotTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HotTopicItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotTopicItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HotTopicItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynamicHot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicHot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicHot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TopRcmdReasonStyle != nil {
		{
			size, err := m.TopRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Covers) > 0 {
		for iNdEx := len(m.Covers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Covers[iNdEx])
			copy(dAtA[i:], m.Covers[iNdEx])
			i = encodeVarintSingle(dAtA, i, uint64(len(m.Covers[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.MoreText) > 0 {
		i -= len(m.MoreText)
		copy(dAtA[i:], m.MoreText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreText)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MoreUri) > 0 {
		i -= len(m.MoreUri)
		copy(dAtA[i:], m.MoreUri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreUri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc2) > 0 {
		i -= len(m.Desc2)
		copy(dAtA[i:], m.Desc2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc1) > 0 {
		i -= len(m.Desc1)
		copy(dAtA[i:], m.Desc1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TopLeftTitle) > 0 {
		i -= len(m.TopLeftTitle)
		copy(dAtA[i:], m.TopLeftTitle)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.TopLeftTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MiddleCoverV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiddleCoverV3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiddleCoverV3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CoverBadgeStyle != nil {
		{
			size, err := m.CoverBadgeStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc2) > 0 {
		i -= len(m.Desc2)
		copy(dAtA[i:], m.Desc2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc1) > 0 {
		i -= len(m.Desc1)
		copy(dAtA[i:], m.Desc1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TopRcmdReasonStyle != nil {
		{
			size, err := m.TopRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TitleRightPic != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.TitleRightPic))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TitleRightText) > 0 {
		i -= len(m.TitleRightText)
		copy(dAtA[i:], m.TitleRightText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.TitleRightText)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Desc_3) > 0 {
		i -= len(m.Desc_3)
		copy(dAtA[i:], m.Desc_3)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_3)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Desc_2) > 0 {
		i -= len(m.Desc_2)
		copy(dAtA[i:], m.Desc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc_1) > 0 {
		i -= len(m.Desc_1)
		copy(dAtA[i:], m.Desc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoverLeftText) > 0 {
		i -= len(m.CoverLeftText)
		copy(dAtA[i:], m.CoverLeftText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverBadge) > 0 {
		i -= len(m.CoverBadge)
		copy(dAtA[i:], m.CoverBadge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverBadge)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MiddleCover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiddleCover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiddleCover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.TopRcmdReasonStyle != nil {
		{
			size, err := m.TopRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CoverLeftText_3) > 0 {
		i -= len(m.CoverLeftText_3)
		copy(dAtA[i:], m.CoverLeftText_3)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_3)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ratio != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemHItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemHItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemHItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CoverType != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverType))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemHV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemHV3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemHV3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x38
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverTopText_2) > 0 {
		i -= len(m.CoverTopText_2)
		copy(dAtA[i:], m.CoverTopText_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverTopText_2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoverTopText_1) > 0 {
		i -= len(m.CoverTopText_1)
		copy(dAtA[i:], m.CoverTopText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverTopText_1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Covers) > 0 {
		for iNdEx := len(m.Covers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Covers[iNdEx])
			copy(dAtA[i:], m.Covers[iNdEx])
			i = encodeVarintSingle(dAtA, i, uint64(len(m.Covers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TwoItemV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwoItemV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TwoItemV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TwoItemV1Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwoItemV1Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TwoItemV1Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverBadge) > 0 {
		i -= len(m.CoverBadge)
		copy(dAtA[i:], m.CoverBadge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverBadge)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoverOnly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoverOnly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoverOnly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Banner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Banner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Banner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BannerItem) > 0 {
		for iNdEx := len(m.BannerItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BannerItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Topstick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topstick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Topstick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelSquare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelSquare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelSquare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Desc_2) > 0 {
		i -= len(m.Desc_2)
		copy(dAtA[i:], m.Desc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc_1) > 0 {
		i -= len(m.Desc_1)
		copy(dAtA[i:], m.Desc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelSquareItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelSquareItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelSquareItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CoverLeftText_3) > 0 {
		i -= len(m.CoverLeftText_3)
		copy(dAtA[i:], m.CoverLeftText_3)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_3)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemHV4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemHV4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemHV4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MoreText) > 0 {
		i -= len(m.MoreText)
		copy(dAtA[i:], m.MoreText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MoreUri) > 0 {
		i -= len(m.MoreUri)
		copy(dAtA[i:], m.MoreUri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreUri)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemHV4Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemHV4Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemHV4Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CoverBadge) > 0 {
		i -= len(m.CoverBadge)
		copy(dAtA[i:], m.CoverBadge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverBadge)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpRcmdCover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpRcmdCover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpRcmdCover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc_3) > 0 {
		i -= len(m.Desc_3)
		copy(dAtA[i:], m.Desc_3)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_3)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Desc_2) > 0 {
		i -= len(m.Desc_2)
		copy(dAtA[i:], m.Desc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_2)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Desc_1) > 0 {
		i -= len(m.Desc_1)
		copy(dAtA[i:], m.Desc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_1)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.CoverType != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverType))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemAllItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemAllItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemAllItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipType != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.VipType))
		i--
		dAtA[i] = 0x28
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CoverType != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverType))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TwoItemHV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwoItemHV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TwoItemHV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverV6) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV6) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV6) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc_1) > 0 {
		i -= len(m.Desc_1)
		copy(dAtA[i:], m.Desc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverConvergeV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverConvergeV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverConvergeV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyleV2 != nil {
		{
			size, err := m.RcmdReasonStyleV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RightDesc_1) > 0 {
		i -= len(m.RightDesc_1)
		copy(dAtA[i:], m.RightDesc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoverRightTopText) > 0 {
		i -= len(m.CoverRightTopText)
		copy(dAtA[i:], m.CoverRightTopText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightTopText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelNew) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelNew) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Desc_1) > 0 {
		i -= len(m.Desc_1)
		copy(dAtA[i:], m.Desc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_1)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DescButton_2 != nil {
		{
			size, err := m.DescButton_2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelNewItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelNewItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelNewItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LeftText_1) > 0 {
		i -= len(m.LeftText_1)
		copy(dAtA[i:], m.LeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.LeftText_1)))
		i--
		dAtA[i] = 0x42
	}
	if m.Badge != nil {
		{
			size, err := m.Badge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CoverLeftText_3) > 0 {
		i -= len(m.CoverLeftText_3)
		copy(dAtA[i:], m.CoverLeftText_3)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_3)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LargeChannelSpecial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LargeChannelSpecial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LargeChannelSpecial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyle_2 != nil {
		{
			size, err := m.RcmdReasonStyle_2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc_2) > 0 {
		i -= len(m.Desc_2)
		copy(dAtA[i:], m.Desc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc_1) > 0 {
		i -= len(m.Desc_1)
		copy(dAtA[i:], m.Desc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc_1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BgCover) > 0 {
		i -= len(m.BgCover)
		copy(dAtA[i:], m.BgCover)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.BgCover)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelThreeItemHV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelThreeItemHV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelThreeItemHV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MoreUri) > 0 {
		i -= len(m.MoreUri)
		copy(dAtA[i:], m.MoreUri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MoreText) > 0 {
		i -= len(m.MoreText)
		copy(dAtA[i:], m.MoreText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreText)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelNewDetailCustomItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelNewDetailCustomItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelNewDetailCustomItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Position != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x28
	}
	if m.Badge != nil {
		{
			size, err := m.Badge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelThreeItemHV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelThreeItemHV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelThreeItemHV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MoreUri) > 0 {
		i -= len(m.MoreUri)
		copy(dAtA[i:], m.MoreUri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MoreText) > 0 {
		i -= len(m.MoreText)
		copy(dAtA[i:], m.MoreText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.MoreText)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelNewDetailCustomItem2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelNewDetailCustomItem2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelNewDetailCustomItem2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Position != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x28
	}
	if m.Badge != nil {
		{
			size, err := m.Badge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Option) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Option) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Option) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Option) > 0 {
		for iNdEx := len(m.Option) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Option[iNdEx])
			copy(dAtA[i:], m.Option[iNdEx])
			i = encodeVarintSingle(dAtA, i, uint64(len(m.Option[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Select) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Select) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Select) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RightButton != nil {
		{
			size, err := m.RightButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LeftButton != nil {
		{
			size, err := m.LeftButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverV8) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV8) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV8) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TopRcmdReasonStyle != nil {
		{
			size, err := m.TopRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.BottomRcmdReasonStyle != nil {
		{
			size, err := m.BottomRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RightDesc_2) > 0 {
		i -= len(m.RightDesc_2)
		copy(dAtA[i:], m.RightDesc_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RightDesc_1) > 0 {
		i -= len(m.RightDesc_1)
		copy(dAtA[i:], m.RightDesc_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.RightDesc_1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverBadge) > 0 {
		i -= len(m.CoverBadge)
		copy(dAtA[i:], m.CoverBadge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverBadge)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Introduction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Introduction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Introduction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LargeCoverV4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LargeCoverV4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LargeCoverV4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubParam) > 0 {
		i -= len(m.SubParam)
		copy(dAtA[i:], m.SubParam)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.SubParam)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PlayNumber) > 0 {
		i -= len(m.PlayNumber)
		copy(dAtA[i:], m.PlayNumber)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.PlayNumber)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ShareSubtitle) > 0 {
		i -= len(m.ShareSubtitle)
		copy(dAtA[i:], m.ShareSubtitle)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.ShareSubtitle)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ShortLink) > 0 {
		i -= len(m.ShortLink)
		copy(dAtA[i:], m.ShortLink)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.ShortLink)))
		i--
		dAtA[i] = 0x42
	}
	if m.Up != nil {
		{
			size, err := m.Up.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CanPlay != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CoverBadge) > 0 {
		i -= len(m.CoverBadge)
		copy(dAtA[i:], m.CoverBadge)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverBadge)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CoverLeftText_3) > 0 {
		i -= len(m.CoverLeftText_3)
		copy(dAtA[i:], m.CoverLeftText_3)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_3)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PopularTopEntrance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopularTopEntrance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PopularTopEntrance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSingle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntranceItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntranceItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntranceItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EntranceType != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.EntranceType))
		i--
		dAtA[i] = 0x40
	}
	if m.Bubble != nil {
		{
			size, err := m.Bubble.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSingle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.EntranceId != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.EntranceId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ModuleId) > 0 {
		i -= len(m.ModuleId)
		copy(dAtA[i:], m.ModuleId)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.ModuleId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bubble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bubble) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bubble) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stime != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintSingle(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BubbleContent) > 0 {
		i -= len(m.BubbleContent)
		copy(dAtA[i:], m.BubbleContent)
		i = encodeVarintSingle(dAtA, i, uint64(len(m.BubbleContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSingle(dAtA []byte, offset int, v uint64) int {
	offset -= sovSingle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SmallCoverV5) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverGif)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Up != nil {
		l = m.Up.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverRightText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.HotwordEntrance != nil {
		l = m.HotwordEntrance.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CornerMarkStyle != nil {
		l = m.CornerMarkStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RightIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.RightIcon_1))
	}
	if m.RightIcon_2 != 0 {
		n += 1 + sovSingle(uint64(m.RightIcon_2))
	}
	if m.LeftCornerMarkStyle != nil {
		l = m.LeftCornerMarkStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverRightTextContentDescription)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_1ContentDescription)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverV5Ad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverGif)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Up != nil {
		l = m.Up.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverRightText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.HotwordEntrance != nil {
		l = m.HotwordEntrance.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CornerMarkStyle != nil {
		l = m.CornerMarkStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RightIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.RightIcon_1))
	}
	if m.RightIcon_2 != 0 {
		n += 1 + sovSingle(uint64(m.RightIcon_2))
	}
	if m.LeftCornerMarkStyle != nil {
		l = m.LeftCornerMarkStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverRightTextContentDescription)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_1ContentDescription)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HotwordEntrance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HotwordId != 0 {
		n += 1 + sovSingle(uint64(m.HotwordId))
	}
	l = len(m.HotText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.H5Url)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LargeCoverV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverGif)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_3)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverBadge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.TopRcmdReason)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.BottomRcmdReason)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovSingle(uint64(m.OfficialIcon))
	}
	if m.CanPlay != 0 {
		n += 1 + sovSingle(uint64(m.CanPlay))
	}
	if m.TopRcmdReasonStyle != nil {
		l = m.TopRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.BottomRcmdReasonStyle != nil {
		l = m.BottomRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RcmdReasonStyleV2 != nil {
		l = m.RcmdReasonStyleV2.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.LeftCoverBadgeStyle != nil {
		l = m.LeftCoverBadgeStyle.Size()
		n += 2 + l + sovSingle(uint64(l))
	}
	if m.RightCoverBadgeStyle != nil {
		l = m.RightCoverBadgeStyle.Size()
		n += 2 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverBadge_2)
	if l > 0 {
		n += 2 + l + sovSingle(uint64(l))
	}
	if m.LikeButton != nil {
		l = m.LikeButton.Size()
		n += 2 + l + sovSingle(uint64(l))
	}
	if m.TitleSingleLine != 0 {
		n += 2 + sovSingle(uint64(m.TitleSingleLine))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 2 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemAllV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.TopRcmdReasonStyle != nil {
		l = m.TopRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TwoItemHV1Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Args != nil {
		l = m.Args.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RcmdOneItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.TopRcmdReasonStyle != nil {
		l = m.TopRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverRcmdItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverRightText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverGif)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RightIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.RightIcon_1))
	}
	if m.RightIcon_2 != 0 {
		n += 1 + sovSingle(uint64(m.RightIcon_2))
	}
	l = len(m.CoverRightTextContentDescription)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_1ContentDescription)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.TitleIcon != 0 {
		n += 1 + sovSingle(uint64(m.TitleIcon))
	}
	l = len(m.MoreUri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemV1Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon))
	}
	l = len(m.Desc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HotTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HotTopicItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicHot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.TopLeftTitle)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreUri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Covers) > 0 {
		for _, s := range m.Covers {
			l = len(s)
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.TopRcmdReasonStyle != nil {
		l = m.TopRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MiddleCoverV3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverBadgeStyle != nil {
		l = m.CoverBadgeStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverBadge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_3)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.TitleRightText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.TitleRightPic != 0 {
		n += 1 + sovSingle(uint64(m.TitleRightPic))
	}
	if m.TopRcmdReasonStyle != nil {
		l = m.TopRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MiddleCover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovSingle(uint64(m.Ratio))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverLeftText_3)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.TopRcmdReasonStyle != nil {
		l = m.TopRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemHItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverType != 0 {
		n += 1 + sovSingle(uint64(m.CoverType))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovSingle(uint64(m.OfficialIcon))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemHV3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Covers) > 0 {
		for _, s := range m.Covers {
			l = len(s)
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	l = len(m.CoverTopText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverTopText_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovSingle(uint64(m.OfficialIcon))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TwoItemV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TwoItemV1Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverBadge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoverOnly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Banner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.BannerItem) > 0 {
		for _, e := range m.BannerItem {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Topstick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelSquare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelSquareItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverLeftText_3)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemHV4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreUri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemHV4Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverBadge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpRcmdCover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverType != 0 {
		n += 1 + sovSingle(uint64(m.CoverType))
	}
	if m.Level != 0 {
		n += 1 + sovSingle(uint64(m.Level))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovSingle(uint64(m.OfficialIcon))
	}
	l = len(m.Desc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_3)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemAllItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverType != 0 {
		n += 1 + sovSingle(uint64(m.CoverType))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovSingle(uint64(m.OfficialIcon))
	}
	if m.VipType != 0 {
		n += 1 + sovSingle(uint64(m.VipType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TwoItemHV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverV6) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverConvergeV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverRightTopText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RcmdReasonStyleV2 != nil {
		l = m.RcmdReasonStyleV2.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelNew) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.DescButton_2 != nil {
		l = m.DescButton_2.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelNewItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverLeftText_3)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.LeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LargeChannelSpecial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.BgCover)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RcmdReasonStyle_2 != nil {
		l = m.RcmdReasonStyle_2.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelThreeItemHV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreUri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelNewDetailCustomItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_1))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovSingle(uint64(m.Position))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelThreeItemHV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.MoreUri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelNewDetailCustomItem2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovSingle(uint64(m.CoverLeftIcon_1))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovSingle(uint64(m.Position))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Option) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Option) > 0 {
		for _, s := range m.Option {
			l = len(s)
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.LeftButton != nil {
		l = m.LeftButton.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.RightButton != nil {
		l = m.RightButton.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverV8) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverBadge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.RightDesc_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.BottomRcmdReasonStyle != nil {
		l = m.BottomRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.TopRcmdReasonStyle != nil {
		l = m.TopRcmdReasonStyle.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Introduction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LargeCoverV4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverLeftText_3)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.CoverBadge)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.CanPlay != 0 {
		n += 1 + sovSingle(uint64(m.CanPlay))
	}
	if m.Up != nil {
		l = m.Up.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.ShortLink)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.ShareSubtitle)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.PlayNumber)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.SubParam)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PopularTopEntrance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSingle(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntranceItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.ModuleId)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.EntranceId != 0 {
		n += 1 + sovSingle(uint64(m.EntranceId))
	}
	if m.Bubble != nil {
		l = m.Bubble.Size()
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.EntranceType != 0 {
		n += 1 + sovSingle(uint64(m.EntranceType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bubble) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BubbleContent)
	if l > 0 {
		n += 1 + l + sovSingle(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovSingle(uint64(m.Version))
	}
	if m.Stime != 0 {
		n += 1 + sovSingle(uint64(m.Stime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSingle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSingle(x uint64) (n int) {
	return sovSingle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SmallCoverV5) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV5: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV5: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverGif", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverGif = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Up == nil {
				m.Up = &Up{}
			}
			if err := m.Up.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotwordEntrance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HotwordEntrance == nil {
				m.HotwordEntrance = &HotwordEntrance{}
			}
			if err := m.HotwordEntrance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CornerMarkStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CornerMarkStyle == nil {
				m.CornerMarkStyle = &ReasonStyle{}
			}
			if err := m.CornerMarkStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightIcon_1", wireType)
			}
			m.RightIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightIcon_2", wireType)
			}
			m.RightIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCornerMarkStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftCornerMarkStyle == nil {
				m.LeftCornerMarkStyle = &ReasonStyle{}
			}
			if err := m.LeftCornerMarkStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightTextContentDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightTextContentDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_1ContentDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_1ContentDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV5Ad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV5Ad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV5Ad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverGif", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverGif = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Up == nil {
				m.Up = &Up{}
			}
			if err := m.Up.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotwordEntrance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HotwordEntrance == nil {
				m.HotwordEntrance = &HotwordEntrance{}
			}
			if err := m.HotwordEntrance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CornerMarkStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CornerMarkStyle == nil {
				m.CornerMarkStyle = &ReasonStyle{}
			}
			if err := m.CornerMarkStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightIcon_1", wireType)
			}
			m.RightIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightIcon_2", wireType)
			}
			m.RightIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCornerMarkStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftCornerMarkStyle == nil {
				m.LeftCornerMarkStyle = &ReasonStyle{}
			}
			if err := m.LeftCornerMarkStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightTextContentDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightTextContentDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_1ContentDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_1ContentDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotwordEntrance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotwordEntrance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotwordEntrance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotwordId", wireType)
			}
			m.HotwordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotwordId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H5Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LargeCoverV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LargeCoverV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LargeCoverV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverGif", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverGif = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBadge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopRcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomRcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BottomRcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRcmdReasonStyle == nil {
				m.TopRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.TopRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BottomRcmdReasonStyle == nil {
				m.BottomRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.BottomRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyleV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyleV2 == nil {
				m.RcmdReasonStyleV2 = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyleV2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCoverBadgeStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftCoverBadgeStyle == nil {
				m.LeftCoverBadgeStyle = &ReasonStyle{}
			}
			if err := m.LeftCoverBadgeStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightCoverBadgeStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightCoverBadgeStyle == nil {
				m.RightCoverBadgeStyle = &ReasonStyle{}
			}
			if err := m.RightCoverBadgeStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadge_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBadge_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeButton == nil {
				m.LikeButton = &LikeButton{}
			}
			if err := m.LikeButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleSingleLine", wireType)
			}
			m.TitleSingleLine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleSingleLine |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemAllV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemAllV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemAllV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRcmdReasonStyle == nil {
				m.TopRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.TopRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &TwoItemHV1Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwoItemHV1Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwoItemHV1Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwoItemHV1Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = &Args{}
			}
			if err := m.Args.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RcmdOneItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RcmdOneItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RcmdOneItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRcmdReasonStyle == nil {
				m.TopRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.TopRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &SmallCoverRcmdItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverRcmdItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverRcmdItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverRcmdItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverGif", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverGif = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightIcon_1", wireType)
			}
			m.RightIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightIcon_2", wireType)
			}
			m.RightIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightTextContentDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightTextContentDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_1ContentDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_1ContentDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleIcon", wireType)
			}
			m.TitleIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ThreeItemV1Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemV1Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemV1Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemV1Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon", wireType)
			}
			m.CoverLeftIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &HotTopicItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotTopicItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotTopicItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotTopicItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicHot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicHot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicHot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLeftTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopLeftTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Covers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Covers = append(m.Covers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRcmdReasonStyle == nil {
				m.TopRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.TopRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiddleCoverV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiddleCoverV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiddleCoverV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadgeStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoverBadgeStyle == nil {
				m.CoverBadgeStyle = &ReasonStyle{}
			}
			if err := m.CoverBadgeStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBadge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleRightPic", wireType)
			}
			m.TitleRightPic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleRightPic |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRcmdReasonStyle == nil {
				m.TopRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.TopRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiddleCover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiddleCover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiddleCover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRcmdReasonStyle == nil {
				m.TopRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.TopRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ThreeItemHItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemHItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemHItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemHItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverType", wireType)
			}
			m.CoverType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverType |= go_gateway_app_app_svr_app_card_interface_model.Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemHV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemHV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemHV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Covers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Covers = append(m.Covers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverTopText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverTopText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverTopText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverTopText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwoItemV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwoItemV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwoItemV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TwoItemV1Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwoItemV1Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwoItemV1Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwoItemV1Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBadge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoverOnly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoverOnly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoverOnly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Banner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Banner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Banner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannerItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BannerItem = append(m.BannerItem, &BannerItem{})
			if err := m.BannerItem[len(m.BannerItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topstick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topstick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topstick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelSquare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelSquare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelSquare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &ChannelSquareItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelSquareItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelSquareItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelSquareItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemHV4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemHV4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemHV4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ThreeItemHV4Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemHV4Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemHV4Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemHV4Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBadge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpRcmdCover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpRcmdCover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpRcmdCover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverType", wireType)
			}
			m.CoverType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverType |= go_gateway_app_app_svr_app_card_interface_model.Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ThreeItemAllItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemAllItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemAllItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemAllItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverType", wireType)
			}
			m.CoverType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverType |= go_gateway_app_app_svr_app_card_interface_model.Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			m.VipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwoItemHV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwoItemHV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwoItemHV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &TwoItemHV1Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV6) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV6: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV6: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverConvergeV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverConvergeV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverConvergeV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightTopText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightTopText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyleV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyleV2 == nil {
				m.RcmdReasonStyleV2 = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyleV2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescButton_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DescButton_2 == nil {
				m.DescButton_2 = &Button{}
			}
			if err := m.DescButton_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ChannelNewItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelNewItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelNewItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelNewItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &ChannelBadge{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LargeChannelSpecial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LargeChannelSpecial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LargeChannelSpecial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle_2 == nil {
				m.RcmdReasonStyle_2 = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelThreeItemHV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelThreeItemHV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelThreeItemHV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ChannelNewDetailCustomItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelNewDetailCustomItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelNewDetailCustomItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelNewDetailCustomItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &ChannelBadge{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelThreeItemHV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelThreeItemHV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelThreeItemHV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ChannelNewDetailCustomItem2{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelNewDetailCustomItem2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelNewDetailCustomItem2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelNewDetailCustomItem2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &ChannelBadge{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Option) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Option: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Option: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = append(m.Option, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Select) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Select: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Select: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftButton == nil {
				m.LeftButton = &Button{}
			}
			if err := m.LeftButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightButton == nil {
				m.RightButton = &Button{}
			}
			if err := m.RightButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV8) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV8: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV8: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBadge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDesc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightDesc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BottomRcmdReasonStyle == nil {
				m.BottomRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.BottomRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRcmdReasonStyle == nil {
				m.TopRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.TopRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Introduction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Introduction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Introduction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LargeCoverV4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LargeCoverV4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LargeCoverV4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBadge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Up == nil {
				m.Up = &Up{}
			}
			if err := m.Up.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareSubtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareSubtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopularTopEntrance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopularTopEntrance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopularTopEntrance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &EntranceItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntranceItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntranceItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntranceItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntranceId", wireType)
			}
			m.EntranceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntranceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bubble", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bubble == nil {
				m.Bubble = &Bubble{}
			}
			if err := m.Bubble.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntranceType", wireType)
			}
			m.EntranceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntranceType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bubble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bubble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bubble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BubbleContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSingle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSingle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BubbleContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSingle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSingle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSingle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSingle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSingle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSingle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSingle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSingle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSingle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSingle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSingle = fmt.Errorf("proto: unexpected end of group")
)
