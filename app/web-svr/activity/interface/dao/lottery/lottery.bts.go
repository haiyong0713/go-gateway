// Code generated by kratos tool btsgen. DO NOT EDIT.

/*
  Package lottery is a generated cache proxy package.
  It is generated from:
  type _bts interface {
		// bts: -nullcache=&lottery.WxLotteryLog{ID:-1} -check_null_code=$!=nil&&$.ID==-1 -struct_name=Dao
		WxLotteryLog(ctx context.Context, mid int64) (*lottery.WxLotteryLog, error)
		// bts: -nullcache=&lottery.WxLotteryHis{ID:-1} -check_null_code=$!=nil&&$.ID==-1 -struct_name=Dao
		WxLotteryHisByBuvid(ctx context.Context, buvid string) (*lottery.WxLotteryHis, error)
	}
*/

package lottery

import (
	"context"

	"go-common/library/cache"
	"go-gateway/app/web-svr/activity/interface/model/lottery"
)

var _ _bts

// WxLotteryLog get data from cache if miss will call source method, then add to cache.
func (d *Dao) WxLotteryLog(c context.Context, mid int64) (res *lottery.WxLotteryLog, err error) {
	addCache := true
	res, err = d.CacheWxLotteryLog(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res != nil && res.ID == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:WxLotteryLog")
		return
	}
	cache.MetricMisses.Inc("bts:WxLotteryLog")
	res, err = d.RawWxLotteryLog(c, mid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &lottery.WxLotteryLog{ID: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheWxLotteryLog(c, mid, miss)
	})
	return
}

// WxLotteryHisByBuvid get data from cache if miss will call source method, then add to cache.
func (d *Dao) WxLotteryHisByBuvid(c context.Context, buvid string) (res *lottery.WxLotteryHis, err error) {
	addCache := true
	res, err = d.CacheWxLotteryHisByBuvid(c, buvid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res != nil && res.ID == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:WxLotteryHisByBuvid")
		return
	}
	cache.MetricMisses.Inc("bts:WxLotteryHisByBuvid")
	res, err = d.RawWxLotteryHisByBuvid(c, buvid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &lottery.WxLotteryHis{ID: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheWxLotteryHisByBuvid(c, buvid, miss)
	})
	return
}
