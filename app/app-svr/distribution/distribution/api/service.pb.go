// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/distribution/distribution/api/service.proto

package api

import (
	context "context"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserPreferenceReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPreferenceReq) Reset()         { *m = UserPreferenceReq{} }
func (m *UserPreferenceReq) String() string { return proto.CompactTextString(m) }
func (*UserPreferenceReq) ProtoMessage()    {}
func (*UserPreferenceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8891e05838809cb, []int{0}
}
func (m *UserPreferenceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPreferenceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPreferenceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPreferenceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPreferenceReq.Merge(m, src)
}
func (m *UserPreferenceReq) XXX_Size() int {
	return m.Size()
}
func (m *UserPreferenceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPreferenceReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserPreferenceReq proto.InternalMessageInfo

type UserPreferenceReply struct {
	Preference           []*types.Any `protobuf:"bytes,1,rep,name=preference,proto3" json:"preference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserPreferenceReply) Reset()         { *m = UserPreferenceReply{} }
func (m *UserPreferenceReply) String() string { return proto.CompactTextString(m) }
func (*UserPreferenceReply) ProtoMessage()    {}
func (*UserPreferenceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8891e05838809cb, []int{1}
}
func (m *UserPreferenceReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPreferenceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPreferenceReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPreferenceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPreferenceReply.Merge(m, src)
}
func (m *UserPreferenceReply) XXX_Size() int {
	return m.Size()
}
func (m *UserPreferenceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPreferenceReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserPreferenceReply proto.InternalMessageInfo

func (m *UserPreferenceReply) GetPreference() []*types.Any {
	if m != nil {
		return m.Preference
	}
	return nil
}

type SetUserPreferenceReq struct {
	Preference           []*types.Any      `protobuf:"bytes,1,rep,name=preference,proto3" json:"preference,omitempty"`
	ExtraContext         map[string]string `protobuf:"bytes,2,rep,name=extra_context,json=extraContext,proto3" json:"extra_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetUserPreferenceReq) Reset()         { *m = SetUserPreferenceReq{} }
func (m *SetUserPreferenceReq) String() string { return proto.CompactTextString(m) }
func (*SetUserPreferenceReq) ProtoMessage()    {}
func (*SetUserPreferenceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8891e05838809cb, []int{2}
}
func (m *SetUserPreferenceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUserPreferenceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUserPreferenceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUserPreferenceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserPreferenceReq.Merge(m, src)
}
func (m *SetUserPreferenceReq) XXX_Size() int {
	return m.Size()
}
func (m *SetUserPreferenceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserPreferenceReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserPreferenceReq proto.InternalMessageInfo

func (m *SetUserPreferenceReq) GetPreference() []*types.Any {
	if m != nil {
		return m.Preference
	}
	return nil
}

func (m *SetUserPreferenceReq) GetExtraContext() map[string]string {
	if m != nil {
		return m.ExtraContext
	}
	return nil
}

type SetUserPreferenceReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUserPreferenceReply) Reset()         { *m = SetUserPreferenceReply{} }
func (m *SetUserPreferenceReply) String() string { return proto.CompactTextString(m) }
func (*SetUserPreferenceReply) ProtoMessage()    {}
func (*SetUserPreferenceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8891e05838809cb, []int{3}
}
func (m *SetUserPreferenceReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUserPreferenceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUserPreferenceReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUserPreferenceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUserPreferenceReply.Merge(m, src)
}
func (m *SetUserPreferenceReply) XXX_Size() int {
	return m.Size()
}
func (m *SetUserPreferenceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUserPreferenceReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetUserPreferenceReply proto.InternalMessageInfo

type GetUserPreferenceReq struct {
	TypeUrl              []string          `protobuf:"bytes,1,rep,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	ExtraContext         map[string]string `protobuf:"bytes,2,rep,name=extra_context,json=extraContext,proto3" json:"extra_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetUserPreferenceReq) Reset()         { *m = GetUserPreferenceReq{} }
func (m *GetUserPreferenceReq) String() string { return proto.CompactTextString(m) }
func (*GetUserPreferenceReq) ProtoMessage()    {}
func (*GetUserPreferenceReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8891e05838809cb, []int{4}
}
func (m *GetUserPreferenceReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserPreferenceReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserPreferenceReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserPreferenceReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserPreferenceReq.Merge(m, src)
}
func (m *GetUserPreferenceReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUserPreferenceReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserPreferenceReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserPreferenceReq proto.InternalMessageInfo

func (m *GetUserPreferenceReq) GetTypeUrl() []string {
	if m != nil {
		return m.TypeUrl
	}
	return nil
}

func (m *GetUserPreferenceReq) GetExtraContext() map[string]string {
	if m != nil {
		return m.ExtraContext
	}
	return nil
}

type GetUserPreferenceReply struct {
	Value                []*types.Any `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetUserPreferenceReply) Reset()         { *m = GetUserPreferenceReply{} }
func (m *GetUserPreferenceReply) String() string { return proto.CompactTextString(m) }
func (*GetUserPreferenceReply) ProtoMessage()    {}
func (*GetUserPreferenceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8891e05838809cb, []int{5}
}
func (m *GetUserPreferenceReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserPreferenceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserPreferenceReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserPreferenceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserPreferenceReply.Merge(m, src)
}
func (m *GetUserPreferenceReply) XXX_Size() int {
	return m.Size()
}
func (m *GetUserPreferenceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserPreferenceReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserPreferenceReply proto.InternalMessageInfo

func (m *GetUserPreferenceReply) GetValue() []*types.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*UserPreferenceReq)(nil), "bilibili.app.distribution.v1.UserPreferenceReq")
	proto.RegisterType((*UserPreferenceReply)(nil), "bilibili.app.distribution.v1.UserPreferenceReply")
	proto.RegisterType((*SetUserPreferenceReq)(nil), "bilibili.app.distribution.v1.SetUserPreferenceReq")
	proto.RegisterMapType((map[string]string)(nil), "bilibili.app.distribution.v1.SetUserPreferenceReq.ExtraContextEntry")
	proto.RegisterType((*SetUserPreferenceReply)(nil), "bilibili.app.distribution.v1.SetUserPreferenceReply")
	proto.RegisterType((*GetUserPreferenceReq)(nil), "bilibili.app.distribution.v1.GetUserPreferenceReq")
	proto.RegisterMapType((map[string]string)(nil), "bilibili.app.distribution.v1.GetUserPreferenceReq.ExtraContextEntry")
	proto.RegisterType((*GetUserPreferenceReply)(nil), "bilibili.app.distribution.v1.GetUserPreferenceReply")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/distribution/distribution/api/service.proto", fileDescriptor_e8891e05838809cb)
}

var fileDescriptor_e8891e05838809cb = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x52, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0x76, 0x5a, 0xfc, 0xd8, 0xd7, 0x55, 0xec, 0xb4, 0x2c, 0xd9, 0x22, 0x65, 0x89, 0x97, 0x45,
	0xd8, 0x09, 0x5b, 0xf7, 0x20, 0x5e, 0xa4, 0xb5, 0x4b, 0x10, 0x2f, 0x25, 0xb2, 0x17, 0x2f, 0xcb,
	0xa4, 0xbe, 0x5b, 0x06, 0x63, 0x66, 0x9c, 0x4c, 0xe2, 0xce, 0xc1, 0x8b, 0xbf, 0xc2, 0xb3, 0xbf,
	0xc6, 0xa3, 0x7f, 0x40, 0x90, 0xfa, 0x27, 0x3c, 0x4a, 0x12, 0x57, 0x52, 0x13, 0x0b, 0xe9, 0xc5,
	0xc3, 0x40, 0xe6, 0xe5, 0xf9, 0x98, 0xe7, 0x7d, 0x02, 0xd3, 0xa5, 0x3c, 0x5a, 0x72, 0x83, 0xef,
	0xb9, 0xf5, 0xb8, 0x52, 0xf9, 0x39, 0x4a, 0x32, 0xed, 0xbd, 0x16, 0x89, 0xd1, 0x22, 0x4c, 0x8d,
	0x90, 0xf1, 0xfa, 0x85, 0x2b, 0xe1, 0x25, 0xa8, 0x33, 0xb1, 0x40, 0xa6, 0xb4, 0x34, 0x92, 0xde,
	0x0f, 0x45, 0x24, 0xf2, 0xc3, 0xb8, 0x52, 0xac, 0x0a, 0x66, 0xd9, 0xf1, 0x70, 0x7f, 0x29, 0xe5,
	0x32, 0x42, 0xaf, 0xc0, 0x86, 0xe9, 0x85, 0xc7, 0x63, 0x5b, 0x12, 0xdd, 0x3e, 0xf4, 0xce, 0x12,
	0xd4, 0x73, 0x8d, 0x17, 0xa8, 0x31, 0x5e, 0x60, 0x80, 0xef, 0xdc, 0x17, 0xd0, 0xff, 0x7b, 0xa8,
	0x22, 0x4b, 0x4f, 0x00, 0xd4, 0x9f, 0x91, 0x43, 0x0e, 0xba, 0x87, 0xb7, 0xc7, 0x03, 0x56, 0x6a,
	0xb3, 0x2b, 0x6d, 0x36, 0x89, 0x6d, 0x50, 0xc1, 0xb9, 0x3f, 0x09, 0x0c, 0x5e, 0xa2, 0xa9, 0xb9,
	0x6c, 0x27, 0x47, 0x05, 0xdc, 0xc1, 0x4b, 0xa3, 0xf9, 0xf9, 0x42, 0xc6, 0x06, 0x2f, 0x8d, 0xd3,
	0x29, 0x88, 0x33, 0xb6, 0x69, 0x03, 0xac, 0xe9, 0x01, 0xec, 0x34, 0xd7, 0x79, 0x56, 0xca, 0x9c,
	0xc6, 0x46, 0xdb, 0x60, 0x17, 0x2b, 0xa3, 0xe1, 0x53, 0xe8, 0xd5, 0x20, 0xf4, 0x1e, 0x74, 0xdf,
	0xa0, 0x75, 0xc8, 0x01, 0x39, 0xdc, 0x09, 0xf2, 0x4f, 0x3a, 0x80, 0xeb, 0x19, 0x8f, 0x52, 0x74,
	0x3a, 0xc5, 0xac, 0xbc, 0x3c, 0xe9, 0x3c, 0x26, 0xae, 0x03, 0x7b, 0x0d, 0xc6, 0x2a, 0xb2, 0xee,
	0x37, 0x02, 0x03, 0xbf, 0x69, 0x29, 0xfb, 0x70, 0xcb, 0x58, 0x85, 0xe7, 0xa9, 0x8e, 0x8a, 0x95,
	0xec, 0x04, 0x37, 0xf3, 0xfb, 0x99, 0x8e, 0xb6, 0x4c, 0xee, 0xff, 0x97, 0xe4, 0x33, 0xd8, 0xf3,
	0x1b, 0x93, 0xd3, 0x87, 0x57, 0x9c, 0x4d, 0x85, 0x97, 0x90, 0xf1, 0xc7, 0x2e, 0xec, 0xce, 0x2a,
	0x79, 0xa8, 0x81, 0xbb, 0xeb, 0x9a, 0xd4, 0xdb, 0x9c, 0xbe, 0x16, 0x7d, 0x78, 0xdc, 0x8e, 0x90,
	0x3f, 0xf9, 0x03, 0xf4, 0x6a, 0x35, 0xd2, 0x71, 0xfb, 0x1f, 0x6e, 0x78, 0xd2, 0x9a, 0xf3, 0xdb,
	0xde, 0x6f, 0x6b, 0xef, 0x6f, 0x61, 0xdf, 0x5c, 0xd8, 0x34, 0xf8, 0xb2, 0x1a, 0x91, 0xaf, 0xab,
	0x11, 0xf9, 0xbe, 0x1a, 0x91, 0x4f, 0x3f, 0x46, 0xd7, 0xe0, 0xc1, 0x42, 0xbe, 0x65, 0x21, 0x57,
	0x22, 0xf9, 0xb7, 0xe0, 0x9c, 0xbc, 0xea, 0x72, 0x25, 0x3e, 0x77, 0xfa, 0xd3, 0xc9, 0xfc, 0xf9,
	0x44, 0xa9, 0x6a, 0x8f, 0xe1, 0x8d, 0xa2, 0xed, 0x47, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf9,
	0xee, 0xca, 0xfd, 0xfb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DistributionClient is the client API for Distribution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DistributionClient interface {
	UserPreference(ctx context.Context, in *UserPreferenceReq, opts ...grpc.CallOption) (*UserPreferenceReply, error)
	SetUserPreference(ctx context.Context, in *SetUserPreferenceReq, opts ...grpc.CallOption) (*SetUserPreferenceReply, error)
	GetUserPreference(ctx context.Context, in *GetUserPreferenceReq, opts ...grpc.CallOption) (*GetUserPreferenceReply, error)
}

type distributionClient struct {
	cc *grpc.ClientConn
}

func NewDistributionClient(cc *grpc.ClientConn) DistributionClient {
	return &distributionClient{cc}
}

func (c *distributionClient) UserPreference(ctx context.Context, in *UserPreferenceReq, opts ...grpc.CallOption) (*UserPreferenceReply, error) {
	out := new(UserPreferenceReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.distribution.v1.Distribution/UserPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) SetUserPreference(ctx context.Context, in *SetUserPreferenceReq, opts ...grpc.CallOption) (*SetUserPreferenceReply, error) {
	out := new(SetUserPreferenceReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.distribution.v1.Distribution/SetUserPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionClient) GetUserPreference(ctx context.Context, in *GetUserPreferenceReq, opts ...grpc.CallOption) (*GetUserPreferenceReply, error) {
	out := new(GetUserPreferenceReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.distribution.v1.Distribution/GetUserPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionServer is the server API for Distribution service.
type DistributionServer interface {
	UserPreference(context.Context, *UserPreferenceReq) (*UserPreferenceReply, error)
	SetUserPreference(context.Context, *SetUserPreferenceReq) (*SetUserPreferenceReply, error)
	GetUserPreference(context.Context, *GetUserPreferenceReq) (*GetUserPreferenceReply, error)
}

// UnimplementedDistributionServer can be embedded to have forward compatible implementations.
type UnimplementedDistributionServer struct {
}

func (*UnimplementedDistributionServer) UserPreference(ctx context.Context, req *UserPreferenceReq) (*UserPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPreference not implemented")
}
func (*UnimplementedDistributionServer) SetUserPreference(ctx context.Context, req *SetUserPreferenceReq) (*SetUserPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPreference not implemented")
}
func (*UnimplementedDistributionServer) GetUserPreference(ctx context.Context, req *GetUserPreferenceReq) (*GetUserPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreference not implemented")
}

func RegisterDistributionServer(s *grpc.Server, srv DistributionServer) {
	s.RegisterService(&_Distribution_serviceDesc, srv)
}

func _Distribution_UserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPreferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).UserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.distribution.v1.Distribution/UserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).UserPreference(ctx, req.(*UserPreferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_SetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPreferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).SetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.distribution.v1.Distribution/SetUserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).SetUserPreference(ctx, req.(*SetUserPreferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distribution_GetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPreferenceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServer).GetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.distribution.v1.Distribution/GetUserPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServer).GetUserPreference(ctx, req.(*GetUserPreferenceReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Distribution_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.distribution.v1.Distribution",
	HandlerType: (*DistributionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserPreference",
			Handler:    _Distribution_UserPreference_Handler,
		},
		{
			MethodName: "SetUserPreference",
			Handler:    _Distribution_SetUserPreference_Handler,
		},
		{
			MethodName: "GetUserPreference",
			Handler:    _Distribution_GetUserPreference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/distribution/distribution/api/service.proto",
}

func (m *UserPreferenceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPreferenceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPreferenceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UserPreferenceReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPreferenceReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPreferenceReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Preference) > 0 {
		for iNdEx := len(m.Preference) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Preference[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetUserPreferenceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserPreferenceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUserPreferenceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtraContext) > 0 {
		for k := range m.ExtraContext {
			v := m.ExtraContext[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Preference) > 0 {
		for iNdEx := len(m.Preference) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Preference[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetUserPreferenceReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUserPreferenceReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUserPreferenceReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetUserPreferenceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPreferenceReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserPreferenceReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtraContext) > 0 {
		for k := range m.ExtraContext {
			v := m.ExtraContext[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TypeUrl) > 0 {
		for iNdEx := len(m.TypeUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeUrl[iNdEx])
			copy(dAtA[i:], m.TypeUrl[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.TypeUrl[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetUserPreferenceReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserPreferenceReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserPreferenceReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserPreferenceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserPreferenceReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Preference) > 0 {
		for _, e := range m.Preference {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetUserPreferenceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Preference) > 0 {
		for _, e := range m.Preference {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.ExtraContext) > 0 {
		for k, v := range m.ExtraContext {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetUserPreferenceReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserPreferenceReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TypeUrl) > 0 {
		for _, s := range m.TypeUrl {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.ExtraContext) > 0 {
		for k, v := range m.ExtraContext {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserPreferenceReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPreferenceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPreferenceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPreferenceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPreferenceReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPreferenceReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPreferenceReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preference = append(m.Preference, &types.Any{})
			if err := m.Preference[len(m.Preference)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserPreferenceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserPreferenceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserPreferenceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preference = append(m.Preference, &types.Any{})
			if err := m.Preference[len(m.Preference)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraContext == nil {
				m.ExtraContext = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraContext[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUserPreferenceReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUserPreferenceReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUserPreferenceReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPreferenceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserPreferenceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserPreferenceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = append(m.TypeUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraContext == nil {
				m.ExtraContext = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraContext[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserPreferenceReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserPreferenceReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserPreferenceReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &types.Any{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
