// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-listener/interface/api/v1/api.proto

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	pagination "git.bilibili.co/bapis/bapis-go/bilibili/pagination"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	go_common_library_time "go-common/library/time"
	history "go-gateway/app/app-svr/app-interface/interface-legacy/api/history"
	v1 "go-gateway/app/app-svr/archive/middleware/v1"
	v2 "go-gateway/app/app-svr/playurl/service/api/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlaylistSource int32

const (
	// 默认 使用上次服务端保存的列表
	PlaylistSource_DEFAULT PlaylistSource = 0
	// 获取指定用户的全部音频投稿，替换当前播单
	PlaylistSource_MEM_SPACE PlaylistSource = 1
	// 从音频合辑获取，替换当前播单
	PlaylistSource_AUDIO_COLLECTION PlaylistSource = 2
	// 单个音频进列表，替换当前播单
	// 常用于主站收藏/动态音频卡/视频关联的音频卡
	PlaylistSource_AUDIO_CARD PlaylistSource = 3
	// 从用户收藏夹获取，替换当前播单
	// 使用该类型的时候必须在extra_id字段额外提供收藏夹类型
	PlaylistSource_USER_FAVOURITE PlaylistSource = 4
	// TODO:（保留）从up主视频稿件详情获取
	// 目前从UP稿件三点进入是推荐播单，请使用RcmdPlaylist接口
	PlaylistSource_UP_ARCHIVE PlaylistSource = 5
	// TODO: (保留) 从音频缓存获取，替换当前播单
	// Deprecated: 无用设计
	PlaylistSource_AUDIO_CACHE PlaylistSource = 6
	// 从发现页播单获取，替换当前播单
	PlaylistSource_PICK_CARD PlaylistSource = 7
	// 从播单带入续播，用于空间投稿/稍后再看/每周必看/系列连播/合集 等
	// 使用该类型时必须在extra_id字段透传播单类型，在id字段填写物料id
	PlaylistSource_MEDIA_LIST PlaylistSource = 8
)

var PlaylistSource_name = map[int32]string{
	0: "DEFAULT",
	1: "MEM_SPACE",
	2: "AUDIO_COLLECTION",
	3: "AUDIO_CARD",
	4: "USER_FAVOURITE",
	5: "UP_ARCHIVE",
	6: "AUDIO_CACHE",
	7: "PICK_CARD",
	8: "MEDIA_LIST",
}

var PlaylistSource_value = map[string]int32{
	"DEFAULT":          0,
	"MEM_SPACE":        1,
	"AUDIO_COLLECTION": 2,
	"AUDIO_CARD":       3,
	"USER_FAVOURITE":   4,
	"UP_ARCHIVE":       5,
	"AUDIO_CACHE":      6,
	"PICK_CARD":        7,
	"MEDIA_LIST":       8,
}

func (x PlaylistSource) String() string {
	return proto.EnumName(PlaylistSource_name, int32(x))
}

func (PlaylistSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{0}
}

// 列表顺序 通常和ListSort配合使用
type ListOrder int32

const (
	// 默认 服务端按场景自行判断
	ListOrder_NO_ORDER ListOrder = 0
	// 正序
	ListOrder_ORDER_NORMAL ListOrder = 1
	// 逆序
	ListOrder_ORDER_REVERSE ListOrder = 2
	// 随机
	ListOrder_ORDER_RANDOM ListOrder = 3
)

var ListOrder_name = map[int32]string{
	0: "NO_ORDER",
	1: "ORDER_NORMAL",
	2: "ORDER_REVERSE",
	3: "ORDER_RANDOM",
}

var ListOrder_value = map[string]int32{
	"NO_ORDER":      0,
	"ORDER_NORMAL":  1,
	"ORDER_REVERSE": 2,
	"ORDER_RANDOM":  3,
}

func (x ListOrder) String() string {
	return proto.EnumName(ListOrder_name, int32(x))
}

func (ListOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{1}
}

// 列表排序字段
type ListSortField int32

const (
	// 默认 服务端按场景自行判断
	ListSortField_NO_SORT ListSortField = 0
	// 按创建时间
	ListSortField_SORT_CTIME ListSortField = 1
	// 按播放量
	ListSortField_SORT_VIEWCNT ListSortField = 2
	// 按收藏量
	ListSortField_SORT_FAVCNT ListSortField = 3
)

var ListSortField_name = map[int32]string{
	0: "NO_SORT",
	1: "SORT_CTIME",
	2: "SORT_VIEWCNT",
	3: "SORT_FAVCNT",
}

var ListSortField_value = map[string]int32{
	"NO_SORT":      0,
	"SORT_CTIME":   1,
	"SORT_VIEWCNT": 2,
	"SORT_FAVCNT":  3,
}

func (x ListSortField) String() string {
	return proto.EnumName(ListSortField_name, int32(x))
}

func (ListSortField) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{2}
}

type TopCardType int32

const (
	// 默认 无用
	TopCardType_UNSPECIFIED TopCardType = 0
	// 历史记录 落地页为听场景下的历史记录
	TopCardType_LISTEN_HISTORY TopCardType = 1
	// 收藏夹召回卡 落地页为收藏详情页
	TopCardType_FAVORITE_FOLDER TopCardType = 2
	// UP主召回卡 落地页为UP稿件播单页
	TopCardType_UP_RECALL TopCardType = 3
	// 今日精选卡 落地页为发现页
	TopCardType_PICK_TODAY TopCardType = 4
)

var TopCardType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "LISTEN_HISTORY",
	2: "FAVORITE_FOLDER",
	3: "UP_RECALL",
	4: "PICK_TODAY",
}

var TopCardType_value = map[string]int32{
	"UNSPECIFIED":     0,
	"LISTEN_HISTORY":  1,
	"FAVORITE_FOLDER": 2,
	"UP_RECALL":       3,
	"PICK_TODAY":      4,
}

func (x TopCardType) String() string {
	return proto.EnumName(TopCardType_name, int32(x))
}

func (TopCardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{3}
}

type CardModuleType int32

const (
	CardModuleType_Module_invalid CardModuleType = 0
	CardModuleType_Module_header  CardModuleType = 1
	CardModuleType_Module_archive CardModuleType = 2
	CardModuleType_Module_cbtn    CardModuleType = 3
)

var CardModuleType_name = map[int32]string{
	0: "Module_invalid",
	1: "Module_header",
	2: "Module_archive",
	3: "Module_cbtn",
}

var CardModuleType_value = map[string]int32{
	"Module_invalid": 0,
	"Module_header":  1,
	"Module_archive": 2,
	"Module_cbtn":    3,
}

func (x CardModuleType) String() string {
	return proto.EnumName(CardModuleType_name, int32(x))
}

func (CardModuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{4}
}

// 关注状态
type FollowRelation_RelationStatus int32

const (
	// 默认占位符 无实际意义
	FollowRelation_UNSPECIFIED FollowRelation_RelationStatus = 0
	// 未关注
	FollowRelation_NO_FOLLOW FollowRelation_RelationStatus = 1
	// 正在关注
	FollowRelation_FOLLOWING FollowRelation_RelationStatus = 2
	// （以下是保留字段）暂未实现
	// 被关注
	FollowRelation_FOLLOWED FollowRelation_RelationStatus = 3
	// 互相关注
	FollowRelation_MUTUAL_FOLLOWING FollowRelation_RelationStatus = 4
	// 特别关注
	FollowRelation_SPECIAL_FOLLOWING FollowRelation_RelationStatus = 5
)

var FollowRelation_RelationStatus_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "NO_FOLLOW",
	2: "FOLLOWING",
	3: "FOLLOWED",
	4: "MUTUAL_FOLLOWING",
	5: "SPECIAL_FOLLOWING",
}

var FollowRelation_RelationStatus_value = map[string]int32{
	"UNSPECIFIED":       0,
	"NO_FOLLOW":         1,
	"FOLLOWING":         2,
	"FOLLOWED":          3,
	"MUTUAL_FOLLOWING":  4,
	"SPECIAL_FOLLOWING": 5,
}

func (x FollowRelation_RelationStatus) String() string {
	return proto.EnumName(FollowRelation_RelationStatus_name, int32(x))
}

func (FollowRelation_RelationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{18, 0}
}

// 翻页方向
type PageOption_Direction int32

const (
	// 默认 向下滚动
	PageOption_SCROLL_DOWN PageOption_Direction = 0
	// 向上滚动
	PageOption_SCROLL_UP PageOption_Direction = 1
)

var PageOption_Direction_name = map[int32]string{
	0: "SCROLL_DOWN",
	1: "SCROLL_UP",
}

var PageOption_Direction_value = map[string]int32{
	"SCROLL_DOWN": 0,
	"SCROLL_UP":   1,
}

func (x PageOption_Direction) String() string {
	return proto.EnumName(PageOption_Direction_name, int32(x))
}

func (PageOption_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{22, 0}
}

// 操作类型 默认点赞
type ThumbUpReq_ThumbType int32

const (
	ThumbUpReq_LIKE           ThumbUpReq_ThumbType = 0
	ThumbUpReq_CANCEL_LIKE    ThumbUpReq_ThumbType = 1
	ThumbUpReq_DISLIKE        ThumbUpReq_ThumbType = 2
	ThumbUpReq_CANCEL_DISLIKE ThumbUpReq_ThumbType = 3
)

var ThumbUpReq_ThumbType_name = map[int32]string{
	0: "LIKE",
	1: "CANCEL_LIKE",
	2: "DISLIKE",
	3: "CANCEL_DISLIKE",
}

var ThumbUpReq_ThumbType_value = map[string]int32{
	"LIKE":           0,
	"CANCEL_LIKE":    1,
	"DISLIKE":        2,
	"CANCEL_DISLIKE": 3,
}

func (x ThumbUpReq_ThumbType) String() string {
	return proto.EnumName(ThumbUpReq_ThumbType_name, int32(x))
}

func (ThumbUpReq_ThumbType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{32, 0}
}

type RcmdPlaylistReq_RcmdFrom int32

const (
	// 不设置跳转场景
	RcmdPlaylistReq_UNSPECIFIED RcmdPlaylistReq_RcmdFrom = 0
	// 从up的视频稿件跳转（视频详情页三点）
	RcmdPlaylistReq_UP_ARCHIVE RcmdPlaylistReq_RcmdFrom = 1
	// 从首页入口进入
	RcmdPlaylistReq_INDEX_ENTRY RcmdPlaylistReq_RcmdFrom = 2
	// 从视频详情页半屏入口进入（外露的听视频icon）
	RcmdPlaylistReq_ARCHIVE_VIEW RcmdPlaylistReq_RcmdFrom = 3
)

var RcmdPlaylistReq_RcmdFrom_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "UP_ARCHIVE",
	2: "INDEX_ENTRY",
	3: "ARCHIVE_VIEW",
}

var RcmdPlaylistReq_RcmdFrom_value = map[string]int32{
	"UNSPECIFIED":  0,
	"UP_ARCHIVE":   1,
	"INDEX_ENTRY":  2,
	"ARCHIVE_VIEW": 3,
}

func (x RcmdPlaylistReq_RcmdFrom) String() string {
	return proto.EnumName(RcmdPlaylistReq_RcmdFrom_name, int32(x))
}

func (RcmdPlaylistReq_RcmdFrom) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{37, 0}
}

// 点击卡片对应的播放方式
type TopCard_PlayStrategy int32

const (
	TopCard_NO_INTERRUPT TopCard_PlayStrategy = 0
	TopCard_PLAY_TARGET  TopCard_PlayStrategy = 1
	TopCard_PLAY_FIRST   TopCard_PlayStrategy = 2
)

var TopCard_PlayStrategy_name = map[int32]string{
	0: "NO_INTERRUPT",
	1: "PLAY_TARGET",
	2: "PLAY_FIRST",
}

var TopCard_PlayStrategy_value = map[string]int32{
	"NO_INTERRUPT": 0,
	"PLAY_TARGET":  1,
	"PLAY_FIRST":   2,
}

func (x TopCard_PlayStrategy) String() string {
	return proto.EnumName(TopCard_PlayStrategy_name, int32(x))
}

func (TopCard_PlayStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{40, 0}
}

// 动作（添加到这个收藏夹还是从这删除）
type FavFolderAction_Action int32

const (
	FavFolderAction_UNSPECIFIED FavFolderAction_Action = 0
	// 添加
	FavFolderAction_ADD FavFolderAction_Action = 1
	// 删除
	FavFolderAction_DEL FavFolderAction_Action = 2
)

var FavFolderAction_Action_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ADD",
	2: "DEL",
}

var FavFolderAction_Action_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ADD":         1,
	"DEL":         2,
}

func (x FavFolderAction_Action) String() string {
	return proto.EnumName(FavFolderAction_Action_name, int32(x))
}

func (FavFolderAction_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{63, 0}
}

type EventReq_EventType int32

const (
	// 默认 无效
	EventReq_INVALID EventReq_EventType = 0
	// 听视频引导条曝光
	EventReq_GUIDE_BAR_SHOW EventReq_EventType = 1
)

var EventReq_EventType_name = map[int32]string{
	0: "INVALID",
	1: "GUIDE_BAR_SHOW",
}

var EventReq_EventType_value = map[string]int32{
	"INVALID":        0,
	"GUIDE_BAR_SHOW": 1,
}

func (x EventReq_EventType) String() string {
	return proto.EnumName(EventReq_EventType_name, int32(x))
}

func (EventReq_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{80, 0}
}

// 用于标识单个可播放稿件
type PlayItem struct {
	// 用于区分实际的稿件资源类型
	// UGC:1 OGV:2 Audio:3
	ItemType int32 `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	// 资源id
	// 例如 UGC类型就是avid OGV就是epid
	Oid int64 `protobuf:"varint,3,opt,name=oid,proto3" json:"oid,omitempty"`
	// 业务subid 保留字段
	// 一般是cid信息
	// 按需使用
	SubId []int64 `protobuf:"varint,4,rep,packed,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	// 以下是埋点字段 端上直接透传
	Et                   *EventTracking `protobuf:"bytes,5,opt,name=et,proto3" json:"et,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlayItem) Reset()         { *m = PlayItem{} }
func (m *PlayItem) String() string { return proto.CompactTextString(m) }
func (*PlayItem) ProtoMessage()    {}
func (*PlayItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{0}
}
func (m *PlayItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayItem.Merge(m, src)
}
func (m *PlayItem) XXX_Size() int {
	return m.Size()
}
func (m *PlayItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayItem.DiscardUnknown(m)
}

var xxx_messageInfo_PlayItem proto.InternalMessageInfo

func (m *PlayItem) GetItemType() int32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *PlayItem) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *PlayItem) GetSubId() []int64 {
	if m != nil {
		return m.SubId
	}
	return nil
}

func (m *PlayItem) GetEt() *EventTracking {
	if m != nil {
		return m.Et
	}
	return nil
}

// 通用埋点字段
// 用于碾碎插入到每个展示元素中
type EventTracking struct {
	// 数据来源
	// find:发现页 | hist:历史记录
	// reco:AI推荐 | fav:收藏夹 | ugcss:UGC剧集
	// manual:用户指定(例如主动跳转)
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// 数据批次
	// 例如 发现页-播单组ID  | 收藏夹-收藏夹type
	Batch string `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	// 数据组标识
	// 例如 发现页-播单ID | 收藏夹-收藏夹ID | 推荐—AI这组结果的trackID
	// UGC剧集-剧集ID
	TrackId string `protobuf:"bytes,3,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	// 实体类型
	// av-UGC稿件 | ep-PGC稿件 | au-音频稿件
	EntityType string `protobuf:"bytes,4,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	// 实体id
	// av-avid | ep-epid | au-songID
	EntityId string `protobuf:"bytes,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// 埋点字段整合
	// 目前用于数平全局vv/vt表来源上报
	TrackJson            string   `protobuf:"bytes,6,opt,name=track_json,json=trackJson,proto3" json:"track_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTracking) Reset()         { *m = EventTracking{} }
func (m *EventTracking) String() string { return proto.CompactTextString(m) }
func (*EventTracking) ProtoMessage()    {}
func (*EventTracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{1}
}
func (m *EventTracking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTracking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTracking.Merge(m, src)
}
func (m *EventTracking) XXX_Size() int {
	return m.Size()
}
func (m *EventTracking) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTracking.DiscardUnknown(m)
}

var xxx_messageInfo_EventTracking proto.InternalMessageInfo

func (m *EventTracking) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *EventTracking) GetBatch() string {
	if m != nil {
		return m.Batch
	}
	return ""
}

func (m *EventTracking) GetTrackId() string {
	if m != nil {
		return m.TrackId
	}
	return ""
}

func (m *EventTracking) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *EventTracking) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *EventTracking) GetTrackJson() string {
	if m != nil {
		return m.TrackJson
	}
	return ""
}

// 根据playitem刷新playurl
type PlayURLReq struct {
	// 播客稿件标识 type和oid必传  sub_id不传则返回第一p的播放地址
	// 指定多个分p时，最多同时返回3个分p的播放地址
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 复用秒开参数
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,2,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlayURLReq) Reset()         { *m = PlayURLReq{} }
func (m *PlayURLReq) String() string { return proto.CompactTextString(m) }
func (*PlayURLReq) ProtoMessage()    {}
func (*PlayURLReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{2}
}
func (m *PlayURLReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayURLReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayURLReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayURLReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayURLReq.Merge(m, src)
}
func (m *PlayURLReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayURLReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayURLReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayURLReq proto.InternalMessageInfo

func (m *PlayURLReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PlayURLReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

// 客户端解析稿件的播放地址
// 注意此接口同样会再次检查稿件的可播状态
// 端上在解析稿件播放地址时遇到不可播状态
// 统一处理为停止在当前卡片，toast提示信息
type PlayURLResp struct {
	// 透传回客户端
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 是否可播的状态
	// 详情参考 DetailItem 的playable字段解释
	Playable int32 `protobuf:"varint,2,opt,name=playable,proto3" json:"playable,omitempty"`
	// 不可播的提示信息 端上兜底文案
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// 不可播的情况下该字段为空
	// PlayItem的 subid 作为key
	PlayerInfo           map[int64]*PlayInfo `protobuf:"bytes,4,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PlayURLResp) Reset()         { *m = PlayURLResp{} }
func (m *PlayURLResp) String() string { return proto.CompactTextString(m) }
func (*PlayURLResp) ProtoMessage()    {}
func (*PlayURLResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{3}
}
func (m *PlayURLResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayURLResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayURLResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayURLResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayURLResp.Merge(m, src)
}
func (m *PlayURLResp) XXX_Size() int {
	return m.Size()
}
func (m *PlayURLResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayURLResp.DiscardUnknown(m)
}

var xxx_messageInfo_PlayURLResp proto.InternalMessageInfo

func (m *PlayURLResp) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PlayURLResp) GetPlayable() int32 {
	if m != nil {
		return m.Playable
	}
	return 0
}

func (m *PlayURLResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlayURLResp) GetPlayerInfo() map[int64]*PlayInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

type PlayInfo struct {
	// 清晰度qn
	Qn uint32 `protobuf:"varint,1,opt,name=qn,proto3" json:"qn,omitempty"`
	// 清晰度格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 当前qn清晰度下对应的视频格式
	// 1-FLV 2-DASH 3-MP4
	QnType int32 `protobuf:"varint,3,opt,name=qn_type,json=qnType,proto3" json:"qn_type,omitempty"`
	// 视频播放地址信息
	//
	// Types that are valid to be assigned to Info:
	//	*PlayInfo_PlayUrl
	//	*PlayInfo_PlayDash
	Info isPlayInfo_Info `protobuf_oneof:"info"`
	// 秒开相关参数透传回客户端
	Fnver uint32 `protobuf:"varint,6,opt,name=fnver,proto3" json:"fnver,omitempty"`
	Fnval uint32 `protobuf:"varint,7,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 视频拥有的清晰度描述列表
	Formats []*FormatDescription `protobuf:"bytes,8,rep,name=formats,proto3" json:"formats,omitempty"`
	// 视频的编码号
	VideoCodecid uint32 `protobuf:"varint,9,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid,omitempty"`
	// 视频的总时长, 单位为ms
	Length uint64 `protobuf:"varint,10,opt,name=length,proto3" json:"length,omitempty"`
	// 错误状态码
	Code uint32 `protobuf:"varint,11,opt,name=code,proto3" json:"code,omitempty"`
	// 错误提示信息
	Message string `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	// 播放地址过期时间（时间戳）
	ExpireTime uint64 `protobuf:"varint,13,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// 视频云给的音量均衡信息
	// 因为playurl在bapis登记的和大仓不一样
	// 所以这块用大仓的定义，结构是一样的
	Volume               *v2.VolumeInfo `protobuf:"bytes,14,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlayInfo) Reset()         { *m = PlayInfo{} }
func (m *PlayInfo) String() string { return proto.CompactTextString(m) }
func (*PlayInfo) ProtoMessage()    {}
func (*PlayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{4}
}
func (m *PlayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayInfo.Merge(m, src)
}
func (m *PlayInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayInfo proto.InternalMessageInfo

type isPlayInfo_Info interface {
	isPlayInfo_Info()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PlayInfo_PlayUrl struct {
	PlayUrl *PlayURL `protobuf:"bytes,4,opt,name=play_url,json=playUrl,proto3,oneof" json:"play_url,omitempty"`
}
type PlayInfo_PlayDash struct {
	PlayDash *PlayDASH `protobuf:"bytes,5,opt,name=play_dash,json=playDash,proto3,oneof" json:"play_dash,omitempty"`
}

func (*PlayInfo_PlayUrl) isPlayInfo_Info()  {}
func (*PlayInfo_PlayDash) isPlayInfo_Info() {}

func (m *PlayInfo) GetInfo() isPlayInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PlayInfo) GetQn() uint32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *PlayInfo) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *PlayInfo) GetQnType() int32 {
	if m != nil {
		return m.QnType
	}
	return 0
}

func (m *PlayInfo) GetPlayUrl() *PlayURL {
	if x, ok := m.GetInfo().(*PlayInfo_PlayUrl); ok {
		return x.PlayUrl
	}
	return nil
}

func (m *PlayInfo) GetPlayDash() *PlayDASH {
	if x, ok := m.GetInfo().(*PlayInfo_PlayDash); ok {
		return x.PlayDash
	}
	return nil
}

func (m *PlayInfo) GetFnver() uint32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *PlayInfo) GetFnval() uint32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *PlayInfo) GetFormats() []*FormatDescription {
	if m != nil {
		return m.Formats
	}
	return nil
}

func (m *PlayInfo) GetVideoCodecid() uint32 {
	if m != nil {
		return m.VideoCodecid
	}
	return 0
}

func (m *PlayInfo) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *PlayInfo) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PlayInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PlayInfo) GetExpireTime() uint64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *PlayInfo) GetVolume() *v2.VolumeInfo {
	if m != nil {
		return m.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PlayInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PlayInfo_PlayUrl)(nil),
		(*PlayInfo_PlayDash)(nil),
	}
}

type PlayURL struct {
	Durl                 []*ResponseUrl `protobuf:"bytes,1,rep,name=durl,proto3" json:"durl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlayURL) Reset()         { *m = PlayURL{} }
func (m *PlayURL) String() string { return proto.CompactTextString(m) }
func (*PlayURL) ProtoMessage()    {}
func (*PlayURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{5}
}
func (m *PlayURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayURL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayURL.Merge(m, src)
}
func (m *PlayURL) XXX_Size() int {
	return m.Size()
}
func (m *PlayURL) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayURL.DiscardUnknown(m)
}

var xxx_messageInfo_PlayURL proto.InternalMessageInfo

func (m *PlayURL) GetDurl() []*ResponseUrl {
	if m != nil {
		return m.Durl
	}
	return nil
}

type ResponseUrl struct {
	//视频的分片序列号
	Order uint32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	//视频分片的时长, 单位ms
	Length uint64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	//视频分片的大小, 单位Byte
	Size_ uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	//视频分片的音频头信息
	Ahead string `protobuf:"bytes,4,opt,name=ahead,proto3" json:"ahead,omitempty"`
	//视频分片的视频头信息
	Vhead string `protobuf:"bytes,5,opt,name=vhead,proto3" json:"vhead,omitempty"`
	//视频分片的url地址
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	//视频分片的备用url地址列表
	BackupUrl []string `protobuf:"bytes,7,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	//视频分片的md5,只有离线下载才有值
	Md5                  string   `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseUrl) Reset()         { *m = ResponseUrl{} }
func (m *ResponseUrl) String() string { return proto.CompactTextString(m) }
func (*ResponseUrl) ProtoMessage()    {}
func (*ResponseUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{6}
}
func (m *ResponseUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseUrl.Merge(m, src)
}
func (m *ResponseUrl) XXX_Size() int {
	return m.Size()
}
func (m *ResponseUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseUrl.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseUrl proto.InternalMessageInfo

func (m *ResponseUrl) GetOrder() uint32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *ResponseUrl) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ResponseUrl) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ResponseUrl) GetAhead() string {
	if m != nil {
		return m.Ahead
	}
	return ""
}

func (m *ResponseUrl) GetVhead() string {
	if m != nil {
		return m.Vhead
	}
	return ""
}

func (m *ResponseUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ResponseUrl) GetBackupUrl() []string {
	if m != nil {
		return m.BackupUrl
	}
	return nil
}

func (m *ResponseUrl) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

type PlayDASH struct {
	//dash的信息
	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	//dash的信息
	MinBufferTime float32 `protobuf:"fixed32,2,opt,name=min_buffer_time,json=minBufferTime,proto3" json:"min_buffer_time,omitempty"`
	//dash音频信息
	Audio                []*DashItem `protobuf:"bytes,3,rep,name=audio,proto3" json:"audio,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PlayDASH) Reset()         { *m = PlayDASH{} }
func (m *PlayDASH) String() string { return proto.CompactTextString(m) }
func (*PlayDASH) ProtoMessage()    {}
func (*PlayDASH) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{7}
}
func (m *PlayDASH) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayDASH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayDASH.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayDASH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayDASH.Merge(m, src)
}
func (m *PlayDASH) XXX_Size() int {
	return m.Size()
}
func (m *PlayDASH) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayDASH.DiscardUnknown(m)
}

var xxx_messageInfo_PlayDASH proto.InternalMessageInfo

func (m *PlayDASH) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PlayDASH) GetMinBufferTime() float32 {
	if m != nil {
		return m.MinBufferTime
	}
	return 0
}

func (m *PlayDASH) GetAudio() []*DashItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

type FormatDescription struct {
	// 清晰度qn（80 64 32 16）
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 清晰度格式 （flv flv720 flv480 mp4）
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 清晰度描述（"1080P 高清" "720P 高清" "480P 清晰" "360P 流畅"）
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 选中态的清晰度描述 （1080P 720P 480P 360P）
	DisplayDesc string `protobuf:"bytes,4,opt,name=display_desc,json=displayDesc,proto3" json:"display_desc,omitempty"`
	// 选中态的清晰度描述的角标
	Superscript          string   `protobuf:"bytes,5,opt,name=superscript,proto3" json:"superscript,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FormatDescription) Reset()         { *m = FormatDescription{} }
func (m *FormatDescription) String() string { return proto.CompactTextString(m) }
func (*FormatDescription) ProtoMessage()    {}
func (*FormatDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{8}
}
func (m *FormatDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FormatDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FormatDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FormatDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FormatDescription.Merge(m, src)
}
func (m *FormatDescription) XXX_Size() int {
	return m.Size()
}
func (m *FormatDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_FormatDescription.DiscardUnknown(m)
}

var xxx_messageInfo_FormatDescription proto.InternalMessageInfo

func (m *FormatDescription) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *FormatDescription) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FormatDescription) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FormatDescription) GetDisplayDesc() string {
	if m != nil {
		return m.DisplayDesc
	}
	return ""
}

func (m *FormatDescription) GetSuperscript() string {
	if m != nil {
		return m.Superscript
	}
	return ""
}

type DashSegmentBase struct {
	//dash的信息
	Initialization string `protobuf:"bytes,1,opt,name=initialization,proto3" json:"initialization,omitempty"`
	//dash的信息
	IndexRange           string   `protobuf:"bytes,2,opt,name=index_range,json=indexRange,proto3" json:"index_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DashSegmentBase) Reset()         { *m = DashSegmentBase{} }
func (m *DashSegmentBase) String() string { return proto.CompactTextString(m) }
func (*DashSegmentBase) ProtoMessage()    {}
func (*DashSegmentBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{9}
}
func (m *DashSegmentBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DashSegmentBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DashSegmentBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DashSegmentBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DashSegmentBase.Merge(m, src)
}
func (m *DashSegmentBase) XXX_Size() int {
	return m.Size()
}
func (m *DashSegmentBase) XXX_DiscardUnknown() {
	xxx_messageInfo_DashSegmentBase.DiscardUnknown(m)
}

var xxx_messageInfo_DashSegmentBase proto.InternalMessageInfo

func (m *DashSegmentBase) GetInitialization() string {
	if m != nil {
		return m.Initialization
	}
	return ""
}

func (m *DashSegmentBase) GetIndexRange() string {
	if m != nil {
		return m.IndexRange
	}
	return ""
}

type DashItem struct {
	//dash的清晰度
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//dash的url地址
	BaseUrl string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	//dash的backup url地址
	BackupUrl []string `protobuf:"bytes,3,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	//dash的信息
	Bandwidth uint32 `protobuf:"varint,4,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	//dash的信息
	MimeType string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	//dash的信息
	Codecs string `protobuf:"bytes,6,opt,name=codecs,proto3" json:"codecs,omitempty"`
	//  //dash的信息
	//  uint32 width = 7;
	//  //dash的信息
	//  uint32 height = 8;
	//  //dash的信息
	//  string frame_rate = 9;
	//  //dash的信息
	//  string sar = 10;
	//  //dash的信息
	//  uint32 start_with_sap = 11;
	//dash的信息
	SegmentBase *DashSegmentBase `protobuf:"bytes,12,opt,name=segment_base,json=segmentBase,proto3" json:"segment_base,omitempty"`
	//dash的信息
	Codecid uint32 `protobuf:"varint,13,opt,name=codecid,proto3" json:"codecid,omitempty"`
	//视频分片的md5,只有dash离线下载才有值
	Md5 string `protobuf:"bytes,14,opt,name=md5,proto3" json:"md5,omitempty"`
	//视频分片的大小, 单位Byte,只有dash离线下载才有值
	Size_                uint64   `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DashItem) Reset()         { *m = DashItem{} }
func (m *DashItem) String() string { return proto.CompactTextString(m) }
func (*DashItem) ProtoMessage()    {}
func (*DashItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{10}
}
func (m *DashItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DashItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DashItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DashItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DashItem.Merge(m, src)
}
func (m *DashItem) XXX_Size() int {
	return m.Size()
}
func (m *DashItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DashItem.DiscardUnknown(m)
}

var xxx_messageInfo_DashItem proto.InternalMessageInfo

func (m *DashItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DashItem) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *DashItem) GetBackupUrl() []string {
	if m != nil {
		return m.BackupUrl
	}
	return nil
}

func (m *DashItem) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *DashItem) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *DashItem) GetCodecs() string {
	if m != nil {
		return m.Codecs
	}
	return ""
}

func (m *DashItem) GetSegmentBase() *DashSegmentBase {
	if m != nil {
		return m.SegmentBase
	}
	return nil
}

func (m *DashItem) GetCodecid() uint32 {
	if m != nil {
		return m.Codecid
	}
	return 0
}

func (m *DashItem) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *DashItem) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

// 批量请求播客稿件详情，不分页，但有最大请求数量限制（<=20)
type BKArcDetailsReq struct {
	// 提供播客稿件标识 item_type 和 oid 必传
	Items []*PlayItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// 复用秒开参数
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,2,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BKArcDetailsReq) Reset()         { *m = BKArcDetailsReq{} }
func (m *BKArcDetailsReq) String() string { return proto.CompactTextString(m) }
func (*BKArcDetailsReq) ProtoMessage()    {}
func (*BKArcDetailsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{11}
}
func (m *BKArcDetailsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BKArcDetailsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BKArcDetailsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BKArcDetailsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BKArcDetailsReq.Merge(m, src)
}
func (m *BKArcDetailsReq) XXX_Size() int {
	return m.Size()
}
func (m *BKArcDetailsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BKArcDetailsReq.DiscardUnknown(m)
}

var xxx_messageInfo_BKArcDetailsReq proto.InternalMessageInfo

func (m *BKArcDetailsReq) GetItems() []*PlayItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *BKArcDetailsReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

// 播客稿件详情response
type BKArcDetailsResp struct {
	List                 []*DetailItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BKArcDetailsResp) Reset()         { *m = BKArcDetailsResp{} }
func (m *BKArcDetailsResp) String() string { return proto.CompactTextString(m) }
func (*BKArcDetailsResp) ProtoMessage()    {}
func (*BKArcDetailsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{12}
}
func (m *BKArcDetailsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BKArcDetailsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BKArcDetailsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BKArcDetailsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BKArcDetailsResp.Merge(m, src)
}
func (m *BKArcDetailsResp) XXX_Size() int {
	return m.Size()
}
func (m *BKArcDetailsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BKArcDetailsResp.DiscardUnknown(m)
}

var xxx_messageInfo_BKArcDetailsResp proto.InternalMessageInfo

func (m *BKArcDetailsResp) GetList() []*DetailItem {
	if m != nil {
		return m.List
	}
	return nil
}

type BKArchive struct {
	// aid（UGC） epid（OGV）
	Oid int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// 稿件标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 稿件封面url 绝对地址
	Cover string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	// 稿件简介
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// 稿件所有分p总时长 （秒）
	Duration int64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// 稿件分区id
	Rid int32 `protobuf:"varint,6,opt,name=rid,proto3" json:"rid,omitempty"`
	// 稿件分区名称
	Rname string `protobuf:"bytes,7,opt,name=rname,proto3" json:"rname,omitempty"`
	// 稿件发布时间 时间戳
	Publish go_common_library_time.Time `protobuf:"varint,8,opt,name=publish,proto3,casttype=go-common/library/time.Time" json:"publish,omitempty"`
	// 显示的oid
	// 例如 UGC稿件为bvid  OGV稿件为episode id
	DisplayedOid string `protobuf:"bytes,9,opt,name=displayed_oid,json=displayedOid,proto3" json:"displayed_oid,omitempty"`
	// 原创=1 转载=2 0=历史上可能遗留的脏数据
	Copyright int32 `protobuf:"varint,10,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// 稿件常用权限属性 0=否 1=是 见BKArcRights字段说明
	Rights               *BKArcRights `protobuf:"bytes,11,opt,name=rights,proto3" json:"rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BKArchive) Reset()         { *m = BKArchive{} }
func (m *BKArchive) String() string { return proto.CompactTextString(m) }
func (*BKArchive) ProtoMessage()    {}
func (*BKArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{13}
}
func (m *BKArchive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BKArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BKArchive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BKArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BKArchive.Merge(m, src)
}
func (m *BKArchive) XXX_Size() int {
	return m.Size()
}
func (m *BKArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_BKArchive.DiscardUnknown(m)
}

var xxx_messageInfo_BKArchive proto.InternalMessageInfo

func (m *BKArchive) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *BKArchive) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BKArchive) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *BKArchive) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BKArchive) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *BKArchive) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *BKArchive) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *BKArchive) GetPublish() go_common_library_time.Time {
	if m != nil {
		return m.Publish
	}
	return 0
}

func (m *BKArchive) GetDisplayedOid() string {
	if m != nil {
		return m.DisplayedOid
	}
	return ""
}

func (m *BKArchive) GetCopyright() int32 {
	if m != nil {
		return m.Copyright
	}
	return 0
}

func (m *BKArchive) GetRights() *BKArcRights {
	if m != nil {
		return m.Rights
	}
	return nil
}

// 稿件常用权限属性
type BKArcRights struct {
	// 是否禁止转载
	NoReprint            int32    `protobuf:"varint,1,opt,name=no_reprint,json=noReprint,proto3" json:"no_reprint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BKArcRights) Reset()         { *m = BKArcRights{} }
func (m *BKArcRights) String() string { return proto.CompactTextString(m) }
func (*BKArcRights) ProtoMessage()    {}
func (*BKArcRights) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{14}
}
func (m *BKArcRights) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BKArcRights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BKArcRights.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BKArcRights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BKArcRights.Merge(m, src)
}
func (m *BKArcRights) XXX_Size() int {
	return m.Size()
}
func (m *BKArcRights) XXX_DiscardUnknown() {
	xxx_messageInfo_BKArcRights.DiscardUnknown(m)
}

var xxx_messageInfo_BKArcRights proto.InternalMessageInfo

func (m *BKArcRights) GetNoReprint() int32 {
	if m != nil {
		return m.NoReprint
	}
	return 0
}

// 播客稿件分p
type BKArcPart struct {
	// aid （UGC） epid（OGV）
	Oid int64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// 业务subid
	// UGC稿件 -> cid
	// OGV稿件 -> cid
	SubId int64 `protobuf:"varint,2,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	// 分p对应的标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// 分p 时长（秒）
	Duration int64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	// 分p 序号（从1开始）
	Page                 int32    `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BKArcPart) Reset()         { *m = BKArcPart{} }
func (m *BKArcPart) String() string { return proto.CompactTextString(m) }
func (*BKArcPart) ProtoMessage()    {}
func (*BKArcPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{15}
}
func (m *BKArcPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BKArcPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BKArcPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BKArcPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BKArcPart.Merge(m, src)
}
func (m *BKArcPart) XXX_Size() int {
	return m.Size()
}
func (m *BKArcPart) XXX_DiscardUnknown() {
	xxx_messageInfo_BKArcPart.DiscardUnknown(m)
}

var xxx_messageInfo_BKArcPart proto.InternalMessageInfo

func (m *BKArcPart) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *BKArcPart) GetSubId() int64 {
	if m != nil {
		return m.SubId
	}
	return 0
}

func (m *BKArcPart) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BKArcPart) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *BKArcPart) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type DetailItem struct {
	// 播客稿件标识
	// 该字段中除了sub_id以外的字段均有效
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 播客稿件详细信息 包括标题/简介/总时长/封面/分区等等
	Arc *BKArchive `protobuf:"bytes,2,opt,name=arc,proto3" json:"arc,omitempty"`
	// 播客稿件分p信息 包括分p标题，分p时长等
	Parts []*BKArcPart `protobuf:"bytes,3,rep,name=parts,proto3" json:"parts,omitempty"`
	// 稿件up主信息
	Owner *Author `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// 稿件互动数据
	Stat *BKStat `protobuf:"bytes,5,opt,name=stat,proto3" json:"stat,omitempty"`
	// 最后播放过的分p subid（作为播放历史列表的时候必须存在）
	LastPart int64 `protobuf:"varint,6,opt,name=last_part,json=lastPart,proto3" json:"last_part,omitempty"`
	// 上面分p的播放进度（秒，-1表示已播完）（作为播放历史列表的时候必须存在）
	Progress int64 `protobuf:"varint,7,opt,name=progress,proto3" json:"progress,omitempty"`
	// 是否可播放的状态
	// -2: up主删除
	// -1: 稿件失效，不可播（播放列表中按置灰不可播处理）
	// 0: 可播
	// 1: 不可播置灰，点击时toast提示服务端下发message信息（例如："暂不支持该类型稿件"）
	// 2: 不置灰但连播时跳过（版权中台要求） 主动点击时toast提示下发的message信息
	//    补充说明：版权稿件目前处理为不下发分p信息，所以播放时会由播放器统一跳过。
	// 未来可能增加新的状态，老版本可能接收到其他未识别的非0状态，此时统一视为不可播，置灰并提示下发的message信息
	Playable int32 `protobuf:"varint,8,opt,name=playable,proto3" json:"playable,omitempty"`
	// 不可播放时的提示信息
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	// 秒开地址 key为分p里的subid 默认只有第一p的秒开地址
	PlayerInfo map[int64]*PlayInfo `protobuf:"bytes,10,rep,name=player_info,json=playerInfo,proto3" json:"player_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 关联的稿件元信息（可选）
	// 目前用于音频关联视频稿件跳转
	AssociatedItem *PlayItem `protobuf:"bytes,11,opt,name=associated_item,json=associatedItem,proto3" json:"associated_item,omitempty"`
	// 播放历史产生的时间（时间戳）
	// 服务端记录的用户上次观看此稿件的时间
	LastPlayTime int64 `protobuf:"varint,12,opt,name=last_play_time,json=lastPlayTime,proto3" json:"last_play_time,omitempty"`
	// 播放历史分类的tag
	// 例如：今天/昨天/更早 等等
	// 主要用作端上播放历史页按时间段分类
	HistoryTag string `protobuf:"bytes,13,opt,name=history_tag,json=historyTag,proto3" json:"history_tag,omitempty"`
	// 播放历史产生时的设备类型
	// 和主站播放历史页的设备类型相同
	DeviceType *history.DeviceType `protobuf:"bytes,14,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// 该稿件所属的UGC合集信息 已经是合集跳入的情况下不下发
	// 听视频内部是按收藏夹子类型处理合集的
	// 查询合集内资源信息时，请使用听视频的收藏夹详情接口
	UgcSeasonInfo        *FavFolder `protobuf:"bytes,15,opt,name=ugc_season_info,json=ugcSeasonInfo,proto3" json:"ugc_season_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DetailItem) Reset()         { *m = DetailItem{} }
func (m *DetailItem) String() string { return proto.CompactTextString(m) }
func (*DetailItem) ProtoMessage()    {}
func (*DetailItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{16}
}
func (m *DetailItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetailItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetailItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetailItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetailItem.Merge(m, src)
}
func (m *DetailItem) XXX_Size() int {
	return m.Size()
}
func (m *DetailItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DetailItem.DiscardUnknown(m)
}

var xxx_messageInfo_DetailItem proto.InternalMessageInfo

func (m *DetailItem) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *DetailItem) GetArc() *BKArchive {
	if m != nil {
		return m.Arc
	}
	return nil
}

func (m *DetailItem) GetParts() []*BKArcPart {
	if m != nil {
		return m.Parts
	}
	return nil
}

func (m *DetailItem) GetOwner() *Author {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *DetailItem) GetStat() *BKStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *DetailItem) GetLastPart() int64 {
	if m != nil {
		return m.LastPart
	}
	return 0
}

func (m *DetailItem) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *DetailItem) GetPlayable() int32 {
	if m != nil {
		return m.Playable
	}
	return 0
}

func (m *DetailItem) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DetailItem) GetPlayerInfo() map[int64]*PlayInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *DetailItem) GetAssociatedItem() *PlayItem {
	if m != nil {
		return m.AssociatedItem
	}
	return nil
}

func (m *DetailItem) GetLastPlayTime() int64 {
	if m != nil {
		return m.LastPlayTime
	}
	return 0
}

func (m *DetailItem) GetHistoryTag() string {
	if m != nil {
		return m.HistoryTag
	}
	return ""
}

func (m *DetailItem) GetDeviceType() *history.DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return nil
}

func (m *DetailItem) GetUgcSeasonInfo() *FavFolder {
	if m != nil {
		return m.UgcSeasonInfo
	}
	return nil
}

// up主信息
type Author struct {
	// up的member id
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// up的名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// up的头像url 绝对地址
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// up主的关注状态
	Relation             *FollowRelation `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Author) Reset()         { *m = Author{} }
func (m *Author) String() string { return proto.CompactTextString(m) }
func (*Author) ProtoMessage()    {}
func (*Author) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{17}
}
func (m *Author) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Author) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Author.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Author) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Author.Merge(m, src)
}
func (m *Author) XXX_Size() int {
	return m.Size()
}
func (m *Author) XXX_DiscardUnknown() {
	xxx_messageInfo_Author.DiscardUnknown(m)
}

var xxx_messageInfo_Author proto.InternalMessageInfo

func (m *Author) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Author) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Author) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Author) GetRelation() *FollowRelation {
	if m != nil {
		return m.Relation
	}
	return nil
}

type FollowRelation struct {
	Status               FollowRelation_RelationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bilibili.app.listener.v1.FollowRelation_RelationStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *FollowRelation) Reset()         { *m = FollowRelation{} }
func (m *FollowRelation) String() string { return proto.CompactTextString(m) }
func (*FollowRelation) ProtoMessage()    {}
func (*FollowRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{18}
}
func (m *FollowRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowRelation.Merge(m, src)
}
func (m *FollowRelation) XXX_Size() int {
	return m.Size()
}
func (m *FollowRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowRelation.DiscardUnknown(m)
}

var xxx_messageInfo_FollowRelation proto.InternalMessageInfo

func (m *FollowRelation) GetStatus() FollowRelation_RelationStatus {
	if m != nil {
		return m.Status
	}
	return FollowRelation_UNSPECIFIED
}

// 稿件互动数据
type BKStat struct {
	// 点赞数
	Like int32 `protobuf:"varint,1,opt,name=like,proto3" json:"like,omitempty"`
	// 投币数
	Coin int32 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	// 收藏数
	Favourite int32 `protobuf:"varint,3,opt,name=favourite,proto3" json:"favourite,omitempty"`
	// 评论数
	Reply int32 `protobuf:"varint,4,opt,name=reply,proto3" json:"reply,omitempty"`
	// 分享数
	Share int32 `protobuf:"varint,5,opt,name=share,proto3" json:"share,omitempty"`
	// 播放数
	View int32 `protobuf:"varint,6,opt,name=view,proto3" json:"view,omitempty"`
	// 是否点赞
	HasLike bool `protobuf:"varint,7,opt,name=has_like,json=hasLike,proto3" json:"has_like,omitempty"`
	// 是否投币
	HasCoin bool `protobuf:"varint,8,opt,name=has_coin,json=hasCoin,proto3" json:"has_coin,omitempty"`
	// 是否收藏
	HasFav               bool     `protobuf:"varint,9,opt,name=has_fav,json=hasFav,proto3" json:"has_fav,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BKStat) Reset()         { *m = BKStat{} }
func (m *BKStat) String() string { return proto.CompactTextString(m) }
func (*BKStat) ProtoMessage()    {}
func (*BKStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{19}
}
func (m *BKStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BKStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BKStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BKStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BKStat.Merge(m, src)
}
func (m *BKStat) XXX_Size() int {
	return m.Size()
}
func (m *BKStat) XXX_DiscardUnknown() {
	xxx_messageInfo_BKStat.DiscardUnknown(m)
}

var xxx_messageInfo_BKStat proto.InternalMessageInfo

func (m *BKStat) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *BKStat) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *BKStat) GetFavourite() int32 {
	if m != nil {
		return m.Favourite
	}
	return 0
}

func (m *BKStat) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *BKStat) GetShare() int32 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *BKStat) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *BKStat) GetHasLike() bool {
	if m != nil {
		return m.HasLike
	}
	return false
}

func (m *BKStat) GetHasCoin() bool {
	if m != nil {
		return m.HasCoin
	}
	return false
}

func (m *BKStat) GetHasFav() bool {
	if m != nil {
		return m.HasFav
	}
	return false
}

// 通用列表排序选项
type SortOption struct {
	// 列表排序方式（正序/逆序/随机等）
	Order ListOrder `protobuf:"varint,1,opt,name=order,proto3,enum=bilibili.app.listener.v1.ListOrder" json:"order,omitempty"`
	// 列表按什么字段排序（创建时间/播放量/收藏量）
	SortField            ListSortField `protobuf:"varint,2,opt,name=sort_field,json=sortField,proto3,enum=bilibili.app.listener.v1.ListSortField" json:"sort_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SortOption) Reset()         { *m = SortOption{} }
func (m *SortOption) String() string { return proto.CompactTextString(m) }
func (*SortOption) ProtoMessage()    {}
func (*SortOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{20}
}
func (m *SortOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SortOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SortOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SortOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortOption.Merge(m, src)
}
func (m *SortOption) XXX_Size() int {
	return m.Size()
}
func (m *SortOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SortOption.DiscardUnknown(m)
}

var xxx_messageInfo_SortOption proto.InternalMessageInfo

func (m *SortOption) GetOrder() ListOrder {
	if m != nil {
		return m.Order
	}
	return ListOrder_NO_ORDER
}

func (m *SortOption) GetSortField() ListSortField {
	if m != nil {
		return m.SortField
	}
	return ListSortField_NO_SORT
}

// 请求当前播放列表
type PlaylistReq struct {
	// （可选）播单来源
	// ！！重要！！
	// from 参数只应该在首次跳转播单页的时候使用！
	// 服务端会读取来源的信息然后将来源拷贝一份存入服务端播单，
	// 后续对播单的翻页请求请直接把from置为默认值DEFAULT，
	// 否则每次翻页都会触发服务端重新拉取源列表的逻辑！！
	From PlaylistSource `protobuf:"varint,1,opt,name=from,proto3,enum=bilibili.app.listener.v1.PlaylistSource" json:"from,omitempty"`
	// 不同播单来源下id代表不同的含义
	//  - DEFAULT: id无意义，服务端忽略
	//  - MEM_SPACE: id=mid 指定要获取音频投稿的用户id
	//  - AUDIO_COLLECTION: id=menu_id 指定要获取的音频歌单id
	//  - USER_FAVOURITE: id=fav_folder_id 指定用户收藏夹的folder id
	//  - AUDIO_CARD: id=songid 老音频系统song id
	//  - UP_ARCHIVE: id=aid 稿件aid
	//  - PICK_CARD: id=card_id 播单id
	//  - MEDIA_LIST: id=biz_id 播单物料id
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// （可选）设置返回列表的锚点，设置到oid维度即可
	// 服务端返回的列表会尽可能包含这个锚点稿件，并在响应的单页中尽量将锚点置于列表中间位
	// 用于首次获取列表，例如从收藏夹列表中间某个部位跳转带入播客播放
	// 分页有设置时会忽略该设置
	Anchor *PlayItem `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
	// 分页参数，默认返回20条数据
	PageOpt *PageOption `protobuf:"bytes,4,opt,name=page_opt,json=pageOpt,proto3" json:"page_opt,omitempty"`
	// 秒开参数
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,5,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	// 对于id参数的补充信息
	//  - from=USER_FAVOURITE 时，该字段表示folder type 且 必须提供
	//  - from=PICK_CARD, 该字段表示 pick id 且 必须提供
	//  - from=AUDIO_COLLECTION，该字段表示 menu type 且必须提供
	//  - from=MEDIA_LIST，该字段表示播单类型(对应type字段)，且必须提供
	ExtraId int64 `protobuf:"varint,6,opt,name=extra_id,json=extraId,proto3" json:"extra_id,omitempty"`
	// 列表排序参数
	// 目前用于播单相关的续播场景，只在from!=DEFAULT的时候生效
	SortOpt              *SortOption `protobuf:"bytes,7,opt,name=sort_opt,json=sortOpt,proto3" json:"sort_opt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PlaylistReq) Reset()         { *m = PlaylistReq{} }
func (m *PlaylistReq) String() string { return proto.CompactTextString(m) }
func (*PlaylistReq) ProtoMessage()    {}
func (*PlaylistReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{21}
}
func (m *PlaylistReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaylistReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaylistReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaylistReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistReq.Merge(m, src)
}
func (m *PlaylistReq) XXX_Size() int {
	return m.Size()
}
func (m *PlaylistReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistReq proto.InternalMessageInfo

func (m *PlaylistReq) GetFrom() PlaylistSource {
	if m != nil {
		return m.From
	}
	return PlaylistSource_DEFAULT
}

func (m *PlaylistReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlaylistReq) GetAnchor() *PlayItem {
	if m != nil {
		return m.Anchor
	}
	return nil
}

func (m *PlaylistReq) GetPageOpt() *PageOption {
	if m != nil {
		return m.PageOpt
	}
	return nil
}

func (m *PlaylistReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *PlaylistReq) GetExtraId() int64 {
	if m != nil {
		return m.ExtraId
	}
	return 0
}

func (m *PlaylistReq) GetSortOpt() *SortOption {
	if m != nil {
		return m.SortOpt
	}
	return nil
}

// 分页请求参数
type PageOption struct {
	// 请求页大小 不传默认20个
	PageSize  uint32               `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Direction PageOption_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=bilibili.app.listener.v1.PageOption_Direction" json:"direction,omitempty"`
	// 稿件标识 用于翻页锚点 返回这个稿件之后/之前的一页
	// 不填就只返回列表前20个
	// 设置到oid维度即可
	LastItem             *PlayItem `protobuf:"bytes,3,opt,name=last_item,json=lastItem,proto3" json:"last_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PageOption) Reset()         { *m = PageOption{} }
func (m *PageOption) String() string { return proto.CompactTextString(m) }
func (*PageOption) ProtoMessage()    {}
func (*PageOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{22}
}
func (m *PageOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageOption.Merge(m, src)
}
func (m *PageOption) XXX_Size() int {
	return m.Size()
}
func (m *PageOption) XXX_DiscardUnknown() {
	xxx_messageInfo_PageOption.DiscardUnknown(m)
}

var xxx_messageInfo_PageOption proto.InternalMessageInfo

func (m *PageOption) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageOption) GetDirection() PageOption_Direction {
	if m != nil {
		return m.Direction
	}
	return PageOption_SCROLL_DOWN
}

func (m *PageOption) GetLastItem() *PlayItem {
	if m != nil {
		return m.LastItem
	}
	return nil
}

type PlaylistResp struct {
	// 播放列表总长度（只统计aid/epid维度）
	// 总数可能并不精确 以reach_start reach_end为准
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 是否已经到列表顶端
	ReachStart bool `protobuf:"varint,2,opt,name=reach_start,json=reachStart,proto3" json:"reach_start,omitempty"`
	// 是否已经到列表底端
	ReachEnd bool `protobuf:"varint,3,opt,name=reach_end,json=reachEnd,proto3" json:"reach_end,omitempty"`
	// 播放列表
	List []*DetailItem `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	// 标识播放列表中最近播放的稿件
	// 通常用于指定anchor时，顺带获取该稿件的播放历史
	LastPlay *PlayItem `protobuf:"bytes,5,opt,name=last_play,json=lastPlay,proto3" json:"last_play,omitempty"`
	// 上面播放的稿件进度
	LastProgress         int64    `protobuf:"varint,6,opt,name=last_progress,json=lastProgress,proto3" json:"last_progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaylistResp) Reset()         { *m = PlaylistResp{} }
func (m *PlaylistResp) String() string { return proto.CompactTextString(m) }
func (*PlaylistResp) ProtoMessage()    {}
func (*PlaylistResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{23}
}
func (m *PlaylistResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaylistResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaylistResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaylistResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistResp.Merge(m, src)
}
func (m *PlaylistResp) XXX_Size() int {
	return m.Size()
}
func (m *PlaylistResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistResp.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistResp proto.InternalMessageInfo

func (m *PlaylistResp) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PlaylistResp) GetReachStart() bool {
	if m != nil {
		return m.ReachStart
	}
	return false
}

func (m *PlaylistResp) GetReachEnd() bool {
	if m != nil {
		return m.ReachEnd
	}
	return false
}

func (m *PlaylistResp) GetList() []*DetailItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *PlaylistResp) GetLastPlay() *PlayItem {
	if m != nil {
		return m.LastPlay
	}
	return nil
}

func (m *PlaylistResp) GetLastProgress() int64 {
	if m != nil {
		return m.LastProgress
	}
	return 0
}

// 播单批量插入条目
type PlaylistAddReq struct {
	// 播客稿件标识 类型和oid必填
	Items []*PlayItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// （可选）插入位置 不传默认列表尾部
	//
	// Types that are valid to be assigned to Pos:
	//	*PlaylistAddReq_After
	//	*PlaylistAddReq_Head
	//	*PlaylistAddReq_Tail
	Pos                  isPlaylistAddReq_Pos `protobuf_oneof:"pos"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PlaylistAddReq) Reset()         { *m = PlaylistAddReq{} }
func (m *PlaylistAddReq) String() string { return proto.CompactTextString(m) }
func (*PlaylistAddReq) ProtoMessage()    {}
func (*PlaylistAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{24}
}
func (m *PlaylistAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaylistAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaylistAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaylistAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistAddReq.Merge(m, src)
}
func (m *PlaylistAddReq) XXX_Size() int {
	return m.Size()
}
func (m *PlaylistAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistAddReq proto.InternalMessageInfo

type isPlaylistAddReq_Pos interface {
	isPlaylistAddReq_Pos()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PlaylistAddReq_After struct {
	After *PlayItem `protobuf:"bytes,2,opt,name=after,proto3,oneof" json:"after,omitempty"`
}
type PlaylistAddReq_Head struct {
	Head bool `protobuf:"varint,3,opt,name=head,proto3,oneof" json:"head,omitempty"`
}
type PlaylistAddReq_Tail struct {
	Tail bool `protobuf:"varint,4,opt,name=tail,proto3,oneof" json:"tail,omitempty"`
}

func (*PlaylistAddReq_After) isPlaylistAddReq_Pos() {}
func (*PlaylistAddReq_Head) isPlaylistAddReq_Pos()  {}
func (*PlaylistAddReq_Tail) isPlaylistAddReq_Pos()  {}

func (m *PlaylistAddReq) GetPos() isPlaylistAddReq_Pos {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *PlaylistAddReq) GetItems() []*PlayItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PlaylistAddReq) GetAfter() *PlayItem {
	if x, ok := m.GetPos().(*PlaylistAddReq_After); ok {
		return x.After
	}
	return nil
}

func (m *PlaylistAddReq) GetHead() bool {
	if x, ok := m.GetPos().(*PlaylistAddReq_Head); ok {
		return x.Head
	}
	return false
}

func (m *PlaylistAddReq) GetTail() bool {
	if x, ok := m.GetPos().(*PlaylistAddReq_Tail); ok {
		return x.Tail
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PlaylistAddReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PlaylistAddReq_After)(nil),
		(*PlaylistAddReq_Head)(nil),
		(*PlaylistAddReq_Tail)(nil),
	}
}

// 播单批量删除条目
type PlaylistDelReq struct {
	// 播客稿件标识 填写到oid维度即可
	Items []*PlayItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// 是否清空当前播放列表
	Truncate             bool     `protobuf:"varint,2,opt,name=truncate,proto3" json:"truncate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaylistDelReq) Reset()         { *m = PlaylistDelReq{} }
func (m *PlaylistDelReq) String() string { return proto.CompactTextString(m) }
func (*PlaylistDelReq) ProtoMessage()    {}
func (*PlaylistDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{25}
}
func (m *PlaylistDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaylistDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaylistDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaylistDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistDelReq.Merge(m, src)
}
func (m *PlaylistDelReq) XXX_Size() int {
	return m.Size()
}
func (m *PlaylistDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistDelReq proto.InternalMessageInfo

func (m *PlaylistDelReq) GetItems() []*PlayItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PlaylistDelReq) GetTruncate() bool {
	if m != nil {
		return m.Truncate
	}
	return false
}

// 播放历史列表请求
type PlayHistoryReq struct {
	// 分页请求参数 只支持向下翻页
	PageOpt *PageOption `protobuf:"bytes,1,opt,name=page_opt,json=pageOpt,proto3" json:"page_opt,omitempty"`
	// 客户端侧今日0时的unix时间戳（秒）
	// 取设备上的本地时区今天0点0分0秒然后转换成时间戳即可
	LocalTodayZero       int64    `protobuf:"varint,2,opt,name=local_today_zero,json=localTodayZero,proto3" json:"local_today_zero,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayHistoryReq) Reset()         { *m = PlayHistoryReq{} }
func (m *PlayHistoryReq) String() string { return proto.CompactTextString(m) }
func (*PlayHistoryReq) ProtoMessage()    {}
func (*PlayHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{26}
}
func (m *PlayHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayHistoryReq.Merge(m, src)
}
func (m *PlayHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayHistoryReq proto.InternalMessageInfo

func (m *PlayHistoryReq) GetPageOpt() *PageOption {
	if m != nil {
		return m.PageOpt
	}
	return nil
}

func (m *PlayHistoryReq) GetLocalTodayZero() int64 {
	if m != nil {
		return m.LocalTodayZero
	}
	return 0
}

// 播放历史列表response
type PlayHistoryResp struct {
	// 总共历史个数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 是否已经到底部
	ReachEnd bool `protobuf:"varint,2,opt,name=reach_end,json=reachEnd,proto3" json:"reach_end,omitempty"`
	// 播放历史列表
	List                 []*DetailItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PlayHistoryResp) Reset()         { *m = PlayHistoryResp{} }
func (m *PlayHistoryResp) String() string { return proto.CompactTextString(m) }
func (*PlayHistoryResp) ProtoMessage()    {}
func (*PlayHistoryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{27}
}
func (m *PlayHistoryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayHistoryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayHistoryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayHistoryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayHistoryResp.Merge(m, src)
}
func (m *PlayHistoryResp) XXX_Size() int {
	return m.Size()
}
func (m *PlayHistoryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayHistoryResp.DiscardUnknown(m)
}

var xxx_messageInfo_PlayHistoryResp proto.InternalMessageInfo

func (m *PlayHistoryResp) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PlayHistoryResp) GetReachEnd() bool {
	if m != nil {
		return m.ReachEnd
	}
	return false
}

func (m *PlayHistoryResp) GetList() []*DetailItem {
	if m != nil {
		return m.List
	}
	return nil
}

// 播放历史插入
type PlayHistoryAddReq struct {
	// 播客稿件标识信息
	// 作为播放历史使用时，所有字段都需要填写
	// item_type -> 直接回传下发的type
	// oid       -> 直接回传下发的oid
	// sub_id    -> 设置为播放到的分p sub_id
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 播放进度（秒，-1表示已播放完）
	Progress int64 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// 稿件时长（秒）
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// 区分连播还是点播
	// 【推荐模式】下，上报走【连播】类型
	// 【播单模式】下，上报走【点播】类型
	// 1-连播  2-点播
	PlayStyle            int32    `protobuf:"varint,4,opt,name=play_style,json=playStyle,proto3" json:"play_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayHistoryAddReq) Reset()         { *m = PlayHistoryAddReq{} }
func (m *PlayHistoryAddReq) String() string { return proto.CompactTextString(m) }
func (*PlayHistoryAddReq) ProtoMessage()    {}
func (*PlayHistoryAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{28}
}
func (m *PlayHistoryAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayHistoryAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayHistoryAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayHistoryAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayHistoryAddReq.Merge(m, src)
}
func (m *PlayHistoryAddReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayHistoryAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayHistoryAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayHistoryAddReq proto.InternalMessageInfo

func (m *PlayHistoryAddReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PlayHistoryAddReq) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *PlayHistoryAddReq) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PlayHistoryAddReq) GetPlayStyle() int32 {
	if m != nil {
		return m.PlayStyle
	}
	return 0
}

// 播放历史批量删除
type PlayHistoryDelReq struct {
	// 播客稿件标识 填写到oid维度即可
	Items []*PlayItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// 是否清空播放历史
	Truncate             bool     `protobuf:"varint,2,opt,name=truncate,proto3" json:"truncate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayHistoryDelReq) Reset()         { *m = PlayHistoryDelReq{} }
func (m *PlayHistoryDelReq) String() string { return proto.CompactTextString(m) }
func (*PlayHistoryDelReq) ProtoMessage()    {}
func (*PlayHistoryDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{29}
}
func (m *PlayHistoryDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayHistoryDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayHistoryDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayHistoryDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayHistoryDelReq.Merge(m, src)
}
func (m *PlayHistoryDelReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayHistoryDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayHistoryDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayHistoryDelReq proto.InternalMessageInfo

func (m *PlayHistoryDelReq) GetItems() []*PlayItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PlayHistoryDelReq) GetTruncate() bool {
	if m != nil {
		return m.Truncate
	}
	return false
}

// 一键三连
type TripleLikeReq struct {
	// 播客稿件标识 需要填写到sub id
	Item                 *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TripleLikeReq) Reset()         { *m = TripleLikeReq{} }
func (m *TripleLikeReq) String() string { return proto.CompactTextString(m) }
func (*TripleLikeReq) ProtoMessage()    {}
func (*TripleLikeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{30}
}
func (m *TripleLikeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TripleLikeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TripleLikeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TripleLikeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TripleLikeReq.Merge(m, src)
}
func (m *TripleLikeReq) XXX_Size() int {
	return m.Size()
}
func (m *TripleLikeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TripleLikeReq.DiscardUnknown(m)
}

var xxx_messageInfo_TripleLikeReq proto.InternalMessageInfo

func (m *TripleLikeReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type TripleLikeResp struct {
	// 三连后的toast信息
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// 是否点赞成功
	ThumbOk bool `protobuf:"varint,2,opt,name=thumb_ok,json=thumbOk,proto3" json:"thumb_ok,omitempty"`
	// 是否投币成功
	CoinOk bool `protobuf:"varint,3,opt,name=coin_ok,json=coinOk,proto3" json:"coin_ok,omitempty"`
	// 是否收藏成功
	FavOk                bool     `protobuf:"varint,4,opt,name=fav_ok,json=favOk,proto3" json:"fav_ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TripleLikeResp) Reset()         { *m = TripleLikeResp{} }
func (m *TripleLikeResp) String() string { return proto.CompactTextString(m) }
func (*TripleLikeResp) ProtoMessage()    {}
func (*TripleLikeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{31}
}
func (m *TripleLikeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TripleLikeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TripleLikeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TripleLikeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TripleLikeResp.Merge(m, src)
}
func (m *TripleLikeResp) XXX_Size() int {
	return m.Size()
}
func (m *TripleLikeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TripleLikeResp.DiscardUnknown(m)
}

var xxx_messageInfo_TripleLikeResp proto.InternalMessageInfo

func (m *TripleLikeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TripleLikeResp) GetThumbOk() bool {
	if m != nil {
		return m.ThumbOk
	}
	return false
}

func (m *TripleLikeResp) GetCoinOk() bool {
	if m != nil {
		return m.CoinOk
	}
	return false
}

func (m *TripleLikeResp) GetFavOk() bool {
	if m != nil {
		return m.FavOk
	}
	return false
}

// 点赞
type ThumbUpReq struct {
	// 播客稿件标识 需要填写到sub id
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 点赞/取消点赞 点踩/取消点踩
	Action               ThumbUpReq_ThumbType `protobuf:"varint,2,opt,name=action,proto3,enum=bilibili.app.listener.v1.ThumbUpReq_ThumbType" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ThumbUpReq) Reset()         { *m = ThumbUpReq{} }
func (m *ThumbUpReq) String() string { return proto.CompactTextString(m) }
func (*ThumbUpReq) ProtoMessage()    {}
func (*ThumbUpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{32}
}
func (m *ThumbUpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThumbUpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThumbUpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThumbUpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbUpReq.Merge(m, src)
}
func (m *ThumbUpReq) XXX_Size() int {
	return m.Size()
}
func (m *ThumbUpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbUpReq.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbUpReq proto.InternalMessageInfo

func (m *ThumbUpReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ThumbUpReq) GetAction() ThumbUpReq_ThumbType {
	if m != nil {
		return m.Action
	}
	return ThumbUpReq_LIKE
}

type ThumbUpResp struct {
	// 点赞相关操作成功时服务端下发的toast信息
	// 为空时端上显示兜底提示
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThumbUpResp) Reset()         { *m = ThumbUpResp{} }
func (m *ThumbUpResp) String() string { return proto.CompactTextString(m) }
func (*ThumbUpResp) ProtoMessage()    {}
func (*ThumbUpResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{33}
}
func (m *ThumbUpResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThumbUpResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThumbUpResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThumbUpResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThumbUpResp.Merge(m, src)
}
func (m *ThumbUpResp) XXX_Size() int {
	return m.Size()
}
func (m *ThumbUpResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ThumbUpResp.DiscardUnknown(m)
}

var xxx_messageInfo_ThumbUpResp proto.InternalMessageInfo

func (m *ThumbUpResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 投币
type CoinAddReq struct {
	// 播客稿件标识 需要填写到sub id
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 投币数量
	Num int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	// 是否同时点赞
	ThumbUp              bool     `protobuf:"varint,3,opt,name=thumb_up,json=thumbUp,proto3" json:"thumb_up,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoinAddReq) Reset()         { *m = CoinAddReq{} }
func (m *CoinAddReq) String() string { return proto.CompactTextString(m) }
func (*CoinAddReq) ProtoMessage()    {}
func (*CoinAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{34}
}
func (m *CoinAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinAddReq.Merge(m, src)
}
func (m *CoinAddReq) XXX_Size() int {
	return m.Size()
}
func (m *CoinAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_CoinAddReq proto.InternalMessageInfo

func (m *CoinAddReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *CoinAddReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CoinAddReq) GetThumbUp() bool {
	if m != nil {
		return m.ThumbUp
	}
	return false
}

type CoinAddResp struct {
	// 投币成功时服务端下发的toast信息
	// 为空时端上显示兜底提示
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoinAddResp) Reset()         { *m = CoinAddResp{} }
func (m *CoinAddResp) String() string { return proto.CompactTextString(m) }
func (*CoinAddResp) ProtoMessage()    {}
func (*CoinAddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{35}
}
func (m *CoinAddResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinAddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinAddResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinAddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinAddResp.Merge(m, src)
}
func (m *CoinAddResp) XXX_Size() int {
	return m.Size()
}
func (m *CoinAddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinAddResp.DiscardUnknown(m)
}

var xxx_messageInfo_CoinAddResp proto.InternalMessageInfo

func (m *CoinAddResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 起播上报 无条件上报即可 不区分点播连播
type PlayActionReportReq struct {
	// 播客稿件标识 需要填写到sub id
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 数仓标识 用户页面来源
	FromSpmid            string   `protobuf:"bytes,2,opt,name=from_spmid,json=fromSpmid,proto3" json:"from_spmid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayActionReportReq) Reset()         { *m = PlayActionReportReq{} }
func (m *PlayActionReportReq) String() string { return proto.CompactTextString(m) }
func (*PlayActionReportReq) ProtoMessage()    {}
func (*PlayActionReportReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{36}
}
func (m *PlayActionReportReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayActionReportReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayActionReportReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayActionReportReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayActionReportReq.Merge(m, src)
}
func (m *PlayActionReportReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayActionReportReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayActionReportReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayActionReportReq proto.InternalMessageInfo

func (m *PlayActionReportReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PlayActionReportReq) GetFromSpmid() string {
	if m != nil {
		return m.FromSpmid
	}
	return ""
}

// 获取推荐播单
type RcmdPlaylistReq struct {
	// 设置跳转推荐模式的场景
	From RcmdPlaylistReq_RcmdFrom `protobuf:"varint,1,opt,name=from,proto3,enum=bilibili.app.listener.v1.RcmdPlaylistReq_RcmdFrom" json:"from,omitempty"`
	// 不同跳转场景下id具有不同的含义
	// - UNSPECIFIED: id无意义 服务端忽略
	// - UP_ARCHIVE: id=aid 需要带入推荐列表的稿件aid
	// - ARCHIVE_VIEW: id=aid 播放页需要带入的稿件aid
	// - INDEX_ENTRY: id暂无意义 服务端忽略
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 是否需要在返回的推荐播单头部添加上次播放的内容
	NeedHistory bool `protobuf:"varint,3,opt,name=need_history,json=needHistory,proto3" json:"need_history,omitempty"`
	// 是否需要顶部起点卡片
	NeedTopCards bool `protobuf:"varint,4,opt,name=need_top_cards,json=needTopCards,proto3" json:"need_top_cards,omitempty"`
	// 秒开参数
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,5,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	// 翻页请求参数 首页不传
	// 后续页面传递响应里的next
	Page *pagination.Pagination `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
	// 注解信息 目前需要传递
	//  * session_id = 当前连播的session标识
	//  * from_trackid = from_aid的trackid，天马等推荐场景会有这个
	Annotations          map[string]string `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RcmdPlaylistReq) Reset()         { *m = RcmdPlaylistReq{} }
func (m *RcmdPlaylistReq) String() string { return proto.CompactTextString(m) }
func (*RcmdPlaylistReq) ProtoMessage()    {}
func (*RcmdPlaylistReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{37}
}
func (m *RcmdPlaylistReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RcmdPlaylistReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RcmdPlaylistReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RcmdPlaylistReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdPlaylistReq.Merge(m, src)
}
func (m *RcmdPlaylistReq) XXX_Size() int {
	return m.Size()
}
func (m *RcmdPlaylistReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdPlaylistReq.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdPlaylistReq proto.InternalMessageInfo

func (m *RcmdPlaylistReq) GetFrom() RcmdPlaylistReq_RcmdFrom {
	if m != nil {
		return m.From
	}
	return RcmdPlaylistReq_UNSPECIFIED
}

func (m *RcmdPlaylistReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RcmdPlaylistReq) GetNeedHistory() bool {
	if m != nil {
		return m.NeedHistory
	}
	return false
}

func (m *RcmdPlaylistReq) GetNeedTopCards() bool {
	if m != nil {
		return m.NeedTopCards
	}
	return false
}

func (m *RcmdPlaylistReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *RcmdPlaylistReq) GetPage() *pagination.Pagination {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *RcmdPlaylistReq) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// 服务端使用的翻页offset结构编码
// 客户端无需关心
type RcmdOffset struct {
	// 来源
	RcmdFrom int64 `protobuf:"varint,1,opt,name=rcmd_from,json=rcmdFrom,proto3" json:"rcmd_from,omitempty"`
	// 对象id 含义和来源有关
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 页码
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// 连播标识
	SessionId string `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// AI用
	FromTrackid          string   `protobuf:"bytes,5,opt,name=from_trackid,json=fromTrackid,proto3" json:"from_trackid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RcmdOffset) Reset()         { *m = RcmdOffset{} }
func (m *RcmdOffset) String() string { return proto.CompactTextString(m) }
func (*RcmdOffset) ProtoMessage()    {}
func (*RcmdOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{38}
}
func (m *RcmdOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RcmdOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RcmdOffset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RcmdOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdOffset.Merge(m, src)
}
func (m *RcmdOffset) XXX_Size() int {
	return m.Size()
}
func (m *RcmdOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdOffset.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdOffset proto.InternalMessageInfo

func (m *RcmdOffset) GetRcmdFrom() int64 {
	if m != nil {
		return m.RcmdFrom
	}
	return 0
}

func (m *RcmdOffset) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RcmdOffset) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RcmdOffset) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RcmdOffset) GetFromTrackid() string {
	if m != nil {
		return m.FromTrackid
	}
	return ""
}

// 推荐播单响应 不分页  下发列表长度由服务端控制
type RcmdPlaylistResp struct {
	// 推荐稿件list
	List []*DetailItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// 列表头部的历史条目个数
	HistoryLen int64 `protobuf:"varint,2,opt,name=history_len,json=historyLen,proto3" json:"history_len,omitempty"`
	// 容器顶部起点卡片
	// 【重要】端上对于不认识的卡片类型直接丢弃不要做渲染！
	TopCards []*TopCard `protobuf:"bytes,3,rep,name=top_cards,json=topCards,proto3" json:"top_cards,omitempty"`
	// 下一页的翻页参数 next为空的情况下代表已经到底了
	NextPage             *pagination.PaginationReply `protobuf:"bytes,4,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RcmdPlaylistResp) Reset()         { *m = RcmdPlaylistResp{} }
func (m *RcmdPlaylistResp) String() string { return proto.CompactTextString(m) }
func (*RcmdPlaylistResp) ProtoMessage()    {}
func (*RcmdPlaylistResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{39}
}
func (m *RcmdPlaylistResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RcmdPlaylistResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RcmdPlaylistResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RcmdPlaylistResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RcmdPlaylistResp.Merge(m, src)
}
func (m *RcmdPlaylistResp) XXX_Size() int {
	return m.Size()
}
func (m *RcmdPlaylistResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RcmdPlaylistResp.DiscardUnknown(m)
}

var xxx_messageInfo_RcmdPlaylistResp proto.InternalMessageInfo

func (m *RcmdPlaylistResp) GetList() []*DetailItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RcmdPlaylistResp) GetHistoryLen() int64 {
	if m != nil {
		return m.HistoryLen
	}
	return 0
}

func (m *RcmdPlaylistResp) GetTopCards() []*TopCard {
	if m != nil {
		return m.TopCards
	}
	return nil
}

func (m *RcmdPlaylistResp) GetNextPage() *pagination.PaginationReply {
	if m != nil {
		return m.NextPage
	}
	return nil
}

type TopCard struct {
	// 卡片模块名称（最近在听/我的收藏/我的关注等）
	// 当【卡片数据】里的text为空时，卡片的模块名称应居中展示
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 点击卡片后的播放方式
	PlayStyle TopCard_PlayStrategy `protobuf:"varint,2,opt,name=play_style,json=playStyle,proto3,enum=bilibili.app.listener.v1.TopCard_PlayStrategy" json:"play_style,omitempty"`
	// 卡片类型
	CardType TopCardType `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3,enum=bilibili.app.listener.v1.TopCardType" json:"card_type,omitempty"`
	// 卡片数据
	//
	// Types that are valid to be assigned to Card:
	//	*TopCard_ListenHistory
	//	*TopCard_FavFolder
	//	*TopCard_UpRecall
	//	*TopCard_PickToday
	Card isTopCard_Card `protobuf_oneof:"card"`
	// 卡片位次 从1开始
	Pos int64 `protobuf:"varint,8,opt,name=pos,proto3" json:"pos,omitempty"`
	// 卡片标题前的icon 可能没有
	TitleIcon            string   `protobuf:"bytes,9,opt,name=title_icon,json=titleIcon,proto3" json:"title_icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopCard) Reset()         { *m = TopCard{} }
func (m *TopCard) String() string { return proto.CompactTextString(m) }
func (*TopCard) ProtoMessage()    {}
func (*TopCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{40}
}
func (m *TopCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopCard.Merge(m, src)
}
func (m *TopCard) XXX_Size() int {
	return m.Size()
}
func (m *TopCard) XXX_DiscardUnknown() {
	xxx_messageInfo_TopCard.DiscardUnknown(m)
}

var xxx_messageInfo_TopCard proto.InternalMessageInfo

type isTopCard_Card interface {
	isTopCard_Card()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TopCard_ListenHistory struct {
	ListenHistory *TpcdHistory `protobuf:"bytes,4,opt,name=listen_history,json=listenHistory,proto3,oneof" json:"listen_history,omitempty"`
}
type TopCard_FavFolder struct {
	FavFolder *TpcdFavFolder `protobuf:"bytes,5,opt,name=fav_folder,json=favFolder,proto3,oneof" json:"fav_folder,omitempty"`
}
type TopCard_UpRecall struct {
	UpRecall *TpcdUpRecall `protobuf:"bytes,6,opt,name=up_recall,json=upRecall,proto3,oneof" json:"up_recall,omitempty"`
}
type TopCard_PickToday struct {
	PickToday *TpcdPickToday `protobuf:"bytes,7,opt,name=pick_today,json=pickToday,proto3,oneof" json:"pick_today,omitempty"`
}

func (*TopCard_ListenHistory) isTopCard_Card() {}
func (*TopCard_FavFolder) isTopCard_Card()     {}
func (*TopCard_UpRecall) isTopCard_Card()      {}
func (*TopCard_PickToday) isTopCard_Card()     {}

func (m *TopCard) GetCard() isTopCard_Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *TopCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TopCard) GetPlayStyle() TopCard_PlayStrategy {
	if m != nil {
		return m.PlayStyle
	}
	return TopCard_NO_INTERRUPT
}

func (m *TopCard) GetCardType() TopCardType {
	if m != nil {
		return m.CardType
	}
	return TopCardType_UNSPECIFIED
}

func (m *TopCard) GetListenHistory() *TpcdHistory {
	if x, ok := m.GetCard().(*TopCard_ListenHistory); ok {
		return x.ListenHistory
	}
	return nil
}

func (m *TopCard) GetFavFolder() *TpcdFavFolder {
	if x, ok := m.GetCard().(*TopCard_FavFolder); ok {
		return x.FavFolder
	}
	return nil
}

func (m *TopCard) GetUpRecall() *TpcdUpRecall {
	if x, ok := m.GetCard().(*TopCard_UpRecall); ok {
		return x.UpRecall
	}
	return nil
}

func (m *TopCard) GetPickToday() *TpcdPickToday {
	if x, ok := m.GetCard().(*TopCard_PickToday); ok {
		return x.PickToday
	}
	return nil
}

func (m *TopCard) GetPos() int64 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *TopCard) GetTitleIcon() string {
	if m != nil {
		return m.TitleIcon
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TopCard) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TopCard_ListenHistory)(nil),
		(*TopCard_FavFolder)(nil),
		(*TopCard_UpRecall)(nil),
		(*TopCard_PickToday)(nil),
	}
}

type TpcdHistory struct {
	// 外露的稿件完整信息
	Item *DetailItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 一般来说是外露稿件的标题
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// 外露稿件的封面
	Pic                  string   `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TpcdHistory) Reset()         { *m = TpcdHistory{} }
func (m *TpcdHistory) String() string { return proto.CompactTextString(m) }
func (*TpcdHistory) ProtoMessage()    {}
func (*TpcdHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{41}
}
func (m *TpcdHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TpcdHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TpcdHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TpcdHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TpcdHistory.Merge(m, src)
}
func (m *TpcdHistory) XXX_Size() int {
	return m.Size()
}
func (m *TpcdHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TpcdHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TpcdHistory proto.InternalMessageInfo

func (m *TpcdHistory) GetItem() *DetailItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *TpcdHistory) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TpcdHistory) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

type TpcdFavFolder struct {
	// 外露的稿件完整信息
	Item *DetailItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 一般来说是外露稿件的标题
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// 外露稿件的封面
	Pic string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic,omitempty"`
	// 收藏夹id
	Fid int64 `protobuf:"varint,4,opt,name=fid,proto3" json:"fid,omitempty"`
	// 收藏夹类型
	FolderType           int32    `protobuf:"varint,5,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TpcdFavFolder) Reset()         { *m = TpcdFavFolder{} }
func (m *TpcdFavFolder) String() string { return proto.CompactTextString(m) }
func (*TpcdFavFolder) ProtoMessage()    {}
func (*TpcdFavFolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{42}
}
func (m *TpcdFavFolder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TpcdFavFolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TpcdFavFolder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TpcdFavFolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TpcdFavFolder.Merge(m, src)
}
func (m *TpcdFavFolder) XXX_Size() int {
	return m.Size()
}
func (m *TpcdFavFolder) XXX_DiscardUnknown() {
	xxx_messageInfo_TpcdFavFolder.DiscardUnknown(m)
}

var xxx_messageInfo_TpcdFavFolder proto.InternalMessageInfo

func (m *TpcdFavFolder) GetItem() *DetailItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *TpcdFavFolder) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TpcdFavFolder) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *TpcdFavFolder) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *TpcdFavFolder) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

type TpcdUpRecall struct {
	// 召回的UP主mid
	UpMid int64 `protobuf:"varint,1,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty"`
	// 一般来说是up主的名称
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// up主头像
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// 对应播单的类型
	MedialistType int64 `protobuf:"varint,4,opt,name=medialist_type,json=medialistType,proto3" json:"medialist_type,omitempty"`
	// 对应播单bizId
	MedialistBizId int64 `protobuf:"varint,5,opt,name=medialist_biz_id,json=medialistBizId,proto3" json:"medialist_biz_id,omitempty"`
	// 要起播的稿件的完整信息
	Item                 *DetailItem `protobuf:"bytes,6,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TpcdUpRecall) Reset()         { *m = TpcdUpRecall{} }
func (m *TpcdUpRecall) String() string { return proto.CompactTextString(m) }
func (*TpcdUpRecall) ProtoMessage()    {}
func (*TpcdUpRecall) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{43}
}
func (m *TpcdUpRecall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TpcdUpRecall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TpcdUpRecall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TpcdUpRecall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TpcdUpRecall.Merge(m, src)
}
func (m *TpcdUpRecall) XXX_Size() int {
	return m.Size()
}
func (m *TpcdUpRecall) XXX_DiscardUnknown() {
	xxx_messageInfo_TpcdUpRecall.DiscardUnknown(m)
}

var xxx_messageInfo_TpcdUpRecall proto.InternalMessageInfo

func (m *TpcdUpRecall) GetUpMid() int64 {
	if m != nil {
		return m.UpMid
	}
	return 0
}

func (m *TpcdUpRecall) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TpcdUpRecall) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *TpcdUpRecall) GetMedialistType() int64 {
	if m != nil {
		return m.MedialistType
	}
	return 0
}

func (m *TpcdUpRecall) GetMedialistBizId() int64 {
	if m != nil {
		return m.MedialistBizId
	}
	return 0
}

func (m *TpcdUpRecall) GetItem() *DetailItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type TpcdPickToday struct {
	// 外露的稿件完整信息
	Item *DetailItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 一般来说是外露稿件的标题
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// 外露稿件的封面
	Pic string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic,omitempty"`
	// 运营精选的播单组id
	PickId int64 `protobuf:"varint,4,opt,name=pick_id,json=pickId,proto3" json:"pick_id,omitempty"`
	// 运营精选的播单id
	PickCardId           int64    `protobuf:"varint,5,opt,name=pick_card_id,json=pickCardId,proto3" json:"pick_card_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TpcdPickToday) Reset()         { *m = TpcdPickToday{} }
func (m *TpcdPickToday) String() string { return proto.CompactTextString(m) }
func (*TpcdPickToday) ProtoMessage()    {}
func (*TpcdPickToday) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{44}
}
func (m *TpcdPickToday) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TpcdPickToday) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TpcdPickToday.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TpcdPickToday) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TpcdPickToday.Merge(m, src)
}
func (m *TpcdPickToday) XXX_Size() int {
	return m.Size()
}
func (m *TpcdPickToday) XXX_DiscardUnknown() {
	xxx_messageInfo_TpcdPickToday.DiscardUnknown(m)
}

var xxx_messageInfo_TpcdPickToday proto.InternalMessageInfo

func (m *TpcdPickToday) GetItem() *DetailItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *TpcdPickToday) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TpcdPickToday) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *TpcdPickToday) GetPickId() int64 {
	if m != nil {
		return m.PickId
	}
	return 0
}

func (m *TpcdPickToday) GetPickCardId() int64 {
	if m != nil {
		return m.PickCardId
	}
	return 0
}

type FavFolderAuthor struct {
	// member id
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户名
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavFolderAuthor) Reset()         { *m = FavFolderAuthor{} }
func (m *FavFolderAuthor) String() string { return proto.CompactTextString(m) }
func (*FavFolderAuthor) ProtoMessage()    {}
func (*FavFolderAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{45}
}
func (m *FavFolderAuthor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderAuthor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderAuthor.Merge(m, src)
}
func (m *FavFolderAuthor) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderAuthor proto.InternalMessageInfo

func (m *FavFolderAuthor) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FavFolderAuthor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 用户收藏夹
type FavFolder struct {
	// 收藏夹id
	Fid int64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 收藏夹类型 每个业务接入方会有一种收藏夹类型
	// 例如： 2-视频收藏夹 21-UGC合集
	FolderType int32 `protobuf:"varint,2,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	// 收藏夹创建人信息
	Owner *FavFolderAuthor `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// 收藏夹名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 收藏夹封面
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	// 收藏夹描述
	Desc string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	// 收藏夹内资源数目
	Count int32 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	// 收藏夹属性位
	// 0- 0公开 1非公开
	// 1- 0默认收藏夹 1非默认（用户创建）
	// 2- 1待审
	// 3- 1管理员删除
	// 4- 1名称待审
	// 5- 1简介待审
	// 6- 1封面待审
	// 7- 1敏感待审
	Attr int32 `protobuf:"varint,8,opt,name=attr,proto3" json:"attr,omitempty"`
	// 收藏夹状态
	//  0 正常
	// -1 已失效
	State int32 `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`
	// 是否已收藏/订阅该收藏夹
	// 0-否 1-是
	Favored int32 `protobuf:"varint,10,opt,name=favored,proto3" json:"favored,omitempty"`
	// 创建时间 时间戳
	Ctime go_common_library_time.Time `protobuf:"varint,11,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	// 修改时间 时间戳
	Mtime go_common_library_time.Time `protobuf:"varint,12,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	// 收藏数
	StatFavCnt int32 `protobuf:"varint,13,opt,name=stat_fav_cnt,json=statFavCnt,proto3" json:"stat_fav_cnt,omitempty"`
	// 分享数
	StatShareCnt int32 `protobuf:"varint,14,opt,name=stat_share_cnt,json=statShareCnt,proto3" json:"stat_share_cnt,omitempty"`
	// 点赞数
	StatLikeCnt int32 `protobuf:"varint,15,opt,name=stat_like_cnt,json=statLikeCnt,proto3" json:"stat_like_cnt,omitempty"`
	// 播放数
	StatPlayCnt int32 `protobuf:"varint,16,opt,name=stat_play_cnt,json=statPlayCnt,proto3" json:"stat_play_cnt,omitempty"`
	// 评论数
	StatReplyCnt int32 `protobuf:"varint,17,opt,name=stat_reply_cnt,json=statReplyCnt,proto3" json:"stat_reply_cnt,omitempty"`
	// （仅限FavFolderList接口使用）
	// 判断传入的稿件是否在这个收藏夹里
	// 0-不在 1-在
	FavState             int32    `protobuf:"varint,18,opt,name=fav_state,json=favState,proto3" json:"fav_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavFolder) Reset()         { *m = FavFolder{} }
func (m *FavFolder) String() string { return proto.CompactTextString(m) }
func (*FavFolder) ProtoMessage()    {}
func (*FavFolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{46}
}
func (m *FavFolder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolder.Merge(m, src)
}
func (m *FavFolder) XXX_Size() int {
	return m.Size()
}
func (m *FavFolder) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolder.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolder proto.InternalMessageInfo

func (m *FavFolder) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavFolder) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

func (m *FavFolder) GetOwner() *FavFolderAuthor {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *FavFolder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FavFolder) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *FavFolder) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *FavFolder) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FavFolder) GetAttr() int32 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *FavFolder) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *FavFolder) GetFavored() int32 {
	if m != nil {
		return m.Favored
	}
	return 0
}

func (m *FavFolder) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *FavFolder) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *FavFolder) GetStatFavCnt() int32 {
	if m != nil {
		return m.StatFavCnt
	}
	return 0
}

func (m *FavFolder) GetStatShareCnt() int32 {
	if m != nil {
		return m.StatShareCnt
	}
	return 0
}

func (m *FavFolder) GetStatLikeCnt() int32 {
	if m != nil {
		return m.StatLikeCnt
	}
	return 0
}

func (m *FavFolder) GetStatPlayCnt() int32 {
	if m != nil {
		return m.StatPlayCnt
	}
	return 0
}

func (m *FavFolder) GetStatReplyCnt() int32 {
	if m != nil {
		return m.StatReplyCnt
	}
	return 0
}

func (m *FavFolder) GetFavState() int32 {
	if m != nil {
		return m.FavState
	}
	return 0
}

// 获取用户收藏夹列表
type FavFolderListReq struct {
	// （可选）指定获取哪几类收藏夹
	// 不传则默认返回 视频 和 收藏与订阅 的收藏夹列表
	// 在添加收藏时，浮窗内查询应该指定只查询视频收藏夹（type=2）即可
	FolderTypes []int32 `protobuf:"varint,1,rep,packed,name=folder_types,json=folderTypes,proto3" json:"folder_types,omitempty"`
	// （可选）传入一个稿件信息，返回的收藏夹列表中会包含一个字段
	// 判断该稿件是否在某个收藏夹里
	Item                 *PlayItem `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FavFolderListReq) Reset()         { *m = FavFolderListReq{} }
func (m *FavFolderListReq) String() string { return proto.CompactTextString(m) }
func (*FavFolderListReq) ProtoMessage()    {}
func (*FavFolderListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{47}
}
func (m *FavFolderListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderListReq.Merge(m, src)
}
func (m *FavFolderListReq) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderListReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderListReq proto.InternalMessageInfo

func (m *FavFolderListReq) GetFolderTypes() []int32 {
	if m != nil {
		return m.FolderTypes
	}
	return nil
}

func (m *FavFolderListReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type FavFolderListResp struct {
	// 收藏夹列表 不分页
	List                 []*FavFolder `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FavFolderListResp) Reset()         { *m = FavFolderListResp{} }
func (m *FavFolderListResp) String() string { return proto.CompactTextString(m) }
func (*FavFolderListResp) ProtoMessage()    {}
func (*FavFolderListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{48}
}
func (m *FavFolderListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderListResp.Merge(m, src)
}
func (m *FavFolderListResp) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderListResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderListResp proto.InternalMessageInfo

func (m *FavFolderListResp) GetList() []*FavFolder {
	if m != nil {
		return m.List
	}
	return nil
}

// 用户收藏资源
type FavItem struct {
	// 资源类型
	// 一个收藏夹内可能存在多种类型的资源，见oid字段例子
	ItemType int32 `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	//  不同的item type情况下oid意义不同
	// 2（视频）- avid【已映射为 UGC-1】
	// 24（OGV）- epid【已映射为 OGV-2】
	// 12（音频）- song id【已映射为 Audio-3】
	Oid int64 `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	// 所属 folder id
	Fid int64 `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty"`
	// 收藏该资源的用户id
	Mid int64 `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	// 修改时间
	Mtime go_common_library_time.Time `protobuf:"varint,5,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	// 创建时间
	Ctime go_common_library_time.Time `protobuf:"varint,6,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	// 以下是埋点字段 端上直接透传
	Et                   *EventTracking `protobuf:"bytes,7,opt,name=et,proto3" json:"et,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FavItem) Reset()         { *m = FavItem{} }
func (m *FavItem) String() string { return proto.CompactTextString(m) }
func (*FavItem) ProtoMessage()    {}
func (*FavItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{49}
}
func (m *FavItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItem.Merge(m, src)
}
func (m *FavItem) XXX_Size() int {
	return m.Size()
}
func (m *FavItem) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItem.DiscardUnknown(m)
}

var xxx_messageInfo_FavItem proto.InternalMessageInfo

func (m *FavItem) GetItemType() int32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *FavItem) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *FavItem) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavItem) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FavItem) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *FavItem) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *FavItem) GetEt() *EventTracking {
	if m != nil {
		return m.Et
	}
	return nil
}

// 单个收藏资源详细信息
type FavItemDetail struct {
	// 收藏资源标识
	Item *FavItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 资源的up主信息
	Owner *FavItemAuthor `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// 资源的计数信息
	Stat *FavItemStat `protobuf:"bytes,3,opt,name=stat,proto3" json:"stat,omitempty"`
	// 资源封面
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	// 资源标题
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// 资源时长 秒
	Duration int64 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// 资源条目的显示状态
	// -1 稿件已失效
	//  0 正常显示
	//  1 不支持的稿件（置灰）
	// 对于其他非0状态一律视作"不支持的稿件"并置灰
	State int32 `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	// 服务端下发toast信息 点击不可播资源时提示
	Message string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	// 该收藏资源的分p数
	Parts                int32    `protobuf:"varint,9,opt,name=parts,proto3" json:"parts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavItemDetail) Reset()         { *m = FavItemDetail{} }
func (m *FavItemDetail) String() string { return proto.CompactTextString(m) }
func (*FavItemDetail) ProtoMessage()    {}
func (*FavItemDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{50}
}
func (m *FavItemDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemDetail.Merge(m, src)
}
func (m *FavItemDetail) XXX_Size() int {
	return m.Size()
}
func (m *FavItemDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemDetail.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemDetail proto.InternalMessageInfo

func (m *FavItemDetail) GetItem() *FavItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *FavItemDetail) GetOwner() *FavItemAuthor {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *FavItemDetail) GetStat() *FavItemStat {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *FavItemDetail) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *FavItemDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FavItemDetail) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *FavItemDetail) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *FavItemDetail) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FavItemDetail) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

type FavItemAuthor struct {
	// member id
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// up主名称
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavItemAuthor) Reset()         { *m = FavItemAuthor{} }
func (m *FavItemAuthor) String() string { return proto.CompactTextString(m) }
func (*FavItemAuthor) ProtoMessage()    {}
func (*FavItemAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{51}
}
func (m *FavItemAuthor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemAuthor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemAuthor.Merge(m, src)
}
func (m *FavItemAuthor) XXX_Size() int {
	return m.Size()
}
func (m *FavItemAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemAuthor proto.InternalMessageInfo

func (m *FavItemAuthor) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FavItemAuthor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FavItemStat struct {
	// 播放数
	View int32 `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	// 评论数
	Reply                int32    `protobuf:"varint,2,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavItemStat) Reset()         { *m = FavItemStat{} }
func (m *FavItemStat) String() string { return proto.CompactTextString(m) }
func (*FavItemStat) ProtoMessage()    {}
func (*FavItemStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{52}
}
func (m *FavItemStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemStat.Merge(m, src)
}
func (m *FavItemStat) XXX_Size() int {
	return m.Size()
}
func (m *FavItemStat) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemStat.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemStat proto.InternalMessageInfo

func (m *FavItemStat) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *FavItemStat) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

// 获取收藏夹内资源详细信息
type FavFolderDetailReq struct {
	// 收藏夹id 必传
	Fid int64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 收藏夹类型 必传
	FolderType int32 `protobuf:"varint,2,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	// 要访问的收藏夹创建者id
	// 不知道的话可以不传
	FavMid int64 `protobuf:"varint,3,opt,name=fav_mid,json=favMid,proto3" json:"fav_mid,omitempty"`
	// 翻页锚点 只能向后翻页
	// 只传 item_type 和 oid 即可
	// 不传默认第一页
	LastItem *FavItem `protobuf:"bytes,4,opt,name=last_item,json=lastItem,proto3" json:"last_item,omitempty"`
	// 页面大小 默认20条
	PageSize uint32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 是否一并返回收藏夹的详细信息
	// 不需要就不传 会拖慢处理
	NeedFolderInfo       bool     `protobuf:"varint,6,opt,name=need_folder_info,json=needFolderInfo,proto3" json:"need_folder_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavFolderDetailReq) Reset()         { *m = FavFolderDetailReq{} }
func (m *FavFolderDetailReq) String() string { return proto.CompactTextString(m) }
func (*FavFolderDetailReq) ProtoMessage()    {}
func (*FavFolderDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{53}
}
func (m *FavFolderDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderDetailReq.Merge(m, src)
}
func (m *FavFolderDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderDetailReq proto.InternalMessageInfo

func (m *FavFolderDetailReq) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavFolderDetailReq) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

func (m *FavFolderDetailReq) GetFavMid() int64 {
	if m != nil {
		return m.FavMid
	}
	return 0
}

func (m *FavFolderDetailReq) GetLastItem() *FavItem {
	if m != nil {
		return m.LastItem
	}
	return nil
}

func (m *FavFolderDetailReq) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *FavFolderDetailReq) GetNeedFolderInfo() bool {
	if m != nil {
		return m.NeedFolderInfo
	}
	return false
}

type FavFolderDetailResp struct {
	// 收藏夹资源总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 是否已经到底
	ReachEnd bool `protobuf:"varint,2,opt,name=reach_end,json=reachEnd,proto3" json:"reach_end,omitempty"`
	// 收藏资源列表
	List []*FavItemDetail `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	// 收藏夹详细信息
	FolderInfo           *FavFolder `protobuf:"bytes,4,opt,name=folder_info,json=folderInfo,proto3" json:"folder_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FavFolderDetailResp) Reset()         { *m = FavFolderDetailResp{} }
func (m *FavFolderDetailResp) String() string { return proto.CompactTextString(m) }
func (*FavFolderDetailResp) ProtoMessage()    {}
func (*FavFolderDetailResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{54}
}
func (m *FavFolderDetailResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderDetailResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderDetailResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderDetailResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderDetailResp.Merge(m, src)
}
func (m *FavFolderDetailResp) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderDetailResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderDetailResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderDetailResp proto.InternalMessageInfo

func (m *FavFolderDetailResp) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FavFolderDetailResp) GetReachEnd() bool {
	if m != nil {
		return m.ReachEnd
	}
	return false
}

func (m *FavFolderDetailResp) GetList() []*FavItemDetail {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *FavFolderDetailResp) GetFolderInfo() *FavFolder {
	if m != nil {
		return m.FolderInfo
	}
	return nil
}

// 创建收藏夹
type FavFolderCreateReq struct {
	// 收藏夹名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 收藏夹描述信息
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// 是否公开 默认公开 0-公开 1-私密
	Public int32 `protobuf:"varint,3,opt,name=public,proto3" json:"public,omitempty"`
	// 创建的收藏夹类型 默认 2（视频收藏夹）
	FolderType           int32    `protobuf:"varint,4,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavFolderCreateReq) Reset()         { *m = FavFolderCreateReq{} }
func (m *FavFolderCreateReq) String() string { return proto.CompactTextString(m) }
func (*FavFolderCreateReq) ProtoMessage()    {}
func (*FavFolderCreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{55}
}
func (m *FavFolderCreateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderCreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderCreateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderCreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderCreateReq.Merge(m, src)
}
func (m *FavFolderCreateReq) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderCreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderCreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderCreateReq proto.InternalMessageInfo

func (m *FavFolderCreateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FavFolderCreateReq) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *FavFolderCreateReq) GetPublic() int32 {
	if m != nil {
		return m.Public
	}
	return 0
}

func (m *FavFolderCreateReq) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

type FavFolderCreateResp struct {
	// 创建好的收藏夹id
	Fid int64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 创建好的收藏夹type
	FolderType int32 `protobuf:"varint,2,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	// 服务端下发toast
	// 若为空则端上兜底文案
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavFolderCreateResp) Reset()         { *m = FavFolderCreateResp{} }
func (m *FavFolderCreateResp) String() string { return proto.CompactTextString(m) }
func (*FavFolderCreateResp) ProtoMessage()    {}
func (*FavFolderCreateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{56}
}
func (m *FavFolderCreateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderCreateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderCreateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderCreateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderCreateResp.Merge(m, src)
}
func (m *FavFolderCreateResp) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderCreateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderCreateResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderCreateResp proto.InternalMessageInfo

func (m *FavFolderCreateResp) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavFolderCreateResp) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

func (m *FavFolderCreateResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FavFolderDeleteReq struct {
	// 要删除的收藏夹id
	Fid int64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 要删除的收藏夹type
	FolderType           int32    `protobuf:"varint,2,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavFolderDeleteReq) Reset()         { *m = FavFolderDeleteReq{} }
func (m *FavFolderDeleteReq) String() string { return proto.CompactTextString(m) }
func (*FavFolderDeleteReq) ProtoMessage()    {}
func (*FavFolderDeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{57}
}
func (m *FavFolderDeleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderDeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderDeleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderDeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderDeleteReq.Merge(m, src)
}
func (m *FavFolderDeleteReq) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderDeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderDeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderDeleteReq proto.InternalMessageInfo

func (m *FavFolderDeleteReq) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavFolderDeleteReq) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

type FavFolderDeleteResp struct {
	// 服务端下发toast
	// 若为空则端上兜底文案
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavFolderDeleteResp) Reset()         { *m = FavFolderDeleteResp{} }
func (m *FavFolderDeleteResp) String() string { return proto.CompactTextString(m) }
func (*FavFolderDeleteResp) ProtoMessage()    {}
func (*FavFolderDeleteResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{58}
}
func (m *FavFolderDeleteResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderDeleteResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderDeleteResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderDeleteResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderDeleteResp.Merge(m, src)
}
func (m *FavFolderDeleteResp) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderDeleteResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderDeleteResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderDeleteResp proto.InternalMessageInfo

func (m *FavFolderDeleteResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FavItemAddReq struct {
	// 要加入的收藏夹id
	Fid int64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 收藏夹类型
	FolderType int32 `protobuf:"varint,2,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	// 播单item或者收藏item二选一
	//
	// Types that are valid to be assigned to Item:
	//	*FavItemAddReq_Play
	//	*FavItemAddReq_Fav
	Item                 isFavItemAddReq_Item `protobuf_oneof:"item"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FavItemAddReq) Reset()         { *m = FavItemAddReq{} }
func (m *FavItemAddReq) String() string { return proto.CompactTextString(m) }
func (*FavItemAddReq) ProtoMessage()    {}
func (*FavItemAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{59}
}
func (m *FavItemAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemAddReq.Merge(m, src)
}
func (m *FavItemAddReq) XXX_Size() int {
	return m.Size()
}
func (m *FavItemAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemAddReq proto.InternalMessageInfo

type isFavItemAddReq_Item interface {
	isFavItemAddReq_Item()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FavItemAddReq_Play struct {
	Play *PlayItem `protobuf:"bytes,3,opt,name=play,proto3,oneof" json:"play,omitempty"`
}
type FavItemAddReq_Fav struct {
	Fav *FavItem `protobuf:"bytes,4,opt,name=fav,proto3,oneof" json:"fav,omitempty"`
}

func (*FavItemAddReq_Play) isFavItemAddReq_Item() {}
func (*FavItemAddReq_Fav) isFavItemAddReq_Item()  {}

func (m *FavItemAddReq) GetItem() isFavItemAddReq_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *FavItemAddReq) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavItemAddReq) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

func (m *FavItemAddReq) GetPlay() *PlayItem {
	if x, ok := m.GetItem().(*FavItemAddReq_Play); ok {
		return x.Play
	}
	return nil
}

func (m *FavItemAddReq) GetFav() *FavItem {
	if x, ok := m.GetItem().(*FavItemAddReq_Fav); ok {
		return x.Fav
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FavItemAddReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FavItemAddReq_Play)(nil),
		(*FavItemAddReq_Fav)(nil),
	}
}

type FavItemAddResp struct {
	// 服务端下发toast
	// 若为则空端上兜底文案
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavItemAddResp) Reset()         { *m = FavItemAddResp{} }
func (m *FavItemAddResp) String() string { return proto.CompactTextString(m) }
func (*FavItemAddResp) ProtoMessage()    {}
func (*FavItemAddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{60}
}
func (m *FavItemAddResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemAddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemAddResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemAddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemAddResp.Merge(m, src)
}
func (m *FavItemAddResp) XXX_Size() int {
	return m.Size()
}
func (m *FavItemAddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemAddResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemAddResp proto.InternalMessageInfo

func (m *FavItemAddResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FavItemDelReq struct {
	// 收藏夹id
	Fid int64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 收藏夹类型
	FolderType int32 `protobuf:"varint,2,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	// 播单item或者收藏item二选一
	//
	// Types that are valid to be assigned to Item:
	//	*FavItemDelReq_Play
	//	*FavItemDelReq_Fav
	Item                 isFavItemDelReq_Item `protobuf_oneof:"item"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FavItemDelReq) Reset()         { *m = FavItemDelReq{} }
func (m *FavItemDelReq) String() string { return proto.CompactTextString(m) }
func (*FavItemDelReq) ProtoMessage()    {}
func (*FavItemDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{61}
}
func (m *FavItemDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemDelReq.Merge(m, src)
}
func (m *FavItemDelReq) XXX_Size() int {
	return m.Size()
}
func (m *FavItemDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemDelReq proto.InternalMessageInfo

type isFavItemDelReq_Item interface {
	isFavItemDelReq_Item()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FavItemDelReq_Play struct {
	Play *PlayItem `protobuf:"bytes,3,opt,name=play,proto3,oneof" json:"play,omitempty"`
}
type FavItemDelReq_Fav struct {
	Fav *FavItem `protobuf:"bytes,4,opt,name=fav,proto3,oneof" json:"fav,omitempty"`
}

func (*FavItemDelReq_Play) isFavItemDelReq_Item() {}
func (*FavItemDelReq_Fav) isFavItemDelReq_Item()  {}

func (m *FavItemDelReq) GetItem() isFavItemDelReq_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *FavItemDelReq) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavItemDelReq) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

func (m *FavItemDelReq) GetPlay() *PlayItem {
	if x, ok := m.GetItem().(*FavItemDelReq_Play); ok {
		return x.Play
	}
	return nil
}

func (m *FavItemDelReq) GetFav() *FavItem {
	if x, ok := m.GetItem().(*FavItemDelReq_Fav); ok {
		return x.Fav
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FavItemDelReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FavItemDelReq_Play)(nil),
		(*FavItemDelReq_Fav)(nil),
	}
}

type FavItemDelResp struct {
	// 服务端下发toast
	// 若为则空端上兜底文案
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavItemDelResp) Reset()         { *m = FavItemDelResp{} }
func (m *FavItemDelResp) String() string { return proto.CompactTextString(m) }
func (*FavItemDelResp) ProtoMessage()    {}
func (*FavItemDelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{62}
}
func (m *FavItemDelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemDelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemDelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemDelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemDelResp.Merge(m, src)
}
func (m *FavItemDelResp) XXX_Size() int {
	return m.Size()
}
func (m *FavItemDelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemDelResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemDelResp proto.InternalMessageInfo

func (m *FavItemDelResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FavFolderAction struct {
	// 收藏夹id
	Fid int64 `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 收藏夹类型
	FolderType           int32                  `protobuf:"varint,2,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	Action               FavFolderAction_Action `protobuf:"varint,3,opt,name=action,proto3,enum=bilibili.app.listener.v1.FavFolderAction_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FavFolderAction) Reset()         { *m = FavFolderAction{} }
func (m *FavFolderAction) String() string { return proto.CompactTextString(m) }
func (*FavFolderAction) ProtoMessage()    {}
func (*FavFolderAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{63}
}
func (m *FavFolderAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderAction.Merge(m, src)
}
func (m *FavFolderAction) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderAction) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderAction.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderAction proto.InternalMessageInfo

func (m *FavFolderAction) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavFolderAction) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

func (m *FavFolderAction) GetAction() FavFolderAction_Action {
	if m != nil {
		return m.Action
	}
	return FavFolderAction_UNSPECIFIED
}

// 在多个收藏夹中增删某个item
type FavItemBatchReq struct {
	// 要操作的收藏夹信息
	Actions []*FavFolderAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// 要操作的item
	//
	// Types that are valid to be assigned to Item:
	//	*FavItemBatchReq_Play
	//	*FavItemBatchReq_Fav
	Item                 isFavItemBatchReq_Item `protobuf_oneof:"item"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FavItemBatchReq) Reset()         { *m = FavItemBatchReq{} }
func (m *FavItemBatchReq) String() string { return proto.CompactTextString(m) }
func (*FavItemBatchReq) ProtoMessage()    {}
func (*FavItemBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{64}
}
func (m *FavItemBatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemBatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemBatchReq.Merge(m, src)
}
func (m *FavItemBatchReq) XXX_Size() int {
	return m.Size()
}
func (m *FavItemBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemBatchReq proto.InternalMessageInfo

type isFavItemBatchReq_Item interface {
	isFavItemBatchReq_Item()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FavItemBatchReq_Play struct {
	Play *PlayItem `protobuf:"bytes,2,opt,name=play,proto3,oneof" json:"play,omitempty"`
}
type FavItemBatchReq_Fav struct {
	Fav *FavItem `protobuf:"bytes,3,opt,name=fav,proto3,oneof" json:"fav,omitempty"`
}

func (*FavItemBatchReq_Play) isFavItemBatchReq_Item() {}
func (*FavItemBatchReq_Fav) isFavItemBatchReq_Item()  {}

func (m *FavItemBatchReq) GetItem() isFavItemBatchReq_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *FavItemBatchReq) GetActions() []*FavFolderAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *FavItemBatchReq) GetPlay() *PlayItem {
	if x, ok := m.GetItem().(*FavItemBatchReq_Play); ok {
		return x.Play
	}
	return nil
}

func (m *FavItemBatchReq) GetFav() *FavItem {
	if x, ok := m.GetItem().(*FavItemBatchReq_Fav); ok {
		return x.Fav
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FavItemBatchReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FavItemBatchReq_Play)(nil),
		(*FavItemBatchReq_Fav)(nil),
	}
}

type FavItemBatchResp struct {
	// 服务端下发toast
	// 若为空 则端上兜底文案
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavItemBatchResp) Reset()         { *m = FavItemBatchResp{} }
func (m *FavItemBatchResp) String() string { return proto.CompactTextString(m) }
func (*FavItemBatchResp) ProtoMessage()    {}
func (*FavItemBatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{65}
}
func (m *FavItemBatchResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavItemBatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavItemBatchResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavItemBatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavItemBatchResp.Merge(m, src)
}
func (m *FavItemBatchResp) XXX_Size() int {
	return m.Size()
}
func (m *FavItemBatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavItemBatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavItemBatchResp proto.InternalMessageInfo

func (m *FavItemBatchResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FavoredInAnyFoldersReq struct {
	// 要检查的收藏夹类型 默认 2 （只检查视频收藏夹）
	FolderTypes []int32 `protobuf:"varint,1,rep,packed,name=folder_types,json=folderTypes,proto3" json:"folder_types,omitempty"`
	// 要检查的item
	Item                 *PlayItem `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FavoredInAnyFoldersReq) Reset()         { *m = FavoredInAnyFoldersReq{} }
func (m *FavoredInAnyFoldersReq) String() string { return proto.CompactTextString(m) }
func (*FavoredInAnyFoldersReq) ProtoMessage()    {}
func (*FavoredInAnyFoldersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{66}
}
func (m *FavoredInAnyFoldersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavoredInAnyFoldersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavoredInAnyFoldersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavoredInAnyFoldersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavoredInAnyFoldersReq.Merge(m, src)
}
func (m *FavoredInAnyFoldersReq) XXX_Size() int {
	return m.Size()
}
func (m *FavoredInAnyFoldersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FavoredInAnyFoldersReq.DiscardUnknown(m)
}

var xxx_messageInfo_FavoredInAnyFoldersReq proto.InternalMessageInfo

func (m *FavoredInAnyFoldersReq) GetFolderTypes() []int32 {
	if m != nil {
		return m.FolderTypes
	}
	return nil
}

func (m *FavoredInAnyFoldersReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type FavFolderMeta struct {
	Fid                  int64    `protobuf:"varint,1,opt,name=fid,proto3" json:"fid,omitempty"`
	FolderType           int32    `protobuf:"varint,2,opt,name=folder_type,json=folderType,proto3" json:"folder_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavFolderMeta) Reset()         { *m = FavFolderMeta{} }
func (m *FavFolderMeta) String() string { return proto.CompactTextString(m) }
func (*FavFolderMeta) ProtoMessage()    {}
func (*FavFolderMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{67}
}
func (m *FavFolderMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavFolderMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavFolderMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavFolderMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavFolderMeta.Merge(m, src)
}
func (m *FavFolderMeta) XXX_Size() int {
	return m.Size()
}
func (m *FavFolderMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FavFolderMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FavFolderMeta proto.InternalMessageInfo

func (m *FavFolderMeta) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FavFolderMeta) GetFolderType() int32 {
	if m != nil {
		return m.FolderType
	}
	return 0
}

type FavoredInAnyFoldersResp struct {
	// 返回所有包含查询item的收藏夹metadata
	Folders []*FavFolderMeta `protobuf:"bytes,1,rep,name=folders,proto3" json:"folders,omitempty"`
	// 透传客户端给的item
	Item                 *PlayItem `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FavoredInAnyFoldersResp) Reset()         { *m = FavoredInAnyFoldersResp{} }
func (m *FavoredInAnyFoldersResp) String() string { return proto.CompactTextString(m) }
func (*FavoredInAnyFoldersResp) ProtoMessage()    {}
func (*FavoredInAnyFoldersResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{68}
}
func (m *FavoredInAnyFoldersResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavoredInAnyFoldersResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavoredInAnyFoldersResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavoredInAnyFoldersResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavoredInAnyFoldersResp.Merge(m, src)
}
func (m *FavoredInAnyFoldersResp) XXX_Size() int {
	return m.Size()
}
func (m *FavoredInAnyFoldersResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FavoredInAnyFoldersResp.DiscardUnknown(m)
}

var xxx_messageInfo_FavoredInAnyFoldersResp proto.InternalMessageInfo

func (m *FavoredInAnyFoldersResp) GetFolders() []*FavFolderMeta {
	if m != nil {
		return m.Folders
	}
	return nil
}

func (m *FavoredInAnyFoldersResp) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type PickFeedReq struct {
	// 翻页用
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PickFeedReq) Reset()         { *m = PickFeedReq{} }
func (m *PickFeedReq) String() string { return proto.CompactTextString(m) }
func (*PickFeedReq) ProtoMessage()    {}
func (*PickFeedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{69}
}
func (m *PickFeedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PickFeedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PickFeedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PickFeedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickFeedReq.Merge(m, src)
}
func (m *PickFeedReq) XXX_Size() int {
	return m.Size()
}
func (m *PickFeedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PickFeedReq.DiscardUnknown(m)
}

var xxx_messageInfo_PickFeedReq proto.InternalMessageInfo

func (m *PickFeedReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type PickFeedResp struct {
	// 下一页的offset
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 精选卡列表
	// 如果为空则代表已经翻到底了
	Cards                []*PickCard `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PickFeedResp) Reset()         { *m = PickFeedResp{} }
func (m *PickFeedResp) String() string { return proto.CompactTextString(m) }
func (*PickFeedResp) ProtoMessage()    {}
func (*PickFeedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{70}
}
func (m *PickFeedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PickFeedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PickFeedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PickFeedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickFeedResp.Merge(m, src)
}
func (m *PickFeedResp) XXX_Size() int {
	return m.Size()
}
func (m *PickFeedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PickFeedResp.DiscardUnknown(m)
}

var xxx_messageInfo_PickFeedResp proto.InternalMessageInfo

func (m *PickFeedResp) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PickFeedResp) GetCards() []*PickCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 单个精选卡（其实对应单个播单）
type PickCard struct {
	// 所属播单组的id
	PickId int64 `protobuf:"varint,1,opt,name=pick_id,json=pickId,proto3" json:"pick_id,omitempty"`
	// 精选卡的id
	CardId int64 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 精选卡的大标题 例如 "9月26日精选"
	// 端上控制在一行内显示，超长则三点截断
	// 如果没下发则不展示，下面的卡顺次上移
	CardName string `protobuf:"bytes,3,opt,name=card_name,json=cardName,proto3" json:"card_name,omitempty"`
	// 卡内的模块 端上直接按顺序拼接展示
	// 【重要】如果遇到类型不认识的模块，直接丢弃！不要渲染！
	Modules              []*CardModule `protobuf:"bytes,4,rep,name=modules,proto3" json:"modules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PickCard) Reset()         { *m = PickCard{} }
func (m *PickCard) String() string { return proto.CompactTextString(m) }
func (*PickCard) ProtoMessage()    {}
func (*PickCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{71}
}
func (m *PickCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PickCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PickCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PickCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickCard.Merge(m, src)
}
func (m *PickCard) XXX_Size() int {
	return m.Size()
}
func (m *PickCard) XXX_DiscardUnknown() {
	xxx_messageInfo_PickCard.DiscardUnknown(m)
}

var xxx_messageInfo_PickCard proto.InternalMessageInfo

func (m *PickCard) GetPickId() int64 {
	if m != nil {
		return m.PickId
	}
	return 0
}

func (m *PickCard) GetCardId() int64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *PickCard) GetCardName() string {
	if m != nil {
		return m.CardName
	}
	return ""
}

func (m *PickCard) GetModules() []*CardModule {
	if m != nil {
		return m.Modules
	}
	return nil
}

type CardModule struct {
	// 模块类型
	ModuleType CardModuleType `protobuf:"varint,1,opt,name=module_type,json=moduleType,proto3,enum=bilibili.app.listener.v1.CardModuleType" json:"module_type,omitempty"`
	// 卡内模块
	// 【重要】如果遇到类型不认识的模块，直接丢弃！不要渲染！
	//
	// Types that are valid to be assigned to Module:
	//	*CardModule_ModuleHeader
	//	*CardModule_ModuleArchive
	//	*CardModule_ModuleCbtn
	Module               isCardModule_Module `protobuf_oneof:"module"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CardModule) Reset()         { *m = CardModule{} }
func (m *CardModule) String() string { return proto.CompactTextString(m) }
func (*CardModule) ProtoMessage()    {}
func (*CardModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{72}
}
func (m *CardModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardModule.Merge(m, src)
}
func (m *CardModule) XXX_Size() int {
	return m.Size()
}
func (m *CardModule) XXX_DiscardUnknown() {
	xxx_messageInfo_CardModule.DiscardUnknown(m)
}

var xxx_messageInfo_CardModule proto.InternalMessageInfo

type isCardModule_Module interface {
	isCardModule_Module()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CardModule_ModuleHeader struct {
	ModuleHeader *PkcmHeader `protobuf:"bytes,2,opt,name=module_header,json=moduleHeader,proto3,oneof" json:"module_header,omitempty"`
}
type CardModule_ModuleArchive struct {
	ModuleArchive *PkcmArchive `protobuf:"bytes,3,opt,name=module_archive,json=moduleArchive,proto3,oneof" json:"module_archive,omitempty"`
}
type CardModule_ModuleCbtn struct {
	ModuleCbtn *PkcmCenterButton `protobuf:"bytes,4,opt,name=module_cbtn,json=moduleCbtn,proto3,oneof" json:"module_cbtn,omitempty"`
}

func (*CardModule_ModuleHeader) isCardModule_Module()  {}
func (*CardModule_ModuleArchive) isCardModule_Module() {}
func (*CardModule_ModuleCbtn) isCardModule_Module()    {}

func (m *CardModule) GetModule() isCardModule_Module {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *CardModule) GetModuleType() CardModuleType {
	if m != nil {
		return m.ModuleType
	}
	return CardModuleType_Module_invalid
}

func (m *CardModule) GetModuleHeader() *PkcmHeader {
	if x, ok := m.GetModule().(*CardModule_ModuleHeader); ok {
		return x.ModuleHeader
	}
	return nil
}

func (m *CardModule) GetModuleArchive() *PkcmArchive {
	if x, ok := m.GetModule().(*CardModule_ModuleArchive); ok {
		return x.ModuleArchive
	}
	return nil
}

func (m *CardModule) GetModuleCbtn() *PkcmCenterButton {
	if x, ok := m.GetModule().(*CardModule_ModuleCbtn); ok {
		return x.ModuleCbtn
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CardModule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CardModule_ModuleHeader)(nil),
		(*CardModule_ModuleArchive)(nil),
		(*CardModule_ModuleCbtn)(nil),
	}
}

// 模块-精选卡内的播单头
type PkcmHeader struct {
	// 播单头标题  例如"怀旧金曲"
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// 播单描述  例如"5个单集，共2小时10分钟"
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// 右侧按钮icon 端上兜底播放icon
	BtnIcon string `protobuf:"bytes,3,opt,name=btn_icon,json=btnIcon,proto3" json:"btn_icon,omitempty"`
	// 右侧按钮文案 端上兜底 播放全部
	BtnText string `protobuf:"bytes,4,opt,name=btn_text,json=btnText,proto3" json:"btn_text,omitempty"`
	// 右侧按钮跳链
	BtnUri               string   `protobuf:"bytes,5,opt,name=btn_uri,json=btnUri,proto3" json:"btn_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PkcmHeader) Reset()         { *m = PkcmHeader{} }
func (m *PkcmHeader) String() string { return proto.CompactTextString(m) }
func (*PkcmHeader) ProtoMessage()    {}
func (*PkcmHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{73}
}
func (m *PkcmHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkcmHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkcmHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PkcmHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkcmHeader.Merge(m, src)
}
func (m *PkcmHeader) XXX_Size() int {
	return m.Size()
}
func (m *PkcmHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_PkcmHeader.DiscardUnknown(m)
}

var xxx_messageInfo_PkcmHeader proto.InternalMessageInfo

func (m *PkcmHeader) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PkcmHeader) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *PkcmHeader) GetBtnIcon() string {
	if m != nil {
		return m.BtnIcon
	}
	return ""
}

func (m *PkcmHeader) GetBtnText() string {
	if m != nil {
		return m.BtnText
	}
	return ""
}

func (m *PkcmHeader) GetBtnUri() string {
	if m != nil {
		return m.BtnUri
	}
	return ""
}

// 模块-精选卡内的单个稿件
type PkcmArchive struct {
	// 稿件信息
	Arc *PickArchive `protobuf:"bytes,1,opt,name=arc,proto3" json:"arc,omitempty"`
	// 推荐原因 为空则不展示
	PickReason           string   `protobuf:"bytes,2,opt,name=pick_reason,json=pickReason,proto3" json:"pick_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PkcmArchive) Reset()         { *m = PkcmArchive{} }
func (m *PkcmArchive) String() string { return proto.CompactTextString(m) }
func (*PkcmArchive) ProtoMessage()    {}
func (*PkcmArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{74}
}
func (m *PkcmArchive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkcmArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkcmArchive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PkcmArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkcmArchive.Merge(m, src)
}
func (m *PkcmArchive) XXX_Size() int {
	return m.Size()
}
func (m *PkcmArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_PkcmArchive.DiscardUnknown(m)
}

var xxx_messageInfo_PkcmArchive proto.InternalMessageInfo

func (m *PkcmArchive) GetArc() *PickArchive {
	if m != nil {
		return m.Arc
	}
	return nil
}

func (m *PkcmArchive) GetPickReason() string {
	if m != nil {
		return m.PickReason
	}
	return ""
}

type PickArchive struct {
	// 稿件标识
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// up主信息
	Owner *PickArchiveAuthor `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// 封面url
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	// 稿件时长（秒）
	Duration int64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// 稿件分p数量
	Parts int32 `protobuf:"varint,6,opt,name=parts,proto3" json:"parts,omitempty"`
	// 播放数
	StatView int32 `protobuf:"varint,7,opt,name=stat_view,json=statView,proto3" json:"stat_view,omitempty"`
	// 回复数
	StatReply int32 `protobuf:"varint,8,opt,name=stat_reply,json=statReply,proto3" json:"stat_reply,omitempty"`
	// 稿件状态
	// 0正常 -1失效
	// 以防未来扩充其他状态:
	// 约定state>=0是正常展示状态，state<0按失效处理
	State int32 `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`
	// 失效稿件的提示信息
	Message              string   `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PickArchive) Reset()         { *m = PickArchive{} }
func (m *PickArchive) String() string { return proto.CompactTextString(m) }
func (*PickArchive) ProtoMessage()    {}
func (*PickArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{75}
}
func (m *PickArchive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PickArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PickArchive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PickArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickArchive.Merge(m, src)
}
func (m *PickArchive) XXX_Size() int {
	return m.Size()
}
func (m *PickArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_PickArchive.DiscardUnknown(m)
}

var xxx_messageInfo_PickArchive proto.InternalMessageInfo

func (m *PickArchive) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PickArchive) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PickArchive) GetOwner() *PickArchiveAuthor {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PickArchive) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *PickArchive) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PickArchive) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

func (m *PickArchive) GetStatView() int32 {
	if m != nil {
		return m.StatView
	}
	return 0
}

func (m *PickArchive) GetStatReply() int32 {
	if m != nil {
		return m.StatReply
	}
	return 0
}

func (m *PickArchive) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *PickArchive) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PickArchiveAuthor struct {
	// member id
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 用户名
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PickArchiveAuthor) Reset()         { *m = PickArchiveAuthor{} }
func (m *PickArchiveAuthor) String() string { return proto.CompactTextString(m) }
func (*PickArchiveAuthor) ProtoMessage()    {}
func (*PickArchiveAuthor) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{76}
}
func (m *PickArchiveAuthor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PickArchiveAuthor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PickArchiveAuthor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PickArchiveAuthor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickArchiveAuthor.Merge(m, src)
}
func (m *PickArchiveAuthor) XXX_Size() int {
	return m.Size()
}
func (m *PickArchiveAuthor) XXX_DiscardUnknown() {
	xxx_messageInfo_PickArchiveAuthor.DiscardUnknown(m)
}

var xxx_messageInfo_PickArchiveAuthor proto.InternalMessageInfo

func (m *PickArchiveAuthor) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PickArchiveAuthor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 模块-精选卡内占据一行的居中按钮
type PkcmCenterButton struct {
	// 头部icon 不下发就不显示
	IconHead string `protobuf:"bytes,1,opt,name=icon_head,json=iconHead,proto3" json:"icon_head,omitempty"`
	// 尾部icon 不下发就不显示
	IconTail string `protobuf:"bytes,2,opt,name=icon_tail,json=iconTail,proto3" json:"icon_tail,omitempty"`
	// 要显示的文字 端上兜底 查看更多
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// 跳链
	Uri                  string   `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PkcmCenterButton) Reset()         { *m = PkcmCenterButton{} }
func (m *PkcmCenterButton) String() string { return proto.CompactTextString(m) }
func (*PkcmCenterButton) ProtoMessage()    {}
func (*PkcmCenterButton) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{77}
}
func (m *PkcmCenterButton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkcmCenterButton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkcmCenterButton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PkcmCenterButton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkcmCenterButton.Merge(m, src)
}
func (m *PkcmCenterButton) XXX_Size() int {
	return m.Size()
}
func (m *PkcmCenterButton) XXX_DiscardUnknown() {
	xxx_messageInfo_PkcmCenterButton.DiscardUnknown(m)
}

var xxx_messageInfo_PkcmCenterButton proto.InternalMessageInfo

func (m *PkcmCenterButton) GetIconHead() string {
	if m != nil {
		return m.IconHead
	}
	return ""
}

func (m *PkcmCenterButton) GetIconTail() string {
	if m != nil {
		return m.IconTail
	}
	return ""
}

func (m *PkcmCenterButton) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PkcmCenterButton) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type PickCardDetailReq struct {
	// 播单id
	CardId int64 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 播单组id
	PickId               int64    `protobuf:"varint,2,opt,name=pick_id,json=pickId,proto3" json:"pick_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PickCardDetailReq) Reset()         { *m = PickCardDetailReq{} }
func (m *PickCardDetailReq) String() string { return proto.CompactTextString(m) }
func (*PickCardDetailReq) ProtoMessage()    {}
func (*PickCardDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{78}
}
func (m *PickCardDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PickCardDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PickCardDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PickCardDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickCardDetailReq.Merge(m, src)
}
func (m *PickCardDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *PickCardDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PickCardDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_PickCardDetailReq proto.InternalMessageInfo

func (m *PickCardDetailReq) GetCardId() int64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *PickCardDetailReq) GetPickId() int64 {
	if m != nil {
		return m.PickId
	}
	return 0
}

type PickCardDetailResp struct {
	// 播单id
	CardId int64 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	// 所属播单组id
	PickId int64 `protobuf:"varint,2,opt,name=pick_id,json=pickId,proto3" json:"pick_id,omitempty"`
	// 播单模块
	Modules              []*CardModule `protobuf:"bytes,3,rep,name=modules,proto3" json:"modules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PickCardDetailResp) Reset()         { *m = PickCardDetailResp{} }
func (m *PickCardDetailResp) String() string { return proto.CompactTextString(m) }
func (*PickCardDetailResp) ProtoMessage()    {}
func (*PickCardDetailResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{79}
}
func (m *PickCardDetailResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PickCardDetailResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PickCardDetailResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PickCardDetailResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickCardDetailResp.Merge(m, src)
}
func (m *PickCardDetailResp) XXX_Size() int {
	return m.Size()
}
func (m *PickCardDetailResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PickCardDetailResp.DiscardUnknown(m)
}

var xxx_messageInfo_PickCardDetailResp proto.InternalMessageInfo

func (m *PickCardDetailResp) GetCardId() int64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *PickCardDetailResp) GetPickId() int64 {
	if m != nil {
		return m.PickId
	}
	return 0
}

func (m *PickCardDetailResp) GetModules() []*CardModule {
	if m != nil {
		return m.Modules
	}
	return nil
}

// 通用事件上报
type EventReq struct {
	// 事件类型
	EventType EventReq_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=bilibili.app.listener.v1.EventReq_EventType" json:"event_type,omitempty"`
	// 事件关联的稿件 至少填写类型和oid
	Item                 *PlayItem `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EventReq) Reset()         { *m = EventReq{} }
func (m *EventReq) String() string { return proto.CompactTextString(m) }
func (*EventReq) ProtoMessage()    {}
func (*EventReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{80}
}
func (m *EventReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReq.Merge(m, src)
}
func (m *EventReq) XXX_Size() int {
	return m.Size()
}
func (m *EventReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReq.DiscardUnknown(m)
}

var xxx_messageInfo_EventReq proto.InternalMessageInfo

func (m *EventReq) GetEventType() EventReq_EventType {
	if m != nil {
		return m.EventType
	}
	return EventReq_INVALID
}

func (m *EventReq) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type EventResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventResp) Reset()         { *m = EventResp{} }
func (m *EventResp) String() string { return proto.CompactTextString(m) }
func (*EventResp) ProtoMessage()    {}
func (*EventResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{81}
}
func (m *EventResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResp.Merge(m, src)
}
func (m *EventResp) XXX_Size() int {
	return m.Size()
}
func (m *EventResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResp.DiscardUnknown(m)
}

var xxx_messageInfo_EventResp proto.InternalMessageInfo

type MedialistReq struct {
	// 播单类型
	ListType int64 `protobuf:"varint,1,opt,name=list_type,json=listType,proto3" json:"list_type,omitempty"`
	// 播单biz id
	BizId int64 `protobuf:"varint,2,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	// 翻页的offset 首页不传
	// 暂时不做跳入时指定锚点稿件
	Offset               string   `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MedialistReq) Reset()         { *m = MedialistReq{} }
func (m *MedialistReq) String() string { return proto.CompactTextString(m) }
func (*MedialistReq) ProtoMessage()    {}
func (*MedialistReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{82}
}
func (m *MedialistReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MedialistReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MedialistReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MedialistReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedialistReq.Merge(m, src)
}
func (m *MedialistReq) XXX_Size() int {
	return m.Size()
}
func (m *MedialistReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MedialistReq.DiscardUnknown(m)
}

var xxx_messageInfo_MedialistReq proto.InternalMessageInfo

func (m *MedialistReq) GetListType() int64 {
	if m != nil {
		return m.ListType
	}
	return 0
}

func (m *MedialistReq) GetBizId() int64 {
	if m != nil {
		return m.BizId
	}
	return 0
}

func (m *MedialistReq) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type MedialistResp struct {
	// 播单资源总数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 是否还有下一页
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 翻页offset
	Offset string `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// 资源列表
	Items []*MedialistItem `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	// 播单up主信息
	UpInfo               *MedialistUpInfo `protobuf:"bytes,5,opt,name=up_info,json=upInfo,proto3" json:"up_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MedialistResp) Reset()         { *m = MedialistResp{} }
func (m *MedialistResp) String() string { return proto.CompactTextString(m) }
func (*MedialistResp) ProtoMessage()    {}
func (*MedialistResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{83}
}
func (m *MedialistResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MedialistResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MedialistResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MedialistResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedialistResp.Merge(m, src)
}
func (m *MedialistResp) XXX_Size() int {
	return m.Size()
}
func (m *MedialistResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MedialistResp.DiscardUnknown(m)
}

var xxx_messageInfo_MedialistResp proto.InternalMessageInfo

func (m *MedialistResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MedialistResp) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *MedialistResp) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *MedialistResp) GetItems() []*MedialistItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *MedialistResp) GetUpInfo() *MedialistUpInfo {
	if m != nil {
		return m.UpInfo
	}
	return nil
}

type MedialistItem struct {
	// 稿件标识
	Item *PlayItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	// 稿件标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 稿件封面
	Cover string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	// 稿件总时长（秒）
	Duration int64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	// 稿件分p数
	Parts int32 `protobuf:"varint,5,opt,name=parts,proto3" json:"parts,omitempty"`
	// 稿件up主mid
	UpMid int64 `protobuf:"varint,6,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty"`
	// 稿件up主名称
	UpName string `protobuf:"bytes,7,opt,name=up_name,json=upName,proto3" json:"up_name,omitempty"`
	// 稿件状态
	// -1：已失效
	// 0：正常
	// 1：不支持的稿件（置灰不可点击）
	// 约定状态<0按失效展示，>0按不支持展示
	State int32 `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	// 非正常状态（0以外）的解释信息
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	// 播放数
	StatView int64 `protobuf:"varint,10,opt,name=stat_view,json=statView,proto3" json:"stat_view,omitempty"`
	// 评论数
	StatReply            int64    `protobuf:"varint,11,opt,name=stat_reply,json=statReply,proto3" json:"stat_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MedialistItem) Reset()         { *m = MedialistItem{} }
func (m *MedialistItem) String() string { return proto.CompactTextString(m) }
func (*MedialistItem) ProtoMessage()    {}
func (*MedialistItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{84}
}
func (m *MedialistItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MedialistItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MedialistItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MedialistItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedialistItem.Merge(m, src)
}
func (m *MedialistItem) XXX_Size() int {
	return m.Size()
}
func (m *MedialistItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MedialistItem.DiscardUnknown(m)
}

var xxx_messageInfo_MedialistItem proto.InternalMessageInfo

func (m *MedialistItem) GetItem() *PlayItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *MedialistItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MedialistItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *MedialistItem) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MedialistItem) GetParts() int32 {
	if m != nil {
		return m.Parts
	}
	return 0
}

func (m *MedialistItem) GetUpMid() int64 {
	if m != nil {
		return m.UpMid
	}
	return 0
}

func (m *MedialistItem) GetUpName() string {
	if m != nil {
		return m.UpName
	}
	return ""
}

func (m *MedialistItem) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MedialistItem) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MedialistItem) GetStatView() int64 {
	if m != nil {
		return m.StatView
	}
	return 0
}

func (m *MedialistItem) GetStatReply() int64 {
	if m != nil {
		return m.StatReply
	}
	return 0
}

type MedialistUpInfo struct {
	// 用户mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	// 头像
	Avatar string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// 粉丝数
	Fans int64 `protobuf:"varint,3,opt,name=fans,proto3" json:"fans,omitempty"`
	// up主名称
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MedialistUpInfo) Reset()         { *m = MedialistUpInfo{} }
func (m *MedialistUpInfo) String() string { return proto.CompactTextString(m) }
func (*MedialistUpInfo) ProtoMessage()    {}
func (*MedialistUpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_97bf1a3dfd6e42a6, []int{85}
}
func (m *MedialistUpInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MedialistUpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MedialistUpInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MedialistUpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MedialistUpInfo.Merge(m, src)
}
func (m *MedialistUpInfo) XXX_Size() int {
	return m.Size()
}
func (m *MedialistUpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MedialistUpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MedialistUpInfo proto.InternalMessageInfo

func (m *MedialistUpInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MedialistUpInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *MedialistUpInfo) GetFans() int64 {
	if m != nil {
		return m.Fans
	}
	return 0
}

func (m *MedialistUpInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("bilibili.app.listener.v1.PlaylistSource", PlaylistSource_name, PlaylistSource_value)
	proto.RegisterEnum("bilibili.app.listener.v1.ListOrder", ListOrder_name, ListOrder_value)
	proto.RegisterEnum("bilibili.app.listener.v1.ListSortField", ListSortField_name, ListSortField_value)
	proto.RegisterEnum("bilibili.app.listener.v1.TopCardType", TopCardType_name, TopCardType_value)
	proto.RegisterEnum("bilibili.app.listener.v1.CardModuleType", CardModuleType_name, CardModuleType_value)
	proto.RegisterEnum("bilibili.app.listener.v1.FollowRelation_RelationStatus", FollowRelation_RelationStatus_name, FollowRelation_RelationStatus_value)
	proto.RegisterEnum("bilibili.app.listener.v1.PageOption_Direction", PageOption_Direction_name, PageOption_Direction_value)
	proto.RegisterEnum("bilibili.app.listener.v1.ThumbUpReq_ThumbType", ThumbUpReq_ThumbType_name, ThumbUpReq_ThumbType_value)
	proto.RegisterEnum("bilibili.app.listener.v1.RcmdPlaylistReq_RcmdFrom", RcmdPlaylistReq_RcmdFrom_name, RcmdPlaylistReq_RcmdFrom_value)
	proto.RegisterEnum("bilibili.app.listener.v1.TopCard_PlayStrategy", TopCard_PlayStrategy_name, TopCard_PlayStrategy_value)
	proto.RegisterEnum("bilibili.app.listener.v1.FavFolderAction_Action", FavFolderAction_Action_name, FavFolderAction_Action_value)
	proto.RegisterEnum("bilibili.app.listener.v1.EventReq_EventType", EventReq_EventType_name, EventReq_EventType_value)
	proto.RegisterType((*PlayItem)(nil), "bilibili.app.listener.v1.PlayItem")
	proto.RegisterType((*EventTracking)(nil), "bilibili.app.listener.v1.EventTracking")
	proto.RegisterType((*PlayURLReq)(nil), "bilibili.app.listener.v1.PlayURLReq")
	proto.RegisterType((*PlayURLResp)(nil), "bilibili.app.listener.v1.PlayURLResp")
	proto.RegisterMapType((map[int64]*PlayInfo)(nil), "bilibili.app.listener.v1.PlayURLResp.PlayerInfoEntry")
	proto.RegisterType((*PlayInfo)(nil), "bilibili.app.listener.v1.PlayInfo")
	proto.RegisterType((*PlayURL)(nil), "bilibili.app.listener.v1.PlayURL")
	proto.RegisterType((*ResponseUrl)(nil), "bilibili.app.listener.v1.ResponseUrl")
	proto.RegisterType((*PlayDASH)(nil), "bilibili.app.listener.v1.PlayDASH")
	proto.RegisterType((*FormatDescription)(nil), "bilibili.app.listener.v1.FormatDescription")
	proto.RegisterType((*DashSegmentBase)(nil), "bilibili.app.listener.v1.DashSegmentBase")
	proto.RegisterType((*DashItem)(nil), "bilibili.app.listener.v1.DashItem")
	proto.RegisterType((*BKArcDetailsReq)(nil), "bilibili.app.listener.v1.BKArcDetailsReq")
	proto.RegisterType((*BKArcDetailsResp)(nil), "bilibili.app.listener.v1.BKArcDetailsResp")
	proto.RegisterType((*BKArchive)(nil), "bilibili.app.listener.v1.BKArchive")
	proto.RegisterType((*BKArcRights)(nil), "bilibili.app.listener.v1.BKArcRights")
	proto.RegisterType((*BKArcPart)(nil), "bilibili.app.listener.v1.BKArcPart")
	proto.RegisterType((*DetailItem)(nil), "bilibili.app.listener.v1.DetailItem")
	proto.RegisterMapType((map[int64]*PlayInfo)(nil), "bilibili.app.listener.v1.DetailItem.PlayerInfoEntry")
	proto.RegisterType((*Author)(nil), "bilibili.app.listener.v1.Author")
	proto.RegisterType((*FollowRelation)(nil), "bilibili.app.listener.v1.FollowRelation")
	proto.RegisterType((*BKStat)(nil), "bilibili.app.listener.v1.BKStat")
	proto.RegisterType((*SortOption)(nil), "bilibili.app.listener.v1.SortOption")
	proto.RegisterType((*PlaylistReq)(nil), "bilibili.app.listener.v1.PlaylistReq")
	proto.RegisterType((*PageOption)(nil), "bilibili.app.listener.v1.PageOption")
	proto.RegisterType((*PlaylistResp)(nil), "bilibili.app.listener.v1.PlaylistResp")
	proto.RegisterType((*PlaylistAddReq)(nil), "bilibili.app.listener.v1.PlaylistAddReq")
	proto.RegisterType((*PlaylistDelReq)(nil), "bilibili.app.listener.v1.PlaylistDelReq")
	proto.RegisterType((*PlayHistoryReq)(nil), "bilibili.app.listener.v1.PlayHistoryReq")
	proto.RegisterType((*PlayHistoryResp)(nil), "bilibili.app.listener.v1.PlayHistoryResp")
	proto.RegisterType((*PlayHistoryAddReq)(nil), "bilibili.app.listener.v1.PlayHistoryAddReq")
	proto.RegisterType((*PlayHistoryDelReq)(nil), "bilibili.app.listener.v1.PlayHistoryDelReq")
	proto.RegisterType((*TripleLikeReq)(nil), "bilibili.app.listener.v1.TripleLikeReq")
	proto.RegisterType((*TripleLikeResp)(nil), "bilibili.app.listener.v1.TripleLikeResp")
	proto.RegisterType((*ThumbUpReq)(nil), "bilibili.app.listener.v1.ThumbUpReq")
	proto.RegisterType((*ThumbUpResp)(nil), "bilibili.app.listener.v1.ThumbUpResp")
	proto.RegisterType((*CoinAddReq)(nil), "bilibili.app.listener.v1.CoinAddReq")
	proto.RegisterType((*CoinAddResp)(nil), "bilibili.app.listener.v1.CoinAddResp")
	proto.RegisterType((*PlayActionReportReq)(nil), "bilibili.app.listener.v1.PlayActionReportReq")
	proto.RegisterType((*RcmdPlaylistReq)(nil), "bilibili.app.listener.v1.RcmdPlaylistReq")
	proto.RegisterMapType((map[string]string)(nil), "bilibili.app.listener.v1.RcmdPlaylistReq.AnnotationsEntry")
	proto.RegisterType((*RcmdOffset)(nil), "bilibili.app.listener.v1.RcmdOffset")
	proto.RegisterType((*RcmdPlaylistResp)(nil), "bilibili.app.listener.v1.RcmdPlaylistResp")
	proto.RegisterType((*TopCard)(nil), "bilibili.app.listener.v1.TopCard")
	proto.RegisterType((*TpcdHistory)(nil), "bilibili.app.listener.v1.TpcdHistory")
	proto.RegisterType((*TpcdFavFolder)(nil), "bilibili.app.listener.v1.TpcdFavFolder")
	proto.RegisterType((*TpcdUpRecall)(nil), "bilibili.app.listener.v1.TpcdUpRecall")
	proto.RegisterType((*TpcdPickToday)(nil), "bilibili.app.listener.v1.TpcdPickToday")
	proto.RegisterType((*FavFolderAuthor)(nil), "bilibili.app.listener.v1.FavFolderAuthor")
	proto.RegisterType((*FavFolder)(nil), "bilibili.app.listener.v1.FavFolder")
	proto.RegisterType((*FavFolderListReq)(nil), "bilibili.app.listener.v1.FavFolderListReq")
	proto.RegisterType((*FavFolderListResp)(nil), "bilibili.app.listener.v1.FavFolderListResp")
	proto.RegisterType((*FavItem)(nil), "bilibili.app.listener.v1.FavItem")
	proto.RegisterType((*FavItemDetail)(nil), "bilibili.app.listener.v1.FavItemDetail")
	proto.RegisterType((*FavItemAuthor)(nil), "bilibili.app.listener.v1.FavItemAuthor")
	proto.RegisterType((*FavItemStat)(nil), "bilibili.app.listener.v1.FavItemStat")
	proto.RegisterType((*FavFolderDetailReq)(nil), "bilibili.app.listener.v1.FavFolderDetailReq")
	proto.RegisterType((*FavFolderDetailResp)(nil), "bilibili.app.listener.v1.FavFolderDetailResp")
	proto.RegisterType((*FavFolderCreateReq)(nil), "bilibili.app.listener.v1.FavFolderCreateReq")
	proto.RegisterType((*FavFolderCreateResp)(nil), "bilibili.app.listener.v1.FavFolderCreateResp")
	proto.RegisterType((*FavFolderDeleteReq)(nil), "bilibili.app.listener.v1.FavFolderDeleteReq")
	proto.RegisterType((*FavFolderDeleteResp)(nil), "bilibili.app.listener.v1.FavFolderDeleteResp")
	proto.RegisterType((*FavItemAddReq)(nil), "bilibili.app.listener.v1.FavItemAddReq")
	proto.RegisterType((*FavItemAddResp)(nil), "bilibili.app.listener.v1.FavItemAddResp")
	proto.RegisterType((*FavItemDelReq)(nil), "bilibili.app.listener.v1.FavItemDelReq")
	proto.RegisterType((*FavItemDelResp)(nil), "bilibili.app.listener.v1.FavItemDelResp")
	proto.RegisterType((*FavFolderAction)(nil), "bilibili.app.listener.v1.FavFolderAction")
	proto.RegisterType((*FavItemBatchReq)(nil), "bilibili.app.listener.v1.FavItemBatchReq")
	proto.RegisterType((*FavItemBatchResp)(nil), "bilibili.app.listener.v1.FavItemBatchResp")
	proto.RegisterType((*FavoredInAnyFoldersReq)(nil), "bilibili.app.listener.v1.FavoredInAnyFoldersReq")
	proto.RegisterType((*FavFolderMeta)(nil), "bilibili.app.listener.v1.FavFolderMeta")
	proto.RegisterType((*FavoredInAnyFoldersResp)(nil), "bilibili.app.listener.v1.FavoredInAnyFoldersResp")
	proto.RegisterType((*PickFeedReq)(nil), "bilibili.app.listener.v1.PickFeedReq")
	proto.RegisterType((*PickFeedResp)(nil), "bilibili.app.listener.v1.PickFeedResp")
	proto.RegisterType((*PickCard)(nil), "bilibili.app.listener.v1.PickCard")
	proto.RegisterType((*CardModule)(nil), "bilibili.app.listener.v1.CardModule")
	proto.RegisterType((*PkcmHeader)(nil), "bilibili.app.listener.v1.PkcmHeader")
	proto.RegisterType((*PkcmArchive)(nil), "bilibili.app.listener.v1.PkcmArchive")
	proto.RegisterType((*PickArchive)(nil), "bilibili.app.listener.v1.PickArchive")
	proto.RegisterType((*PickArchiveAuthor)(nil), "bilibili.app.listener.v1.PickArchiveAuthor")
	proto.RegisterType((*PkcmCenterButton)(nil), "bilibili.app.listener.v1.PkcmCenterButton")
	proto.RegisterType((*PickCardDetailReq)(nil), "bilibili.app.listener.v1.PickCardDetailReq")
	proto.RegisterType((*PickCardDetailResp)(nil), "bilibili.app.listener.v1.PickCardDetailResp")
	proto.RegisterType((*EventReq)(nil), "bilibili.app.listener.v1.EventReq")
	proto.RegisterType((*EventResp)(nil), "bilibili.app.listener.v1.EventResp")
	proto.RegisterType((*MedialistReq)(nil), "bilibili.app.listener.v1.MedialistReq")
	proto.RegisterType((*MedialistResp)(nil), "bilibili.app.listener.v1.MedialistResp")
	proto.RegisterType((*MedialistItem)(nil), "bilibili.app.listener.v1.MedialistItem")
	proto.RegisterType((*MedialistUpInfo)(nil), "bilibili.app.listener.v1.MedialistUpInfo")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-listener/interface/api/v1/api.proto", fileDescriptor_97bf1a3dfd6e42a6)
}

var fileDescriptor_97bf1a3dfd6e42a6 = []byte{
	// 5702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7b, 0x5d, 0x6c, 0x24, 0x57,
	0x56, 0xb0, 0xab, 0xff, 0xfb, 0xb4, 0xdd, 0xee, 0xb9, 0x99, 0xcd, 0x78, 0x9d, 0x2f, 0xc9, 0xa4,
	0x36, 0x3f, 0x93, 0x99, 0x8c, 0xe7, 0xcb, 0xec, 0xce, 0xce, 0x24, 0xb0, 0x59, 0xb5, 0xed, 0x76,
	0xdc, 0xa4, 0xed, 0xb6, 0xca, 0x6d, 0x87, 0x89, 0x56, 0x2a, 0xaa, 0xbb, 0x6e, 0xb7, 0x0b, 0x57,
	0x57, 0xd5, 0x54, 0x55, 0x77, 0xe2, 0x41, 0xe2, 0x01, 0xb4, 0x08, 0x24, 0x10, 0x2f, 0x20, 0x81,
	0xc4, 0xd3, 0x3e, 0xec, 0x03, 0xe2, 0x15, 0xa4, 0x05, 0x81, 0xc4, 0x1b, 0x12, 0x20, 0x10, 0x12,
	0x12, 0x08, 0x58, 0xa1, 0x20, 0xc4, 0x2b, 0x4f, 0x3c, 0xf0, 0x84, 0xce, 0xb9, 0xb7, 0x7e, 0xba,
	0x67, 0xfa, 0xc7, 0x9e, 0x0d, 0x12, 0x0f, 0x96, 0xef, 0x3d, 0x75, 0x7f, 0xce, 0x3d, 0xf7, 0xfc,
	0xdf, 0xd3, 0xf0, 0xd1, 0xc0, 0xbd, 0x3b, 0x30, 0x42, 0xfe, 0xb9, 0x71, 0x71, 0xcf, 0xf0, 0x3c,
	0xfc, 0xbb, 0x1b, 0x8c, 0x7d, 0xfa, 0x6f, 0x5b, 0x41, 0xc8, 0x1d, 0xee, 0xdf, 0xb3, 0x9c, 0x90,
	0xfb, 0x7d, 0xa3, 0xc7, 0xef, 0x19, 0x9e, 0x75, 0x6f, 0xfc, 0x3e, 0xfe, 0xdb, 0xf2, 0x7c, 0x37,
	0x74, 0xd9, 0x46, 0xd7, 0xb2, 0x2d, 0xfc, 0xdb, 0x32, 0x3c, 0x6f, 0x2b, 0x9a, 0xb1, 0x35, 0x7e,
	0x7f, 0xf3, 0xee, 0xc0, 0x0a, 0xcf, 0x46, 0xdd, 0xad, 0x9e, 0x3b, 0xbc, 0x37, 0x70, 0x07, 0xee,
	0x3d, 0x9a, 0xd0, 0x1d, 0xf5, 0xa9, 0x47, 0x1d, 0x6a, 0x89, 0x85, 0x36, 0x5f, 0x19, 0xb8, 0xee,
	0xc0, 0xe6, 0xc9, 0x28, 0x3e, 0xf4, 0xc2, 0x0b, 0xf9, 0xf1, 0xc3, 0x59, 0x58, 0xfa, 0xbd, 0x33,
	0x6b, 0xcc, 0xef, 0x0d, 0x2d, 0xd3, 0xb4, 0xf9, 0xe7, 0x86, 0xcf, 0x11, 0x3b, 0xcf, 0xe7, 0xb6,
	0x6b, 0x98, 0x72, 0x6e, 0x7b, 0xce, 0x09, 0x93, 0x83, 0xc5, 0xad, 0xbb, 0x36, 0x1f, 0x18, 0xbd,
	0x0b, 0x3a, 0xe9, 0x99, 0x15, 0x84, 0xae, 0x7f, 0x11, 0xfd, 0x97, 0x0b, 0x3e, 0x9c, 0xb1, 0xa0,
	0x67, 0x1b, 0x17, 0x23, 0xdf, 0xbe, 0x17, 0x70, 0x7f, 0x6c, 0x45, 0xb4, 0xba, 0x9f, 0xd0, 0x6a,
	0xf3, 0xcd, 0x88, 0x56, 0xf7, 0x3c, 0x63, 0x60, 0x39, 0x46, 0x68, 0xb9, 0x4e, 0xaa, 0x29, 0x46,
	0xa9, 0xbf, 0xa6, 0x40, 0xe9, 0xc8, 0x36, 0x2e, 0x9a, 0x21, 0x1f, 0xb2, 0x57, 0xa0, 0x6c, 0x85,
	0x7c, 0xa8, 0x87, 0x17, 0x1e, 0xdf, 0x50, 0x6e, 0x2a, 0xb7, 0xf2, 0x5a, 0x09, 0x01, 0x9d, 0x0b,
	0x8f, 0xb3, 0x1a, 0x64, 0x5d, 0xcb, 0xdc, 0xc8, 0xde, 0x54, 0x6e, 0x65, 0x35, 0x6c, 0xb2, 0xaf,
	0x41, 0x21, 0x18, 0x75, 0x75, 0xcb, 0xdc, 0xc8, 0xdd, 0xcc, 0xde, 0xca, 0x6a, 0xf9, 0x60, 0xd4,
	0x6d, 0x9a, 0xec, 0x21, 0x64, 0x78, 0xb8, 0x91, 0xbf, 0xa9, 0xdc, 0xaa, 0xdc, 0x7f, 0x67, 0x6b,
	0xd6, 0x8d, 0x6d, 0x35, 0xc6, 0xdc, 0x09, 0x3b, 0xbe, 0xd1, 0x3b, 0xb7, 0x9c, 0x81, 0x96, 0xe1,
	0xa1, 0xfa, 0x23, 0x05, 0xd6, 0x26, 0xa0, 0x6c, 0x13, 0x4a, 0xae, 0xc7, 0x7d, 0x23, 0x74, 0x7d,
	0xc2, 0xa7, 0xac, 0xc5, 0x7d, 0x76, 0x1d, 0xf2, 0x5d, 0x23, 0xec, 0x9d, 0x6d, 0x64, 0xe8, 0x83,
	0xe8, 0xb0, 0xaf, 0x43, 0x29, 0xc4, 0xd9, 0xba, 0x44, 0xb5, 0xac, 0x15, 0xa9, 0xdf, 0x34, 0xd9,
	0xeb, 0x50, 0xe1, 0x4e, 0x68, 0x85, 0x17, 0xe2, 0x7c, 0x39, 0xfa, 0x0a, 0x02, 0x44, 0x27, 0x7c,
	0x05, 0xca, 0x72, 0x80, 0x65, 0x12, 0xfe, 0x65, 0xad, 0x24, 0x00, 0x4d, 0x93, 0xbd, 0x0a, 0x20,
	0x16, 0xfe, 0xf9, 0xc0, 0x75, 0x36, 0x0a, 0xf4, 0xb5, 0x4c, 0x90, 0x9f, 0x09, 0x5c, 0x47, 0xfd,
	0x6d, 0x05, 0x00, 0xe9, 0x78, 0xa2, 0xb5, 0x34, 0xfe, 0x84, 0x7d, 0x1b, 0x72, 0x48, 0x38, 0x42,
	0xba, 0x72, 0x5f, 0x9d, 0x4d, 0x85, 0x88, 0xf6, 0x1a, 0x8d, 0x67, 0x6d, 0xa8, 0xe0, 0xc5, 0x72,
	0x5f, 0x37, 0xfc, 0x41, 0x40, 0x47, 0xab, 0xdc, 0xdf, 0x9a, 0x9c, 0x2e, 0xd9, 0x70, 0x2b, 0x61,
	0xc3, 0x68, 0x21, 0xee, 0xd7, 0xfd, 0x41, 0xa0, 0x81, 0x17, 0xb7, 0xd5, 0x3f, 0xca, 0x40, 0x25,
	0xc6, 0x2b, 0xf0, 0xae, 0x8c, 0xd8, 0x26, 0x94, 0x70, 0x55, 0xa3, 0x6b, 0x73, 0xc2, 0x2a, 0xaf,
	0xc5, 0x7d, 0xb6, 0x01, 0xc5, 0x21, 0x0f, 0x02, 0x63, 0xc0, 0x23, 0x92, 0xcb, 0x2e, 0x3b, 0x8d,
	0x8f, 0x63, 0x39, 0x7d, 0x97, 0xd8, 0xa4, 0x72, 0xff, 0xc1, 0xfc, 0x4d, 0x25, 0xa6, 0xf2, 0x40,
	0x4d, 0xa7, 0xef, 0x36, 0x9c, 0xd0, 0xbf, 0x88, 0x4e, 0x85, 0x80, 0x4d, 0x03, 0xd6, 0xa7, 0x3e,
	0x23, 0x7b, 0x9e, 0xf3, 0x0b, 0x3a, 0x57, 0x56, 0xc3, 0x26, 0x7b, 0x04, 0xf9, 0xb1, 0x61, 0x8f,
	0xb8, 0xa4, 0xe2, 0xa2, 0xb3, 0x3a, 0x7d, 0x57, 0x13, 0x13, 0x3e, 0xcc, 0x3c, 0x52, 0xd4, 0xdf,
	0xc8, 0x49, 0xc1, 0x70, 0xfa, 0x2e, 0xab, 0x42, 0xe6, 0x89, 0x43, 0x6b, 0xaf, 0x69, 0x99, 0x27,
	0x0e, 0x7b, 0x19, 0x0a, 0x7d, 0xd7, 0x1f, 0x1a, 0xa1, 0x64, 0x3e, 0xd9, 0x63, 0x37, 0xa0, 0xf8,
	0xc4, 0x11, 0xec, 0x95, 0x25, 0x22, 0x15, 0x9e, 0x38, 0xc4, 0x5a, 0x1f, 0x09, 0xf2, 0xe9, 0x23,
	0xdf, 0x26, 0xc6, 0xab, 0xdc, 0x7f, 0x63, 0x21, 0x15, 0xf6, 0x57, 0xb4, 0x22, 0x4e, 0x3a, 0xf1,
	0x6d, 0x56, 0x87, 0x32, 0xcd, 0x37, 0x8d, 0xe0, 0x4c, 0x8a, 0xd6, 0x82, 0xf3, 0xec, 0xd6, 0x8f,
	0xf7, 0xf7, 0x57, 0xc4, 0x2d, 0xed, 0x1a, 0xc1, 0x19, 0xca, 0x4b, 0xdf, 0x19, 0x73, 0x9f, 0x78,
	0x77, 0x4d, 0x13, 0x1d, 0x09, 0x35, 0xec, 0x8d, 0x62, 0x0c, 0x35, 0x6c, 0xd6, 0x80, 0xa2, 0x38,
	0x51, 0xb0, 0x51, 0xa2, 0x3b, 0xbb, 0x33, 0x7b, 0xb3, 0x3d, 0x1a, 0xb8, 0xcb, 0x83, 0x9e, 0x6f,
	0x79, 0xa8, 0x59, 0xb4, 0x68, 0x2e, 0xfb, 0x06, 0xac, 0x8d, 0x2d, 0x93, 0xbb, 0x7a, 0xcf, 0x35,
	0x79, 0xcf, 0x32, 0x37, 0xca, 0xb4, 0xc9, 0x2a, 0x01, 0x77, 0x04, 0x0c, 0x69, 0x69, 0x73, 0x67,
	0x10, 0x9e, 0x6d, 0xc0, 0x4d, 0xe5, 0x56, 0x4e, 0x93, 0x3d, 0xc6, 0x20, 0x87, 0xd3, 0x36, 0x2a,
	0x34, 0x87, 0xda, 0x69, 0x4e, 0x5b, 0x9d, 0xe4, 0x34, 0x14, 0xee, 0x2f, 0x3c, 0xcb, 0xe7, 0x7a,
	0x68, 0x0d, 0xf9, 0xc6, 0x1a, 0x2d, 0x05, 0x02, 0xd4, 0xb1, 0x86, 0x9c, 0x7d, 0x1b, 0x0a, 0x63,
	0xd7, 0x1e, 0x0d, 0xf9, 0x46, 0x95, 0xc8, 0xf7, 0xda, 0x96, 0xd4, 0xa0, 0x5b, 0x52, 0x83, 0x6e,
	0x8d, 0xef, 0x6f, 0x9d, 0xd2, 0x08, 0x62, 0x05, 0x39, 0x7a, 0xbb, 0x00, 0x39, 0xe4, 0x5d, 0x75,
	0x17, 0x8a, 0xf2, 0x5e, 0xd8, 0x07, 0x90, 0x33, 0xf1, 0x22, 0x15, 0x22, 0xcd, 0x5b, 0xb3, 0x49,
	0x83, 0x7c, 0xec, 0x3a, 0x01, 0x3f, 0xf1, 0x6d, 0x8d, 0xa6, 0xa8, 0x7f, 0xa6, 0x40, 0x25, 0x05,
	0x45, 0xf2, 0xbb, 0xbe, 0xc9, 0x7d, 0xc9, 0x5b, 0xa2, 0x93, 0x22, 0x49, 0x66, 0x9a, 0x24, 0x81,
	0xf5, 0x54, 0xf0, 0x56, 0x4e, 0xa3, 0x36, 0xae, 0x60, 0x9c, 0x71, 0xc3, 0x94, 0xfa, 0x4c, 0x74,
	0x10, 0x3a, 0x26, 0xa8, 0x50, 0x63, 0xa2, 0x83, 0x32, 0x82, 0x78, 0x0b, 0xe5, 0x85, 0x4d, 0xd4,
	0x6a, 0x5d, 0xa3, 0x77, 0x3e, 0xf2, 0x88, 0x33, 0x8b, 0x37, 0xb3, 0xa8, 0xd5, 0x04, 0x04, 0xd1,
	0xab, 0x41, 0x76, 0x68, 0x3e, 0xd8, 0x28, 0x89, 0x09, 0x43, 0xf3, 0x81, 0xfa, 0xab, 0xd2, 0x5e,
	0x20, 0x7b, 0xa1, 0x52, 0x30, 0x47, 0x3e, 0x99, 0x13, 0x79, 0x80, 0xb8, 0xcf, 0xde, 0x86, 0xf5,
	0xa1, 0xe5, 0xe8, 0xdd, 0x51, 0xbf, 0xcf, 0x7d, 0x71, 0x29, 0x78, 0x98, 0x8c, 0xb6, 0x36, 0xb4,
	0x9c, 0x6d, 0x82, 0xd2, 0xbd, 0x3c, 0x82, 0xbc, 0x31, 0x32, 0x2d, 0x77, 0x23, 0x4b, 0xd4, 0x9c,
	0xc3, 0xd5, 0xc8, 0xc5, 0xa4, 0x91, 0xc4, 0x04, 0xf5, 0x0f, 0x14, 0xb8, 0xf6, 0x0c, 0xf3, 0x21,
	0x8b, 0x3c, 0x19, 0x19, 0xb6, 0x15, 0x5e, 0x48, 0x94, 0xa2, 0xee, 0x4c, 0xa1, 0xbd, 0x09, 0x15,
	0x33, 0x59, 0x40, 0xaa, 0xb0, 0x34, 0x88, 0xbd, 0x01, 0xab, 0xa6, 0x15, 0x08, 0x01, 0xe4, 0x41,
	0x4f, 0x92, 0xba, 0x22, 0x61, 0xb8, 0x3b, 0x2e, 0x12, 0x8c, 0x3c, 0xee, 0x8b, 0x49, 0x92, 0xec,
	0x69, 0x90, 0xfa, 0x19, 0xac, 0xe3, 0x09, 0x8e, 0xf9, 0x60, 0xc8, 0x9d, 0x70, 0xdb, 0x08, 0x38,
	0x7b, 0x1b, 0xaa, 0x96, 0x63, 0x85, 0x96, 0x61, 0x5b, 0x4f, 0x13, 0x2a, 0x96, 0xb5, 0x29, 0x28,
	0x32, 0xb7, 0xe5, 0x98, 0xfc, 0x0b, 0xdd, 0x37, 0x9c, 0x01, 0x97, 0xe8, 0x03, 0x81, 0x34, 0x84,
	0xa8, 0x7f, 0x98, 0x81, 0x52, 0x44, 0x1e, 0x54, 0x56, 0x96, 0x19, 0x29, 0x2b, 0xcb, 0x44, 0x93,
	0xd8, 0x35, 0x02, 0x4e, 0x37, 0x2c, 0xa6, 0x16, 0xb1, 0x7f, 0xf2, 0xcc, 0xf5, 0x67, 0xa7, 0xaf,
	0xff, 0xff, 0x41, 0xb9, 0x6b, 0x38, 0xe6, 0xe7, 0x96, 0x19, 0x9e, 0xd1, 0xa1, 0xd7, 0xb4, 0x04,
	0x80, 0xe6, 0x72, 0x68, 0x0d, 0xb9, 0x50, 0x77, 0xd2, 0x5c, 0x22, 0x80, 0x14, 0xde, 0xcb, 0x50,
	0x20, 0xa1, 0x0f, 0x24, 0xb7, 0xc9, 0x1e, 0x6b, 0xc1, 0x6a, 0x20, 0x28, 0xa0, 0x23, 0x12, 0x24,
	0xc6, 0x95, 0xfb, 0xef, 0xce, 0xbf, 0xf5, 0x14, 0xcd, 0xb4, 0x4a, 0x90, 0x22, 0xe0, 0x06, 0x14,
	0x23, 0xd5, 0xb2, 0x26, 0x2e, 0x5b, 0x76, 0x23, 0xce, 0xad, 0xc6, 0x9c, 0x1b, 0x0b, 0xcf, 0x7a,
	0x22, 0x3c, 0xea, 0xef, 0x29, 0xb0, 0xbe, 0xfd, 0x49, 0xdd, 0xef, 0xed, 0xf2, 0xd0, 0xb0, 0xec,
	0x00, 0x4d, 0xf7, 0x23, 0xc8, 0xa3, 0xc5, 0x0b, 0xa4, 0x78, 0x2f, 0x63, 0x22, 0xc5, 0x84, 0x9f,
	0xbc, 0xf1, 0x6e, 0x41, 0x6d, 0x12, 0xbb, 0xc0, 0x63, 0x8f, 0x20, 0x87, 0x38, 0x48, 0xec, 0xde,
	0x9c, 0x43, 0x38, 0x9a, 0x24, 0x4c, 0x38, 0xc2, 0xd5, 0x1f, 0x67, 0xa0, 0x4c, 0xcb, 0x21, 0x02,
	0x91, 0x3b, 0xa7, 0x24, 0xee, 0xdc, 0x75, 0xc8, 0x87, 0x56, 0x68, 0x47, 0xfc, 0x25, 0x3a, 0x08,
	0xed, 0xb9, 0x68, 0x36, 0x84, 0x5c, 0x88, 0x0e, 0x12, 0x33, 0x25, 0x09, 0xd4, 0x9e, 0xd0, 0x06,
	0x79, 0x5a, 0x36, 0xd1, 0x06, 0x35, 0xc8, 0xfa, 0x96, 0x49, 0xbc, 0x90, 0xd7, 0xb0, 0x89, 0xeb,
	0xfa, 0x8e, 0x31, 0xe4, 0x64, 0x78, 0xca, 0x9a, 0xe8, 0xb0, 0x0f, 0xa0, 0xe8, 0x8d, 0xba, 0xb6,
	0x15, 0x9c, 0x91, 0xd2, 0xc9, 0x6e, 0xbf, 0xfe, 0xdf, 0x3f, 0x7e, 0xfd, 0x95, 0x81, 0x7b, 0xb7,
	0xe7, 0x0e, 0x87, 0xae, 0x73, 0xcf, 0xb6, 0xba, 0xbe, 0xe1, 0x5f, 0xdc, 0x43, 0x7d, 0xb2, 0x85,
	0xfa, 0x43, 0x8b, 0xc6, 0xa3, 0xb1, 0x91, 0x02, 0xc9, 0x4d, 0xdd, 0x95, 0xc6, 0xa6, 0xac, 0xad,
	0xc6, 0xc0, 0xb6, 0x65, 0x22, 0x47, 0xf7, 0x5c, 0xef, 0xc2, 0xb7, 0x06, 0x67, 0x21, 0xd9, 0x9b,
	0xbc, 0x96, 0x00, 0xd8, 0x77, 0xa0, 0x40, 0x8d, 0x80, 0x8c, 0xce, 0x5c, 0xd5, 0x4e, 0x84, 0xd4,
	0x68, 0xb0, 0x26, 0x27, 0xa9, 0xef, 0x41, 0x25, 0x05, 0x46, 0xe1, 0x72, 0x5c, 0xdd, 0xe7, 0x9e,
	0x6f, 0x39, 0xa1, 0x74, 0xa7, 0xcb, 0x8e, 0xab, 0x09, 0x80, 0xfa, 0x54, 0xde, 0xc6, 0x91, 0xe1,
	0x87, 0xcf, 0xb9, 0x8d, 0xc4, 0xb9, 0xce, 0x10, 0x50, 0x3a, 0xd7, 0xf1, 0x25, 0x65, 0xd3, 0x97,
	0x94, 0x26, 0x7d, 0x6e, 0x8a, 0xf4, 0x0c, 0x72, 0x1e, 0x1a, 0xcc, 0x3c, 0x21, 0x40, 0x6d, 0xf5,
	0xbf, 0x0a, 0x00, 0x09, 0x7f, 0x5c, 0xd9, 0x29, 0x7c, 0x00, 0x59, 0xc3, 0xef, 0x49, 0x46, 0xff,
	0xc6, 0x02, 0x62, 0x21, 0xd7, 0x69, 0x38, 0x9e, 0x7d, 0x00, 0x79, 0xcf, 0xf0, 0xc3, 0x40, 0xaa,
	0xfc, 0x45, 0x13, 0x91, 0x40, 0x9a, 0x98, 0xc1, 0xbe, 0x0d, 0x79, 0xf7, 0x73, 0x87, 0xfb, 0xd2,
	0x89, 0xba, 0x39, 0x7b, 0x6a, 0x7d, 0x14, 0x9e, 0xb9, 0xbe, 0x26, 0x86, 0xb3, 0x6f, 0x41, 0x2e,
	0x08, 0x8d, 0x28, 0x2a, 0xb9, 0x39, 0x6f, 0xc7, 0xe3, 0xd0, 0x08, 0x35, 0x1a, 0x8d, 0x1a, 0xce,
	0x36, 0x82, 0x50, 0xc7, 0xbd, 0x89, 0x77, 0xb3, 0x5a, 0x09, 0x01, 0x74, 0x65, 0xe8, 0x11, 0xfb,
	0xee, 0xc0, 0xe7, 0x41, 0x40, 0x3c, 0x9c, 0xd5, 0xe2, 0xfe, 0x84, 0xb7, 0x5c, 0x9a, 0xed, 0x2d,
	0x97, 0x27, 0x7d, 0x98, 0x93, 0x49, 0x6f, 0x19, 0x88, 0x3a, 0xdf, 0x5a, 0x46, 0xc2, 0xe7, 0x39,
	0xcb, 0xec, 0x13, 0x58, 0x37, 0x82, 0xc0, 0xed, 0x59, 0x46, 0xc8, 0x4d, 0x9d, 0x2e, 0xba, 0xb2,
	0xf4, 0x45, 0x57, 0x93, 0xa9, 0xc4, 0x2a, 0x6f, 0x42, 0x55, 0x90, 0x04, 0x8d, 0x21, 0x59, 0xf5,
	0x55, 0x3a, 0xfb, 0x2a, 0xd1, 0xc5, 0x36, 0x2e, 0xc8, 0xa8, 0xbf, 0x0e, 0x15, 0x19, 0xc5, 0xea,
	0xa1, 0x31, 0x20, 0xdd, 0x5c, 0xd6, 0x40, 0x82, 0x3a, 0xc6, 0x80, 0xed, 0xa1, 0xcd, 0x45, 0xaf,
	0x4b, 0x58, 0x8f, 0xea, 0xf3, 0xc4, 0x2d, 0x0e, 0x92, 0xc5, 0x59, 0x71, 0x34, 0x9a, 0x16, 0x0d,
	0xcc, 0xb8, 0x8d, 0x67, 0x1b, 0x0d, 0x7a, 0x7a, 0xc0, 0x8d, 0xc0, 0x75, 0x04, 0xd9, 0xd6, 0x17,
	0x71, 0xe3, 0x9e, 0x31, 0xde, 0x73, 0x6d, 0x93, 0xfb, 0xda, 0xda, 0x68, 0xd0, 0x3b, 0xa6, 0xa9,
	0xff, 0x5b, 0x51, 0xc5, 0xaf, 0x2b, 0x50, 0x10, 0x9c, 0x49, 0x16, 0x2a, 0x11, 0xf9, 0xa1, 0x65,
	0xa2, 0xa4, 0x92, 0x46, 0x14, 0xfa, 0x97, 0xda, 0x68, 0x47, 0x8d, 0xb1, 0x11, 0x1a, 0x91, 0xfe,
	0x95, 0x3d, 0xb6, 0x0b, 0x25, 0x9f, 0xdb, 0x89, 0xc4, 0x57, 0xee, 0xdf, 0x9a, 0xe7, 0xa2, 0xdb,
	0xb6, 0xfb, 0xb9, 0x26, 0xc7, 0x6b, 0xf1, 0x4c, 0xf5, 0x5f, 0x14, 0xa8, 0x4e, 0x7e, 0x64, 0x6d,
	0x28, 0x20, 0xef, 0x8f, 0x02, 0xc2, 0xac, 0x7a, 0xff, 0xe1, 0xb2, 0xcb, 0x6e, 0x45, 0x8d, 0x63,
	0x9a, 0xae, 0xc9, 0x65, 0xd4, 0xa7, 0x50, 0x9d, 0xfc, 0xc2, 0xd6, 0xa1, 0x72, 0x72, 0x78, 0x7c,
	0xd4, 0xd8, 0x69, 0xee, 0x35, 0x1b, 0xbb, 0xb5, 0x15, 0xb6, 0x06, 0xe5, 0xc3, 0xb6, 0xbe, 0xd7,
	0x6e, 0xb5, 0xda, 0x9f, 0xd6, 0x14, 0xec, 0x8a, 0x76, 0xf3, 0xf0, 0xe3, 0x5a, 0x86, 0xad, 0x42,
	0x49, 0x74, 0x1b, 0xbb, 0xb5, 0x2c, 0xbb, 0x0e, 0xb5, 0x83, 0x93, 0xce, 0x49, 0xbd, 0xa5, 0x27,
	0x63, 0x72, 0xec, 0x6b, 0x70, 0x8d, 0x16, 0x9c, 0x00, 0xe7, 0xf1, 0x7c, 0x05, 0x21, 0xd1, 0x48,
	0x5c, 0xdb, 0x3a, 0x8f, 0xd2, 0x1a, 0xd4, 0x16, 0x21, 0x86, 0xe5, 0xc8, 0x80, 0x96, 0xda, 0x68,
	0x21, 0xfa, 0xc6, 0xd8, 0x1d, 0xf9, 0x56, 0x18, 0x05, 0x71, 0x09, 0x80, 0xac, 0x16, 0xf7, 0xec,
	0x0b, 0xa2, 0x79, 0x5e, 0x13, 0x1d, 0x84, 0x06, 0x67, 0x86, 0x1f, 0xe9, 0x58, 0xd1, 0xc1, 0xd5,
	0xc7, 0x16, 0xff, 0x5c, 0x1a, 0x3d, 0x6a, 0xa3, 0x2f, 0x76, 0x66, 0x04, 0x3a, 0x61, 0x82, 0x4a,
	0xa3, 0xa4, 0x15, 0xcf, 0x8c, 0xa0, 0x85, 0xc8, 0xc8, 0x4f, 0x84, 0x50, 0x29, 0xfe, 0xb4, 0x83,
	0x38, 0xdd, 0x00, 0x6c, 0xea, 0x7d, 0x63, 0x4c, 0x2a, 0xa3, 0xa4, 0x15, 0xce, 0x8c, 0x60, 0xcf,
	0x18, 0xab, 0xbf, 0xa9, 0x00, 0x1c, 0xbb, 0x7e, 0xd8, 0x16, 0x7e, 0xea, 0x07, 0xe9, 0x68, 0xa2,
	0x3a, 0x4f, 0x06, 0x5a, 0x56, 0x10, 0xb6, 0x71, 0x68, 0x14, 0x72, 0xec, 0x01, 0x04, 0xae, 0x1f,
	0xea, 0x7d, 0x8b, 0xdb, 0xc2, 0xe4, 0x54, 0xe7, 0x25, 0x6f, 0x70, 0x3e, 0x6e, 0xbc, 0x87, 0xc3,
	0xb5, 0x72, 0x10, 0x35, 0xd5, 0xef, 0x67, 0x45, 0xbe, 0x01, 0x07, 0xa3, 0x37, 0xf5, 0xd3, 0x90,
	0xeb, 0xfb, 0xee, 0x50, 0x62, 0x74, 0x6b, 0xbe, 0xb4, 0xd8, 0xb4, 0xea, 0xc8, 0xef, 0x71, 0x8d,
	0x66, 0x49, 0x57, 0x56, 0x18, 0x40, 0x74, 0x65, 0x3f, 0x84, 0x82, 0xe1, 0xf4, 0xce, 0x5c, 0x21,
	0x0d, 0xcb, 0x69, 0x30, 0x39, 0x83, 0x7d, 0x17, 0x4a, 0x68, 0xfb, 0x74, 0xd7, 0x0b, 0xa5, 0xc4,
	0xcc, 0x71, 0x9e, 0x8e, 0x8c, 0x01, 0x6f, 0xcb, 0x68, 0xd6, 0x13, 0xed, 0x69, 0xf7, 0x2e, 0xff,
	0xa2, 0xee, 0x1d, 0xde, 0x38, 0xff, 0x22, 0xf4, 0x0d, 0x5d, 0x7a, 0x46, 0x59, 0xad, 0x48, 0xfd,
	0xa6, 0x89, 0xc8, 0xd2, 0x75, 0x20, 0xb2, 0xc5, 0x45, 0xc8, 0x26, 0x1c, 0xa0, 0x15, 0x03, 0xd1,
	0x56, 0xff, 0x5d, 0x01, 0x48, 0x0e, 0x81, 0x96, 0x8c, 0x0e, 0x4f, 0x1e, 0xb0, 0x0c, 0xd5, 0x10,
	0x70, 0x8c, 0x21, 0x64, 0x0b, 0xca, 0xa6, 0xe5, 0xf3, 0x1e, 0x29, 0x13, 0x71, 0xf5, 0x5b, 0xcb,
	0x90, 0x66, 0x6b, 0x37, 0x9a, 0xa5, 0x25, 0x0b, 0xb0, 0xef, 0x4a, 0xa3, 0x49, 0x86, 0x66, 0xf9,
	0x6b, 0x22, 0xc3, 0x8a, 0x2d, 0xf5, 0x0e, 0x94, 0xe3, 0x85, 0x51, 0x57, 0x1c, 0xef, 0x68, 0xed,
	0x56, 0x4b, 0xdf, 0x6d, 0x7f, 0x7a, 0x28, 0x74, 0x85, 0x04, 0x9c, 0x1c, 0xd5, 0x14, 0xf5, 0x97,
	0x32, 0xb0, 0x9a, 0xf0, 0x5b, 0xe0, 0x91, 0x83, 0xe4, 0x86, 0x86, 0x1d, 0x45, 0xd4, 0xd4, 0x41,
	0x83, 0xe4, 0x73, 0xa3, 0x77, 0xa6, 0x07, 0x21, 0xda, 0xf2, 0x0c, 0x49, 0x11, 0x10, 0xe8, 0x18,
	0x21, 0x48, 0x20, 0x31, 0x80, 0x3b, 0x22, 0x71, 0x58, 0x42, 0x35, 0x69, 0xf4, 0xce, 0x1a, 0x8e,
	0x19, 0xfb, 0xdc, 0xb9, 0xcb, 0xfa, 0xdc, 0x31, 0x31, 0xf0, 0xd6, 0x97, 0xcb, 0xdb, 0x24, 0xc4,
	0xc0, 0x1e, 0x7a, 0xb5, 0x62, 0x81, 0xc8, 0xd5, 0x28, 0xa4, 0xcc, 0xad, 0x84, 0xa9, 0x3f, 0x52,
	0xa0, 0x1a, 0x11, 0xa1, 0x6e, 0x9a, 0x2f, 0x16, 0xc5, 0x7c, 0x08, 0x79, 0xa3, 0x1f, 0x72, 0x7f,
	0x49, 0x03, 0x17, 0xf2, 0xe1, 0xfe, 0x8a, 0x26, 0xa6, 0xb0, 0xeb, 0x90, 0xa3, 0xac, 0x03, 0x11,
	0x70, 0x7f, 0x45, 0xcb, 0xc9, 0x64, 0x44, 0x0e, 0xc9, 0x42, 0x52, 0x47, 0x50, 0xec, 0x6d, 0xe7,
	0x21, 0xeb, 0xb9, 0x81, 0xda, 0x4f, 0x50, 0xdf, 0xe5, 0xf6, 0x8b, 0xa1, 0xbe, 0x09, 0xa5, 0xd0,
	0x1f, 0x39, 0x3d, 0x23, 0xe4, 0xf2, 0x8a, 0xe3, 0xbe, 0xfa, 0x0b, 0x62, 0x9f, 0x7d, 0xe1, 0x83,
	0xe0, 0x3e, 0x69, 0x85, 0xa0, 0x5c, 0x45, 0x21, 0xdc, 0x82, 0x9a, 0xed, 0xf6, 0x0c, 0x5b, 0x0f,
	0x5d, 0xd3, 0xb8, 0xd0, 0x9f, 0x72, 0xdf, 0x95, 0xba, 0xaa, 0x4a, 0xf0, 0x0e, 0x82, 0x3f, 0xe3,
	0xbe, 0xab, 0xfe, 0xa2, 0xf0, 0x2c, 0xe2, 0xcd, 0x67, 0xf2, 0xe9, 0x04, 0x1b, 0x66, 0x66, 0xb0,
	0x61, 0xf6, 0xd2, 0xa1, 0xdf, 0x0f, 0x14, 0xb8, 0x96, 0x42, 0x40, 0xf2, 0xc8, 0x8b, 0xe4, 0x82,
	0x23, 0x76, 0xcc, 0x3c, 0xeb, 0xf9, 0xc6, 0x91, 0x48, 0x76, 0x2a, 0x12, 0x79, 0x15, 0x48, 0xfb,
	0xe9, 0x41, 0x78, 0x61, 0x73, 0x69, 0x41, 0x29, 0xad, 0x79, 0x8c, 0x00, 0xd5, 0x9a, 0xc0, 0xf1,
	0x2b, 0x65, 0x86, 0x8f, 0x61, 0xad, 0xe3, 0x5b, 0x9e, 0xcd, 0xd1, 0xf2, 0xbe, 0x00, 0x29, 0xd4,
	0x11, 0x54, 0xd3, 0x0b, 0x05, 0x5e, 0xda, 0xbd, 0x57, 0x26, 0xdd, 0xfb, 0xaf, 0x43, 0x29, 0x3c,
	0x1b, 0x0d, 0xbb, 0xba, 0x7b, 0x2e, 0x11, 0x2a, 0x52, 0xbf, 0x7d, 0x8e, 0x06, 0x1e, 0xed, 0x3e,
	0x7e, 0x11, 0xba, 0xa7, 0x80, 0xdd, 0xf6, 0x39, 0x46, 0x81, 0x7d, 0x63, 0x8c, 0x70, 0x12, 0x1e,
	0x2d, 0xdf, 0x37, 0xc6, 0xed, 0x73, 0xf5, 0xef, 0x15, 0x80, 0x0e, 0xce, 0x3d, 0xf1, 0x5e, 0xe4,
	0x22, 0xf7, 0xa0, 0x60, 0x2c, 0xa9, 0xf5, 0x93, 0xdd, 0x44, 0x93, 0x3c, 0x71, 0x39, 0x5b, 0xfd,
	0x18, 0xca, 0x31, 0x90, 0x95, 0x20, 0xd7, 0x6a, 0x7e, 0xd2, 0xa8, 0xad, 0xa0, 0xee, 0xde, 0xa9,
	0x1f, 0xee, 0x34, 0x5a, 0x3a, 0x01, 0x14, 0x56, 0x81, 0xe2, 0x6e, 0xf3, 0x98, 0x3a, 0x19, 0xc6,
	0xa0, 0x2a, 0xbf, 0x46, 0xb0, 0xac, 0xfa, 0x0e, 0x54, 0xe2, 0x8d, 0xe6, 0xd1, 0x52, 0x7d, 0x02,
	0x80, 0x9e, 0xd1, 0x0b, 0x32, 0x72, 0x0d, 0xb2, 0xce, 0x68, 0x28, 0xdd, 0x3f, 0x6c, 0x26, 0x77,
	0x34, 0xf2, 0xe4, 0x4d, 0x88, 0x3b, 0x3a, 0xf1, 0x10, 0xb7, 0x78, 0xcb, 0xb9, 0xb8, 0xd9, 0xf0,
	0x12, 0xee, 0x53, 0x17, 0x96, 0x91, 0x7b, 0xae, 0x1f, 0xbe, 0x08, 0x92, 0xaf, 0x02, 0xa0, 0x2f,
	0xa4, 0x07, 0xde, 0x50, 0xfa, 0x42, 0x65, 0xad, 0x8c, 0x90, 0x63, 0x04, 0xa8, 0x3f, 0xcc, 0xc1,
	0xba, 0xd6, 0x1b, 0x9a, 0x69, 0xa7, 0x6b, 0x6f, 0xc2, 0xe9, 0xba, 0x3f, 0x27, 0x41, 0x3d, 0x39,
	0x91, 0xfa, 0x7b, 0xbe, 0x3b, 0x9c, 0xe1, 0x7e, 0xbd, 0x01, 0xab, 0x0e, 0xe7, 0xa6, 0x2e, 0x03,
	0x39, 0x49, 0xa1, 0x0a, 0xc2, 0xa4, 0xd4, 0x62, 0x7c, 0x48, 0x43, 0x42, 0xd7, 0xd3, 0x7b, 0x86,
	0x6f, 0x06, 0x92, 0x71, 0x69, 0x62, 0xc7, 0xf5, 0x76, 0x10, 0xf6, 0x93, 0x77, 0xa5, 0xbe, 0x29,
	0x93, 0x1c, 0x05, 0x5a, 0xe9, 0xf5, 0x64, 0xa5, 0xd4, 0x83, 0xe7, 0x51, 0xdc, 0x14, 0x59, 0x10,
	0xf6, 0x3d, 0xa8, 0x18, 0x8e, 0xe3, 0x86, 0x04, 0x0b, 0x28, 0xfb, 0x5d, 0xb9, 0xff, 0xe1, 0xf2,
	0xd4, 0xaa, 0x27, 0x93, 0x45, 0xd4, 0x9d, 0x5e, 0x6e, 0xf3, 0x23, 0xa8, 0x4d, 0x0f, 0x48, 0x87,
	0x93, 0x65, 0x11, 0x4e, 0x5e, 0x4f, 0x87, 0x93, 0xe5, 0x74, 0xa8, 0x78, 0x08, 0xa5, 0xe8, 0x3a,
	0x9e, 0x8d, 0x98, 0xaa, 0x00, 0x27, 0x47, 0x7a, 0x5d, 0xdb, 0xd9, 0x6f, 0x9e, 0xa2, 0x64, 0xad,
	0x43, 0xa5, 0x79, 0xb8, 0xdb, 0xf8, 0x59, 0xbd, 0x71, 0xd8, 0xd1, 0x1e, 0xd7, 0x32, 0xac, 0x06,
	0xab, 0xf2, 0xab, 0x7e, 0xda, 0x6c, 0x7c, 0x5a, 0xcb, 0x52, 0xac, 0x80, 0x0b, 0xb6, 0xfb, 0xfd,
	0x80, 0x0b, 0x87, 0xa7, 0x37, 0x34, 0xf5, 0x98, 0x51, 0xb2, 0x5a, 0xc9, 0x8f, 0xf6, 0x9b, 0xbe,
	0xf8, 0x28, 0x87, 0x94, 0x4d, 0x72, 0x48, 0xc8, 0x97, 0x01, 0x0f, 0x02, 0x0b, 0xe3, 0xee, 0xe8,
	0xf5, 0xa1, 0x2c, 0x21, 0x4d, 0xe2, 0x15, 0x62, 0x5b, 0x7a, 0x22, 0x8d, 0xdf, 0x53, 0x2b, 0x08,
	0x13, 0xcf, 0xbb, 0xa6, 0xfa, 0x9f, 0x0a, 0xd4, 0x26, 0x69, 0xfa, 0x22, 0xf9, 0xcd, 0x74, 0xd2,
	0xc1, 0xe6, 0x8e, 0xc4, 0x3e, 0x4a, 0x3a, 0xb4, 0xb8, 0xc3, 0x3e, 0x82, 0x72, 0xc2, 0x96, 0xc2,
	0x88, 0xce, 0x79, 0x85, 0x93, 0xcc, 0xaa, 0x95, 0xc2, 0x88, 0x6b, 0xeb, 0x50, 0x76, 0xf8, 0x17,
	0xa1, 0x4e, 0xa4, 0x78, 0x26, 0x84, 0x78, 0x3e, 0xa7, 0x61, 0x7c, 0xa8, 0x95, 0x70, 0x1a, 0x7a,
	0x10, 0xea, 0x3f, 0xe6, 0xa0, 0x28, 0x17, 0x4e, 0x52, 0x79, 0x4a, 0x3a, 0x95, 0x77, 0x30, 0x61,
	0x24, 0x17, 0xeb, 0x65, 0xb1, 0x18, 0xc9, 0xc5, 0x71, 0xe8, 0x1b, 0x21, 0x1f, 0x5c, 0xa4, 0x8c,
	0x2a, 0xdb, 0x86, 0x32, 0x9e, 0x37, 0x79, 0x93, 0xac, 0xce, 0xcb, 0x6a, 0xca, 0xd5, 0x48, 0xb9,
	0x97, 0x7a, 0xb2, 0xc5, 0x0e, 0xa1, 0x2a, 0x06, 0xc5, 0x82, 0x9f, 0x5b, 0x94, 0x1e, 0xed, 0x78,
	0xbd, 0x48, 0x25, 0xec, 0xaf, 0x68, 0x6b, 0xe2, 0x53, 0xa4, 0x23, 0xf6, 0x01, 0xd0, 0xa8, 0xf5,
	0x29, 0x09, 0xb3, 0xb8, 0x50, 0x00, 0xd7, 0x8a, 0x73, 0x36, 0xfb, 0x2b, 0x14, 0x8e, 0x8b, 0x0e,
	0x6b, 0x40, 0x79, 0xe4, 0xe9, 0x3e, 0xef, 0x19, 0xb6, 0x2d, 0x65, 0xff, 0xed, 0xf9, 0x0b, 0xa1,
	0x65, 0xc1, 0xd1, 0xfb, 0x2b, 0x5a, 0x69, 0x24, 0xdb, 0x88, 0x90, 0x67, 0xf5, 0xce, 0x85, 0x1f,
	0x27, 0xe3, 0xad, 0x05, 0x08, 0x1d, 0x59, 0xbd, 0x73, 0xf2, 0xef, 0x10, 0x21, 0x2f, 0xea, 0xa0,
	0x80, 0x7b, 0x6e, 0x20, 0x72, 0xd7, 0x1a, 0x36, 0xa9, 0x6e, 0x00, 0x2f, 0x56, 0xb7, 0x7a, 0xae,
	0x23, 0x33, 0x7e, 0x65, 0x82, 0x34, 0x7b, 0xae, 0xa3, 0xd6, 0x45, 0xf8, 0x12, 0x5d, 0x1d, 0xca,
	0xed, 0x61, 0x5b, 0x6f, 0x1e, 0x76, 0x1a, 0x9a, 0x76, 0x72, 0xd4, 0x11, 0x56, 0xf4, 0xa8, 0x55,
	0x7f, 0xac, 0x77, 0xea, 0xda, 0xc7, 0x8d, 0x4e, 0x4d, 0x41, 0xd9, 0x27, 0xc0, 0x5e, 0x53, 0x3b,
	0xee, 0xd4, 0x32, 0xdb, 0x05, 0xc8, 0xe1, 0x55, 0xa9, 0x43, 0xa8, 0xa4, 0xc8, 0x8e, 0x82, 0x94,
	0xb2, 0x37, 0x4b, 0x0a, 0x12, 0x59, 0x1c, 0x06, 0xb9, 0x90, 0x7f, 0x11, 0x3d, 0x93, 0x51, 0x9b,
	0x0e, 0x66, 0xf5, 0x64, 0x12, 0x0a, 0x9b, 0xe8, 0x53, 0xae, 0x4d, 0x5c, 0xcd, 0x57, 0xbd, 0x23,
	0x42, 0xfa, 0x52, 0xd5, 0x64, 0x35, 0x6c, 0xa2, 0xc8, 0x0b, 0x2e, 0x4a, 0x1e, 0xa1, 0xf2, 0x1a,
	0x08, 0x10, 0xb2, 0xae, 0xfa, 0xcf, 0x0a, 0xac, 0xa6, 0xaf, 0x1d, 0x1d, 0xaa, 0x91, 0xa7, 0x27,
	0x89, 0xb7, 0xfc, 0xc8, 0x3b, 0x10, 0x0a, 0xee, 0x19, 0x04, 0x66, 0xa5, 0xde, 0xde, 0x82, 0xea,
	0x90, 0x9b, 0x96, 0x81, 0x27, 0x4a, 0x4a, 0x49, 0xb2, 0xda, 0x5a, 0x0c, 0x25, 0xa9, 0xb9, 0x05,
	0xb5, 0x64, 0x58, 0xd7, 0x7a, 0x1a, 0x15, 0x95, 0x64, 0xb5, 0x64, 0xfa, 0xb6, 0xf5, 0xb4, 0x69,
	0xc6, 0x74, 0x2b, 0x5c, 0x96, 0x6e, 0xea, 0xef, 0xcb, 0x3b, 0x88, 0xb9, 0xf1, 0x2b, 0xbf, 0x83,
	0x1b, 0x50, 0x24, 0x51, 0x89, 0xef, 0xa1, 0x80, 0xdd, 0xa6, 0xc9, 0x6e, 0xc2, 0x2a, 0x7d, 0x20,
	0x6d, 0x13, 0x1f, 0x95, 0xe4, 0x0a, 0x55, 0x4a, 0xd3, 0x54, 0x1f, 0xc2, 0x7a, 0xcc, 0x2b, 0x97,
	0xc9, 0x81, 0xaa, 0xff, 0x90, 0x83, 0x72, 0xc2, 0x65, 0x92, 0x0b, 0x94, 0x99, 0x5c, 0x90, 0x99,
	0xe6, 0x02, 0xf6, 0xdd, 0xe8, 0xd5, 0x20, 0xbb, 0xe8, 0xb5, 0x71, 0x0a, 0xc1, 0xe8, 0xf9, 0x20,
	0xc2, 0x2a, 0x97, 0xca, 0xcc, 0xc6, 0x0f, 0x63, 0xf9, 0xe7, 0x3d, 0x8c, 0x15, 0x52, 0x0f, 0x63,
	0x34, 0x72, 0xe4, 0x88, 0x4c, 0x4e, 0x5e, 0x13, 0x1d, 0x1c, 0x69, 0x84, 0xa1, 0x2f, 0xdf, 0x07,
	0xa8, 0x4d, 0x89, 0xc4, 0x10, 0x03, 0x96, 0xb2, 0x4c, 0x24, 0x62, 0x07, 0x5d, 0xcd, 0xbe, 0x31,
	0x76, 0x7d, 0x6e, 0xca, 0x27, 0xab, 0xa8, 0xcb, 0x1e, 0x40, 0xbe, 0x47, 0x49, 0xf8, 0xca, 0x72,
	0x8f, 0x65, 0x62, 0x34, 0x4e, 0x1b, 0x26, 0xb9, 0xfb, 0x25, 0xa6, 0xd1, 0x68, 0xbc, 0x62, 0x44,
	0x48, 0x47, 0xe5, 0xdd, 0x73, 0x42, 0x4a, 0xeb, 0xe7, 0x35, 0x40, 0xd8, 0x9e, 0x31, 0xde, 0x71,
	0x42, 0xf4, 0xfe, 0x68, 0x04, 0x25, 0x40, 0x69, 0x4c, 0x95, 0xc6, 0xd0, 0xbc, 0x63, 0x04, 0xe2,
	0x28, 0x15, 0xd6, 0x68, 0x94, 0x6d, 0x9d, 0x8b, 0x41, 0xeb, 0x34, 0xa8, 0x82, 0x40, 0x8c, 0xa3,
	0xd2, 0x63, 0xc8, 0x16, 0xe2, 0x98, 0x5a, 0x32, 0x06, 0x15, 0x66, 0x7a, 0x37, 0x4a, 0xc2, 0xd2,
	0xa0, 0x6b, 0xc9, 0x6e, 0x64, 0x79, 0x71, 0xd4, 0x2b, 0x94, 0xd0, 0xd5, 0x05, 0x5d, 0x99, 0x78,
	0x8c, 0xe9, 0x1b, 0xe3, 0x63, 0xec, 0xab, 0x43, 0xa8, 0xc5, 0x57, 0xde, 0x92, 0xde, 0x33, 0x7a,
	0x2e, 0x09, 0x3b, 0x89, 0xc8, 0x33, 0xaf, 0x55, 0x12, 0x7e, 0x0a, 0x62, 0x5f, 0x3e, 0x73, 0xc9,
	0x70, 0xb1, 0x05, 0xd7, 0xa6, 0xb6, 0x0b, 0x3c, 0xf6, 0x70, 0xc2, 0xe3, 0x59, 0xea, 0xe1, 0x42,
	0x44, 0xf5, 0xbf, 0x9c, 0x81, 0xe2, 0x9e, 0x31, 0x5e, 0xba, 0x74, 0x2f, 0x93, 0xbc, 0x2e, 0x4a,
	0x21, 0xca, 0x26, 0x42, 0x24, 0x45, 0x31, 0x97, 0x88, 0x62, 0xcc, 0x25, 0xf9, 0x4b, 0x71, 0x49,
	0xcc, 0x93, 0x85, 0x4b, 0xf1, 0xa4, 0xa8, 0x1a, 0x2c, 0x5e, 0xbe, 0x6a, 0xf0, 0xaf, 0x32, 0xb0,
	0x26, 0xa9, 0x20, 0x74, 0x1a, 0x7b, 0x30, 0xa1, 0x03, 0xdf, 0x98, 0x4b, 0xd0, 0x94, 0x02, 0xfc,
	0x4e, 0xa4, 0x25, 0x32, 0x8b, 0x90, 0x90, 0xf3, 0x26, 0x75, 0xc4, 0x07, 0xf2, 0x89, 0x31, 0xbb,
	0xc8, 0x37, 0x92, 0xb3, 0x53, 0xef, 0x8c, 0xb1, 0x2a, 0xc9, 0x4d, 0xa9, 0x12, 0x52, 0x3a, 0xf9,
	0x94, 0xd2, 0x49, 0xa7, 0x57, 0x0a, 0x53, 0xe9, 0x95, 0x58, 0x79, 0x14, 0xa7, 0x94, 0x47, 0x14,
	0xa7, 0x96, 0x26, 0xf3, 0x11, 0xd7, 0xa3, 0x67, 0x58, 0xa9, 0x6c, 0xa8, 0xa3, 0x3e, 0x88, 0xa9,
	0x79, 0x29, 0x1d, 0xfd, 0x10, 0x2a, 0xa9, 0x73, 0xc5, 0x6f, 0x1f, 0x4a, 0xea, 0xed, 0x23, 0x7e,
	0x3b, 0xc9, 0xa4, 0xde, 0x4e, 0xd4, 0xff, 0x50, 0x80, 0xc5, 0x8c, 0x2d, 0x2e, 0x10, 0x85, 0xf0,
	0x0a, 0x5a, 0xfe, 0x06, 0xa9, 0x49, 0xb2, 0xed, 0x82, 0xaf, 0x0b, 0x7d, 0x63, 0x8c, 0xc6, 0xfd,
	0xa3, 0x74, 0x46, 0x3a, 0xb7, 0x2c, 0x53, 0xc4, 0x09, 0xe9, 0xc9, 0xe4, 0x79, 0x7e, 0x2a, 0x79,
	0x7e, 0x0b, 0x6a, 0x14, 0xf0, 0x4a, 0xdc, 0xe8, 0x09, 0xb2, 0x40, 0x21, 0x2f, 0x05, 0xc2, 0xe2,
	0x5c, 0x4d, 0xa7, 0xef, 0xaa, 0x7f, 0xa9, 0xc0, 0x4b, 0xcf, 0x9c, 0xf4, 0x6a, 0x99, 0xc0, 0x9f,
	0x9a, 0xc8, 0x04, 0x2e, 0xe6, 0x54, 0xb9, 0x9b, 0x88, 0x93, 0x76, 0x63, 0x42, 0xca, 0xa2, 0xcc,
	0xa5, 0xdf, 0x4b, 0x25, 0xb5, 0xe9, 0x34, 0xa3, 0xd4, 0xb5, 0xed, 0xf8, 0xdc, 0x08, 0x29, 0x8f,
	0x16, 0xb1, 0x86, 0x92, 0xe2, 0xd9, 0xc8, 0x24, 0x66, 0x52, 0x26, 0xf1, 0x65, 0x28, 0x50, 0xdd,
	0x46, 0x2f, 0xaa, 0x93, 0x14, 0xbd, 0xe9, 0x4b, 0xce, 0x3d, 0xe3, 0xd0, 0x75, 0x53, 0x34, 0x8c,
	0xb6, 0x0d, 0xbc, 0xab, 0xb0, 0xcb, 0xcc, 0xaa, 0x55, 0xf5, 0xe3, 0x09, 0x8e, 0xb4, 0xb9, 0x38,
	0xda, 0xe5, 0xb7, 0x50, 0xef, 0x4d, 0x5c, 0xb8, 0x58, 0x68, 0x6e, 0xea, 0xe8, 0x4f, 0x94, 0x44,
	0xfa, 0x44, 0x6a, 0xeb, 0x0a, 0x07, 0x7b, 0x04, 0x39, 0x7a, 0x6e, 0xc8, 0x5e, 0x22, 0x7f, 0x4f,
	0x33, 0xd8, 0x03, 0xc8, 0xf6, 0x8d, 0xf1, 0xd2, 0x22, 0xb2, 0xbf, 0xa2, 0xe1, 0x78, 0x2a, 0x91,
	0x44, 0xeb, 0x76, 0x1b, 0xaa, 0x69, 0xe4, 0x97, 0x3d, 0xa9, 0xcc, 0xf4, 0xfe, 0xdf, 0x3c, 0x29,
	0x21, 0xbf, 0xe8, 0xa4, 0x29, 0xbf, 0xb7, 0x17, 0x95, 0x43, 0x5d, 0xf6, 0xac, 0xfb, 0x71, 0xae,
	0x56, 0x44, 0xf1, 0xff, 0x7f, 0x19, 0x27, 0x96, 0x26, 0x6c, 0xc9, 0x4c, 0x64, 0x94, 0xad, 0xbd,
	0x03, 0x85, 0x7a, 0xfc, 0xb8, 0x36, 0x99, 0x56, 0x2a, 0x42, 0xb6, 0xbe, 0xbb, 0x5b, 0x53, 0xb0,
	0xb1, 0xdb, 0x68, 0xd5, 0x32, 0xea, 0xdf, 0x08, 0xec, 0xf1, 0xa8, 0xdb, 0x46, 0xd8, 0x3b, 0xc3,
	0x9b, 0xda, 0x81, 0xa2, 0x58, 0x2a, 0xca, 0xca, 0xbf, 0xbb, 0x34, 0x2e, 0x5a, 0x34, 0x33, 0xbe,
	0xbb, 0xcc, 0x55, 0xef, 0x2e, 0x7b, 0xc5, 0xbb, 0x7b, 0x8f, 0x5c, 0xbe, 0xd4, 0x81, 0xe6, 0xde,
	0x5e, 0x00, 0x2f, 0xef, 0x09, 0x67, 0xbb, 0xe9, 0xd4, 0x9d, 0x0b, 0x71, 0x96, 0xe0, 0x2b, 0x76,
	0x13, 0xb7, 0x49, 0x36, 0xc4, 0x5e, 0x07, 0x3c, 0x34, 0xae, 0xa2, 0x7b, 0x7e, 0x4b, 0x81, 0x1b,
	0xcf, 0xc5, 0x3c, 0xf0, 0x58, 0x1d, 0x8a, 0x62, 0x64, 0x74, 0x81, 0xef, 0x2c, 0x71, 0x81, 0x88,
	0x88, 0x16, 0xcd, 0xbb, 0xf2, 0xd1, 0xde, 0x82, 0x0a, 0x06, 0xab, 0x7b, 0x9c, 0x93, 0x7a, 0x7b,
	0x19, 0x0a, 0x2e, 0xe5, 0x23, 0xe5, 0xd9, 0x64, 0x4f, 0xfd, 0x39, 0x58, 0x4d, 0x86, 0x05, 0xde,
	0xac, 0x71, 0xec, 0x11, 0xe4, 0x45, 0x3a, 0x2f, 0xb3, 0xf0, 0x79, 0x48, 0x06, 0xa2, 0x9a, 0x98,
	0xa0, 0xfe, 0xae, 0x02, 0xa5, 0x08, 0x96, 0x8e, 0x6a, 0x95, 0x89, 0xa8, 0xf6, 0x06, 0x14, 0xa3,
	0x80, 0x56, 0x78, 0xcf, 0x85, 0x1e, 0x05, 0xb3, 0x68, 0x9e, 0xe9, 0x03, 0x59, 0x3b, 0x61, 0x3f,
	0x28, 0x61, 0x76, 0x88, 0x16, 0xef, 0x23, 0x28, 0x0e, 0x5d, 0x73, 0x64, 0xf3, 0x60, 0xf1, 0x93,
	0x31, 0xee, 0x7f, 0x40, 0x83, 0xb5, 0x68, 0x92, 0xfa, 0xd7, 0x19, 0x80, 0x04, 0xce, 0x9a, 0x50,
	0x11, 0x5f, 0x12, 0xef, 0x7e, 0x6e, 0x29, 0x45, 0x32, 0x55, 0xd4, 0x4b, 0x0d, 0xe3, 0x36, 0xfb,
	0x04, 0xd6, 0xe4, 0x52, 0x67, 0xdc, 0x30, 0x63, 0x5f, 0x77, 0xde, 0xc3, 0xe7, 0x79, 0x6f, 0xb8,
	0x4f, 0x63, 0xf7, 0x57, 0xb4, 0x55, 0x31, 0x59, 0xf4, 0xd9, 0x21, 0x54, 0xe5, 0x62, 0x32, 0x57,
	0xbf, 0xd8, 0xf7, 0xc5, 0xd5, 0x64, 0x2d, 0xe0, 0xfe, 0x8a, 0x26, 0x71, 0x89, 0x4a, 0x52, 0x0f,
	0xe2, 0x73, 0xf6, 0xba, 0x61, 0x54, 0xd6, 0x74, 0x7b, 0xfe, 0x62, 0x3b, 0xdc, 0x09, 0xb9, 0xbf,
	0x3d, 0x0a, 0x43, 0xd7, 0xd9, 0x5f, 0x89, 0xce, 0xba, 0xd3, 0x0d, 0x9d, 0xed, 0x12, 0x14, 0x44,
	0x4f, 0xfd, 0xbe, 0x02, 0x90, 0x9c, 0x63, 0x46, 0xe2, 0xf5, 0x79, 0x6e, 0xca, 0xd7, 0xa1, 0xd4,
	0x0d, 0x1d, 0x91, 0xba, 0x93, 0x4e, 0x42, 0x37, 0x74, 0x9a, 0x3d, 0xd7, 0x89, 0x3e, 0x51, 0xca,
	0x24, 0x17, 0x7f, 0xea, 0xf0, 0x2f, 0xe8, 0x57, 0x20, 0xf8, 0x69, 0xe4, 0x5b, 0xd2, 0x77, 0x2f,
	0x74, 0x43, 0xe7, 0xc4, 0xb7, 0xd4, 0x01, 0x54, 0x52, 0x04, 0x60, 0x0f, 0x45, 0xf9, 0xa4, 0xb2,
	0x90, 0x68, 0x56, 0xef, 0x7c, 0xa2, 0x80, 0xf2, 0x75, 0xa8, 0x10, 0xbb, 0xfa, 0x54, 0xbb, 0x16,
	0xd5, 0x83, 0x23, 0x48, 0x23, 0x88, 0xfa, 0x77, 0x19, 0x21, 0x66, 0xd1, 0x4e, 0x57, 0x7d, 0x7b,
	0x7a, 0x7e, 0x49, 0x70, 0x7d, 0x32, 0x9d, 0x72, 0x67, 0x29, 0xcc, 0x27, 0x83, 0xa5, 0xe7, 0x47,
	0x3c, 0xf3, 0x2a, 0x88, 0xe3, 0x68, 0xa5, 0x90, 0x8a, 0x56, 0x50, 0x0c, 0x29, 0x05, 0x40, 0xc1,
	0x86, 0x88, 0x7b, 0x4a, 0x08, 0x38, 0xc5, 0x80, 0xe3, 0x55, 0x80, 0x24, 0x3f, 0x20, 0xf3, 0x2c,
	0xe5, 0x38, 0x37, 0x30, 0x3b, 0xd9, 0x12, 0x99, 0x02, 0x98, 0x34, 0x05, 0x1f, 0xc0, 0xb5, 0x67,
	0xce, 0xb3, 0x64, 0x74, 0x14, 0x42, 0x6d, 0x9a, 0x59, 0x29, 0x62, 0xef, 0xb9, 0x0e, 0x09, 0x62,
	0xf4, 0xe3, 0x36, 0x04, 0x20, 0x93, 0xc6, 0x1f, 0xa9, 0x6e, 0x22, 0x93, 0x7c, 0xec, 0x60, 0x7c,
	0xfb, 0xfc, 0x1a, 0x60, 0xfa, 0x71, 0x87, 0x25, 0x09, 0x8a, 0x4d, 0xb5, 0x21, 0x10, 0x46, 0x75,
	0x90, 0x04, 0x56, 0x29, 0x8d, 0xa6, 0x4c, 0x68, 0xb4, 0x94, 0x0e, 0xcc, 0xa4, 0x75, 0xa0, 0xfa,
	0x2b, 0x0a, 0xb0, 0xe9, 0x75, 0x02, 0xef, 0xf2, 0x0b, 0xa5, 0xd5, 0x62, 0xf6, 0x2a, 0x6a, 0xf1,
	0x4f, 0x15, 0x28, 0x51, 0xfc, 0x8f, 0xe7, 0xf8, 0x04, 0x80, 0x63, 0x3b, 0xad, 0x13, 0xdf, 0x5b,
	0x90, 0x37, 0xd0, 0xf8, 0x13, 0x99, 0x40, 0x40, 0xbd, 0x58, 0xe6, 0x51, 0xf3, 0xca, 0xd6, 0xec,
	0x3d, 0x28, 0xc7, 0xeb, 0xb1, 0x0a, 0x14, 0x9b, 0x87, 0xa7, 0xf5, 0x56, 0x13, 0x3d, 0x29, 0x06,
	0xd5, 0x8f, 0x4f, 0x9a, 0xbb, 0x0d, 0x7d, 0xbb, 0xae, 0xe9, 0xc7, 0xfb, 0xed, 0x4f, 0x6b, 0x8a,
	0x5a, 0x91, 0xa3, 0x91, 0x7c, 0xea, 0x67, 0xb0, 0x7a, 0x10, 0xa5, 0x81, 0xf1, 0x3c, 0xaf, 0x40,
	0x39, 0x49, 0x28, 0xcb, 0xf7, 0xb8, 0x38, 0x97, 0xfc, 0x35, 0x28, 0xc8, 0x0c, 0xb2, 0x2c, 0x06,
	0xef, 0x52, 0xe2, 0x38, 0xb1, 0x8a, 0x32, 0x43, 0x2d, 0xad, 0xe7, 0x3f, 0x29, 0xb0, 0x96, 0x5a,
	0x7c, 0x3a, 0xc6, 0xcc, 0x46, 0x31, 0xa6, 0x2c, 0x39, 0x1c, 0xba, 0x7e, 0x54, 0x22, 0x51, 0x3c,
	0x33, 0x82, 0x03, 0xd7, 0xe7, 0xb3, 0x96, 0x66, 0xdf, 0x89, 0xea, 0x31, 0x72, 0x8b, 0x1c, 0x87,
	0x18, 0x81, 0x74, 0x51, 0xc6, 0x36, 0x14, 0x47, 0x9e, 0x88, 0x3b, 0xf3, 0x8b, 0x72, 0xb1, 0xf1,
	0x02, 0x27, 0x9e, 0xf8, 0x45, 0xd6, 0x88, 0xfe, 0xab, 0x7f, 0x9e, 0x49, 0x9d, 0xee, 0x85, 0xea,
	0xd7, 0x2f, 0xf3, 0x8b, 0x87, 0x79, 0x25, 0xf6, 0xb1, 0x6e, 0xca, 0xa7, 0x75, 0x53, 0xf2, 0xd4,
	0x50, 0x48, 0x3f, 0x35, 0xdc, 0x20, 0x12, 0xa4, 0x7e, 0xfa, 0x50, 0x18, 0x79, 0x87, 0x32, 0xa1,
	0x2c, 0xf4, 0x51, 0x69, 0x86, 0x3e, 0x9a, 0x2a, 0x17, 0x9f, 0xd0, 0x7d, 0x20, 0x50, 0x9a, 0xa1,
	0xfb, 0x28, 0x3d, 0x9c, 0xd2, 0x7d, 0x6a, 0x0f, 0xd6, 0xa7, 0xc8, 0xfb, 0x1c, 0x4d, 0x96, 0x3c,
	0x80, 0x64, 0x26, 0x1e, 0x40, 0x18, 0xe4, 0xfa, 0x86, 0x13, 0xc8, 0x2c, 0x0b, 0xb5, 0x9f, 0x97,
	0x21, 0xbf, 0xfd, 0xc3, 0x54, 0x59, 0x9a, 0x28, 0xeb, 0xa4, 0x0a, 0x90, 0xc6, 0x5e, 0xfd, 0xa4,
	0xd5, 0x11, 0xa5, 0x7c, 0x07, 0x8d, 0x03, 0xfd, 0xf8, 0xa8, 0xbe, 0xd3, 0xa8, 0x29, 0xec, 0x3a,
	0xd4, 0xea, 0x27, 0xbb, 0xcd, 0xb6, 0xbe, 0xd3, 0x6e, 0xb5, 0x1a, 0x3b, 0x9d, 0x66, 0xfb, 0xb0,
	0x96, 0x61, 0x55, 0x00, 0x09, 0xad, 0x6b, 0xbb, 0xb5, 0x2c, 0x0a, 0xd6, 0xc9, 0x71, 0x43, 0xd3,
	0xf7, 0xea, 0xa7, 0xed, 0x13, 0xad, 0xd9, 0x69, 0xd4, 0x72, 0x53, 0xaf, 0xe1, 0x79, 0x8c, 0x6b,
	0xa2, 0x39, 0x3b, 0xfb, 0x8d, 0x5a, 0x01, 0x77, 0x3a, 0x6a, 0xee, 0x7c, 0x22, 0xd6, 0x28, 0xe2,
	0xf8, 0x83, 0xc6, 0x6e, 0xb3, 0xae, 0xb7, 0x9a, 0xc7, 0x9d, 0x5a, 0xe9, 0xf6, 0x11, 0x94, 0xe3,
	0x82, 0x58, 0xb6, 0x0a, 0xa5, 0xc3, 0xb6, 0xde, 0xd6, 0x76, 0x1b, 0x5a, 0x6d, 0x85, 0xd5, 0x60,
	0x95, 0x9a, 0xfa, 0x61, 0x5b, 0x3b, 0xa8, 0xb7, 0x6a, 0x0a, 0xbb, 0x06, 0x6b, 0x02, 0xa2, 0x35,
	0x4e, 0x1b, 0xda, 0x71, 0x43, 0x3c, 0xb6, 0x4b, 0x50, 0xfd, 0x70, 0xb7, 0x7d, 0x50, 0xcb, 0xde,
	0x6e, 0xc3, 0xda, 0x44, 0x89, 0x2c, 0x1e, 0xfc, 0xb0, 0xad, 0x1f, 0xb7, 0xb5, 0x8e, 0x78, 0xbd,
	0xc7, 0x96, 0xbe, 0xd3, 0x69, 0x1e, 0xe0, 0xc9, 0x6b, 0xb0, 0x4a, 0xfd, 0xd3, 0x66, 0xe3, 0xd3,
	0x9d, 0xc3, 0x4e, 0x2d, 0x43, 0x65, 0x8f, 0x08, 0xd9, 0xab, 0x9f, 0x22, 0x20, 0x7b, 0xbb, 0x0f,
	0x95, 0xd4, 0xe3, 0xec, 0xb3, 0x91, 0x1b, 0x83, 0x2a, 0x1e, 0xa6, 0x71, 0xa8, 0xef, 0x37, 0x8f,
	0x3b, 0x6d, 0xed, 0x71, 0x4d, 0x61, 0x2f, 0xc1, 0x3a, 0x52, 0x09, 0x89, 0xa4, 0xef, 0xb5, 0x5b,
	0x78, 0xa0, 0x0c, 0x92, 0xe2, 0xe4, 0x48, 0xd7, 0x1a, 0x3b, 0xf5, 0x56, 0xab, 0x96, 0xa5, 0xc7,
	0x44, 0xa4, 0x4c, 0xa7, 0xbd, 0x5b, 0x7f, 0x5c, 0xcb, 0xdd, 0xfe, 0x1e, 0x54, 0x27, 0xdd, 0x47,
	0x5c, 0x59, 0xf4, 0x74, 0xcb, 0x19, 0x1b, 0xb6, 0x65, 0xd6, 0x56, 0x90, 0x06, 0x07, 0x69, 0x37,
	0xb2, 0xa6, 0xa4, 0x86, 0x49, 0x67, 0x50, 0x9c, 0xe2, 0x20, 0x71, 0xe8, 0x6a, 0xd9, 0xfb, 0x7f,
	0xfc, 0x12, 0x94, 0x5a, 0x52, 0x1e, 0x51, 0x6a, 0x8f, 0x2c, 0x67, 0xc0, 0x5e, 0xde, 0x12, 0x3f,
	0xc6, 0xdf, 0x8a, 0x7e, 0x8c, 0xbf, 0xd5, 0x18, 0x7a, 0xe1, 0xc5, 0xe6, 0x0c, 0x38, 0x3b, 0x4d,
	0x7e, 0x89, 0xf9, 0xe6, 0x12, 0x3f, 0x25, 0x7e, 0xb2, 0xf9, 0xd6, 0x52, 0x3f, 0x38, 0x66, 0x1c,
	0x56, 0xd3, 0xbf, 0xb6, 0x62, 0xef, 0x2e, 0xf8, 0x5d, 0x4a, 0xf2, 0x9b, 0xb1, 0xcd, 0xdb, 0xcb,
	0x0e, 0x0d, 0x3c, 0xf6, 0x58, 0xfc, 0x80, 0x92, 0x52, 0x71, 0x6f, 0x2d, 0xae, 0x87, 0xc6, 0xe5,
	0xdf, 0x5e, 0x66, 0x58, 0xe0, 0xb1, 0x76, 0x52, 0x7b, 0x5d, 0x37, 0x4d, 0xb6, 0x44, 0xb5, 0xb5,
	0xc8, 0x32, 0xcd, 0x24, 0x75, 0x6a, 0xc1, 0x5d, 0x6e, 0x2f, 0xb3, 0xa0, 0x48, 0xe6, 0xcc, 0x5c,
	0x90, 0xc3, 0x6a, 0xba, 0xe2, 0x63, 0x1e, 0x8d, 0xa7, 0xaa, 0x6d, 0xe6, 0xd1, 0xf8, 0x99, 0x22,
	0x92, 0xae, 0xc0, 0x3b, 0x7a, 0x0a, 0x5f, 0x80, 0x77, 0x52, 0x13, 0xba, 0xf9, 0xee, 0x92, 0x23,
	0x03, 0x8f, 0x9d, 0x4c, 0x14, 0x94, 0x22, 0xbd, 0xef, 0x2c, 0x35, 0x79, 0x01, 0xc9, 0x27, 0x97,
	0x45, 0xaa, 0x2f, 0xb7, 0xec, 0x02, 0xc2, 0x3f, 0x86, 0xda, 0x74, 0x51, 0x1a, 0xbb, 0x3b, 0x7f,
	0xe1, 0xa9, 0x02, 0xb6, 0x99, 0x4b, 0xeb, 0x00, 0x49, 0x0d, 0x24, 0x9b, 0x57, 0x37, 0x91, 0x2e,
	0xb9, 0xdc, 0xbc, 0xb5, 0xdc, 0xc0, 0xc0, 0x43, 0x81, 0x97, 0x55, 0x81, 0xf3, 0x04, 0x3e, 0xa9,
	0x50, 0x9c, 0x27, 0xf0, 0xe9, 0xf2, 0xc2, 0x53, 0x28, 0xca, 0x8a, 0xbe, 0x79, 0xeb, 0x26, 0x75,
	0x86, 0xf3, 0xd6, 0x4d, 0x97, 0x06, 0xea, 0x00, 0x49, 0x1e, 0x94, 0x2d, 0xf1, 0x8e, 0x24, 0x56,
	0xbf, 0xb5, 0xdc, 0xc0, 0x89, 0x0d, 0x90, 0x3f, 0x96, 0x49, 0xff, 0xdb, 0xcb, 0x6d, 0x10, 0x65,
	0x33, 0x39, 0xac, 0xa6, 0x73, 0x64, 0xec, 0xdd, 0x85, 0x33, 0xa3, 0xe4, 0xe0, 0x3c, 0x31, 0x7d,
	0x26, 0xed, 0xf6, 0x94, 0xf2, 0xe3, 0xd3, 0x29, 0x2a, 0x36, 0x3f, 0xb5, 0xf9, 0x9c, 0x5c, 0xdc,
	0xe6, 0xfb, 0x97, 0x9c, 0x11, 0x78, 0xec, 0x2c, 0x95, 0x63, 0x43, 0x93, 0xc4, 0x6e, 0x2f, 0x91,
	0x03, 0x93, 0x4f, 0xc4, 0x9b, 0x77, 0x96, 0x1e, 0x1b, 0x78, 0xcc, 0x49, 0xe5, 0x7f, 0xe5, 0x0b,
	0xe5, 0x7b, 0x4b, 0xcc, 0x8f, 0x43, 0xb6, 0xcd, 0xbb, 0x97, 0x18, 0x3d, 0xb5, 0x9f, 0x78, 0x22,
	0x59, 0x6a, 0xbf, 0xf8, 0x11, 0x67, 0xa9, 0xfd, 0x52, 0x6f, 0x2f, 0x93, 0xe7, 0xb3, 0xf9, 0x92,
	0xfb, 0xc5, 0x2f, 0x2b, 0x4b, 0x9e, 0x2f, 0x7e, 0x3e, 0x79, 0x2c, 0x12, 0x77, 0x7b, 0x9c, 0x9b,
	0x6c, 0x41, 0xd6, 0x44, 0xa6, 0x19, 0xe7, 0x1a, 0xd0, 0x74, 0x9a, 0xf1, 0x1c, 0xaa, 0x93, 0x91,
	0x2e, 0xbb, 0xb3, 0x38, 0xa3, 0x98, 0x5c, 0xd4, 0x7b, 0xcb, 0x0f, 0x0e, 0x3c, 0xf6, 0x3d, 0x28,
	0xc7, 0x3e, 0x38, 0x7b, 0x7b, 0x89, 0x38, 0x08, 0xb7, 0x78, 0x67, 0xa9, 0x71, 0x81, 0xc7, 0x8e,
	0x20, 0x4f, 0xc1, 0x26, 0x53, 0x17, 0x07, 0xc5, 0x9b, 0xdf, 0x58, 0x38, 0x26, 0xf0, 0xb6, 0x0f,
	0xff, 0xe2, 0xcb, 0xd7, 0x94, 0xbf, 0xfd, 0xf2, 0x35, 0xe5, 0x5f, 0xbf, 0x7c, 0x4d, 0xf9, 0x9d,
	0x7f, 0x7b, 0x6d, 0x05, 0xd4, 0x9e, 0x3b, 0xdc, 0xea, 0x1a, 0x9e, 0x15, 0xcc, 0x9c, 0x7f, 0xa4,
	0x7c, 0x96, 0x19, 0xbf, 0xff, 0x83, 0xcc, 0xb5, 0xed, 0xfa, 0x51, 0xb3, 0xee, 0x79, 0x91, 0xf7,
	0x77, 0xfa, 0x7e, 0xb7, 0x40, 0x76, 0xe4, 0x9b, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x85,
	0xc7, 0x93, 0x15, 0x4a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ListenerClient is the client API for Listener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ListenerClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// playitem换playurl 可用来刷新列表中过期的秒开信息
	PlayURL(ctx context.Context, in *PlayURLReq, opts ...grpc.CallOption) (*PlayURLResp, error)
	// 批量获取播客稿件详情 可匿名
	BKArcDetails(ctx context.Context, in *BKArcDetailsReq, opts ...grpc.CallOption) (*BKArcDetailsResp, error)
	// 获取用户当前播放列表，设置列表来源的话后端会同时更新列表，返回更新后的列表 可匿名
	Playlist(ctx context.Context, in *PlaylistReq, opts ...grpc.CallOption) (*PlaylistResp, error)
	// 批量添加稿件到当前播放列表 可匿名
	PlaylistAdd(ctx context.Context, in *PlaylistAddReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 批量从当前播放列表删除稿件 可匿名
	PlaylistDel(ctx context.Context, in *PlaylistDelReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 获取推荐播单 可匿名 注意：服务端不保存推荐播单 该播单为客户端本地维护
	RcmdPlaylist(ctx context.Context, in *RcmdPlaylistReq, opts ...grpc.CallOption) (*RcmdPlaylistResp, error)
	// 获取用户播放历史 可匿名
	PlayHistory(ctx context.Context, in *PlayHistoryReq, opts ...grpc.CallOption) (*PlayHistoryResp, error)
	// 播放历史上报 可匿名
	PlayHistoryAdd(ctx context.Context, in *PlayHistoryAddReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 批量删除播放历史 可匿名
	PlayHistoryDel(ctx context.Context, in *PlayHistoryDelReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 起播上报 可匿名
	PlayActionReport(ctx context.Context, in *PlayActionReportReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// 一键三连 需登录
	TripleLike(ctx context.Context, in *TripleLikeReq, opts ...grpc.CallOption) (*TripleLikeResp, error)
	// 点赞/取消点赞 点踩/取消点踩 可匿名
	ThumbUp(ctx context.Context, in *ThumbUpReq, opts ...grpc.CallOption) (*ThumbUpResp, error)
	// 投币 需登录
	CoinAdd(ctx context.Context, in *CoinAddReq, opts ...grpc.CallOption) (*CoinAddResp, error)
	// 收藏稿件 需登录
	FavItemAdd(ctx context.Context, in *FavItemAddReq, opts ...grpc.CallOption) (*FavItemAddResp, error)
	//  取消收藏稿件 需登录
	FavItemDel(ctx context.Context, in *FavItemDelReq, opts ...grpc.CallOption) (*FavItemDelResp, error)
	// 批量操作多个收藏夹 添加/删除一个稿件 需登录
	FavItemBatch(ctx context.Context, in *FavItemBatchReq, opts ...grpc.CallOption) (*FavItemBatchResp, error)
	// 获取一个稿件被我的哪几个收藏夹收藏 需登录
	FavoredInAnyFolders(ctx context.Context, in *FavoredInAnyFoldersReq, opts ...grpc.CallOption) (*FavoredInAnyFoldersResp, error)
	// 获取用户全部收藏夹列表 不分页 需登录
	FavFolderList(ctx context.Context, in *FavFolderListReq, opts ...grpc.CallOption) (*FavFolderListResp, error)
	// 获取用户单个收藏夹内稿件详细信息 分页 需登录
	FavFolderDetail(ctx context.Context, in *FavFolderDetailReq, opts ...grpc.CallOption) (*FavFolderDetailResp, error)
	// 创建一个收藏夹 需登录
	FavFolderCreate(ctx context.Context, in *FavFolderCreateReq, opts ...grpc.CallOption) (*FavFolderCreateResp, error)
	// 删除一个收藏夹 需登录
	FavFolderDelete(ctx context.Context, in *FavFolderDeleteReq, opts ...grpc.CallOption) (*FavFolderDeleteResp, error)
	// 发现页精选卡（播单）feed流 可匿名
	PickFeed(ctx context.Context, in *PickFeedReq, opts ...grpc.CallOption) (*PickFeedResp, error)
	// 精选卡（播单）详情 可匿名
	PickCardDetail(ctx context.Context, in *PickCardDetailReq, opts ...grpc.CallOption) (*PickCardDetailResp, error)
	// 播单详情分页获取 可匿名
	Medialist(ctx context.Context, in *MedialistReq, opts ...grpc.CallOption) (*MedialistResp, error)
	// 通用事件回报 包含引导条曝光上报等
	Event(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (*EventResp, error)
}

type listenerClient struct {
	cc *grpc.ClientConn
}

func NewListenerClient(cc *grpc.ClientConn) ListenerClient {
	return &listenerClient{cc}
}

func (c *listenerClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayURL(ctx context.Context, in *PlayURLReq, opts ...grpc.CallOption) (*PlayURLResp, error) {
	out := new(PlayURLResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PlayURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) BKArcDetails(ctx context.Context, in *BKArcDetailsReq, opts ...grpc.CallOption) (*BKArcDetailsResp, error) {
	out := new(BKArcDetailsResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/BKArcDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) Playlist(ctx context.Context, in *PlaylistReq, opts ...grpc.CallOption) (*PlaylistResp, error) {
	out := new(PlaylistResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/Playlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlaylistAdd(ctx context.Context, in *PlaylistAddReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PlaylistAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlaylistDel(ctx context.Context, in *PlaylistDelReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PlaylistDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) RcmdPlaylist(ctx context.Context, in *RcmdPlaylistReq, opts ...grpc.CallOption) (*RcmdPlaylistResp, error) {
	out := new(RcmdPlaylistResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/RcmdPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayHistory(ctx context.Context, in *PlayHistoryReq, opts ...grpc.CallOption) (*PlayHistoryResp, error) {
	out := new(PlayHistoryResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PlayHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayHistoryAdd(ctx context.Context, in *PlayHistoryAddReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PlayHistoryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayHistoryDel(ctx context.Context, in *PlayHistoryDelReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PlayHistoryDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PlayActionReport(ctx context.Context, in *PlayActionReportReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PlayActionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) TripleLike(ctx context.Context, in *TripleLikeReq, opts ...grpc.CallOption) (*TripleLikeResp, error) {
	out := new(TripleLikeResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/TripleLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) ThumbUp(ctx context.Context, in *ThumbUpReq, opts ...grpc.CallOption) (*ThumbUpResp, error) {
	out := new(ThumbUpResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/ThumbUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) CoinAdd(ctx context.Context, in *CoinAddReq, opts ...grpc.CallOption) (*CoinAddResp, error) {
	out := new(CoinAddResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/CoinAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavItemAdd(ctx context.Context, in *FavItemAddReq, opts ...grpc.CallOption) (*FavItemAddResp, error) {
	out := new(FavItemAddResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/FavItemAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavItemDel(ctx context.Context, in *FavItemDelReq, opts ...grpc.CallOption) (*FavItemDelResp, error) {
	out := new(FavItemDelResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/FavItemDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavItemBatch(ctx context.Context, in *FavItemBatchReq, opts ...grpc.CallOption) (*FavItemBatchResp, error) {
	out := new(FavItemBatchResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/FavItemBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavoredInAnyFolders(ctx context.Context, in *FavoredInAnyFoldersReq, opts ...grpc.CallOption) (*FavoredInAnyFoldersResp, error) {
	out := new(FavoredInAnyFoldersResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/FavoredInAnyFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavFolderList(ctx context.Context, in *FavFolderListReq, opts ...grpc.CallOption) (*FavFolderListResp, error) {
	out := new(FavFolderListResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/FavFolderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavFolderDetail(ctx context.Context, in *FavFolderDetailReq, opts ...grpc.CallOption) (*FavFolderDetailResp, error) {
	out := new(FavFolderDetailResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/FavFolderDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavFolderCreate(ctx context.Context, in *FavFolderCreateReq, opts ...grpc.CallOption) (*FavFolderCreateResp, error) {
	out := new(FavFolderCreateResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/FavFolderCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) FavFolderDelete(ctx context.Context, in *FavFolderDeleteReq, opts ...grpc.CallOption) (*FavFolderDeleteResp, error) {
	out := new(FavFolderDeleteResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/FavFolderDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PickFeed(ctx context.Context, in *PickFeedReq, opts ...grpc.CallOption) (*PickFeedResp, error) {
	out := new(PickFeedResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PickFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) PickCardDetail(ctx context.Context, in *PickCardDetailReq, opts ...grpc.CallOption) (*PickCardDetailResp, error) {
	out := new(PickCardDetailResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/PickCardDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) Medialist(ctx context.Context, in *MedialistReq, opts ...grpc.CallOption) (*MedialistResp, error) {
	out := new(MedialistResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/Medialist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerClient) Event(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (*EventResp, error) {
	out := new(EventResp)
	err := c.cc.Invoke(ctx, "/bilibili.app.listener.v1.Listener/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerServer is the server API for Listener service.
type ListenerServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// playitem换playurl 可用来刷新列表中过期的秒开信息
	PlayURL(context.Context, *PlayURLReq) (*PlayURLResp, error)
	// 批量获取播客稿件详情 可匿名
	BKArcDetails(context.Context, *BKArcDetailsReq) (*BKArcDetailsResp, error)
	// 获取用户当前播放列表，设置列表来源的话后端会同时更新列表，返回更新后的列表 可匿名
	Playlist(context.Context, *PlaylistReq) (*PlaylistResp, error)
	// 批量添加稿件到当前播放列表 可匿名
	PlaylistAdd(context.Context, *PlaylistAddReq) (*empty.Empty, error)
	// 批量从当前播放列表删除稿件 可匿名
	PlaylistDel(context.Context, *PlaylistDelReq) (*empty.Empty, error)
	// 获取推荐播单 可匿名 注意：服务端不保存推荐播单 该播单为客户端本地维护
	RcmdPlaylist(context.Context, *RcmdPlaylistReq) (*RcmdPlaylistResp, error)
	// 获取用户播放历史 可匿名
	PlayHistory(context.Context, *PlayHistoryReq) (*PlayHistoryResp, error)
	// 播放历史上报 可匿名
	PlayHistoryAdd(context.Context, *PlayHistoryAddReq) (*empty.Empty, error)
	// 批量删除播放历史 可匿名
	PlayHistoryDel(context.Context, *PlayHistoryDelReq) (*empty.Empty, error)
	// 起播上报 可匿名
	PlayActionReport(context.Context, *PlayActionReportReq) (*empty.Empty, error)
	// 一键三连 需登录
	TripleLike(context.Context, *TripleLikeReq) (*TripleLikeResp, error)
	// 点赞/取消点赞 点踩/取消点踩 可匿名
	ThumbUp(context.Context, *ThumbUpReq) (*ThumbUpResp, error)
	// 投币 需登录
	CoinAdd(context.Context, *CoinAddReq) (*CoinAddResp, error)
	// 收藏稿件 需登录
	FavItemAdd(context.Context, *FavItemAddReq) (*FavItemAddResp, error)
	//  取消收藏稿件 需登录
	FavItemDel(context.Context, *FavItemDelReq) (*FavItemDelResp, error)
	// 批量操作多个收藏夹 添加/删除一个稿件 需登录
	FavItemBatch(context.Context, *FavItemBatchReq) (*FavItemBatchResp, error)
	// 获取一个稿件被我的哪几个收藏夹收藏 需登录
	FavoredInAnyFolders(context.Context, *FavoredInAnyFoldersReq) (*FavoredInAnyFoldersResp, error)
	// 获取用户全部收藏夹列表 不分页 需登录
	FavFolderList(context.Context, *FavFolderListReq) (*FavFolderListResp, error)
	// 获取用户单个收藏夹内稿件详细信息 分页 需登录
	FavFolderDetail(context.Context, *FavFolderDetailReq) (*FavFolderDetailResp, error)
	// 创建一个收藏夹 需登录
	FavFolderCreate(context.Context, *FavFolderCreateReq) (*FavFolderCreateResp, error)
	// 删除一个收藏夹 需登录
	FavFolderDelete(context.Context, *FavFolderDeleteReq) (*FavFolderDeleteResp, error)
	// 发现页精选卡（播单）feed流 可匿名
	PickFeed(context.Context, *PickFeedReq) (*PickFeedResp, error)
	// 精选卡（播单）详情 可匿名
	PickCardDetail(context.Context, *PickCardDetailReq) (*PickCardDetailResp, error)
	// 播单详情分页获取 可匿名
	Medialist(context.Context, *MedialistReq) (*MedialistResp, error)
	// 通用事件回报 包含引导条曝光上报等
	Event(context.Context, *EventReq) (*EventResp, error)
}

// UnimplementedListenerServer can be embedded to have forward compatible implementations.
type UnimplementedListenerServer struct {
}

func (*UnimplementedListenerServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedListenerServer) PlayURL(ctx context.Context, req *PlayURLReq) (*PlayURLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayURL not implemented")
}
func (*UnimplementedListenerServer) BKArcDetails(ctx context.Context, req *BKArcDetailsReq) (*BKArcDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BKArcDetails not implemented")
}
func (*UnimplementedListenerServer) Playlist(ctx context.Context, req *PlaylistReq) (*PlaylistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Playlist not implemented")
}
func (*UnimplementedListenerServer) PlaylistAdd(ctx context.Context, req *PlaylistAddReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaylistAdd not implemented")
}
func (*UnimplementedListenerServer) PlaylistDel(ctx context.Context, req *PlaylistDelReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaylistDel not implemented")
}
func (*UnimplementedListenerServer) RcmdPlaylist(ctx context.Context, req *RcmdPlaylistReq) (*RcmdPlaylistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RcmdPlaylist not implemented")
}
func (*UnimplementedListenerServer) PlayHistory(ctx context.Context, req *PlayHistoryReq) (*PlayHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayHistory not implemented")
}
func (*UnimplementedListenerServer) PlayHistoryAdd(ctx context.Context, req *PlayHistoryAddReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayHistoryAdd not implemented")
}
func (*UnimplementedListenerServer) PlayHistoryDel(ctx context.Context, req *PlayHistoryDelReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayHistoryDel not implemented")
}
func (*UnimplementedListenerServer) PlayActionReport(ctx context.Context, req *PlayActionReportReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayActionReport not implemented")
}
func (*UnimplementedListenerServer) TripleLike(ctx context.Context, req *TripleLikeReq) (*TripleLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TripleLike not implemented")
}
func (*UnimplementedListenerServer) ThumbUp(ctx context.Context, req *ThumbUpReq) (*ThumbUpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThumbUp not implemented")
}
func (*UnimplementedListenerServer) CoinAdd(ctx context.Context, req *CoinAddReq) (*CoinAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinAdd not implemented")
}
func (*UnimplementedListenerServer) FavItemAdd(ctx context.Context, req *FavItemAddReq) (*FavItemAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavItemAdd not implemented")
}
func (*UnimplementedListenerServer) FavItemDel(ctx context.Context, req *FavItemDelReq) (*FavItemDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavItemDel not implemented")
}
func (*UnimplementedListenerServer) FavItemBatch(ctx context.Context, req *FavItemBatchReq) (*FavItemBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavItemBatch not implemented")
}
func (*UnimplementedListenerServer) FavoredInAnyFolders(ctx context.Context, req *FavoredInAnyFoldersReq) (*FavoredInAnyFoldersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoredInAnyFolders not implemented")
}
func (*UnimplementedListenerServer) FavFolderList(ctx context.Context, req *FavFolderListReq) (*FavFolderListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavFolderList not implemented")
}
func (*UnimplementedListenerServer) FavFolderDetail(ctx context.Context, req *FavFolderDetailReq) (*FavFolderDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavFolderDetail not implemented")
}
func (*UnimplementedListenerServer) FavFolderCreate(ctx context.Context, req *FavFolderCreateReq) (*FavFolderCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavFolderCreate not implemented")
}
func (*UnimplementedListenerServer) FavFolderDelete(ctx context.Context, req *FavFolderDeleteReq) (*FavFolderDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavFolderDelete not implemented")
}
func (*UnimplementedListenerServer) PickFeed(ctx context.Context, req *PickFeedReq) (*PickFeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickFeed not implemented")
}
func (*UnimplementedListenerServer) PickCardDetail(ctx context.Context, req *PickCardDetailReq) (*PickCardDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickCardDetail not implemented")
}
func (*UnimplementedListenerServer) Medialist(ctx context.Context, req *MedialistReq) (*MedialistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Medialist not implemented")
}
func (*UnimplementedListenerServer) Event(ctx context.Context, req *EventReq) (*EventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}

func RegisterListenerServer(s *grpc.Server, srv ListenerServer) {
	s.RegisterService(&_Listener_serviceDesc, srv)
}

func _Listener_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PlayURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayURL(ctx, req.(*PlayURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_BKArcDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BKArcDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).BKArcDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/BKArcDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).BKArcDetails(ctx, req.(*BKArcDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_Playlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Playlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/Playlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Playlist(ctx, req.(*PlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlaylistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlaylistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PlaylistAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlaylistAdd(ctx, req.(*PlaylistAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlaylistDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlaylistDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PlaylistDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlaylistDel(ctx, req.(*PlaylistDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_RcmdPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RcmdPlaylistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).RcmdPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/RcmdPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).RcmdPlaylist(ctx, req.(*RcmdPlaylistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PlayHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayHistory(ctx, req.(*PlayHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayHistoryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayHistoryAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayHistoryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PlayHistoryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayHistoryAdd(ctx, req.(*PlayHistoryAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayHistoryDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayHistoryDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayHistoryDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PlayHistoryDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayHistoryDel(ctx, req.(*PlayHistoryDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PlayActionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayActionReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PlayActionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PlayActionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PlayActionReport(ctx, req.(*PlayActionReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_TripleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripleLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).TripleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/TripleLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).TripleLike(ctx, req.(*TripleLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_ThumbUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).ThumbUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/ThumbUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).ThumbUp(ctx, req.(*ThumbUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_CoinAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).CoinAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/CoinAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).CoinAdd(ctx, req.(*CoinAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavItemAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavItemAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavItemAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/FavItemAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavItemAdd(ctx, req.(*FavItemAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavItemDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavItemDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavItemDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/FavItemDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavItemDel(ctx, req.(*FavItemDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavItemBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavItemBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavItemBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/FavItemBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavItemBatch(ctx, req.(*FavItemBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavoredInAnyFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoredInAnyFoldersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavoredInAnyFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/FavoredInAnyFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavoredInAnyFolders(ctx, req.(*FavoredInAnyFoldersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavFolderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavFolderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavFolderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/FavFolderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavFolderList(ctx, req.(*FavFolderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavFolderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavFolderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavFolderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/FavFolderDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavFolderDetail(ctx, req.(*FavFolderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavFolderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavFolderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavFolderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/FavFolderCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavFolderCreate(ctx, req.(*FavFolderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_FavFolderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavFolderDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).FavFolderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/FavFolderDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).FavFolderDelete(ctx, req.(*FavFolderDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PickFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PickFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PickFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PickFeed(ctx, req.(*PickFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_PickCardDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickCardDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).PickCardDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/PickCardDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).PickCardDetail(ctx, req.(*PickCardDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_Medialist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedialistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Medialist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/Medialist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Medialist(ctx, req.(*MedialistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Listener_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.listener.v1.Listener/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServer).Event(ctx, req.(*EventReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Listener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.listener.v1.Listener",
	HandlerType: (*ListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Listener_Ping_Handler,
		},
		{
			MethodName: "PlayURL",
			Handler:    _Listener_PlayURL_Handler,
		},
		{
			MethodName: "BKArcDetails",
			Handler:    _Listener_BKArcDetails_Handler,
		},
		{
			MethodName: "Playlist",
			Handler:    _Listener_Playlist_Handler,
		},
		{
			MethodName: "PlaylistAdd",
			Handler:    _Listener_PlaylistAdd_Handler,
		},
		{
			MethodName: "PlaylistDel",
			Handler:    _Listener_PlaylistDel_Handler,
		},
		{
			MethodName: "RcmdPlaylist",
			Handler:    _Listener_RcmdPlaylist_Handler,
		},
		{
			MethodName: "PlayHistory",
			Handler:    _Listener_PlayHistory_Handler,
		},
		{
			MethodName: "PlayHistoryAdd",
			Handler:    _Listener_PlayHistoryAdd_Handler,
		},
		{
			MethodName: "PlayHistoryDel",
			Handler:    _Listener_PlayHistoryDel_Handler,
		},
		{
			MethodName: "PlayActionReport",
			Handler:    _Listener_PlayActionReport_Handler,
		},
		{
			MethodName: "TripleLike",
			Handler:    _Listener_TripleLike_Handler,
		},
		{
			MethodName: "ThumbUp",
			Handler:    _Listener_ThumbUp_Handler,
		},
		{
			MethodName: "CoinAdd",
			Handler:    _Listener_CoinAdd_Handler,
		},
		{
			MethodName: "FavItemAdd",
			Handler:    _Listener_FavItemAdd_Handler,
		},
		{
			MethodName: "FavItemDel",
			Handler:    _Listener_FavItemDel_Handler,
		},
		{
			MethodName: "FavItemBatch",
			Handler:    _Listener_FavItemBatch_Handler,
		},
		{
			MethodName: "FavoredInAnyFolders",
			Handler:    _Listener_FavoredInAnyFolders_Handler,
		},
		{
			MethodName: "FavFolderList",
			Handler:    _Listener_FavFolderList_Handler,
		},
		{
			MethodName: "FavFolderDetail",
			Handler:    _Listener_FavFolderDetail_Handler,
		},
		{
			MethodName: "FavFolderCreate",
			Handler:    _Listener_FavFolderCreate_Handler,
		},
		{
			MethodName: "FavFolderDelete",
			Handler:    _Listener_FavFolderDelete_Handler,
		},
		{
			MethodName: "PickFeed",
			Handler:    _Listener_PickFeed_Handler,
		},
		{
			MethodName: "PickCardDetail",
			Handler:    _Listener_PickCardDetail_Handler,
		},
		{
			MethodName: "Medialist",
			Handler:    _Listener_Medialist_Handler,
		},
		{
			MethodName: "Event",
			Handler:    _Listener_Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-listener/interface/api/v1/api.proto",
}

func (m *PlayItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Et != nil {
		{
			size, err := m.Et.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubId) > 0 {
		dAtA3 := make([]byte, len(m.SubId)*10)
		var j2 int
		for _, num1 := range m.SubId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintApi(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x22
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ItemType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventTracking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTracking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTracking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TrackJson) > 0 {
		i -= len(m.TrackJson)
		copy(dAtA[i:], m.TrackJson)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TrackJson)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EntityType) > 0 {
		i -= len(m.EntityType)
		copy(dAtA[i:], m.EntityType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EntityType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TrackId) > 0 {
		i -= len(m.TrackId)
		copy(dAtA[i:], m.TrackId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TrackId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Batch) > 0 {
		i -= len(m.Batch)
		copy(dAtA[i:], m.Batch)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Batch)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayURLReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayURLReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayURLReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayURLResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayURLResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayURLResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlayerInfo) > 0 {
		for k := range m.PlayerInfo {
			v := m.PlayerInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Playable != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Playable))
		i--
		dAtA[i] = 0x10
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Volume != nil {
		{
			size, err := m.Volume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ExpireTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x62
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x58
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x50
	}
	if m.VideoCodecid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VideoCodecid))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Formats) > 0 {
		for iNdEx := len(m.Formats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Formats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x38
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x30
	}
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.QnType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.QnType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x12
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayInfo_PlayUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayInfo_PlayUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PlayUrl != nil {
		{
			size, err := m.PlayUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PlayInfo_PlayDash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayInfo_PlayDash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PlayDash != nil {
		{
			size, err := m.PlayDash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PlayURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayURL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayURL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Durl) > 0 {
		for iNdEx := len(m.Durl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Durl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BackupUrl) > 0 {
		for iNdEx := len(m.BackupUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BackupUrl[iNdEx])
			copy(dAtA[i:], m.BackupUrl[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.BackupUrl[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Vhead) > 0 {
		i -= len(m.Vhead)
		copy(dAtA[i:], m.Vhead)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Vhead)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ahead) > 0 {
		i -= len(m.Ahead)
		copy(dAtA[i:], m.Ahead)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ahead)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayDASH) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayDASH) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayDASH) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Audio) > 0 {
		for iNdEx := len(m.Audio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Audio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinBufferTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinBufferTime))))
		i--
		dAtA[i] = 0x15
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FormatDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FormatDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FormatDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Superscript) > 0 {
		i -= len(m.Superscript)
		copy(dAtA[i:], m.Superscript)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Superscript)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DisplayDesc) > 0 {
		i -= len(m.DisplayDesc)
		copy(dAtA[i:], m.DisplayDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisplayDesc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x12
	}
	if m.Quality != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DashSegmentBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DashSegmentBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DashSegmentBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IndexRange) > 0 {
		i -= len(m.IndexRange)
		copy(dAtA[i:], m.IndexRange)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IndexRange)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Initialization) > 0 {
		i -= len(m.Initialization)
		copy(dAtA[i:], m.Initialization)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Initialization)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DashItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DashItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DashItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x72
	}
	if m.Codecid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Codecid))
		i--
		dAtA[i] = 0x68
	}
	if m.SegmentBase != nil {
		{
			size, err := m.SegmentBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Codecs) > 0 {
		i -= len(m.Codecs)
		copy(dAtA[i:], m.Codecs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Codecs)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Bandwidth != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BackupUrl) > 0 {
		for iNdEx := len(m.BackupUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BackupUrl[iNdEx])
			copy(dAtA[i:], m.BackupUrl[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.BackupUrl[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BaseUrl) > 0 {
		i -= len(m.BaseUrl)
		copy(dAtA[i:], m.BaseUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BaseUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BKArcDetailsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BKArcDetailsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BKArcDetailsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BKArcDetailsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BKArcDetailsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BKArcDetailsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BKArchive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BKArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BKArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rights != nil {
		{
			size, err := m.Rights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Copyright != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Copyright))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DisplayedOid) > 0 {
		i -= len(m.DisplayedOid)
		copy(dAtA[i:], m.DisplayedOid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisplayedOid)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Publish != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Publish))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Rname) > 0 {
		i -= len(m.Rname)
		copy(dAtA[i:], m.Rname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rname)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BKArcRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BKArcRights) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BKArcRights) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoReprint != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoReprint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BKArcPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BKArcPart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BKArcPart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SubId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SubId))
		i--
		dAtA[i] = 0x10
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DetailItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetailItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetailItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UgcSeasonInfo != nil {
		{
			size, err := m.UgcSeasonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.DeviceType != nil {
		{
			size, err := m.DeviceType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.HistoryTag) > 0 {
		i -= len(m.HistoryTag)
		copy(dAtA[i:], m.HistoryTag)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HistoryTag)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LastPlayTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LastPlayTime))
		i--
		dAtA[i] = 0x60
	}
	if m.AssociatedItem != nil {
		{
			size, err := m.AssociatedItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PlayerInfo) > 0 {
		for k := range m.PlayerInfo {
			v := m.PlayerInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Playable != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Playable))
		i--
		dAtA[i] = 0x40
	}
	if m.Progress != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x38
	}
	if m.LastPart != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LastPart))
		i--
		dAtA[i] = 0x30
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Parts) > 0 {
		for iNdEx := len(m.Parts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Author) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Author) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Author) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FollowRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FollowRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BKStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BKStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BKStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasFav {
		i--
		if m.HasFav {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.HasCoin {
		i--
		if m.HasCoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.HasLike {
		i--
		if m.HasLike {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.View != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x30
	}
	if m.Share != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Share))
		i--
		dAtA[i] = 0x28
	}
	if m.Reply != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x20
	}
	if m.Favourite != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Favourite))
		i--
		dAtA[i] = 0x18
	}
	if m.Coin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x10
	}
	if m.Like != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SortOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SortOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SortOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SortField != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SortField))
		i--
		dAtA[i] = 0x10
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaylistReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaylistReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaylistReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SortOpt != nil {
		{
			size, err := m.SortOpt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ExtraId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExtraId))
		i--
		dAtA[i] = 0x30
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PageOpt != nil {
		{
			size, err := m.PageOpt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Anchor != nil {
		{
			size, err := m.Anchor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PageOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastItem != nil {
		{
			size, err := m.LastItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Direction != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x10
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaylistResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaylistResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaylistResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastProgress != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LastProgress))
		i--
		dAtA[i] = 0x30
	}
	if m.LastPlay != nil {
		{
			size, err := m.LastPlay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ReachEnd {
		i--
		if m.ReachEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ReachStart {
		i--
		if m.ReachStart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaylistAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaylistAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaylistAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pos != nil {
		{
			size := m.Pos.Size()
			i -= size
			if _, err := m.Pos.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlaylistAddReq_After) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaylistAddReq_After) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.After != nil {
		{
			size, err := m.After.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PlaylistAddReq_Head) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaylistAddReq_Head) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Head {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *PlaylistAddReq_Tail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaylistAddReq_Tail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Tail {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *PlaylistDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaylistDelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaylistDelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Truncate {
		i--
		if m.Truncate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayHistoryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LocalTodayZero != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LocalTodayZero))
		i--
		dAtA[i] = 0x10
	}
	if m.PageOpt != nil {
		{
			size, err := m.PageOpt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayHistoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayHistoryResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayHistoryResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ReachEnd {
		i--
		if m.ReachEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayHistoryAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayHistoryAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayHistoryAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayStyle != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayStyle))
		i--
		dAtA[i] = 0x20
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Progress != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x10
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayHistoryDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayHistoryDelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayHistoryDelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Truncate {
		i--
		if m.Truncate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TripleLikeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TripleLikeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripleLikeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TripleLikeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TripleLikeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripleLikeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FavOk {
		i--
		if m.FavOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CoinOk {
		i--
		if m.CoinOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ThumbOk {
		i--
		if m.ThumbOk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThumbUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThumbUpReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThumbUpReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThumbUpResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThumbUpResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThumbUpResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ThumbUp {
		i--
		if m.ThumbUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x10
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinAddResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinAddResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinAddResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayActionReportReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayActionReportReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayActionReportReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FromSpmid) > 0 {
		i -= len(m.FromSpmid)
		copy(dAtA[i:], m.FromSpmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FromSpmid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RcmdPlaylistReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RcmdPlaylistReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RcmdPlaylistReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Annotations) > 0 {
		for k := range m.Annotations {
			v := m.Annotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.NeedTopCards {
		i--
		if m.NeedTopCards {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NeedHistory {
		i--
		if m.NeedHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RcmdOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RcmdOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RcmdOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FromTrackid) > 0 {
		i -= len(m.FromTrackid)
		copy(dAtA[i:], m.FromTrackid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FromTrackid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.RcmdFrom != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RcmdFrom))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RcmdPlaylistResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RcmdPlaylistResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RcmdPlaylistResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NextPage != nil {
		{
			size, err := m.NextPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TopCards) > 0 {
		for iNdEx := len(m.TopCards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopCards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HistoryLen != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HistoryLen))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TitleIcon) > 0 {
		i -= len(m.TitleIcon)
		copy(dAtA[i:], m.TitleIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleIcon)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Pos != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pos))
		i--
		dAtA[i] = 0x40
	}
	if m.Card != nil {
		{
			size := m.Card.Size()
			i -= size
			if _, err := m.Card.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CardType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayStyle != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayStyle))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TopCard_ListenHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopCard_ListenHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListenHistory != nil {
		{
			size, err := m.ListenHistory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TopCard_FavFolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopCard_FavFolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FavFolder != nil {
		{
			size, err := m.FavFolder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TopCard_UpRecall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopCard_UpRecall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpRecall != nil {
		{
			size, err := m.UpRecall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *TopCard_PickToday) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopCard_PickToday) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PickToday != nil {
		{
			size, err := m.PickToday.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *TpcdHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TpcdHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TpcdHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TpcdFavFolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TpcdFavFolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TpcdFavFolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x28
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TpcdUpRecall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TpcdUpRecall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TpcdUpRecall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MedialistBizId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MedialistBizId))
		i--
		dAtA[i] = 0x28
	}
	if m.MedialistType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MedialistType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.UpMid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpMid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TpcdPickToday) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TpcdPickToday) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TpcdPickToday) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PickCardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PickCardId))
		i--
		dAtA[i] = 0x28
	}
	if m.PickId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PickId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderAuthor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavFolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FavState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FavState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.StatReplyCnt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatReplyCnt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.StatPlayCnt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatPlayCnt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.StatLikeCnt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatLikeCnt))
		i--
		dAtA[i] = 0x78
	}
	if m.StatShareCnt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatShareCnt))
		i--
		dAtA[i] = 0x70
	}
	if m.StatFavCnt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatFavCnt))
		i--
		dAtA[i] = 0x68
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x60
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if m.Favored != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Favored))
		i--
		dAtA[i] = 0x50
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x48
	}
	if m.Attr != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attr))
		i--
		dAtA[i] = 0x40
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FolderTypes) > 0 {
		dAtA50 := make([]byte, len(m.FolderTypes)*10)
		var j49 int
		for _, num1 := range m.FolderTypes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA50[j49] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j49++
			}
			dAtA50[j49] = uint8(num)
			j49++
		}
		i -= j49
		copy(dAtA[i:], dAtA50[:j49])
		i = encodeVarintApi(dAtA, i, uint64(j49))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FavItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Et != nil {
		{
			size, err := m.Et.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x28
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ItemType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavItemDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Parts != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Parts))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if m.Stat != nil {
		{
			size, err := m.Stat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavItemAuthor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavItemStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reply != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NeedFolderInfo {
		i--
		if m.NeedFolderInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x28
	}
	if m.LastItem != nil {
		{
			size, err := m.LastItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FavMid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FavMid))
		i--
		dAtA[i] = 0x18
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderDetailResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderDetailResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderDetailResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderInfo != nil {
		{
			size, err := m.FolderInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ReachEnd {
		i--
		if m.ReachEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderCreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderCreateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderCreateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x20
	}
	if m.Public != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Public))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderCreateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderCreateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderCreateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderDeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderDeleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderDeleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderDeleteResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderDeleteResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderDeleteResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavItemAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemAddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemAddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size := m.Item.Size()
			i -= size
			if _, err := m.Item.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavItemAddReq_Play) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemAddReq_Play) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Play != nil {
		{
			size, err := m.Play.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FavItemAddReq_Fav) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemAddReq_Fav) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fav != nil {
		{
			size, err := m.Fav.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *FavItemAddResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemAddResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemAddResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavItemDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemDelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemDelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size := m.Item.Size()
			i -= size
			if _, err := m.Item.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavItemDelReq_Play) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemDelReq_Play) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Play != nil {
		{
			size, err := m.Play.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FavItemDelReq_Fav) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemDelReq_Fav) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fav != nil {
		{
			size, err := m.Fav.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *FavItemDelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemDelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemDelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavItemBatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemBatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemBatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size := m.Item.Size()
			i -= size
			if _, err := m.Item.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FavItemBatchReq_Play) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemBatchReq_Play) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Play != nil {
		{
			size, err := m.Play.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FavItemBatchReq_Fav) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemBatchReq_Fav) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Fav != nil {
		{
			size, err := m.Fav.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FavItemBatchResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavItemBatchResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavItemBatchResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavoredInAnyFoldersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavoredInAnyFoldersReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavoredInAnyFoldersReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FolderTypes) > 0 {
		dAtA65 := make([]byte, len(m.FolderTypes)*10)
		var j64 int
		for _, num1 := range m.FolderTypes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA65[j64] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j64++
			}
			dAtA65[j64] = uint8(num)
			j64++
		}
		i -= j64
		copy(dAtA[i:], dAtA65[:j64])
		i = encodeVarintApi(dAtA, i, uint64(j64))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FavFolderMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavFolderMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavFolderMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FolderType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FolderType))
		i--
		dAtA[i] = 0x10
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavoredInAnyFoldersResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavoredInAnyFoldersResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavoredInAnyFoldersResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Folders) > 0 {
		for iNdEx := len(m.Folders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Folders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PickFeedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PickFeedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PickFeedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PickFeedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PickFeedResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PickFeedResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cards) > 0 {
		for iNdEx := len(m.Cards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PickCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PickCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PickCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CardName) > 0 {
		i -= len(m.CardName)
		copy(dAtA[i:], m.CardName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x10
	}
	if m.PickId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PickId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Module != nil {
		{
			size := m.Module.Size()
			i -= size
			if _, err := m.Module.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ModuleType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardModule_ModuleHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardModule_ModuleHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleHeader != nil {
		{
			size, err := m.ModuleHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CardModule_ModuleArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardModule_ModuleArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleArchive != nil {
		{
			size, err := m.ModuleArchive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CardModule_ModuleCbtn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardModule_ModuleCbtn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ModuleCbtn != nil {
		{
			size, err := m.ModuleCbtn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PkcmHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkcmHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PkcmHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BtnUri) > 0 {
		i -= len(m.BtnUri)
		copy(dAtA[i:], m.BtnUri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BtnUri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BtnText) > 0 {
		i -= len(m.BtnText)
		copy(dAtA[i:], m.BtnText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BtnText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BtnIcon) > 0 {
		i -= len(m.BtnIcon)
		copy(dAtA[i:], m.BtnIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BtnIcon)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PkcmArchive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkcmArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PkcmArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PickReason) > 0 {
		i -= len(m.PickReason)
		copy(dAtA[i:], m.PickReason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PickReason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Arc != nil {
		{
			size, err := m.Arc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PickArchive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PickArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PickArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x52
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x48
	}
	if m.StatReply != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatReply))
		i--
		dAtA[i] = 0x40
	}
	if m.StatView != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatView))
		i--
		dAtA[i] = 0x38
	}
	if m.Parts != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Parts))
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if m.Owner != nil {
		{
			size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PickArchiveAuthor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PickArchiveAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PickArchiveAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PkcmCenterButton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkcmCenterButton) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PkcmCenterButton) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IconTail) > 0 {
		i -= len(m.IconTail)
		copy(dAtA[i:], m.IconTail)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconTail)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IconHead) > 0 {
		i -= len(m.IconHead)
		copy(dAtA[i:], m.IconHead)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconHead)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PickCardDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PickCardDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PickCardDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PickId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PickId))
		i--
		dAtA[i] = 0x10
	}
	if m.CardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PickCardDetailResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PickCardDetailResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PickCardDetailResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PickId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PickId))
		i--
		dAtA[i] = 0x10
	}
	if m.CardId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EventType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MedialistReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedialistReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MedialistReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BizId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BizId))
		i--
		dAtA[i] = 0x10
	}
	if m.ListType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ListType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MedialistResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedialistResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MedialistResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpInfo != nil {
		{
			size, err := m.UpInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MedialistItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedialistItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MedialistItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatReply != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatReply))
		i--
		dAtA[i] = 0x58
	}
	if m.StatView != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatView))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x4a
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UpName) > 0 {
		i -= len(m.UpName)
		copy(dAtA[i:], m.UpName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpMid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpMid))
		i--
		dAtA[i] = 0x30
	}
	if m.Parts != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Parts))
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MedialistUpInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MedialistUpInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MedialistUpInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Fans != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fans))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemType != 0 {
		n += 1 + sovApi(uint64(m.ItemType))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if len(m.SubId) > 0 {
		l = 0
		for _, e := range m.SubId {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Et != nil {
		l = m.Et.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventTracking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Batch)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TrackId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EntityType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TrackJson)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayURLReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayURLResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Playable != 0 {
		n += 1 + sovApi(uint64(m.Playable))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.PlayerInfo) > 0 {
		for k, v := range m.PlayerInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.QnType != 0 {
		n += 1 + sovApi(uint64(m.QnType))
	}
	if m.Info != nil {
		n += m.Info.Size()
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if len(m.Formats) > 0 {
		for _, e := range m.Formats {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.VideoCodecid != 0 {
		n += 1 + sovApi(uint64(m.VideoCodecid))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovApi(uint64(m.ExpireTime))
	}
	if m.Volume != nil {
		l = m.Volume.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayInfo_PlayUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayUrl != nil {
		l = m.PlayUrl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *PlayInfo_PlayDash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayDash != nil {
		l = m.PlayDash.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *PlayURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Durl) > 0 {
		for _, e := range m.Durl {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	l = len(m.Ahead)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Vhead)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.BackupUrl) > 0 {
		for _, s := range m.BackupUrl {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayDASH) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.MinBufferTime != 0 {
		n += 5
	}
	if len(m.Audio) > 0 {
		for _, e := range m.Audio {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FormatDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quality != 0 {
		n += 1 + sovApi(uint64(m.Quality))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DisplayDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Superscript)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DashSegmentBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Initialization)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IndexRange)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DashItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.BackupUrl) > 0 {
		for _, s := range m.BackupUrl {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Bandwidth != 0 {
		n += 1 + sovApi(uint64(m.Bandwidth))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Codecs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SegmentBase != nil {
		l = m.SegmentBase.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Codecid != 0 {
		n += 1 + sovApi(uint64(m.Codecid))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BKArcDetailsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BKArcDetailsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BKArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Publish != 0 {
		n += 1 + sovApi(uint64(m.Publish))
	}
	l = len(m.DisplayedOid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Copyright != 0 {
		n += 1 + sovApi(uint64(m.Copyright))
	}
	if m.Rights != nil {
		l = m.Rights.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BKArcRights) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoReprint != 0 {
		n += 1 + sovApi(uint64(m.NoReprint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BKArcPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.SubId != 0 {
		n += 1 + sovApi(uint64(m.SubId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DetailItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Parts) > 0 {
		for _, e := range m.Parts {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LastPart != 0 {
		n += 1 + sovApi(uint64(m.LastPart))
	}
	if m.Progress != 0 {
		n += 1 + sovApi(uint64(m.Progress))
	}
	if m.Playable != 0 {
		n += 1 + sovApi(uint64(m.Playable))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.PlayerInfo) > 0 {
		for k, v := range m.PlayerInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.AssociatedItem != nil {
		l = m.AssociatedItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LastPlayTime != 0 {
		n += 1 + sovApi(uint64(m.LastPlayTime))
	}
	l = len(m.HistoryTag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeviceType != nil {
		l = m.DeviceType.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UgcSeasonInfo != nil {
		l = m.UgcSeasonInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Author) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BKStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Like != 0 {
		n += 1 + sovApi(uint64(m.Like))
	}
	if m.Coin != 0 {
		n += 1 + sovApi(uint64(m.Coin))
	}
	if m.Favourite != 0 {
		n += 1 + sovApi(uint64(m.Favourite))
	}
	if m.Reply != 0 {
		n += 1 + sovApi(uint64(m.Reply))
	}
	if m.Share != 0 {
		n += 1 + sovApi(uint64(m.Share))
	}
	if m.View != 0 {
		n += 1 + sovApi(uint64(m.View))
	}
	if m.HasLike {
		n += 2
	}
	if m.HasCoin {
		n += 2
	}
	if m.HasFav {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SortOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	if m.SortField != 0 {
		n += 1 + sovApi(uint64(m.SortField))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlaylistReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Anchor != nil {
		l = m.Anchor.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageOpt != nil {
		l = m.PageOpt.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ExtraId != 0 {
		n += 1 + sovApi(uint64(m.ExtraId))
	}
	if m.SortOpt != nil {
		l = m.SortOpt.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.Direction != 0 {
		n += 1 + sovApi(uint64(m.Direction))
	}
	if m.LastItem != nil {
		l = m.LastItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlaylistResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.ReachStart {
		n += 2
	}
	if m.ReachEnd {
		n += 2
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.LastPlay != nil {
		l = m.LastPlay.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LastProgress != 0 {
		n += 1 + sovApi(uint64(m.LastProgress))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlaylistAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Pos != nil {
		n += m.Pos.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlaylistAddReq_After) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.After != nil {
		l = m.After.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *PlaylistAddReq_Head) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *PlaylistAddReq_Tail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *PlaylistDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Truncate {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageOpt != nil {
		l = m.PageOpt.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LocalTodayZero != 0 {
		n += 1 + sovApi(uint64(m.LocalTodayZero))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayHistoryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.ReachEnd {
		n += 2
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayHistoryAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Progress != 0 {
		n += 1 + sovApi(uint64(m.Progress))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.PlayStyle != 0 {
		n += 1 + sovApi(uint64(m.PlayStyle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayHistoryDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Truncate {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TripleLikeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TripleLikeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ThumbOk {
		n += 2
	}
	if m.CoinOk {
		n += 2
	}
	if m.FavOk {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThumbUpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovApi(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThumbUpResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.ThumbUp {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinAddResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayActionReportReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FromSpmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RcmdPlaylistReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.NeedHistory {
		n += 2
	}
	if m.NeedTopCards {
		n += 2
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RcmdOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RcmdFrom != 0 {
		n += 1 + sovApi(uint64(m.RcmdFrom))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FromTrackid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RcmdPlaylistResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HistoryLen != 0 {
		n += 1 + sovApi(uint64(m.HistoryLen))
	}
	if len(m.TopCards) > 0 {
		for _, e := range m.TopCards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.NextPage != nil {
		l = m.NextPage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayStyle != 0 {
		n += 1 + sovApi(uint64(m.PlayStyle))
	}
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	if m.Card != nil {
		n += m.Card.Size()
	}
	if m.Pos != 0 {
		n += 1 + sovApi(uint64(m.Pos))
	}
	l = len(m.TitleIcon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopCard_ListenHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListenHistory != nil {
		l = m.ListenHistory.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopCard_FavFolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FavFolder != nil {
		l = m.FavFolder.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopCard_UpRecall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpRecall != nil {
		l = m.UpRecall.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TopCard_PickToday) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PickToday != nil {
		l = m.PickToday.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *TpcdHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TpcdFavFolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TpcdUpRecall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpMid != 0 {
		n += 1 + sovApi(uint64(m.UpMid))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MedialistType != 0 {
		n += 1 + sovApi(uint64(m.MedialistType))
	}
	if m.MedialistBizId != 0 {
		n += 1 + sovApi(uint64(m.MedialistBizId))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TpcdPickToday) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PickId != 0 {
		n += 1 + sovApi(uint64(m.PickId))
	}
	if m.PickCardId != 0 {
		n += 1 + sovApi(uint64(m.PickCardId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.Attr != 0 {
		n += 1 + sovApi(uint64(m.Attr))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Favored != 0 {
		n += 1 + sovApi(uint64(m.Favored))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.StatFavCnt != 0 {
		n += 1 + sovApi(uint64(m.StatFavCnt))
	}
	if m.StatShareCnt != 0 {
		n += 1 + sovApi(uint64(m.StatShareCnt))
	}
	if m.StatLikeCnt != 0 {
		n += 1 + sovApi(uint64(m.StatLikeCnt))
	}
	if m.StatPlayCnt != 0 {
		n += 2 + sovApi(uint64(m.StatPlayCnt))
	}
	if m.StatReplyCnt != 0 {
		n += 2 + sovApi(uint64(m.StatReplyCnt))
	}
	if m.FavState != 0 {
		n += 2 + sovApi(uint64(m.FavState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FolderTypes) > 0 {
		l = 0
		for _, e := range m.FolderTypes {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemType != 0 {
		n += 1 + sovApi(uint64(m.ItemType))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Et != nil {
		l = m.Et.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Parts != 0 {
		n += 1 + sovApi(uint64(m.Parts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovApi(uint64(m.View))
	}
	if m.Reply != 0 {
		n += 1 + sovApi(uint64(m.Reply))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.FavMid != 0 {
		n += 1 + sovApi(uint64(m.FavMid))
	}
	if m.LastItem != nil {
		l = m.LastItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.NeedFolderInfo {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderDetailResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.ReachEnd {
		n += 2
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.FolderInfo != nil {
		l = m.FolderInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderCreateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Public != 0 {
		n += 1 + sovApi(uint64(m.Public))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderCreateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderDeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderDeleteResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemAddReq_Play) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Play != nil {
		l = m.Play.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FavItemAddReq_Fav) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fav != nil {
		l = m.Fav.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FavItemAddResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemDelReq_Play) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Play != nil {
		l = m.Play.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FavItemDelReq_Fav) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fav != nil {
		l = m.Fav.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FavItemDelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.Action != 0 {
		n += 1 + sovApi(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemBatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavItemBatchReq_Play) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Play != nil {
		l = m.Play.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FavItemBatchReq_Fav) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fav != nil {
		l = m.Fav.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FavItemBatchResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavoredInAnyFoldersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FolderTypes) > 0 {
		l = 0
		for _, e := range m.FolderTypes {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavFolderMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.FolderType != 0 {
		n += 1 + sovApi(uint64(m.FolderType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavoredInAnyFoldersResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Folders) > 0 {
		for _, e := range m.Folders {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PickFeedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PickFeedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PickCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PickId != 0 {
		n += 1 + sovApi(uint64(m.PickId))
	}
	if m.CardId != 0 {
		n += 1 + sovApi(uint64(m.CardId))
	}
	l = len(m.CardName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleType != 0 {
		n += 1 + sovApi(uint64(m.ModuleType))
	}
	if m.Module != nil {
		n += m.Module.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardModule_ModuleHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleHeader != nil {
		l = m.ModuleHeader.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *CardModule_ModuleArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleArchive != nil {
		l = m.ModuleArchive.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *CardModule_ModuleCbtn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleCbtn != nil {
		l = m.ModuleCbtn.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *PkcmHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BtnIcon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BtnText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BtnUri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PkcmArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Arc != nil {
		l = m.Arc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PickReason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PickArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.Parts != 0 {
		n += 1 + sovApi(uint64(m.Parts))
	}
	if m.StatView != 0 {
		n += 1 + sovApi(uint64(m.StatView))
	}
	if m.StatReply != 0 {
		n += 1 + sovApi(uint64(m.StatReply))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PickArchiveAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PkcmCenterButton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IconHead)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconTail)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PickCardDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != 0 {
		n += 1 + sovApi(uint64(m.CardId))
	}
	if m.PickId != 0 {
		n += 1 + sovApi(uint64(m.PickId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PickCardDetailResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardId != 0 {
		n += 1 + sovApi(uint64(m.CardId))
	}
	if m.PickId != 0 {
		n += 1 + sovApi(uint64(m.PickId))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovApi(uint64(m.EventType))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MedialistReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListType != 0 {
		n += 1 + sovApi(uint64(m.ListType))
	}
	if m.BizId != 0 {
		n += 1 + sovApi(uint64(m.BizId))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MedialistResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.UpInfo != nil {
		l = m.UpInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MedialistItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.Parts != 0 {
		n += 1 + sovApi(uint64(m.Parts))
	}
	if m.UpMid != 0 {
		n += 1 + sovApi(uint64(m.UpMid))
	}
	l = len(m.UpName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StatView != 0 {
		n += 1 + sovApi(uint64(m.StatView))
	}
	if m.StatReply != 0 {
		n += 1 + sovApi(uint64(m.StatReply))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MedialistUpInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fans != 0 {
		n += 1 + sovApi(uint64(m.Fans))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			m.ItemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubId = append(m.SubId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SubId) == 0 {
					m.SubId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubId = append(m.SubId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubId", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Et", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Et == nil {
				m.Et = &EventTracking{}
			}
			if err := m.Et.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTracking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTracking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTracking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayURLReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayURLReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayURLReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayURLResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayURLResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayURLResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playable", wireType)
			}
			m.Playable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Playable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInfo == nil {
				m.PlayerInfo = make(map[int64]*PlayInfo)
			}
			var mapkey int64
			var mapvalue *PlayInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PlayInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PlayerInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QnType", wireType)
			}
			m.QnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QnType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayURL{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &PlayInfo_PlayUrl{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayDash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayDASH{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &PlayInfo_PlayDash{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Formats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Formats = append(m.Formats, &FormatDescription{})
			if err := m.Formats[len(m.Formats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCodecid", wireType)
			}
			m.VideoCodecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoCodecid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Volume == nil {
				m.Volume = &v2.VolumeInfo{}
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Durl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Durl = append(m.Durl, &ResponseUrl{})
			if err := m.Durl[len(m.Durl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ahead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ahead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vhead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vhead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupUrl = append(m.BackupUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayDASH) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayDASH: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayDASH: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBufferTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinBufferTime = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audio = append(m.Audio, &DashItem{})
			if err := m.Audio[len(m.Audio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FormatDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FormatDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FormatDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Superscript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Superscript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashSegmentBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashSegmentBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashSegmentBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initialization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupUrl = append(m.BackupUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codecs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SegmentBase == nil {
				m.SegmentBase = &DashSegmentBase{}
			}
			if err := m.SegmentBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecid", wireType)
			}
			m.Codecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codecid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BKArcDetailsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BKArcDetailsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BKArcDetailsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PlayItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BKArcDetailsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BKArcDetailsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BKArcDetailsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DetailItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BKArchive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BKArchive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BKArchive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publish", wireType)
			}
			m.Publish = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Publish |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayedOid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayedOid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copyright", wireType)
			}
			m.Copyright = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Copyright |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rights == nil {
				m.Rights = &BKArcRights{}
			}
			if err := m.Rights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BKArcRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BKArcRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BKArcRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoReprint", wireType)
			}
			m.NoReprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoReprint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BKArcPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BKArcPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BKArcPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubId", wireType)
			}
			m.SubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetailItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &BKArchive{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parts = append(m.Parts, &BKArcPart{})
			if err := m.Parts[len(m.Parts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Author{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &BKStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPart", wireType)
			}
			m.LastPart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playable", wireType)
			}
			m.Playable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Playable |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInfo == nil {
				m.PlayerInfo = make(map[int64]*PlayInfo)
			}
			var mapkey int64
			var mapvalue *PlayInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PlayInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PlayerInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssociatedItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssociatedItem == nil {
				m.AssociatedItem = &PlayItem{}
			}
			if err := m.AssociatedItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPlayTime", wireType)
			}
			m.LastPlayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPlayTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceType == nil {
				m.DeviceType = &history.DeviceType{}
			}
			if err := m.DeviceType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UgcSeasonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UgcSeasonInfo == nil {
				m.UgcSeasonInfo = &FavFolder{}
			}
			if err := m.UgcSeasonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Author) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Author: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Author: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &FollowRelation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= FollowRelation_RelationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BKStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BKStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BKStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favourite", wireType)
			}
			m.Favourite = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Favourite |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLike", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLike = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasCoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasCoin = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasFav", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasFav = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SortOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SortOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SortOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= ListOrder(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortField", wireType)
			}
			m.SortField = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortField |= ListSortField(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaylistReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaylistReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaylistReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= PlaylistSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anchor == nil {
				m.Anchor = &PlayItem{}
			}
			if err := m.Anchor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageOpt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageOpt == nil {
				m.PageOpt = &PageOption{}
			}
			if err := m.PageOpt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraId", wireType)
			}
			m.ExtraId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOpt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SortOpt == nil {
				m.SortOpt = &SortOption{}
			}
			if err := m.SortOpt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= PageOption_Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastItem == nil {
				m.LastItem = &PlayItem{}
			}
			if err := m.LastItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaylistResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaylistResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaylistResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachStart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReachStart = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReachEnd = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DetailItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPlay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPlay == nil {
				m.LastPlay = &PlayItem{}
			}
			if err := m.LastPlay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProgress", wireType)
			}
			m.LastProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastProgress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaylistAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaylistAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaylistAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PlayItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Pos = &PlaylistAddReq_After{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Pos = &PlaylistAddReq_Head{b}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Pos = &PlaylistAddReq_Tail{b}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaylistDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaylistDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaylistDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PlayItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Truncate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Truncate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageOpt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageOpt == nil {
				m.PageOpt = &PageOption{}
			}
			if err := m.PageOpt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTodayZero", wireType)
			}
			m.LocalTodayZero = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalTodayZero |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayHistoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayHistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayHistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReachEnd = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DetailItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayHistoryAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayHistoryAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayHistoryAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayStyle", wireType)
			}
			m.PlayStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayHistoryDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayHistoryDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayHistoryDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PlayItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Truncate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Truncate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TripleLikeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TripleLikeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TripleLikeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TripleLikeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TripleLikeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TripleLikeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbOk = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinOk = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavOk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FavOk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThumbUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThumbUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThumbUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= ThumbUpReq_ThumbType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThumbUpResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThumbUpResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThumbUpResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThumbUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinAddResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinAddResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinAddResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayActionReportReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayActionReportReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayActionReportReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RcmdPlaylistReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RcmdPlaylistReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RcmdPlaylistReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= RcmdPlaylistReq_RcmdFrom(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedHistory = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedTopCards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedTopCards = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &pagination.Pagination{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RcmdOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RcmdOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RcmdOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdFrom", wireType)
			}
			m.RcmdFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcmdFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTrackid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTrackid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RcmdPlaylistResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RcmdPlaylistResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RcmdPlaylistResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DetailItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryLen", wireType)
			}
			m.HistoryLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryLen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopCards = append(m.TopCards, &TopCard{})
			if err := m.TopCards[len(m.TopCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPage == nil {
				m.NextPage = &pagination.PaginationReply{}
			}
			if err := m.NextPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayStyle", wireType)
			}
			m.PlayStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayStyle |= TopCard_PlayStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= TopCardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListenHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TpcdHistory{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &TopCard_ListenHistory{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavFolder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TpcdFavFolder{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &TopCard_FavFolder{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpRecall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TpcdUpRecall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &TopCard_UpRecall{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickToday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TpcdPickToday{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &TopCard_PickToday{v}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TpcdHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TpcdHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TpcdHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &DetailItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TpcdFavFolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TpcdFavFolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TpcdFavFolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &DetailItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TpcdUpRecall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TpcdUpRecall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TpcdUpRecall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedialistType", wireType)
			}
			m.MedialistType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedialistType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedialistBizId", wireType)
			}
			m.MedialistBizId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedialistBizId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &DetailItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TpcdPickToday) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TpcdPickToday: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TpcdPickToday: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &DetailItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickId", wireType)
			}
			m.PickId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PickId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickCardId", wireType)
			}
			m.PickCardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PickCardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderAuthor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderAuthor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderAuthor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &FavFolderAuthor{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Favored", wireType)
			}
			m.Favored = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Favored |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatFavCnt", wireType)
			}
			m.StatFavCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatFavCnt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatShareCnt", wireType)
			}
			m.StatShareCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatShareCnt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatLikeCnt", wireType)
			}
			m.StatLikeCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatLikeCnt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPlayCnt", wireType)
			}
			m.StatPlayCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPlayCnt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatReplyCnt", wireType)
			}
			m.StatReplyCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatReplyCnt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavState", wireType)
			}
			m.FavState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FavState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FolderTypes = append(m.FolderTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FolderTypes) == 0 {
					m.FolderTypes = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FolderTypes = append(m.FolderTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderTypes", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FavFolder{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			m.ItemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Et", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Et == nil {
				m.Et = &EventTracking{}
			}
			if err := m.Et.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &FavItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &FavItemAuthor{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &FavItemStat{}
			}
			if err := m.Stat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			m.Parts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemAuthor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemAuthor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemAuthor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavMid", wireType)
			}
			m.FavMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FavMid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastItem == nil {
				m.LastItem = &FavItem{}
			}
			if err := m.LastItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedFolderInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedFolderInfo = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderDetailResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderDetailResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderDetailResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReachEnd = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FavItemDetail{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FolderInfo == nil {
				m.FolderInfo = &FavFolder{}
			}
			if err := m.FolderInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderCreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderCreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderCreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			m.Public = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Public |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderCreateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderCreateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderCreateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderDeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderDeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderDeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderDeleteResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderDeleteResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderDeleteResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Play", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &FavItemAddReq_Play{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FavItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &FavItemAddReq_Fav{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemAddResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemAddResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemAddResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Play", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &FavItemDelReq_Play{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FavItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &FavItemDelReq_Fav{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemDelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemDelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemDelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= FavFolderAction_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemBatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemBatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemBatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &FavFolderAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Play", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PlayItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &FavItemBatchReq_Play{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FavItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &FavItemBatchReq_Fav{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavItemBatchResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavItemBatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavItemBatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavoredInAnyFoldersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavoredInAnyFoldersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavoredInAnyFoldersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FolderTypes = append(m.FolderTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FolderTypes) == 0 {
					m.FolderTypes = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FolderTypes = append(m.FolderTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderTypes", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavFolderMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavFolderMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavFolderMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderType", wireType)
			}
			m.FolderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavoredInAnyFoldersResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavoredInAnyFoldersResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavoredInAnyFoldersResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Folders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Folders = append(m.Folders, &FavFolderMeta{})
			if err := m.Folders[len(m.Folders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PickFeedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PickFeedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PickFeedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PickFeedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PickFeedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PickFeedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &PickCard{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PickCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PickCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PickCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickId", wireType)
			}
			m.PickId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PickId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &CardModule{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleType", wireType)
			}
			m.ModuleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleType |= CardModuleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PkcmHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Module = &CardModule_ModuleHeader{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleArchive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PkcmArchive{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Module = &CardModule_ModuleArchive{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleCbtn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PkcmCenterButton{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Module = &CardModule_ModuleCbtn{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkcmHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkcmHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkcmHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtnIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtnText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtnUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkcmArchive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkcmArchive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkcmArchive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arc == nil {
				m.Arc = &PickArchive{}
			}
			if err := m.Arc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PickReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PickArchive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PickArchive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PickArchive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &PickArchiveAuthor{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			m.Parts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatView", wireType)
			}
			m.StatView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatView |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatReply", wireType)
			}
			m.StatReply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatReply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PickArchiveAuthor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PickArchiveAuthor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PickArchiveAuthor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkcmCenterButton) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkcmCenterButton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkcmCenterButton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconTail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconTail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PickCardDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PickCardDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PickCardDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickId", wireType)
			}
			m.PickId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PickId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PickCardDetailResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PickCardDetailResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PickCardDetailResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickId", wireType)
			}
			m.PickId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PickId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &CardModule{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= EventReq_EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedialistReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedialistReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedialistReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListType", wireType)
			}
			m.ListType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizId", wireType)
			}
			m.BizId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedialistResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedialistResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedialistResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MedialistItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpInfo == nil {
				m.UpInfo = &MedialistUpInfo{}
			}
			if err := m.UpInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedialistItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedialistItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedialistItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			m.Parts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatView", wireType)
			}
			m.StatView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatView |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatReply", wireType)
			}
			m.StatReply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatReply |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedialistUpInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedialistUpInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedialistUpInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			m.Fans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fans |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
