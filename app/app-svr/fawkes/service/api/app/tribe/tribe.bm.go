// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: go-gateway/app/app-svr/fawkes/service/api/app/tribe/tribe.proto

/*
Package tribe is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

It is generated from these files:

	go-gateway/app/app-svr/fawkes/service/api/app/tribe/tribe.proto
*/
package tribe

import (
	"context"

	bm "go-common/library/net/http/blademaster"
	"go-common/library/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathTribeAddTribeInfo = "/x/admin/fawkes/app/tribe/add"
var PathTribeGetTribeInfo = "/x/admin/fawkes/app/tribe/info"
var PathTribeListTribeInfo = "/x/admin/fawkes/app/tribe/list"
var PathTribeDeleteTribeInfo = "/x/admin/fawkes/app/tribe/delete"
var PathTribeUpdateTribeInfo = "/x/admin/fawkes/app/tribe/update"
var PathTribeAddTribeBuildPack = "/x/admin/fawkes/app/tribe/ci/add"
var PathTribeListTribeBuildPack = "/x/admin/fawkes/app/tribe/ci/list"
var PathTribeUpdateTribeBuildPackGitInfo = "/x/admin/fawkes/business/tribe/ci/git/update"
var PathTribeUpdateTribeBuildPackPkgInfo = "/x/admin/fawkes/business/tribe/ci/pkg/update"
var PathTribeGetTribeBuildPackInfo = "/x/admin/fawkes/app/tribe/ci/get"
var PathTribeCancelTribeBuildPack = "/x/admin/fawkes/app/tribe/ci/cancel"
var PathTribePushTribeBuildPackToCD = "/x/admin/fawkes/app/tribe/ci/push/to/cd"
var PathTribeListTribePack = "/x/admin/fawkes/app/tribe/cd/list"
var PathTribeEvolutionTribePack = "/x/admin/fawkes/app/tribe/cd/evolution"
var PathTribeActiveVersion = "/x/admin/fawkes/app/tribe/cd/config/version/active"
var PathTribeConfigVersionFlow = "/x/admin/fawkes/app/tribe/cd/config/version/flow/set"
var PathTribeGetVersionFlow = "/x/admin/fawkes/app/tribe/cd/config/version/flow"
var PathTribeConfigVersionUpgrade = "/x/admin/fawkes/app/tribe/cd/config/version/upgrade/set"
var PathTribeGetConfigVersionUpgrade = "/x/admin/fawkes/app/tribe/cd/config/version/upgrade"
var PathTribeConfigPackUpgradeFilter = "/x/admin/fawkes/app/tribe/cd/config/pack/upgrade/set"
var PathTribeGetConfigPackUpgradeFilter = "/x/admin/fawkes/app/tribe/cd/config/pack/upgrade"
var PathTribeGetPackRelations = "/x/admin/fawkes/app/tribe/cd/pack/relations"

// TribeBMServer is the server API for Tribe service.
type TribeBMServer interface {
	AddTribeInfo(ctx context.Context, req *AddTribeInfoReq) (resp *google_protobuf1.Empty, err error)

	GetTribeInfo(ctx context.Context, req *GetTribeInfoReq) (resp *GetTribeInfoResp, err error)

	ListTribeInfo(ctx context.Context, req *ListTribeInfoReq) (resp *ListTribeInfoResp, err error)

	DeleteTribeInfo(ctx context.Context, req *DeleteTribeInfoReq) (resp *google_protobuf1.Empty, err error)

	UpdateTribeInfo(ctx context.Context, req *UpdateTribeInfoReq) (resp *google_protobuf1.Empty, err error)

	AddTribeBuildPack(ctx context.Context, req *AddTribeBuildPackReq) (resp *google_protobuf1.Empty, err error)

	ListTribeBuildPack(ctx context.Context, req *ListTribeBuildPackReq) (resp *ListTribeBuildPackResp, err error)

	UpdateTribeBuildPackGitInfo(ctx context.Context, req *UpdateTribeBuildPackGitInfoReq) (resp *google_protobuf1.Empty, err error)

	UpdateTribeBuildPackPkgInfo(ctx context.Context, req *UpdateTribeBuildPackPkgInfoReq) (resp *UpdateTribeBuildPackPkgInfoResp, err error)

	GetTribeBuildPackInfo(ctx context.Context, req *GetTribeBuildPackInfoReq) (resp *GetTribeBuildPackInfoResp, err error)

	CancelTribeBuildPack(ctx context.Context, req *CancelTribeBuildPackReq) (resp *google_protobuf1.Empty, err error)

	PushTribeBuildPackToCD(ctx context.Context, req *PushTribeBuildPackToCDReq) (resp *google_protobuf1.Empty, err error)

	ListTribePack(ctx context.Context, req *ListTribePackReq) (resp *ListTribePackResp, err error)

	EvolutionTribePack(ctx context.Context, req *EvolutionTribeReq) (resp *google_protobuf1.Empty, err error)

	ActiveVersion(ctx context.Context, req *ActiveVersionReq) (resp *google_protobuf1.Empty, err error)

	ConfigVersionFlow(ctx context.Context, req *ConfigVersionFlowReq) (resp *google_protobuf1.Empty, err error)

	GetVersionFlow(ctx context.Context, req *GetVersionFlowReq) (resp *GetVersionFlowResp, err error)

	ConfigVersionUpgrade(ctx context.Context, req *ConfigVersionUpgradeReq) (resp *google_protobuf1.Empty, err error)

	GetConfigVersionUpgrade(ctx context.Context, req *GetConfigVersionUpgradeReq) (resp *GetConfigVersionUpgradeResp, err error)

	ConfigPackUpgradeFilter(ctx context.Context, req *ConfigPackUpgradeFilterReq) (resp *google_protobuf1.Empty, err error)

	GetConfigPackUpgradeFilter(ctx context.Context, req *GetConfigPackUpgradeFilterReq) (resp *GetConfigPackUpgradeFilterResp, err error)

	// 拉取关系表
	GetPackRelations(ctx context.Context, req *GetPackRelationsReq) (resp *GetPackRelationsResp, err error)
}

var TribeSvc TribeBMServer

func tribeAddTribeInfo(c *bm.Context) {
	p := new(AddTribeInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.AddTribeInfo(c, p)
	c.JSON(resp, err)
}

func tribeGetTribeInfo(c *bm.Context) {
	p := new(GetTribeInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.GetTribeInfo(c, p)
	c.JSON(resp, err)
}

func tribeListTribeInfo(c *bm.Context) {
	p := new(ListTribeInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.ListTribeInfo(c, p)
	c.JSON(resp, err)
}

func tribeDeleteTribeInfo(c *bm.Context) {
	p := new(DeleteTribeInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.DeleteTribeInfo(c, p)
	c.JSON(resp, err)
}

func tribeUpdateTribeInfo(c *bm.Context) {
	p := new(UpdateTribeInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.UpdateTribeInfo(c, p)
	c.JSON(resp, err)
}

func tribeAddTribeBuildPack(c *bm.Context) {
	p := new(AddTribeBuildPackReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.AddTribeBuildPack(c, p)
	c.JSON(resp, err)
}

func tribeListTribeBuildPack(c *bm.Context) {
	p := new(ListTribeBuildPackReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.ListTribeBuildPack(c, p)
	c.JSON(resp, err)
}

func tribeUpdateTribeBuildPackGitInfo(c *bm.Context) {
	p := new(UpdateTribeBuildPackGitInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.UpdateTribeBuildPackGitInfo(c, p)
	c.JSON(resp, err)
}

func tribeUpdateTribeBuildPackPkgInfo(c *bm.Context) {
	p := new(UpdateTribeBuildPackPkgInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.UpdateTribeBuildPackPkgInfo(c, p)
	c.JSON(resp, err)
}

func tribeGetTribeBuildPackInfo(c *bm.Context) {
	p := new(GetTribeBuildPackInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.GetTribeBuildPackInfo(c, p)
	c.JSON(resp, err)
}

func tribeCancelTribeBuildPack(c *bm.Context) {
	p := new(CancelTribeBuildPackReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.CancelTribeBuildPack(c, p)
	c.JSON(resp, err)
}

func tribePushTribeBuildPackToCD(c *bm.Context) {
	p := new(PushTribeBuildPackToCDReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.PushTribeBuildPackToCD(c, p)
	c.JSON(resp, err)
}

func tribeListTribePack(c *bm.Context) {
	p := new(ListTribePackReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.ListTribePack(c, p)
	c.JSON(resp, err)
}

func tribeEvolutionTribePack(c *bm.Context) {
	p := new(EvolutionTribeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.EvolutionTribePack(c, p)
	c.JSON(resp, err)
}

func tribeActiveVersion(c *bm.Context) {
	p := new(ActiveVersionReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.ActiveVersion(c, p)
	c.JSON(resp, err)
}

func tribeConfigVersionFlow(c *bm.Context) {
	p := new(ConfigVersionFlowReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.ConfigVersionFlow(c, p)
	c.JSON(resp, err)
}

func tribeGetVersionFlow(c *bm.Context) {
	p := new(GetVersionFlowReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.GetVersionFlow(c, p)
	c.JSON(resp, err)
}

func tribeConfigVersionUpgrade(c *bm.Context) {
	p := new(ConfigVersionUpgradeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.ConfigVersionUpgrade(c, p)
	c.JSON(resp, err)
}

func tribeGetConfigVersionUpgrade(c *bm.Context) {
	p := new(GetConfigVersionUpgradeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.GetConfigVersionUpgrade(c, p)
	c.JSON(resp, err)
}

func tribeConfigPackUpgradeFilter(c *bm.Context) {
	p := new(ConfigPackUpgradeFilterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.ConfigPackUpgradeFilter(c, p)
	c.JSON(resp, err)
}

func tribeGetConfigPackUpgradeFilter(c *bm.Context) {
	p := new(GetConfigPackUpgradeFilterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.GetConfigPackUpgradeFilter(c, p)
	c.JSON(resp, err)
}

func tribeGetPackRelations(c *bm.Context) {
	p := new(GetPackRelationsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TribeSvc.GetPackRelations(c, p)
	c.JSON(resp, err)
}

// RegisterTribeBMServer Register the blademaster route
func RegisterTribeBMServer(e *bm.Engine, server TribeBMServer) {
	TribeSvc = server
	e.POST("/x/admin/fawkes/app/tribe/add", tribeAddTribeInfo)
	e.GET("/x/admin/fawkes/app/tribe/info", tribeGetTribeInfo)
	e.GET("/x/admin/fawkes/app/tribe/list", tribeListTribeInfo)
	e.POST("/x/admin/fawkes/app/tribe/delete", tribeDeleteTribeInfo)
	e.POST("/x/admin/fawkes/app/tribe/update", tribeUpdateTribeInfo)
	e.POST("/x/admin/fawkes/app/tribe/ci/add", tribeAddTribeBuildPack)
	e.GET("/x/admin/fawkes/app/tribe/ci/list", tribeListTribeBuildPack)
	e.POST("/x/admin/fawkes/business/tribe/ci/git/update", tribeUpdateTribeBuildPackGitInfo)
	e.POST("/x/admin/fawkes/business/tribe/ci/pkg/update", tribeUpdateTribeBuildPackPkgInfo)
	e.GET("/x/admin/fawkes/app/tribe/ci/get", tribeGetTribeBuildPackInfo)
	e.GET("/x/admin/fawkes/app/tribe/ci/cancel", tribeCancelTribeBuildPack)
	e.POST("/x/admin/fawkes/app/tribe/ci/push/to/cd", tribePushTribeBuildPackToCD)
	e.GET("/x/admin/fawkes/app/tribe/cd/list", tribeListTribePack)
	e.POST("/x/admin/fawkes/app/tribe/cd/evolution", tribeEvolutionTribePack)
	e.POST("/x/admin/fawkes/app/tribe/cd/config/version/active", tribeActiveVersion)
	e.POST("/x/admin/fawkes/app/tribe/cd/config/version/flow/set", tribeConfigVersionFlow)
	e.GET("/x/admin/fawkes/app/tribe/cd/config/version/flow", tribeGetVersionFlow)
	e.POST("/x/admin/fawkes/app/tribe/cd/config/version/upgrade/set", tribeConfigVersionUpgrade)
	e.GET("/x/admin/fawkes/app/tribe/cd/config/version/upgrade", tribeGetConfigVersionUpgrade)
	e.POST("/x/admin/fawkes/app/tribe/cd/config/pack/upgrade/set", tribeConfigPackUpgradeFilter)
	e.GET("/x/admin/fawkes/app/tribe/cd/config/pack/upgrade", tribeGetConfigPackUpgradeFilter)
	e.GET("/x/admin/fawkes/app/tribe/cd/pack/relations", tribeGetPackRelations)
}
