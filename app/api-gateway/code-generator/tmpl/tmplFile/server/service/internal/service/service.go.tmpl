package service

import (
	"context"
	pb "git.bilibili.co/platform/{{.ProjectName}}/app/{{.ServicePath}}/service/api"
	"git.bilibili.co/platform/{{.ProjectName}}/app/{{.ServicePath}}/service/internal/rpcClient"
	"git.bilibili.co/platform/{{.ProjectName}}/app/{{.ServicePath}}/service/internal/httpClient"
	"github.com/golang/protobuf/ptypes/empty"
	"github.com/google/wire"
	bm "go-common/library/net/http/blademaster"
)

var Provider = wire.NewSet(New, wire.Bind(new(pb.{{.ServiceName}}Server), new(*Service)))

// Service service.
type Service struct {
    RpcClient  *rpcClient.Rpc
    HttpClient *bm.Client
}

// New new a service and return.
func New() (s *Service, cf func(), err error) {
	s = &Service{}
	s.RpcClient, err = rpcClient.New()
    if err != nil {
        return
    }
    s.HttpClient, err = httpClient.New()
    if err != nil {
        return
    }
	cf = s.Close
	return
}

// Ping ping the resource.
func (s *Service) Ping(_ context.Context, _ *empty.Empty) (*empty.Empty, error) {
	return &empty.Empty{}, nil
}

// Close close the resource.
func (s *Service) Close() {
}

