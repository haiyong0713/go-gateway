// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/leelei/go/src/go-main/app/account/relation/service/api/api.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	api "git.bilibili.co/bapis/bapis-go/account/service/relation"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockRelationClient is a mock of RelationClient interface.
type MockRelationClient struct {
	ctrl     *gomock.Controller
	recorder *MockRelationClientMockRecorder
}

// MockRelationClientMockRecorder is the mock recorder for MockRelationClient.
type MockRelationClientMockRecorder struct {
	mock *MockRelationClient
}

// NewMockRelationClient creates a new mock instance.
func NewMockRelationClient(ctrl *gomock.Controller) *MockRelationClient {
	mock := &MockRelationClient{ctrl: ctrl}
	mock.recorder = &MockRelationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationClient) EXPECT() *MockRelationClientMockRecorder {
	return m.recorder
}

// Relation mocks base method.
func (m *MockRelationClient) Relation(ctx context.Context, in *api.RelationReq, opts ...grpc.CallOption) (*api.FollowingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Relation", varargs...)
	ret0, _ := ret[0].(*api.FollowingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relation indicates an expected call of Relation.
func (mr *MockRelationClientMockRecorder) Relation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockRelationClient)(nil).Relation), varargs...)
}

// RelationWithAsync mocks base method.
func (m *MockRelationClient) RelationWithAsync(ctx context.Context, in *api.RelationReq, opts ...grpc.CallOption) (*api.FollowingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RelationWithAsync", varargs...)
	ret0, _ := ret[0].(*api.FollowingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationWithAsync indicates an expected call of RelationWithAsync.
func (mr *MockRelationClientMockRecorder) RelationWithAsync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationWithAsync", reflect.TypeOf((*MockRelationClient)(nil).RelationWithAsync), varargs...)
}

// Interrelation mocks base method.
func (m *MockRelationClient) Interrelation(ctx context.Context, in *api.RelationReq, opts ...grpc.CallOption) (*api.InterrelationReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Interrelation", varargs...)
	ret0, _ := ret[0].(*api.InterrelationReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Interrelation indicates an expected call of Interrelation.
func (mr *MockRelationClientMockRecorder) Interrelation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interrelation", reflect.TypeOf((*MockRelationClient)(nil).Interrelation), varargs...)
}

// Relations mocks base method.
func (m *MockRelationClient) Relations(ctx context.Context, in *api.RelationsReq, opts ...grpc.CallOption) (*api.FollowingMapReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Relations", varargs...)
	ret0, _ := ret[0].(*api.FollowingMapReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relations indicates an expected call of Relations.
func (mr *MockRelationClientMockRecorder) Relations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relations", reflect.TypeOf((*MockRelationClient)(nil).Relations), varargs...)
}

// Interrelations mocks base method.
func (m *MockRelationClient) Interrelations(ctx context.Context, in *api.RelationsReq, opts ...grpc.CallOption) (*api.InterrelationMapReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Interrelations", varargs...)
	ret0, _ := ret[0].(*api.InterrelationMapReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Interrelations indicates an expected call of Interrelations.
func (mr *MockRelationClientMockRecorder) Interrelations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interrelations", reflect.TypeOf((*MockRelationClient)(nil).Interrelations), varargs...)
}

// Stat mocks base method.
func (m *MockRelationClient) Stat(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.StatReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stat", varargs...)
	ret0, _ := ret[0].(*api.StatReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockRelationClientMockRecorder) Stat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockRelationClient)(nil).Stat), varargs...)
}

// Stats mocks base method.
func (m *MockRelationClient) Stats(ctx context.Context, in *api.MidsReq, opts ...grpc.CallOption) (*api.StatsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stats", varargs...)
	ret0, _ := ret[0].(*api.StatsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockRelationClientMockRecorder) Stats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockRelationClient)(nil).Stats), varargs...)
}

// Attentions mocks base method.
func (m *MockRelationClient) Attentions(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attentions", varargs...)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attentions indicates an expected call of Attentions.
func (mr *MockRelationClientMockRecorder) Attentions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attentions", reflect.TypeOf((*MockRelationClient)(nil).Attentions), varargs...)
}

// Followings mocks base method.
func (m *MockRelationClient) Followings(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Followings", varargs...)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Followings indicates an expected call of Followings.
func (mr *MockRelationClientMockRecorder) Followings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Followings", reflect.TypeOf((*MockRelationClient)(nil).Followings), varargs...)
}

// FollowingsSearch mocks base method.
func (m *MockRelationClient) FollowingsSearch(ctx context.Context, in *api.MidNameReq, opts ...grpc.CallOption) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowingsSearch", varargs...)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowingsSearch indicates an expected call of FollowingsSearch.
func (mr *MockRelationClientMockRecorder) FollowingsSearch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowingsSearch", reflect.TypeOf((*MockRelationClient)(nil).FollowingsSearch), varargs...)
}

// AddFollowing mocks base method.
func (m *MockRelationClient) AddFollowing(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFollowing", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFollowing indicates an expected call of AddFollowing.
func (mr *MockRelationClientMockRecorder) AddFollowing(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollowing", reflect.TypeOf((*MockRelationClient)(nil).AddFollowing), varargs...)
}

// BatchAddFollowingAsync mocks base method.
func (m *MockRelationClient) BatchAddFollowingAsync(ctx context.Context, in *api.BatchAddFollowingsReq, opts ...grpc.CallOption) (*api.BatchAddFollowingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAddFollowingAsync", varargs...)
	ret0, _ := ret[0].(*api.BatchAddFollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAddFollowingAsync indicates an expected call of BatchAddFollowingAsync.
func (mr *MockRelationClientMockRecorder) BatchAddFollowingAsync(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddFollowingAsync", reflect.TypeOf((*MockRelationClient)(nil).BatchAddFollowingAsync), varargs...)
}

// DelFollowing mocks base method.
func (m *MockRelationClient) DelFollowing(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelFollowing", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFollowing indicates an expected call of DelFollowing.
func (mr *MockRelationClientMockRecorder) DelFollowing(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFollowing", reflect.TypeOf((*MockRelationClient)(nil).DelFollowing), varargs...)
}

// Whispers mocks base method.
func (m *MockRelationClient) Whispers(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Whispers", varargs...)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Whispers indicates an expected call of Whispers.
func (mr *MockRelationClientMockRecorder) Whispers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Whispers", reflect.TypeOf((*MockRelationClient)(nil).Whispers), varargs...)
}

// AddWhisper mocks base method.
func (m *MockRelationClient) AddWhisper(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddWhisper", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWhisper indicates an expected call of AddWhisper.
func (mr *MockRelationClientMockRecorder) AddWhisper(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWhisper", reflect.TypeOf((*MockRelationClient)(nil).AddWhisper), varargs...)
}

// DelWhisper mocks base method.
func (m *MockRelationClient) DelWhisper(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelWhisper", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelWhisper indicates an expected call of DelWhisper.
func (mr *MockRelationClientMockRecorder) DelWhisper(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelWhisper", reflect.TypeOf((*MockRelationClient)(nil).DelWhisper), varargs...)
}

// Blacks mocks base method.
func (m *MockRelationClient) Blacks(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Blacks", varargs...)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blacks indicates an expected call of Blacks.
func (mr *MockRelationClientMockRecorder) Blacks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blacks", reflect.TypeOf((*MockRelationClient)(nil).Blacks), varargs...)
}

// AddBlack mocks base method.
func (m *MockRelationClient) AddBlack(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBlack", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlack indicates an expected call of AddBlack.
func (mr *MockRelationClientMockRecorder) AddBlack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlack", reflect.TypeOf((*MockRelationClient)(nil).AddBlack), varargs...)
}

// DelBlack mocks base method.
func (m *MockRelationClient) DelBlack(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelBlack", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelBlack indicates an expected call of DelBlack.
func (mr *MockRelationClientMockRecorder) DelBlack(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelBlack", reflect.TypeOf((*MockRelationClient)(nil).DelBlack), varargs...)
}

// Followers mocks base method.
func (m *MockRelationClient) Followers(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Followers", varargs...)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Followers indicates an expected call of Followers.
func (mr *MockRelationClientMockRecorder) Followers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Followers", reflect.TypeOf((*MockRelationClient)(nil).Followers), varargs...)
}

// DelFollower mocks base method.
func (m *MockRelationClient) DelFollower(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelFollower", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFollower indicates an expected call of DelFollower.
func (mr *MockRelationClientMockRecorder) DelFollower(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFollower", reflect.TypeOf((*MockRelationClient)(nil).DelFollower), varargs...)
}

// Tag mocks base method.
func (m *MockRelationClient) Tag(ctx context.Context, in *api.TagIdReq, opts ...grpc.CallOption) (*api.TagReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tag", varargs...)
	ret0, _ := ret[0].(*api.TagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag.
func (mr *MockRelationClientMockRecorder) Tag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockRelationClient)(nil).Tag), varargs...)
}

// Tags mocks base method.
func (m *MockRelationClient) Tags(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.TagsCountReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tags", varargs...)
	ret0, _ := ret[0].(*api.TagsCountReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags.
func (mr *MockRelationClientMockRecorder) Tags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockRelationClient)(nil).Tags), varargs...)
}

// UserTag mocks base method.
func (m *MockRelationClient) UserTag(ctx context.Context, in *api.RelationReq, opts ...grpc.CallOption) (*api.UserTagReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserTag", varargs...)
	ret0, _ := ret[0].(*api.UserTagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTag indicates an expected call of UserTag.
func (mr *MockRelationClientMockRecorder) UserTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTag", reflect.TypeOf((*MockRelationClient)(nil).UserTag), varargs...)
}

// CreateTag mocks base method.
func (m *MockRelationClient) CreateTag(ctx context.Context, in *api.TagReq, opts ...grpc.CallOption) (*api.CreateTagReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTag", varargs...)
	ret0, _ := ret[0].(*api.CreateTagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockRelationClientMockRecorder) CreateTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockRelationClient)(nil).CreateTag), varargs...)
}

// UpdateTag mocks base method.
func (m *MockRelationClient) UpdateTag(ctx context.Context, in *api.TagUpdateReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTag", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockRelationClientMockRecorder) UpdateTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockRelationClient)(nil).UpdateTag), varargs...)
}

// DelTag mocks base method.
func (m *MockRelationClient) DelTag(ctx context.Context, in *api.TagDelReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelTag", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelTag indicates an expected call of DelTag.
func (mr *MockRelationClientMockRecorder) DelTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelTag", reflect.TypeOf((*MockRelationClient)(nil).DelTag), varargs...)
}

// TagsAddUsers mocks base method.
func (m *MockRelationClient) TagsAddUsers(ctx context.Context, in *api.TagsMoveUsersReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagsAddUsers", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsAddUsers indicates an expected call of TagsAddUsers.
func (mr *MockRelationClientMockRecorder) TagsAddUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsAddUsers", reflect.TypeOf((*MockRelationClient)(nil).TagsAddUsers), varargs...)
}

// TagsCopyUsers mocks base method.
func (m *MockRelationClient) TagsCopyUsers(ctx context.Context, in *api.TagsMoveUsersReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagsCopyUsers", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsCopyUsers indicates an expected call of TagsCopyUsers.
func (mr *MockRelationClientMockRecorder) TagsCopyUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsCopyUsers", reflect.TypeOf((*MockRelationClient)(nil).TagsCopyUsers), varargs...)
}

// TagsMoveUsers mocks base method.
func (m *MockRelationClient) TagsMoveUsers(ctx context.Context, in *api.TagsMoveUsersReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagsMoveUsers", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsMoveUsers indicates an expected call of TagsMoveUsers.
func (mr *MockRelationClientMockRecorder) TagsMoveUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsMoveUsers", reflect.TypeOf((*MockRelationClient)(nil).TagsMoveUsers), varargs...)
}

// Prompt mocks base method.
func (m *MockRelationClient) Prompt(ctx context.Context, in *api.PromptReq, opts ...grpc.CallOption) (*api.PromptReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prompt", varargs...)
	ret0, _ := ret[0].(*api.PromptReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockRelationClientMockRecorder) Prompt(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockRelationClient)(nil).Prompt), varargs...)
}

// ClosePrompt mocks base method.
func (m *MockRelationClient) ClosePrompt(ctx context.Context, in *api.PromptReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClosePrompt", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClosePrompt indicates an expected call of ClosePrompt.
func (mr *MockRelationClientMockRecorder) ClosePrompt(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePrompt", reflect.TypeOf((*MockRelationClient)(nil).ClosePrompt), varargs...)
}

// AddSpecial mocks base method.
func (m *MockRelationClient) AddSpecial(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSpecial", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpecial indicates an expected call of AddSpecial.
func (mr *MockRelationClientMockRecorder) AddSpecial(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpecial", reflect.TypeOf((*MockRelationClient)(nil).AddSpecial), varargs...)
}

// DelSpecial mocks base method.
func (m *MockRelationClient) DelSpecial(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DelSpecial", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelSpecial indicates an expected call of DelSpecial.
func (mr *MockRelationClientMockRecorder) DelSpecial(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelSpecial", reflect.TypeOf((*MockRelationClient)(nil).DelSpecial), varargs...)
}

// Special mocks base method.
func (m *MockRelationClient) Special(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.SpecialReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Special", varargs...)
	ret0, _ := ret[0].(*api.SpecialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Special indicates an expected call of Special.
func (mr *MockRelationClientMockRecorder) Special(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Special", reflect.TypeOf((*MockRelationClient)(nil).Special), varargs...)
}

// FollowersUnread mocks base method.
func (m *MockRelationClient) FollowersUnread(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.FollowersUnreadReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowersUnread", varargs...)
	ret0, _ := ret[0].(*api.FollowersUnreadReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowersUnread indicates an expected call of FollowersUnread.
func (mr *MockRelationClientMockRecorder) FollowersUnread(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowersUnread", reflect.TypeOf((*MockRelationClient)(nil).FollowersUnread), varargs...)
}

// FollowersUnreadCount mocks base method.
func (m *MockRelationClient) FollowersUnreadCount(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.FollowersUnreadCountReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowersUnreadCount", varargs...)
	ret0, _ := ret[0].(*api.FollowersUnreadCountReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowersUnreadCount indicates an expected call of FollowersUnreadCount.
func (mr *MockRelationClientMockRecorder) FollowersUnreadCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowersUnreadCount", reflect.TypeOf((*MockRelationClient)(nil).FollowersUnreadCount), varargs...)
}

// AchieveGet mocks base method.
func (m *MockRelationClient) AchieveGet(ctx context.Context, in *api.AchieveGetReq, opts ...grpc.CallOption) (*api.AchieveGetReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AchieveGet", varargs...)
	ret0, _ := ret[0].(*api.AchieveGetReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AchieveGet indicates an expected call of AchieveGet.
func (mr *MockRelationClientMockRecorder) AchieveGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AchieveGet", reflect.TypeOf((*MockRelationClient)(nil).AchieveGet), varargs...)
}

// Achieve mocks base method.
func (m *MockRelationClient) Achieve(ctx context.Context, in *api.AchieveReq, opts ...grpc.CallOption) (*api.AchieveReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Achieve", varargs...)
	ret0, _ := ret[0].(*api.AchieveReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Achieve indicates an expected call of Achieve.
func (mr *MockRelationClientMockRecorder) Achieve(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Achieve", reflect.TypeOf((*MockRelationClient)(nil).Achieve), varargs...)
}

// ResetFollowersUnread mocks base method.
func (m *MockRelationClient) ResetFollowersUnread(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetFollowersUnread", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFollowersUnread indicates an expected call of ResetFollowersUnread.
func (mr *MockRelationClientMockRecorder) ResetFollowersUnread(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFollowersUnread", reflect.TypeOf((*MockRelationClient)(nil).ResetFollowersUnread), varargs...)
}

// ResetFollowersUnreadCount mocks base method.
func (m *MockRelationClient) ResetFollowersUnreadCount(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetFollowersUnreadCount", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFollowersUnreadCount indicates an expected call of ResetFollowersUnreadCount.
func (mr *MockRelationClientMockRecorder) ResetFollowersUnreadCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFollowersUnreadCount", reflect.TypeOf((*MockRelationClient)(nil).ResetFollowersUnreadCount), varargs...)
}

// DisableFollowerNotify mocks base method.
func (m *MockRelationClient) DisableFollowerNotify(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableFollowerNotify", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableFollowerNotify indicates an expected call of DisableFollowerNotify.
func (mr *MockRelationClientMockRecorder) DisableFollowerNotify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableFollowerNotify", reflect.TypeOf((*MockRelationClient)(nil).DisableFollowerNotify), varargs...)
}

// EnableFollowerNotify mocks base method.
func (m *MockRelationClient) EnableFollowerNotify(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableFollowerNotify", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableFollowerNotify indicates an expected call of EnableFollowerNotify.
func (mr *MockRelationClientMockRecorder) EnableFollowerNotify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableFollowerNotify", reflect.TypeOf((*MockRelationClient)(nil).EnableFollowerNotify), varargs...)
}

// FollowerNotifySetting mocks base method.
func (m *MockRelationClient) FollowerNotifySetting(ctx context.Context, in *api.MidReq, opts ...grpc.CallOption) (*api.FollowerNotifySettingReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowerNotifySetting", varargs...)
	ret0, _ := ret[0].(*api.FollowerNotifySettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowerNotifySetting indicates an expected call of FollowerNotifySetting.
func (mr *MockRelationClientMockRecorder) FollowerNotifySetting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowerNotifySetting", reflect.TypeOf((*MockRelationClient)(nil).FollowerNotifySetting), varargs...)
}

// SameFollowings mocks base method.
func (m *MockRelationClient) SameFollowings(ctx context.Context, in *api.SameFollowingReq, opts ...grpc.CallOption) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SameFollowings", varargs...)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SameFollowings indicates an expected call of SameFollowings.
func (mr *MockRelationClientMockRecorder) SameFollowings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SameFollowings", reflect.TypeOf((*MockRelationClient)(nil).SameFollowings), varargs...)
}

// ModifyRelation mocks base method.
func (m *MockRelationClient) ModifyRelation(ctx context.Context, in *api.FollowingReq, opts ...grpc.CallOption) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyRelation", varargs...)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyRelation indicates an expected call of ModifyRelation.
func (mr *MockRelationClientMockRecorder) ModifyRelation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyRelation", reflect.TypeOf((*MockRelationClient)(nil).ModifyRelation), varargs...)
}

// SpecialEffect mocks base method.
func (m *MockRelationClient) SpecialEffect(ctx context.Context, in *api.SpecialEffectReq, opts ...grpc.CallOption) (*api.SpecialEffectReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SpecialEffect", varargs...)
	ret0, _ := ret[0].(*api.SpecialEffectReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpecialEffect indicates an expected call of SpecialEffect.
func (mr *MockRelationClientMockRecorder) SpecialEffect(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecialEffect", reflect.TypeOf((*MockRelationClient)(nil).SpecialEffect), varargs...)
}

// MockRelationServer is a mock of RelationServer interface.
type MockRelationServer struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServerMockRecorder
}

// MockRelationServerMockRecorder is the mock recorder for MockRelationServer.
type MockRelationServerMockRecorder struct {
	mock *MockRelationServer
}

// NewMockRelationServer creates a new mock instance.
func NewMockRelationServer(ctrl *gomock.Controller) *MockRelationServer {
	mock := &MockRelationServer{ctrl: ctrl}
	mock.recorder = &MockRelationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationServer) EXPECT() *MockRelationServerMockRecorder {
	return m.recorder
}

// Relation mocks base method.
func (m *MockRelationServer) Relation(arg0 context.Context, arg1 *api.RelationReq) (*api.FollowingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relation", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relation indicates an expected call of Relation.
func (mr *MockRelationServerMockRecorder) Relation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockRelationServer)(nil).Relation), arg0, arg1)
}

// RelationWithAsync mocks base method.
func (m *MockRelationServer) RelationWithAsync(arg0 context.Context, arg1 *api.RelationReq) (*api.FollowingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationWithAsync", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelationWithAsync indicates an expected call of RelationWithAsync.
func (mr *MockRelationServerMockRecorder) RelationWithAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationWithAsync", reflect.TypeOf((*MockRelationServer)(nil).RelationWithAsync), arg0, arg1)
}

// Interrelation mocks base method.
func (m *MockRelationServer) Interrelation(arg0 context.Context, arg1 *api.RelationReq) (*api.InterrelationReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interrelation", arg0, arg1)
	ret0, _ := ret[0].(*api.InterrelationReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Interrelation indicates an expected call of Interrelation.
func (mr *MockRelationServerMockRecorder) Interrelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interrelation", reflect.TypeOf((*MockRelationServer)(nil).Interrelation), arg0, arg1)
}

// Relations mocks base method.
func (m *MockRelationServer) Relations(arg0 context.Context, arg1 *api.RelationsReq) (*api.FollowingMapReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relations", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingMapReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Relations indicates an expected call of Relations.
func (mr *MockRelationServerMockRecorder) Relations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relations", reflect.TypeOf((*MockRelationServer)(nil).Relations), arg0, arg1)
}

// Interrelations mocks base method.
func (m *MockRelationServer) Interrelations(arg0 context.Context, arg1 *api.RelationsReq) (*api.InterrelationMapReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interrelations", arg0, arg1)
	ret0, _ := ret[0].(*api.InterrelationMapReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Interrelations indicates an expected call of Interrelations.
func (mr *MockRelationServerMockRecorder) Interrelations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interrelations", reflect.TypeOf((*MockRelationServer)(nil).Interrelations), arg0, arg1)
}

// Stat mocks base method.
func (m *MockRelationServer) Stat(arg0 context.Context, arg1 *api.MidReq) (*api.StatReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0, arg1)
	ret0, _ := ret[0].(*api.StatReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockRelationServerMockRecorder) Stat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockRelationServer)(nil).Stat), arg0, arg1)
}

// Stats mocks base method.
func (m *MockRelationServer) Stats(arg0 context.Context, arg1 *api.MidsReq) (*api.StatsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0, arg1)
	ret0, _ := ret[0].(*api.StatsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockRelationServerMockRecorder) Stats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockRelationServer)(nil).Stats), arg0, arg1)
}

// Attentions mocks base method.
func (m *MockRelationServer) Attentions(arg0 context.Context, arg1 *api.MidReq) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attentions", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attentions indicates an expected call of Attentions.
func (mr *MockRelationServerMockRecorder) Attentions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attentions", reflect.TypeOf((*MockRelationServer)(nil).Attentions), arg0, arg1)
}

// Followings mocks base method.
func (m *MockRelationServer) Followings(arg0 context.Context, arg1 *api.MidReq) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Followings", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Followings indicates an expected call of Followings.
func (mr *MockRelationServerMockRecorder) Followings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Followings", reflect.TypeOf((*MockRelationServer)(nil).Followings), arg0, arg1)
}

// FollowingsSearch mocks base method.
func (m *MockRelationServer) FollowingsSearch(arg0 context.Context, arg1 *api.MidNameReq) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowingsSearch", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowingsSearch indicates an expected call of FollowingsSearch.
func (mr *MockRelationServerMockRecorder) FollowingsSearch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowingsSearch", reflect.TypeOf((*MockRelationServer)(nil).FollowingsSearch), arg0, arg1)
}

// AddFollowing mocks base method.
func (m *MockRelationServer) AddFollowing(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollowing", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFollowing indicates an expected call of AddFollowing.
func (mr *MockRelationServerMockRecorder) AddFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollowing", reflect.TypeOf((*MockRelationServer)(nil).AddFollowing), arg0, arg1)
}

// BatchAddFollowingAsync mocks base method.
func (m *MockRelationServer) BatchAddFollowingAsync(arg0 context.Context, arg1 *api.BatchAddFollowingsReq) (*api.BatchAddFollowingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAddFollowingAsync", arg0, arg1)
	ret0, _ := ret[0].(*api.BatchAddFollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAddFollowingAsync indicates an expected call of BatchAddFollowingAsync.
func (mr *MockRelationServerMockRecorder) BatchAddFollowingAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAddFollowingAsync", reflect.TypeOf((*MockRelationServer)(nil).BatchAddFollowingAsync), arg0, arg1)
}

// DelFollowing mocks base method.
func (m *MockRelationServer) DelFollowing(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFollowing", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFollowing indicates an expected call of DelFollowing.
func (mr *MockRelationServerMockRecorder) DelFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFollowing", reflect.TypeOf((*MockRelationServer)(nil).DelFollowing), arg0, arg1)
}

// Whispers mocks base method.
func (m *MockRelationServer) Whispers(arg0 context.Context, arg1 *api.MidReq) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Whispers", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Whispers indicates an expected call of Whispers.
func (mr *MockRelationServerMockRecorder) Whispers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Whispers", reflect.TypeOf((*MockRelationServer)(nil).Whispers), arg0, arg1)
}

// AddWhisper mocks base method.
func (m *MockRelationServer) AddWhisper(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWhisper", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWhisper indicates an expected call of AddWhisper.
func (mr *MockRelationServerMockRecorder) AddWhisper(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWhisper", reflect.TypeOf((*MockRelationServer)(nil).AddWhisper), arg0, arg1)
}

// DelWhisper mocks base method.
func (m *MockRelationServer) DelWhisper(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelWhisper", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelWhisper indicates an expected call of DelWhisper.
func (mr *MockRelationServerMockRecorder) DelWhisper(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelWhisper", reflect.TypeOf((*MockRelationServer)(nil).DelWhisper), arg0, arg1)
}

// Blacks mocks base method.
func (m *MockRelationServer) Blacks(arg0 context.Context, arg1 *api.MidReq) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blacks", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blacks indicates an expected call of Blacks.
func (mr *MockRelationServerMockRecorder) Blacks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blacks", reflect.TypeOf((*MockRelationServer)(nil).Blacks), arg0, arg1)
}

// AddBlack mocks base method.
func (m *MockRelationServer) AddBlack(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlack", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlack indicates an expected call of AddBlack.
func (mr *MockRelationServerMockRecorder) AddBlack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlack", reflect.TypeOf((*MockRelationServer)(nil).AddBlack), arg0, arg1)
}

// DelBlack mocks base method.
func (m *MockRelationServer) DelBlack(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelBlack", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelBlack indicates an expected call of DelBlack.
func (mr *MockRelationServerMockRecorder) DelBlack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelBlack", reflect.TypeOf((*MockRelationServer)(nil).DelBlack), arg0, arg1)
}

// Followers mocks base method.
func (m *MockRelationServer) Followers(arg0 context.Context, arg1 *api.MidReq) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Followers", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Followers indicates an expected call of Followers.
func (mr *MockRelationServerMockRecorder) Followers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Followers", reflect.TypeOf((*MockRelationServer)(nil).Followers), arg0, arg1)
}

// DelFollower mocks base method.
func (m *MockRelationServer) DelFollower(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFollower", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFollower indicates an expected call of DelFollower.
func (mr *MockRelationServerMockRecorder) DelFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFollower", reflect.TypeOf((*MockRelationServer)(nil).DelFollower), arg0, arg1)
}

// Tag mocks base method.
func (m *MockRelationServer) Tag(arg0 context.Context, arg1 *api.TagIdReq) (*api.TagReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", arg0, arg1)
	ret0, _ := ret[0].(*api.TagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag.
func (mr *MockRelationServerMockRecorder) Tag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockRelationServer)(nil).Tag), arg0, arg1)
}

// Tags mocks base method.
func (m *MockRelationServer) Tags(arg0 context.Context, arg1 *api.MidReq) (*api.TagsCountReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags", arg0, arg1)
	ret0, _ := ret[0].(*api.TagsCountReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags.
func (mr *MockRelationServerMockRecorder) Tags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockRelationServer)(nil).Tags), arg0, arg1)
}

// UserTag mocks base method.
func (m *MockRelationServer) UserTag(arg0 context.Context, arg1 *api.RelationReq) (*api.UserTagReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTag", arg0, arg1)
	ret0, _ := ret[0].(*api.UserTagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTag indicates an expected call of UserTag.
func (mr *MockRelationServerMockRecorder) UserTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTag", reflect.TypeOf((*MockRelationServer)(nil).UserTag), arg0, arg1)
}

// CreateTag mocks base method.
func (m *MockRelationServer) CreateTag(arg0 context.Context, arg1 *api.TagReq) (*api.CreateTagReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0, arg1)
	ret0, _ := ret[0].(*api.CreateTagReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockRelationServerMockRecorder) CreateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockRelationServer)(nil).CreateTag), arg0, arg1)
}

// UpdateTag mocks base method.
func (m *MockRelationServer) UpdateTag(arg0 context.Context, arg1 *api.TagUpdateReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockRelationServerMockRecorder) UpdateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockRelationServer)(nil).UpdateTag), arg0, arg1)
}

// DelTag mocks base method.
func (m *MockRelationServer) DelTag(arg0 context.Context, arg1 *api.TagDelReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelTag", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelTag indicates an expected call of DelTag.
func (mr *MockRelationServerMockRecorder) DelTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelTag", reflect.TypeOf((*MockRelationServer)(nil).DelTag), arg0, arg1)
}

// TagsAddUsers mocks base method.
func (m *MockRelationServer) TagsAddUsers(arg0 context.Context, arg1 *api.TagsMoveUsersReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsAddUsers", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsAddUsers indicates an expected call of TagsAddUsers.
func (mr *MockRelationServerMockRecorder) TagsAddUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsAddUsers", reflect.TypeOf((*MockRelationServer)(nil).TagsAddUsers), arg0, arg1)
}

// TagsCopyUsers mocks base method.
func (m *MockRelationServer) TagsCopyUsers(arg0 context.Context, arg1 *api.TagsMoveUsersReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsCopyUsers", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsCopyUsers indicates an expected call of TagsCopyUsers.
func (mr *MockRelationServerMockRecorder) TagsCopyUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsCopyUsers", reflect.TypeOf((*MockRelationServer)(nil).TagsCopyUsers), arg0, arg1)
}

// TagsMoveUsers mocks base method.
func (m *MockRelationServer) TagsMoveUsers(arg0 context.Context, arg1 *api.TagsMoveUsersReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsMoveUsers", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagsMoveUsers indicates an expected call of TagsMoveUsers.
func (mr *MockRelationServerMockRecorder) TagsMoveUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsMoveUsers", reflect.TypeOf((*MockRelationServer)(nil).TagsMoveUsers), arg0, arg1)
}

// Prompt mocks base method.
func (m *MockRelationServer) Prompt(arg0 context.Context, arg1 *api.PromptReq) (*api.PromptReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompt", arg0, arg1)
	ret0, _ := ret[0].(*api.PromptReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockRelationServerMockRecorder) Prompt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockRelationServer)(nil).Prompt), arg0, arg1)
}

// ClosePrompt mocks base method.
func (m *MockRelationServer) ClosePrompt(arg0 context.Context, arg1 *api.PromptReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePrompt", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClosePrompt indicates an expected call of ClosePrompt.
func (mr *MockRelationServerMockRecorder) ClosePrompt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePrompt", reflect.TypeOf((*MockRelationServer)(nil).ClosePrompt), arg0, arg1)
}

// AddSpecial mocks base method.
func (m *MockRelationServer) AddSpecial(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpecial", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpecial indicates an expected call of AddSpecial.
func (mr *MockRelationServerMockRecorder) AddSpecial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpecial", reflect.TypeOf((*MockRelationServer)(nil).AddSpecial), arg0, arg1)
}

// DelSpecial mocks base method.
func (m *MockRelationServer) DelSpecial(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelSpecial", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelSpecial indicates an expected call of DelSpecial.
func (mr *MockRelationServerMockRecorder) DelSpecial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelSpecial", reflect.TypeOf((*MockRelationServer)(nil).DelSpecial), arg0, arg1)
}

// Special mocks base method.
func (m *MockRelationServer) Special(arg0 context.Context, arg1 *api.MidReq) (*api.SpecialReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Special", arg0, arg1)
	ret0, _ := ret[0].(*api.SpecialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Special indicates an expected call of Special.
func (mr *MockRelationServerMockRecorder) Special(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Special", reflect.TypeOf((*MockRelationServer)(nil).Special), arg0, arg1)
}

// FollowersUnread mocks base method.
func (m *MockRelationServer) FollowersUnread(arg0 context.Context, arg1 *api.MidReq) (*api.FollowersUnreadReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowersUnread", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowersUnreadReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowersUnread indicates an expected call of FollowersUnread.
func (mr *MockRelationServerMockRecorder) FollowersUnread(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowersUnread", reflect.TypeOf((*MockRelationServer)(nil).FollowersUnread), arg0, arg1)
}

// FollowersUnreadCount mocks base method.
func (m *MockRelationServer) FollowersUnreadCount(arg0 context.Context, arg1 *api.MidReq) (*api.FollowersUnreadCountReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowersUnreadCount", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowersUnreadCountReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowersUnreadCount indicates an expected call of FollowersUnreadCount.
func (mr *MockRelationServerMockRecorder) FollowersUnreadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowersUnreadCount", reflect.TypeOf((*MockRelationServer)(nil).FollowersUnreadCount), arg0, arg1)
}

// AchieveGet mocks base method.
func (m *MockRelationServer) AchieveGet(arg0 context.Context, arg1 *api.AchieveGetReq) (*api.AchieveGetReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AchieveGet", arg0, arg1)
	ret0, _ := ret[0].(*api.AchieveGetReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AchieveGet indicates an expected call of AchieveGet.
func (mr *MockRelationServerMockRecorder) AchieveGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AchieveGet", reflect.TypeOf((*MockRelationServer)(nil).AchieveGet), arg0, arg1)
}

// Achieve mocks base method.
func (m *MockRelationServer) Achieve(arg0 context.Context, arg1 *api.AchieveReq) (*api.AchieveReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Achieve", arg0, arg1)
	ret0, _ := ret[0].(*api.AchieveReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Achieve indicates an expected call of Achieve.
func (mr *MockRelationServerMockRecorder) Achieve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Achieve", reflect.TypeOf((*MockRelationServer)(nil).Achieve), arg0, arg1)
}

// ResetFollowersUnread mocks base method.
func (m *MockRelationServer) ResetFollowersUnread(arg0 context.Context, arg1 *api.MidReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFollowersUnread", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFollowersUnread indicates an expected call of ResetFollowersUnread.
func (mr *MockRelationServerMockRecorder) ResetFollowersUnread(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFollowersUnread", reflect.TypeOf((*MockRelationServer)(nil).ResetFollowersUnread), arg0, arg1)
}

// ResetFollowersUnreadCount mocks base method.
func (m *MockRelationServer) ResetFollowersUnreadCount(arg0 context.Context, arg1 *api.MidReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFollowersUnreadCount", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFollowersUnreadCount indicates an expected call of ResetFollowersUnreadCount.
func (mr *MockRelationServerMockRecorder) ResetFollowersUnreadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFollowersUnreadCount", reflect.TypeOf((*MockRelationServer)(nil).ResetFollowersUnreadCount), arg0, arg1)
}

// DisableFollowerNotify mocks base method.
func (m *MockRelationServer) DisableFollowerNotify(arg0 context.Context, arg1 *api.MidReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableFollowerNotify", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableFollowerNotify indicates an expected call of DisableFollowerNotify.
func (mr *MockRelationServerMockRecorder) DisableFollowerNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableFollowerNotify", reflect.TypeOf((*MockRelationServer)(nil).DisableFollowerNotify), arg0, arg1)
}

// EnableFollowerNotify mocks base method.
func (m *MockRelationServer) EnableFollowerNotify(arg0 context.Context, arg1 *api.MidReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableFollowerNotify", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableFollowerNotify indicates an expected call of EnableFollowerNotify.
func (mr *MockRelationServerMockRecorder) EnableFollowerNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableFollowerNotify", reflect.TypeOf((*MockRelationServer)(nil).EnableFollowerNotify), arg0, arg1)
}

// FollowerNotifySetting mocks base method.
func (m *MockRelationServer) FollowerNotifySetting(arg0 context.Context, arg1 *api.MidReq) (*api.FollowerNotifySettingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowerNotifySetting", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowerNotifySettingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowerNotifySetting indicates an expected call of FollowerNotifySetting.
func (mr *MockRelationServerMockRecorder) FollowerNotifySetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowerNotifySetting", reflect.TypeOf((*MockRelationServer)(nil).FollowerNotifySetting), arg0, arg1)
}

// SameFollowings mocks base method.
func (m *MockRelationServer) SameFollowings(arg0 context.Context, arg1 *api.SameFollowingReq) (*api.FollowingsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SameFollowings", arg0, arg1)
	ret0, _ := ret[0].(*api.FollowingsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SameFollowings indicates an expected call of SameFollowings.
func (mr *MockRelationServerMockRecorder) SameFollowings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SameFollowings", reflect.TypeOf((*MockRelationServer)(nil).SameFollowings), arg0, arg1)
}

// ModifyRelation mocks base method.
func (m *MockRelationServer) ModifyRelation(arg0 context.Context, arg1 *api.FollowingReq) (*api.EmptyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyRelation", arg0, arg1)
	ret0, _ := ret[0].(*api.EmptyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyRelation indicates an expected call of ModifyRelation.
func (mr *MockRelationServerMockRecorder) ModifyRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyRelation", reflect.TypeOf((*MockRelationServer)(nil).ModifyRelation), arg0, arg1)
}

// SpecialEffect mocks base method.
func (m *MockRelationServer) SpecialEffect(arg0 context.Context, arg1 *api.SpecialEffectReq) (*api.SpecialEffectReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpecialEffect", arg0, arg1)
	ret0, _ := ret[0].(*api.SpecialEffectReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpecialEffect indicates an expected call of SpecialEffect.
func (mr *MockRelationServerMockRecorder) SpecialEffect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecialEffect", reflect.TypeOf((*MockRelationServer)(nil).SpecialEffect), arg0, arg1)
}
