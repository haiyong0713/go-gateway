// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GraphRightsReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	Build                int32    `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	Device               string   `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	MobiApp              string   `protobuf:"bytes,4,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphRightsReq) Reset()         { *m = GraphRightsReq{} }
func (m *GraphRightsReq) String() string { return proto.CompactTextString(m) }
func (*GraphRightsReq) ProtoMessage()    {}
func (*GraphRightsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *GraphRightsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphRightsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphRightsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphRightsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphRightsReq.Merge(m, src)
}
func (m *GraphRightsReq) XXX_Size() int {
	return m.Size()
}
func (m *GraphRightsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphRightsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GraphRightsReq proto.InternalMessageInfo

type GraphRightsReply struct {
	AllowPlay            bool     `protobuf:"varint,1,opt,name=allow_play,json=allowPlay,proto3" json:"allow_play,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphRightsReply) Reset()         { *m = GraphRightsReply{} }
func (m *GraphRightsReply) String() string { return proto.CompactTextString(m) }
func (*GraphRightsReply) ProtoMessage()    {}
func (*GraphRightsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *GraphRightsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphRightsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphRightsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphRightsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphRightsReply.Merge(m, src)
}
func (m *GraphRightsReply) XXX_Size() int {
	return m.Size()
}
func (m *GraphRightsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphRightsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GraphRightsReply proto.InternalMessageInfo

type MarkEvaluationsReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Aids                 []int64  `protobuf:"varint,2,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkEvaluationsReq) Reset()         { *m = MarkEvaluationsReq{} }
func (m *MarkEvaluationsReq) String() string { return proto.CompactTextString(m) }
func (*MarkEvaluationsReq) ProtoMessage()    {}
func (*MarkEvaluationsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *MarkEvaluationsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkEvaluationsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkEvaluationsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkEvaluationsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkEvaluationsReq.Merge(m, src)
}
func (m *MarkEvaluationsReq) XXX_Size() int {
	return m.Size()
}
func (m *MarkEvaluationsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkEvaluationsReq.DiscardUnknown(m)
}

var xxx_messageInfo_MarkEvaluationsReq proto.InternalMessageInfo

type MarkEvaluationsReply struct {
	Items                map[int64]*MarkEvaluations `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MarkEvaluationsReply) Reset()         { *m = MarkEvaluationsReply{} }
func (m *MarkEvaluationsReply) String() string { return proto.CompactTextString(m) }
func (*MarkEvaluationsReply) ProtoMessage()    {}
func (*MarkEvaluationsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *MarkEvaluationsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkEvaluationsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkEvaluationsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkEvaluationsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkEvaluationsReply.Merge(m, src)
}
func (m *MarkEvaluationsReply) XXX_Size() int {
	return m.Size()
}
func (m *MarkEvaluationsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkEvaluationsReply.DiscardUnknown(m)
}

var xxx_messageInfo_MarkEvaluationsReply proto.InternalMessageInfo

type MarkEvaluations struct {
	Mark                 int64    `protobuf:"varint,1,opt,name=mark,proto3" json:"mark,omitempty"`
	Evaluation           string   `protobuf:"bytes,2,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarkEvaluations) Reset()         { *m = MarkEvaluations{} }
func (m *MarkEvaluations) String() string { return proto.CompactTextString(m) }
func (*MarkEvaluations) ProtoMessage()    {}
func (*MarkEvaluations) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *MarkEvaluations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkEvaluations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkEvaluations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkEvaluations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkEvaluations.Merge(m, src)
}
func (m *MarkEvaluations) XXX_Size() int {
	return m.Size()
}
func (m *MarkEvaluations) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkEvaluations.DiscardUnknown(m)
}

var xxx_messageInfo_MarkEvaluations proto.InternalMessageInfo

type GraphInfoReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphInfoReq) Reset()         { *m = GraphInfoReq{} }
func (m *GraphInfoReq) String() string { return proto.CompactTextString(m) }
func (*GraphInfoReq) ProtoMessage()    {}
func (*GraphInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GraphInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphInfoReq.Merge(m, src)
}
func (m *GraphInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GraphInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GraphInfoReq proto.InternalMessageInfo

type GraphInfoReply struct {
	GraphInfo            *GraphInfo `protobuf:"bytes,1,opt,name=graphInfo,proto3" json:"graphInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GraphInfoReply) Reset()         { *m = GraphInfoReply{} }
func (m *GraphInfoReply) String() string { return proto.CompactTextString(m) }
func (*GraphInfoReply) ProtoMessage()    {}
func (*GraphInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *GraphInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphInfoReply.Merge(m, src)
}
func (m *GraphInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *GraphInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GraphInfoReply proto.InternalMessageInfo

type GraphViewReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphViewReq) Reset()         { *m = GraphViewReq{} }
func (m *GraphViewReq) String() string { return proto.CompactTextString(m) }
func (*GraphViewReq) ProtoMessage()    {}
func (*GraphViewReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *GraphViewReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphViewReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphViewReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphViewReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphViewReq.Merge(m, src)
}
func (m *GraphViewReq) XXX_Size() int {
	return m.Size()
}
func (m *GraphViewReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphViewReq.DiscardUnknown(m)
}

var xxx_messageInfo_GraphViewReq proto.InternalMessageInfo

type GraphViewReply struct {
	// 开始节点的那一P
	Page *Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 图信息
	Graph *GraphInfo `protobuf:"bytes,2,opt,name=graph,proto3" json:"graph,omitempty"`
	// 该稿件的综合评分
	Evaluation           string   `protobuf:"bytes,3,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphViewReply) Reset()         { *m = GraphViewReply{} }
func (m *GraphViewReply) String() string { return proto.CompactTextString(m) }
func (*GraphViewReply) ProtoMessage()    {}
func (*GraphViewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *GraphViewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphViewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphViewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphViewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphViewReply.Merge(m, src)
}
func (m *GraphViewReply) XXX_Size() int {
	return m.Size()
}
func (m *GraphViewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphViewReply.DiscardUnknown(m)
}

var xxx_messageInfo_GraphViewReply proto.InternalMessageInfo

type ViewReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Buvid                string   `protobuf:"bytes,3,opt,name=buvid,proto3" json:"buvid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewReq) Reset()         { *m = ViewReq{} }
func (m *ViewReq) String() string { return proto.CompactTextString(m) }
func (*ViewReq) ProtoMessage()    {}
func (*ViewReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *ViewReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewReq.Merge(m, src)
}
func (m *ViewReq) XXX_Size() int {
	return m.Size()
}
func (m *ViewReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewReq.DiscardUnknown(m)
}

var xxx_messageInfo_ViewReq proto.InternalMessageInfo

type ViewReply struct {
	// 开始节点的那一P
	Page *Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// 图信息
	Graph *GraphInfo `protobuf:"bytes,2,opt,name=graph,proto3" json:"graph,omitempty"`
	// 用户存档当前位置信息
	CurrentNode *GraphNode `protobuf:"bytes,3,opt,name=current_node,json=currentNode,proto3" json:"current_node,omitempty"`
	// 用户存档是否有效
	RecordState int32 `protobuf:"varint,4,opt,name=record_state,json=recordState,proto3" json:"record_state,omitempty"`
	// 该用户对稿件的评分，10为满分
	Mark int64 `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
	// 该稿件的综合评分
	Evaluation string `protobuf:"bytes,6,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	// 用户存档当前位置信息(edge树)
	CurrentEdge *GraphEdge `protobuf:"bytes,7,opt,name=current_edge,json=currentEdge,proto3" json:"current_edge,omitempty"`
	// 客户端在详情页展示toast信息
	ToastMsg             string   `protobuf:"bytes,8,opt,name=toast_msg,json=toastMsg,proto3" json:"toast_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewReply) Reset()         { *m = ViewReply{} }
func (m *ViewReply) String() string { return proto.CompactTextString(m) }
func (*ViewReply) ProtoMessage()    {}
func (*ViewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *ViewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewReply.Merge(m, src)
}
func (m *ViewReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewReply proto.InternalMessageInfo

type ViewsReq struct {
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty" validate:"max=50,dive,gt=0,required"`
	AidsWithHistory      []int64  `protobuf:"varint,2,rep,packed,name=aids_with_history,json=aidsWithHistory,proto3" json:"aids_with_history,omitempty" validate:"max=50,dive,gt=0,required"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Buvid                string   `protobuf:"bytes,4,opt,name=buvid,proto3" json:"buvid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewsReq) Reset()         { *m = ViewsReq{} }
func (m *ViewsReq) String() string { return proto.CompactTextString(m) }
func (*ViewsReq) ProtoMessage()    {}
func (*ViewsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *ViewsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewsReq.Merge(m, src)
}
func (m *ViewsReq) XXX_Size() int {
	return m.Size()
}
func (m *ViewsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ViewsReq proto.InternalMessageInfo

type ViewsReply struct {
	Views                map[int64]*ViewReply `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ViewsWithHistory     map[int64]*ViewReply `protobuf:"bytes,2,rep,name=views_with_history,json=viewsWithHistory,proto3" json:"views_with_history,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ViewsReply) Reset()         { *m = ViewsReply{} }
func (m *ViewsReply) String() string { return proto.CompactTextString(m) }
func (*ViewsReply) ProtoMessage()    {}
func (*ViewsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *ViewsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewsReply.Merge(m, src)
}
func (m *ViewsReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewsReply proto.InternalMessageInfo

type GraphInfo struct {
	// 图ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 对应的稿件ID
	Aid int64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty"`
	// 该图的起点节点的Cid
	FirstCid int64 `protobuf:"varint,3,opt,name=first_cid,json=firstCid,proto3" json:"first_cid,omitempty"`
	// 该图的起点节点ID
	FirstNid int64 `protobuf:"varint,4,opt,name=first_nid,json=firstNid,proto3" json:"first_nid,omitempty"`
	// 剧情图局部变量
	RegionalVars string `protobuf:"bytes,5,opt,name=regional_vars,json=regionalVars,proto3" json:"regional_vars,omitempty"`
	// 剧情图全局变量
	GlobalVars string `protobuf:"bytes,6,opt,name=global_vars,json=globalVars,proto3" json:"global_vars,omitempty"`
	// 剧情图的版本(0代表走node逻辑, 1代表走edge逻辑，2代表走中插/表达式逻辑)
	Version int64 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	// 剧情图皮肤
	SkinId int64 `protobuf:"varint,8,opt,name=skin_id,json=skinId,proto3" json:"-"`
	// 是否不展示新手引导
	NoTutorial int32 `protobuf:"varint,9,opt,name=no_tutorial,json=noTutorial,proto3" json:"no_tutorial,omitempty"`
	// 是否不开启进度回溯
	NoBacktracking int32 `protobuf:"varint,10,opt,name=no_backtracking,json=noBacktracking,proto3" json:"no_backtracking,omitempty"`
	// 是否不展示评分
	NoEvaluation int32 `protobuf:"varint,11,opt,name=no_evaluation,json=noEvaluation,proto3" json:"no_evaluation,omitempty"`
	// 游客是否覆盖局部变量
	GuestOverwriteRegionalVars int32    `protobuf:"varint,12,opt,name=guest_overwrite_regional_vars,json=guestOverwriteRegionalVars,proto3" json:"guest_overwrite_regional_vars,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *GraphInfo) Reset()         { *m = GraphInfo{} }
func (m *GraphInfo) String() string { return proto.CompactTextString(m) }
func (*GraphInfo) ProtoMessage()    {}
func (*GraphInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *GraphInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphInfo.Merge(m, src)
}
func (m *GraphInfo) XXX_Size() int {
	return m.Size()
}
func (m *GraphInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphInfo proto.InternalMessageInfo

type Skin struct {
	// 选项图
	ChoiceImage string `protobuf:"bytes,1,opt,name=choice_image,json=choiceImage,proto3" json:"choice_image,omitempty"`
	// 文字颜色
	TitleTextColor string `protobuf:"bytes,2,opt,name=title_text_color,json=titleTextColor,proto3" json:"title_text_color,omitempty"`
	// 文字阴影颜色
	TitleShadowColor string `protobuf:"bytes,3,opt,name=title_shadow_color,json=titleShadowColor,proto3" json:"title_shadow_color,omitempty"`
	// 标题阴影位置x
	TitleShadowOffsetX float32 `protobuf:"fixed32,4,opt,name=title_shadow_offset_x,json=titleShadowOffsetX,proto3" json:"title_shadow_offset_x,omitempty"`
	// 标题阴影位置y
	TitleShadowOffsetY float32 `protobuf:"fixed32,5,opt,name=title_shadow_offset_y,json=titleShadowOffsetY,proto3" json:"title_shadow_offset_y,omitempty"`
	// 标题阴影范围
	TitleShadowRadius float32 `protobuf:"fixed32,6,opt,name=title_shadow_radius,json=titleShadowRadius,proto3" json:"title_shadow_radius,omitempty"`
	// 进度条颜色
	ProgressbarColor string `protobuf:"bytes,7,opt,name=progressbar_color,json=progressbarColor,proto3" json:"progressbar_color,omitempty"`
	// 进度条阴影颜色
	ProgressbarShadowColor string   `protobuf:"bytes,8,opt,name=progressbar_shadow_color,json=progressbarShadowColor,proto3" json:"progressbar_shadow_color,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *Skin) Reset()         { *m = Skin{} }
func (m *Skin) String() string { return proto.CompactTextString(m) }
func (*Skin) ProtoMessage()    {}
func (*Skin) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *Skin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Skin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Skin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Skin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Skin.Merge(m, src)
}
func (m *Skin) XXX_Size() int {
	return m.Size()
}
func (m *Skin) XXX_DiscardUnknown() {
	xxx_messageInfo_Skin.DiscardUnknown(m)
}

var xxx_messageInfo_Skin proto.InternalMessageInfo

type GraphNode struct {
	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GraphId  int64  `protobuf:"varint,3,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	Cid      int64  `protobuf:"varint,4,opt,name=cid,proto3" json:"cid,omitempty"`
	IsStart  int32  `protobuf:"varint,5,opt,name=is_start,json=isStart,proto3" json:"is_start,omitempty"`
	Otype    int32  `protobuf:"varint,6,opt,name=otype,proto3" json:"otype,omitempty"`
	ShowTime int64  `protobuf:"varint,7,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
	Width    int64  `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height   int64  `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	Sar      string `protobuf:"bytes,10,opt,name=sar,proto3" json:"sar,omitempty"`
	// 剧情图皮肤
	SkinId               int64    `protobuf:"varint,11,opt,name=skin_id,json=skinId,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphNode) Reset()         { *m = GraphNode{} }
func (m *GraphNode) String() string { return proto.CompactTextString(m) }
func (*GraphNode) ProtoMessage()    {}
func (*GraphNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *GraphNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphNode.Merge(m, src)
}
func (m *GraphNode) XXX_Size() int {
	return m.Size()
}
func (m *GraphNode) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphNode.DiscardUnknown(m)
}

var xxx_messageInfo_GraphNode proto.InternalMessageInfo

type GraphEdge struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GraphId              int64    `protobuf:"varint,2,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	FromNode             int64    `protobuf:"varint,3,opt,name=from_node,json=fromNode,proto3" json:"from_node,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	ToNode               int64    `protobuf:"varint,5,opt,name=to_node,json=toNode,proto3" json:"to_node,omitempty"`
	ToNodeCid            int64    `protobuf:"varint,6,opt,name=to_node_cid,json=toNodeCid,proto3" json:"to_node_cid,omitempty"`
	Weight               int64    `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	TextAlign            int32    `protobuf:"varint,8,opt,name=text_align,json=textAlign,proto3" json:"text_align,omitempty"`
	PosX                 int64    `protobuf:"varint,9,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY                 int64    `protobuf:"varint,10,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	IsDefault            int32    `protobuf:"varint,11,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Script               string   `protobuf:"bytes,12,opt,name=script,proto3" json:"script,omitempty"`
	Attribute            string   `protobuf:"bytes,13,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Condition            string   `protobuf:"bytes,14,opt,name=condition,proto3" json:"condition,omitempty"`
	GroupId              int64    `protobuf:"varint,15,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	IsHidden             int32    `protobuf:"varint,16,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	Width                int32    `protobuf:"varint,17,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,18,opt,name=height,proto3" json:"height,omitempty"`
	ToTime               int64    `protobuf:"varint,19,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	ToType               int32    `protobuf:"varint,20,opt,name=to_type,json=toType,proto3" json:"to_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphEdge) Reset()         { *m = GraphEdge{} }
func (m *GraphEdge) String() string { return proto.CompactTextString(m) }
func (*GraphEdge) ProtoMessage()    {}
func (*GraphEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *GraphEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphEdge.Merge(m, src)
}
func (m *GraphEdge) XXX_Size() int {
	return m.Size()
}
func (m *GraphEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphEdge.DiscardUnknown(m)
}

var xxx_messageInfo_GraphEdge proto.InternalMessageInfo

type EdgeGroup struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GraphId              int64    `protobuf:"varint,2,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	TitleColor           string   `protobuf:"bytes,4,opt,name=title_color,json=titleColor,proto3" json:"title_color,omitempty"`
	TitleFontSize        string   `protobuf:"bytes,5,opt,name=title_font_size,json=titleFontSize,proto3" json:"title_font_size,omitempty"`
	StartTime            int64    `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration             int64    `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Type                 int64    `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	PauseVideo           int32    `protobuf:"varint,9,opt,name=pause_video,json=pauseVideo,proto3" json:"pause_video,omitempty"`
	FadeInTime           int32    `protobuf:"varint,10,opt,name=fade_in_time,json=fadeInTime,proto3" json:"fade_in_time,omitempty"`
	FadeOutTime          int32    `protobuf:"varint,11,opt,name=fade_out_time,json=fadeOutTime,proto3" json:"fade_out_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EdgeGroup) Reset()         { *m = EdgeGroup{} }
func (m *EdgeGroup) String() string { return proto.CompactTextString(m) }
func (*EdgeGroup) ProtoMessage()    {}
func (*EdgeGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *EdgeGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeGroup.Merge(m, src)
}
func (m *EdgeGroup) XXX_Size() int {
	return m.Size()
}
func (m *EdgeGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeGroup.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeGroup proto.InternalMessageInfo

type GameRecords struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GraphId              int64    `protobuf:"varint,2,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	Aid                  int64    `protobuf:"varint,3,opt,name=aid,proto3" json:"aid,omitempty"`
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	Choices              string   `protobuf:"bytes,5,opt,name=choices,proto3" json:"choices,omitempty"`
	CurrentNode          int64    `protobuf:"varint,6,opt,name=current_node,json=currentNode,proto3" json:"current_node,omitempty"`
	HiddenVars           string   `protobuf:"bytes,7,opt,name=hidden_vars,json=hiddenVars,proto3" json:"hidden_vars,omitempty"`
	GlobalVars           string   `protobuf:"bytes,8,opt,name=global_vars,json=globalVars,proto3" json:"global_vars,omitempty"`
	Buvid                string   `protobuf:"bytes,9,opt,name=buvid,proto3" json:"buvid,omitempty"`
	CurrentEdge          int64    `protobuf:"varint,10,opt,name=current_edge,json=currentEdge,proto3" json:"current_edge,omitempty"`
	CurrentCursor        int64    `protobuf:"varint,11,opt,name=current_cursor,json=currentCursor,proto3" json:"current_cursor,omitempty"`
	CursorChoice         string   `protobuf:"bytes,12,opt,name=cursor_choice,json=cursorChoice,proto3" json:"cursor_choice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameRecords) Reset()         { *m = GameRecords{} }
func (m *GameRecords) String() string { return proto.CompactTextString(m) }
func (*GameRecords) ProtoMessage()    {}
func (*GameRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *GameRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRecords.Merge(m, src)
}
func (m *GameRecords) XXX_Size() int {
	return m.Size()
}
func (m *GameRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRecords.DiscardUnknown(m)
}

var xxx_messageInfo_GameRecords proto.InternalMessageInfo

type EvaluationReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvaluationReq) Reset()         { *m = EvaluationReq{} }
func (m *EvaluationReq) String() string { return proto.CompactTextString(m) }
func (*EvaluationReq) ProtoMessage()    {}
func (*EvaluationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *EvaluationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationReq.Merge(m, src)
}
func (m *EvaluationReq) XXX_Size() int {
	return m.Size()
}
func (m *EvaluationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationReq.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationReq proto.InternalMessageInfo

type EvaluationReply struct {
	Eval                 string   `protobuf:"bytes,1,opt,name=eval,proto3" json:"eval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvaluationReply) Reset()         { *m = EvaluationReply{} }
func (m *EvaluationReply) String() string { return proto.CompactTextString(m) }
func (*EvaluationReply) ProtoMessage()    {}
func (*EvaluationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *EvaluationReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluationReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluationReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluationReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationReply.Merge(m, src)
}
func (m *EvaluationReply) XXX_Size() int {
	return m.Size()
}
func (m *EvaluationReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationReply.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationReply proto.InternalMessageInfo

// Page 分P信息
type Page struct {
	// 视频的cid
	Cid int64 `protobuf:"varint,1,opt,name=Cid,proto3" json:"cid"`
	// 视频的序号顺序，从小到大
	Page int32 `protobuf:"varint,2,opt,name=Page,proto3" json:"page"`
	// 视频的来源，99%为vupload=B站自己的，少部分为腾讯（qq）、湖南tv(hunan)
	From string `protobuf:"bytes,3,opt,name=From,proto3" json:"from"`
	// 视频的标题
	Part string `protobuf:"bytes,4,opt,name=Part,proto3" json:"part"`
	// 视频的时长 单位=秒
	Duration int64 `protobuf:"varint,5,opt,name=Duration,proto3" json:"duration"`
	// 站外视频才有vid属性
	Vid string `protobuf:"bytes,6,opt,name=Vid,proto3" json:"vid"`
	// 视频的简介，多P视频才可填写简介
	Desc string `protobuf:"bytes,7,opt,name=Desc,proto3" json:"description,omitempty"`
	// 站外视频跳转地址
	WebLink string `protobuf:"bytes,8,opt,name=WebLink,proto3" json:"weblink"`
	// 视频分辨率信息
	Dimension            Dimension `protobuf:"bytes,9,opt,name=Dimension,proto3" json:"dimension"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

// Dimension 视频分辨率
type Dimension struct {
	// 宽 如 1920
	Width int64 `protobuf:"varint,1,opt,name=Width,proto3" json:"width"`
	// 高 如 1080
	Height int64 `protobuf:"varint,2,opt,name=Height,proto3" json:"height"`
	// 是否竖屏 0=否 1=是
	Rotate               int64    `protobuf:"varint,3,opt,name=Rotate,proto3" json:"rotate"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dimension) Reset()         { *m = Dimension{} }
func (m *Dimension) String() string { return proto.CompactTextString(m) }
func (*Dimension) ProtoMessage()    {}
func (*Dimension) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *Dimension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dimension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dimension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dimension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dimension.Merge(m, src)
}
func (m *Dimension) XXX_Size() int {
	return m.Size()
}
func (m *Dimension) XXX_DiscardUnknown() {
	xxx_messageInfo_Dimension.DiscardUnknown(m)
}

var xxx_messageInfo_Dimension proto.InternalMessageInfo

type Ract struct {
	X                    int32    `protobuf:"varint,1,opt,name=x,proto3" json:"x"`
	Y                    int32    `protobuf:"varint,2,opt,name=y,proto3" json:"y"`
	Width                int32    `protobuf:"varint,3,opt,name=width,proto3" json:"width"`
	Height               int32    `protobuf:"varint,4,opt,name=height,proto3" json:"height"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ract) Reset()         { *m = Ract{} }
func (m *Ract) String() string { return proto.CompactTextString(m) }
func (*Ract) ProtoMessage()    {}
func (*Ract) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *Ract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ract.Merge(m, src)
}
func (m *Ract) XXX_Size() int {
	return m.Size()
}
func (m *Ract) XXX_DiscardUnknown() {
	xxx_messageInfo_Ract.DiscardUnknown(m)
}

var xxx_messageInfo_Ract proto.InternalMessageInfo

type EdgeFrameAnimation struct {
	EdgeId               int64    `protobuf:"varint,1,opt,name=edge_id,json=edgeId,proto3" json:"edge_id"`
	Event                string   `protobuf:"bytes,2,opt,name=event,proto3" json:"event"`
	Position             Ract     `protobuf:"bytes,3,opt,name=position,proto3" json:"position"`
	SourcePic            string   `protobuf:"bytes,4,opt,name=source_pic,json=sourcePic,proto3" json:"source_pic"`
	ItemHeight           int32    `protobuf:"varint,5,opt,name=item_height,json=itemHeight,proto3" json:"item_height"`
	ItemWidth            int32    `protobuf:"varint,6,opt,name=item_width,json=itemWidth,proto3" json:"item_width"`
	ItemCount            int32    `protobuf:"varint,7,opt,name=item_count,json=itemCount,proto3" json:"item_count"`
	Fps                  int32    `protobuf:"varint,8,opt,name=fps,proto3" json:"fps"`
	Colums               int32    `protobuf:"varint,9,opt,name=colums,proto3" json:"colums"`
	Rows                 int32    `protobuf:"varint,10,opt,name=rows,proto3" json:"rows"`
	Loop                 int32    `protobuf:"varint,11,opt,name=loop,proto3" json:"loop"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EdgeFrameAnimation) Reset()         { *m = EdgeFrameAnimation{} }
func (m *EdgeFrameAnimation) String() string { return proto.CompactTextString(m) }
func (*EdgeFrameAnimation) ProtoMessage()    {}
func (*EdgeFrameAnimation) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *EdgeFrameAnimation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeFrameAnimation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeFrameAnimation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeFrameAnimation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeFrameAnimation.Merge(m, src)
}
func (m *EdgeFrameAnimation) XXX_Size() int {
	return m.Size()
}
func (m *EdgeFrameAnimation) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeFrameAnimation.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeFrameAnimation proto.InternalMessageInfo

type EdgeFrameAnimations struct {
	Animations           map[string]*EdgeFrameAnimation `protobuf:"bytes,1,rep,name=animations,proto3" json:"animations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *EdgeFrameAnimations) Reset()         { *m = EdgeFrameAnimations{} }
func (m *EdgeFrameAnimations) String() string { return proto.CompactTextString(m) }
func (*EdgeFrameAnimations) ProtoMessage()    {}
func (*EdgeFrameAnimations) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *EdgeFrameAnimations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeFrameAnimations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeFrameAnimations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeFrameAnimations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeFrameAnimations.Merge(m, src)
}
func (m *EdgeFrameAnimations) XXX_Size() int {
	return m.Size()
}
func (m *EdgeFrameAnimations) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeFrameAnimations.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeFrameAnimations proto.InternalMessageInfo

type RankScoreSubmitReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" form:"aid"`
	Bvid                 string   `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty" form:"bvid"`
	Cid                  int64    `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty" form:"cid" validate:"required"`
	CurrentMid           int64    `protobuf:"varint,4,opt,name=current_mid,json=currentMid,proto3" json:"current_mid,omitempty" form:"-"`
	Score                int32    `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty" form:"score"`
	Validation           uint32   `protobuf:"varint,6,opt,name=validation,proto3" json:"validation,omitempty" form:"validation"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankScoreSubmitReq) Reset()         { *m = RankScoreSubmitReq{} }
func (m *RankScoreSubmitReq) String() string { return proto.CompactTextString(m) }
func (*RankScoreSubmitReq) ProtoMessage()    {}
func (*RankScoreSubmitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *RankScoreSubmitReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankScoreSubmitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankScoreSubmitReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankScoreSubmitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankScoreSubmitReq.Merge(m, src)
}
func (m *RankScoreSubmitReq) XXX_Size() int {
	return m.Size()
}
func (m *RankScoreSubmitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RankScoreSubmitReq.DiscardUnknown(m)
}

var xxx_messageInfo_RankScoreSubmitReq proto.InternalMessageInfo

type RankListReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" form:"aid"`
	Bvid                 string   `protobuf:"bytes,2,opt,name=bvid,proto3" json:"bvid,omitempty" form:"bvid"`
	Cid                  int64    `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty" form:"cid" validate:"required"`
	Size_                int64    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty" form:"size" validate:"max=50,required"`
	CurrentMid           int64    `protobuf:"varint,5,opt,name=current_mid,json=currentMid,proto3" json:"current_mid,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankListReq) Reset()         { *m = RankListReq{} }
func (m *RankListReq) String() string { return proto.CompactTextString(m) }
func (*RankListReq) ProtoMessage()    {}
func (*RankListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *RankListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankListReq.Merge(m, src)
}
func (m *RankListReq) XXX_Size() int {
	return m.Size()
}
func (m *RankListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RankListReq.DiscardUnknown(m)
}

var xxx_messageInfo_RankListReq proto.InternalMessageInfo

type RankItem struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Score                int32    `protobuf:"varint,2,opt,name=score,proto3" json:"score"`
	Ranked               bool     `protobuf:"varint,3,opt,name=ranked,proto3" json:"ranked"`
	Ranking              int64    `protobuf:"varint,4,opt,name=ranking,proto3" json:"ranking"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Face                 string   `protobuf:"bytes,6,opt,name=face,proto3" json:"face"`
	Sign                 string   `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RankItem) Reset()         { *m = RankItem{} }
func (m *RankItem) String() string { return proto.CompactTextString(m) }
func (*RankItem) ProtoMessage()    {}
func (*RankItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *RankItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankItem.Merge(m, src)
}
func (m *RankItem) XXX_Size() int {
	return m.Size()
}
func (m *RankItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RankItem.DiscardUnknown(m)
}

var xxx_messageInfo_RankItem proto.InternalMessageInfo

type RankListReply struct {
	List                 []*RankItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	CurrentUser          *RankItem   `protobuf:"bytes,2,opt,name=current_user,json=currentUser,proto3" json:"current_user"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RankListReply) Reset()         { *m = RankListReply{} }
func (m *RankListReply) String() string { return proto.CompactTextString(m) }
func (*RankListReply) ProtoMessage()    {}
func (*RankListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *RankListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankListReply.Merge(m, src)
}
func (m *RankListReply) XXX_Size() int {
	return m.Size()
}
func (m *RankListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RankListReply.DiscardUnknown(m)
}

var xxx_messageInfo_RankListReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GraphRightsReq)(nil), "stein.gate.service.v1.GraphRightsReq")
	proto.RegisterType((*GraphRightsReply)(nil), "stein.gate.service.v1.GraphRightsReply")
	proto.RegisterType((*MarkEvaluationsReq)(nil), "stein.gate.service.v1.MarkEvaluationsReq")
	proto.RegisterType((*MarkEvaluationsReply)(nil), "stein.gate.service.v1.MarkEvaluationsReply")
	proto.RegisterMapType((map[int64]*MarkEvaluations)(nil), "stein.gate.service.v1.MarkEvaluationsReply.ItemsEntry")
	proto.RegisterType((*MarkEvaluations)(nil), "stein.gate.service.v1.MarkEvaluations")
	proto.RegisterType((*GraphInfoReq)(nil), "stein.gate.service.v1.GraphInfoReq")
	proto.RegisterType((*GraphInfoReply)(nil), "stein.gate.service.v1.GraphInfoReply")
	proto.RegisterType((*GraphViewReq)(nil), "stein.gate.service.v1.GraphViewReq")
	proto.RegisterType((*GraphViewReply)(nil), "stein.gate.service.v1.GraphViewReply")
	proto.RegisterType((*ViewReq)(nil), "stein.gate.service.v1.ViewReq")
	proto.RegisterType((*ViewReply)(nil), "stein.gate.service.v1.ViewReply")
	proto.RegisterType((*ViewsReq)(nil), "stein.gate.service.v1.ViewsReq")
	proto.RegisterType((*ViewsReply)(nil), "stein.gate.service.v1.ViewsReply")
	proto.RegisterMapType((map[int64]*ViewReply)(nil), "stein.gate.service.v1.ViewsReply.ViewsEntry")
	proto.RegisterMapType((map[int64]*ViewReply)(nil), "stein.gate.service.v1.ViewsReply.ViewsWithHistoryEntry")
	proto.RegisterType((*GraphInfo)(nil), "stein.gate.service.v1.GraphInfo")
	proto.RegisterType((*Skin)(nil), "stein.gate.service.v1.Skin")
	proto.RegisterType((*GraphNode)(nil), "stein.gate.service.v1.GraphNode")
	proto.RegisterType((*GraphEdge)(nil), "stein.gate.service.v1.GraphEdge")
	proto.RegisterType((*EdgeGroup)(nil), "stein.gate.service.v1.EdgeGroup")
	proto.RegisterType((*GameRecords)(nil), "stein.gate.service.v1.GameRecords")
	proto.RegisterType((*EvaluationReq)(nil), "stein.gate.service.v1.EvaluationReq")
	proto.RegisterType((*EvaluationReply)(nil), "stein.gate.service.v1.EvaluationReply")
	proto.RegisterType((*Page)(nil), "stein.gate.service.v1.Page")
	proto.RegisterType((*Dimension)(nil), "stein.gate.service.v1.Dimension")
	proto.RegisterType((*Ract)(nil), "stein.gate.service.v1.Ract")
	proto.RegisterType((*EdgeFrameAnimation)(nil), "stein.gate.service.v1.EdgeFrameAnimation")
	proto.RegisterType((*EdgeFrameAnimations)(nil), "stein.gate.service.v1.EdgeFrameAnimations")
	proto.RegisterMapType((map[string]*EdgeFrameAnimation)(nil), "stein.gate.service.v1.EdgeFrameAnimations.AnimationsEntry")
	proto.RegisterType((*RankScoreSubmitReq)(nil), "stein.gate.service.v1.RankScoreSubmitReq")
	proto.RegisterType((*RankListReq)(nil), "stein.gate.service.v1.RankListReq")
	proto.RegisterType((*RankItem)(nil), "stein.gate.service.v1.RankItem")
	proto.RegisterType((*RankListReply)(nil), "stein.gate.service.v1.RankListReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 2734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcb, 0x6f, 0x1c, 0xc7,
	0xd1, 0xf7, 0xbe, 0xb8, 0x3b, 0xb5, 0x7c, 0xa9, 0x25, 0xf9, 0x5b, 0xd3, 0x32, 0x87, 0x1e, 0x59,
	0x32, 0xfd, 0x59, 0xa2, 0x6d, 0x7d, 0x9f, 0x1f, 0x10, 0x6c, 0x07, 0x5a, 0x49, 0x96, 0x84, 0xf8,
	0xa1, 0x34, 0x15, 0xc9, 0x16, 0x10, 0x4c, 0x86, 0x3b, 0xcd, 0x65, 0x83, 0xbb, 0xd3, 0xab, 0x99,
	0xd9, 0x25, 0xd7, 0xff, 0x41, 0x72, 0xc8, 0xdd, 0xa7, 0x5c, 0xf2, 0xb7, 0x04, 0x06, 0x72, 0xc9,
	0x3d, 0xc0, 0xc2, 0xf1, 0x2d, 0xcc, 0x8d, 0xb7, 0x24, 0x40, 0x10, 0x54, 0x55, 0xcf, 0xce, 0x90,
	0xe2, 0xcb, 0x46, 0x00, 0x5f, 0x76, 0xbb, 0x7f, 0x55, 0xdd, 0x5d, 0x55, 0x5d, 0x8f, 0xee, 0x1e,
	0x70, 0x82, 0x81, 0x5e, 0x1b, 0xc4, 0x26, 0x35, 0xe2, 0x62, 0x92, 0x2a, 0x1d, 0xad, 0x75, 0x83,
	0x54, 0xad, 0x25, 0x2a, 0x1e, 0xe9, 0x8e, 0x5a, 0x1b, 0xbd, 0xb3, 0x74, 0xbd, 0xab, 0xd3, 0xad,
	0xe1, 0xc6, 0x5a, 0xc7, 0xf4, 0xdf, 0xea, 0x9a, 0xae, 0x79, 0x8b, 0xb8, 0x37, 0x86, 0x9b, 0xd4,
	0xa3, 0x0e, 0xb5, 0x78, 0x16, 0xef, 0x37, 0x25, 0x98, 0xbf, 0x17, 0x07, 0x83, 0x2d, 0xa9, 0xbb,
	0x5b, 0x69, 0x22, 0xd5, 0x33, 0xb1, 0x06, 0x95, 0x40, 0x87, 0xad, 0xd2, 0x4a, 0x69, 0xb5, 0xd2,
	0xbe, 0xb4, 0x3f, 0x71, 0x5b, 0xa3, 0xa0, 0xa7, 0xc3, 0x20, 0x55, 0x37, 0xbd, 0x6e, 0xfa, 0xd1,
	0xdb, 0xd7, 0x62, 0xf5, 0x6c, 0xa8, 0x63, 0x15, 0x7a, 0x12, 0x19, 0xc5, 0x05, 0xa8, 0x6d, 0x0c,
	0x75, 0x2f, 0x6c, 0x95, 0x57, 0x4a, 0xab, 0x35, 0xc9, 0x1d, 0xf1, 0x22, 0xcc, 0x84, 0x0a, 0x85,
	0x6a, 0x55, 0x56, 0x4a, 0xab, 0x8e, 0xb4, 0x3d, 0xf1, 0x12, 0x34, 0xfa, 0x66, 0x43, 0xfb, 0xc1,
	0x60, 0xd0, 0xaa, 0x12, 0xa5, 0x8e, 0xfd, 0x5b, 0x83, 0x81, 0xf7, 0x0e, 0x2c, 0x1e, 0x10, 0x65,
	0xd0, 0x1b, 0x8b, 0x57, 0x00, 0x82, 0x5e, 0xcf, 0xec, 0xf8, 0x83, 0x5e, 0x30, 0x26, 0x99, 0x1a,
	0xd2, 0x21, 0xe4, 0x61, 0x2f, 0x18, 0x7b, 0x3e, 0x88, 0xcf, 0x82, 0x78, 0xfb, 0xee, 0x28, 0xe8,
	0x0d, 0x83, 0x54, 0x9b, 0x88, 0x34, 0x58, 0x84, 0x4a, 0x3f, 0xd3, 0x40, 0x62, 0x53, 0xbc, 0x0f,
	0xd5, 0x40, 0x87, 0x49, 0xab, 0xbc, 0x52, 0x59, 0xad, 0xb4, 0x2f, 0xef, 0x4f, 0x5c, 0x37, 0x57,
	0xaa, 0x1f, 0xec, 0x7e, 0xf4, 0xee, 0xdb, 0xd7, 0x0e, 0xe9, 0x46, 0x03, 0xbc, 0x3f, 0x96, 0xe0,
	0xc2, 0x73, 0x2b, 0xa0, 0x60, 0x9f, 0x42, 0x4d, 0xa7, 0xaa, 0x9f, 0xb4, 0x4a, 0x2b, 0x95, 0xd5,
	0xe6, 0x8d, 0xf7, 0xd6, 0x8e, 0xdc, 0x8e, 0xb5, 0xa3, 0xc6, 0xae, 0x3d, 0xc0, 0x81, 0x77, 0xa3,
	0x34, 0x1e, 0x4b, 0x9e, 0x64, 0xe9, 0xd7, 0x00, 0x39, 0x88, 0xf2, 0x6f, 0xab, 0x71, 0x26, 0xff,
	0xb6, 0x1a, 0x8b, 0x0f, 0xa1, 0x86, 0x93, 0x28, 0xb2, 0x71, 0xf3, 0xc6, 0xd5, 0x33, 0xae, 0xc6,
	0x83, 0x6e, 0x96, 0x3f, 0x28, 0x79, 0x77, 0x61, 0xe1, 0x10, 0x55, 0x08, 0xa8, 0xf6, 0x83, 0x78,
	0xdb, 0xae, 0x43, 0x6d, 0xb1, 0x0c, 0xa0, 0xa6, 0x2c, 0xb4, 0x9a, 0x23, 0x0b, 0x88, 0xf7, 0x31,
	0xcc, 0xd2, 0x1e, 0x3d, 0x88, 0x36, 0xcd, 0x8f, 0x70, 0x16, 0xef, 0xa1, 0x75, 0x37, 0x1e, 0x8f,
	0x86, 0xfc, 0x18, 0x9c, 0x6e, 0x86, 0xd0, 0x3c, 0xcd, 0x1b, 0x2b, 0xc7, 0xa8, 0x97, 0x8f, 0xcc,
	0x87, 0x4c, 0x25, 0x7a, 0xac, 0xd5, 0xce, 0x8f, 0x91, 0xe8, 0x9b, 0x2c, 0x02, 0x78, 0x02, 0x14,
	0xe9, 0x2d, 0xa8, 0x0e, 0x82, 0xae, 0xb2, 0xd2, 0xbc, 0x7c, 0x8c, 0x34, 0x0f, 0x83, 0xae, 0x92,
	0xc4, 0x28, 0xde, 0x83, 0x1a, 0x09, 0x64, 0xb7, 0xe7, 0x74, 0xf9, 0x99, 0xfd, 0x90, 0xb5, 0x2b,
	0xcf, 0x59, 0x3b, 0x80, 0xfa, 0x8f, 0x54, 0x2b, 0x8b, 0x81, 0x72, 0x1e, 0x03, 0x14, 0xa7, 0x23,
	0x1d, 0xda, 0x75, 0xb8, 0xe3, 0xed, 0x97, 0xc1, 0xf9, 0x09, 0x34, 0xbf, 0x0d, 0xb3, 0x9d, 0x61,
	0x1c, 0xab, 0x28, 0xf5, 0x23, 0x13, 0x72, 0x92, 0x38, 0x65, 0xf8, 0xe7, 0x26, 0x54, 0xb2, 0x69,
	0x47, 0x61, 0x47, 0xbc, 0x0a, 0xb3, 0xb1, 0xea, 0x98, 0x38, 0xf4, 0x93, 0x34, 0x48, 0x15, 0xe5,
	0x93, 0x9a, 0x6c, 0x32, 0xb6, 0x8e, 0xd0, 0xd4, 0xc7, 0x6b, 0xc7, 0xfa, 0xf8, 0xcc, 0x61, 0xab,
	0x17, 0x65, 0x53, 0x61, 0x57, 0xb5, 0xea, 0xa7, 0xcb, 0x76, 0x37, 0xec, 0xe6, 0xb2, 0x61, 0x47,
	0xbc, 0x0c, 0x4e, 0x6a, 0x82, 0x24, 0xf5, 0xfb, 0x49, 0xb7, 0xd5, 0xa0, 0x35, 0x1a, 0x04, 0x7c,
	0x96, 0x74, 0x31, 0xab, 0x34, 0xd0, 0xe8, 0x94, 0xad, 0x3e, 0xb4, 0xb9, 0xa9, 0x44, 0xb9, 0x69,
	0x75, 0x7f, 0xe2, 0xbe, 0xf6, 0x5c, 0x6e, 0x0a, 0xf5, 0x48, 0x1d, 0x99, 0xa0, 0xc4, 0x23, 0x38,
	0x87, 0xff, 0xfe, 0x8e, 0x4e, 0xb7, 0xfc, 0x2d, 0x9d, 0xa4, 0x26, 0x1e, 0xdb, 0x34, 0x77, 0xf6,
	0xa9, 0x16, 0x70, 0x8a, 0x27, 0x3a, 0xdd, 0xba, 0xcf, 0x13, 0x64, 0xde, 0x53, 0x39, 0xc2, 0x7b,
	0xaa, 0x45, 0xef, 0xf9, 0x67, 0x19, 0xc0, 0x2a, 0x82, 0xee, 0xd3, 0x86, 0xda, 0x08, 0x7b, 0x36,
	0x29, 0x5e, 0x3b, 0xc6, 0x64, 0xf9, 0x08, 0x6e, 0xda, 0x54, 0x48, 0x43, 0x85, 0x02, 0x41, 0x8d,
	0xe7, 0x35, 0x6a, 0xde, 0x78, 0xff, 0x8c, 0x13, 0x16, 0x54, 0xe1, 0xb9, 0x17, 0x47, 0x87, 0xe0,
	0xa5, 0xa7, 0x56, 0xf0, 0xe3, 0x32, 0xee, 0x7b, 0x07, 0x33, 0xee, 0xca, 0x09, 0x2b, 0xd3, 0xc2,
	0x85, 0x5c, 0xbb, 0xa4, 0xe0, 0xe2, 0x91, 0x62, 0xfc, 0x77, 0x97, 0xf1, 0xbe, 0xa9, 0x80, 0x33,
	0x0d, 0x2c, 0x31, 0x0f, 0xe5, 0x69, 0xcd, 0x2b, 0x73, 0x02, 0x08, 0xf2, 0x04, 0x80, 0x29, 0xe1,
	0x65, 0x70, 0x36, 0x75, 0x9c, 0xa4, 0x7e, 0x67, 0xba, 0xb5, 0x0d, 0x02, 0x6e, 0x17, 0x89, 0x91,
	0xdd, 0xe3, 0x8c, 0xf8, 0xb9, 0x0e, 0xc5, 0x65, 0x98, 0x8b, 0x55, 0x57, 0x9b, 0x28, 0xe8, 0xf9,
	0xa3, 0x20, 0x4e, 0x28, 0x9c, 0x1c, 0x39, 0x9b, 0x81, 0x8f, 0x83, 0x38, 0x11, 0x2e, 0x34, 0xbb,
	0x3d, 0xb3, 0x91, 0xb1, 0xd8, 0xb8, 0x62, 0x88, 0x18, 0x5a, 0x50, 0x1f, 0xa9, 0x38, 0xc1, 0xa0,
	0xab, 0xd3, 0x02, 0x59, 0x57, 0x2c, 0x43, 0x3d, 0xd9, 0xd6, 0x91, 0xaf, 0x43, 0x0a, 0x95, 0x4a,
	0xbb, 0xb6, 0x37, 0x71, 0x4b, 0xd7, 0xe5, 0x0c, 0xa2, 0x0f, 0x42, 0x9c, 0x3a, 0x32, 0x7e, 0x3a,
	0x4c, 0x4d, 0xac, 0x83, 0x5e, 0xcb, 0xa1, 0x38, 0x87, 0xc8, 0x3c, 0xb2, 0x88, 0x78, 0x1d, 0x16,
	0x22, 0xe3, 0x6f, 0x04, 0x9d, 0xed, 0x34, 0x0e, 0x3a, 0xdb, 0x3a, 0xea, 0xb6, 0x80, 0x98, 0xe6,
	0x23, 0xd3, 0x2e, 0xa0, 0xa8, 0x49, 0x64, 0xfc, 0x42, 0xf8, 0x37, 0x89, 0x6d, 0x36, 0x32, 0x79,
	0x65, 0x14, 0xb7, 0xe0, 0x95, 0xee, 0x50, 0x25, 0xa9, 0x6f, 0x46, 0x2a, 0xde, 0x89, 0x75, 0xaa,
	0xfc, 0x83, 0xea, 0xcf, 0xd2, 0xa0, 0x25, 0x62, 0xfa, 0x22, 0xe3, 0x91, 0x05, 0x63, 0x78, 0xff,
	0x2e, 0x43, 0x75, 0x7d, 0x5b, 0x47, 0x98, 0xa3, 0x3a, 0x5b, 0x46, 0x77, 0x94, 0xaf, 0xfb, 0x59,
	0x66, 0x75, 0x64, 0x93, 0xb1, 0x07, 0x08, 0x89, 0x55, 0x58, 0x4c, 0x75, 0xda, 0x53, 0x7e, 0xaa,
	0x76, 0x53, 0xbf, 0x63, 0x7a, 0x26, 0xb6, 0x95, 0x77, 0x9e, 0xf0, 0x47, 0x6a, 0x37, 0xbd, 0x8d,
	0xa8, 0xb8, 0x06, 0x82, 0x39, 0x93, 0xad, 0x20, 0x34, 0x3b, 0x96, 0x97, 0xf3, 0x39, 0xcf, 0xb1,
	0x4e, 0x04, 0xe6, 0x7e, 0x07, 0x2e, 0x1e, 0xe0, 0x36, 0x9b, 0x9b, 0x89, 0x4a, 0xfd, 0x5d, 0xda,
	0xde, 0xb2, 0x14, 0x85, 0x01, 0x5f, 0x10, 0xe9, 0xcb, 0xe3, 0x86, 0x8c, 0x69, 0xc3, 0x8f, 0x1a,
	0xf2, 0x95, 0x58, 0x83, 0xf3, 0x07, 0x86, 0xc4, 0x41, 0xa8, 0x87, 0xbc, 0xfd, 0x65, 0x79, 0xae,
	0x30, 0x40, 0x12, 0x41, 0xbc, 0x09, 0xe7, 0x06, 0xb1, 0xe9, 0xc6, 0x2a, 0x49, 0x36, 0x82, 0xd8,
	0xaa, 0x50, 0x67, 0x15, 0x0a, 0x04, 0x56, 0xe1, 0x03, 0x68, 0x15, 0x99, 0x0f, 0xa8, 0xcd, 0x49,
	0xf5, 0xc5, 0x02, 0xbd, 0xa0, 0xbc, 0xf7, 0xdb, 0xb2, 0x0d, 0x0e, 0xaa, 0x14, 0x87, 0x83, 0x43,
	0x40, 0x35, 0x0a, 0xfa, 0xca, 0x9a, 0x99, 0xda, 0x78, 0x32, 0xa5, 0xda, 0xe4, 0x4f, 0xa3, 0xa3,
	0xce, 0xa7, 0x0c, 0x8a, 0xa5, 0xce, 0x34, 0x2c, 0xb0, 0x89, 0xcc, 0x3a, 0xc1, 0xb2, 0x13, 0xa7,
	0x64, 0x9b, 0x9a, 0xac, 0xeb, 0x64, 0x1d, 0xbb, 0x98, 0x29, 0x4d, 0x3a, 0x1e, 0x28, 0x32, 0x41,
	0x4d, 0x72, 0x07, 0xe3, 0x2b, 0xd9, 0x32, 0x3b, 0x7e, 0xaa, 0xfb, 0xca, 0xba, 0x7f, 0x03, 0x81,
	0x47, 0xba, 0xaf, 0x70, 0xc8, 0x8e, 0x0e, 0xd3, 0x2d, 0xf6, 0x7e, 0xc9, 0x1d, 0x3c, 0x42, 0x6f,
	0x29, 0x3c, 0x0b, 0x93, 0xc3, 0x57, 0xa4, 0xed, 0xa1, 0x34, 0x49, 0x10, 0x93, 0x83, 0x3b, 0x12,
	0x9b, 0xc5, 0xf8, 0x69, 0x1e, 0x11, 0x3f, 0xde, 0xef, 0xaa, 0xd6, 0x18, 0x54, 0x9a, 0x0e, 0x1b,
	0xa3, 0xa8, 0x78, 0xf9, 0xa0, 0xe2, 0x98, 0x15, 0x62, 0xd3, 0xcf, 0x6b, 0x34, 0x66, 0x85, 0xd8,
	0xf4, 0xc9, 0xa8, 0x17, 0xa0, 0x46, 0xdb, 0x9b, 0x95, 0x04, 0xea, 0x88, 0xff, 0x81, 0x7a, 0x6a,
	0x78, 0x00, 0x17, 0xdd, 0x99, 0xd4, 0x10, 0xfb, 0x32, 0x34, 0x2d, 0x81, 0x12, 0xd0, 0x0c, 0x11,
	0x1d, 0x26, 0x62, 0x06, 0x7a, 0x11, 0x66, 0x76, 0x58, 0x5d, 0x36, 0x8f, 0xed, 0xe1, 0x15, 0x80,
	0x02, 0x23, 0xe8, 0xe9, 0x6e, 0x44, 0x16, 0xaa, 0x49, 0x07, 0x91, 0x5b, 0x08, 0x88, 0xf3, 0x50,
	0x1b, 0x98, 0xc4, 0xdf, 0xb5, 0x46, 0xaa, 0x0e, 0x4c, 0xf2, 0x65, 0x06, 0x8e, 0xc9, 0x48, 0x0c,
	0x7e, 0x85, 0x13, 0xe9, 0xc4, 0x0f, 0xd5, 0x66, 0x30, 0xec, 0xa5, 0x36, 0xf0, 0x1d, 0x9d, 0xdc,
	0x61, 0x00, 0xd7, 0x4f, 0x3a, 0xb1, 0x1e, 0xa4, 0x14, 0xde, 0x8e, 0xb4, 0x3d, 0x71, 0x09, 0x9c,
	0x20, 0x4d, 0x63, 0xbd, 0x31, 0x4c, 0x55, 0x6b, 0x8e, 0x48, 0x39, 0x80, 0xd4, 0x8e, 0x89, 0x42,
	0x4d, 0xc9, 0x64, 0x9e, 0xa9, 0x53, 0x80, 0x4d, 0x6b, 0x86, 0x03, 0x34, 0xed, 0x42, 0x66, 0x5a,
	0x33, 0x1c, 0xb0, 0x69, 0x75, 0xe2, 0x6f, 0xe9, 0x30, 0x54, 0x51, 0x6b, 0x91, 0x84, 0x69, 0xe8,
	0xe4, 0x3e, 0xf5, 0x73, 0x87, 0x38, 0xc7, 0x3e, 0x74, 0xd8, 0x21, 0x04, 0xc1, 0x99, 0x43, 0xb0,
	0xc9, 0xc9, 0xb3, 0xce, 0x67, 0x26, 0x27, 0xbf, 0xb2, 0x04, 0x74, 0xc6, 0x0b, 0x3c, 0x22, 0x35,
	0x8f, 0xc6, 0x03, 0xe5, 0xfd, 0xa9, 0x0c, 0x0e, 0xfa, 0xc2, 0x3d, 0x14, 0xe6, 0x87, 0x38, 0xc4,
	0x74, 0xcf, 0x2b, 0xc5, 0x3d, 0x77, 0xa1, 0xc9, 0x39, 0x80, 0x23, 0x93, 0xfd, 0x01, 0x08, 0xe2,
	0x38, 0xbe, 0x0a, 0x0b, 0xcc, 0xb0, 0x69, 0xa2, 0xd4, 0x4f, 0xf4, 0xd7, 0xca, 0x96, 0x90, 0x39,
	0x82, 0x3f, 0x31, 0x51, 0xba, 0xae, 0xbf, 0x56, 0xb8, 0x45, 0x14, 0x53, 0xac, 0x8c, 0x75, 0x11,
	0x42, 0x48, 0x9f, 0x25, 0x68, 0x84, 0xc3, 0x98, 0x13, 0xb7, 0x8d, 0xa1, 0xac, 0x8f, 0x21, 0x4d,
	0x8a, 0x72, 0x08, 0x51, 0x1b, 0xe5, 0x1a, 0x04, 0xc3, 0x44, 0xf9, 0x23, 0x1d, 0x2a, 0x93, 0xd5,
	0x0d, 0x82, 0x1e, 0x23, 0x22, 0x56, 0x60, 0x76, 0x33, 0x08, 0x95, 0xaf, 0x23, 0x5e, 0x91, 0x8b,
	0x06, 0x20, 0xf6, 0x20, 0xa2, 0x25, 0x3d, 0x98, 0x23, 0x0e, 0x33, 0xb4, 0x42, 0xb1, 0xdf, 0x34,
	0x11, 0xfc, 0x62, 0x48, 0x62, 0x79, 0xdf, 0x95, 0xa1, 0x79, 0x2f, 0xe8, 0x2b, 0x49, 0x07, 0xcf,
	0xe4, 0x87, 0xd8, 0xd3, 0x56, 0xe9, 0x4a, 0x5e, 0xa5, 0xed, 0xd1, 0xab, 0x9a, 0x1f, 0xbd, 0x5a,
	0x50, 0xe7, 0x72, 0x91, 0xd5, 0xdd, 0xac, 0x4b, 0xc5, 0xa5, 0x78, 0x8a, 0x66, 0x83, 0x1d, 0x38,
	0x23, 0xbb, 0xd0, 0x64, 0x1f, 0xe3, 0xca, 0xc5, 0x89, 0x16, 0x18, 0x3a, 0xaa, 0x6c, 0x37, 0x9e,
	0x2b, 0xdb, 0xd3, 0x93, 0x9f, 0x53, 0x38, 0xf9, 0x15, 0x97, 0xa6, 0x43, 0x32, 0x1c, 0x58, 0x9a,
	0xf2, 0xcc, 0x15, 0x98, 0xcf, 0x58, 0x3a, 0xc3, 0x38, 0x31, 0x31, 0x27, 0x27, 0x39, 0x67, 0xd1,
	0xdb, 0x04, 0x62, 0x49, 0x66, 0xb2, 0xcf, 0x6a, 0xd9, 0xf0, 0x9b, 0x65, 0xf0, 0x36, 0x61, 0xde,
	0xab, 0x30, 0x97, 0x17, 0x68, 0x7b, 0xc7, 0x0f, 0xf2, 0x3b, 0x3e, 0x5e, 0xe4, 0xae, 0xc0, 0x42,
	0x91, 0x05, 0xcf, 0xa3, 0x02, 0xaa, 0x58, 0xea, 0x6d, 0xd1, 0xa5, 0xb6, 0xf7, 0xb7, 0x32, 0x54,
	0xf1, 0x02, 0x23, 0x5e, 0x82, 0xca, 0xed, 0xe9, 0x8d, 0xaa, 0xbe, 0x37, 0x71, 0x31, 0xb1, 0x4b,
	0xc4, 0xc4, 0x25, 0x66, 0xe1, 0x17, 0x8d, 0x76, 0x63, 0x6f, 0xe2, 0xd2, 0x6d, 0x47, 0xf2, 0xc0,
	0x4b, 0x50, 0xfd, 0x24, 0x36, 0x7d, 0x0e, 0x01, 0xa6, 0x62, 0x4e, 0x94, 0x84, 0xf2, 0xd8, 0x38,
	0xe5, 0x20, 0xc8, 0xc6, 0xc6, 0xa9, 0x24, 0x54, 0xac, 0x42, 0xe3, 0x4e, 0xe6, 0xc1, 0x94, 0x1e,
	0xdb, 0xb3, 0x7b, 0x13, 0x77, 0xea, 0xc5, 0x72, 0x4a, 0x45, 0xf1, 0x1e, 0xdb, 0x34, 0xe9, 0xb0,
	0x78, 0x23, 0x14, 0xef, 0xb1, 0x0e, 0xc5, 0x75, 0xa8, 0xde, 0x51, 0x49, 0x87, 0x37, 0xb3, 0xfd,
	0xd2, 0xde, 0xc4, 0xbd, 0x18, 0x2a, 0xce, 0x56, 0xda, 0x44, 0xd7, 0x4c, 0x5f, 0xa7, 0xaa, 0x3f,
	0x48, 0xc7, 0x92, 0xd8, 0xc4, 0x15, 0xa8, 0x3f, 0x51, 0x1b, 0x9f, 0xea, 0x68, 0x9b, 0x77, 0xb7,
	0xdd, 0xdc, 0x9b, 0xb8, 0xf5, 0x1d, 0xb5, 0xd1, 0xd3, 0xd1, 0xb6, 0xcc, 0x68, 0xe2, 0x17, 0xe0,
	0xdc, 0xd1, 0x7d, 0x15, 0xd1, 0x01, 0xcd, 0x39, 0xf1, 0x38, 0x3a, 0xe5, 0x6b, 0x9f, 0xfb, 0x76,
	0xe2, 0xbe, 0xb0, 0x37, 0x71, 0x9d, 0x30, 0x83, 0x64, 0x3e, 0x8b, 0x97, 0x16, 0xa6, 0x14, 0x2e,
	0xd4, 0x9e, 0x50, 0x4e, 0x63, 0x8b, 0x3b, 0x7b, 0x13, 0x97, 0xf3, 0x9a, 0x64, 0x5c, 0x78, 0x30,
	0x73, 0x9f, 0xd3, 0x1b, 0x05, 0x49, 0x1b, 0xf6, 0x26, 0xae, 0x4d, 0x71, 0xd2, 0x52, 0x90, 0x47,
	0x1a, 0xba, 0xec, 0x55, 0x72, 0x9e, 0x98, 0x10, 0x69, 0x29, 0xde, 0x10, 0xaa, 0x32, 0xe8, 0xa4,
	0xe2, 0x3c, 0x94, 0x76, 0x69, 0xb1, 0x1a, 0xd7, 0xc3, 0x5d, 0x59, 0xda, 0x45, 0x70, 0x6c, 0xf7,
	0x95, 0xc0, 0xb1, 0x2c, 0x8d, 0x51, 0x34, 0x4e, 0xb7, 0x15, 0x22, 0x14, 0x45, 0xdb, 0xc9, 0x44,
	0xb3, 0x99, 0x97, 0xee, 0x98, 0x07, 0x45, 0xe3, 0x7f, 0xef, 0xbb, 0x0a, 0x08, 0xf4, 0xfb, 0x4f,
	0xe2, 0xa0, 0xaf, 0x6e, 0x45, 0xba, 0xcf, 0xfb, 0xf8, 0x1a, 0xd4, 0x31, 0x40, 0xfc, 0xa9, 0xab,
	0x91, 0xf5, 0x2d, 0x24, 0x67, 0xb0, 0x41, 0x27, 0xdc, 0x9a, 0x1a, 0xa9, 0x88, 0x55, 0x77, 0x58,
	0x02, 0x02, 0x24, 0xff, 0x89, 0x07, 0xd0, 0x18, 0x98, 0x44, 0x4f, 0x1f, 0x0a, 0x8e, 0xbf, 0x9d,
	0xa3, 0xee, 0xed, 0x45, 0xbb, 0x2f, 0xd3, 0x41, 0x72, 0xda, 0x12, 0xd7, 0x01, 0x12, 0x33, 0x8c,
	0x3b, 0xca, 0x1f, 0xe8, 0x8e, 0xf5, 0xd3, 0xf9, 0xbd, 0x89, 0x5b, 0x40, 0xa5, 0xc3, 0xed, 0x87,
	0xba, 0x23, 0xde, 0x86, 0x26, 0xfa, 0x93, 0x6f, 0x0d, 0x40, 0xa7, 0x9d, 0xf6, 0xc2, 0xde, 0xc4,
	0x2d, 0xc2, 0x12, 0xb0, 0x63, 0x37, 0xe9, 0x3a, 0x50, 0xcf, 0x67, 0x9b, 0xd2, 0x31, 0x88, 0x17,
	0xc8, 0x51, 0xe9, 0x60, 0x9b, 0xf7, 0x3d, 0x63, 0xef, 0x98, 0x61, 0xc4, 0xc5, 0xbf, 0xc8, 0x4e,
	0x28, 0xb3, 0xdf, 0xc6, 0x26, 0x06, 0xc6, 0xe6, 0x80, 0x13, 0x55, 0x8d, 0x03, 0x63, 0x73, 0x90,
	0x48, 0xfc, 0xc1, 0x6d, 0xea, 0x98, 0xde, 0xb0, 0x9f, 0x70, 0xaa, 0xe7, 0x6d, 0x62, 0x44, 0xda,
	0x7f, 0x8c, 0xcf, 0xd8, 0xec, 0x24, 0x9c, 0xea, 0x39, 0x3e, 0xb1, 0x2f, 0xe9, 0x17, 0xa9, 0x3d,
	0x63, 0x06, 0x9c, 0xe5, 0x99, 0x8a, 0x7d, 0x49, 0xbf, 0xde, 0x5f, 0x4a, 0x70, 0xfe, 0xf9, 0x2d,
	0x4e, 0xc4, 0x53, 0x80, 0x60, 0xda, 0xb3, 0x97, 0xdf, 0x9b, 0xc7, 0x6c, 0xcf, 0x11, 0xe3, 0xd7,
	0xf2, 0x26, 0x5f, 0x57, 0x0b, 0xb3, 0x2d, 0x6d, 0xc1, 0xc2, 0x21, 0x72, 0xf1, 0x1a, 0xe9, 0xf0,
	0x35, 0xf2, 0x67, 0x07, 0xaf, 0x91, 0x6f, 0x9c, 0x79, 0xed, 0xe2, 0x7d, 0xf2, 0xf7, 0x65, 0x10,
	0x32, 0x88, 0xb6, 0xd7, 0x3b, 0x26, 0x56, 0xeb, 0xc3, 0x8d, 0xbe, 0x4e, 0x31, 0xd3, 0xae, 0x14,
	0x5f, 0x9e, 0xe6, 0xf7, 0x27, 0x2e, 0x6c, 0x9a, 0xb8, 0x7f, 0xd3, 0xc3, 0x9c, 0xcb, 0x25, 0xeb,
	0x32, 0x54, 0x37, 0x46, 0xb6, 0xb6, 0x39, 0xed, 0x85, 0xfd, 0x89, 0xdb, 0x64, 0x16, 0x44, 0x3d,
	0x49, 0x44, 0xf1, 0xff, 0x7c, 0x86, 0xe6, 0xb0, 0xf5, 0xf6, 0x27, 0xee, 0x32, 0xf3, 0x74, 0x74,
	0xe8, 0xad, 0xe4, 0xaf, 0x14, 0x85, 0x67, 0xac, 0x0e, 0xa5, 0xba, 0xac, 0xa4, 0xf8, 0xd3, 0xaa,
	0xd8, 0x9e, 0xdd, 0x9f, 0xb8, 0x0d, 0x1e, 0x7d, 0xdd, 0x93, 0x60, 0x19, 0x3e, 0xd3, 0xa1, 0xb8,
	0x0a, 0xb5, 0x04, 0xa5, 0xb7, 0x5e, 0xba, 0xb8, 0x3f, 0x71, 0x67, 0x99, 0x91, 0x60, 0x4f, 0x32,
	0x59, 0xbc, 0x0b, 0x60, 0x97, 0xcc, 0x9e, 0x80, 0xe6, 0xda, 0x17, 0xf7, 0x27, 0xee, 0x39, 0x66,
	0xce, 0x69, 0x9e, 0x2c, 0x30, 0x7a, 0xff, 0x28, 0x41, 0x13, 0x2d, 0xf4, 0xa9, 0x4e, 0x7e, 0x7a,
	0xd3, 0x7c, 0x0c, 0x55, 0x3a, 0x48, 0xb1, 0x4d, 0xfe, 0x77, 0x7f, 0xe2, 0x5e, 0xb5, 0xaa, 0xea,
	0xaf, 0x55, 0x71, 0x9c, 0x7d, 0xf8, 0x29, 0xbc, 0x1c, 0x21, 0xc7, 0x61, 0xd3, 0xd6, 0x4e, 0x36,
	0xad, 0xf7, 0xf7, 0x12, 0x34, 0x50, 0xf7, 0x07, 0xa9, 0xea, 0x63, 0x0c, 0xf6, 0x0f, 0xd6, 0xce,
	0x3e, 0x16, 0x27, 0x3c, 0xad, 0xb8, 0xd9, 0x16, 0x94, 0xf3, 0x5c, 0x4a, 0x40, 0x66, 0x7b, 0x0f,
	0x66, 0xe2, 0x20, 0xda, 0x56, 0xac, 0x70, 0xc3, 0xa6, 0x70, 0x42, 0xa4, 0xfd, 0xc7, 0x92, 0x85,
	0x2d, 0xbc, 0xc7, 0x57, 0xf3, 0xa4, 0x69, 0x21, 0x99, 0x35, 0x30, 0x5a, 0xe9, 0x1a, 0x57, 0xcb,
	0x6b, 0x2d, 0xf6, 0xed, 0x85, 0xee, 0x12, 0x54, 0x37, 0x83, 0x8e, 0xb2, 0x25, 0x94, 0xeb, 0x74,
	0xd0, 0x51, 0x92, 0x7e, 0x91, 0x9a, 0xe0, 0x85, 0xa2, 0x9e, 0x53, 0xb1, 0x2f, 0xe9, 0xd7, 0xfb,
	0x43, 0x09, 0xe6, 0xf2, 0x9d, 0xc6, 0xb3, 0xc4, 0x47, 0x50, 0xed, 0xe9, 0x24, 0xb5, 0xd1, 0xed,
	0x1e, 0x9b, 0x7c, 0xd9, 0x42, 0x36, 0x75, 0xe0, 0x68, 0xfa, 0x15, 0x8f, 0xf2, 0xf3, 0xd2, 0x30,
	0x51, 0xb1, 0x0d, 0xd4, 0x53, 0xa7, 0x59, 0xdc, 0x9b, 0xb8, 0x07, 0x06, 0x4e, 0x8f, 0x58, 0xbf,
	0x4c, 0x54, 0x7c, 0xe3, 0x5f, 0x55, 0x80, 0x75, 0x9c, 0x21, 0xb9, 0x17, 0xa4, 0x4a, 0x3c, 0x29,
	0x3e, 0x08, 0x5d, 0x3e, 0xf5, 0x2d, 0x56, 0x3d, 0x5b, 0xba, 0x72, 0x3a, 0x13, 0x2a, 0x7f, 0x1f,
	0xaa, 0x8f, 0xb5, 0xda, 0x11, 0xcb, 0x27, 0xbe, 0x4f, 0x3d, 0x5b, 0x3a, 0xf5, 0xfd, 0x4a, 0xfc,
	0x1c, 0x6a, 0xf4, 0x36, 0x26, 0xdc, 0x93, 0xdf, 0xf2, 0x9e, 0x2d, 0xbd, 0x7a, 0xea, 0x63, 0xdf,
	0x54, 0x5f, 0x92, 0xed, 0x44, 0x7d, 0x33, 0x01, 0xaf, 0x9c, 0xce, 0x84, 0x13, 0x3f, 0x05, 0x28,
	0xbc, 0x07, 0xbd, 0x76, 0x5c, 0x3a, 0x2d, 0x9e, 0x48, 0x97, 0xae, 0x9e, 0x81, 0x0b, 0xe7, 0xfe,
	0x15, 0x34, 0x0b, 0x9f, 0xb9, 0xc4, 0x89, 0x12, 0x4d, 0xbf, 0xca, 0x2d, 0xbd, 0x7e, 0x16, 0x36,
	0x9c, 0x5e, 0x3f, 0xff, 0xa1, 0xe7, 0x8d, 0xb3, 0x7e, 0x9c, 0x7a, 0xb6, 0xf4, 0xe6, 0x0f, 0xf8,
	0x8e, 0xd5, 0xbe, 0xf8, 0xed, 0x5f, 0x97, 0x5f, 0xf8, 0xf6, 0xfb, 0xe5, 0xd2, 0x9f, 0xbf, 0x5f,
	0x2e, 0x7d, 0xf7, 0xfd, 0x72, 0xe9, 0x69, 0x25, 0x18, 0xe8, 0x8d, 0x19, 0xfa, 0xb4, 0xf8, 0x7f,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xf2, 0x9c, 0x1a, 0xad, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SteinsGateClient is the client API for SteinsGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SteinsGateClient interface {
	GraphInfo(ctx context.Context, in *GraphInfoReq, opts ...grpc.CallOption) (*GraphInfoReply, error)
	View(ctx context.Context, in *ViewReq, opts ...grpc.CallOption) (*ViewReply, error)
	Views(ctx context.Context, in *ViewsReq, opts ...grpc.CallOption) (*ViewsReply, error)
	GraphView(ctx context.Context, in *GraphViewReq, opts ...grpc.CallOption) (*GraphViewReply, error)
	Evaluation(ctx context.Context, in *EvaluationReq, opts ...grpc.CallOption) (*EvaluationReply, error)
	GraphRights(ctx context.Context, in *GraphRightsReq, opts ...grpc.CallOption) (*GraphRightsReply, error)
	MarkEvaluations(ctx context.Context, in *MarkEvaluationsReq, opts ...grpc.CallOption) (*MarkEvaluationsReply, error)
}

type steinsGateClient struct {
	cc *grpc.ClientConn
}

func NewSteinsGateClient(cc *grpc.ClientConn) SteinsGateClient {
	return &steinsGateClient{cc}
}

func (c *steinsGateClient) GraphInfo(ctx context.Context, in *GraphInfoReq, opts ...grpc.CallOption) (*GraphInfoReply, error) {
	out := new(GraphInfoReply)
	err := c.cc.Invoke(ctx, "/stein.gate.service.v1.SteinsGate/GraphInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steinsGateClient) View(ctx context.Context, in *ViewReq, opts ...grpc.CallOption) (*ViewReply, error) {
	out := new(ViewReply)
	err := c.cc.Invoke(ctx, "/stein.gate.service.v1.SteinsGate/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steinsGateClient) Views(ctx context.Context, in *ViewsReq, opts ...grpc.CallOption) (*ViewsReply, error) {
	out := new(ViewsReply)
	err := c.cc.Invoke(ctx, "/stein.gate.service.v1.SteinsGate/Views", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steinsGateClient) GraphView(ctx context.Context, in *GraphViewReq, opts ...grpc.CallOption) (*GraphViewReply, error) {
	out := new(GraphViewReply)
	err := c.cc.Invoke(ctx, "/stein.gate.service.v1.SteinsGate/GraphView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steinsGateClient) Evaluation(ctx context.Context, in *EvaluationReq, opts ...grpc.CallOption) (*EvaluationReply, error) {
	out := new(EvaluationReply)
	err := c.cc.Invoke(ctx, "/stein.gate.service.v1.SteinsGate/Evaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steinsGateClient) GraphRights(ctx context.Context, in *GraphRightsReq, opts ...grpc.CallOption) (*GraphRightsReply, error) {
	out := new(GraphRightsReply)
	err := c.cc.Invoke(ctx, "/stein.gate.service.v1.SteinsGate/GraphRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steinsGateClient) MarkEvaluations(ctx context.Context, in *MarkEvaluationsReq, opts ...grpc.CallOption) (*MarkEvaluationsReply, error) {
	out := new(MarkEvaluationsReply)
	err := c.cc.Invoke(ctx, "/stein.gate.service.v1.SteinsGate/MarkEvaluations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteinsGateServer is the server API for SteinsGate service.
type SteinsGateServer interface {
	GraphInfo(context.Context, *GraphInfoReq) (*GraphInfoReply, error)
	View(context.Context, *ViewReq) (*ViewReply, error)
	Views(context.Context, *ViewsReq) (*ViewsReply, error)
	GraphView(context.Context, *GraphViewReq) (*GraphViewReply, error)
	Evaluation(context.Context, *EvaluationReq) (*EvaluationReply, error)
	GraphRights(context.Context, *GraphRightsReq) (*GraphRightsReply, error)
	MarkEvaluations(context.Context, *MarkEvaluationsReq) (*MarkEvaluationsReply, error)
}

// UnimplementedSteinsGateServer can be embedded to have forward compatible implementations.
type UnimplementedSteinsGateServer struct {
}

func (*UnimplementedSteinsGateServer) GraphInfo(ctx context.Context, req *GraphInfoReq) (*GraphInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GraphInfo not implemented")
}
func (*UnimplementedSteinsGateServer) View(ctx context.Context, req *ViewReq) (*ViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (*UnimplementedSteinsGateServer) Views(ctx context.Context, req *ViewsReq) (*ViewsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Views not implemented")
}
func (*UnimplementedSteinsGateServer) GraphView(ctx context.Context, req *GraphViewReq) (*GraphViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GraphView not implemented")
}
func (*UnimplementedSteinsGateServer) Evaluation(ctx context.Context, req *EvaluationReq) (*EvaluationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluation not implemented")
}
func (*UnimplementedSteinsGateServer) GraphRights(ctx context.Context, req *GraphRightsReq) (*GraphRightsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GraphRights not implemented")
}
func (*UnimplementedSteinsGateServer) MarkEvaluations(ctx context.Context, req *MarkEvaluationsReq) (*MarkEvaluationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkEvaluations not implemented")
}

func RegisterSteinsGateServer(s *grpc.Server, srv SteinsGateServer) {
	s.RegisterService(&_SteinsGate_serviceDesc, srv)
}

func _SteinsGate_GraphInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteinsGateServer).GraphInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stein.gate.service.v1.SteinsGate/GraphInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteinsGateServer).GraphInfo(ctx, req.(*GraphInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteinsGate_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteinsGateServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stein.gate.service.v1.SteinsGate/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteinsGateServer).View(ctx, req.(*ViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteinsGate_Views_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteinsGateServer).Views(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stein.gate.service.v1.SteinsGate/Views",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteinsGateServer).Views(ctx, req.(*ViewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteinsGate_GraphView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteinsGateServer).GraphView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stein.gate.service.v1.SteinsGate/GraphView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteinsGateServer).GraphView(ctx, req.(*GraphViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteinsGate_Evaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteinsGateServer).Evaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stein.gate.service.v1.SteinsGate/Evaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteinsGateServer).Evaluation(ctx, req.(*EvaluationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteinsGate_GraphRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteinsGateServer).GraphRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stein.gate.service.v1.SteinsGate/GraphRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteinsGateServer).GraphRights(ctx, req.(*GraphRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteinsGate_MarkEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkEvaluationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteinsGateServer).MarkEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stein.gate.service.v1.SteinsGate/MarkEvaluations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteinsGateServer).MarkEvaluations(ctx, req.(*MarkEvaluationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SteinsGate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stein.gate.service.v1.SteinsGate",
	HandlerType: (*SteinsGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GraphInfo",
			Handler:    _SteinsGate_GraphInfo_Handler,
		},
		{
			MethodName: "View",
			Handler:    _SteinsGate_View_Handler,
		},
		{
			MethodName: "Views",
			Handler:    _SteinsGate_Views_Handler,
		},
		{
			MethodName: "GraphView",
			Handler:    _SteinsGate_GraphView_Handler,
		},
		{
			MethodName: "Evaluation",
			Handler:    _SteinsGate_Evaluation_Handler,
		},
		{
			MethodName: "GraphRights",
			Handler:    _SteinsGate_GraphRights_Handler,
		},
		{
			MethodName: "MarkEvaluations",
			Handler:    _SteinsGate_MarkEvaluations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *GraphRightsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphRightsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphRightsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GraphRightsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphRightsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphRightsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AllowPlay {
		i--
		if m.AllowPlay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarkEvaluationsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkEvaluationsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkEvaluationsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA2 := make([]byte, len(m.Aids)*10)
		var j1 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarkEvaluationsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkEvaluationsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkEvaluationsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MarkEvaluations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkEvaluations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkEvaluations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Evaluation) > 0 {
		i -= len(m.Evaluation)
		copy(dAtA[i:], m.Evaluation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Evaluation)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mark != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mark))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GraphInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GraphInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GraphInfo != nil {
		{
			size, err := m.GraphInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GraphViewReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphViewReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphViewReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GraphViewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphViewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphViewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Evaluation) > 0 {
		i -= len(m.Evaluation)
		copy(dAtA[i:], m.Evaluation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Evaluation)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Graph != nil {
		{
			size, err := m.Graph.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ViewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToastMsg) > 0 {
		i -= len(m.ToastMsg)
		copy(dAtA[i:], m.ToastMsg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ToastMsg)))
		i--
		dAtA[i] = 0x42
	}
	if m.CurrentEdge != nil {
		{
			size, err := m.CurrentEdge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Evaluation) > 0 {
		i -= len(m.Evaluation)
		copy(dAtA[i:], m.Evaluation)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Evaluation)))
		i--
		dAtA[i] = 0x32
	}
	if m.Mark != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mark))
		i--
		dAtA[i] = 0x28
	}
	if m.RecordState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RecordState))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrentNode != nil {
		{
			size, err := m.CurrentNode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Graph != nil {
		{
			size, err := m.Graph.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AidsWithHistory) > 0 {
		dAtA12 := make([]byte, len(m.AidsWithHistory)*10)
		var j11 int
		for _, num1 := range m.AidsWithHistory {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintApi(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Aids) > 0 {
		dAtA14 := make([]byte, len(m.Aids)*10)
		var j13 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintApi(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ViewsWithHistory) > 0 {
		for k := range m.ViewsWithHistory {
			v := m.ViewsWithHistory[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Views) > 0 {
		for k := range m.Views {
			v := m.Views[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GraphInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GuestOverwriteRegionalVars != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuestOverwriteRegionalVars))
		i--
		dAtA[i] = 0x60
	}
	if m.NoEvaluation != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoEvaluation))
		i--
		dAtA[i] = 0x58
	}
	if m.NoBacktracking != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoBacktracking))
		i--
		dAtA[i] = 0x50
	}
	if m.NoTutorial != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoTutorial))
		i--
		dAtA[i] = 0x48
	}
	if m.SkinId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SkinId))
		i--
		dAtA[i] = 0x40
	}
	if m.Version != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if len(m.GlobalVars) > 0 {
		i -= len(m.GlobalVars)
		copy(dAtA[i:], m.GlobalVars)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GlobalVars)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RegionalVars) > 0 {
		i -= len(m.RegionalVars)
		copy(dAtA[i:], m.RegionalVars)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RegionalVars)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FirstNid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FirstNid))
		i--
		dAtA[i] = 0x20
	}
	if m.FirstCid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FirstCid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Skin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Skin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Skin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProgressbarShadowColor) > 0 {
		i -= len(m.ProgressbarShadowColor)
		copy(dAtA[i:], m.ProgressbarShadowColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProgressbarShadowColor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ProgressbarColor) > 0 {
		i -= len(m.ProgressbarColor)
		copy(dAtA[i:], m.ProgressbarColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProgressbarColor)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TitleShadowRadius != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TitleShadowRadius))))
		i--
		dAtA[i] = 0x35
	}
	if m.TitleShadowOffsetY != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TitleShadowOffsetY))))
		i--
		dAtA[i] = 0x2d
	}
	if m.TitleShadowOffsetX != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TitleShadowOffsetX))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.TitleShadowColor) > 0 {
		i -= len(m.TitleShadowColor)
		copy(dAtA[i:], m.TitleShadowColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleShadowColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TitleTextColor) > 0 {
		i -= len(m.TitleTextColor)
		copy(dAtA[i:], m.TitleTextColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleTextColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChoiceImage) > 0 {
		i -= len(m.ChoiceImage)
		copy(dAtA[i:], m.ChoiceImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChoiceImage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GraphNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkinId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SkinId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Sar) > 0 {
		i -= len(m.Sar)
		copy(dAtA[i:], m.Sar)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sar)))
		i--
		dAtA[i] = 0x52
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x48
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x40
	}
	if m.ShowTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShowTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Otype != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Otype))
		i--
		dAtA[i] = 0x30
	}
	if m.IsStart != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsStart))
		i--
		dAtA[i] = 0x28
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x20
	}
	if m.GraphId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GraphId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GraphEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ToType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ToType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ToTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ToTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsHidden != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsHidden))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Condition) > 0 {
		i -= len(m.Condition)
		copy(dAtA[i:], m.Condition)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Condition)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Attribute) > 0 {
		i -= len(m.Attribute)
		copy(dAtA[i:], m.Attribute)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Attribute)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Script) > 0 {
		i -= len(m.Script)
		copy(dAtA[i:], m.Script)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Script)))
		i--
		dAtA[i] = 0x62
	}
	if m.IsDefault != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsDefault))
		i--
		dAtA[i] = 0x58
	}
	if m.PosY != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PosY))
		i--
		dAtA[i] = 0x50
	}
	if m.PosX != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PosX))
		i--
		dAtA[i] = 0x48
	}
	if m.TextAlign != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TextAlign))
		i--
		dAtA[i] = 0x40
	}
	if m.Weight != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x38
	}
	if m.ToNodeCid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ToNodeCid))
		i--
		dAtA[i] = 0x30
	}
	if m.ToNode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ToNode))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.FromNode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FromNode))
		i--
		dAtA[i] = 0x18
	}
	if m.GraphId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GraphId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EdgeGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FadeOutTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FadeOutTime))
		i--
		dAtA[i] = 0x58
	}
	if m.FadeInTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FadeInTime))
		i--
		dAtA[i] = 0x50
	}
	if m.PauseVideo != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PauseVideo))
		i--
		dAtA[i] = 0x48
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x40
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TitleFontSize) > 0 {
		i -= len(m.TitleFontSize)
		copy(dAtA[i:], m.TitleFontSize)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleFontSize)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TitleColor) > 0 {
		i -= len(m.TitleColor)
		copy(dAtA[i:], m.TitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GraphId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GraphId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CursorChoice) > 0 {
		i -= len(m.CursorChoice)
		copy(dAtA[i:], m.CursorChoice)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorChoice)))
		i--
		dAtA[i] = 0x62
	}
	if m.CurrentCursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurrentCursor))
		i--
		dAtA[i] = 0x58
	}
	if m.CurrentEdge != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurrentEdge))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GlobalVars) > 0 {
		i -= len(m.GlobalVars)
		copy(dAtA[i:], m.GlobalVars)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GlobalVars)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HiddenVars) > 0 {
		i -= len(m.HiddenVars)
		copy(dAtA[i:], m.HiddenVars)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HiddenVars)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CurrentNode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurrentNode))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Choices) > 0 {
		i -= len(m.Choices)
		copy(dAtA[i:], m.Choices)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Choices)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x18
	}
	if m.GraphId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GraphId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvaluationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvaluationReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluationReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluationReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Eval) > 0 {
		i -= len(m.Eval)
		copy(dAtA[i:], m.Eval)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Eval)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Dimension.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.WebLink) > 0 {
		i -= len(m.WebLink)
		copy(dAtA[i:], m.WebLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebLink)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Vid) > 0 {
		i -= len(m.Vid)
		copy(dAtA[i:], m.Vid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Vid)))
		i--
		dAtA[i] = 0x32
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Part) > 0 {
		i -= len(m.Part)
		copy(dAtA[i:], m.Part)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Part)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dimension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dimension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dimension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rotate != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rotate))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x18
	}
	if m.Y != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EdgeFrameAnimation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeFrameAnimation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeFrameAnimation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Loop != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Loop))
		i--
		dAtA[i] = 0x58
	}
	if m.Rows != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x50
	}
	if m.Colums != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Colums))
		i--
		dAtA[i] = 0x48
	}
	if m.Fps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fps))
		i--
		dAtA[i] = 0x40
	}
	if m.ItemCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ItemCount))
		i--
		dAtA[i] = 0x38
	}
	if m.ItemWidth != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ItemWidth))
		i--
		dAtA[i] = 0x30
	}
	if m.ItemHeight != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ItemHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SourcePic) > 0 {
		i -= len(m.SourcePic)
		copy(dAtA[i:], m.SourcePic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourcePic)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0x12
	}
	if m.EdgeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EdgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EdgeFrameAnimations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeFrameAnimations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeFrameAnimations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Animations) > 0 {
		for k := range m.Animations {
			v := m.Animations[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RankScoreSubmitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankScoreSubmitReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankScoreSubmitReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Validation != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Validation))
		i--
		dAtA[i] = 0x30
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentMid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurrentMid))
		i--
		dAtA[i] = 0x20
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentMid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CurrentMid))
		i--
		dAtA[i] = 0x28
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ranking != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ranking))
		i--
		dAtA[i] = 0x20
	}
	if m.Ranked {
		i--
		if m.Ranked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CurrentUser != nil {
		{
			size, err := m.CurrentUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GraphRightsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphRightsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowPlay {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MarkEvaluationsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MarkEvaluationsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MarkEvaluations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mark != 0 {
		n += 1 + sovApi(uint64(m.Mark))
	}
	l = len(m.Evaluation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GraphInfo != nil {
		l = m.GraphInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphViewReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphViewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Graph != nil {
		l = m.Graph.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Evaluation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Graph != nil {
		l = m.Graph.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CurrentNode != nil {
		l = m.CurrentNode.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RecordState != 0 {
		n += 1 + sovApi(uint64(m.RecordState))
	}
	if m.Mark != 0 {
		n += 1 + sovApi(uint64(m.Mark))
	}
	l = len(m.Evaluation)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CurrentEdge != nil {
		l = m.CurrentEdge.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ToastMsg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.AidsWithHistory) > 0 {
		l = 0
		for _, e := range m.AidsWithHistory {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ViewsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Views) > 0 {
		for k, v := range m.Views {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.ViewsWithHistory) > 0 {
		for k, v := range m.ViewsWithHistory {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.FirstCid != 0 {
		n += 1 + sovApi(uint64(m.FirstCid))
	}
	if m.FirstNid != 0 {
		n += 1 + sovApi(uint64(m.FirstNid))
	}
	l = len(m.RegionalVars)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GlobalVars)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovApi(uint64(m.Version))
	}
	if m.SkinId != 0 {
		n += 1 + sovApi(uint64(m.SkinId))
	}
	if m.NoTutorial != 0 {
		n += 1 + sovApi(uint64(m.NoTutorial))
	}
	if m.NoBacktracking != 0 {
		n += 1 + sovApi(uint64(m.NoBacktracking))
	}
	if m.NoEvaluation != 0 {
		n += 1 + sovApi(uint64(m.NoEvaluation))
	}
	if m.GuestOverwriteRegionalVars != 0 {
		n += 1 + sovApi(uint64(m.GuestOverwriteRegionalVars))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Skin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChoiceImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TitleTextColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TitleShadowColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TitleShadowOffsetX != 0 {
		n += 5
	}
	if m.TitleShadowOffsetY != 0 {
		n += 5
	}
	if m.TitleShadowRadius != 0 {
		n += 5
	}
	l = len(m.ProgressbarColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ProgressbarShadowColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GraphId != 0 {
		n += 1 + sovApi(uint64(m.GraphId))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.IsStart != 0 {
		n += 1 + sovApi(uint64(m.IsStart))
	}
	if m.Otype != 0 {
		n += 1 + sovApi(uint64(m.Otype))
	}
	if m.ShowTime != 0 {
		n += 1 + sovApi(uint64(m.ShowTime))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	l = len(m.Sar)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SkinId != 0 {
		n += 1 + sovApi(uint64(m.SkinId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.GraphId != 0 {
		n += 1 + sovApi(uint64(m.GraphId))
	}
	if m.FromNode != 0 {
		n += 1 + sovApi(uint64(m.FromNode))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ToNode != 0 {
		n += 1 + sovApi(uint64(m.ToNode))
	}
	if m.ToNodeCid != 0 {
		n += 1 + sovApi(uint64(m.ToNodeCid))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	if m.TextAlign != 0 {
		n += 1 + sovApi(uint64(m.TextAlign))
	}
	if m.PosX != 0 {
		n += 1 + sovApi(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovApi(uint64(m.PosY))
	}
	if m.IsDefault != 0 {
		n += 1 + sovApi(uint64(m.IsDefault))
	}
	l = len(m.Script)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Attribute)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	if m.IsHidden != 0 {
		n += 2 + sovApi(uint64(m.IsHidden))
	}
	if m.Width != 0 {
		n += 2 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 2 + sovApi(uint64(m.Height))
	}
	if m.ToTime != 0 {
		n += 2 + sovApi(uint64(m.ToTime))
	}
	if m.ToType != 0 {
		n += 2 + sovApi(uint64(m.ToType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EdgeGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.GraphId != 0 {
		n += 1 + sovApi(uint64(m.GraphId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TitleColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TitleFontSize)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.PauseVideo != 0 {
		n += 1 + sovApi(uint64(m.PauseVideo))
	}
	if m.FadeInTime != 0 {
		n += 1 + sovApi(uint64(m.FadeInTime))
	}
	if m.FadeOutTime != 0 {
		n += 1 + sovApi(uint64(m.FadeOutTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.GraphId != 0 {
		n += 1 + sovApi(uint64(m.GraphId))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Choices)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CurrentNode != 0 {
		n += 1 + sovApi(uint64(m.CurrentNode))
	}
	l = len(m.HiddenVars)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GlobalVars)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CurrentEdge != 0 {
		n += 1 + sovApi(uint64(m.CurrentEdge))
	}
	if m.CurrentCursor != 0 {
		n += 1 + sovApi(uint64(m.CurrentCursor))
	}
	l = len(m.CursorChoice)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EvaluationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EvaluationReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Eval)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Part)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WebLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Dimension.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dimension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.Rotate != 0 {
		n += 1 + sovApi(uint64(m.Rotate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovApi(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovApi(uint64(m.Y))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EdgeFrameAnimation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EdgeId != 0 {
		n += 1 + sovApi(uint64(m.EdgeId))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Position.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.SourcePic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ItemHeight != 0 {
		n += 1 + sovApi(uint64(m.ItemHeight))
	}
	if m.ItemWidth != 0 {
		n += 1 + sovApi(uint64(m.ItemWidth))
	}
	if m.ItemCount != 0 {
		n += 1 + sovApi(uint64(m.ItemCount))
	}
	if m.Fps != 0 {
		n += 1 + sovApi(uint64(m.Fps))
	}
	if m.Colums != 0 {
		n += 1 + sovApi(uint64(m.Colums))
	}
	if m.Rows != 0 {
		n += 1 + sovApi(uint64(m.Rows))
	}
	if m.Loop != 0 {
		n += 1 + sovApi(uint64(m.Loop))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EdgeFrameAnimations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Animations) > 0 {
		for k, v := range m.Animations {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankScoreSubmitReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.CurrentMid != 0 {
		n += 1 + sovApi(uint64(m.CurrentMid))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.Validation != 0 {
		n += 1 + sovApi(uint64(m.Validation))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.CurrentMid != 0 {
		n += 1 + sovApi(uint64(m.CurrentMid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.Ranked {
		n += 2
	}
	if m.Ranking != 0 {
		n += 1 + sovApi(uint64(m.Ranking))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RankListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.CurrentUser != nil {
		l = m.CurrentUser.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GraphRightsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphRightsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphRightsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphRightsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphRightsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphRightsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowPlay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowPlay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkEvaluationsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkEvaluationsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkEvaluationsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkEvaluationsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkEvaluationsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkEvaluationsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int64]*MarkEvaluations)
			}
			var mapkey int64
			var mapvalue *MarkEvaluations
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MarkEvaluations{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkEvaluations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkEvaluations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkEvaluations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			m.Mark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mark |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evaluation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evaluation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphInfo == nil {
				m.GraphInfo = &GraphInfo{}
			}
			if err := m.GraphInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphViewReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphViewReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphViewReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphViewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphViewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphViewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Graph == nil {
				m.Graph = &GraphInfo{}
			}
			if err := m.Graph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evaluation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evaluation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Graph == nil {
				m.Graph = &GraphInfo{}
			}
			if err := m.Graph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentNode == nil {
				m.CurrentNode = &GraphNode{}
			}
			if err := m.CurrentNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordState", wireType)
			}
			m.RecordState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			m.Mark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mark |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evaluation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evaluation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEdge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentEdge == nil {
				m.CurrentEdge = &GraphEdge{}
			}
			if err := m.CurrentEdge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToastMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToastMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AidsWithHistory = append(m.AidsWithHistory, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AidsWithHistory) == 0 {
					m.AidsWithHistory = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AidsWithHistory = append(m.AidsWithHistory, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AidsWithHistory", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Views == nil {
				m.Views = make(map[int64]*ViewReply)
			}
			var mapkey int64
			var mapvalue *ViewReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ViewReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Views[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewsWithHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewsWithHistory == nil {
				m.ViewsWithHistory = make(map[int64]*ViewReply)
			}
			var mapkey int64
			var mapvalue *ViewReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ViewReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ViewsWithHistory[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstCid", wireType)
			}
			m.FirstCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstNid", wireType)
			}
			m.FirstNid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstNid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalVars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionalVars = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalVars = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinId", wireType)
			}
			m.SkinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkinId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTutorial", wireType)
			}
			m.NoTutorial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoTutorial |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBacktracking", wireType)
			}
			m.NoBacktracking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoBacktracking |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoEvaluation", wireType)
			}
			m.NoEvaluation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoEvaluation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestOverwriteRegionalVars", wireType)
			}
			m.GuestOverwriteRegionalVars = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuestOverwriteRegionalVars |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Skin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Skin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Skin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChoiceImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChoiceImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleTextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleTextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleShadowColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleShadowColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleShadowOffsetX", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TitleShadowOffsetX = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleShadowOffsetY", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TitleShadowOffsetY = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleShadowRadius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TitleShadowRadius = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressbarColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgressbarColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressbarShadowColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgressbarShadowColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphId", wireType)
			}
			m.GraphId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStart", wireType)
			}
			m.IsStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Otype", wireType)
			}
			m.Otype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Otype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowTime", wireType)
			}
			m.ShowTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinId", wireType)
			}
			m.SkinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkinId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphId", wireType)
			}
			m.GraphId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromNode", wireType)
			}
			m.FromNode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromNode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToNode", wireType)
			}
			m.ToNode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToNode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToNodeCid", wireType)
			}
			m.ToNodeCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToNodeCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextAlign", wireType)
			}
			m.TextAlign = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextAlign |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			m.IsDefault = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDefault |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Script", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Script = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHidden", wireType)
			}
			m.IsHidden = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHidden |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTime", wireType)
			}
			m.ToTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToType", wireType)
			}
			m.ToType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphId", wireType)
			}
			m.GraphId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleFontSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleFontSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PauseVideo", wireType)
			}
			m.PauseVideo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PauseVideo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FadeInTime", wireType)
			}
			m.FadeInTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FadeInTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FadeOutTime", wireType)
			}
			m.FadeOutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FadeOutTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphId", wireType)
			}
			m.GraphId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choices", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Choices = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNode", wireType)
			}
			m.CurrentNode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentNode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenVars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HiddenVars = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalVars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalVars = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEdge", wireType)
			}
			m.CurrentEdge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEdge |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCursor", wireType)
			}
			m.CurrentCursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorChoice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorChoice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluationReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluationReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluationReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dimension.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dimension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dimension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dimension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotate", wireType)
			}
			m.Rotate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeFrameAnimation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeFrameAnimation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeFrameAnimation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeId", wireType)
			}
			m.EdgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EdgeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemHeight", wireType)
			}
			m.ItemHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemWidth", wireType)
			}
			m.ItemWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCount", wireType)
			}
			m.ItemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fps", wireType)
			}
			m.Fps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colums", wireType)
			}
			m.Colums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Colums |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loop", wireType)
			}
			m.Loop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeFrameAnimations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeFrameAnimations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeFrameAnimations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Animations == nil {
				m.Animations = make(map[string]*EdgeFrameAnimation)
			}
			var mapkey string
			var mapvalue *EdgeFrameAnimation
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EdgeFrameAnimation{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Animations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankScoreSubmitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankScoreSubmitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankScoreSubmitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMid", wireType)
			}
			m.CurrentMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validation", wireType)
			}
			m.Validation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMid", wireType)
			}
			m.CurrentMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentMid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ranked = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RankItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentUser == nil {
				m.CurrentUser = &RankItem{}
			}
			if err := m.CurrentUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
