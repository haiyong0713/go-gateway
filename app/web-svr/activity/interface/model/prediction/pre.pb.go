// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pre.proto

package prediction

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Prediction struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Sid                  int64                       `protobuf:"varint,2,opt,name=Sid,proto3" json:"sid"`
	Min                  int64                       `protobuf:"varint,3,opt,name=Min,proto3" json:"min"`
	Max                  int64                       `protobuf:"varint,4,opt,name=Max,proto3" json:"max"`
	Pid                  int64                       `protobuf:"varint,5,opt,name=Pid,proto3" json:"pid"`
	Name                 string                      `protobuf:"bytes,6,opt,name=Name,proto3" json:"name"`
	Type                 int32                       `protobuf:"varint,7,opt,name=Type,proto3" json:"type"`
	State                int32                       `protobuf:"varint,8,opt,name=State,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Prediction) Reset()         { *m = Prediction{} }
func (m *Prediction) String() string { return proto.CompactTextString(m) }
func (*Prediction) ProtoMessage()    {}
func (*Prediction) Descriptor() ([]byte, []int) {
	return fileDescriptor_pre_27b5a537cdcc4d1b, []int{0}
}
func (m *Prediction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Prediction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Prediction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Prediction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Prediction.Merge(dst, src)
}
func (m *Prediction) XXX_Size() int {
	return m.Size()
}
func (m *Prediction) XXX_DiscardUnknown() {
	xxx_messageInfo_Prediction.DiscardUnknown(m)
}

var xxx_messageInfo_Prediction proto.InternalMessageInfo

type PredictionItem struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Pid                  int64                       `protobuf:"varint,2,opt,name=Pid,proto3" json:"pid"`
	Desc                 string                      `protobuf:"bytes,3,opt,name=Desc,proto3" json:"desc"`
	Image                string                      `protobuf:"bytes,4,opt,name=Image,proto3" json:"image"`
	State                int32                       `protobuf:"varint,5,opt,name=State,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Sid                  int64                       `protobuf:"varint,7,opt,name=Sid,proto3" json:"sid"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PredictionItem) Reset()         { *m = PredictionItem{} }
func (m *PredictionItem) String() string { return proto.CompactTextString(m) }
func (*PredictionItem) ProtoMessage()    {}
func (*PredictionItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_pre_27b5a537cdcc4d1b, []int{1}
}
func (m *PredictionItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PredictionItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PredictionItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PredictionItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictionItem.Merge(dst, src)
}
func (m *PredictionItem) XXX_Size() int {
	return m.Size()
}
func (m *PredictionItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictionItem.DiscardUnknown(m)
}

var xxx_messageInfo_PredictionItem proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Prediction)(nil), "activity.service.Prediction")
	proto.RegisterType((*PredictionItem)(nil), "activity.service.PredictionItem")
}
func (m *Prediction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prediction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.ID))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Sid))
	}
	if m.Min != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Min))
	}
	if m.Max != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Max))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Pid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPre(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Type))
	}
	if m.State != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PredictionItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PredictionItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.ID))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Pid))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPre(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPre(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Ctime))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Sid))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPre(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPre(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Prediction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPre(uint64(m.ID))
	}
	if m.Sid != 0 {
		n += 1 + sovPre(uint64(m.Sid))
	}
	if m.Min != 0 {
		n += 1 + sovPre(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovPre(uint64(m.Max))
	}
	if m.Pid != 0 {
		n += 1 + sovPre(uint64(m.Pid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPre(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPre(uint64(m.Type))
	}
	if m.State != 0 {
		n += 1 + sovPre(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovPre(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovPre(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PredictionItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPre(uint64(m.ID))
	}
	if m.Pid != 0 {
		n += 1 + sovPre(uint64(m.Pid))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovPre(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovPre(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPre(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovPre(uint64(m.Ctime))
	}
	if m.Sid != 0 {
		n += 1 + sovPre(uint64(m.Sid))
	}
	if m.Mtime != 0 {
		n += 1 + sovPre(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPre(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPre(x uint64) (n int) {
	return sovPre(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Prediction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prediction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prediction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPre
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PredictionItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPre
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PredictionItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PredictionItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPre
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPre
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPre
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPre(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPre
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPre(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPre
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPre
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPre
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPre
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPre
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPre(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPre = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPre   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pre.proto", fileDescriptor_pre_27b5a537cdcc4d1b) }

var fileDescriptor_pre_27b5a537cdcc4d1b = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbf, 0x6e, 0xd4, 0x30,
	0x18, 0xc0, 0x2f, 0xb9, 0xcb, 0xdd, 0xc5, 0x03, 0x42, 0x19, 0x90, 0xf9, 0xa3, 0xe4, 0x54, 0x31,
	0xdc, 0xd2, 0x64, 0x60, 0x67, 0x38, 0x6e, 0xc9, 0x50, 0x14, 0xb9, 0x9d, 0xd8, 0x1c, 0xc7, 0x84,
	0x4f, 0xc2, 0x71, 0x94, 0xb8, 0x55, 0xf3, 0x26, 0x3c, 0x0d, 0x73, 0xc7, 0x3e, 0x41, 0x44, 0x8f,
	0x2d, 0x12, 0x2f, 0xc0, 0x84, 0xfc, 0xa5, 0x6a, 0x8a, 0x84, 0x00, 0xdd, 0x16, 0xff, 0x7e, 0xfe,
	0x1c, 0xe9, 0xa7, 0x8f, 0xf8, 0x75, 0x23, 0xe3, 0xba, 0xd1, 0x46, 0x07, 0x4f, 0xb9, 0x30, 0x70,
	0x05, 0xa6, 0x8b, 0x5b, 0xd9, 0x5c, 0x81, 0x90, 0x2f, 0x4e, 0x4b, 0x30, 0x9f, 0x2e, 0xf3, 0x58,
	0x68, 0x95, 0x94, 0xba, 0xd4, 0x09, 0x5e, 0xcc, 0x2f, 0x3f, 0xe2, 0x09, 0x0f, 0xf8, 0x35, 0x3e,
	0x70, 0xf2, 0xc3, 0x25, 0x24, 0x6b, 0x64, 0x01, 0xc2, 0x80, 0xae, 0x82, 0x67, 0xc4, 0x4d, 0xf7,
	0xd4, 0xd9, 0x38, 0xdb, 0xf9, 0x6e, 0x39, 0xf4, 0x91, 0x0b, 0x05, 0x73, 0xd3, 0x7d, 0xf0, 0x9c,
	0xcc, 0xcf, 0xa1, 0xa0, 0x2e, 0x8a, 0xd5, 0xd0, 0x47, 0xf3, 0x16, 0x0a, 0x66, 0x99, 0x55, 0x67,
	0x50, 0xd1, 0xf9, 0xa4, 0x14, 0x54, 0xcc, 0x32, 0x54, 0xfc, 0x9a, 0x2e, 0x1e, 0x29, 0x7e, 0xcd,
	0x2c, 0xb3, 0x2a, 0x83, 0x82, 0x7a, 0x93, 0xaa, 0xed, 0x83, 0x19, 0x14, 0xc1, 0x2b, 0xb2, 0x78,
	0xcf, 0x95, 0xa4, 0xcb, 0x8d, 0xb3, 0xf5, 0x77, 0xeb, 0xa1, 0x8f, 0x16, 0x15, 0x57, 0x92, 0x21,
	0xb5, 0xf6, 0xa2, 0xab, 0x25, 0x5d, 0x6d, 0x9c, 0xad, 0x37, 0x5a, 0xd3, 0xd5, 0x92, 0x21, 0x0d,
	0x22, 0xe2, 0x9d, 0x1b, 0x6e, 0x24, 0x5d, 0xa3, 0xf6, 0x87, 0x3e, 0xf2, 0x5a, 0x0b, 0xd8, 0xc8,
	0x83, 0xb7, 0xc4, 0x7b, 0x67, 0x40, 0x49, 0xea, 0xe3, 0x9f, 0xb7, 0xf6, 0x82, 0xb0, 0xe0, 0x67,
	0x1f, 0xbd, 0x2c, 0xf5, 0xa9, 0xd0, 0x4a, 0xe9, 0x2a, 0xf9, 0x0c, 0x79, 0xc3, 0x9b, 0x2e, 0xb1,
	0x26, 0xbe, 0x00, 0x25, 0xd9, 0x38, 0x66, 0xe7, 0xcf, 0x70, 0x9e, 0x4c, 0xf3, 0xea, 0xbf, 0xe6,
	0x71, 0xec, 0xe4, 0xab, 0x4b, 0x9e, 0x4c, 0xbd, 0x53, 0x23, 0xd5, 0xdf, 0x9a, 0x67, 0xbf, 0x37,
	0x7f, 0x9c, 0x68, 0x2f, 0x5b, 0x81, 0xd1, 0xef, 0x13, 0x15, 0xb2, 0x15, 0x0c, 0xa9, 0x8d, 0x90,
	0x2a, 0x5e, 0x4a, 0x0c, 0xef, 0x8f, 0x11, 0xc0, 0x02, 0x36, 0xf2, 0xa9, 0x92, 0xf7, 0xaf, 0x4a,
	0xcb, 0xe3, 0x2a, 0xdd, 0xaf, 0xcb, 0xea, 0x0f, 0xeb, 0xf2, 0x10, 0x70, 0x7d, 0x54, 0xc0, 0xdd,
	0xeb, 0x9b, 0xbb, 0x70, 0x76, 0x7b, 0x17, 0xce, 0x6e, 0x0e, 0xa1, 0x73, 0x7b, 0x08, 0x9d, 0x6f,
	0x87, 0xd0, 0xf9, 0xf2, 0x3d, 0x9c, 0x7d, 0x20, 0xf5, 0x43, 0xd7, 0x7c, 0x89, 0xdb, 0xfd, 0xe6,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0xe4, 0x83, 0x0b, 0x2b, 0x03, 0x00, 0x00,
}
