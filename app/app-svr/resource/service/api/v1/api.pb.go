// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// use {app_id}.{version} as package name

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	go_common_library_time "go-common/library/time"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SkinExtState_Enum int32

const (
	SkinExtState_OFFLINE SkinExtState_Enum = 0
	SkinExtState_ONLINE  SkinExtState_Enum = 1
	SkinExtState_DELETED SkinExtState_Enum = -1
)

var SkinExtState_Enum_name = map[int32]string{
	0:  "OFFLINE",
	1:  "ONLINE",
	-1: "DELETED",
}

var SkinExtState_Enum_value = map[string]int32{
	"OFFLINE": 0,
	"ONLINE":  1,
	"DELETED": -1,
}

func (x SkinExtState_Enum) String() string {
	return proto.EnumName(SkinExtState_Enum_name, int32(x))
}

func (SkinExtState_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31, 0}
}

type SkinLimitState_Enum int32

const (
	SkinLimitState_DELETED SkinLimitState_Enum = 0
	SkinLimitState_ONLINE  SkinLimitState_Enum = 1
)

var SkinLimitState_Enum_name = map[int32]string{
	0: "DELETED",
	1: "ONLINE",
}

var SkinLimitState_Enum_value = map[string]int32{
	"DELETED": 0,
	"ONLINE":  1,
}

func (x SkinLimitState_Enum) String() string {
	return proto.EnumName(SkinLimitState_Enum_name, int32(x))
}

func (SkinLimitState_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33, 0}
}

type SectionItemOpLinkType_Enum int32

const (
	// 按钮
	SectionItemOpLinkType_BUTTON SectionItemOpLinkType_Enum = 0
	// 跳链有文案
	SectionItemOpLinkType_LINK_WITH_TEXT SectionItemOpLinkType_Enum = 1
	// 跳链无文案
	SectionItemOpLinkType_LINK_WITHOUT_TEXT SectionItemOpLinkType_Enum = 2
	// 弹窗触发器
	SectionItemOpLinkType_DIALOG_OPENER SectionItemOpLinkType_Enum = 3
	// NA页面id，需要在下发时，在param上做拼接
	SectionItemOpLinkType_NA_PAGE_ID SectionItemOpLinkType_Enum = 4
	// 运营条公告类型
	SectionItemOpLinkType_NOTICE SectionItemOpLinkType_Enum = 5
)

var SectionItemOpLinkType_Enum_name = map[int32]string{
	0: "BUTTON",
	1: "LINK_WITH_TEXT",
	2: "LINK_WITHOUT_TEXT",
	3: "DIALOG_OPENER",
	4: "NA_PAGE_ID",
	5: "NOTICE",
}

var SectionItemOpLinkType_Enum_value = map[string]int32{
	"BUTTON":            0,
	"LINK_WITH_TEXT":    1,
	"LINK_WITHOUT_TEXT": 2,
	"DIALOG_OPENER":     3,
	"NA_PAGE_ID":        4,
	"NOTICE":            5,
}

func (x SectionItemOpLinkType_Enum) String() string {
	return proto.EnumName(SectionItemOpLinkType_Enum_name, int32(x))
}

func (SectionItemOpLinkType_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50, 0}
}

type MenuExtVerReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"gt=0,required"`
	Ver                  string   `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty" form:"ver" validate:"required"`
	Buvid                string   `protobuf:"bytes,3,opt,name=buvid,proto3" json:"buvid,omitempty" form:"buvid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuExtVerReq) Reset()         { *m = MenuExtVerReq{} }
func (m *MenuExtVerReq) String() string { return proto.CompactTextString(m) }
func (*MenuExtVerReq) ProtoMessage()    {}
func (*MenuExtVerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *MenuExtVerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuExtVerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuExtVerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuExtVerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuExtVerReq.Merge(m, src)
}
func (m *MenuExtVerReq) XXX_Size() int {
	return m.Size()
}
func (m *MenuExtVerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuExtVerReq.DiscardUnknown(m)
}

var xxx_messageInfo_MenuExtVerReq proto.InternalMessageInfo

func (m *MenuExtVerReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MenuExtVerReq) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *MenuExtVerReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

type MenuExtVerReply struct {
	// 大于0表示缓存内有值
	Click                int32    `protobuf:"varint,1,opt,name=click,proto3" json:"click,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuExtVerReply) Reset()         { *m = MenuExtVerReply{} }
func (m *MenuExtVerReply) String() string { return proto.CompactTextString(m) }
func (*MenuExtVerReply) ProtoMessage()    {}
func (*MenuExtVerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *MenuExtVerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuExtVerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuExtVerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuExtVerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuExtVerReply.Merge(m, src)
}
func (m *MenuExtVerReply) XXX_Size() int {
	return m.Size()
}
func (m *MenuExtVerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuExtVerReply.DiscardUnknown(m)
}

var xxx_messageInfo_MenuExtVerReply proto.InternalMessageInfo

func (m *MenuExtVerReply) GetClick() int32 {
	if m != nil {
		return m.Click
	}
	return 0
}

type AddMenuExtVerReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"gt=0,required"`
	Ver                  string   `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty" form:"ver" validate:"required"`
	Buvid                string   `protobuf:"bytes,3,opt,name=buvid,proto3" json:"buvid,omitempty" form:"buvid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMenuExtVerReq) Reset()         { *m = AddMenuExtVerReq{} }
func (m *AddMenuExtVerReq) String() string { return proto.CompactTextString(m) }
func (*AddMenuExtVerReq) ProtoMessage()    {}
func (*AddMenuExtVerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *AddMenuExtVerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMenuExtVerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMenuExtVerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMenuExtVerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMenuExtVerReq.Merge(m, src)
}
func (m *AddMenuExtVerReq) XXX_Size() int {
	return m.Size()
}
func (m *AddMenuExtVerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMenuExtVerReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMenuExtVerReq proto.InternalMessageInfo

func (m *AddMenuExtVerReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddMenuExtVerReq) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *AddMenuExtVerReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

type AddMenuExtVerReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMenuExtVerReply) Reset()         { *m = AddMenuExtVerReply{} }
func (m *AddMenuExtVerReply) String() string { return proto.CompactTextString(m) }
func (*AddMenuExtVerReply) ProtoMessage()    {}
func (*AddMenuExtVerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *AddMenuExtVerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMenuExtVerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMenuExtVerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMenuExtVerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMenuExtVerReply.Merge(m, src)
}
func (m *AddMenuExtVerReply) XXX_Size() int {
	return m.Size()
}
func (m *AddMenuExtVerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMenuExtVerReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddMenuExtVerReply proto.InternalMessageInfo

// NoArgReq
type NoArgRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoArgRequest) Reset()         { *m = NoArgRequest{} }
func (m *NoArgRequest) String() string { return proto.CompactTextString(m) }
func (*NoArgRequest) ProtoMessage()    {}
func (*NoArgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *NoArgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoArgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoArgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoArgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoArgRequest.Merge(m, src)
}
func (m *NoArgRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoArgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoArgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoArgRequest proto.InternalMessageInfo

type Param struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Value                string   `protobuf:"bytes,3,opt,name=Value,proto3" json:"value"`
	Remark               string   `protobuf:"bytes,4,opt,name=Remark,proto3" json:"remark"`
	Plat                 int64    `protobuf:"varint,5,opt,name=Plat,proto3" json:"plat"`
	Build                int64    `protobuf:"varint,6,opt,name=Build,proto3" json:"build"`
	Conditions           string   `protobuf:"bytes,7,opt,name=Conditions,proto3" json:"conditions"`
	Department           int64    `protobuf:"varint,8,opt,name=Department,proto3" json:"department"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Param) Reset()         { *m = Param{} }
func (m *Param) String() string { return proto.CompactTextString(m) }
func (*Param) ProtoMessage()    {}
func (*Param) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *Param) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Param) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Param.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Param) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Param.Merge(m, src)
}
func (m *Param) XXX_Size() int {
	return m.Size()
}
func (m *Param) XXX_DiscardUnknown() {
	xxx_messageInfo_Param.DiscardUnknown(m)
}

var xxx_messageInfo_Param proto.InternalMessageInfo

func (m *Param) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Param) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Param) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Param) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Param) GetPlat() int64 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *Param) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *Param) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *Param) GetDepartment() int64 {
	if m != nil {
		return m.Department
	}
	return 0
}

type ParamReq struct {
	Plats                []int64  `protobuf:"varint,1,rep,packed,name=Plats,proto3" json:"Plats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParamReq) Reset()         { *m = ParamReq{} }
func (m *ParamReq) String() string { return proto.CompactTextString(m) }
func (*ParamReq) ProtoMessage()    {}
func (*ParamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ParamReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamReq.Merge(m, src)
}
func (m *ParamReq) XXX_Size() int {
	return m.Size()
}
func (m *ParamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamReq.DiscardUnknown(m)
}

var xxx_messageInfo_ParamReq proto.InternalMessageInfo

func (m *ParamReq) GetPlats() []int64 {
	if m != nil {
		return m.Plats
	}
	return nil
}

type ParamReply struct {
	List                 []*Param `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParamReply) Reset()         { *m = ParamReply{} }
func (m *ParamReply) String() string { return proto.CompactTextString(m) }
func (*ParamReply) ProtoMessage()    {}
func (*ParamReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *ParamReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamReply.Merge(m, src)
}
func (m *ParamReply) XXX_Size() int {
	return m.Size()
}
func (m *ParamReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamReply.DiscardUnknown(m)
}

var xxx_messageInfo_ParamReply proto.InternalMessageInfo

func (m *ParamReply) GetList() []*Param {
	if m != nil {
		return m.List
	}
	return nil
}

// Hidden is
type Hidden struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 首页顶bar入口 对应sidebar.id
	Sid int64 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	// 分区入口 对应region_copy.id
	Rid int64 `protobuf:"varint,3,opt,name=rid,proto3" json:"rid,omitempty"`
	// 渠道id 逗号分隔
	Channel string `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	// 渠道id map
	ChannelMap map[string]string `protobuf:"bytes,5,rep,name=channel_map,json=channelMap,proto3" json:"channel_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 屏蔽策略id
	Pid   int64                       `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`
	Stime go_common_library_time.Time `protobuf:"varint,7,opt,name=stime,proto3,casttype=go-common/library/time.Time" json:"stime,omitempty"`
	Etime go_common_library_time.Time `protobuf:"varint,8,opt,name=etime,proto3,casttype=go-common/library/time.Time" json:"etime,omitempty"`
	// 【我的】页入口 对应sidebar.id
	Cid int64 `protobuf:"varint,9,opt,name=cid,proto3" json:"cid,omitempty"`
	//渠道屏蔽的条件
	HiddenCondition string `protobuf:"bytes,10,opt,name=hidden_condition,json=hiddenCondition,proto3" json:"hidden_condition,omitempty"`
	// 一级模块id
	ModuleId int64 `protobuf:"varint,11,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// 模糊匹配渠道id list
	ChannelFuzzy []string `protobuf:"bytes,12,rep,name=channel_fuzzy,json=channelFuzzy,proto3" json:"channel_fuzzy,omitempty"`
	//动态是否屏蔽(0-否 1-是)
	HideDynamic          int64    `protobuf:"varint,13,opt,name=hide_dynamic,json=hideDynamic,proto3" json:"hide_dynamic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hidden) Reset()         { *m = Hidden{} }
func (m *Hidden) String() string { return proto.CompactTextString(m) }
func (*Hidden) ProtoMessage()    {}
func (*Hidden) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *Hidden) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hidden) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hidden.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hidden) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hidden.Merge(m, src)
}
func (m *Hidden) XXX_Size() int {
	return m.Size()
}
func (m *Hidden) XXX_DiscardUnknown() {
	xxx_messageInfo_Hidden.DiscardUnknown(m)
}

var xxx_messageInfo_Hidden proto.InternalMessageInfo

func (m *Hidden) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hidden) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *Hidden) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *Hidden) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Hidden) GetChannelMap() map[string]string {
	if m != nil {
		return m.ChannelMap
	}
	return nil
}

func (m *Hidden) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Hidden) GetStime() go_common_library_time.Time {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *Hidden) GetEtime() go_common_library_time.Time {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *Hidden) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Hidden) GetHiddenCondition() string {
	if m != nil {
		return m.HiddenCondition
	}
	return ""
}

func (m *Hidden) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *Hidden) GetChannelFuzzy() []string {
	if m != nil {
		return m.ChannelFuzzy
	}
	return nil
}

func (m *Hidden) GetHideDynamic() int64 {
	if m != nil {
		return m.HideDynamic
	}
	return 0
}

// HiddenLimit is
type HiddenLimit struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Oid        int64  `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Conditions string `protobuf:"bytes,3,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Build      int64  `protobuf:"varint,4,opt,name=build,proto3" json:"build,omitempty"`
	// 平台：0:Android 1:iphone 5:iphone_i 8:Android_i
	Plat                 int32    `protobuf:"varint,5,opt,name=plat,proto3" json:"plat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HiddenLimit) Reset()         { *m = HiddenLimit{} }
func (m *HiddenLimit) String() string { return proto.CompactTextString(m) }
func (*HiddenLimit) ProtoMessage()    {}
func (*HiddenLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *HiddenLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HiddenLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HiddenLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HiddenLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HiddenLimit.Merge(m, src)
}
func (m *HiddenLimit) XXX_Size() int {
	return m.Size()
}
func (m *HiddenLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_HiddenLimit.DiscardUnknown(m)
}

var xxx_messageInfo_HiddenLimit proto.InternalMessageInfo

func (m *HiddenLimit) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HiddenLimit) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *HiddenLimit) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *HiddenLimit) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *HiddenLimit) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

type EntranceHiddenReply struct {
	List                 []*HiddenInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EntranceHiddenReply) Reset()         { *m = EntranceHiddenReply{} }
func (m *EntranceHiddenReply) String() string { return proto.CompactTextString(m) }
func (*EntranceHiddenReply) ProtoMessage()    {}
func (*EntranceHiddenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *EntranceHiddenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntranceHiddenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntranceHiddenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntranceHiddenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntranceHiddenReply.Merge(m, src)
}
func (m *EntranceHiddenReply) XXX_Size() int {
	return m.Size()
}
func (m *EntranceHiddenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EntranceHiddenReply.DiscardUnknown(m)
}

var xxx_messageInfo_EntranceHiddenReply proto.InternalMessageInfo

func (m *EntranceHiddenReply) GetList() []*HiddenInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type HiddenInfo struct {
	Info                 *Hidden        `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Limit                []*HiddenLimit `protobuf:"bytes,2,rep,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HiddenInfo) Reset()         { *m = HiddenInfo{} }
func (m *HiddenInfo) String() string { return proto.CompactTextString(m) }
func (*HiddenInfo) ProtoMessage()    {}
func (*HiddenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *HiddenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HiddenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HiddenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HiddenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HiddenInfo.Merge(m, src)
}
func (m *HiddenInfo) XXX_Size() int {
	return m.Size()
}
func (m *HiddenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HiddenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HiddenInfo proto.InternalMessageInfo

func (m *HiddenInfo) GetInfo() *Hidden {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *HiddenInfo) GetLimit() []*HiddenLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

type EntrancesIsHiddenRequest struct {
	// 数据id 首页入口对应sid 分区入口对应rid 【我的】页入口对应cid
	Oids []int64 `protobuf:"varint,1,rep,packed,name=oids,proto3" json:"oids,omitempty"`
	// 数据类型 0:首页入口 1:分区入口 2:【我的】页入口 3:一级模块入口 4:动态
	Otype int32 `protobuf:"varint,2,opt,name=otype,proto3" json:"otype,omitempty"`
	// build号
	Build int64 `protobuf:"varint,3,opt,name=build,proto3" json:"build,omitempty"`
	// 平台：0:Android 1:iphone 5:iphone_i 8:Android_i'
	Plat int32 `protobuf:"varint,4,opt,name=plat,proto3" json:"plat,omitempty"`
	// 渠道 如xiaomi,oppo
	Channel string `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty" validate:"required"`
	// 647之后使用map来传数据类型和数据id
	OidItems             map[int64]*OidList `protobuf:"bytes,6,rep,name=oid_items,json=oidItems,proto3" json:"oid_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EntrancesIsHiddenRequest) Reset()         { *m = EntrancesIsHiddenRequest{} }
func (m *EntrancesIsHiddenRequest) String() string { return proto.CompactTextString(m) }
func (*EntrancesIsHiddenRequest) ProtoMessage()    {}
func (*EntrancesIsHiddenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *EntrancesIsHiddenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntrancesIsHiddenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntrancesIsHiddenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntrancesIsHiddenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntrancesIsHiddenRequest.Merge(m, src)
}
func (m *EntrancesIsHiddenRequest) XXX_Size() int {
	return m.Size()
}
func (m *EntrancesIsHiddenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EntrancesIsHiddenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EntrancesIsHiddenRequest proto.InternalMessageInfo

func (m *EntrancesIsHiddenRequest) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

func (m *EntrancesIsHiddenRequest) GetOtype() int32 {
	if m != nil {
		return m.Otype
	}
	return 0
}

func (m *EntrancesIsHiddenRequest) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *EntrancesIsHiddenRequest) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *EntrancesIsHiddenRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *EntrancesIsHiddenRequest) GetOidItems() map[int64]*OidList {
	if m != nil {
		return m.OidItems
	}
	return nil
}

type OidList struct {
	Oids                 []int64  `protobuf:"varint,1,rep,packed,name=oids,proto3" json:"oids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OidList) Reset()         { *m = OidList{} }
func (m *OidList) String() string { return proto.CompactTextString(m) }
func (*OidList) ProtoMessage()    {}
func (*OidList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *OidList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OidList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OidList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OidList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OidList.Merge(m, src)
}
func (m *OidList) XXX_Size() int {
	return m.Size()
}
func (m *OidList) XXX_DiscardUnknown() {
	xxx_messageInfo_OidList.DiscardUnknown(m)
}

var xxx_messageInfo_OidList proto.InternalMessageInfo

func (m *OidList) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

type EntrancesIsHiddenReply struct {
	// 二级模块的屏蔽信息
	Infos map[int64]bool `protobuf:"bytes,1,rep,name=Infos,proto3" json:"Infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 一级模块的屏蔽信息
	ModuleInfos map[int64]bool `protobuf:"bytes,2,rep,name=ModuleInfos,proto3" json:"ModuleInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 动态是否屏蔽
	HideDynamic          bool     `protobuf:"varint,3,opt,name=HideDynamic,proto3" json:"HideDynamic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntrancesIsHiddenReply) Reset()         { *m = EntrancesIsHiddenReply{} }
func (m *EntrancesIsHiddenReply) String() string { return proto.CompactTextString(m) }
func (*EntrancesIsHiddenReply) ProtoMessage()    {}
func (*EntrancesIsHiddenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *EntrancesIsHiddenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntrancesIsHiddenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntrancesIsHiddenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntrancesIsHiddenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntrancesIsHiddenReply.Merge(m, src)
}
func (m *EntrancesIsHiddenReply) XXX_Size() int {
	return m.Size()
}
func (m *EntrancesIsHiddenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EntrancesIsHiddenReply.DiscardUnknown(m)
}

var xxx_messageInfo_EntrancesIsHiddenReply proto.InternalMessageInfo

func (m *EntrancesIsHiddenReply) GetInfos() map[int64]bool {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *EntrancesIsHiddenReply) GetModuleInfos() map[int64]bool {
	if m != nil {
		return m.ModuleInfos
	}
	return nil
}

func (m *EntrancesIsHiddenReply) GetHideDynamic() bool {
	if m != nil {
		return m.HideDynamic
	}
	return false
}

// 相关推荐请求参数
type RelateRequest struct {
	//pgc seasonID
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MobiApp              string   `protobuf:"bytes,2,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Device               string   `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	Build                int32    `protobuf:"varint,4,opt,name=build,proto3" json:"build,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelateRequest) Reset()         { *m = RelateRequest{} }
func (m *RelateRequest) String() string { return proto.CompactTextString(m) }
func (*RelateRequest) ProtoMessage()    {}
func (*RelateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *RelateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelateRequest.Merge(m, src)
}
func (m *RelateRequest) XXX_Size() int {
	return m.Size()
}
func (m *RelateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RelateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RelateRequest proto.InternalMessageInfo

func (m *RelateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RelateRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *RelateRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *RelateRequest) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

// SearchOgvReq .
type SearchOgvReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchOgvReq) Reset()         { *m = SearchOgvReq{} }
func (m *SearchOgvReq) String() string { return proto.CompactTextString(m) }
func (*SearchOgvReq) ProtoMessage()    {}
func (*SearchOgvReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *SearchOgvReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchOgvReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchOgvReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchOgvReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchOgvReq.Merge(m, src)
}
func (m *SearchOgvReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchOgvReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchOgvReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchOgvReq proto.InternalMessageInfo

func (m *SearchOgvReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// SearchOgvReply .
type SearchOgvReply struct {
	Sids                 []int64  `protobuf:"varint,1,rep,packed,name=sids,proto3" json:"sids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchOgvReply) Reset()         { *m = SearchOgvReply{} }
func (m *SearchOgvReply) String() string { return proto.CompactTextString(m) }
func (*SearchOgvReply) ProtoMessage()    {}
func (*SearchOgvReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *SearchOgvReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchOgvReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchOgvReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchOgvReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchOgvReply.Merge(m, src)
}
func (m *SearchOgvReply) XXX_Size() int {
	return m.Size()
}
func (m *SearchOgvReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchOgvReply.DiscardUnknown(m)
}

var xxx_messageInfo_SearchOgvReply proto.InternalMessageInfo

func (m *SearchOgvReply) GetSids() []int64 {
	if m != nil {
		return m.Sids
	}
	return nil
}

type FeedBannersRequest struct {
	Meta                 []*BannerMeta `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty"`
	Plat                 int64         `protobuf:"varint,2,opt,name=plat,proto3" json:"plat,omitempty"`
	Build                int64         `protobuf:"varint,3,opt,name=build,proto3" json:"build,omitempty"`
	Mid                  int64         `protobuf:"varint,5,opt,name=mid,proto3" json:"mid,omitempty"`
	ResId                int64         `protobuf:"varint,6,opt,name=res_id,json=resId,proto3" json:"res_id,omitempty"`
	Channel              string        `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
	Ip                   string        `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Buvid                string        `protobuf:"bytes,9,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Network              string        `protobuf:"bytes,10,opt,name=network,proto3" json:"network,omitempty"`
	MobiApp              string        `protobuf:"bytes,11,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Device               string        `protobuf:"bytes,12,opt,name=device,proto3" json:"device,omitempty"`
	IsAd                 bool          `protobuf:"varint,13,opt,name=is_ad,json=isAd,proto3" json:"is_ad,omitempty"`
	OpenEvent            string        `protobuf:"bytes,14,opt,name=open_event,json=openEvent,proto3" json:"open_event,omitempty"`
	AdExtra              string        `protobuf:"bytes,15,opt,name=ad_extra,json=adExtra,proto3" json:"ad_extra,omitempty"`
	Version              string        `protobuf:"bytes,16,opt,name=version,proto3" json:"version,omitempty"`
	SplashId             int64         `protobuf:"varint,17,opt,name=splash_id,json=splashId,proto3" json:"splash_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FeedBannersRequest) Reset()         { *m = FeedBannersRequest{} }
func (m *FeedBannersRequest) String() string { return proto.CompactTextString(m) }
func (*FeedBannersRequest) ProtoMessage()    {}
func (*FeedBannersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *FeedBannersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedBannersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedBannersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedBannersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedBannersRequest.Merge(m, src)
}
func (m *FeedBannersRequest) XXX_Size() int {
	return m.Size()
}
func (m *FeedBannersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedBannersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FeedBannersRequest proto.InternalMessageInfo

func (m *FeedBannersRequest) GetMeta() []*BannerMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *FeedBannersRequest) GetPlat() int64 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *FeedBannersRequest) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *FeedBannersRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FeedBannersRequest) GetResId() int64 {
	if m != nil {
		return m.ResId
	}
	return 0
}

func (m *FeedBannersRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *FeedBannersRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *FeedBannersRequest) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *FeedBannersRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *FeedBannersRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *FeedBannersRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *FeedBannersRequest) GetIsAd() bool {
	if m != nil {
		return m.IsAd
	}
	return false
}

func (m *FeedBannersRequest) GetOpenEvent() string {
	if m != nil {
		return m.OpenEvent
	}
	return ""
}

func (m *FeedBannersRequest) GetAdExtra() string {
	if m != nil {
		return m.AdExtra
	}
	return ""
}

func (m *FeedBannersRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FeedBannersRequest) GetSplashId() int64 {
	if m != nil {
		return m.SplashId
	}
	return 0
}

type BannerMeta struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	InlineType           string   `protobuf:"bytes,3,opt,name=inline_type,json=inlineType,proto3" json:"inline_type,omitempty"`
	InlineId             string   `protobuf:"bytes,4,opt,name=inline_id,json=inlineId,proto3" json:"inline_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BannerMeta) Reset()         { *m = BannerMeta{} }
func (m *BannerMeta) String() string { return proto.CompactTextString(m) }
func (*BannerMeta) ProtoMessage()    {}
func (*BannerMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *BannerMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannerMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannerMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannerMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannerMeta.Merge(m, src)
}
func (m *BannerMeta) XXX_Size() int {
	return m.Size()
}
func (m *BannerMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BannerMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BannerMeta proto.InternalMessageInfo

func (m *BannerMeta) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BannerMeta) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BannerMeta) GetInlineType() string {
	if m != nil {
		return m.InlineType
	}
	return ""
}

func (m *BannerMeta) GetInlineId() string {
	if m != nil {
		return m.InlineId
	}
	return ""
}

type FeedBannersReply struct {
	Banner               []*Banner `protobuf:"bytes,1,rep,name=banner,proto3" json:"banner,omitempty"`
	Version              string    `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FeedBannersReply) Reset()         { *m = FeedBannersReply{} }
func (m *FeedBannersReply) String() string { return proto.CompactTextString(m) }
func (*FeedBannersReply) ProtoMessage()    {}
func (*FeedBannersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *FeedBannersReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedBannersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedBannersReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedBannersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedBannersReply.Merge(m, src)
}
func (m *FeedBannersReply) XXX_Size() int {
	return m.Size()
}
func (m *FeedBannersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedBannersReply.DiscardUnknown(m)
}

var xxx_messageInfo_FeedBannersReply proto.InternalMessageInfo

func (m *FeedBannersReply) GetBanner() []*Banner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *FeedBannersReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type BannersRequest struct {
	Plat                 int32    `protobuf:"varint,1,opt,name=plat,proto3" json:"plat,omitempty"`
	Build                int32    `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	Aid                  int64    `protobuf:"varint,3,opt,name=aid,proto3" json:"aid,omitempty"`
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	ResIDs               string   `protobuf:"bytes,5,opt,name=resIDs,proto3" json:"resIDs,omitempty"`
	Channel              string   `protobuf:"bytes,6,opt,name=channel,proto3" json:"channel,omitempty"`
	Ip                   string   `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Buvid                string   `protobuf:"bytes,8,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Network              string   `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	MobiApp              string   `protobuf:"bytes,10,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Device               string   `protobuf:"bytes,11,opt,name=device,proto3" json:"device,omitempty"`
	IsAd                 bool     `protobuf:"varint,12,opt,name=is_ad,json=isAd,proto3" json:"is_ad,omitempty"`
	OpenEvent            string   `protobuf:"bytes,13,opt,name=open_event,json=openEvent,proto3" json:"open_event,omitempty"`
	AdExtra              string   `protobuf:"bytes,14,opt,name=ad_extra,json=adExtra,proto3" json:"ad_extra,omitempty"`
	Version              string   `protobuf:"bytes,15,opt,name=version,proto3" json:"version,omitempty"`
	SplashId             int64    `protobuf:"varint,16,opt,name=splash_id,json=splashId,proto3" json:"splash_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BannersRequest) Reset()         { *m = BannersRequest{} }
func (m *BannersRequest) String() string { return proto.CompactTextString(m) }
func (*BannersRequest) ProtoMessage()    {}
func (*BannersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *BannersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannersRequest.Merge(m, src)
}
func (m *BannersRequest) XXX_Size() int {
	return m.Size()
}
func (m *BannersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BannersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BannersRequest proto.InternalMessageInfo

func (m *BannersRequest) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *BannersRequest) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *BannersRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *BannersRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BannersRequest) GetResIDs() string {
	if m != nil {
		return m.ResIDs
	}
	return ""
}

func (m *BannersRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *BannersRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BannersRequest) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *BannersRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BannersRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *BannersRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *BannersRequest) GetIsAd() bool {
	if m != nil {
		return m.IsAd
	}
	return false
}

func (m *BannersRequest) GetOpenEvent() string {
	if m != nil {
		return m.OpenEvent
	}
	return ""
}

func (m *BannersRequest) GetAdExtra() string {
	if m != nil {
		return m.AdExtra
	}
	return ""
}

func (m *BannersRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BannersRequest) GetSplashId() int64 {
	if m != nil {
		return m.SplashId
	}
	return 0
}

type BannersReply struct {
	Banners              map[int32]*Banners `protobuf:"bytes,1,rep,name=Banners,proto3" json:"Banners,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Version              string             `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BannersReply) Reset()         { *m = BannersReply{} }
func (m *BannersReply) String() string { return proto.CompactTextString(m) }
func (*BannersReply) ProtoMessage()    {}
func (*BannersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *BannersReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannersReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannersReply.Merge(m, src)
}
func (m *BannersReply) XXX_Size() int {
	return m.Size()
}
func (m *BannersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BannersReply.DiscardUnknown(m)
}

var xxx_messageInfo_BannersReply proto.InternalMessageInfo

func (m *BannersReply) GetBanners() map[int32]*Banners {
	if m != nil {
		return m.Banners
	}
	return nil
}

func (m *BannersReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Banners struct {
	Banners              []*Banner `protobuf:"bytes,1,rep,name=Banners,proto3" json:"Banners,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Banners) Reset()         { *m = Banners{} }
func (m *Banners) String() string { return proto.CompactTextString(m) }
func (*Banners) ProtoMessage()    {}
func (*Banners) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *Banners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Banners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Banners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Banners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Banners.Merge(m, src)
}
func (m *Banners) XXX_Size() int {
	return m.Size()
}
func (m *Banners) XXX_DiscardUnknown() {
	xxx_messageInfo_Banners.DiscardUnknown(m)
}

var xxx_messageInfo_Banners proto.InternalMessageInfo

func (m *Banners) GetBanners() []*Banner {
	if m != nil {
		return m.Banners
	}
	return nil
}

type Banner struct {
	Id                   int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ParentId             int64      `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"-"`
	Plat                 int32      `protobuf:"varint,3,opt,name=plat,proto3" json:"-"`
	Module               string     `protobuf:"bytes,4,opt,name=module,proto3" json:"-"`
	Position             string     `protobuf:"bytes,5,opt,name=position,proto3" json:"-"`
	Title                string     `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`
	Image                string     `protobuf:"bytes,7,opt,name=image,proto3" json:"image"`
	Hash                 string     `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash"`
	URI                  string     `protobuf:"bytes,9,opt,name=u_r_i,json=uRI,proto3" json:"uri"`
	Goto                 string     `protobuf:"bytes,10,opt,name=goto,proto3" json:"-"`
	Value                string     `protobuf:"bytes,11,opt,name=value,proto3" json:"-"`
	Param                string     `protobuf:"bytes,12,opt,name=param,proto3" json:"-"`
	Channel              string     `protobuf:"bytes,13,opt,name=channel,proto3" json:"-"`
	Build                int32      `protobuf:"varint,14,opt,name=build,proto3" json:"-"`
	Condition            string     `protobuf:"bytes,15,opt,name=condition,proto3" json:"-"`
	Area                 string     `protobuf:"bytes,16,opt,name=area,proto3" json:"-"`
	Rank                 int64      `protobuf:"varint,17,opt,name=rank,proto3" json:"-"`
	Rule                 string     `protobuf:"bytes,18,opt,name=rule,proto3" json:"-"`
	Type                 int32      `protobuf:"varint,19,opt,name=type,proto3" json:"-"`
	Start                int64      `protobuf:"varint,20,opt,name=start,proto3" json:"stime"`
	End                  int64      `protobuf:"varint,21,opt,name=end,proto3" json:"-"`
	MTime                int64      `protobuf:"varint,22,opt,name=m_time,json=mTime,proto3" json:"-"`
	ResourceId           int64      `protobuf:"varint,23,opt,name=resource_id,json=resourceId,proto3" json:"resource_id"`
	RequestId            string     `protobuf:"bytes,24,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CreativeId           int64      `protobuf:"varint,25,opt,name=creative_id,json=creativeId,proto3" json:"creative_id,omitempty"`
	SrcId                int64      `protobuf:"varint,26,opt,name=src_id,json=srcId,proto3" json:"src_id,omitempty"`
	IsAd                 bool       `protobuf:"varint,27,opt,name=is_ad,json=isAd,proto3" json:"is_ad"`
	IsAdReplace          bool       `protobuf:"varint,28,opt,name=is_ad_replace,json=isAdReplace,proto3" json:"-"`
	IsAdLoc              bool       `protobuf:"varint,29,opt,name=is_ad_loc,json=isAdLoc,proto3" json:"is_ad_loc,omitempty"`
	CmMark               int64      `protobuf:"varint,30,opt,name=cm_mark,json=cmMark,proto3" json:"cm_mark"`
	AdCb                 string     `protobuf:"bytes,31,opt,name=ad_cb,json=adCb,proto3" json:"ad_cb,omitempty"`
	ShowUrl              string     `protobuf:"bytes,32,opt,name=show_url,json=showUrl,proto3" json:"show_url,omitempty"`
	ClickUrl             string     `protobuf:"bytes,33,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	ClientIp             string     `protobuf:"bytes,34,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	Index                int64      `protobuf:"varint,35,opt,name=index,proto3" json:"index"`
	ServerType           int64      `protobuf:"varint,36,opt,name=server_type,json=serverType,proto3" json:"server_type"`
	Extra                []byte     `protobuf:"bytes,37,opt,name=extra,proto3" json:"extra"`
	CreativeType         int64      `protobuf:"varint,38,opt,name=creative_type,json=creativeType,proto3" json:"creative_type"`
	SubTitle             string     `protobuf:"bytes,39,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`
	SplashId             int64      `protobuf:"varint,40,opt,name=splash_id,json=splashId,proto3" json:"splash_id,omitempty"`
	BannerMeta           BannerMeta `protobuf:"bytes,41,opt,name=banner_meta,json=bannerMeta,proto3" json:"banner_meta"`
	InlineUseSame        int64      `protobuf:"varint,42,opt,name=inline_use_same,json=inlineUseSame,proto3" json:"inline_use_same"`
	InlineBarrageSwitch  int64      `protobuf:"varint,43,opt,name=inline_barrage_switch,json=inlineBarrageSwitch,proto3" json:"inline_barrage_switch"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Banner) Reset()         { *m = Banner{} }
func (m *Banner) String() string { return proto.CompactTextString(m) }
func (*Banner) ProtoMessage()    {}
func (*Banner) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *Banner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Banner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Banner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Banner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Banner.Merge(m, src)
}
func (m *Banner) XXX_Size() int {
	return m.Size()
}
func (m *Banner) XXX_DiscardUnknown() {
	xxx_messageInfo_Banner.DiscardUnknown(m)
}

var xxx_messageInfo_Banner proto.InternalMessageInfo

func (m *Banner) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Banner) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Banner) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *Banner) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Banner) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Banner) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Banner) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Banner) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Banner) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *Banner) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *Banner) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Banner) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *Banner) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Banner) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *Banner) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func (m *Banner) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *Banner) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Banner) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *Banner) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Banner) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Banner) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Banner) GetMTime() int64 {
	if m != nil {
		return m.MTime
	}
	return 0
}

func (m *Banner) GetResourceId() int64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *Banner) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *Banner) GetCreativeId() int64 {
	if m != nil {
		return m.CreativeId
	}
	return 0
}

func (m *Banner) GetSrcId() int64 {
	if m != nil {
		return m.SrcId
	}
	return 0
}

func (m *Banner) GetIsAd() bool {
	if m != nil {
		return m.IsAd
	}
	return false
}

func (m *Banner) GetIsAdReplace() bool {
	if m != nil {
		return m.IsAdReplace
	}
	return false
}

func (m *Banner) GetIsAdLoc() bool {
	if m != nil {
		return m.IsAdLoc
	}
	return false
}

func (m *Banner) GetCmMark() int64 {
	if m != nil {
		return m.CmMark
	}
	return 0
}

func (m *Banner) GetAdCb() string {
	if m != nil {
		return m.AdCb
	}
	return ""
}

func (m *Banner) GetShowUrl() string {
	if m != nil {
		return m.ShowUrl
	}
	return ""
}

func (m *Banner) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *Banner) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *Banner) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Banner) GetServerType() int64 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *Banner) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *Banner) GetCreativeType() int64 {
	if m != nil {
		return m.CreativeType
	}
	return 0
}

func (m *Banner) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *Banner) GetSplashId() int64 {
	if m != nil {
		return m.SplashId
	}
	return 0
}

func (m *Banner) GetBannerMeta() BannerMeta {
	if m != nil {
		return m.BannerMeta
	}
	return BannerMeta{}
}

func (m *Banner) GetInlineUseSame() int64 {
	if m != nil {
		return m.InlineUseSame
	}
	return 0
}

func (m *Banner) GetInlineBarrageSwitch() int64 {
	if m != nil {
		return m.InlineBarrageSwitch
	}
	return 0
}

type SpecialReply struct {
	//主键id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//特殊卡片标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//特殊卡片描述
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	//特殊卡片单列封面
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	//特殊卡片双列封面
	Scover string `protobuf:"bytes,5,opt,name=scover,proto3" json:"scover,omitempty"`
	//跳转类型 URL:0 游戏小卡:1 稿件:2 番剧:3 直播:4 专栏:6 每日精选:7 歌单:8 歌曲:9 相簿:10 小视频:11
	ReType int32 `protobuf:"varint,6,opt,name=re_type,json=reType,proto3" json:"re_type,omitempty"`
	//跳转参数
	ReValue string `protobuf:"bytes,7,opt,name=re_value,json=reValue,proto3" json:"re_value,omitempty"`
	//角标文字
	Corner string `protobuf:"bytes,8,opt,name=corner,proto3" json:"corner,omitempty"`
	//卡片类型 1特殊小卡 2特殊大卡 3置顶卡片
	Card int32 `protobuf:"varint,9,opt,name=card,proto3" json:"card,omitempty"`
	//特殊大卡参数 如果是1020*300则封面比例为34 如果是1020*378则封面比例为27
	Siz string `protobuf:"bytes,10,opt,name=siz,proto3" json:"siz,omitempty"`
	//位置
	Position int32 `protobuf:"varint,11,opt,name=position,proto3" json:"position,omitempty"`
	//推荐理由
	RecReason            string   `protobuf:"bytes,12,opt,name=rec_reason,json=recReason,proto3" json:"rec_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecialReply) Reset()         { *m = SpecialReply{} }
func (m *SpecialReply) String() string { return proto.CompactTextString(m) }
func (*SpecialReply) ProtoMessage()    {}
func (*SpecialReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *SpecialReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialReply.Merge(m, src)
}
func (m *SpecialReply) XXX_Size() int {
	return m.Size()
}
func (m *SpecialReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialReply.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialReply proto.InternalMessageInfo

func (m *SpecialReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SpecialReply) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SpecialReply) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *SpecialReply) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *SpecialReply) GetScover() string {
	if m != nil {
		return m.Scover
	}
	return ""
}

func (m *SpecialReply) GetReType() int32 {
	if m != nil {
		return m.ReType
	}
	return 0
}

func (m *SpecialReply) GetReValue() string {
	if m != nil {
		return m.ReValue
	}
	return ""
}

func (m *SpecialReply) GetCorner() string {
	if m != nil {
		return m.Corner
	}
	return ""
}

func (m *SpecialReply) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SpecialReply) GetSiz() string {
	if m != nil {
		return m.Siz
	}
	return ""
}

func (m *SpecialReply) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SpecialReply) GetRecReason() string {
	if m != nil {
		return m.RecReason
	}
	return ""
}

type WebRcmdReply struct {
	// web详情页相关推荐
	Rcmd []*WebRcmd `protobuf:"bytes,1,rep,name=Rcmd,proto3" json:"-"`
	// web详情页相关推荐卡片设置
	RcmdCard             []*WebRcmdCard `protobuf:"bytes,2,rep,name=RcmdCard,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WebRcmdReply) Reset()         { *m = WebRcmdReply{} }
func (m *WebRcmdReply) String() string { return proto.CompactTextString(m) }
func (*WebRcmdReply) ProtoMessage()    {}
func (*WebRcmdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *WebRcmdReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebRcmdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebRcmdReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebRcmdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebRcmdReply.Merge(m, src)
}
func (m *WebRcmdReply) XXX_Size() int {
	return m.Size()
}
func (m *WebRcmdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WebRcmdReply.DiscardUnknown(m)
}

var xxx_messageInfo_WebRcmdReply proto.InternalMessageInfo

func (m *WebRcmdReply) GetRcmd() []*WebRcmd {
	if m != nil {
		return m.Rcmd
	}
	return nil
}

func (m *WebRcmdReply) GetRcmdCard() []*WebRcmdCard {
	if m != nil {
		return m.RcmdCard
	}
	return nil
}

type WebRcmd struct {
	// 主键ID
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 卡片类型 1:特殊卡片 2:视频卡片 3:游戏卡片
	CardType int32 `protobuf:"varint,2,opt,name=CardType,proto3" json:"card_type"`
	// 卡片ID
	CardValue string `protobuf:"bytes,3,opt,name=CardValue,proto3" json:"card_value"`
	// 分区
	Partition []int64 `protobuf:"varint,4,rep,packed,name=Partition,proto3" json:"partition"`
	// tag
	Tag []int64 `protobuf:"varint,5,rep,packed,name=Tag,proto3" json:"tag"`
	// 稿件
	AvID []int64 `protobuf:"varint,6,rep,packed,name=AvID,proto3" json:"avid"`
	// 卡片优先级
	Priority int32 `protobuf:"varint,7,opt,name=Priority,proto3" json:"Priority"`
	// 优先级配置字段
	Order                int32    `protobuf:"varint,8,opt,name=Order,proto3" json:"order"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebRcmd) Reset()         { *m = WebRcmd{} }
func (m *WebRcmd) String() string { return proto.CompactTextString(m) }
func (*WebRcmd) ProtoMessage()    {}
func (*WebRcmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *WebRcmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebRcmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebRcmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebRcmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebRcmd.Merge(m, src)
}
func (m *WebRcmd) XXX_Size() int {
	return m.Size()
}
func (m *WebRcmd) XXX_DiscardUnknown() {
	xxx_messageInfo_WebRcmd.DiscardUnknown(m)
}

var xxx_messageInfo_WebRcmd proto.InternalMessageInfo

func (m *WebRcmd) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WebRcmd) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *WebRcmd) GetCardValue() string {
	if m != nil {
		return m.CardValue
	}
	return ""
}

func (m *WebRcmd) GetPartition() []int64 {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *WebRcmd) GetTag() []int64 {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *WebRcmd) GetAvID() []int64 {
	if m != nil {
		return m.AvID
	}
	return nil
}

func (m *WebRcmd) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *WebRcmd) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

type WebRcmdCard struct {
	// 主键ID
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 卡片类型 1:web相关推荐特殊卡片
	Type int32 `protobuf:"varint,2,opt,name=Type,proto3" json:"type"`
	// 标题
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"title"`
	// 描述
	Desc string `protobuf:"bytes,4,opt,name=Desc,proto3" json:"desc"`
	// 封面
	Cover string `protobuf:"bytes,5,opt,name=Cover,proto3" json:"cover"`
	// 卡片类型 1:url
	ReType int32 `protobuf:"varint,6,opt,name=ReType,proto3" json:"re_type"`
	// 跳转链接
	ReValue              string   `protobuf:"bytes,7,opt,name=ReValue,proto3" json:"re_value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebRcmdCard) Reset()         { *m = WebRcmdCard{} }
func (m *WebRcmdCard) String() string { return proto.CompactTextString(m) }
func (*WebRcmdCard) ProtoMessage()    {}
func (*WebRcmdCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *WebRcmdCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebRcmdCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebRcmdCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebRcmdCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebRcmdCard.Merge(m, src)
}
func (m *WebRcmdCard) XXX_Size() int {
	return m.Size()
}
func (m *WebRcmdCard) XXX_DiscardUnknown() {
	xxx_messageInfo_WebRcmdCard.DiscardUnknown(m)
}

var xxx_messageInfo_WebRcmdCard proto.InternalMessageInfo

func (m *WebRcmdCard) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WebRcmdCard) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *WebRcmdCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *WebRcmdCard) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *WebRcmdCard) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *WebRcmdCard) GetReType() int32 {
	if m != nil {
		return m.ReType
	}
	return 0
}

func (m *WebRcmdCard) GetReValue() string {
	if m != nil {
		return m.ReValue
	}
	return ""
}

type CustomConfigRequest struct {
	TP                   int32    `protobuf:"varint,1,opt,name=TP,json=tp,proto3" json:"tp" form:"tp" validate:"required"`
	Oid                  int64    `protobuf:"varint,2,opt,name=Oid,json=oid,proto3" json:"oid" form:"oid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomConfigRequest) Reset()         { *m = CustomConfigRequest{} }
func (m *CustomConfigRequest) String() string { return proto.CompactTextString(m) }
func (*CustomConfigRequest) ProtoMessage()    {}
func (*CustomConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *CustomConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomConfigRequest.Merge(m, src)
}
func (m *CustomConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *CustomConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomConfigRequest proto.InternalMessageInfo

func (m *CustomConfigRequest) GetTP() int32 {
	if m != nil {
		return m.TP
	}
	return 0
}

func (m *CustomConfigRequest) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

type CustomConfigReply struct {
	TP                   int32    `protobuf:"varint,1,opt,name=TP,proto3" json:"tp"`
	Oid                  int64    `protobuf:"varint,2,opt,name=Oid,proto3" json:"oid"`
	Content              string   `protobuf:"bytes,3,opt,name=Content,proto3" json:"content"`
	URL                  string   `protobuf:"bytes,4,opt,name=URL,proto3" json:"url"`
	HighlightContent     string   `protobuf:"bytes,5,opt,name=HighlightContent,proto3" json:"highlight_content"`
	Image                string   `protobuf:"bytes,6,opt,name=Image,proto3" json:"image"`
	ImageBig             string   `protobuf:"bytes,7,opt,name=ImageBig,proto3" json:"image_big"`
	STime                int64    `protobuf:"varint,8,opt,name=STime,proto3" json:"stime"`
	ETime                int64    `protobuf:"varint,9,opt,name=ETime,proto3" json:"etime"`
	State                int64    `protobuf:"varint,10,opt,name=State,proto3" json:"state"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomConfigReply) Reset()         { *m = CustomConfigReply{} }
func (m *CustomConfigReply) String() string { return proto.CompactTextString(m) }
func (*CustomConfigReply) ProtoMessage()    {}
func (*CustomConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *CustomConfigReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomConfigReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomConfigReply.Merge(m, src)
}
func (m *CustomConfigReply) XXX_Size() int {
	return m.Size()
}
func (m *CustomConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_CustomConfigReply proto.InternalMessageInfo

func (m *CustomConfigReply) GetTP() int32 {
	if m != nil {
		return m.TP
	}
	return 0
}

func (m *CustomConfigReply) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *CustomConfigReply) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CustomConfigReply) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *CustomConfigReply) GetHighlightContent() string {
	if m != nil {
		return m.HighlightContent
	}
	return ""
}

func (m *CustomConfigReply) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CustomConfigReply) GetImageBig() string {
	if m != nil {
		return m.ImageBig
	}
	return ""
}

func (m *CustomConfigReply) GetSTime() int64 {
	if m != nil {
		return m.STime
	}
	return 0
}

func (m *CustomConfigReply) GetETime() int64 {
	if m != nil {
		return m.ETime
	}
	return 0
}

func (m *CustomConfigReply) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

// 主题配置状态 0 下线 1 上线 -1 删除
type SkinExtState struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkinExtState) Reset()         { *m = SkinExtState{} }
func (m *SkinExtState) String() string { return proto.CompactTextString(m) }
func (*SkinExtState) ProtoMessage()    {}
func (*SkinExtState) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *SkinExtState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinExtState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinExtState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkinExtState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinExtState.Merge(m, src)
}
func (m *SkinExtState) XXX_Size() int {
	return m.Size()
}
func (m *SkinExtState) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinExtState.DiscardUnknown(m)
}

var xxx_messageInfo_SkinExtState proto.InternalMessageInfo

// SkinExt 主题配置信息
type SkinExt struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id"`
	// 资源id
	SkinID int64 `protobuf:"varint,2,opt,name=SkinID,json=skin_id,proto3" json:"skin_id"`
	// 资源名称
	SkinName  string                      `protobuf:"bytes,3,opt,name=SkinName,json=skin_name,proto3" json:"skin_name"`
	Attribute int64                       `protobuf:"varint,4,opt,name=Attribute,json=attribute,proto3" json:"attribute"`
	State     SkinExtState_Enum           `protobuf:"varint,5,opt,name=State,json=state,proto3,enum=resource.service.v1.SkinExtState_Enum" json:"state"`
	Ctime     go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,json=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime     go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,json=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Stime     go_common_library_time.Time `protobuf:"varint,8,opt,name=Stime,json=stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime     go_common_library_time.Time `protobuf:"varint,9,opt,name=Etime,json=etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	// LocationPolicyGID 区域限制策略组ID
	LocationPolicyGID    int64    `protobuf:"varint,10,opt,name=LocationPolicyGID,json=location_policy_gid,proto3" json:"location_policy_gid"`
	UserScopeType        string   `protobuf:"bytes,11,opt,name=UserScopeType,json=user_scope_type,proto3" json:"user_scope_type"`
	UserScopeValue       string   `protobuf:"bytes,12,opt,name=UserScopeValue,json=user_scope_value,proto3" json:"user_scope_value"`
	DressUpType          string   `protobuf:"bytes,13,opt,name=DressUpType,json=dress_up_type,proto3" json:"dress_up_type"`
	DressUpValue         string   `protobuf:"bytes,14,opt,name=DressUpValue,json=dress_up_value,proto3" json:"dress_up_value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkinExt) Reset()         { *m = SkinExt{} }
func (m *SkinExt) String() string { return proto.CompactTextString(m) }
func (*SkinExt) ProtoMessage()    {}
func (*SkinExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *SkinExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkinExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinExt.Merge(m, src)
}
func (m *SkinExt) XXX_Size() int {
	return m.Size()
}
func (m *SkinExt) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinExt.DiscardUnknown(m)
}

var xxx_messageInfo_SkinExt proto.InternalMessageInfo

func (m *SkinExt) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SkinExt) GetSkinID() int64 {
	if m != nil {
		return m.SkinID
	}
	return 0
}

func (m *SkinExt) GetSkinName() string {
	if m != nil {
		return m.SkinName
	}
	return ""
}

func (m *SkinExt) GetAttribute() int64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *SkinExt) GetState() SkinExtState_Enum {
	if m != nil {
		return m.State
	}
	return SkinExtState_OFFLINE
}

func (m *SkinExt) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *SkinExt) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *SkinExt) GetStime() go_common_library_time.Time {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *SkinExt) GetEtime() go_common_library_time.Time {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *SkinExt) GetLocationPolicyGID() int64 {
	if m != nil {
		return m.LocationPolicyGID
	}
	return 0
}

func (m *SkinExt) GetUserScopeType() string {
	if m != nil {
		return m.UserScopeType
	}
	return ""
}

func (m *SkinExt) GetUserScopeValue() string {
	if m != nil {
		return m.UserScopeValue
	}
	return ""
}

func (m *SkinExt) GetDressUpType() string {
	if m != nil {
		return m.DressUpType
	}
	return ""
}

func (m *SkinExt) GetDressUpValue() string {
	if m != nil {
		return m.DressUpValue
	}
	return ""
}

// SkinLimitState 主题配置版本信息状态 0 删除 1 上线
type SkinLimitState struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkinLimitState) Reset()         { *m = SkinLimitState{} }
func (m *SkinLimitState) String() string { return proto.CompactTextString(m) }
func (*SkinLimitState) ProtoMessage()    {}
func (*SkinLimitState) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *SkinLimitState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinLimitState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinLimitState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkinLimitState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinLimitState.Merge(m, src)
}
func (m *SkinLimitState) XXX_Size() int {
	return m.Size()
}
func (m *SkinLimitState) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinLimitState.DiscardUnknown(m)
}

var xxx_messageInfo_SkinLimitState proto.InternalMessageInfo

// SkinLimit 主题配置版本信息
type SkinLimit struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id"`
	SID                  int64                       `protobuf:"varint,2,opt,name=SID,json=s_id,proto3" json:"s_id"`
	Conditions           string                      `protobuf:"bytes,3,opt,name=Conditions,json=conditions,proto3" json:"conditions"`
	Build                int64                       `protobuf:"varint,4,opt,name=Build,json=build,proto3" json:"build"`
	State                SkinLimitState_Enum         `protobuf:"varint,5,opt,name=State,json=state,proto3,enum=resource.service.v1.SkinLimitState_Enum" json:"state"`
	Plat                 int32                       `protobuf:"varint,6,opt,name=Plat,json=plat,proto3" json:"plat"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,json=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Ctime,json=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SkinLimit) Reset()         { *m = SkinLimit{} }
func (m *SkinLimit) String() string { return proto.CompactTextString(m) }
func (*SkinLimit) ProtoMessage()    {}
func (*SkinLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *SkinLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkinLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinLimit.Merge(m, src)
}
func (m *SkinLimit) XXX_Size() int {
	return m.Size()
}
func (m *SkinLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinLimit.DiscardUnknown(m)
}

var xxx_messageInfo_SkinLimit proto.InternalMessageInfo

func (m *SkinLimit) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SkinLimit) GetSID() int64 {
	if m != nil {
		return m.SID
	}
	return 0
}

func (m *SkinLimit) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *SkinLimit) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *SkinLimit) GetState() SkinLimitState_Enum {
	if m != nil {
		return m.State
	}
	return SkinLimitState_DELETED
}

func (m *SkinLimit) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *SkinLimit) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *SkinLimit) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

type SkinConfReply struct {
	List                 []*SkinInfo `protobuf:"bytes,1,rep,name=List,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SkinConfReply) Reset()         { *m = SkinConfReply{} }
func (m *SkinConfReply) String() string { return proto.CompactTextString(m) }
func (*SkinConfReply) ProtoMessage()    {}
func (*SkinConfReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *SkinConfReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinConfReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinConfReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkinConfReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinConfReply.Merge(m, src)
}
func (m *SkinConfReply) XXX_Size() int {
	return m.Size()
}
func (m *SkinConfReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinConfReply.DiscardUnknown(m)
}

var xxx_messageInfo_SkinConfReply proto.InternalMessageInfo

func (m *SkinConfReply) GetList() []*SkinInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type SkinInfo struct {
	Info                 *SkinExt     `protobuf:"bytes,1,opt,name=Info,json=info,proto3" json:"info"`
	Limit                []*SkinLimit `protobuf:"bytes,2,rep,name=Limit,json=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SkinInfo) Reset()         { *m = SkinInfo{} }
func (m *SkinInfo) String() string { return proto.CompactTextString(m) }
func (*SkinInfo) ProtoMessage()    {}
func (*SkinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *SkinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinInfo.Merge(m, src)
}
func (m *SkinInfo) XXX_Size() int {
	return m.Size()
}
func (m *SkinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SkinInfo proto.InternalMessageInfo

func (m *SkinInfo) GetInfo() *SkinExt {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SkinInfo) GetLimit() []*SkinLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

type WebPlayerIconRequest struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=Aid,proto3" json:"season_id"`
	TagIDs               []int64  `protobuf:"varint,2,rep,packed,name=TagIDs,proto3" json:"tag_ids"`
	TypeID               int32    `protobuf:"varint,3,opt,name=TypeID,proto3" json:"type_id"`
	SeasonID             int64    `protobuf:"varint,4,opt,name=SeasonID,proto3" json:"season_id"`
	Mid                  int64    `protobuf:"varint,5,opt,name=Mid,proto3" json:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebPlayerIconRequest) Reset()         { *m = WebPlayerIconRequest{} }
func (m *WebPlayerIconRequest) String() string { return proto.CompactTextString(m) }
func (*WebPlayerIconRequest) ProtoMessage()    {}
func (*WebPlayerIconRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *WebPlayerIconRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebPlayerIconRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebPlayerIconRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebPlayerIconRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebPlayerIconRequest.Merge(m, src)
}
func (m *WebPlayerIconRequest) XXX_Size() int {
	return m.Size()
}
func (m *WebPlayerIconRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WebPlayerIconRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WebPlayerIconRequest proto.InternalMessageInfo

func (m *WebPlayerIconRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *WebPlayerIconRequest) GetTagIDs() []int64 {
	if m != nil {
		return m.TagIDs
	}
	return nil
}

func (m *WebPlayerIconRequest) GetTypeID() int32 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *WebPlayerIconRequest) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *WebPlayerIconRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type WebPlayerIconReply struct {
	Icon                 *PlayerIcon `protobuf:"bytes,1,opt,name=Icon,proto3" json:"icon"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WebPlayerIconReply) Reset()         { *m = WebPlayerIconReply{} }
func (m *WebPlayerIconReply) String() string { return proto.CompactTextString(m) }
func (*WebPlayerIconReply) ProtoMessage()    {}
func (*WebPlayerIconReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *WebPlayerIconReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebPlayerIconReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebPlayerIconReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebPlayerIconReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebPlayerIconReply.Merge(m, src)
}
func (m *WebPlayerIconReply) XXX_Size() int {
	return m.Size()
}
func (m *WebPlayerIconReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WebPlayerIconReply.DiscardUnknown(m)
}

var xxx_messageInfo_WebPlayerIconReply proto.InternalMessageInfo

func (m *WebPlayerIconReply) GetIcon() *PlayerIcon {
	if m != nil {
		return m.Icon
	}
	return nil
}

type PlayerIcon struct {
	URL1                 string                      `protobuf:"bytes,1,opt,name=URL1,proto3" json:"url1"`
	Hash1                string                      `protobuf:"bytes,2,opt,name=Hash1,proto3" json:"hash1"`
	URL2                 string                      `protobuf:"bytes,3,opt,name=URL2,proto3" json:"url2"`
	Hash2                string                      `protobuf:"bytes,4,opt,name=Hash2,proto3" json:"info"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PlayerIcon) Reset()         { *m = PlayerIcon{} }
func (m *PlayerIcon) String() string { return proto.CompactTextString(m) }
func (*PlayerIcon) ProtoMessage()    {}
func (*PlayerIcon) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *PlayerIcon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerIcon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerIcon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerIcon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIcon.Merge(m, src)
}
func (m *PlayerIcon) XXX_Size() int {
	return m.Size()
}
func (m *PlayerIcon) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIcon.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIcon proto.InternalMessageInfo

func (m *PlayerIcon) GetURL1() string {
	if m != nil {
		return m.URL1
	}
	return ""
}

func (m *PlayerIcon) GetHash1() string {
	if m != nil {
		return m.Hash1
	}
	return ""
}

func (m *PlayerIcon) GetURL2() string {
	if m != nil {
		return m.URL2
	}
	return ""
}

func (m *PlayerIcon) GetHash2() string {
	if m != nil {
		return m.Hash2
	}
	return ""
}

func (m *PlayerIcon) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

// MngIconRequest
type MngIconRequest struct {
	// 数据id
	Oids []int64 `protobuf:"varint,1,rep,packed,name=oids,proto3" json:"oids,omitempty" validate:"required,dive,gt=0"`
	// 平台：0:Android 1:iphone 5:iphone_i 8:Android_i'
	Plat int32 `protobuf:"varint,2,opt,name=plat,proto3" json:"plat,omitempty"`
	// 登录用户mid
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MngIconRequest) Reset()         { *m = MngIconRequest{} }
func (m *MngIconRequest) String() string { return proto.CompactTextString(m) }
func (*MngIconRequest) ProtoMessage()    {}
func (*MngIconRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}
func (m *MngIconRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MngIconRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MngIconRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MngIconRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MngIconRequest.Merge(m, src)
}
func (m *MngIconRequest) XXX_Size() int {
	return m.Size()
}
func (m *MngIconRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MngIconRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MngIconRequest proto.InternalMessageInfo

func (m *MngIconRequest) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

func (m *MngIconRequest) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *MngIconRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

// MngIconReply
type MngIconReply struct {
	Info                 map[int64]*MngIcon `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MngIconReply) Reset()         { *m = MngIconReply{} }
func (m *MngIconReply) String() string { return proto.CompactTextString(m) }
func (*MngIconReply) ProtoMessage()    {}
func (*MngIconReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}
func (m *MngIconReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MngIconReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MngIconReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MngIconReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MngIconReply.Merge(m, src)
}
func (m *MngIconReply) XXX_Size() int {
	return m.Size()
}
func (m *MngIconReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MngIconReply.DiscardUnknown(m)
}

var xxx_messageInfo_MngIconReply proto.InternalMessageInfo

func (m *MngIconReply) GetInfo() map[int64]*MngIcon {
	if m != nil {
		return m.Info
	}
	return nil
}

type MngIcon struct {
	// 自增id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// icon地址
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	// 全局红点 1-是 0-否
	GlobalRed int32 `protobuf:"varint,3,opt,name=global_red,json=globalRed,proto3" json:"global_red,omitempty"`
	// 影响范围 1-全部用户 2-登录用户 3-指定名单用户
	EffectGroup int32 `protobuf:"varint,4,opt,name=effect_group,json=effectGroup,proto3" json:"effect_group,omitempty"`
	// 影响用户获取接口 （如effect_group=3 则由业务方提供接口判断）
	EffectUrl string `protobuf:"bytes,5,opt,name=effect_url,json=effectUrl,proto3" json:"effect_url,omitempty"`
	// 配置模块
	Module []*IconModule `protobuf:"bytes,6,rep,name=module,proto3" json:"module,omitempty"`
	// 开始时间
	Stime go_common_library_time.Time `protobuf:"varint,7,opt,name=stime,proto3,casttype=go-common/library/time.Time" json:"stime,omitempty"`
	// 结束时间
	Etime                go_common_library_time.Time `protobuf:"varint,8,opt,name=etime,proto3,casttype=go-common/library/time.Time" json:"etime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MngIcon) Reset()         { *m = MngIcon{} }
func (m *MngIcon) String() string { return proto.CompactTextString(m) }
func (*MngIcon) ProtoMessage()    {}
func (*MngIcon) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}
func (m *MngIcon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MngIcon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MngIcon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MngIcon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MngIcon.Merge(m, src)
}
func (m *MngIcon) XXX_Size() int {
	return m.Size()
}
func (m *MngIcon) XXX_DiscardUnknown() {
	xxx_messageInfo_MngIcon.DiscardUnknown(m)
}

var xxx_messageInfo_MngIcon proto.InternalMessageInfo

func (m *MngIcon) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MngIcon) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *MngIcon) GetGlobalRed() int32 {
	if m != nil {
		return m.GlobalRed
	}
	return 0
}

func (m *MngIcon) GetEffectGroup() int32 {
	if m != nil {
		return m.EffectGroup
	}
	return 0
}

func (m *MngIcon) GetEffectUrl() string {
	if m != nil {
		return m.EffectUrl
	}
	return ""
}

func (m *MngIcon) GetModule() []*IconModule {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *MngIcon) GetStime() go_common_library_time.Time {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *MngIcon) GetEtime() go_common_library_time.Time {
	if m != nil {
		return m.Etime
	}
	return 0
}

type IconModule struct {
	Plat                 int32    `protobuf:"varint,1,opt,name=plat,proto3" json:"plat,omitempty"`
	Oid                  int64    `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IconModule) Reset()         { *m = IconModule{} }
func (m *IconModule) String() string { return proto.CompactTextString(m) }
func (*IconModule) ProtoMessage()    {}
func (*IconModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}
func (m *IconModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IconModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IconModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IconModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IconModule.Merge(m, src)
}
func (m *IconModule) XXX_Size() int {
	return m.Size()
}
func (m *IconModule) XXX_DiscardUnknown() {
	xxx_messageInfo_IconModule.DiscardUnknown(m)
}

var xxx_messageInfo_IconModule proto.InternalMessageInfo

func (m *IconModule) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *IconModule) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

type MineSectionsRequest struct {
	Plat    int32  `protobuf:"varint,1,opt,name=plat,proto3" json:"plat,omitempty"`
	Build   int32  `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	Mid     int64  `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Lang    string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	Channel string `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	Ip      string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	// 是否为up主
	IsUploader bool `protobuf:"varint,7,opt,name=is_uploader,json=isUploader,proto3" json:"is_uploader,omitempty"`
	// 是否为已开播主播
	IsLiveHost bool `protobuf:"varint,8,opt,name=is_live_host,json=isLiveHost,proto3" json:"is_live_host,omitempty"`
	// 历史粉丝数峰值
	FansCount int64 `protobuf:"varint,9,opt,name=fans_count,json=fansCount,proto3" json:"fans_count,omitempty"`
	// buvid
	Buvid                string   `protobuf:"bytes,10,opt,name=buvid,proto3" json:"buvid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MineSectionsRequest) Reset()         { *m = MineSectionsRequest{} }
func (m *MineSectionsRequest) String() string { return proto.CompactTextString(m) }
func (*MineSectionsRequest) ProtoMessage()    {}
func (*MineSectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{44}
}
func (m *MineSectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MineSectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MineSectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MineSectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MineSectionsRequest.Merge(m, src)
}
func (m *MineSectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MineSectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MineSectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MineSectionsRequest proto.InternalMessageInfo

func (m *MineSectionsRequest) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *MineSectionsRequest) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *MineSectionsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MineSectionsRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *MineSectionsRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *MineSectionsRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *MineSectionsRequest) GetIsUploader() bool {
	if m != nil {
		return m.IsUploader
	}
	return false
}

func (m *MineSectionsRequest) GetIsLiveHost() bool {
	if m != nil {
		return m.IsLiveHost
	}
	return false
}

func (m *MineSectionsRequest) GetFansCount() int64 {
	if m != nil {
		return m.FansCount
	}
	return 0
}

func (m *MineSectionsRequest) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

type MineSectionsReply struct {
	Sections             []*Section `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MineSectionsReply) Reset()         { *m = MineSectionsReply{} }
func (m *MineSectionsReply) String() string { return proto.CompactTextString(m) }
func (*MineSectionsReply) ProtoMessage()    {}
func (*MineSectionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{45}
}
func (m *MineSectionsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MineSectionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MineSectionsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MineSectionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MineSectionsReply.Merge(m, src)
}
func (m *MineSectionsReply) XXX_Size() int {
	return m.Size()
}
func (m *MineSectionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MineSectionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_MineSectionsReply proto.InternalMessageInfo

func (m *MineSectionsReply) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

// 首页的模块
type HomeSectionsRequest struct {
	// 平台
	Plat int32 `protobuf:"varint,1,opt,name=plat,proto3" json:"plat,omitempty"`
	// 版本
	Build int32 `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	// 用户mid
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	// 语言
	Lang string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	// 渠道
	Channel string `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	// ip地址
	Ip string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	// buvid
	Buvid                string   `protobuf:"bytes,7,opt,name=buvid,proto3" json:"buvid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HomeSectionsRequest) Reset()         { *m = HomeSectionsRequest{} }
func (m *HomeSectionsRequest) String() string { return proto.CompactTextString(m) }
func (*HomeSectionsRequest) ProtoMessage()    {}
func (*HomeSectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46}
}
func (m *HomeSectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HomeSectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HomeSectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HomeSectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeSectionsRequest.Merge(m, src)
}
func (m *HomeSectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *HomeSectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeSectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HomeSectionsRequest proto.InternalMessageInfo

func (m *HomeSectionsRequest) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *HomeSectionsRequest) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *HomeSectionsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *HomeSectionsRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *HomeSectionsRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *HomeSectionsRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HomeSectionsRequest) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

type HomeSectionsReply struct {
	Sections             []*Section `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HomeSectionsReply) Reset()         { *m = HomeSectionsReply{} }
func (m *HomeSectionsReply) String() string { return proto.CompactTextString(m) }
func (*HomeSectionsReply) ProtoMessage()    {}
func (*HomeSectionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{47}
}
func (m *HomeSectionsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HomeSectionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HomeSectionsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HomeSectionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeSectionsReply.Merge(m, src)
}
func (m *HomeSectionsReply) XXX_Size() int {
	return m.Size()
}
func (m *HomeSectionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeSectionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_HomeSectionsReply proto.InternalMessageInfo

func (m *HomeSectionsReply) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

type Section struct {
	Id              int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Style           int32          `protobuf:"varint,3,opt,name=style,proto3" json:"style,omitempty"`
	ButtonName      string         `protobuf:"bytes,4,opt,name=button_name,json=buttonName,proto3" json:"button_name,omitempty"`
	ButtonUrl       string         `protobuf:"bytes,5,opt,name=button_url,json=buttonUrl,proto3" json:"button_url,omitempty"`
	ButtonIcon      string         `protobuf:"bytes,6,opt,name=button_icon,json=buttonIcon,proto3" json:"button_icon,omitempty"`
	ButtonStyle     int32          `protobuf:"varint,7,opt,name=button_style,json=buttonStyle,proto3" json:"button_style,omitempty"`
	TitleColor      string         `protobuf:"bytes,8,opt,name=title_color,json=titleColor,proto3" json:"title_color,omitempty"`
	Subtitle        string         `protobuf:"bytes,9,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	SubtitleUrl     string         `protobuf:"bytes,10,opt,name=subtitle_url,json=subtitleUrl,proto3" json:"subtitle_url,omitempty"`
	SubtitleColor   string         `protobuf:"bytes,11,opt,name=subtitle_color,json=subtitleColor,proto3" json:"subtitle_color,omitempty"`
	Background      string         `protobuf:"bytes,12,opt,name=background,proto3" json:"background,omitempty"`
	BackgroundColor string         `protobuf:"bytes,13,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	Items           []*SectionItem `protobuf:"bytes,14,rep,name=items,proto3" json:"items,omitempty"`
	AuditShow       int32          `protobuf:"varint,15,opt,name=audit_show,json=auditShow,proto3" json:"audit_show,omitempty"`
	IsMng           int32          `protobuf:"varint,16,opt,name=is_mng,json=isMng,proto3" json:"is_mng,omitempty"`
	// 运营位样式：当style为3时，此字段有意义，0-通用运营位，1-投稿引导强化卡
	OpStyleType          int32    `protobuf:"varint,17,opt,name=op_style_type,json=opStyleType,proto3" json:"op_style_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Section) Reset()         { *m = Section{} }
func (m *Section) String() string { return proto.CompactTextString(m) }
func (*Section) ProtoMessage()    {}
func (*Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48}
}
func (m *Section) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Section.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Section.Merge(m, src)
}
func (m *Section) XXX_Size() int {
	return m.Size()
}
func (m *Section) XXX_DiscardUnknown() {
	xxx_messageInfo_Section.DiscardUnknown(m)
}

var xxx_messageInfo_Section proto.InternalMessageInfo

func (m *Section) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Section) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Section) GetStyle() int32 {
	if m != nil {
		return m.Style
	}
	return 0
}

func (m *Section) GetButtonName() string {
	if m != nil {
		return m.ButtonName
	}
	return ""
}

func (m *Section) GetButtonUrl() string {
	if m != nil {
		return m.ButtonUrl
	}
	return ""
}

func (m *Section) GetButtonIcon() string {
	if m != nil {
		return m.ButtonIcon
	}
	return ""
}

func (m *Section) GetButtonStyle() int32 {
	if m != nil {
		return m.ButtonStyle
	}
	return 0
}

func (m *Section) GetTitleColor() string {
	if m != nil {
		return m.TitleColor
	}
	return ""
}

func (m *Section) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *Section) GetSubtitleUrl() string {
	if m != nil {
		return m.SubtitleUrl
	}
	return ""
}

func (m *Section) GetSubtitleColor() string {
	if m != nil {
		return m.SubtitleColor
	}
	return ""
}

func (m *Section) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *Section) GetBackgroundColor() string {
	if m != nil {
		return m.BackgroundColor
	}
	return ""
}

func (m *Section) GetItems() []*SectionItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Section) GetAuditShow() int32 {
	if m != nil {
		return m.AuditShow
	}
	return 0
}

func (m *Section) GetIsMng() int32 {
	if m != nil {
		return m.IsMng
	}
	return 0
}

func (m *Section) GetOpStyleType() int32 {
	if m != nil {
		return m.OpStyleType
	}
	return 0
}

type SectionItem struct {
	Id           int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Uri          string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Icon         string   `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	NeedLogin    int32    `protobuf:"varint,5,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	RedDot       int32    `protobuf:"varint,6,opt,name=red_dot,json=redDot,proto3" json:"red_dot,omitempty"`
	GlobalRedDot int32    `protobuf:"varint,7,opt,name=global_red_dot,json=globalRedDot,proto3" json:"global_red_dot,omitempty"`
	Display      int32    `protobuf:"varint,8,opt,name=display,proto3" json:"display,omitempty"`
	MngIcon      *MngIcon `protobuf:"bytes,9,opt,name=mng_icon,json=mngIcon,proto3" json:"mng_icon,omitempty"`
	RedDotForNew bool     `protobuf:"varint,10,opt,name=red_dot_for_new,json=redDotForNew,proto3" json:"red_dot_for_new,omitempty"`
	// 运营位标题
	OpTitle string `protobuf:"bytes,11,opt,name=op_title,json=opTitle,proto3" json:"op_title,omitempty"`
	// 运营位副标题
	OpSubTitle string `protobuf:"bytes,12,opt,name=op_sub_title,json=opSubTitle,proto3" json:"op_sub_title,omitempty"`
	// 运营位标题图标
	OpTitleIcon string `protobuf:"bytes,13,opt,name=op_title_icon,json=opTitleIcon,proto3" json:"op_title_icon,omitempty"`
	// 运营位链接文案
	OpLinkText string `protobuf:"bytes,14,opt,name=op_link_text,json=opLinkText,proto3" json:"op_link_text,omitempty"`
	// 运营位链接图标
	OpLinkIcon string `protobuf:"bytes,15,opt,name=op_link_icon,json=opLinkIcon,proto3" json:"op_link_icon,omitempty"`
	// 运营位链接类型
	OpLinkType SectionItemOpLinkType_Enum `protobuf:"varint,16,opt,name=op_link_type,json=opLinkType,proto3,enum=resource.service.v1.SectionItemOpLinkType_Enum" json:"op_link_type,omitempty"`
	// tab id
	TabId string `protobuf:"bytes,17,opt,name=tab_id,json=tabId,proto3" json:"tab_id,omitempty"`
	// animate
	Animate string `protobuf:"bytes,18,opt,name=animate,proto3" json:"animate,omitempty"`
	// 底部tab选中后的图标样式
	LogoSelected string `protobuf:"bytes,19,opt,name=logo_selected,json=logoSelected,proto3" json:"logo_selected,omitempty"`
	// 判定红点的url
	RedDotUrl string `protobuf:"bytes,20,opt,name=red_dot_url,json=redDotUrl,proto3" json:"red_dot_url,omitempty"`
	// 运营位标题颜色
	OpTitleColor string `protobuf:"bytes,21,opt,name=op_title_color,json=opTitleColor,proto3" json:"op_title_color,omitempty"`
	// 运营位背景颜色
	OpBackgroundColor string `protobuf:"bytes,22,opt,name=op_background_color,json=opBackgroundColor,proto3" json:"op_background_color,omitempty"`
	// 运营位跳链颜色
	OpLinkContainerColor string   `protobuf:"bytes,23,opt,name=op_link_container_color,json=opLinkContainerColor,proto3" json:"op_link_container_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SectionItem) Reset()         { *m = SectionItem{} }
func (m *SectionItem) String() string { return proto.CompactTextString(m) }
func (*SectionItem) ProtoMessage()    {}
func (*SectionItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{49}
}
func (m *SectionItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionItem.Merge(m, src)
}
func (m *SectionItem) XXX_Size() int {
	return m.Size()
}
func (m *SectionItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionItem.DiscardUnknown(m)
}

var xxx_messageInfo_SectionItem proto.InternalMessageInfo

func (m *SectionItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SectionItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SectionItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *SectionItem) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *SectionItem) GetNeedLogin() int32 {
	if m != nil {
		return m.NeedLogin
	}
	return 0
}

func (m *SectionItem) GetRedDot() int32 {
	if m != nil {
		return m.RedDot
	}
	return 0
}

func (m *SectionItem) GetGlobalRedDot() int32 {
	if m != nil {
		return m.GlobalRedDot
	}
	return 0
}

func (m *SectionItem) GetDisplay() int32 {
	if m != nil {
		return m.Display
	}
	return 0
}

func (m *SectionItem) GetMngIcon() *MngIcon {
	if m != nil {
		return m.MngIcon
	}
	return nil
}

func (m *SectionItem) GetRedDotForNew() bool {
	if m != nil {
		return m.RedDotForNew
	}
	return false
}

func (m *SectionItem) GetOpTitle() string {
	if m != nil {
		return m.OpTitle
	}
	return ""
}

func (m *SectionItem) GetOpSubTitle() string {
	if m != nil {
		return m.OpSubTitle
	}
	return ""
}

func (m *SectionItem) GetOpTitleIcon() string {
	if m != nil {
		return m.OpTitleIcon
	}
	return ""
}

func (m *SectionItem) GetOpLinkText() string {
	if m != nil {
		return m.OpLinkText
	}
	return ""
}

func (m *SectionItem) GetOpLinkIcon() string {
	if m != nil {
		return m.OpLinkIcon
	}
	return ""
}

func (m *SectionItem) GetOpLinkType() SectionItemOpLinkType_Enum {
	if m != nil {
		return m.OpLinkType
	}
	return SectionItemOpLinkType_BUTTON
}

func (m *SectionItem) GetTabId() string {
	if m != nil {
		return m.TabId
	}
	return ""
}

func (m *SectionItem) GetAnimate() string {
	if m != nil {
		return m.Animate
	}
	return ""
}

func (m *SectionItem) GetLogoSelected() string {
	if m != nil {
		return m.LogoSelected
	}
	return ""
}

func (m *SectionItem) GetRedDotUrl() string {
	if m != nil {
		return m.RedDotUrl
	}
	return ""
}

func (m *SectionItem) GetOpTitleColor() string {
	if m != nil {
		return m.OpTitleColor
	}
	return ""
}

func (m *SectionItem) GetOpBackgroundColor() string {
	if m != nil {
		return m.OpBackgroundColor
	}
	return ""
}

func (m *SectionItem) GetOpLinkContainerColor() string {
	if m != nil {
		return m.OpLinkContainerColor
	}
	return ""
}

type SectionItemOpLinkType struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SectionItemOpLinkType) Reset()         { *m = SectionItemOpLinkType{} }
func (m *SectionItemOpLinkType) String() string { return proto.CompactTextString(m) }
func (*SectionItemOpLinkType) ProtoMessage()    {}
func (*SectionItemOpLinkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50}
}
func (m *SectionItemOpLinkType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SectionItemOpLinkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SectionItemOpLinkType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SectionItemOpLinkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SectionItemOpLinkType.Merge(m, src)
}
func (m *SectionItemOpLinkType) XXX_Size() int {
	return m.Size()
}
func (m *SectionItemOpLinkType) XXX_DiscardUnknown() {
	xxx_messageInfo_SectionItemOpLinkType.DiscardUnknown(m)
}

var xxx_messageInfo_SectionItemOpLinkType proto.InternalMessageInfo

type InformationRegionCardReply struct {
	InformationRegionCards []*InformationRegionCard `protobuf:"bytes,1,rep,name=information_region_cards,json=informationRegionCards,proto3" json:"information_region_cards,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *InformationRegionCardReply) Reset()         { *m = InformationRegionCardReply{} }
func (m *InformationRegionCardReply) String() string { return proto.CompactTextString(m) }
func (*InformationRegionCardReply) ProtoMessage()    {}
func (*InformationRegionCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{51}
}
func (m *InformationRegionCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InformationRegionCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InformationRegionCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InformationRegionCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InformationRegionCardReply.Merge(m, src)
}
func (m *InformationRegionCardReply) XXX_Size() int {
	return m.Size()
}
func (m *InformationRegionCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InformationRegionCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_InformationRegionCardReply proto.InternalMessageInfo

func (m *InformationRegionCardReply) GetInformationRegionCards() []*InformationRegionCard {
	if m != nil {
		return m.InformationRegionCards
	}
	return nil
}

type InformationRegionCard struct {
	CardType             int32    `protobuf:"varint,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	Rid                  int64    `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	CardPosition         int32    `protobuf:"varint,3,opt,name=card_position,json=cardPosition,proto3" json:"card_position,omitempty"`
	IsCover              int32    `protobuf:"varint,4,opt,name=isCover,proto3" json:"isCover,omitempty"`
	PositionIdx          int32    `protobuf:"varint,5,opt,name=position_idx,json=positionIdx,proto3" json:"position_idx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InformationRegionCard) Reset()         { *m = InformationRegionCard{} }
func (m *InformationRegionCard) String() string { return proto.CompactTextString(m) }
func (*InformationRegionCard) ProtoMessage()    {}
func (*InformationRegionCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{52}
}
func (m *InformationRegionCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InformationRegionCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InformationRegionCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InformationRegionCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InformationRegionCard.Merge(m, src)
}
func (m *InformationRegionCard) XXX_Size() int {
	return m.Size()
}
func (m *InformationRegionCard) XXX_DiscardUnknown() {
	xxx_messageInfo_InformationRegionCard.DiscardUnknown(m)
}

var xxx_messageInfo_InformationRegionCard proto.InternalMessageInfo

func (m *InformationRegionCard) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *InformationRegionCard) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *InformationRegionCard) GetCardPosition() int32 {
	if m != nil {
		return m.CardPosition
	}
	return 0
}

func (m *InformationRegionCard) GetIsCover() int32 {
	if m != nil {
		return m.IsCover
	}
	return 0
}

func (m *InformationRegionCard) GetPositionIdx() int32 {
	if m != nil {
		return m.PositionIdx
	}
	return 0
}

type GetS10PopEntranceAidsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetS10PopEntranceAidsReq) Reset()         { *m = GetS10PopEntranceAidsReq{} }
func (m *GetS10PopEntranceAidsReq) String() string { return proto.CompactTextString(m) }
func (*GetS10PopEntranceAidsReq) ProtoMessage()    {}
func (*GetS10PopEntranceAidsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{53}
}
func (m *GetS10PopEntranceAidsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetS10PopEntranceAidsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetS10PopEntranceAidsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetS10PopEntranceAidsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetS10PopEntranceAidsReq.Merge(m, src)
}
func (m *GetS10PopEntranceAidsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetS10PopEntranceAidsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetS10PopEntranceAidsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetS10PopEntranceAidsReq proto.InternalMessageInfo

type GetS10PopEntranceAidsReply struct {
	// 最多返回200个aid
	Aids                 []int64  `protobuf:"varint,1,rep,packed,name=aids,proto3" json:"aids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetS10PopEntranceAidsReply) Reset()         { *m = GetS10PopEntranceAidsReply{} }
func (m *GetS10PopEntranceAidsReply) String() string { return proto.CompactTextString(m) }
func (*GetS10PopEntranceAidsReply) ProtoMessage()    {}
func (*GetS10PopEntranceAidsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{54}
}
func (m *GetS10PopEntranceAidsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetS10PopEntranceAidsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetS10PopEntranceAidsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetS10PopEntranceAidsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetS10PopEntranceAidsReply.Merge(m, src)
}
func (m *GetS10PopEntranceAidsReply) XXX_Size() int {
	return m.Size()
}
func (m *GetS10PopEntranceAidsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetS10PopEntranceAidsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetS10PopEntranceAidsReply proto.InternalMessageInfo

func (m *GetS10PopEntranceAidsReply) GetAids() []int64 {
	if m != nil {
		return m.Aids
	}
	return nil
}

type ResourceAllReply struct {
	Resources            []*ResourceInfo `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResourceAllReply) Reset()         { *m = ResourceAllReply{} }
func (m *ResourceAllReply) String() string { return proto.CompactTextString(m) }
func (*ResourceAllReply) ProtoMessage()    {}
func (*ResourceAllReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{55}
}
func (m *ResourceAllReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceAllReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceAllReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceAllReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceAllReply.Merge(m, src)
}
func (m *ResourceAllReply) XXX_Size() int {
	return m.Size()
}
func (m *ResourceAllReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceAllReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceAllReply proto.InternalMessageInfo

func (m *ResourceAllReply) GetResources() []*ResourceInfo {
	if m != nil {
		return m.Resources
	}
	return nil
}

type ResourceInfo struct {
	Id                   int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Platform             int32                       `protobuf:"varint,2,opt,name=platform,proto3" json:"platform,omitempty"`
	Name                 string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Parent               int32                       `protobuf:"varint,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Counter              int32                       `protobuf:"varint,5,opt,name=counter,proto3" json:"counter,omitempty"`
	Position             int32                       `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`
	Rule                 string                      `protobuf:"bytes,7,opt,name=rule,proto3" json:"rule,omitempty"`
	Size_                string                      `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`
	Preview              string                      `protobuf:"bytes,9,opt,name=preview,proto3" json:"preview,omitempty"`
	Description          string                      `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Mark                 string                      `protobuf:"bytes,11,opt,name=mark,proto3" json:"mark,omitempty"`
	Assignments          []*Assignment               `protobuf:"bytes,12,rep,name=assignments,proto3" json:"assignments,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,13,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,14,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	Level                int64                       `protobuf:"varint,15,opt,name=level,proto3" json:"level,omitempty"`
	Type                 int32                       `protobuf:"varint,16,opt,name=type,proto3" json:"type,omitempty"`
	IsAd                 int32                       `protobuf:"varint,17,opt,name=is_ad,json=isAd,proto3" json:"is_ad,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ResourceInfo) Reset()         { *m = ResourceInfo{} }
func (m *ResourceInfo) String() string { return proto.CompactTextString(m) }
func (*ResourceInfo) ProtoMessage()    {}
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{56}
}
func (m *ResourceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceInfo.Merge(m, src)
}
func (m *ResourceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceInfo proto.InternalMessageInfo

func (m *ResourceInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResourceInfo) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ResourceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceInfo) GetParent() int32 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *ResourceInfo) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *ResourceInfo) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *ResourceInfo) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *ResourceInfo) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func (m *ResourceInfo) GetPreview() string {
	if m != nil {
		return m.Preview
	}
	return ""
}

func (m *ResourceInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ResourceInfo) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

func (m *ResourceInfo) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

func (m *ResourceInfo) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ResourceInfo) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *ResourceInfo) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ResourceInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ResourceInfo) GetIsAd() int32 {
	if m != nil {
		return m.IsAd
	}
	return 0
}

type Assignment struct {
	Id                   int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ContractId           string                      `protobuf:"bytes,3,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ResourceId           int32                       `protobuf:"varint,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Pic                  string                      `protobuf:"bytes,5,opt,name=pic,proto3" json:"pic,omitempty"`
	Litpic               string                      `protobuf:"bytes,6,opt,name=litpic,proto3" json:"litpic,omitempty"`
	Url                  string                      `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Rule                 string                      `protobuf:"bytes,8,opt,name=rule,proto3" json:"rule,omitempty"`
	Weight               int32                       `protobuf:"varint,9,opt,name=weight,proto3" json:"weight,omitempty"`
	Agency               string                      `protobuf:"bytes,10,opt,name=agency,proto3" json:"agency,omitempty"`
	Price                float32                     `protobuf:"fixed32,11,opt,name=price,proto3" json:"price,omitempty"`
	State                int32                       `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	Atype                int32                       `protobuf:"varint,13,opt,name=atype,proto3" json:"atype,omitempty"`
	Username             string                      `protobuf:"bytes,14,opt,name=username,proto3" json:"username,omitempty"`
	PlayerCategory       int32                       `protobuf:"varint,15,opt,name=player_category,json=playerCategory,proto3" json:"player_category,omitempty"`
	Stime                go_common_library_time.Time `protobuf:"varint,16,opt,name=stime,proto3,casttype=go-common/library/time.Time" json:"stime,omitempty"`
	Etime                go_common_library_time.Time `protobuf:"varint,17,opt,name=etime,proto3,casttype=go-common/library/time.Time" json:"etime,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,18,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,19,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	ActivityId           int64                       `protobuf:"varint,20,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityStime        go_common_library_time.Time `protobuf:"varint,21,opt,name=activity_stime,json=activityStime,proto3,casttype=go-common/library/time.Time" json:"activity_stime,omitempty"`
	ActivityEtime        go_common_library_time.Time `protobuf:"varint,22,opt,name=activity_etime,json=activityEtime,proto3,casttype=go-common/library/time.Time" json:"activity_etime,omitempty"`
	Category             int32                       `protobuf:"varint,23,opt,name=category,proto3" json:"category,omitempty"`
	SubTitle             string                      `protobuf:"bytes,24,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Assignment) Reset()         { *m = Assignment{} }
func (m *Assignment) String() string { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()    {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{57}
}
func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(m, src)
}
func (m *Assignment) XXX_Size() int {
	return m.Size()
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Assignment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Assignment) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *Assignment) GetResourceId() int32 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *Assignment) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *Assignment) GetLitpic() string {
	if m != nil {
		return m.Litpic
	}
	return ""
}

func (m *Assignment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Assignment) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *Assignment) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Assignment) GetAgency() string {
	if m != nil {
		return m.Agency
	}
	return ""
}

func (m *Assignment) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Assignment) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Assignment) GetAtype() int32 {
	if m != nil {
		return m.Atype
	}
	return 0
}

func (m *Assignment) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Assignment) GetPlayerCategory() int32 {
	if m != nil {
		return m.PlayerCategory
	}
	return 0
}

func (m *Assignment) GetStime() go_common_library_time.Time {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *Assignment) GetEtime() go_common_library_time.Time {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *Assignment) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Assignment) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *Assignment) GetActivityId() int64 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *Assignment) GetActivityStime() go_common_library_time.Time {
	if m != nil {
		return m.ActivityStime
	}
	return 0
}

func (m *Assignment) GetActivityEtime() go_common_library_time.Time {
	if m != nil {
		return m.ActivityEtime
	}
	return 0
}

func (m *Assignment) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *Assignment) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

type AssignmentAllReply struct {
	Assignments          []*Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AssignmentAllReply) Reset()         { *m = AssignmentAllReply{} }
func (m *AssignmentAllReply) String() string { return proto.CompactTextString(m) }
func (*AssignmentAllReply) ProtoMessage()    {}
func (*AssignmentAllReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{58}
}
func (m *AssignmentAllReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignmentAllReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignmentAllReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignmentAllReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentAllReply.Merge(m, src)
}
func (m *AssignmentAllReply) XXX_Size() int {
	return m.Size()
}
func (m *AssignmentAllReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentAllReply.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentAllReply proto.InternalMessageInfo

func (m *AssignmentAllReply) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type DefBannerReply struct {
	DefBanner            *Assignment `protobuf:"bytes,1,opt,name=defBanner,proto3" json:"defBanner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DefBannerReply) Reset()         { *m = DefBannerReply{} }
func (m *DefBannerReply) String() string { return proto.CompactTextString(m) }
func (*DefBannerReply) ProtoMessage()    {}
func (*DefBannerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{59}
}
func (m *DefBannerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefBannerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefBannerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefBannerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefBannerReply.Merge(m, src)
}
func (m *DefBannerReply) XXX_Size() int {
	return m.Size()
}
func (m *DefBannerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DefBannerReply.DiscardUnknown(m)
}

var xxx_messageInfo_DefBannerReply proto.InternalMessageInfo

func (m *DefBannerReply) GetDefBanner() *Assignment {
	if m != nil {
		return m.DefBanner
	}
	return nil
}

type ResourceRequest struct {
	ResID                int32    `protobuf:"varint,1,opt,name=resID,proto3" json:"resID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceRequest) Reset()         { *m = ResourceRequest{} }
func (m *ResourceRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceRequest) ProtoMessage()    {}
func (*ResourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{60}
}
func (m *ResourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceRequest.Merge(m, src)
}
func (m *ResourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceRequest proto.InternalMessageInfo

func (m *ResourceRequest) GetResID() int32 {
	if m != nil {
		return m.ResID
	}
	return 0
}

type ResourceReply struct {
	Resource             *ResourceInfo `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResourceReply) Reset()         { *m = ResourceReply{} }
func (m *ResourceReply) String() string { return proto.CompactTextString(m) }
func (*ResourceReply) ProtoMessage()    {}
func (*ResourceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{61}
}
func (m *ResourceReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceReply.Merge(m, src)
}
func (m *ResourceReply) XXX_Size() int {
	return m.Size()
}
func (m *ResourceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceReply proto.InternalMessageInfo

func (m *ResourceReply) GetResource() *ResourceInfo {
	if m != nil {
		return m.Resource
	}
	return nil
}

type ResourcesRequest struct {
	ResIDs               []int32  `protobuf:"varint,1,rep,packed,name=resIDs,proto3" json:"resIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourcesRequest) Reset()         { *m = ResourcesRequest{} }
func (m *ResourcesRequest) String() string { return proto.CompactTextString(m) }
func (*ResourcesRequest) ProtoMessage()    {}
func (*ResourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{62}
}
func (m *ResourcesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourcesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourcesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourcesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcesRequest.Merge(m, src)
}
func (m *ResourcesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResourcesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcesRequest proto.InternalMessageInfo

func (m *ResourcesRequest) GetResIDs() []int32 {
	if m != nil {
		return m.ResIDs
	}
	return nil
}

type ResourcesReply struct {
	Resources            map[int32]*ResourceInfo `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ResourcesReply) Reset()         { *m = ResourcesReply{} }
func (m *ResourcesReply) String() string { return proto.CompactTextString(m) }
func (*ResourcesReply) ProtoMessage()    {}
func (*ResourcesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{63}
}
func (m *ResourcesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourcesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourcesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourcesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcesReply.Merge(m, src)
}
func (m *ResourcesReply) XXX_Size() int {
	return m.Size()
}
func (m *ResourcesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcesReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcesReply proto.InternalMessageInfo

func (m *ResourcesReply) GetResources() map[int32]*ResourceInfo {
	if m != nil {
		return m.Resources
	}
	return nil
}

type PasterAPPRequest struct {
	Platform             int32    `protobuf:"varint,1,opt,name=platform,proto3" json:"platform,omitempty"`
	AdType               int32    `protobuf:"varint,2,opt,name=adType,proto3" json:"adType,omitempty"`
	Aid                  string   `protobuf:"bytes,3,opt,name=aid,proto3" json:"aid,omitempty"`
	TypeID               string   `protobuf:"bytes,4,opt,name=typeID,proto3" json:"typeID,omitempty"`
	Buvid                string   `protobuf:"bytes,5,opt,name=buvid,proto3" json:"buvid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasterAPPRequest) Reset()         { *m = PasterAPPRequest{} }
func (m *PasterAPPRequest) String() string { return proto.CompactTextString(m) }
func (*PasterAPPRequest) ProtoMessage()    {}
func (*PasterAPPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{64}
}
func (m *PasterAPPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasterAPPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasterAPPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasterAPPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasterAPPRequest.Merge(m, src)
}
func (m *PasterAPPRequest) XXX_Size() int {
	return m.Size()
}
func (m *PasterAPPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PasterAPPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PasterAPPRequest proto.InternalMessageInfo

func (m *PasterAPPRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *PasterAPPRequest) GetAdType() int32 {
	if m != nil {
		return m.AdType
	}
	return 0
}

func (m *PasterAPPRequest) GetAid() string {
	if m != nil {
		return m.Aid
	}
	return ""
}

func (m *PasterAPPRequest) GetTypeID() string {
	if m != nil {
		return m.TypeID
	}
	return ""
}

func (m *PasterAPPRequest) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

type PasterAPPReply struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	Cid                  int64    `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Duration             int64    `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	AllowJump            int32    `protobuf:"varint,5,opt,name=allow_jump,json=allowJump,proto3" json:"allow_jump,omitempty"`
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasterAPPReply) Reset()         { *m = PasterAPPReply{} }
func (m *PasterAPPReply) String() string { return proto.CompactTextString(m) }
func (*PasterAPPReply) ProtoMessage()    {}
func (*PasterAPPReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{65}
}
func (m *PasterAPPReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasterAPPReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasterAPPReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasterAPPReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasterAPPReply.Merge(m, src)
}
func (m *PasterAPPReply) XXX_Size() int {
	return m.Size()
}
func (m *PasterAPPReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PasterAPPReply.DiscardUnknown(m)
}

var xxx_messageInfo_PasterAPPReply proto.InternalMessageInfo

func (m *PasterAPPReply) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PasterAPPReply) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *PasterAPPReply) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PasterAPPReply) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PasterAPPReply) GetAllowJump() int32 {
	if m != nil {
		return m.AllowJump
	}
	return 0
}

func (m *PasterAPPReply) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type IndexIconReply struct {
	IndexIcon            map[string]*IndexIcon `protobuf:"bytes,1,rep,name=indexIcon,proto3" json:"indexIcon,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IndexIconReply) Reset()         { *m = IndexIconReply{} }
func (m *IndexIconReply) String() string { return proto.CompactTextString(m) }
func (*IndexIconReply) ProtoMessage()    {}
func (*IndexIconReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{66}
}
func (m *IndexIconReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexIconReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexIconReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexIconReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexIconReply.Merge(m, src)
}
func (m *IndexIconReply) XXX_Size() int {
	return m.Size()
}
func (m *IndexIconReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexIconReply.DiscardUnknown(m)
}

var xxx_messageInfo_IndexIconReply proto.InternalMessageInfo

func (m *IndexIconReply) GetIndexIcon() map[string]*IndexIcon {
	if m != nil {
		return m.IndexIcon
	}
	return nil
}

type IndexIcon struct {
	IndexIconItem        []*IndexIconItem `protobuf:"bytes,1,rep,name=indexIconItem,proto3" json:"indexIconItem,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *IndexIcon) Reset()         { *m = IndexIcon{} }
func (m *IndexIcon) String() string { return proto.CompactTextString(m) }
func (*IndexIcon) ProtoMessage()    {}
func (*IndexIcon) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{67}
}
func (m *IndexIcon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexIcon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexIcon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexIcon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexIcon.Merge(m, src)
}
func (m *IndexIcon) XXX_Size() int {
	return m.Size()
}
func (m *IndexIcon) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexIcon.DiscardUnknown(m)
}

var xxx_messageInfo_IndexIcon proto.InternalMessageInfo

func (m *IndexIcon) GetIndexIconItem() []*IndexIconItem {
	if m != nil {
		return m.IndexIconItem
	}
	return nil
}

type IndexIconItem struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 int32                       `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Title                string                      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Links                []string                    `protobuf:"bytes,4,rep,name=links,proto3" json:"links,omitempty"`
	Icon                 string                      `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Weight               int32                       `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	UserName             string                      `protobuf:"bytes,7,opt,name=userName,proto3" json:"userName,omitempty"`
	Sttime               go_common_library_time.Time `protobuf:"varint,8,opt,name=sttime,proto3,casttype=go-common/library/time.Time" json:"sttime,omitempty"`
	Endtime              go_common_library_time.Time `protobuf:"varint,9,opt,name=endtime,proto3,casttype=go-common/library/time.Time" json:"endtime,omitempty"`
	Deltime              go_common_library_time.Time `protobuf:"varint,10,opt,name=deltime,proto3,casttype=go-common/library/time.Time" json:"deltime,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *IndexIconItem) Reset()         { *m = IndexIconItem{} }
func (m *IndexIconItem) String() string { return proto.CompactTextString(m) }
func (*IndexIconItem) ProtoMessage()    {}
func (*IndexIconItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{68}
}
func (m *IndexIconItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexIconItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexIconItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexIconItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexIconItem.Merge(m, src)
}
func (m *IndexIconItem) XXX_Size() int {
	return m.Size()
}
func (m *IndexIconItem) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexIconItem.DiscardUnknown(m)
}

var xxx_messageInfo_IndexIconItem proto.InternalMessageInfo

func (m *IndexIconItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IndexIconItem) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *IndexIconItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *IndexIconItem) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *IndexIconItem) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *IndexIconItem) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *IndexIconItem) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *IndexIconItem) GetSttime() go_common_library_time.Time {
	if m != nil {
		return m.Sttime
	}
	return 0
}

func (m *IndexIconItem) GetEndtime() go_common_library_time.Time {
	if m != nil {
		return m.Endtime
	}
	return 0
}

func (m *IndexIconItem) GetDeltime() go_common_library_time.Time {
	if m != nil {
		return m.Deltime
	}
	return 0
}

func (m *IndexIconItem) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *IndexIconItem) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type PlayerIconRequest struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	TagIDs               []int64  `protobuf:"varint,2,rep,packed,name=tagIDs,proto3" json:"tagIDs,omitempty"`
	TypeID               int32    `protobuf:"varint,3,opt,name=typeID,proto3" json:"typeID,omitempty"`
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	ShowPlayIcon         bool     `protobuf:"varint,5,opt,name=showPlayIcon,proto3" json:"showPlayIcon,omitempty"`
	MobiApp              string   `protobuf:"bytes,6,opt,name=mobiApp,proto3" json:"mobiApp,omitempty"`
	Device               string   `protobuf:"bytes,7,opt,name=device,proto3" json:"device,omitempty"`
	Build                int32    `protobuf:"varint,8,opt,name=build,proto3" json:"build,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerIconRequest) Reset()         { *m = PlayerIconRequest{} }
func (m *PlayerIconRequest) String() string { return proto.CompactTextString(m) }
func (*PlayerIconRequest) ProtoMessage()    {}
func (*PlayerIconRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{69}
}
func (m *PlayerIconRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerIconRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerIconRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerIconRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIconRequest.Merge(m, src)
}
func (m *PlayerIconRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlayerIconRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIconRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIconRequest proto.InternalMessageInfo

func (m *PlayerIconRequest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PlayerIconRequest) GetTagIDs() []int64 {
	if m != nil {
		return m.TagIDs
	}
	return nil
}

func (m *PlayerIconRequest) GetTypeID() int32 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *PlayerIconRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PlayerIconRequest) GetShowPlayIcon() bool {
	if m != nil {
		return m.ShowPlayIcon
	}
	return false
}

func (m *PlayerIconRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *PlayerIconRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *PlayerIconRequest) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

type PlayerIconV2Reply struct {
	//不存在返回nil
	Item                 *PlayerIconReply `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PlayerIconV2Reply) Reset()         { *m = PlayerIconV2Reply{} }
func (m *PlayerIconV2Reply) String() string { return proto.CompactTextString(m) }
func (*PlayerIconV2Reply) ProtoMessage()    {}
func (*PlayerIconV2Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{70}
}
func (m *PlayerIconV2Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerIconV2Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerIconV2Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerIconV2Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIconV2Reply.Merge(m, src)
}
func (m *PlayerIconV2Reply) XXX_Size() int {
	return m.Size()
}
func (m *PlayerIconV2Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIconV2Reply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIconV2Reply proto.InternalMessageInfo

func (m *PlayerIconV2Reply) GetItem() *PlayerIconReply {
	if m != nil {
		return m.Item
	}
	return nil
}

type PlayerIconReply struct {
	Url1                 string                      `protobuf:"bytes,1,opt,name=url1,proto3" json:"url1,omitempty"`
	Hash1                string                      `protobuf:"bytes,2,opt,name=hash1,proto3" json:"hash1,omitempty"`
	Url2                 string                      `protobuf:"bytes,3,opt,name=url2,proto3" json:"url2,omitempty"`
	Hash2                string                      `protobuf:"bytes,4,opt,name=hash2,proto3" json:"hash2,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Type                 int32                       `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	TypeValue            string                      `protobuf:"bytes,7,opt,name=typeValue,proto3" json:"typeValue,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	DragLeftPng          string                      `protobuf:"bytes,9,opt,name=dragLeftPng,proto3" json:"dragLeftPng,omitempty"`
	MiddlePng            string                      `protobuf:"bytes,10,opt,name=middlePng,proto3" json:"middlePng,omitempty"`
	DragRightPng         string                      `protobuf:"bytes,11,opt,name=dragRightPng,proto3" json:"dragRightPng,omitempty"`
	DragData             *IconData                   `protobuf:"bytes,12,opt,name=dragData,proto3" json:"dragData,omitempty"`
	NodragData           *IconData                   `protobuf:"bytes,13,opt,name=nodragData,proto3" json:"nodragData,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PlayerIconReply) Reset()         { *m = PlayerIconReply{} }
func (m *PlayerIconReply) String() string { return proto.CompactTextString(m) }
func (*PlayerIconReply) ProtoMessage()    {}
func (*PlayerIconReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{71}
}
func (m *PlayerIconReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerIconReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerIconReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerIconReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerIconReply.Merge(m, src)
}
func (m *PlayerIconReply) XXX_Size() int {
	return m.Size()
}
func (m *PlayerIconReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerIconReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerIconReply proto.InternalMessageInfo

func (m *PlayerIconReply) GetUrl1() string {
	if m != nil {
		return m.Url1
	}
	return ""
}

func (m *PlayerIconReply) GetHash1() string {
	if m != nil {
		return m.Hash1
	}
	return ""
}

func (m *PlayerIconReply) GetUrl2() string {
	if m != nil {
		return m.Url2
	}
	return ""
}

func (m *PlayerIconReply) GetHash2() string {
	if m != nil {
		return m.Hash2
	}
	return ""
}

func (m *PlayerIconReply) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *PlayerIconReply) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PlayerIconReply) GetTypeValue() string {
	if m != nil {
		return m.TypeValue
	}
	return ""
}

func (m *PlayerIconReply) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *PlayerIconReply) GetDragLeftPng() string {
	if m != nil {
		return m.DragLeftPng
	}
	return ""
}

func (m *PlayerIconReply) GetMiddlePng() string {
	if m != nil {
		return m.MiddlePng
	}
	return ""
}

func (m *PlayerIconReply) GetDragRightPng() string {
	if m != nil {
		return m.DragRightPng
	}
	return ""
}

func (m *PlayerIconReply) GetDragData() *IconData {
	if m != nil {
		return m.DragData
	}
	return nil
}

func (m *PlayerIconReply) GetNodragData() *IconData {
	if m != nil {
		return m.NodragData
	}
	return nil
}

type IconData struct {
	MetaJson             string   `protobuf:"bytes,1,opt,name=meta_json,json=metaJson,proto3" json:"meta_json,omitempty"`
	SpritsImg            string   `protobuf:"bytes,2,opt,name=sprits_img,json=spritsImg,proto3" json:"sprits_img,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IconData) Reset()         { *m = IconData{} }
func (m *IconData) String() string { return proto.CompactTextString(m) }
func (*IconData) ProtoMessage()    {}
func (*IconData) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{72}
}
func (m *IconData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IconData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IconData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IconData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IconData.Merge(m, src)
}
func (m *IconData) XXX_Size() int {
	return m.Size()
}
func (m *IconData) XXX_DiscardUnknown() {
	xxx_messageInfo_IconData.DiscardUnknown(m)
}

var xxx_messageInfo_IconData proto.InternalMessageInfo

func (m *IconData) GetMetaJson() string {
	if m != nil {
		return m.MetaJson
	}
	return ""
}

func (m *IconData) GetSpritsImg() string {
	if m != nil {
		return m.SpritsImg
	}
	return ""
}

type CmtboxRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmtboxRequest) Reset()         { *m = CmtboxRequest{} }
func (m *CmtboxRequest) String() string { return proto.CompactTextString(m) }
func (*CmtboxRequest) ProtoMessage()    {}
func (*CmtboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{73}
}
func (m *CmtboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmtboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmtboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmtboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmtboxRequest.Merge(m, src)
}
func (m *CmtboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *CmtboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CmtboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CmtboxRequest proto.InternalMessageInfo

func (m *CmtboxRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CmtboxReply struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LoadCid              int64                       `protobuf:"varint,2,opt,name=load_cid,json=loadCid,proto3" json:"load_cid,omitempty"`
	Server               string                      `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	Port                 string                      `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	SizeFactor           string                      `protobuf:"bytes,5,opt,name=size_factor,json=sizeFactor,proto3" json:"size_factor,omitempty"`
	SpeedFactor          string                      `protobuf:"bytes,6,opt,name=speed_factor,json=speedFactor,proto3" json:"speed_factor,omitempty"`
	MaxOnscreen          string                      `protobuf:"bytes,7,opt,name=max_onscreen,json=maxOnscreen,proto3" json:"max_onscreen,omitempty"`
	Style                string                      `protobuf:"bytes,8,opt,name=style,proto3" json:"style,omitempty"`
	StyleParam           string                      `protobuf:"bytes,9,opt,name=style_param,json=styleParam,proto3" json:"style_param,omitempty"`
	TopMargin            string                      `protobuf:"bytes,10,opt,name=top_margin,json=topMargin,proto3" json:"top_margin,omitempty"`
	State                string                      `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	RenqiVisible         string                      `protobuf:"bytes,12,opt,name=renqi_visible,json=renqiVisible,proto3" json:"renqi_visible,omitempty"`
	RenqiFontsize        string                      `protobuf:"bytes,13,opt,name=renqi_fontsize,json=renqiFontsize,proto3" json:"renqi_fontsize,omitempty"`
	RenqiFmt             string                      `protobuf:"bytes,14,opt,name=renqi_fmt,json=renqiFmt,proto3" json:"renqi_fmt,omitempty"`
	RenqiOffset          string                      `protobuf:"bytes,15,opt,name=renqi_offset,json=renqiOffset,proto3" json:"renqi_offset,omitempty"`
	RenqiColor           string                      `protobuf:"bytes,16,opt,name=renqi_color,json=renqiColor,proto3" json:"renqi_color,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,17,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,18,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CmtboxReply) Reset()         { *m = CmtboxReply{} }
func (m *CmtboxReply) String() string { return proto.CompactTextString(m) }
func (*CmtboxReply) ProtoMessage()    {}
func (*CmtboxReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{74}
}
func (m *CmtboxReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmtboxReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmtboxReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmtboxReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmtboxReply.Merge(m, src)
}
func (m *CmtboxReply) XXX_Size() int {
	return m.Size()
}
func (m *CmtboxReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CmtboxReply.DiscardUnknown(m)
}

var xxx_messageInfo_CmtboxReply proto.InternalMessageInfo

func (m *CmtboxReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CmtboxReply) GetLoadCid() int64 {
	if m != nil {
		return m.LoadCid
	}
	return 0
}

func (m *CmtboxReply) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *CmtboxReply) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *CmtboxReply) GetSizeFactor() string {
	if m != nil {
		return m.SizeFactor
	}
	return ""
}

func (m *CmtboxReply) GetSpeedFactor() string {
	if m != nil {
		return m.SpeedFactor
	}
	return ""
}

func (m *CmtboxReply) GetMaxOnscreen() string {
	if m != nil {
		return m.MaxOnscreen
	}
	return ""
}

func (m *CmtboxReply) GetStyle() string {
	if m != nil {
		return m.Style
	}
	return ""
}

func (m *CmtboxReply) GetStyleParam() string {
	if m != nil {
		return m.StyleParam
	}
	return ""
}

func (m *CmtboxReply) GetTopMargin() string {
	if m != nil {
		return m.TopMargin
	}
	return ""
}

func (m *CmtboxReply) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CmtboxReply) GetRenqiVisible() string {
	if m != nil {
		return m.RenqiVisible
	}
	return ""
}

func (m *CmtboxReply) GetRenqiFontsize() string {
	if m != nil {
		return m.RenqiFontsize
	}
	return ""
}

func (m *CmtboxReply) GetRenqiFmt() string {
	if m != nil {
		return m.RenqiFmt
	}
	return ""
}

func (m *CmtboxReply) GetRenqiOffset() string {
	if m != nil {
		return m.RenqiOffset
	}
	return ""
}

func (m *CmtboxReply) GetRenqiColor() string {
	if m != nil {
		return m.RenqiColor
	}
	return ""
}

func (m *CmtboxReply) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *CmtboxReply) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type SideBarsReply struct {
	SideBar              []*SideBar              `protobuf:"bytes,1,rep,name=sideBar,proto3" json:"sideBar,omitempty"`
	Limit                map[int64]*SideBarLimit `protobuf:"bytes,2,rep,name=limit,proto3" json:"limit,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SideBarsReply) Reset()         { *m = SideBarsReply{} }
func (m *SideBarsReply) String() string { return proto.CompactTextString(m) }
func (*SideBarsReply) ProtoMessage()    {}
func (*SideBarsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{75}
}
func (m *SideBarsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SideBarsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SideBarsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SideBarsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SideBarsReply.Merge(m, src)
}
func (m *SideBarsReply) XXX_Size() int {
	return m.Size()
}
func (m *SideBarsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SideBarsReply.DiscardUnknown(m)
}

var xxx_messageInfo_SideBarsReply proto.InternalMessageInfo

func (m *SideBarsReply) GetSideBar() []*SideBar {
	if m != nil {
		return m.SideBar
	}
	return nil
}

func (m *SideBarsReply) GetLimit() map[int64]*SideBarLimit {
	if m != nil {
		return m.Limit
	}
	return nil
}

type SideBar struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tip                  int32                       `protobuf:"varint,2,opt,name=tip,proto3" json:"tip,omitempty"`
	Rank                 int32                       `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Logo                 string                      `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	LogoWhite            string                      `protobuf:"bytes,5,opt,name=logo_white,json=logoWhite,proto3" json:"logo_white,omitempty"`
	Name                 string                      `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Param                string                      `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`
	Module               int32                       `protobuf:"varint,8,opt,name=module,proto3" json:"module,omitempty"`
	Plat                 int32                       `protobuf:"varint,9,opt,name=plat,proto3" json:"plat,omitempty"`
	Build                int32                       `protobuf:"varint,10,opt,name=build,proto3" json:"build,omitempty"`
	Conditions           string                      `protobuf:"bytes,11,opt,name=conditions,proto3" json:"conditions,omitempty"`
	OnlineTime           go_common_library_time.Time `protobuf:"varint,12,opt,name=online_time,json=onlineTime,proto3,casttype=go-common/library/time.Time" json:"online_time,omitempty"`
	NeedLogin            int32                       `protobuf:"varint,13,opt,name=need_login,json=needLogin,proto3" json:"need_login,omitempty"`
	WhiteUrl             string                      `protobuf:"bytes,14,opt,name=white_url,json=whiteUrl,proto3" json:"white_url,omitempty"`
	Menu                 int32                       `protobuf:"varint,15,opt,name=menu,proto3" json:"menu,omitempty"`
	LogoSelected         string                      `protobuf:"bytes,16,opt,name=logo_selected,json=logoSelected,proto3" json:"logo_selected,omitempty"`
	TabId                string                      `protobuf:"bytes,17,opt,name=tab_id,json=tabId,proto3" json:"tab_id,omitempty"`
	RedDotUrl            string                      `protobuf:"bytes,18,opt,name=red_dot_url,json=redDotUrl,proto3" json:"red_dot_url,omitempty"`
	Language             string                      `protobuf:"bytes,19,opt,name=language,proto3" json:"language,omitempty"`
	GlobalRedDot         int32                       `protobuf:"varint,20,opt,name=global_red_dot,json=globalRedDot,proto3" json:"global_red_dot,omitempty"`
	RedDotLimit          int64                       `protobuf:"varint,21,opt,name=red_dot_limit,json=redDotLimit,proto3" json:"red_dot_limit,omitempty"`
	Animate              string                      `protobuf:"bytes,22,opt,name=animate,proto3" json:"animate,omitempty"`
	WhiteUrlShow         int32                       `protobuf:"varint,23,opt,name=white_url_show,json=whiteUrlShow,proto3" json:"white_url_show,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SideBar) Reset()         { *m = SideBar{} }
func (m *SideBar) String() string { return proto.CompactTextString(m) }
func (*SideBar) ProtoMessage()    {}
func (*SideBar) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{76}
}
func (m *SideBar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SideBar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SideBar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SideBar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SideBar.Merge(m, src)
}
func (m *SideBar) XXX_Size() int {
	return m.Size()
}
func (m *SideBar) XXX_DiscardUnknown() {
	xxx_messageInfo_SideBar.DiscardUnknown(m)
}

var xxx_messageInfo_SideBar proto.InternalMessageInfo

func (m *SideBar) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SideBar) GetTip() int32 {
	if m != nil {
		return m.Tip
	}
	return 0
}

func (m *SideBar) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *SideBar) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *SideBar) GetLogoWhite() string {
	if m != nil {
		return m.LogoWhite
	}
	return ""
}

func (m *SideBar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SideBar) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *SideBar) GetModule() int32 {
	if m != nil {
		return m.Module
	}
	return 0
}

func (m *SideBar) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *SideBar) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *SideBar) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *SideBar) GetOnlineTime() go_common_library_time.Time {
	if m != nil {
		return m.OnlineTime
	}
	return 0
}

func (m *SideBar) GetNeedLogin() int32 {
	if m != nil {
		return m.NeedLogin
	}
	return 0
}

func (m *SideBar) GetWhiteUrl() string {
	if m != nil {
		return m.WhiteUrl
	}
	return ""
}

func (m *SideBar) GetMenu() int32 {
	if m != nil {
		return m.Menu
	}
	return 0
}

func (m *SideBar) GetLogoSelected() string {
	if m != nil {
		return m.LogoSelected
	}
	return ""
}

func (m *SideBar) GetTabId() string {
	if m != nil {
		return m.TabId
	}
	return ""
}

func (m *SideBar) GetRedDotUrl() string {
	if m != nil {
		return m.RedDotUrl
	}
	return ""
}

func (m *SideBar) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *SideBar) GetGlobalRedDot() int32 {
	if m != nil {
		return m.GlobalRedDot
	}
	return 0
}

func (m *SideBar) GetRedDotLimit() int64 {
	if m != nil {
		return m.RedDotLimit
	}
	return 0
}

func (m *SideBar) GetAnimate() string {
	if m != nil {
		return m.Animate
	}
	return ""
}

func (m *SideBar) GetWhiteUrlShow() int32 {
	if m != nil {
		return m.WhiteUrlShow
	}
	return 0
}

type SideBarLimit struct {
	SideBarLimitItem     []*SideBarLimitItem `protobuf:"bytes,1,rep,name=SideBarLimitItem,proto3" json:"SideBarLimitItem,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SideBarLimit) Reset()         { *m = SideBarLimit{} }
func (m *SideBarLimit) String() string { return proto.CompactTextString(m) }
func (*SideBarLimit) ProtoMessage()    {}
func (*SideBarLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{77}
}
func (m *SideBarLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SideBarLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SideBarLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SideBarLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SideBarLimit.Merge(m, src)
}
func (m *SideBarLimit) XXX_Size() int {
	return m.Size()
}
func (m *SideBarLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_SideBarLimit.DiscardUnknown(m)
}

var xxx_messageInfo_SideBarLimit proto.InternalMessageInfo

func (m *SideBarLimit) GetSideBarLimitItem() []*SideBarLimitItem {
	if m != nil {
		return m.SideBarLimitItem
	}
	return nil
}

type SideBarLimitItem struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Build                int32    `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	Condition            string   `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SideBarLimitItem) Reset()         { *m = SideBarLimitItem{} }
func (m *SideBarLimitItem) String() string { return proto.CompactTextString(m) }
func (*SideBarLimitItem) ProtoMessage()    {}
func (*SideBarLimitItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{78}
}
func (m *SideBarLimitItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SideBarLimitItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SideBarLimitItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SideBarLimitItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SideBarLimitItem.Merge(m, src)
}
func (m *SideBarLimitItem) XXX_Size() int {
	return m.Size()
}
func (m *SideBarLimitItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SideBarLimitItem.DiscardUnknown(m)
}

var xxx_messageInfo_SideBarLimitItem proto.InternalMessageInfo

func (m *SideBarLimitItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SideBarLimitItem) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *SideBarLimitItem) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

type AbTestRequest struct {
	Groups               string   `protobuf:"bytes,1,opt,name=groups,proto3" json:"groups,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbTestRequest) Reset()         { *m = AbTestRequest{} }
func (m *AbTestRequest) String() string { return proto.CompactTextString(m) }
func (*AbTestRequest) ProtoMessage()    {}
func (*AbTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{79}
}
func (m *AbTestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbTestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbTestRequest.Merge(m, src)
}
func (m *AbTestRequest) XXX_Size() int {
	return m.Size()
}
func (m *AbTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbTestRequest proto.InternalMessageInfo

func (m *AbTestRequest) GetGroups() string {
	if m != nil {
		return m.Groups
	}
	return ""
}

func (m *AbTestRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type AbTestReply struct {
	Abtest               map[string]*AbTest `protobuf:"bytes,1,rep,name=abtest,proto3" json:"abtest,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AbTestReply) Reset()         { *m = AbTestReply{} }
func (m *AbTestReply) String() string { return proto.CompactTextString(m) }
func (*AbTestReply) ProtoMessage()    {}
func (*AbTestReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{80}
}
func (m *AbTestReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbTestReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbTestReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbTestReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbTestReply.Merge(m, src)
}
func (m *AbTestReply) XXX_Size() int {
	return m.Size()
}
func (m *AbTestReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AbTestReply.DiscardUnknown(m)
}

var xxx_messageInfo_AbTestReply proto.InternalMessageInfo

func (m *AbTestReply) GetAbtest() map[string]*AbTest {
	if m != nil {
		return m.Abtest
	}
	return nil
}

type AbTest struct {
	GroupId              int64    `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupName            string   `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	FlowPercent          int64    `protobuf:"varint,3,opt,name=flowPercent,proto3" json:"flowPercent,omitempty"`
	ParamValues          string   `protobuf:"bytes,4,opt,name=paramValues,proto3" json:"paramValues,omitempty"`
	Utime                int64    `protobuf:"varint,5,opt,name=utime,proto3" json:"utime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbTest) Reset()         { *m = AbTest{} }
func (m *AbTest) String() string { return proto.CompactTextString(m) }
func (*AbTest) ProtoMessage()    {}
func (*AbTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{81}
}
func (m *AbTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AbTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbTest.Merge(m, src)
}
func (m *AbTest) XXX_Size() int {
	return m.Size()
}
func (m *AbTest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbTest.DiscardUnknown(m)
}

var xxx_messageInfo_AbTest proto.InternalMessageInfo

func (m *AbTest) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *AbTest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *AbTest) GetFlowPercent() int64 {
	if m != nil {
		return m.FlowPercent
	}
	return 0
}

func (m *AbTest) GetParamValues() string {
	if m != nil {
		return m.ParamValues
	}
	return ""
}

func (m *AbTest) GetUtime() int64 {
	if m != nil {
		return m.Utime
	}
	return 0
}

type PasterCIDReply struct {
	Paster               map[int64]int64 `protobuf:"bytes,1,rep,name=paster,proto3" json:"paster,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PasterCIDReply) Reset()         { *m = PasterCIDReply{} }
func (m *PasterCIDReply) String() string { return proto.CompactTextString(m) }
func (*PasterCIDReply) ProtoMessage()    {}
func (*PasterCIDReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{82}
}
func (m *PasterCIDReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasterCIDReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasterCIDReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasterCIDReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasterCIDReply.Merge(m, src)
}
func (m *PasterCIDReply) XXX_Size() int {
	return m.Size()
}
func (m *PasterCIDReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PasterCIDReply.DiscardUnknown(m)
}

var xxx_messageInfo_PasterCIDReply proto.InternalMessageInfo

func (m *PasterCIDReply) GetPaster() map[int64]int64 {
	if m != nil {
		return m.Paster
	}
	return nil
}

type GetTabExtReq struct {
	Plat                 int64    `protobuf:"varint,1,opt,name=plat,proto3" json:"plat"`
	Build                int64    `protobuf:"varint,2,opt,name=build,proto3" json:"build"`
	Buvid                string   `protobuf:"bytes,3,opt,name=buvid,proto3" json:"buvid"`
	Tabs                 []*Tab   `protobuf:"bytes,4,rep,name=tabs,proto3" json:"tabs"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTabExtReq) Reset()         { *m = GetTabExtReq{} }
func (m *GetTabExtReq) String() string { return proto.CompactTextString(m) }
func (*GetTabExtReq) ProtoMessage()    {}
func (*GetTabExtReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{83}
}
func (m *GetTabExtReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTabExtReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTabExtReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTabExtReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTabExtReq.Merge(m, src)
}
func (m *GetTabExtReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTabExtReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTabExtReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTabExtReq proto.InternalMessageInfo

func (m *GetTabExtReq) GetPlat() int64 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *GetTabExtReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *GetTabExtReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *GetTabExtReq) GetTabs() []*Tab {
	if m != nil {
		return m.Tabs
	}
	return nil
}

type Tab struct {
	TabId                int64    `protobuf:"varint,1,opt,name=tabId,json=tab_id,proto3" json:"tab_id"`
	TType                int64    `protobuf:"varint,2,opt,name=tType,proto3" json:"tType"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tab) Reset()         { *m = Tab{} }
func (m *Tab) String() string { return proto.CompactTextString(m) }
func (*Tab) ProtoMessage()    {}
func (*Tab) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{84}
}
func (m *Tab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tab.Merge(m, src)
}
func (m *Tab) XXX_Size() int {
	return m.Size()
}
func (m *Tab) XXX_DiscardUnknown() {
	xxx_messageInfo_Tab.DiscardUnknown(m)
}

var xxx_messageInfo_Tab proto.InternalMessageInfo

func (m *Tab) GetTabId() int64 {
	if m != nil {
		return m.TabId
	}
	return 0
}

func (m *Tab) GetTType() int64 {
	if m != nil {
		return m.TType
	}
	return 0
}

type GetTabExtRep struct {
	// tab运营资源配置信息
	TabExts              []*TabExt `protobuf:"bytes,1,rep,name=tabExts,proto3" json:"tabExts"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetTabExtRep) Reset()         { *m = GetTabExtRep{} }
func (m *GetTabExtRep) String() string { return proto.CompactTextString(m) }
func (*GetTabExtRep) ProtoMessage()    {}
func (*GetTabExtRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{85}
}
func (m *GetTabExtRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTabExtRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTabExtRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTabExtRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTabExtRep.Merge(m, src)
}
func (m *GetTabExtRep) XXX_Size() int {
	return m.Size()
}
func (m *GetTabExtRep) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTabExtRep.DiscardUnknown(m)
}

var xxx_messageInfo_GetTabExtRep proto.InternalMessageInfo

func (m *GetTabExtRep) GetTabExts() []*TabExt {
	if m != nil {
		return m.TabExts
	}
	return nil
}

type TabExt struct {
	// 未激活状态资源
	InactiveIcon string `protobuf:"bytes,1,opt,name=inactiveIcon,json=inactive_icon,proto3" json:"inactive_icon,omitempty"`
	// 未激活状态动画类型
	Inactive int64 `protobuf:"varint,2,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// 未激活状态动画控制
	InactiveType int64 `protobuf:"varint,3,opt,name=inactiveType,json=inactive_type,proto3" json:"inactive_type,omitempty"`
	// 激活状态资源
	ActiveIcon string `protobuf:"bytes,4,opt,name=activeIcon,json=active_icon,proto3" json:"active_icon,omitempty"`
	// 激活状态动画类型
	Active int64 `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	// 激活状态动画控制
	ActiveType int64 `protobuf:"varint,6,opt,name=activeType,json=active_type,proto3" json:"active_type,omitempty"`
	// 文本高亮色
	FontColor string `protobuf:"bytes,7,opt,name=fontColor,json=font_color,proto3" json:"font_color,omitempty"`
	// 状态栏颜色
	BarColor int64 `protobuf:"varint,8,opt,name=barColor,json=bar_color,proto3" json:"bar_color,omitempty"`
	// tab头部色值
	TabTopColor string `protobuf:"bytes,9,opt,name=tabTopColor,json=tab_top_color,proto3" json:"tab_top_color,omitempty"`
	// tab中间颜色值
	TabMiddleColor string `protobuf:"bytes,10,opt,name=tabMiddleColor,json=tab_middle_color,proto3" json:"tab_middle_color,omitempty"`
	// tab底部色值
	TabBottomColor string `protobuf:"bytes,11,opt,name=tabBottomColor,json=tab_bottom_color,proto3" json:"tab_bottom_color,omitempty"`
	// 背景图片1
	BgImage1 string `protobuf:"bytes,13,opt,name=bgImage1,json=bg_image1,proto3" json:"bg_image1,omitempty"`
	// 背景图片2
	BgImage2 string `protobuf:"bytes,14,opt,name=bgImage2,json=bg_image2,proto3" json:"bg_image2,omitempty"`
	// 开关配置，第一位：开启tab图标配置，第二位：开启背景色配置，第三位：开启背景图片配置，第四位：开启跟随业务方模式
	Attribute int64 `protobuf:"varint,15,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// tab ID
	TabId int64 `protobuf:"varint,16,opt,name=tabId,json=tab_id,proto3" json:"tab_id"`
	// tab类型
	TType int64 `protobuf:"varint,17,opt,name=tType,proto3" json:"tType"`
	// tab运营资源点击
	Click                *Click   `protobuf:"bytes,18,opt,name=click,proto3" json:"click,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TabExt) Reset()         { *m = TabExt{} }
func (m *TabExt) String() string { return proto.CompactTextString(m) }
func (*TabExt) ProtoMessage()    {}
func (*TabExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{86}
}
func (m *TabExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TabExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabExt.Merge(m, src)
}
func (m *TabExt) XXX_Size() int {
	return m.Size()
}
func (m *TabExt) XXX_DiscardUnknown() {
	xxx_messageInfo_TabExt.DiscardUnknown(m)
}

var xxx_messageInfo_TabExt proto.InternalMessageInfo

func (m *TabExt) GetInactiveIcon() string {
	if m != nil {
		return m.InactiveIcon
	}
	return ""
}

func (m *TabExt) GetInactive() int64 {
	if m != nil {
		return m.Inactive
	}
	return 0
}

func (m *TabExt) GetInactiveType() int64 {
	if m != nil {
		return m.InactiveType
	}
	return 0
}

func (m *TabExt) GetActiveIcon() string {
	if m != nil {
		return m.ActiveIcon
	}
	return ""
}

func (m *TabExt) GetActive() int64 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *TabExt) GetActiveType() int64 {
	if m != nil {
		return m.ActiveType
	}
	return 0
}

func (m *TabExt) GetFontColor() string {
	if m != nil {
		return m.FontColor
	}
	return ""
}

func (m *TabExt) GetBarColor() int64 {
	if m != nil {
		return m.BarColor
	}
	return 0
}

func (m *TabExt) GetTabTopColor() string {
	if m != nil {
		return m.TabTopColor
	}
	return ""
}

func (m *TabExt) GetTabMiddleColor() string {
	if m != nil {
		return m.TabMiddleColor
	}
	return ""
}

func (m *TabExt) GetTabBottomColor() string {
	if m != nil {
		return m.TabBottomColor
	}
	return ""
}

func (m *TabExt) GetBgImage1() string {
	if m != nil {
		return m.BgImage1
	}
	return ""
}

func (m *TabExt) GetBgImage2() string {
	if m != nil {
		return m.BgImage2
	}
	return ""
}

func (m *TabExt) GetAttribute() int64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *TabExt) GetTabId() int64 {
	if m != nil {
		return m.TabId
	}
	return 0
}

func (m *TabExt) GetTType() int64 {
	if m != nil {
		return m.TType
	}
	return 0
}

func (m *TabExt) GetClick() *Click {
	if m != nil {
		return m.Click
	}
	return nil
}

type Click struct {
	// 图片资源版本号
	Ver string `protobuf:"bytes,1,opt,name=ver,proto3" json:"ver,omitempty"`
	// tab资源配置自增id
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 点击类型
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Click) Reset()         { *m = Click{} }
func (m *Click) String() string { return proto.CompactTextString(m) }
func (*Click) ProtoMessage()    {}
func (*Click) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{87}
}
func (m *Click) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Click) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Click.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Click) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Click.Merge(m, src)
}
func (m *Click) XXX_Size() int {
	return m.Size()
}
func (m *Click) XXX_DiscardUnknown() {
	xxx_messageInfo_Click.DiscardUnknown(m)
}

var xxx_messageInfo_Click proto.InternalMessageInfo

func (m *Click) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *Click) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Click) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type IsUploaderReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid" form:"mid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUploaderReq) Reset()         { *m = IsUploaderReq{} }
func (m *IsUploaderReq) String() string { return proto.CompactTextString(m) }
func (*IsUploaderReq) ProtoMessage()    {}
func (*IsUploaderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{88}
}
func (m *IsUploaderReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUploaderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUploaderReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsUploaderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUploaderReq.Merge(m, src)
}
func (m *IsUploaderReq) XXX_Size() int {
	return m.Size()
}
func (m *IsUploaderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUploaderReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsUploaderReq proto.InternalMessageInfo

func (m *IsUploaderReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type IsUploaderReply struct {
	IsUploader           bool     `protobuf:"varint,1,opt,name=isUploader,proto3" json:"isUploader,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUploaderReply) Reset()         { *m = IsUploaderReply{} }
func (m *IsUploaderReply) String() string { return proto.CompactTextString(m) }
func (*IsUploaderReply) ProtoMessage()    {}
func (*IsUploaderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{89}
}
func (m *IsUploaderReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUploaderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUploaderReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsUploaderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUploaderReply.Merge(m, src)
}
func (m *IsUploaderReply) XXX_Size() int {
	return m.Size()
}
func (m *IsUploaderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUploaderReply.DiscardUnknown(m)
}

var xxx_messageInfo_IsUploaderReply proto.InternalMessageInfo

func (m *IsUploaderReply) GetIsUploader() bool {
	if m != nil {
		return m.IsUploader
	}
	return false
}

func init() {
	proto.RegisterEnum("resource.service.v1.SkinExtState_Enum", SkinExtState_Enum_name, SkinExtState_Enum_value)
	proto.RegisterEnum("resource.service.v1.SkinLimitState_Enum", SkinLimitState_Enum_name, SkinLimitState_Enum_value)
	proto.RegisterEnum("resource.service.v1.SectionItemOpLinkType_Enum", SectionItemOpLinkType_Enum_name, SectionItemOpLinkType_Enum_value)
	proto.RegisterType((*MenuExtVerReq)(nil), "resource.service.v1.MenuExtVerReq")
	proto.RegisterType((*MenuExtVerReply)(nil), "resource.service.v1.MenuExtVerReply")
	proto.RegisterType((*AddMenuExtVerReq)(nil), "resource.service.v1.AddMenuExtVerReq")
	proto.RegisterType((*AddMenuExtVerReply)(nil), "resource.service.v1.AddMenuExtVerReply")
	proto.RegisterType((*NoArgRequest)(nil), "resource.service.v1.NoArgRequest")
	proto.RegisterType((*Param)(nil), "resource.service.v1.Param")
	proto.RegisterType((*ParamReq)(nil), "resource.service.v1.ParamReq")
	proto.RegisterType((*ParamReply)(nil), "resource.service.v1.ParamReply")
	proto.RegisterType((*Hidden)(nil), "resource.service.v1.Hidden")
	proto.RegisterMapType((map[string]string)(nil), "resource.service.v1.Hidden.ChannelMapEntry")
	proto.RegisterType((*HiddenLimit)(nil), "resource.service.v1.HiddenLimit")
	proto.RegisterType((*EntranceHiddenReply)(nil), "resource.service.v1.EntranceHiddenReply")
	proto.RegisterType((*HiddenInfo)(nil), "resource.service.v1.HiddenInfo")
	proto.RegisterType((*EntrancesIsHiddenRequest)(nil), "resource.service.v1.EntrancesIsHiddenRequest")
	proto.RegisterMapType((map[int64]*OidList)(nil), "resource.service.v1.EntrancesIsHiddenRequest.OidItemsEntry")
	proto.RegisterType((*OidList)(nil), "resource.service.v1.OidList")
	proto.RegisterType((*EntrancesIsHiddenReply)(nil), "resource.service.v1.EntrancesIsHiddenReply")
	proto.RegisterMapType((map[int64]bool)(nil), "resource.service.v1.EntrancesIsHiddenReply.InfosEntry")
	proto.RegisterMapType((map[int64]bool)(nil), "resource.service.v1.EntrancesIsHiddenReply.ModuleInfosEntry")
	proto.RegisterType((*RelateRequest)(nil), "resource.service.v1.RelateRequest")
	proto.RegisterType((*SearchOgvReq)(nil), "resource.service.v1.SearchOgvReq")
	proto.RegisterType((*SearchOgvReply)(nil), "resource.service.v1.SearchOgvReply")
	proto.RegisterType((*FeedBannersRequest)(nil), "resource.service.v1.FeedBannersRequest")
	proto.RegisterType((*BannerMeta)(nil), "resource.service.v1.banner_meta")
	proto.RegisterType((*FeedBannersReply)(nil), "resource.service.v1.FeedBannersReply")
	proto.RegisterType((*BannersRequest)(nil), "resource.service.v1.BannersRequest")
	proto.RegisterType((*BannersReply)(nil), "resource.service.v1.BannersReply")
	proto.RegisterMapType((map[int32]*Banners)(nil), "resource.service.v1.BannersReply.BannersEntry")
	proto.RegisterType((*Banners)(nil), "resource.service.v1.Banners")
	proto.RegisterType((*Banner)(nil), "resource.service.v1.Banner")
	proto.RegisterType((*SpecialReply)(nil), "resource.service.v1.SpecialReply")
	proto.RegisterType((*WebRcmdReply)(nil), "resource.service.v1.WebRcmdReply")
	proto.RegisterType((*WebRcmd)(nil), "resource.service.v1.WebRcmd")
	proto.RegisterType((*WebRcmdCard)(nil), "resource.service.v1.WebRcmdCard")
	proto.RegisterType((*CustomConfigRequest)(nil), "resource.service.v1.CustomConfigRequest")
	proto.RegisterType((*CustomConfigReply)(nil), "resource.service.v1.CustomConfigReply")
	proto.RegisterType((*SkinExtState)(nil), "resource.service.v1.SkinExtState")
	proto.RegisterType((*SkinExt)(nil), "resource.service.v1.SkinExt")
	proto.RegisterType((*SkinLimitState)(nil), "resource.service.v1.SkinLimitState")
	proto.RegisterType((*SkinLimit)(nil), "resource.service.v1.SkinLimit")
	proto.RegisterType((*SkinConfReply)(nil), "resource.service.v1.SkinConfReply")
	proto.RegisterType((*SkinInfo)(nil), "resource.service.v1.SkinInfo")
	proto.RegisterType((*WebPlayerIconRequest)(nil), "resource.service.v1.WebPlayerIconRequest")
	proto.RegisterType((*WebPlayerIconReply)(nil), "resource.service.v1.WebPlayerIconReply")
	proto.RegisterType((*PlayerIcon)(nil), "resource.service.v1.PlayerIcon")
	proto.RegisterType((*MngIconRequest)(nil), "resource.service.v1.MngIconRequest")
	proto.RegisterType((*MngIconReply)(nil), "resource.service.v1.MngIconReply")
	proto.RegisterMapType((map[int64]*MngIcon)(nil), "resource.service.v1.MngIconReply.InfoEntry")
	proto.RegisterType((*MngIcon)(nil), "resource.service.v1.MngIcon")
	proto.RegisterType((*IconModule)(nil), "resource.service.v1.IconModule")
	proto.RegisterType((*MineSectionsRequest)(nil), "resource.service.v1.MineSectionsRequest")
	proto.RegisterType((*MineSectionsReply)(nil), "resource.service.v1.MineSectionsReply")
	proto.RegisterType((*HomeSectionsRequest)(nil), "resource.service.v1.HomeSectionsRequest")
	proto.RegisterType((*HomeSectionsReply)(nil), "resource.service.v1.HomeSectionsReply")
	proto.RegisterType((*Section)(nil), "resource.service.v1.Section")
	proto.RegisterType((*SectionItem)(nil), "resource.service.v1.SectionItem")
	proto.RegisterType((*SectionItemOpLinkType)(nil), "resource.service.v1.SectionItemOpLinkType")
	proto.RegisterType((*InformationRegionCardReply)(nil), "resource.service.v1.InformationRegionCardReply")
	proto.RegisterType((*InformationRegionCard)(nil), "resource.service.v1.InformationRegionCard")
	proto.RegisterType((*GetS10PopEntranceAidsReq)(nil), "resource.service.v1.GetS10PopEntranceAidsReq")
	proto.RegisterType((*GetS10PopEntranceAidsReply)(nil), "resource.service.v1.GetS10PopEntranceAidsReply")
	proto.RegisterType((*ResourceAllReply)(nil), "resource.service.v1.ResourceAllReply")
	proto.RegisterType((*ResourceInfo)(nil), "resource.service.v1.ResourceInfo")
	proto.RegisterType((*Assignment)(nil), "resource.service.v1.Assignment")
	proto.RegisterType((*AssignmentAllReply)(nil), "resource.service.v1.AssignmentAllReply")
	proto.RegisterType((*DefBannerReply)(nil), "resource.service.v1.DefBannerReply")
	proto.RegisterType((*ResourceRequest)(nil), "resource.service.v1.ResourceRequest")
	proto.RegisterType((*ResourceReply)(nil), "resource.service.v1.ResourceReply")
	proto.RegisterType((*ResourcesRequest)(nil), "resource.service.v1.ResourcesRequest")
	proto.RegisterType((*ResourcesReply)(nil), "resource.service.v1.ResourcesReply")
	proto.RegisterMapType((map[int32]*ResourceInfo)(nil), "resource.service.v1.ResourcesReply.ResourcesEntry")
	proto.RegisterType((*PasterAPPRequest)(nil), "resource.service.v1.PasterAPPRequest")
	proto.RegisterType((*PasterAPPReply)(nil), "resource.service.v1.PasterAPPReply")
	proto.RegisterType((*IndexIconReply)(nil), "resource.service.v1.IndexIconReply")
	proto.RegisterMapType((map[string]*IndexIcon)(nil), "resource.service.v1.IndexIconReply.IndexIconEntry")
	proto.RegisterType((*IndexIcon)(nil), "resource.service.v1.IndexIcon")
	proto.RegisterType((*IndexIconItem)(nil), "resource.service.v1.IndexIconItem")
	proto.RegisterType((*PlayerIconRequest)(nil), "resource.service.v1.PlayerIconRequest")
	proto.RegisterType((*PlayerIconV2Reply)(nil), "resource.service.v1.PlayerIconV2Reply")
	proto.RegisterType((*PlayerIconReply)(nil), "resource.service.v1.PlayerIconReply")
	proto.RegisterType((*IconData)(nil), "resource.service.v1.IconData")
	proto.RegisterType((*CmtboxRequest)(nil), "resource.service.v1.CmtboxRequest")
	proto.RegisterType((*CmtboxReply)(nil), "resource.service.v1.CmtboxReply")
	proto.RegisterType((*SideBarsReply)(nil), "resource.service.v1.SideBarsReply")
	proto.RegisterMapType((map[int64]*SideBarLimit)(nil), "resource.service.v1.SideBarsReply.LimitEntry")
	proto.RegisterType((*SideBar)(nil), "resource.service.v1.SideBar")
	proto.RegisterType((*SideBarLimit)(nil), "resource.service.v1.SideBarLimit")
	proto.RegisterType((*SideBarLimitItem)(nil), "resource.service.v1.SideBarLimitItem")
	proto.RegisterType((*AbTestRequest)(nil), "resource.service.v1.AbTestRequest")
	proto.RegisterType((*AbTestReply)(nil), "resource.service.v1.AbTestReply")
	proto.RegisterMapType((map[string]*AbTest)(nil), "resource.service.v1.AbTestReply.AbtestEntry")
	proto.RegisterType((*AbTest)(nil), "resource.service.v1.AbTest")
	proto.RegisterType((*PasterCIDReply)(nil), "resource.service.v1.PasterCIDReply")
	proto.RegisterMapType((map[int64]int64)(nil), "resource.service.v1.PasterCIDReply.PasterEntry")
	proto.RegisterType((*GetTabExtReq)(nil), "resource.service.v1.GetTabExtReq")
	proto.RegisterType((*Tab)(nil), "resource.service.v1.Tab")
	proto.RegisterType((*GetTabExtRep)(nil), "resource.service.v1.GetTabExtRep")
	proto.RegisterType((*TabExt)(nil), "resource.service.v1.TabExt")
	proto.RegisterType((*Click)(nil), "resource.service.v1.Click")
	proto.RegisterType((*IsUploaderReq)(nil), "resource.service.v1.IsUploaderReq")
	proto.RegisterType((*IsUploaderReply)(nil), "resource.service.v1.IsUploaderReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 7909 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x4b, 0x6c, 0x1c, 0x59,
	0x92, 0x98, 0x8a, 0xf5, 0x8f, 0x2a, 0x52, 0xd4, 0xd3, 0xa7, 0xab, 0xa9, 0x4f, 0xa9, 0x53, 0x52,
	0xb7, 0xfa, 0xa7, 0x6e, 0x71, 0xba, 0x5b, 0x33, 0xdd, 0xdb, 0x33, 0xc3, 0x9f, 0xa4, 0x9a, 0x25,
	0x25, 0x76, 0x92, 0x52, 0xcf, 0xac, 0x17, 0x2e, 0x67, 0x55, 0x3e, 0x16, 0x73, 0x54, 0x55, 0x99,
	0x9d, 0x99, 0x45, 0x8a, 0x7d, 0xf0, 0x61, 0xe1, 0xf5, 0xc2, 0xb0, 0x4f, 0x86, 0x7d, 0xf1, 0xc9,
	0x86, 0xe1, 0x85, 0x81, 0xb5, 0x01, 0x5f, 0x7c, 0x30, 0x60, 0xc0, 0x0b, 0xd8, 0x80, 0xd7, 0x80,
	0x0f, 0x86, 0x0d, 0x18, 0x3e, 0x11, 0xc6, 0xf8, 0x64, 0xfa, 0x62, 0xf4, 0x71, 0x2e, 0x36, 0x22,
	0xe2, 0xbd, 0xcc, 0x57, 0xc5, 0xaa, 0x62, 0x51, 0x63, 0x18, 0x76, 0x1f, 0xc4, 0x7c, 0xf1, 0x22,
	0xde, 0x37, 0x5e, 0x44, 0xbc, 0x88, 0x78, 0xd5, 0x50, 0x76, 0x02, 0xef, 0x41, 0x10, 0xfa, 0xb1,
	0x2f, 0x2e, 0x87, 0x32, 0xf2, 0x07, 0x61, 0x5b, 0x3e, 0x88, 0x64, 0x78, 0xe0, 0xb5, 0xe5, 0x83,
	0x83, 0x87, 0x4b, 0x1f, 0x77, 0xbc, 0x78, 0x7f, 0xd0, 0x7a, 0xd0, 0xf6, 0x7b, 0x9f, 0x74, 0xfc,
	0x8e, 0xff, 0x09, 0xe1, 0xb6, 0x06, 0x7b, 0x54, 0xa2, 0x02, 0x7d, 0x71, 0x1b, 0x4b, 0x15, 0x67,
	0xe0, 0x7a, 0xb1, 0x2a, 0x40, 0xdb, 0x09, 0x5d, 0xfd, 0xdd, 0x93, 0xfd, 0x81, 0xfa, 0x5e, 0x68,
	0xfb, 0xfd, 0x03, 0x19, 0x76, 0xa4, 0x2e, 0xbb, 0xfe, 0x61, 0xbf, 0xeb, 0x3b, 0x1a, 0x77, 0x3e,
	0x0a, 0x64, 0xdb, 0x73, 0xba, 0xba, 0x4d, 0xd9, 0x8f, 0xc3, 0x23, 0x55, 0xa8, 0x0e, 0x3a, 0xed,
	0xd8, 0x69, 0xe9, 0x52, 0xd0, 0x75, 0x8e, 0x64, 0x98, 0x94, 0xfc, 0x60, 0x10, 0x44, 0xaa, 0x74,
	0x71, 0x2f, 0xf4, 0xfb, 0x71, 0xe0, 0xe8, 0x6e, 0xac, 0x7f, 0x91, 0x81, 0xf9, 0x2d, 0xd9, 0x1f,
	0x6c, 0xbc, 0x8e, 0x5f, 0xca, 0xd0, 0x96, 0xdf, 0x89, 0x2f, 0x60, 0xce, 0x73, 0x6b, 0x99, 0xdb,
	0x99, 0xfb, 0xd9, 0xd5, 0x77, 0x7f, 0x38, 0xae, 0x5b, 0x7b, 0x7e, 0xd8, 0xfb, 0xd2, 0xf2, 0x5c,
	0xeb, 0xf6, 0x81, 0xd3, 0xf5, 0x5c, 0x27, 0x96, 0x5f, 0x5a, 0x9d, 0xf8, 0xeb, 0x4f, 0x3f, 0x0a,
	0xe5, 0x77, 0x03, 0x2f, 0x94, 0xae, 0x65, 0xcf, 0x79, 0xae, 0xf8, 0x0c, 0xb2, 0x07, 0x32, 0xac,
	0xcd, 0xdd, 0xce, 0xdc, 0x2f, 0xaf, 0x5a, 0x3f, 0x1c, 0xd7, 0x6f, 0x31, 0xe1, 0x81, 0x0c, 0x4d,
	0xca, 0x94, 0x08, 0xd1, 0xc5, 0x97, 0x90, 0x6f, 0x0d, 0x0e, 0x3c, 0xb7, 0x96, 0x25, 0xba, 0xbb,
	0x3f, 0x1c, 0xd7, 0x6f, 0x33, 0x1d, 0x81, 0xc7, 0x53, 0x32, 0x89, 0xf5, 0x1e, 0x5c, 0x34, 0x87,
	0x1e, 0x74, 0x8f, 0xc4, 0x15, 0xc8, 0xb7, 0xbb, 0x5e, 0xfb, 0x15, 0x8d, 0x3f, 0x6f, 0x73, 0xc1,
	0xfa, 0x97, 0x19, 0x58, 0x5c, 0x71, 0xdd, 0xff, 0x5f, 0xe7, 0x79, 0x05, 0xc4, 0xc8, 0xe8, 0x83,
	0xee, 0x91, 0xb5, 0x00, 0xd5, 0x67, 0xfe, 0x4a, 0xd8, 0xb1, 0xe5, 0x77, 0x03, 0x19, 0xc5, 0xd6,
	0x3f, 0x98, 0x83, 0xfc, 0xb6, 0x13, 0x3a, 0x3d, 0x71, 0x0d, 0xe6, 0x1a, 0xeb, 0x6a, 0x66, 0x85,
	0x93, 0xe3, 0xfa, 0x9c, 0xe7, 0xda, 0x73, 0x8d, 0x75, 0x71, 0x03, 0x72, 0xcf, 0x9c, 0x9e, 0x54,
	0x43, 0x2f, 0x9d, 0x1c, 0xd7, 0x73, 0x7d, 0xa7, 0x27, 0x6d, 0x82, 0x8a, 0x3a, 0xe4, 0x5f, 0x3a,
	0xdd, 0x81, 0x54, 0x23, 0x2c, 0x9f, 0x1c, 0xd7, 0xf3, 0x07, 0x08, 0xb0, 0x19, 0x2e, 0x2c, 0x28,
	0xd8, 0xb2, 0xe7, 0x84, 0xaf, 0x6a, 0x39, 0xc2, 0x80, 0x93, 0xe3, 0x7a, 0x21, 0x24, 0x88, 0xad,
	0x6a, 0xb0, 0x8b, 0xed, 0xae, 0x13, 0xd7, 0xf2, 0xd4, 0x39, 0x75, 0x11, 0x74, 0x9d, 0xd8, 0x26,
	0x28, 0x76, 0xb1, 0x3a, 0xf0, 0xba, 0x6e, 0xad, 0x40, 0xd5, 0xd4, 0x45, 0x0b, 0x01, 0x36, 0xc3,
	0xc5, 0x03, 0x80, 0x35, 0xbf, 0xef, 0x7a, 0xb1, 0xe7, 0xf7, 0xa3, 0x5a, 0x91, 0xba, 0x59, 0x38,
	0x39, 0xae, 0x43, 0x3b, 0x81, 0xda, 0x06, 0x06, 0xe2, 0xaf, 0xcb, 0xc0, 0x09, 0xe3, 0x9e, 0xec,
	0xc7, 0xb5, 0x12, 0xb5, 0x4a, 0xf8, 0x6e, 0x02, 0xb5, 0x0d, 0x0c, 0xeb, 0x36, 0x94, 0x68, 0x89,
	0x70, 0xff, 0xaf, 0x40, 0x1e, 0x07, 0x15, 0xd5, 0x32, 0xb7, 0xb3, 0xf7, 0xb3, 0x36, 0x17, 0xac,
	0xdf, 0x03, 0x50, 0x18, 0xc8, 0x4e, 0x0f, 0x20, 0xd7, 0xf5, 0xa2, 0x98, 0x50, 0x2a, 0xcb, 0x4b,
	0x0f, 0xc6, 0x08, 0x83, 0x07, 0x8c, 0x4e, 0x78, 0xd6, 0x1f, 0xe7, 0xa0, 0xf0, 0xd4, 0x73, 0x5d,
	0xd9, 0x17, 0x0b, 0x29, 0x7b, 0x11, 0xdb, 0x2c, 0x42, 0x36, 0xf2, 0x5c, 0x5a, 0xfb, 0xac, 0x8d,
	0x9f, 0x08, 0x09, 0x15, 0x43, 0x64, 0x6d, 0xfc, 0x14, 0x35, 0x28, 0xb6, 0xf7, 0x9d, 0x7e, 0x5f,
	0x76, 0x79, 0x89, 0x6d, 0x5d, 0x14, 0x9b, 0x50, 0x51, 0x9f, 0xcd, 0x9e, 0x13, 0xd4, 0xf2, 0x34,
	0x9e, 0x0f, 0xc7, 0x8e, 0x87, 0xfb, 0x7f, 0xb0, 0xc6, 0xe8, 0x5b, 0x4e, 0xb0, 0x81, 0x92, 0xc2,
	0x86, 0x76, 0x02, 0xc0, 0x9e, 0x03, 0x4f, 0xed, 0x82, 0x8d, 0x9f, 0xe2, 0x73, 0xc8, 0x47, 0xb1,
	0xd7, 0x93, 0xb4, 0xe6, 0xd9, 0xd5, 0xfa, 0x6f, 0x8f, 0xeb, 0xd7, 0x3b, 0xfe, 0xc7, 0x6d, 0xbf,
	0xd7, 0xf3, 0xfb, 0x9f, 0x74, 0xbd, 0x56, 0xe8, 0x84, 0x47, 0x9f, 0x20, 0xc6, 0x83, 0x5d, 0xaf,
	0x27, 0x6d, 0xc6, 0x46, 0x32, 0x49, 0x64, 0xa5, 0x19, 0xc9, 0x08, 0x1b, 0xfb, 0x6f, 0x7b, 0x6e,
	0xad, 0xcc, 0xfd, 0xb7, 0x3d, 0x57, 0xbc, 0x0f, 0x8b, 0xfb, 0x34, 0xee, 0x66, 0xb2, 0xd3, 0x35,
	0xa0, 0x25, 0xb8, 0xc8, 0xf0, 0x64, 0xd3, 0xc5, 0x75, 0x28, 0xf7, 0x7c, 0x77, 0xd0, 0x95, 0x4d,
	0xcf, 0xad, 0x55, 0xa8, 0x89, 0x12, 0x03, 0x1a, 0xae, 0xb8, 0x03, 0xf3, 0x7a, 0x9d, 0xf6, 0x06,
	0xdf, 0x7f, 0x7f, 0x54, 0xab, 0xde, 0xce, 0xde, 0x2f, 0xdb, 0x55, 0x05, 0x7c, 0x8c, 0x30, 0xf1,
	0x0e, 0x54, 0xf7, 0x3d, 0x57, 0x36, 0xdd, 0xa3, 0xbe, 0xd3, 0xf3, 0xda, 0xb5, 0x79, 0x6a, 0xa4,
	0x82, 0xb0, 0x75, 0x06, 0x2d, 0x7d, 0x0d, 0x17, 0x47, 0x16, 0x10, 0x07, 0xfd, 0x4a, 0x1e, 0xd1,
	0x8e, 0x96, 0x6d, 0xfc, 0x44, 0x0e, 0xa2, 0x03, 0xc2, 0x07, 0xca, 0xe6, 0xc2, 0x97, 0x73, 0x3f,
	0xce, 0x58, 0x47, 0x50, 0xe1, 0x6d, 0xd8, 0xf4, 0x7a, 0x5e, 0x3c, 0x8e, 0x17, 0xfc, 0x94, 0x17,
	0x7c, 0xcf, 0x15, 0xb7, 0xc0, 0x60, 0x71, 0x3e, 0x81, 0xb6, 0x01, 0xc1, 0xae, 0xe8, 0xa0, 0x10,
	0x5f, 0x64, 0x6d, 0x2e, 0x08, 0x01, 0x74, 0xba, 0xe8, 0xb4, 0xe5, 0x6d, 0xfa, 0xb6, 0x7e, 0x01,
	0x97, 0x71, 0xbc, 0x4e, 0xbf, 0x2d, 0x79, 0x08, 0xcc, 0xc9, 0x3f, 0x1a, 0xe2, 0xe4, 0xfa, 0x14,
	0xce, 0x69, 0xf4, 0xf7, 0x7c, 0xc5, 0xce, 0x03, 0x80, 0x14, 0x26, 0x3e, 0x81, 0x9c, 0xd7, 0xdf,
	0xf3, 0x69, 0x1e, 0x95, 0xe5, 0xeb, 0x53, 0x9a, 0xb0, 0x09, 0x51, 0x7c, 0x01, 0xf9, 0x2e, 0xce,
	0xbf, 0x36, 0x47, 0x9d, 0xde, 0x9e, 0x42, 0x41, 0xeb, 0x64, 0x33, 0xba, 0xf5, 0x9f, 0xe7, 0xa0,
	0xa6, 0xe7, 0x10, 0x35, 0x22, 0x3d, 0x0d, 0x12, 0x73, 0x38, 0x67, 0xdf, 0x73, 0xf5, 0xa9, 0xa5,
	0x6f, 0x5c, 0x1d, 0x3f, 0x3e, 0x0a, 0x78, 0x23, 0xf2, 0x36, 0x17, 0xd2, 0x35, 0xcb, 0x8e, 0x5b,
	0xb3, 0x5c, 0xba, 0x66, 0xe2, 0x61, 0x7a, 0xee, 0xf2, 0x24, 0x73, 0xde, 0xfa, 0xe1, 0xb8, 0x7e,
	0x79, 0x9c, 0x44, 0x4e, 0x0e, 0xe4, 0x2f, 0xa1, 0xec, 0x7b, 0x6e, 0xd3, 0x8b, 0x65, 0x2f, 0xaa,
	0x15, 0x68, 0x7e, 0x5f, 0x8d, 0x9d, 0xdf, 0xa4, 0x89, 0x3c, 0x78, 0xee, 0xb9, 0x0d, 0xa4, 0xe6,
	0xe3, 0x59, 0xf2, 0x55, 0x71, 0xe9, 0x57, 0x30, 0x3f, 0x54, 0x65, 0x32, 0x5e, 0x96, 0x19, 0x6f,
	0xd9, 0x64, 0xbc, 0xca, 0xf2, 0x8d, 0xb1, 0x1d, 0x3f, 0xf7, 0xdc, 0x4d, 0x2f, 0x8a, 0x4d, 0xb6,
	0xbc, 0x09, 0x45, 0x05, 0x1d, 0xb7, 0x8c, 0xd6, 0x6f, 0xe6, 0xe0, 0xda, 0x98, 0xe1, 0x22, 0xfb,
	0x6c, 0x42, 0x1e, 0x79, 0x20, 0x52, 0xfc, 0xf3, 0xc5, 0xac, 0x53, 0x0d, 0xba, 0x47, 0x0f, 0x88,
	0x90, 0x67, 0xc9, 0x8d, 0x88, 0xbf, 0x0c, 0x95, 0x2d, 0x3e, 0xb1, 0xd4, 0x26, 0xb3, 0xc7, 0xef,
	0x9d, 0xa7, 0x4d, 0x83, 0x9c, 0x5b, 0x36, 0x1b, 0x14, 0xb7, 0xe9, 0xf8, 0xe9, 0xc3, 0x4c, 0xfb,
	0x5f, 0xb2, 0x4d, 0xd0, 0xd2, 0x8f, 0x01, 0x52, 0xe2, 0x31, 0x2b, 0x3c, 0x74, 0xb4, 0x4b, 0xc6,
	0x1a, 0x2e, 0xfd, 0x14, 0x16, 0x47, 0x3b, 0x3f, 0x0f, 0xbd, 0xb5, 0x0f, 0xf3, 0xb6, 0xec, 0x3a,
	0xb1, 0xd4, 0x0c, 0x3d, 0x2a, 0x1c, 0xde, 0x86, 0x52, 0xcf, 0x6f, 0x79, 0x4d, 0x27, 0x08, 0x94,
	0x60, 0x29, 0x62, 0x79, 0x25, 0x08, 0xc4, 0x35, 0x28, 0xb8, 0x12, 0x57, 0x46, 0x49, 0x08, 0x55,
	0x1a, 0x96, 0x0e, 0x79, 0xc5, 0xe9, 0xd6, 0x63, 0xa8, 0xee, 0x48, 0x27, 0x6c, 0xef, 0x3f, 0xef,
	0x1c, 0xfc, 0x0e, 0x06, 0x8f, 0xf5, 0x00, 0x16, 0x8c, 0x76, 0x90, 0x1b, 0x6e, 0x40, 0x2e, 0x4a,
	0x98, 0x87, 0xb5, 0x3c, 0x96, 0x6d, 0xfa, 0xd7, 0xfa, 0x67, 0x59, 0x10, 0x8f, 0xa5, 0x74, 0x57,
	0xf1, 0xa4, 0x84, 0x91, 0x9e, 0xe7, 0x67, 0x90, 0xeb, 0xc9, 0xd8, 0x51, 0x1c, 0x34, 0x5e, 0x18,
	0xb4, 0x88, 0xa4, 0x89, 0x78, 0x36, 0x61, 0x27, 0xc7, 0x95, 0x65, 0x25, 0x1f, 0xd7, 0xf1, 0x07,
	0x7b, 0x11, 0xb2, 0x3d, 0xcf, 0x65, 0xcb, 0xc3, 0xc6, 0x4f, 0x71, 0x15, 0x0a, 0xa1, 0x8c, 0x9a,
	0x89, 0xa6, 0xcb, 0x87, 0x32, 0x6a, 0x0c, 0x69, 0xd9, 0xe2, 0xb0, 0x96, 0xc5, 0xad, 0x08, 0x48,
	0x97, 0x95, 0xed, 0x39, 0x2f, 0xe0, 0x8e, 0x0e, 0x94, 0xa6, 0x2a, 0x2b, 0x73, 0x0c, 0xe9, 0xfb,
	0x32, 0x3e, 0xf4, 0xc3, 0x57, 0x4a, 0x45, 0xe9, 0xe2, 0xd0, 0xd6, 0x55, 0x26, 0x6d, 0x5d, 0x75,
	0x68, 0xeb, 0x2e, 0x43, 0xde, 0x8b, 0x9a, 0x8e, 0x4b, 0x4a, 0xa8, 0x64, 0xe7, 0xbc, 0x68, 0xc5,
	0x15, 0x37, 0x01, 0xfc, 0x40, 0xf6, 0x9b, 0xf2, 0x00, 0xcd, 0x9a, 0x05, 0x22, 0x28, 0x23, 0x64,
	0x03, 0x01, 0xd8, 0x8d, 0xe3, 0x36, 0xe5, 0xeb, 0x38, 0x74, 0x6a, 0x17, 0xb9, 0x1b, 0xc7, 0xdd,
	0xc0, 0x22, 0x8e, 0xed, 0x40, 0x86, 0x11, 0xaa, 0xcf, 0x45, 0xae, 0x51, 0x45, 0x54, 0x9b, 0x51,
	0xd0, 0x75, 0xa2, 0x7d, 0x5c, 0x8f, 0x4b, 0xac, 0x36, 0x19, 0xd0, 0x70, 0x2d, 0x1f, 0x2a, 0xc6,
	0xd2, 0x9f, 0x62, 0x49, 0x01, 0xb9, 0x44, 0xbc, 0x96, 0x6d, 0xfa, 0x16, 0x75, 0xa8, 0x78, 0xfd,
	0xae, 0xd7, 0x97, 0x4d, 0xaa, 0x52, 0x2a, 0x8b, 0x41, 0xbb, 0x88, 0x70, 0x1d, 0xca, 0x0a, 0xc1,
	0x73, 0x95, 0x39, 0x53, 0x62, 0x40, 0xc3, 0xb5, 0x1c, 0x58, 0x1c, 0x62, 0x11, 0x56, 0x51, 0x05,
	0x1e, 0x84, 0x62, 0x91, 0xf1, 0x1a, 0x86, 0x49, 0x6c, 0x85, 0x8a, 0x13, 0x7e, 0xa9, 0x26, 0xac,
	0x0e, 0x8b, 0x2a, 0x5a, 0x7f, 0x23, 0x0b, 0x0b, 0x23, 0x2c, 0xa8, 0x99, 0x29, 0x63, 0xc8, 0xfe,
	0x84, 0x99, 0xe6, 0x8c, 0xb3, 0x83, 0xcc, 0xe4, 0xa4, 0xb6, 0x99, 0xe3, 0x25, 0xec, 0x95, 0x4b,
	0xd9, 0xeb, 0x1a, 0xb1, 0x57, 0x63, 0x3d, 0x62, 0xa5, 0x61, 0xab, 0x92, 0xc9, 0x5f, 0x85, 0x71,
	0xfc, 0x55, 0x3c, 0xcd, 0x5f, 0xa5, 0x09, 0xfc, 0x55, 0x9e, 0xcc, 0x5f, 0x30, 0x89, 0xbf, 0x2a,
	0xe3, 0xf9, 0xab, 0x3a, 0x91, 0xbf, 0xe6, 0xa7, 0xf1, 0xd7, 0xc2, 0x44, 0xfe, 0xba, 0x38, 0x85,
	0xbf, 0x16, 0x47, 0xf8, 0xeb, 0xdf, 0x67, 0xa0, 0x3a, 0xb4, 0xd7, 0x4f, 0xa1, 0xa8, 0xca, 0x6a,
	0xb3, 0x1f, 0x4c, 0xd9, 0x6c, 0xa6, 0xd1, 0x05, 0x96, 0xf7, 0x9a, 0x7c, 0x32, 0x03, 0x2c, 0xfd,
	0x32, 0xe9, 0xf3, 0x94, 0x94, 0xce, 0x9f, 0x43, 0x8f, 0xea, 0x31, 0x18, 0x32, 0xfc, 0xe7, 0xc9,
	0xe8, 0xc5, 0xe7, 0xa3, 0x13, 0x99, 0xca, 0xb5, 0x1a, 0xd7, 0xfa, 0xf3, 0x79, 0x28, 0xf0, 0x37,
	0xde, 0xd6, 0x12, 0xb1, 0x9c, 0xdc, 0xd6, 0x3c, 0x57, 0x58, 0x50, 0x0e, 0x9c, 0x50, 0xf6, 0xe3,
	0xa6, 0x36, 0x15, 0x57, 0xf3, 0x27, 0xc7, 0xf5, 0xcc, 0xc7, 0x76, 0x89, 0xe1, 0x0d, 0xd4, 0x15,
	0xcc, 0xd0, 0xc8, 0xa7, 0x79, 0x5d, 0xcd, 0x7c, 0x7d, 0x13, 0x0a, 0x6c, 0x15, 0xab, 0xdb, 0x9a,
	0xaa, 0x54, 0x40, 0xf1, 0x0e, 0x94, 0x02, 0x3f, 0x62, 0x43, 0x3b, 0x6f, 0x22, 0x24, 0x60, 0xbc,
	0xad, 0xc5, 0x5e, 0xdc, 0x95, 0xcc, 0xc5, 0x7c, 0x5b, 0x23, 0x80, 0xcd, 0x7f, 0x10, 0xc1, 0xeb,
	0x39, 0x1d, 0xa9, 0x2e, 0x6a, 0x84, 0x40, 0x00, 0x9b, 0xff, 0xa0, 0x9e, 0xd8, 0x77, 0xa2, 0x7d,
	0x66, 0x6f, 0xd6, 0x13, 0x58, 0xb6, 0xe9, 0x5f, 0x71, 0x1d, 0xf2, 0x83, 0x66, 0xd8, 0xf4, 0x98,
	0xcb, 0x57, 0x8b, 0x27, 0xc7, 0xf5, 0xec, 0x20, 0xf4, 0xec, 0xec, 0xc0, 0x6e, 0xe0, 0xcc, 0x3a,
	0x7e, 0xec, 0x33, 0x9b, 0x27, 0x33, 0x43, 0x10, 0xd2, 0xf1, 0xae, 0x55, 0xcc, 0x3a, 0x86, 0x61,
	0x65, 0x80, 0x17, 0x32, 0x16, 0xb3, 0x49, 0x25, 0xc1, 0x44, 0x3d, 0x3d, 0x99, 0xf3, 0x66, 0x75,
	0x72, 0x40, 0xaf, 0x6b, 0x61, 0xb0, 0x60, 0x2e, 0xa8, 0x92, 0x09, 0x77, 0xa0, 0x9c, 0x5e, 0x4e,
	0x2e, 0x9a, 0xf4, 0x29, 0x1c, 0xc7, 0xed, 0x84, 0xd2, 0x61, 0xe9, 0x9b, 0x8c, 0x1b, 0x41, 0x58,
	0x15, 0x3a, 0xfd, 0x57, 0x2c, 0x7c, 0x93, 0x2a, 0x04, 0x51, 0x15, 0x6e, 0x95, 0x18, 0xa2, 0x42,
	0x10, 0x56, 0x91, 0x80, 0xbd, 0x3c, 0xb4, 0xc5, 0x4a, 0x04, 0xe7, 0xa3, 0xd8, 0x09, 0xe3, 0xda,
	0x95, 0xf4, 0x3a, 0x4d, 0xf7, 0x32, 0x9b, 0xe1, 0xe2, 0x2d, 0xc8, 0xca, 0xbe, 0x5b, 0xbb, 0x6a,
	0x76, 0x88, 0x10, 0x71, 0x03, 0x0a, 0xbd, 0x26, 0x5d, 0xdc, 0xae, 0x99, 0x75, 0xf9, 0x1e, 0xde,
	0xd2, 0xc4, 0xa7, 0x50, 0xd1, 0x3c, 0x8c, 0xbc, 0xf7, 0x16, 0xa1, 0x5c, 0x3c, 0x39, 0xae, 0x9b,
	0x60, 0x1b, 0x74, 0xa1, 0xe1, 0x8a, 0x47, 0x00, 0x21, 0xcb, 0x58, 0x24, 0xa8, 0xd1, 0x2c, 0x6a,
	0x27, 0xc7, 0xf5, 0x2b, 0x29, 0xf4, 0x23, 0xbf, 0x87, 0xc6, 0x72, 0x10, 0x1f, 0xd9, 0x65, 0x05,
	0x6d, 0xb8, 0xe2, 0x4b, 0xa8, 0xb4, 0x43, 0xe9, 0xc4, 0xde, 0x01, 0x75, 0xf5, 0x36, 0x75, 0xf5,
	0xf6, 0xc9, 0x71, 0xfd, 0xaa, 0x01, 0x36, 0x48, 0x41, 0x83, 0x1b, 0xae, 0xf8, 0x10, 0x0a, 0x51,
	0xd8, 0x46, 0xb2, 0x25, 0x22, 0xbb, 0x72, 0x72, 0x5c, 0x5f, 0x64, 0x88, 0x41, 0x91, 0x8f, 0xc2,
	0x76, 0x03, 0x2f, 0x58, 0x4a, 0x0e, 0x5e, 0x47, 0x39, 0xa8, 0x78, 0x15, 0x01, 0x4a, 0x24, 0xbe,
	0x0f, 0xf3, 0x54, 0x6c, 0x86, 0x32, 0xe8, 0x3a, 0x6d, 0x59, 0xbb, 0x41, 0x78, 0x6a, 0x61, 0x2a,
	0x88, 0x63, 0x73, 0x8d, 0xf8, 0x11, 0x94, 0x19, 0xb5, 0xeb, 0xb7, 0x6b, 0x37, 0x09, 0xed, 0xad,
	0x93, 0xe3, 0xfa, 0xe5, 0x04, 0x68, 0xf4, 0x5e, 0x44, 0xc2, 0x4d, 0xbf, 0x2d, 0xee, 0x42, 0xb1,
	0xdd, 0x6b, 0x92, 0xf7, 0xe4, 0x16, 0x8d, 0xb6, 0x72, 0x72, 0x5c, 0xd7, 0x20, 0xbb, 0xd0, 0xee,
	0x6d, 0x39, 0xe1, 0x2b, 0x71, 0x1f, 0xf2, 0x8e, 0xdb, 0x6c, 0xb7, 0x6a, 0x75, 0x5a, 0xc2, 0xcb,
	0x27, 0xc7, 0xf5, 0x8b, 0x04, 0x30, 0x9a, 0xcc, 0x39, 0xee, 0x5a, 0x4b, 0x3c, 0x84, 0x52, 0xb4,
	0xef, 0x1f, 0x36, 0x07, 0x61, 0xb7, 0x76, 0x9b, 0x90, 0xaf, 0x9d, 0x1c, 0xd7, 0x85, 0x86, 0x99,
	0x43, 0x40, 0xd8, 0x8b, 0xb0, 0x2b, 0x3e, 0x83, 0x32, 0xb9, 0xc3, 0x88, 0xe6, 0x1d, 0xbe, 0xe7,
	0xe0, 0xb8, 0x13, 0xa0, 0x41, 0x54, 0x22, 0x60, 0x4a, 0x45, 0x62, 0x28, 0xa8, 0x59, 0x43, 0x54,
	0x0c, 0x1c, 0xa1, 0x42, 0xc1, 0x14, 0x90, 0x68, 0xe8, 0xbb, 0xf2, 0x75, 0xed, 0x4e, 0xca, 0x9a,
	0x04, 0xb0, 0xf9, 0x0f, 0xf2, 0x18, 0x8a, 0x47, 0x19, 0xb2, 0xf9, 0x70, 0x37, 0xe5, 0x31, 0x03,
	0x6c, 0x03, 0x17, 0x76, 0x15, 0xb7, 0xb3, 0x4a, 0xba, 0x77, 0x3b, 0x73, 0xbf, 0xca, 0x4d, 0x12,
	0xc0, 0xe6, 0x3f, 0xe2, 0x0b, 0x98, 0x4f, 0x98, 0x86, 0x1a, 0x7d, 0x97, 0x1a, 0xbd, 0x74, 0x72,
	0x5c, 0x1f, 0xae, 0xb0, 0xab, 0xba, 0x48, 0x0d, 0x7f, 0x06, 0xe5, 0x68, 0xd0, 0x6a, 0xb2, 0xac,
	0x7b, 0x2f, 0x9d, 0x61, 0x02, 0x34, 0x67, 0x18, 0x0d, 0x5a, 0xbb, 0x24, 0xfc, 0x86, 0xf4, 0xdd,
	0xfd, 0x61, 0x7d, 0x27, 0x5e, 0x0e, 0xd9, 0x53, 0xb5, 0xf7, 0x49, 0xbd, 0x9c, 0x69, 0xf2, 0xae,
	0x5e, 0xfe, 0x8b, 0xe3, 0xfa, 0x05, 0x5c, 0x03, 0xd3, 0x0e, 0x06, 0x2e, 0x6c, 0xa1, 0x61, 0xf6,
	0x15, 0x5c, 0x54, 0x36, 0xd5, 0x20, 0x92, 0xcd, 0xc8, 0xe9, 0xc9, 0xda, 0x07, 0x34, 0x49, 0xe2,
	0x94, 0x91, 0x2a, 0x7b, 0x9e, 0x01, 0x2f, 0x22, 0xb9, 0xe3, 0xf4, 0xa4, 0xd8, 0x82, 0xab, 0x0a,
	0xa3, 0xe5, 0x84, 0xa1, 0xd3, 0x91, 0xcd, 0xe8, 0xd0, 0x8b, 0xdb, 0xfb, 0xb5, 0x0f, 0xd3, 0x53,
	0x37, 0x16, 0xc1, 0xbe, 0xcc, 0xe0, 0x55, 0x86, 0xee, 0x10, 0xd0, 0xfa, 0x87, 0x73, 0x50, 0xdd,
	0x61, 0x9f, 0x34, 0xeb, 0xf4, 0x51, 0xab, 0xf1, 0x8a, 0xd6, 0x1f, 0xca, 0x3d, 0xc2, 0x4a, 0x43,
	0x40, 0xce, 0x95, 0x51, 0x5b, 0x19, 0x8c, 0xf4, 0x4d, 0x5e, 0x5b, 0xff, 0x40, 0x86, 0xca, 0x4c,
	0xe4, 0x02, 0x9a, 0x34, 0x11, 0x83, 0x95, 0x7d, 0xc5, 0x25, 0xf1, 0x16, 0x14, 0x43, 0xb5, 0xc3,
	0x05, 0xd2, 0xe5, 0x85, 0x90, 0x37, 0xf2, 0x6d, 0x28, 0x85, 0xb2, 0xc9, 0xba, 0x41, 0x59, 0xf6,
	0xa1, 0x64, 0xdf, 0xe5, 0x35, 0x28, 0xb4, 0xfd, 0x10, 0x6d, 0x4b, 0x36, 0xb5, 0x54, 0x09, 0x47,
	0xd3, 0x76, 0x42, 0x36, 0xf0, 0xf3, 0x36, 0x7d, 0xb3, 0xa7, 0xee, 0x7b, 0x65, 0x60, 0xe1, 0xa7,
	0x58, 0x32, 0x94, 0x65, 0x85, 0x30, 0x53, 0x2d, 0x79, 0x13, 0x45, 0x5f, 0xbb, 0x19, 0x4a, 0x27,
	0xf2, 0xfb, 0xca, 0xb8, 0x2f, 0x87, 0xb2, 0x6d, 0x13, 0xc0, 0xfa, 0x5b, 0x19, 0xa8, 0x7e, 0x2b,
	0x5b, 0x76, 0xbb, 0xe7, 0xf2, 0x2a, 0x3d, 0x82, 0x1c, 0x16, 0x94, 0xb5, 0x30, 0xde, 0xe4, 0x50,
	0x04, 0x89, 0xb4, 0xc7, 0x82, 0x58, 0x83, 0x12, 0xfe, 0x5d, 0xc3, 0xe1, 0x4e, 0x73, 0xa8, 0x28,
	0x62, 0xc4, 0x4b, 0x74, 0xba, 0x06, 0x58, 0x7f, 0x36, 0x07, 0x45, 0x85, 0x30, 0xd1, 0x4d, 0xfc,
	0x3e, 0x94, 0x10, 0x77, 0x37, 0x71, 0xa8, 0xac, 0xce, 0x9f, 0x1c, 0xd7, 0xcb, 0xb8, 0x36, 0x7c,
	0x7c, 0x92, 0x6a, 0xf1, 0x11, 0x94, 0xf1, 0xdb, 0xf4, 0x1b, 0xb3, 0xbb, 0x16, 0x71, 0xd9, 0x79,
	0x9c, 0x22, 0x88, 0x0f, 0xa1, 0xbc, 0xed, 0x84, 0x31, 0xaf, 0x63, 0x8e, 0xee, 0x8e, 0xd4, 0x72,
	0xa0, 0x81, 0x76, 0x5a, 0x2f, 0xde, 0x86, 0xec, 0xae, 0xd3, 0x21, 0x4f, 0x67, 0x96, 0x6d, 0x83,
	0xd8, 0xe9, 0xd8, 0x08, 0x43, 0xb3, 0x62, 0xe5, 0xa0, 0xb1, 0x4e, 0x6e, 0x17, 0x75, 0xfd, 0x74,
	0x0e, 0x3c, 0xd7, 0x26, 0xa8, 0xb8, 0x0f, 0xa5, 0xed, 0xd0, 0xf3, 0x43, 0x2f, 0x3e, 0x22, 0x2e,
	0xc8, 0xaf, 0x56, 0x4f, 0x8e, 0xeb, 0x09, 0xcc, 0x4e, 0xbe, 0x50, 0xa2, 0x3c, 0x0f, 0x5d, 0xc5,
	0x13, 0x79, 0x96, 0x28, 0x3e, 0x02, 0x6c, 0x86, 0x5b, 0xff, 0x33, 0x03, 0x15, 0x63, 0x39, 0xa7,
	0x39, 0xd6, 0x8d, 0xd5, 0xa2, 0x01, 0xd1, 0x42, 0xe5, 0xb4, 0xe0, 0x22, 0x91, 0x61, 0x3a, 0xd6,
	0x95, 0x1d, 0xc5, 0xa2, 0xe4, 0x06, 0xe4, 0xd6, 0xf1, 0x48, 0xe4, 0x52, 0x33, 0x09, 0x8f, 0x85,
	0x4d, 0x50, 0x24, 0x5f, 0x4b, 0x4f, 0x01, 0x93, 0xd3, 0x41, 0xb0, 0x19, 0x2e, 0xee, 0x40, 0xc1,
	0xa6, 0x03, 0xc0, 0xc7, 0x81, 0x35, 0x8b, 0x3a, 0x21, 0xb6, 0xaa, 0x12, 0xef, 0x42, 0xd1, 0xe6,
	0xb3, 0xa0, 0xac, 0x35, 0x5a, 0x14, 0x7d, 0x5c, 0x6c, 0x5d, 0x69, 0xfd, 0xcd, 0x0c, 0x5c, 0x5e,
	0x1b, 0x44, 0xb1, 0xdf, 0x5b, 0xf3, 0xfb, 0x7b, 0x9e, 0x8e, 0x2e, 0x88, 0x47, 0x30, 0xb7, 0xbb,
	0xcd, 0xb6, 0xf3, 0xea, 0x7b, 0x38, 0xf5, 0x38, 0xf8, 0xe1, 0xb8, 0x7e, 0x93, 0x5d, 0x08, 0x71,
	0x30, 0x3e, 0x7e, 0x31, 0x17, 0x07, 0xe2, 0x2b, 0xc8, 0x3e, 0x4f, 0x0c, 0xd8, 0xf7, 0x71, 0x1f,
	0x7d, 0xcf, 0x4d, 0xa3, 0x26, 0xfe, 0xa4, 0xd8, 0x07, 0xa2, 0x59, 0xbf, 0x9d, 0x83, 0x4b, 0xc3,
	0xa3, 0xc1, 0x23, 0x74, 0xcd, 0x18, 0x4b, 0x81, 0xc7, 0x62, 0xcf, 0xed, 0x6e, 0x23, 0xcb, 0xa4,
	0x5d, 0x15, 0x55, 0x57, 0x36, 0xc2, 0xc4, 0x3d, 0x28, 0xae, 0xf9, 0xfd, 0x18, 0xaf, 0x3b, 0xbc,
	0x0b, 0xac, 0x7e, 0x19, 0x64, 0xeb, 0x3a, 0x6c, 0xe1, 0x85, 0xbd, 0xa9, 0x36, 0x42, 0x19, 0xa4,
	0x5d, 0x1b, 0x61, 0x62, 0x05, 0x16, 0x9f, 0x7a, 0x9d, 0xfd, 0xae, 0xd7, 0xd9, 0x8f, 0x75, 0x53,
	0xbc, 0x23, 0x57, 0x4f, 0x8e, 0xeb, 0x97, 0xf6, 0x75, 0x5d, 0x53, 0x37, 0x7a, 0x0a, 0x1d, 0x77,
	0xb2, 0x41, 0xf6, 0x72, 0xe1, 0x94, 0xbd, 0x4c, 0x70, 0x3c, 0x79, 0xf4, 0xb1, 0xea, 0x75, 0xd4,
	0x2e, 0xd1, 0xf9, 0x20, 0x9c, 0x66, 0xcb, 0xeb, 0xd8, 0x49, 0x35, 0xb6, 0xb5, 0xb3, 0x9b, 0x7a,
	0xde, 0x4d, 0xdb, 0x8f, 0xe0, 0x88, 0xb0, 0x41, 0x08, 0xe5, 0x14, 0x41, 0x32, 0xc2, 0x86, 0x46,
	0xd8, 0x89, 0x9d, 0x58, 0x92, 0xa0, 0x4b, 0x5a, 0x70, 0x62, 0x6c, 0x01, 0xff, 0x58, 0x1b, 0x50,
	0xdd, 0x79, 0xe5, 0xf5, 0x37, 0x5e, 0xc7, 0x5c, 0xfe, 0x1c, 0x72, 0x1b, 0xfd, 0x41, 0x4f, 0x54,
	0xa0, 0xf8, 0xfc, 0xf1, 0xe3, 0xcd, 0xc6, 0xb3, 0x8d, 0xc5, 0x0b, 0x02, 0xa0, 0xf0, 0xfc, 0x19,
	0x7d, 0x67, 0xc4, 0x15, 0x28, 0xae, 0x6f, 0x6c, 0x6e, 0xec, 0x6e, 0xac, 0x2f, 0xfe, 0x2f, 0xfd,
	0x5f, 0xc6, 0xfa, 0xfb, 0x05, 0x28, 0xaa, 0x76, 0xc6, 0x1f, 0x20, 0xcf, 0x15, 0x77, 0xa1, 0x80,
	0x28, 0x8d, 0x75, 0xb5, 0x79, 0xb4, 0x3b, 0xd1, 0x2b, 0xaf, 0x8f, 0x86, 0xa6, 0xfe, 0x10, 0x1f,
	0x40, 0x09, 0xb1, 0x28, 0x86, 0x95, 0x4d, 0x97, 0x87, 0xaa, 0x29, 0x90, 0x95, 0x7e, 0xa2, 0xac,
	0x59, 0x89, 0xe3, 0xd0, 0x6b, 0x0d, 0x62, 0xbe, 0x01, 0x29, 0x59, 0xe3, 0x68, 0xa0, 0x9d, 0x7e,
	0x8a, 0x27, 0x7a, 0x29, 0x70, 0x43, 0x17, 0x96, 0xdf, 0x1d, 0x2b, 0x57, 0xcd, 0xb5, 0x78, 0x80,
	0x0b, 0x31, 0xb4, 0x64, 0xf4, 0x47, 0xfc, 0x14, 0xf2, 0x6b, 0x64, 0x56, 0x73, 0x80, 0xeb, 0x3e,
	0x9d, 0x55, 0x04, 0x9c, 0x19, 0x18, 0x21, 0x2c, 0xa4, 0xdf, 0x32, 0xc2, 0x30, 0x44, 0xdf, 0x9b,
	0x89, 0xbe, 0xa7, 0xe9, 0x77, 0x8c, 0x78, 0xcc, 0xfd, 0x84, 0x2b, 0x66, 0x8c, 0xe7, 0xfc, 0x14,
	0xf2, 0x1b, 0x71, 0xca, 0x34, 0xf7, 0x13, 0xa6, 0x99, 0x31, 0xb0, 0xf3, 0x04, 0x2e, 0x6d, 0xfa,
	0x6d, 0x07, 0x05, 0xf8, 0xb6, 0xdf, 0xf5, 0xda, 0x47, 0x4f, 0x1a, 0xeb, 0x8a, 0xbf, 0xc8, 0xa4,
	0xea, 0xaa, 0xca, 0x66, 0x40, 0xb5, 0xcd, 0x8e, 0xe7, 0xda, 0xe3, 0x80, 0xe2, 0x2b, 0x98, 0x7f,
	0x11, 0xc9, 0x70, 0xa7, 0xed, 0x07, 0x2c, 0xda, 0x2a, 0xa9, 0x41, 0x3c, 0x88, 0x64, 0xd8, 0x8c,
	0xb0, 0x86, 0x45, 0xdc, 0x28, 0x40, 0xfc, 0x14, 0x16, 0x12, 0x62, 0x16, 0x79, 0x7c, 0x19, 0xa4,
	0x0b, 0x82, 0x81, 0xcc, 0xa2, 0xef, 0x14, 0x44, 0x7c, 0x0e, 0x95, 0xf5, 0x50, 0x46, 0xd1, 0x8b,
	0x80, 0xba, 0xe6, 0xab, 0x22, 0x99, 0x91, 0x2e, 0x82, 0x9b, 0x83, 0x80, 0x3b, 0x1e, 0x2e, 0x8a,
	0x1f, 0x43, 0x55, 0x91, 0x71, 0xa7, 0xe4, 0x3a, 0x59, 0x15, 0x27, 0xc7, 0xf5, 0x85, 0x04, 0x91,
	0xbb, 0x1c, 0x29, 0x5b, 0x0f, 0x61, 0x01, 0xb9, 0x8b, 0x82, 0x20, 0x7c, 0xd6, 0xea, 0xe9, 0x59,
	0xd3, 0x47, 0x6a, 0xe8, 0xac, 0xa1, 0x64, 0x2c, 0x27, 0x34, 0x13, 0xcf, 0xd5, 0x75, 0xc8, 0xee,
	0x24, 0x87, 0x8a, 0xfd, 0xb4, 0x78, 0xa2, 0xe8, 0xdf, 0x91, 0x60, 0x6b, 0x76, 0x7c, 0xb0, 0xd5,
	0x88, 0x41, 0x25, 0xd1, 0xdb, 0xdc, 0xa9, 0xe8, 0x2d, 0x5f, 0x90, 0x1b, 0xc3, 0xc7, 0xe8, 0xfe,
	0xc4, 0x63, 0x94, 0x4e, 0x74, 0xd2, 0x41, 0xd2, 0x71, 0xe4, 0x42, 0xaa, 0x51, 0x39, 0x8e, 0x4c,
	0xbe, 0x8d, 0xff, 0x03, 0xc7, 0x64, 0x6d, 0xf4, 0x98, 0x9c, 0xe3, 0x98, 0x5a, 0x9b, 0x30, 0x8f,
	0xd3, 0x40, 0x9d, 0xc4, 0x1a, 0xe9, 0x2b, 0xc8, 0x6d, 0xa6, 0xd1, 0xb5, 0x9b, 0x13, 0x27, 0xde,
	0xe8, 0xef, 0xf9, 0x3c, 0x9b, 0xae, 0x17, 0xc5, 0x2a, 0xca, 0xf6, 0x27, 0x19, 0x96, 0x6b, 0x14,
	0x64, 0xfb, 0x12, 0x72, 0x8d, 0x34, 0xc8, 0x76, 0x63, 0x9a, 0x24, 0xe2, 0x86, 0x3c, 0x0a, 0xd7,
	0x51, 0xbc, 0xed, 0x67, 0x90, 0xdf, 0x34, 0xe2, 0x6d, 0xb7, 0xa6, 0xaf, 0x3f, 0xaf, 0x7a, 0xd7,
	0x0c, 0xbc, 0xfd, 0xdb, 0x0c, 0x5c, 0xf9, 0x56, 0xb6, 0xb6, 0x29, 0x7f, 0xa4, 0xd1, 0xf6, 0x93,
	0xa0, 0x5b, 0x1d, 0xb2, 0x2b, 0x89, 0x93, 0x8a, 0x85, 0x2e, 0x99, 0xb7, 0xc8, 0x4c, 0x58, 0x83,
	0x36, 0xc8, 0xae, 0xd3, 0x69, 0xac, 0x73, 0x30, 0x47, 0x09, 0xf0, 0xd8, 0xe9, 0x34, 0x3d, 0x37,
	0xb2, 0x55, 0x15, 0x21, 0x1d, 0x05, 0xb2, 0xb1, 0xae, 0xfc, 0x55, 0x8c, 0x74, 0x14, 0x90, 0x3b,
	0x41, 0x55, 0xa1, 0x0e, 0xdc, 0xa1, 0xb6, 0x1b, 0xeb, 0xa6, 0xdc, 0x4e, 0xfb, 0x4b, 0xaa, 0x51,
	0x5b, 0x6f, 0x69, 0x8f, 0x3f, 0x6b, 0xeb, 0x1e, 0x8e, 0x67, 0xcb, 0x73, 0xad, 0x1d, 0x10, 0x23,
	0x13, 0xc1, 0x6d, 0xfa, 0x1a, 0x72, 0x58, 0x50, 0x8b, 0x3b, 0x3e, 0x08, 0x9a, 0xd2, 0xa8, 0xf5,
	0x45, 0x6a, 0x22, 0xb3, 0xfe, 0x5d, 0x06, 0x20, 0xad, 0x46, 0x1e, 0x7d, 0x61, 0x6f, 0x3e, 0xe4,
	0x88, 0x30, 0x23, 0x0f, 0xc2, 0xee, 0x43, 0x9b, 0xa0, 0x78, 0x5a, 0x9e, 0x3a, 0xd1, 0xfe, 0x43,
	0x95, 0x6d, 0x41, 0x8b, 0xbd, 0x8f, 0x00, 0x9b, 0xe1, 0x8a, 0x7c, 0x59, 0x1d, 0x3c, 0x4d, 0xbe,
	0x4c, 0xe4, 0xcb, 0xe2, 0x16, 0x93, 0x2f, 0x9b, 0x46, 0x21, 0x6d, 0x35, 0x83, 0x53, 0x16, 0xce,
	0x9f, 0x97, 0x85, 0x89, 0xcc, 0xea, 0xc1, 0xc2, 0x56, 0xbf, 0x63, 0xee, 0xf1, 0xe7, 0x66, 0x44,
	0x70, 0xf5, 0x1d, 0xb4, 0xee, 0x4e, 0xdb, 0x65, 0x1f, 0xb9, 0xde, 0x81, 0xfc, 0xa8, 0x13, 0x7f,
	0xfd, 0xa9, 0xa5, 0x62, 0xaf, 0x66, 0x80, 0x46, 0xfb, 0xd4, 0x95, 0xaf, 0x3c, 0x9b, 0xf8, 0xca,
	0xad, 0x3f, 0xcd, 0x40, 0x35, 0xe9, 0x0f, 0xb7, 0xe2, 0x67, 0x49, 0x30, 0x79, 0x72, 0x26, 0x83,
	0x49, 0x40, 0x51, 0x44, 0x76, 0xfd, 0x12, 0xe1, 0xd2, 0x0b, 0x28, 0x27, 0xa0, 0x37, 0x0d, 0x91,
	0xea, 0x0e, 0x0c, 0xd7, 0xee, 0x3f, 0x9f, 0x83, 0xa2, 0x02, 0x8f, 0x0b, 0x83, 0x20, 0x37, 0xe8,
	0x30, 0x08, 0x7e, 0xe3, 0xf5, 0xaf, 0xd3, 0xf5, 0x5b, 0x4e, 0xb7, 0x19, 0x4a, 0x9e, 0x71, 0xde,
	0x2e, 0x33, 0xc4, 0x96, 0xae, 0x78, 0x07, 0xaa, 0x72, 0x6f, 0x4f, 0xb6, 0xe3, 0x66, 0x27, 0xf4,
	0x07, 0x81, 0x0a, 0xd0, 0x55, 0x18, 0xf6, 0x04, 0x41, 0xd8, 0x82, 0x42, 0x19, 0x84, 0x2a, 0xfe,
	0x6c, 0x97, 0x19, 0xf2, 0x22, 0xec, 0x8a, 0x47, 0x89, 0x1f, 0xb7, 0x30, 0x25, 0x74, 0x8f, 0xe3,
	0xe5, 0xb0, 0x64, 0xe2, 0xe1, 0xfd, 0xbf, 0x9a, 0xd2, 0x61, 0x2d, 0x03, 0xa4, 0x63, 0x18, 0x1b,
	0x68, 0x39, 0x95, 0xf4, 0x60, 0xfd, 0xc9, 0x1c, 0x5c, 0xde, 0xf2, 0xfa, 0x72, 0x47, 0xb6, 0x59,
	0xdb, 0xbc, 0x49, 0x98, 0x66, 0x98, 0xd1, 0x90, 0xb6, 0xeb, 0xf4, 0x3b, 0xca, 0x93, 0x40, 0xdf,
	0x66, 0x40, 0x26, 0x3f, 0x2e, 0x20, 0x53, 0x48, 0x02, 0x32, 0x75, 0xa8, 0x78, 0xa8, 0x97, 0xbb,
	0xbe, 0x83, 0xf7, 0xc2, 0x22, 0xc5, 0x4c, 0xc0, 0x8b, 0x5e, 0x28, 0x88, 0xb8, 0x0d, 0x55, 0x2f,
	0x6a, 0x76, 0xbd, 0x03, 0xd9, 0xdc, 0xf7, 0x23, 0x4e, 0x39, 0x22, 0x8c, 0x4d, 0xef, 0x40, 0x3e,
	0xf5, 0xa3, 0x18, 0xb7, 0x73, 0xcf, 0xe9, 0x47, 0xcd, 0xb6, 0x3f, 0xe8, 0xc7, 0x2a, 0xc5, 0xa5,
	0x8c, 0x90, 0x35, 0x04, 0xa4, 0x21, 0x1f, 0x30, 0x42, 0x3e, 0xd6, 0x16, 0x5c, 0x1a, 0x5e, 0x08,
	0x3c, 0x22, 0x3f, 0x86, 0x52, 0xa4, 0x00, 0x53, 0xbd, 0x05, 0x8a, 0xca, 0x4e, 0xb0, 0xad, 0x7f,
	0x94, 0x81, 0xcb, 0x4f, 0xfd, 0xde, 0xff, 0x43, 0x0b, 0x9b, 0x4c, 0xbb, 0x38, 0x32, 0xed, 0xe1,
	0x61, 0xfe, 0x6e, 0xd3, 0xfe, 0xa7, 0x39, 0x28, 0x2a, 0xe8, 0x8c, 0xce, 0xa8, 0x2b, 0x78, 0x46,
	0x8e, 0xd4, 0xd5, 0x3c, 0x6f, 0x73, 0x01, 0xb9, 0xa0, 0x35, 0x88, 0x63, 0x9f, 0xaf, 0x12, 0x6a,
	0xc6, 0xc0, 0x20, 0x4a, 0x95, 0xbb, 0x09, 0xaa, 0x64, 0x1e, 0x59, 0x86, 0xe0, 0x91, 0x4d, 0xe9,
	0x49, 0x5c, 0x14, 0x4c, 0x7a, 0x12, 0x2c, 0xef, 0x40, 0x55, 0x21, 0x70, 0xef, 0x45, 0x96, 0x0a,
	0x0c, 0xdb, 0xd1, 0x63, 0xa0, 0x21, 0x36, 0xdb, 0x7e, 0xd7, 0xd7, 0x5e, 0x2b, 0x20, 0xd0, 0x1a,
	0x42, 0xc4, 0x12, 0x94, 0xa2, 0x41, 0x8b, 0xe7, 0xc4, 0x61, 0xc2, 0xa4, 0x8c, 0xed, 0xeb, 0x6f,
	0x1a, 0x21, 0xf3, 0x5a, 0x45, 0xc3, 0x70, 0x8c, 0xf7, 0x60, 0x21, 0x41, 0xe1, 0x2e, 0x38, 0x6e,
	0x38, 0xaf, 0xa1, 0xdc, 0xcb, 0x2d, 0x80, 0x96, 0xd3, 0x7e, 0x85, 0xc2, 0xab, 0xef, 0x2a, 0xef,
	0x96, 0x01, 0x11, 0xef, 0xc3, 0x62, 0x5a, 0x52, 0x0d, 0x71, 0x3c, 0xf1, 0x62, 0x0a, 0xe7, 0xa6,
	0xbe, 0x80, 0x3c, 0x67, 0xcb, 0x2c, 0x4c, 0x71, 0x5e, 0xa9, 0xed, 0x6b, 0xc4, 0xb2, 0x67, 0x33,
	0x3a, 0x2e, 0x36, 0xe5, 0xcf, 0x36, 0xa3, 0x7d, 0xff, 0x90, 0xe2, 0x2e, 0x79, 0xbb, 0x4c, 0x90,
	0x9d, 0x7d, 0xff, 0x50, 0x5c, 0x85, 0x82, 0x17, 0x35, 0x7b, 0xfd, 0x0e, 0x85, 0x5c, 0xf2, 0x76,
	0xde, 0x8b, 0xb6, 0xfa, 0x1d, 0x61, 0xc1, 0xbc, 0x1f, 0xf0, 0xf2, 0xb2, 0xab, 0xf0, 0x12, 0xaf,
	0xb1, 0x1f, 0xd0, 0xfa, 0xa2, 0xb1, 0x61, 0xfd, 0x93, 0x02, 0x54, 0x8c, 0x0e, 0x67, 0xe4, 0x99,
	0x45, 0xc8, 0x0e, 0x42, 0x4f, 0xf9, 0x2f, 0xf1, 0x33, 0xd1, 0x0b, 0xb9, 0x61, 0xbd, 0xd0, 0x97,
	0xd2, 0x6d, 0x76, 0xfd, 0x8e, 0xd7, 0x57, 0x09, 0x5a, 0x65, 0x84, 0x6c, 0x22, 0x80, 0x7d, 0x98,
	0x6e, 0xd3, 0xf5, 0xe3, 0xd4, 0x87, 0xe9, 0xae, 0xfb, 0xb1, 0xb8, 0x0b, 0x0b, 0xa9, 0x3e, 0xa1,
	0x7a, 0x66, 0x8e, 0x6a, 0xa2, 0x53, 0x10, 0xab, 0x06, 0x45, 0xd7, 0x8b, 0x82, 0xae, 0x73, 0xc4,
	0xbe, 0x2b, 0x5b, 0x17, 0xc5, 0x23, 0x28, 0xf5, 0xfa, 0x1d, 0x66, 0xbc, 0xf2, 0x0c, 0xaa, 0xaf,
	0xd8, 0x53, 0xca, 0xee, 0x1e, 0x5c, 0x54, 0x3d, 0x36, 0xf7, 0xfc, 0xb0, 0xd9, 0x97, 0x87, 0xc4,
	0x36, 0x25, 0xbb, 0xca, 0x23, 0x7b, 0xec, 0x87, 0xcf, 0xe4, 0xa1, 0x78, 0x1b, 0x4a, 0x7e, 0xa0,
	0x7c, 0xe5, 0x2a, 0xc5, 0xc1, 0x0f, 0xd8, 0x8d, 0x75, 0x1b, 0xaa, 0xb8, 0xe4, 0x89, 0x2b, 0x5d,
	0x71, 0x8b, 0x1f, 0xec, 0x68, 0x9f, 0x39, 0x6f, 0x0a, 0x33, 0x1d, 0x8d, 0x90, 0x59, 0xa5, 0xa2,
	0x5a, 0xa0, 0x71, 0x70, 0x2b, 0x5d, 0xaf, 0xff, 0xaa, 0x19, 0xcb, 0xd7, 0x3a, 0xfb, 0x01, 0xfc,
	0x60, 0xd3, 0xeb, 0xbf, 0xda, 0x95, 0xaf, 0x63, 0x13, 0x83, 0x1a, 0xb9, 0x68, 0x62, 0x50, 0x1b,
	0xdf, 0x18, 0x6d, 0xe0, 0xde, 0x2f, 0xd2, 0x7d, 0xe4, 0x93, 0xb3, 0x38, 0xee, 0x39, 0xf7, 0x71,
	0x14, 0xf0, 0xb5, 0x24, 0xe9, 0x14, 0x2f, 0x77, 0x57, 0xa1, 0x10, 0x3b, 0x2d, 0x9d, 0x3b, 0x81,
	0xcc, 0xe0, 0xb4, 0x38, 0x97, 0xc4, 0xe9, 0x7b, 0x3d, 0xbc, 0xf4, 0x08, 0x15, 0x29, 0xe7, 0xa2,
	0xb8, 0x03, 0xf3, 0x5d, 0xbf, 0xe3, 0x37, 0x23, 0xd9, 0x95, 0xed, 0x58, 0xba, 0x14, 0xc0, 0x2b,
	0xdb, 0x55, 0x04, 0xee, 0x28, 0x98, 0xb8, 0x05, 0x15, 0xbd, 0xe8, 0x78, 0x4e, 0xaf, 0x68, 0xef,
	0x31, 0x2e, 0x38, 0x9e, 0xd2, 0xbb, 0xb0, 0x90, 0x2c, 0x18, 0x1f, 0xae, 0xab, 0xdc, 0x8a, 0x5a,
	0x31, 0x3e, 0x59, 0x0f, 0xe0, 0xb2, 0x1f, 0x34, 0x4f, 0x9d, 0xc3, 0x6b, 0x84, 0x7a, 0xc9, 0x0f,
	0x56, 0x47, 0x4e, 0xe2, 0xe7, 0xf0, 0x96, 0x5e, 0x9e, 0xb6, 0xdf, 0x8f, 0x1d, 0xaf, 0x2f, 0x43,
	0x45, 0xf3, 0x16, 0xd1, 0x5c, 0xe1, 0x89, 0xaf, 0xe9, 0x4a, 0x22, 0xb3, 0xfe, 0x38, 0x03, 0x57,
	0xc7, 0xae, 0x96, 0xd5, 0x55, 0xb7, 0x55, 0x80, 0xc2, 0xea, 0x8b, 0xdd, 0xdd, 0xe7, 0xcf, 0x16,
	0x2f, 0x08, 0x01, 0x0b, 0x9b, 0x8d, 0x67, 0xbf, 0xdf, 0xfc, 0xb6, 0xb1, 0xfb, 0xb4, 0xb9, 0xbb,
	0xf1, 0xcb, 0xdd, 0xc5, 0x8c, 0xb8, 0x0a, 0x97, 0x12, 0xd8, 0xf3, 0x17, 0xbb, 0x0c, 0x9e, 0x13,
	0x97, 0x60, 0x7e, 0xbd, 0xb1, 0xb2, 0xf9, 0xfc, 0x49, 0xf3, 0xf9, 0xf6, 0xc6, 0xb3, 0x0d, 0x7b,
	0x31, 0x2b, 0x16, 0x00, 0x9e, 0xad, 0x34, 0xb7, 0x57, 0x9e, 0x6c, 0x34, 0x1b, 0xeb, 0x8b, 0x39,
	0x6c, 0xf9, 0xd9, 0xf3, 0xdd, 0xc6, 0xda, 0xc6, 0x62, 0xde, 0xfa, 0xa3, 0x0c, 0x2c, 0xa1, 0xe9,
	0x17, 0xf6, 0xc8, 0x6d, 0x60, 0xcb, 0x8e, 0xe7, 0xf7, 0xd7, 0x9c, 0x50, 0x39, 0xd8, 0x5d, 0xa8,
	0x79, 0x69, 0x6d, 0x33, 0xa4, 0xea, 0x66, 0xdb, 0x09, 0x5d, 0xad, 0x4f, 0x3e, 0x18, 0x6f, 0x42,
	0x8d, 0x6d, 0xf2, 0x9a, 0x37, 0x0e, 0x1c, 0x59, 0xff, 0x38, 0x03, 0x57, 0xc7, 0x52, 0x88, 0xeb,
	0x90, 0xba, 0xca, 0x95, 0xa6, 0x2d, 0xb5, 0xb5, 0xc3, 0x5c, 0xe5, 0xfc, 0xce, 0xa5, 0x39, 0xbf,
	0x77, 0x60, 0x9e, 0xd0, 0x93, 0x00, 0x03, 0xab, 0xa2, 0x2a, 0x02, 0xb7, 0x75, 0x90, 0xa1, 0x06,
	0x45, 0x2f, 0x5a, 0x4b, 0x42, 0x24, 0x79, 0x5b, 0x17, 0x51, 0xd4, 0x6b, 0xca, 0xa6, 0xe7, 0xbe,
	0x56, 0x92, 0xa6, 0xa2, 0x61, 0x0d, 0xf7, 0xb5, 0xb5, 0x04, 0xb5, 0x27, 0x32, 0xde, 0x79, 0xf8,
	0xe9, 0xb6, 0x1f, 0xe8, 0x74, 0xba, 0x15, 0xbc, 0x97, 0xc9, 0xef, 0xac, 0x4f, 0x61, 0x69, 0x42,
	0x1d, 0x2e, 0xa5, 0x80, 0x9c, 0x63, 0x24, 0x09, 0xe2, 0xb7, 0xb5, 0x03, 0x8b, 0xb6, 0x5a, 0xbd,
	0x95, 0x6e, 0x57, 0x1b, 0xf3, 0x65, 0xbd, 0xa2, 0x7a, 0x8d, 0xdf, 0x19, 0xbb, 0xc6, 0x9a, 0x92,
	0x72, 0x4c, 0x53, 0x1a, 0xeb, 0xaf, 0xe5, 0xa0, 0x6a, 0xd6, 0x19, 0xa2, 0x38, 0x4f, 0xa2, 0x78,
	0x09, 0x4a, 0x68, 0xad, 0xe0, 0x7a, 0x2b, 0x43, 0x25, 0x29, 0xe3, 0x28, 0xfb, 0x89, 0x4b, 0xd0,
	0xa6, 0x6f, 0x71, 0x0d, 0x0a, 0x9c, 0x24, 0xa1, 0xd6, 0x4b, 0x95, 0xc8, 0x62, 0x41, 0x3b, 0x4c,
	0xb9, 0xd3, 0xf3, 0xb6, 0x2e, 0x0e, 0xc5, 0x78, 0x0a, 0x23, 0x31, 0x1e, 0xa1, 0xc2, 0xf3, 0x6c,
	0xbc, 0x70, 0x5c, 0x5e, 0x40, 0x2e, 0xf2, 0xbe, 0x97, 0x4a, 0x33, 0xd3, 0x37, 0xb6, 0x1e, 0x84,
	0xf2, 0xc0, 0x93, 0x87, 0x3a, 0x73, 0x47, 0x15, 0xc5, 0x6d, 0xa8, 0xb8, 0x32, 0x6a, 0x87, 0x5e,
	0x60, 0xa4, 0x36, 0x9b, 0x20, 0x6c, 0x8f, 0xa2, 0xc3, 0x2c, 0x54, 0xe9, 0x5b, 0xac, 0x40, 0xc5,
	0x89, 0x22, 0xaf, 0xd3, 0xef, 0xc9, 0x7e, 0x1c, 0x51, 0x2e, 0xf3, 0xa4, 0x0b, 0xc0, 0x4a, 0x82,
	0x67, 0x9b, 0x34, 0x68, 0xce, 0xd3, 0xb5, 0x90, 0x93, 0x9c, 0x67, 0x30, 0xe7, 0xdb, 0xfa, 0x16,
	0x40, 0xae, 0x12, 0x12, 0xbf, 0xb3, 0x90, 0xb1, 0x63, 0xe5, 0x0a, 0xe4, 0xbb, 0xf2, 0x40, 0x76,
	0x49, 0x26, 0x67, 0x6d, 0x2e, 0x24, 0xe9, 0x63, 0xac, 0xa0, 0x39, 0x77, 0x21, 0xc9, 0x4b, 0x62,
	0xbd, 0x4c, 0x41, 0x78, 0xeb, 0x5f, 0x15, 0x00, 0xd2, 0x89, 0x9c, 0x62, 0x02, 0xbd, 0xd1, 0x73,
	0xc6, 0x46, 0xd7, 0xa1, 0x82, 0x32, 0x2c, 0x74, 0xda, 0x94, 0x7a, 0x90, 0x66, 0x4e, 0x13, 0xa8,
	0xe1, 0x22, 0x82, 0x99, 0xcc, 0xc0, 0xec, 0x60, 0xe6, 0x2e, 0x50, 0x32, 0x7c, 0x5b, 0x59, 0x71,
	0xf8, 0x89, 0xcc, 0xd3, 0xf5, 0x62, 0x04, 0xb2, 0xe9, 0xa6, 0x4a, 0xac, 0xf9, 0x75, 0xd2, 0x20,
	0x7e, 0x26, 0x8c, 0x51, 0x32, 0x18, 0xe3, 0x1a, 0x14, 0x0e, 0xa5, 0xd7, 0xd9, 0x8f, 0x55, 0x50,
	0x51, 0x95, 0x10, 0xee, 0x74, 0x64, 0xbf, 0x7d, 0xa4, 0x76, 0x5f, 0x95, 0x70, 0xcd, 0x82, 0x50,
	0x27, 0x6e, 0xcd, 0xd9, 0x5c, 0x60, 0xcb, 0x14, 0xd5, 0x4a, 0x55, 0x5b, 0xa6, 0xa8, 0x54, 0xae,
	0x40, 0xde, 0x89, 0xb5, 0x4f, 0x32, 0x6f, 0x73, 0x01, 0x59, 0x77, 0x10, 0xc9, 0x90, 0xd6, 0x86,
	0xd5, 0x65, 0x52, 0x16, 0xef, 0xc1, 0x45, 0x7e, 0x0e, 0xd4, 0x6c, 0x3b, 0xb1, 0xec, 0xf8, 0xe1,
	0x91, 0x32, 0xa1, 0x16, 0x18, 0xbc, 0xa6, 0xa0, 0xe9, 0x75, 0x71, 0xf1, 0xcd, 0xae, 0x8b, 0x97,
	0xce, 0xf5, 0x02, 0x20, 0x61, 0x4b, 0xf1, 0x66, 0x6c, 0x79, 0xf9, 0x5c, 0x6c, 0x59, 0x87, 0x8a,
	0xd3, 0x8e, 0xbd, 0x03, 0x2f, 0x3e, 0x42, 0x1e, 0xa0, 0x74, 0x19, 0x1b, 0x34, 0xa8, 0xe1, 0x8a,
	0xc7, 0xb0, 0x90, 0x20, 0xf0, 0x2a, 0x5c, 0x9d, 0xad, 0x83, 0x79, 0x4d, 0x46, 0x6e, 0xf7, 0xa1,
	0x76, 0xa4, 0x91, 0x5f, 0x33, 0x7b, 0x3b, 0xe4, 0x7e, 0xc7, 0x1d, 0x4d, 0xb6, 0xeb, 0x2d, 0xad,
	0x42, 0xd4, 0x46, 0x5d, 0x37, 0xd3, 0x15, 0x6a, 0x89, 0xe5, 0x4f, 0xf6, 0x80, 0xf5, 0x2d, 0x88,
	0xf4, 0x00, 0x25, 0xf2, 0x79, 0x44, 0x8e, 0x64, 0xce, 0x2f, 0x47, 0xac, 0xe7, 0xb0, 0xb0, 0x2e,
	0xf7, 0x54, 0x1a, 0x9b, 0x72, 0xa6, 0x95, 0x5d, 0x0d, 0x99, 0xea, 0x51, 0x33, 0x9a, 0x4c, 0x29,
	0xac, 0xf7, 0xe0, 0xa2, 0x96, 0xf8, 0xfa, 0x7a, 0x7a, 0x05, 0x28, 0x43, 0x77, 0x5d, 0x3f, 0xde,
	0xa2, 0x82, 0xf5, 0x0c, 0xe6, 0x53, 0x44, 0xee, 0xb8, 0xa4, 0xbb, 0x51, 0xfd, 0xce, 0xa0, 0x6c,
	0x12, 0x12, 0xeb, 0x83, 0x54, 0x81, 0x25, 0x17, 0xe3, 0x34, 0x95, 0x13, 0xd7, 0x26, 0xaf, 0x53,
	0x39, 0xad, 0x7f, 0x9d, 0x81, 0x05, 0x03, 0x19, 0x7b, 0xdf, 0x3e, 0xad, 0xeb, 0x96, 0xa7, 0x76,
	0xaf, 0xb2, 0x17, 0x93, 0x22, 0x3b, 0xb1, 0xd2, 0x46, 0x96, 0x9a, 0x46, 0x1f, 0x93, 0x32, 0x15,
	0x1f, 0x0d, 0xbb, 0xb3, 0x66, 0x98, 0xb0, 0xe1, 0xd3, 0xfa, 0xeb, 0x19, 0x58, 0xdc, 0x76, 0xa2,
	0x58, 0x86, 0x2b, 0xdb, 0xdb, 0x7a, 0xca, 0xa6, 0x46, 0xcd, 0x8c, 0x68, 0x54, 0x14, 0x55, 0x46,
	0xfc, 0xdf, 0x56, 0x25, 0x33, 0x2b, 0xb6, 0xcc, 0x59, 0xb1, 0xd7, 0xa0, 0x10, 0xb3, 0x4b, 0x97,
	0x2f, 0x3f, 0xaa, 0x94, 0xde, 0xf7, 0xf3, 0xe6, 0x7d, 0xff, 0xef, 0x66, 0x60, 0xc1, 0x18, 0x08,
	0x2e, 0xa7, 0x6a, 0x32, 0x33, 0x94, 0x68, 0xdb, 0x4e, 0x4d, 0xa4, 0x36, 0x2b, 0x7f, 0x77, 0x10,
	0x3a, 0x89, 0x75, 0x94, 0xb5, 0x93, 0x72, 0xa2, 0x5b, 0x72, 0x86, 0x6e, 0xc1, 0x1b, 0x63, 0xb7,
	0xeb, 0x1f, 0x36, 0x7f, 0x3d, 0xe8, 0x05, 0xfa, 0xee, 0x45, 0x90, 0x5f, 0x0c, 0x7a, 0x81, 0x16,
	0xe3, 0x85, 0x44, 0x8c, 0x5b, 0x7f, 0x9e, 0x81, 0x85, 0x46, 0xdf, 0x95, 0xaf, 0x53, 0xff, 0xe4,
	0x36, 0x94, 0x3d, 0x0d, 0x99, 0xba, 0xcd, 0xc3, 0x74, 0x69, 0x51, 0x6d, 0x73, 0xd2, 0xc8, 0xd2,
	0x1f, 0x1a, 0x7d, 0x4c, 0x7a, 0x51, 0xf4, 0xd9, 0xf0, 0x36, 0xdf, 0x3a, 0xa3, 0x47, 0x63, 0x8f,
	0xc9, 0x1d, 0xaa, 0xe0, 0xe2, 0x29, 0xcc, 0x27, 0xfd, 0xa2, 0xa9, 0xae, 0x26, 0x60, 0x4d, 0x6f,
	0x8e, 0x2e, 0xdd, 0xc3, 0x84, 0xd6, 0xbf, 0xc9, 0xc2, 0xfc, 0x10, 0xc2, 0xd4, 0xdc, 0x70, 0xbd,
	0x01, 0xc9, 0xc5, 0x39, 0x3b, 0xe2, 0x6c, 0xc1, 0x3b, 0x47, 0x44, 0xa9, 0x1f, 0x65, 0x9b, 0x0b,
	0xc9, 0xe5, 0x39, 0x6f, 0x5c, 0x9e, 0x53, 0x15, 0x5a, 0x18, 0x52, 0xa1, 0x4a, 0xd1, 0x51, 0x00,
	0xb8, 0x98, 0x2a, 0x3a, 0xf2, 0xc9, 0x3c, 0x82, 0x42, 0x14, 0x9f, 0xc7, 0x71, 0xa9, 0xd0, 0xc5,
	0x4f, 0xa0, 0x28, 0xfb, 0xae, 0x11, 0xf5, 0x3c, 0x93, 0x52, 0xe3, 0x23, 0xa9, 0x2b, 0xbb, 0x44,
	0x0a, 0x33, 0x92, 0x2a, 0xfc, 0x54, 0x01, 0x56, 0xde, 0x4c, 0x01, 0x56, 0xcf, 0xa3, 0x00, 0xad,
	0xff, 0x94, 0x81, 0x4b, 0xa7, 0xa3, 0x3a, 0xa7, 0xcf, 0x1e, 0x1e, 0x67, 0x23, 0x8c, 0x63, 0xab,
	0x92, 0x71, 0xcc, 0xf9, 0x76, 0xa2, 0x8f, 0xf9, 0xe9, 0xa4, 0x78, 0x0b, 0xaa, 0xd1, 0xbe, 0x7f,
	0x88, 0x9d, 0x35, 0xf4, 0xb6, 0x96, 0xec, 0x21, 0x18, 0x9a, 0xc9, 0x2a, 0x6d, 0x5d, 0x27, 0xc8,
	0x9f, 0xce, 0x62, 0x2f, 0x8e, 0x7f, 0xe0, 0x52, 0x32, 0x1f, 0xb8, 0x6c, 0x99, 0x93, 0x7a, 0xb9,
	0xac, 0xdd, 0x87, 0x39, 0x8f, 0x59, 0x1e, 0x4f, 0xd0, 0xdd, 0x33, 0x62, 0x3c, 0x44, 0x63, 0x13,
	0x85, 0xf5, 0xdf, 0xb2, 0x70, 0x71, 0x34, 0x62, 0x24, 0x80, 0x62, 0x3a, 0xea, 0x8c, 0xd2, 0x37,
	0x0e, 0x66, 0x3f, 0x8d, 0xec, 0xd8, 0x5c, 0x50, 0x98, 0xcb, 0xfa, 0x16, 0x82, 0xdf, 0x1a, 0x73,
	0x59, 0xe7, 0xb5, 0x51, 0x21, 0xdd, 0xfa, 0xfc, 0xb9, 0xb6, 0x5e, 0x1f, 0xb4, 0x82, 0x71, 0xd0,
	0x6e, 0x40, 0x19, 0xff, 0x1a, 0x79, 0x3d, 0x76, 0x0a, 0x48, 0x99, 0xa5, 0x74, 0x2e, 0x6b, 0x09,
	0xef, 0x2a, 0xa1, 0xd3, 0xd9, 0x94, 0x7b, 0xf1, 0x76, 0xbf, 0xa3, 0x6e, 0x32, 0x26, 0x08, 0xbb,
	0xed, 0x79, 0xae, 0xdb, 0x95, 0x58, 0xcf, 0xd6, 0x6c, 0x0a, 0x40, 0x16, 0x40, 0x64, 0x1b, 0x8f,
	0x2c, 0x22, 0xf0, 0x8d, 0x66, 0x08, 0x26, 0x7e, 0x02, 0x25, 0x2c, 0xaf, 0x3b, 0xb1, 0x43, 0xac,
	0x3c, 0x29, 0x68, 0x8a, 0x3b, 0x81, 0x48, 0x76, 0x82, 0x2e, 0xbe, 0x06, 0xe8, 0xfb, 0x09, 0xf1,
	0xfc, 0x2c, 0xc4, 0x06, 0x81, 0xf5, 0x18, 0x4a, 0x1a, 0x4e, 0x4f, 0x49, 0x65, 0xec, 0x34, 0x7f,
	0x1d, 0xa9, 0xa0, 0x60, 0xd9, 0x2e, 0x21, 0xe0, 0x17, 0x11, 0x7b, 0xf0, 0xa2, 0x20, 0xf4, 0xe2,
	0xa8, 0xe9, 0xf5, 0x3a, 0x6a, 0xaf, 0xcb, 0x0c, 0x69, 0xf4, 0x3a, 0x56, 0x1d, 0xe6, 0xd7, 0x7a,
	0x71, 0xcb, 0x7f, 0x3d, 0xe1, 0x1d, 0x97, 0xf5, 0x1f, 0x73, 0x50, 0xd1, 0x18, 0xe3, 0xd2, 0x23,
	0xdf, 0x86, 0x52, 0xd7, 0x77, 0xdc, 0x66, 0xaa, 0xec, 0x8a, 0x58, 0x5e, 0xe3, 0x63, 0xc8, 0x89,
	0xaf, 0xfa, 0x9d, 0x17, 0x97, 0xc8, 0x7f, 0xef, 0x87, 0xb1, 0x76, 0x34, 0xe2, 0x37, 0xda, 0xb6,
	0x78, 0xf7, 0x6c, 0xee, 0x39, 0xed, 0xd8, 0xd7, 0xa9, 0x92, 0x80, 0xa0, 0xc7, 0x04, 0x21, 0x67,
	0x70, 0x20, 0xa5, 0xab, 0x31, 0x0a, 0xca, 0x19, 0x8c, 0xb0, 0x14, 0xa5, 0xe7, 0xbc, 0x6e, 0xfa,
	0xfd, 0xa8, 0x1d, 0x4a, 0xd9, 0x57, 0x9c, 0x54, 0xe9, 0x39, 0xaf, 0x9f, 0x2b, 0x50, 0xea, 0x29,
	0x57, 0x4f, 0x55, 0x12, 0x4f, 0x39, 0xbb, 0x58, 0x39, 0xe7, 0xbe, 0xac, 0x3a, 0x47, 0x10, 0x3f,
	0x45, 0xbf, 0x09, 0x10, 0xfb, 0x41, 0xb3, 0xe7, 0x84, 0x1d, 0x4f, 0x5f, 0x7b, 0xcb, 0xb1, 0x1f,
	0x6c, 0x11, 0x20, 0xbd, 0xe5, 0x54, 0x74, 0xab, 0xca, 0x75, 0x16, 0xca, 0xfe, 0x77, 0x5e, 0xf3,
	0xc0, 0x8b, 0xbc, 0x56, 0xe2, 0x49, 0xac, 0x12, 0xf0, 0x25, 0xc3, 0xc4, 0x3d, 0x58, 0x60, 0xa4,
	0x3d, 0xbf, 0x1f, 0xd3, 0x4d, 0x9c, 0x9d, 0x89, 0x4c, 0xfa, 0x58, 0x01, 0x71, 0x8b, 0x15, 0x5a,
	0x4f, 0xfb, 0x12, 0x4b, 0x8c, 0xd1, 0x8b, 0x71, 0xde, 0x5c, 0xe9, 0xef, 0xed, 0x45, 0x32, 0x56,
	0x9e, 0xc4, 0x0a, 0xc1, 0x9e, 0x13, 0x88, 0xaf, 0x8f, 0x88, 0xc2, 0xfe, 0x31, 0x7e, 0x54, 0x05,
	0x04, 0xd2, 0xce, 0x34, 0x75, 0x9a, 0x2f, 0xbd, 0x99, 0x20, 0x17, 0xe7, 0x12, 0xe4, 0xff, 0x3d,
	0x03, 0xf3, 0x3b, 0x9e, 0x2b, 0x57, 0x1d, 0xfd, 0x92, 0xe6, 0x0b, 0x28, 0x46, 0x0c, 0x98, 0x1e,
	0x2d, 0x61, 0x1c, 0x5b, 0x23, 0x8b, 0xb5, 0xe1, 0xc7, 0xb9, 0x1f, 0x4f, 0xa3, 0x52, 0x26, 0x2c,
	0xa5, 0x0d, 0xa8, 0x87, 0x9c, 0x44, 0xbb, 0xf4, 0x97, 0x00, 0x52, 0xe0, 0x98, 0x28, 0xec, 0x4c,
	0x66, 0xab, 0xea, 0x44, 0x3d, 0x01, 0x4e, 0x4d, 0x9a, 0xbf, 0x9d, 0x87, 0xa2, 0xaa, 0x1b, 0xf7,
	0x82, 0x3a, 0xf6, 0x02, 0x65, 0x74, 0xe0, 0x27, 0x5d, 0xc5, 0x9d, 0xfe, 0x2b, 0xa5, 0xa0, 0xf8,
	0x59, 0x85, 0x80, 0x5c, 0xd7, 0xef, 0xf8, 0x49, 0xcc, 0xca, 0xef, 0xf8, 0xc8, 0x91, 0xe4, 0x97,
	0x3d, 0xdc, 0xf7, 0x54, 0xa6, 0x4a, 0xd9, 0x2e, 0x23, 0xe4, 0x5b, 0x04, 0x24, 0x3e, 0x86, 0x82,
	0xe1, 0x63, 0xb8, 0xa2, 0xdf, 0x94, 0xa8, 0xe0, 0x55, 0xa0, 0x7e, 0x65, 0x41, 0x07, 0x66, 0x59,
	0x29, 0xe9, 0xb8, 0xab, 0x0e, 0xb2, 0x95, 0xc7, 0x05, 0xd9, 0xc0, 0x0c, 0xb2, 0x0d, 0x3f, 0xfa,
	0xae, 0x9c, 0x7a, 0xf4, 0xfd, 0x73, 0xa8, 0xf8, 0xea, 0x89, 0xdd, 0x39, 0x54, 0x3e, 0x30, 0x0d,
	0xe5, 0xf8, 0x0d, 0x47, 0x21, 0xe6, 0x47, 0xa3, 0x10, 0xd7, 0xa1, 0x4c, 0xcb, 0x40, 0xce, 0x67,
	0x75, 0x38, 0x08, 0xf0, 0x82, 0x7d, 0x1b, 0x3d, 0xd9, 0x1f, 0x28, 0x77, 0x01, 0x7d, 0x9f, 0x76,
	0x6a, 0x2f, 0x8e, 0x71, 0x6a, 0x4f, 0x70, 0x95, 0x8f, 0xf8, 0xba, 0xc5, 0xa8, 0xaf, 0x7b, 0x09,
	0x4a, 0x5d, 0xa7, 0xdf, 0x19, 0x38, 0x1d, 0xa9, 0x7c, 0xe5, 0x49, 0x79, 0x4c, 0x54, 0xe4, 0xca,
	0x98, 0xa8, 0x88, 0x85, 0x72, 0x83, 0x7b, 0x60, 0xd6, 0xbe, 0xca, 0x0f, 0xfb, 0xb9, 0x0f, 0xce,
	0x94, 0x32, 0x1c, 0xf6, 0xd7, 0x86, 0x1d, 0xf6, 0x77, 0x61, 0x21, 0x59, 0x0c, 0x8e, 0x35, 0xf1,
	0xcd, 0xbb, 0xaa, 0x57, 0x64, 0x67, 0xdf, 0x3f, 0xb4, 0x1c, 0xa8, 0x9a, 0xfc, 0x2a, 0xbe, 0x81,
	0x45, 0xb3, 0x6c, 0x58, 0xdb, 0xf7, 0xce, 0x64, 0x76, 0x32, 0xb8, 0x4f, 0x91, 0x5b, 0x2f, 0x4f,
	0x37, 0x39, 0x2e, 0x34, 0x35, 0x26, 0x6a, 0x7b, 0xc3, 0x7c, 0xa1, 0xc4, 0xaa, 0x23, 0x05, 0x58,
	0x8f, 0x60, 0x7e, 0xa5, 0xb5, 0x2b, 0xa3, 0xd8, 0xb8, 0xf5, 0x52, 0x56, 0x42, 0xa4, 0x74, 0x9f,
	0x2a, 0xa9, 0xe0, 0xed, 0x9c, 0x0e, 0xde, 0x5a, 0x7f, 0x96, 0x81, 0x8a, 0xa6, 0x44, 0x91, 0xb3,
	0x0e, 0x05, 0xa7, 0x15, 0xcb, 0x24, 0xdf, 0xe9, 0xa3, 0xf1, 0xd7, 0xfe, 0x94, 0xe2, 0xc1, 0x0a,
	0xa1, 0xb3, 0xe8, 0x50, 0xb4, 0x4b, 0x2f, 0xb1, 0xd1, 0x04, 0x3c, 0xe6, 0x32, 0xf4, 0x70, 0x58,
	0x78, 0x5c, 0x9f, 0xd6, 0x8b, 0x21, 0x36, 0xfe, 0x5e, 0x06, 0x0a, 0x0c, 0xc5, 0xcd, 0xa6, 0x29,
	0x35, 0xf4, 0xd2, 0xe9, 0x22, 0xae, 0x14, 0x7d, 0xa6, 0xbf, 0x87, 0x62, 0xa7, 0x00, 0xb4, 0x80,
	0xf6, 0xba, 0xfe, 0xe1, 0xb6, 0x0c, 0xdb, 0x3a, 0x63, 0x38, 0x6b, 0x9b, 0x20, 0xc4, 0x20, 0x29,
	0x40, 0x86, 0x56, 0xa4, 0x04, 0x8c, 0x09, 0xc2, 0x1d, 0x1a, 0xa4, 0x56, 0x9e, 0xcd, 0x05, 0xeb,
	0xef, 0x24, 0x37, 0xe0, 0xb5, 0xc6, 0x3a, 0xaf, 0xe6, 0x13, 0x28, 0x04, 0x04, 0x51, 0xab, 0xf9,
	0xc9, 0x84, 0x5f, 0x19, 0x31, 0x89, 0x54, 0x51, 0x2d, 0x28, 0x93, 0x2f, 0xfd, 0x04, 0x2a, 0x06,
	0xf8, 0xac, 0x47, 0xe9, 0x59, 0x73, 0xcd, 0xfe, 0x34, 0x03, 0xd5, 0x27, 0x32, 0xde, 0x75, 0x5a,
	0x1b, 0xaf, 0x91, 0x3d, 0xc4, 0x0d, 0x23, 0x53, 0x20, 0x7b, 0x2a, 0xff, 0xae, 0x6e, 0x72, 0xdf,
	0xb8, 0x4c, 0xc0, 0xfa, 0xf0, 0xaf, 0xdd, 0x28, 0x84, 0x03, 0xcf, 0xd5, 0x6f, 0x5c, 0xbf, 0x80,
	0x5c, 0xec, 0xb4, 0xf8, 0x2a, 0x58, 0x59, 0xae, 0x8d, 0x9d, 0xf2, 0xae, 0xd3, 0x52, 0xb9, 0xf4,
	0x4e, 0x2b, 0xb2, 0xe9, 0x5f, 0xab, 0x01, 0xd9, 0x5d, 0xa7, 0x25, 0xde, 0x01, 0x16, 0x2a, 0x6a,
	0x7c, 0xf4, 0x4b, 0x34, 0x2c, 0x73, 0x6c, 0xf5, 0x97, 0x5e, 0x2f, 0x26, 0x2e, 0x0c, 0x35, 0x46,
	0x02, 0xd8, 0xfc, 0xc7, 0xb2, 0x87, 0xa6, 0x1c, 0x88, 0x55, 0x28, 0xc6, 0x54, 0x98, 0xfe, 0x92,
	0x93, 0x09, 0x74, 0x82, 0x1b, 0xe1, 0xdb, 0xfa, 0xc3, 0xfa, 0x2f, 0x45, 0x28, 0x30, 0x82, 0xf8,
	0x39, 0x54, 0xbd, 0x3e, 0x79, 0xf5, 0x64, 0x92, 0x73, 0x56, 0x5e, 0xbd, 0x7e, 0x72, 0x5c, 0x7f,
	0x4b, 0xc3, 0x29, 0x7c, 0x69, 0x3c, 0x2e, 0x9a, 0x1f, 0xaa, 0x10, 0xcb, 0x50, 0xd2, 0x00, 0x35,
	0x09, 0x7a, 0xe2, 0xa5, 0x61, 0xe6, 0xab, 0x24, 0x0d, 0x33, 0x7b, 0xdd, 0xd5, 0xcf, 0xb2, 0xb3,
	0x23, 0xbd, 0xe2, 0x05, 0x61, 0x6c, 0xaf, 0x74, 0xa5, 0xf8, 0x12, 0xc0, 0x18, 0x35, 0x67, 0x9f,
	0xd1, 0xd3, 0xa0, 0xf1, 0x63, 0xae, 0x98, 0x23, 0xfe, 0x08, 0x0a, 0x6a, 0xbc, 0xf9, 0xf4, 0x45,
	0xde, 0xa9, 0xd1, 0x2a, 0x9c, 0xb4, 0xa7, 0xe4, 0xed, 0x42, 0x76, 0xa8, 0xa7, 0x91, 0x71, 0x56,
	0xcc, 0x51, 0x3e, 0x82, 0x32, 0xda, 0x7d, 0x64, 0x82, 0xa9, 0x54, 0x79, 0x7a, 0x6f, 0x88, 0x40,
	0x36, 0xd5, 0xcc, 0x47, 0x83, 0x29, 0x54, 0x7c, 0x06, 0xa5, 0x96, 0xc3, 0x01, 0x4d, 0x75, 0x2d,
	0xa2, 0xc4, 0xe4, 0x96, 0x13, 0x9e, 0x22, 0x2b, 0x27, 0x40, 0xf1, 0x33, 0xa8, 0xc4, 0x4e, 0x6b,
	0xd7, 0x0f, 0x98, 0xb0, 0x9c, 0xee, 0x25, 0x72, 0x1b, 0x5a, 0xb8, 0xa3, 0xc4, 0xf3, 0x43, 0x15,
	0xe2, 0x29, 0x2c, 0xc4, 0x4e, 0x6b, 0x8b, 0xee, 0x48, 0xdc, 0x06, 0x3f, 0x6c, 0xbd, 0x75, 0x72,
	0x5c, 0x5f, 0x42, 0x54, 0xbe, 0x3e, 0x9d, 0x6a, 0x66, 0x71, 0xb4, 0x4e, 0xb5, 0xb4, 0xea, 0xc7,
	0xf4, 0x28, 0x22, 0x49, 0xdc, 0x48, 0x5b, 0x6a, 0x51, 0xd5, 0xf8, 0x96, 0xcc, 0x3a, 0x5a, 0x8a,
	0x0e, 0x3d, 0x28, 0x78, 0xa8, 0x72, 0x9c, 0x79, 0x29, 0x3a, 0x4d, 0x7a, 0x70, 0xf0, 0x70, 0x68,
	0x29, 0x34, 0xd0, 0xa0, 0x5a, 0x56, 0x19, 0xce, 0x43, 0x54, 0xcb, 0xe3, 0xa8, 0xf0, 0xce, 0x9b,
	0xa6, 0xdb, 0x73, 0x70, 0x88, 0xc9, 0x12, 0xa0, 0x49, 0x96, 0x26, 0xe6, 0x27, 0xe7, 0x7c, 0xf1,
	0xec, 0x73, 0x7e, 0x69, 0xfc, 0x39, 0x17, 0x1b, 0xfa, 0x27, 0xc1, 0x04, 0xa9, 0x91, 0xf1, 0x3f,
	0xe2, 0xb4, 0x86, 0x18, 0x9c, 0x5e, 0x4e, 0xc8, 0xe6, 0x03, 0x52, 0xfe, 0x0d, 0xb1, 0x03, 0xc8,
	0x13, 0x92, 0xb8, 0xc3, 0xbf, 0xff, 0x95, 0x49, 0xb3, 0xc2, 0x0f, 0xa4, 0xb9, 0xd0, 0xf4, 0x73,
	0x5f, 0xb7, 0x49, 0x5f, 0xf3, 0xa9, 0x5d, 0x3c, 0x39, 0xae, 0x57, 0x87, 0xde, 0xa4, 0xa2, 0x06,
	0x7f, 0x57, 0x5d, 0xe7, 0xb3, 0x69, 0x96, 0xf8, 0x08, 0xc3, 0x53, 0xbd, 0xb5, 0x09, 0xf3, 0x8d,
	0x24, 0xff, 0x0c, 0x45, 0xf3, 0x57, 0xec, 0x73, 0xc9, 0xa4, 0x0f, 0x6a, 0x7a, 0xe6, 0x83, 0x9a,
	0xde, 0xc4, 0x07, 0x35, 0x58, 0xf3, 0x10, 0x2e, 0x9a, 0xad, 0xa1, 0xfe, 0xb9, 0x05, 0x46, 0x82,
	0x1b, 0x35, 0x3b, 0x94, 0xf2, 0xb6, 0xfc, 0x3f, 0xee, 0x41, 0x49, 0x7b, 0x96, 0xc5, 0x37, 0x50,
	0xe0, 0x5f, 0x2f, 0x11, 0xd6, 0x04, 0x17, 0xb4, 0xf1, 0xd3, 0x26, 0x4b, 0x13, 0xec, 0x7d, 0xe3,
	0xd1, 0xa0, 0x75, 0x41, 0x7c, 0x93, 0xbe, 0x48, 0x1b, 0x8f, 0x6f, 0xfe, 0xca, 0xd9, 0x84, 0x26,
	0xcd, 0x17, 0x76, 0xd6, 0x05, 0xb1, 0x0b, 0x25, 0xf5, 0xd0, 0x7e, 0x59, 0xdc, 0x99, 0xfe, 0xc3,
	0x02, 0xd3, 0x5a, 0x35, 0x7f, 0x7d, 0xc0, 0xba, 0x20, 0x9a, 0x50, 0x31, 0x7e, 0xb3, 0x42, 0xbc,
	0x37, 0x96, 0xe6, 0xf4, 0x0f, 0x9f, 0x2c, 0xdd, 0x3b, 0x1b, 0x91, 0x3b, 0x68, 0x41, 0xd5, 0x7c,
	0xec, 0x24, 0xc6, 0x27, 0xd0, 0x8f, 0x79, 0x9d, 0xb5, 0xf4, 0xee, 0x0c, 0x98, 0xdc, 0xc7, 0x77,
	0x70, 0xe9, 0xd4, 0x4f, 0xea, 0x88, 0x8f, 0xcf, 0xf5, 0xcb, 0x45, 0x4b, 0x1f, 0x9e, 0xe3, 0x97,
	0x7a, 0xac, 0x0b, 0xe2, 0x05, 0x94, 0x93, 0xdf, 0x8f, 0x99, 0xb0, 0xc5, 0xe6, 0xef, 0xd4, 0x2c,
	0xdd, 0x39, 0x0b, 0x85, 0x9b, 0xdd, 0xe1, 0xac, 0x79, 0x9c, 0xde, 0x2c, 0x8c, 0x63, 0x4d, 0xcc,
	0x86, 0x4f, 0xd2, 0xf8, 0xad, 0x0b, 0x42, 0xc2, 0xfc, 0x50, 0xde, 0xb8, 0x78, 0x7f, 0x12, 0xbf,
	0x9d, 0x72, 0xa7, 0x2e, 0xbd, 0x37, 0x0b, 0xaa, 0x1e, 0x7b, 0x92, 0x64, 0x7c, 0x67, 0x7a, 0xea,
	0xf3, 0x34, 0xfe, 0x34, 0xf3, 0xa3, 0x99, 0x7d, 0xcc, 0x24, 0xd2, 0x09, 0xec, 0x33, 0x26, 0xe1,
	0x76, 0x02, 0xfb, 0x9c, 0xca, 0x48, 0xb5, 0x2e, 0x88, 0x6d, 0x28, 0xad, 0x04, 0xc1, 0xca, 0xc0,
	0xf5, 0xe2, 0x59, 0x16, 0x7d, 0x42, 0x40, 0x10, 0xc9, 0x75, 0x8b, 0xdf, 0x02, 0xac, 0x39, 0xa1,
	0xfb, 0xd8, 0xef, 0x76, 0xfd, 0xc3, 0x59, 0xda, 0x1c, 0xef, 0xd2, 0x4d, 0xdb, 0xd0, 0x0d, 0xff,
	0x3e, 0xe4, 0xb6, 0xf0, 0xce, 0x3a, 0x43, 0x93, 0xe3, 0xe3, 0x2c, 0x48, 0xad, 0x1b, 0x7b, 0x0e,
	0x85, 0x15, 0xb6, 0x5a, 0x66, 0x68, 0x6e, 0x7c, 0x6a, 0x23, 0xd3, 0xa7, 0x87, 0xa2, 0xa8, 0xe4,
	0xe0, 0x2c, 0x2d, 0xde, 0x9b, 0x26, 0x48, 0x93, 0xd4, 0x27, 0x5a, 0xcd, 0xd2, 0xba, 0x7f, 0xd8,
	0xdf, 0xf4, 0x9d, 0x99, 0xa4, 0xe9, 0xf8, 0x8d, 0xd7, 0x2d, 0x8c, 0x34, 0xbc, 0xa6, 0x7e, 0xa0,
	0xf4, 0xcd, 0x1b, 0xd6, 0x2d, 0x98, 0x0d, 0x6f, 0xd1, 0xa3, 0x60, 0xa7, 0x47, 0xbf, 0x4a, 0x76,
	0x73, 0xca, 0x2f, 0x2c, 0xca, 0xef, 0x26, 0xb0, 0x53, 0xfa, 0x7b, 0x8d, 0xd6, 0x05, 0xf1, 0x12,
	0x20, 0xfd, 0xa1, 0xcc, 0x09, 0x4a, 0x6a, 0xe8, 0x77, 0x40, 0x27, 0xf0, 0xd3, 0xe8, 0x0f, 0x8b,
	0x36, 0x61, 0x7e, 0xe8, 0x37, 0x38, 0xc5, 0xf8, 0x2d, 0x19, 0xfd, 0x95, 0xd1, 0x09, 0x42, 0xe1,
	0xf4, 0xcf, 0x79, 0x8a, 0xde, 0xa4, 0x7c, 0xb2, 0x19, 0x56, 0xfb, 0x93, 0x73, 0x24, 0xb4, 0x25,
	0xc2, 0xa2, 0xb2, 0xc6, 0x19, 0x66, 0xb6, 0x6c, 0x47, 0xe2, 0xc3, 0x89, 0x87, 0x8a, 0x31, 0x38,
	0x4e, 0x72, 0xe6, 0x09, 0x34, 0x90, 0xad, 0x0b, 0xe2, 0x0f, 0xd3, 0xc0, 0xf6, 0x4a, 0xb7, 0xfb,
	0x4c, 0x1e, 0xbe, 0x39, 0xab, 0x8f, 0xa6, 0x9c, 0x59, 0x17, 0xc4, 0x5f, 0x81, 0xc5, 0xa1, 0x54,
	0x87, 0x19, 0xdb, 0x7f, 0xef, 0x8c, 0x1c, 0x05, 0xa3, 0x87, 0x5f, 0x42, 0x35, 0xc9, 0x79, 0x98,
	0xb1, 0xf5, 0xf1, 0xd2, 0x7c, 0x38, 0x73, 0xc2, 0xba, 0x20, 0x7e, 0x05, 0x15, 0x3d, 0x23, 0x6c,
	0xf8, 0xee, 0xd4, 0x39, 0x4f, 0xd7, 0x60, 0x43, 0xb9, 0x11, 0xb4, 0xe8, 0x49, 0x26, 0x5d, 0x84,
	0x6d, 0xdf, 0x3b, 0x2b, 0x39, 0x61, 0xda, 0xc0, 0x87, 0x73, 0x18, 0xb8, 0xf5, 0x24, 0x80, 0x3f,
	0xb9, 0xf5, 0xd1, 0x64, 0x83, 0x09, 0xad, 0x0f, 0xa7, 0x02, 0xf0, 0x82, 0x27, 0xc1, 0xe6, 0xdf,
	0x69, 0xc1, 0x87, 0x83, 0xf2, 0xd6, 0x05, 0xf1, 0x07, 0x30, 0x9f, 0x6a, 0xe1, 0x19, 0x9b, 0x9e,
	0x29, 0x76, 0x48, 0x8c, 0xb8, 0x90, 0x02, 0x97, 0xb1, 0xf1, 0x77, 0xcf, 0xa4, 0x3c, 0x5f, 0x0f,
	0x2e, 0x2c, 0x0e, 0xf7, 0xf0, 0x72, 0x79, 0xe6, 0x3e, 0xce, 0xc2, 0x53, 0x71, 0x53, 0x32, 0x4a,
	0xca, 0x1c, 0xaf, 0xc2, 0x29, 0x8c, 0x67, 0xb6, 0xa1, 0x88, 0xd7, 0x04, 0x3d, 0x67, 0xc4, 0xbc,
	0x48, 0x1e, 0x57, 0x74, 0x10, 0x61, 0xc6, 0x65, 0xb7, 0xce, 0x8e, 0x44, 0xf0, 0x60, 0xd9, 0xc9,
	0x37, 0x79, 0xb0, 0x43, 0xce, 0xce, 0x49, 0x4a, 0x39, 0x75, 0x52, 0x32, 0xff, 0x25, 0x7e, 0xb6,
	0xdf, 0x89, 0xff, 0x86, 0xbd, 0x75, 0x74, 0xe0, 0xcb, 0x68, 0x37, 0xb1, 0x09, 0x31, 0x41, 0x75,
	0xe8, 0xfa, 0xe9, 0x4d, 0x1b, 0x68, 0xfa, 0xb2, 0x53, 0x5c, 0x09, 0x02, 0x32, 0x75, 0xee, 0x4e,
	0xa2, 0xc0, 0xda, 0x33, 0x2e, 0x3b, 0x0a, 0x4b, 0xb7, 0xba, 0x07, 0x8b, 0x4f, 0x64, 0xbc, 0x12,
	0xf0, 0x8f, 0xdf, 0xd2, 0x5b, 0xdd, 0x09, 0x06, 0xe5, 0x28, 0x1a, 0x6a, 0xbd, 0x59, 0x31, 0x03,
	0xf1, 0x6b, 0x10, 0xa3, 0xe0, 0x97, 0xcb, 0xe7, 0xe8, 0xe9, 0x83, 0x99, 0x30, 0x89, 0xc9, 0xc5,
	0x2f, 0xa0, 0xf0, 0xa2, 0xd3, 0xde, 0x75, 0x5a, 0x62, 0xbc, 0xc1, 0xc7, 0x95, 0xd8, 0xea, 0xed,
	0xa9, 0xf5, 0xa8, 0xae, 0x9f, 0x41, 0x89, 0x8b, 0x2f, 0x97, 0xcf, 0x6c, 0xcd, 0x9a, 0x52, 0xaf,
	0xd3, 0x16, 0x7e, 0x05, 0x15, 0x06, 0xac, 0x3a, 0x71, 0x7b, 0x7f, 0xc2, 0xad, 0xc0, 0xc0, 0xc0,
	0x76, 0xef, 0x9d, 0x8d, 0x84, 0x4d, 0x1f, 0xc2, 0xd5, 0xb1, 0x39, 0xde, 0x13, 0xae, 0x7d, 0x93,
	0x72, 0xc5, 0x27, 0x58, 0x19, 0x53, 0xd2, 0xc7, 0xff, 0x2a, 0x25, 0x9e, 0xb3, 0xa8, 0xe1, 0xbb,
	0xa8, 0xf7, 0xbd, 0x74, 0xb7, 0x9d, 0xbe, 0xec, 0x8a, 0x4f, 0x27, 0x35, 0x36, 0x16, 0x1d, 0xbb,
	0x3f, 0x2f, 0x45, 0x20, 0xfe, 0x28, 0x43, 0xd9, 0xed, 0x63, 0xeb, 0x5f, 0x2e, 0xbf, 0xc1, 0x10,
	0x96, 0xcf, 0x45, 0x91, 0x30, 0xdd, 0xb6, 0x1f, 0xbc, 0x08, 0xa2, 0x09, 0x6c, 0xc2, 0x95, 0x93,
	0x99, 0x4e, 0xd7, 0xe3, 0x82, 0x7e, 0x03, 0xe5, 0xc4, 0x65, 0x3d, 0x41, 0x38, 0x99, 0x5e, 0xfc,
	0xa5, 0x33, 0x51, 0x02, 0x61, 0x43, 0xf9, 0x71, 0xe8, 0xf7, 0xe3, 0x6d, 0x67, 0xa2, 0x61, 0x9f,
	0xd4, 0x4f, 0xe6, 0x65, 0x03, 0x25, 0x0a, 0xd0, 0x06, 0x4f, 0x9d, 0x4c, 0x13, 0x84, 0xf3, 0x90,
	0x4f, 0x6b, 0x82, 0x22, 0x1c, 0xf5, 0x54, 0xb5, 0xa0, 0x6a, 0x3e, 0x17, 0x9c, 0x20, 0x25, 0xc6,
	0x3c, 0x7c, 0x9c, 0xa0, 0x04, 0x4f, 0xbd, 0x3d, 0xb4, 0x2e, 0xac, 0x2e, 0xfe, 0xc5, 0x6f, 0x6e,
	0x65, 0xfe, 0xc3, 0x6f, 0x6e, 0x65, 0xfe, 0xeb, 0x6f, 0x6e, 0x65, 0xfe, 0x60, 0xee, 0xe0, 0x61,
	0xab, 0x40, 0xff, 0xa3, 0x84, 0x1f, 0xfd, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x49, 0xef,
	0x77, 0x15, 0x62, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceClient interface {
	//相关推荐列表
	//-400:RequestErr -404:NothingFound
	Relate(ctx context.Context, in *RelateRequest, opts ...grpc.CallOption) (*SpecialReply, error)
	// 获取web_rcmd
	WebRcmd(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*WebRcmdReply, error)
	// 资源位banners
	Banners2(ctx context.Context, in *BannersRequest, opts ...grpc.CallOption) (*BannersReply, error)
	FeedBanners(ctx context.Context, in *FeedBannersRequest, opts ...grpc.CallOption) (*FeedBannersReply, error)
	// 获取 404 配置
	CustomConfig(ctx context.Context, in *CustomConfigRequest, opts ...grpc.CallOption) (*CustomConfigReply, error)
	// 获取入口是否屏蔽
	EntrancesIsHidden(ctx context.Context, in *EntrancesIsHiddenRequest, opts ...grpc.CallOption) (*EntrancesIsHiddenReply, error)
	// 获取 搜索OGV后台sid值
	SearchOgv(ctx context.Context, in *SearchOgvReq, opts ...grpc.CallOption) (*SearchOgvReply, error)
	// 获取运营资源皮肤配置
	SkinConf(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*SkinConfReply, error)
	// 获取web player icon配置数据
	WebPlayerIcon(ctx context.Context, in *WebPlayerIconRequest, opts ...grpc.CallOption) (*WebPlayerIconReply, error)
	// 获取模块icon资源配置
	MngIcon(ctx context.Context, in *MngIconRequest, opts ...grpc.CallOption) (*MngIconReply, error)
	// 获取我的页模块配置
	MineSections(ctx context.Context, in *MineSectionsRequest, opts ...grpc.CallOption) (*MineSectionsReply, error)
	// audit
	AppAudit(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*AuditReply, error)
	// card_follow
	CardFollow(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*CardFollowReply, error)
	// feed tab Menu
	Menu(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*MenuReply, error)
	// feed Active
	Active(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*ActiveReply, error)
	// feed Special card
	Special(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*SpecialCardReply, error)
	// feed game DownLoad card
	DownLoad(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*DownLoadCardReply, error)
	// feed converge card
	Converge(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*ConvergeCardReply, error)
	// 获取在线配置
	ParamList(ctx context.Context, in *ParamReq, opts ...grpc.CallOption) (*ParamReply, error)
	// 获取是否点击过tab运营资源
	MenuExtVer(ctx context.Context, in *MenuExtVerReq, opts ...grpc.CallOption) (*MenuExtVerReply, error)
	// add tab运营资源
	AddMenuExtVer(ctx context.Context, in *AddMenuExtVerReq, opts ...grpc.CallOption) (*AddMenuExtVerReply, error)
	// information region card
	InformationRegionCard(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*InformationRegionCardReply, error)
	// 天马卡片
	CardPosRecs(ctx context.Context, in *CardPosRecReplyRequest, opts ...grpc.CallOption) (*CardPosRecReply, error)
	// gorpc接口迁移: 获取全部资源位数据
	ResourceAllNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*ResourceAllReply, error)
	// gorpc接口迁移: 获取全部内容投放数据
	AssignmentAllNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*AssignmentAllReply, error)
	// gorpc接口迁移: 获取默认banner配置
	DefBannerNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*DefBannerReply, error)
	// gorpc接口迁移: 获取banner配置
	ResourceNew(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceReply, error)
	// gorpc接口迁移: 批量获取默认banner配置
	ResourcesNew(ctx context.Context, in *ResourcesRequest, opts ...grpc.CallOption) (*ResourcesReply, error)
	// gorpc接口迁移: Banners -> grpc Banners2
	// gorpc接口迁移: PasterAPP
	PasterAPPNew(ctx context.Context, in *PasterAPPRequest, opts ...grpc.CallOption) (*PasterAPPReply, error)
	// gorpc接口迁移: IndexIcon
	IndexIconNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*IndexIconReply, error)
	// gorpc接口迁移: PlayerIcon
	PlayerIconNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*PlayerIconReply, error)
	// gorpc接口迁移: PlayerIcon2
	PlayerIcon2New(ctx context.Context, in *PlayerIconRequest, opts ...grpc.CallOption) (*PlayerIconReply, error)
	// gorpc接口迁移: PlayerIcon2 -404 优化
	PlayerIcon2NewV2(ctx context.Context, in *PlayerIconRequest, opts ...grpc.CallOption) (*PlayerIconV2Reply, error)
	// gorpc接口迁移: Cmtbox
	CmtboxNew(ctx context.Context, in *CmtboxRequest, opts ...grpc.CallOption) (*CmtboxReply, error)
	// gorpc接口迁移: SideBars
	SideBarsNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*SideBarsReply, error)
	// gorpc接口迁移: AbTest
	AbTestNew(ctx context.Context, in *AbTestRequest, opts ...grpc.CallOption) (*AbTestReply, error)
	// gorpc接口迁移: PasterCID
	PasterCIDNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*PasterCIDReply, error)
	// 单个查询运营tab数据
	AppActive(ctx context.Context, in *AppActiveRequest, opts ...grpc.CallOption) (*AppActiveReply, error)
	// 天马运营tab menu
	AppMenu(ctx context.Context, in *AppMenusRequest, opts ...grpc.CallOption) (*AppMenuReply, error)
	// 实时获取app entry配置
	GetAppEntryState(ctx context.Context, in *GetAppEntryStateReq, opts ...grpc.CallOption) (*GetAppEntryStateRep, error)
	// 实时获取app entry配置 -404优化
	GetAppEntryStateV2(ctx context.Context, in *GetAppEntryStateReq, opts ...grpc.CallOption) (*GetAppEntryStateV2Rep, error)
	// 获取ugc tab配置
	UgcTab(ctx context.Context, in *UgcTabReq, opts ...grpc.CallOption) (*UgcTabReply, error)
	// 获取ugc tab配置 -404优化
	UgcTabV2(ctx context.Context, in *UgcTabReq, opts ...grpc.CallOption) (*UgcTabV2Reply, error)
	// 批量获取ugc tab配置
	UgcTabBatch(ctx context.Context, in *UgcTabBatchReq, opts ...grpc.CallOption) (*UgcTabBatchReply, error)
	// 获取S10分品类热门稿件aid集合
	GetS10PopEntranceAids(ctx context.Context, in *GetS10PopEntranceAidsReq, opts ...grpc.CallOption) (*GetS10PopEntranceAidsReply, error)
	// 根据tid获取匹配的免流配置
	GetPlayerCustomizedPanel(ctx context.Context, in *GetPlayerCustomizedPanelReq, opts ...grpc.CallOption) (*GetPlayerCustomizedPanelRep, error)
	// 根据tid获取匹配的免流配置-404优化
	GetPlayerCustomizedPanelV2(ctx context.Context, in *GetPlayerCustomizedPanelReq, opts ...grpc.CallOption) (*GetPlayerCustomizedPanelV2Rep, error)
	// 业务弹窗规范
	PopUps(ctx context.Context, in *PopUpsReq, opts ...grpc.CallOption) (*PopUpsReply, error)
	// 获取tab ext
	GetTabExt(ctx context.Context, in *GetTabExtReq, opts ...grpc.CallOption) (*GetTabExtRep, error)
	// PC Web版头
	FrontPage(ctx context.Context, in *FrontPageReq, opts ...grpc.CallOption) (*FrontPageResp, error)
	// 是否为up主
	IsUploader(ctx context.Context, in *IsUploaderReq, opts ...grpc.CallOption) (*IsUploaderReply, error)
	// 获取首页模块配置
	HomeSections(ctx context.Context, in *HomeSectionsRequest, opts ...grpc.CallOption) (*HomeSectionsReply, error)
}

type resourceClient struct {
	cc *grpc.ClientConn
}

func NewResourceClient(cc *grpc.ClientConn) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) Relate(ctx context.Context, in *RelateRequest, opts ...grpc.CallOption) (*SpecialReply, error) {
	out := new(SpecialReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/Relate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) WebRcmd(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*WebRcmdReply, error) {
	out := new(WebRcmdReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/WebRcmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Banners2(ctx context.Context, in *BannersRequest, opts ...grpc.CallOption) (*BannersReply, error) {
	out := new(BannersReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/Banners2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) FeedBanners(ctx context.Context, in *FeedBannersRequest, opts ...grpc.CallOption) (*FeedBannersReply, error) {
	out := new(FeedBannersReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/FeedBanners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) CustomConfig(ctx context.Context, in *CustomConfigRequest, opts ...grpc.CallOption) (*CustomConfigReply, error) {
	out := new(CustomConfigReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/CustomConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) EntrancesIsHidden(ctx context.Context, in *EntrancesIsHiddenRequest, opts ...grpc.CallOption) (*EntrancesIsHiddenReply, error) {
	out := new(EntrancesIsHiddenReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/EntrancesIsHidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) SearchOgv(ctx context.Context, in *SearchOgvReq, opts ...grpc.CallOption) (*SearchOgvReply, error) {
	out := new(SearchOgvReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/SearchOgv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) SkinConf(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*SkinConfReply, error) {
	out := new(SkinConfReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/SkinConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) WebPlayerIcon(ctx context.Context, in *WebPlayerIconRequest, opts ...grpc.CallOption) (*WebPlayerIconReply, error) {
	out := new(WebPlayerIconReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/WebPlayerIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) MngIcon(ctx context.Context, in *MngIconRequest, opts ...grpc.CallOption) (*MngIconReply, error) {
	out := new(MngIconReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/MngIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) MineSections(ctx context.Context, in *MineSectionsRequest, opts ...grpc.CallOption) (*MineSectionsReply, error) {
	out := new(MineSectionsReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/MineSections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) AppAudit(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*AuditReply, error) {
	out := new(AuditReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/AppAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) CardFollow(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*CardFollowReply, error) {
	out := new(CardFollowReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/CardFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Menu(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*MenuReply, error) {
	out := new(MenuReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/Menu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Active(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*ActiveReply, error) {
	out := new(ActiveReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/Active", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Special(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*SpecialCardReply, error) {
	out := new(SpecialCardReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/Special", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) DownLoad(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*DownLoadCardReply, error) {
	out := new(DownLoadCardReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/DownLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Converge(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*ConvergeCardReply, error) {
	out := new(ConvergeCardReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/Converge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) ParamList(ctx context.Context, in *ParamReq, opts ...grpc.CallOption) (*ParamReply, error) {
	out := new(ParamReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/ParamList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) MenuExtVer(ctx context.Context, in *MenuExtVerReq, opts ...grpc.CallOption) (*MenuExtVerReply, error) {
	out := new(MenuExtVerReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/MenuExtVer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) AddMenuExtVer(ctx context.Context, in *AddMenuExtVerReq, opts ...grpc.CallOption) (*AddMenuExtVerReply, error) {
	out := new(AddMenuExtVerReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/AddMenuExtVer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) InformationRegionCard(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*InformationRegionCardReply, error) {
	out := new(InformationRegionCardReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/InformationRegionCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) CardPosRecs(ctx context.Context, in *CardPosRecReplyRequest, opts ...grpc.CallOption) (*CardPosRecReply, error) {
	out := new(CardPosRecReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/CardPosRecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) ResourceAllNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*ResourceAllReply, error) {
	out := new(ResourceAllReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/ResourceAllNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) AssignmentAllNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*AssignmentAllReply, error) {
	out := new(AssignmentAllReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/AssignmentAllNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) DefBannerNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*DefBannerReply, error) {
	out := new(DefBannerReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/DefBannerNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) ResourceNew(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*ResourceReply, error) {
	out := new(ResourceReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/ResourceNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) ResourcesNew(ctx context.Context, in *ResourcesRequest, opts ...grpc.CallOption) (*ResourcesReply, error) {
	out := new(ResourcesReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/ResourcesNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) PasterAPPNew(ctx context.Context, in *PasterAPPRequest, opts ...grpc.CallOption) (*PasterAPPReply, error) {
	out := new(PasterAPPReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/PasterAPPNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) IndexIconNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*IndexIconReply, error) {
	out := new(IndexIconReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/IndexIconNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) PlayerIconNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*PlayerIconReply, error) {
	out := new(PlayerIconReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/PlayerIconNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) PlayerIcon2New(ctx context.Context, in *PlayerIconRequest, opts ...grpc.CallOption) (*PlayerIconReply, error) {
	out := new(PlayerIconReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/PlayerIcon2New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) PlayerIcon2NewV2(ctx context.Context, in *PlayerIconRequest, opts ...grpc.CallOption) (*PlayerIconV2Reply, error) {
	out := new(PlayerIconV2Reply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/PlayerIcon2NewV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) CmtboxNew(ctx context.Context, in *CmtboxRequest, opts ...grpc.CallOption) (*CmtboxReply, error) {
	out := new(CmtboxReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/CmtboxNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) SideBarsNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*SideBarsReply, error) {
	out := new(SideBarsReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/SideBarsNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) AbTestNew(ctx context.Context, in *AbTestRequest, opts ...grpc.CallOption) (*AbTestReply, error) {
	out := new(AbTestReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/AbTestNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) PasterCIDNew(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*PasterCIDReply, error) {
	out := new(PasterCIDReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/PasterCIDNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) AppActive(ctx context.Context, in *AppActiveRequest, opts ...grpc.CallOption) (*AppActiveReply, error) {
	out := new(AppActiveReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/AppActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) AppMenu(ctx context.Context, in *AppMenusRequest, opts ...grpc.CallOption) (*AppMenuReply, error) {
	out := new(AppMenuReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/AppMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetAppEntryState(ctx context.Context, in *GetAppEntryStateReq, opts ...grpc.CallOption) (*GetAppEntryStateRep, error) {
	out := new(GetAppEntryStateRep)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/GetAppEntryState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetAppEntryStateV2(ctx context.Context, in *GetAppEntryStateReq, opts ...grpc.CallOption) (*GetAppEntryStateV2Rep, error) {
	out := new(GetAppEntryStateV2Rep)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/GetAppEntryStateV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) UgcTab(ctx context.Context, in *UgcTabReq, opts ...grpc.CallOption) (*UgcTabReply, error) {
	out := new(UgcTabReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/UgcTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) UgcTabV2(ctx context.Context, in *UgcTabReq, opts ...grpc.CallOption) (*UgcTabV2Reply, error) {
	out := new(UgcTabV2Reply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/UgcTabV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) UgcTabBatch(ctx context.Context, in *UgcTabBatchReq, opts ...grpc.CallOption) (*UgcTabBatchReply, error) {
	out := new(UgcTabBatchReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/UgcTabBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetS10PopEntranceAids(ctx context.Context, in *GetS10PopEntranceAidsReq, opts ...grpc.CallOption) (*GetS10PopEntranceAidsReply, error) {
	out := new(GetS10PopEntranceAidsReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/GetS10PopEntranceAids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetPlayerCustomizedPanel(ctx context.Context, in *GetPlayerCustomizedPanelReq, opts ...grpc.CallOption) (*GetPlayerCustomizedPanelRep, error) {
	out := new(GetPlayerCustomizedPanelRep)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/GetPlayerCustomizedPanel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetPlayerCustomizedPanelV2(ctx context.Context, in *GetPlayerCustomizedPanelReq, opts ...grpc.CallOption) (*GetPlayerCustomizedPanelV2Rep, error) {
	out := new(GetPlayerCustomizedPanelV2Rep)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/GetPlayerCustomizedPanelV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) PopUps(ctx context.Context, in *PopUpsReq, opts ...grpc.CallOption) (*PopUpsReply, error) {
	out := new(PopUpsReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/PopUps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetTabExt(ctx context.Context, in *GetTabExtReq, opts ...grpc.CallOption) (*GetTabExtRep, error) {
	out := new(GetTabExtRep)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/GetTabExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) FrontPage(ctx context.Context, in *FrontPageReq, opts ...grpc.CallOption) (*FrontPageResp, error) {
	out := new(FrontPageResp)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/FrontPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) IsUploader(ctx context.Context, in *IsUploaderReq, opts ...grpc.CallOption) (*IsUploaderReply, error) {
	out := new(IsUploaderReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/IsUploader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) HomeSections(ctx context.Context, in *HomeSectionsRequest, opts ...grpc.CallOption) (*HomeSectionsReply, error) {
	out := new(HomeSectionsReply)
	err := c.cc.Invoke(ctx, "/resource.service.v1.Resource/HomeSections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
type ResourceServer interface {
	//相关推荐列表
	//-400:RequestErr -404:NothingFound
	Relate(context.Context, *RelateRequest) (*SpecialReply, error)
	// 获取web_rcmd
	WebRcmd(context.Context, *NoArgRequest) (*WebRcmdReply, error)
	// 资源位banners
	Banners2(context.Context, *BannersRequest) (*BannersReply, error)
	FeedBanners(context.Context, *FeedBannersRequest) (*FeedBannersReply, error)
	// 获取 404 配置
	CustomConfig(context.Context, *CustomConfigRequest) (*CustomConfigReply, error)
	// 获取入口是否屏蔽
	EntrancesIsHidden(context.Context, *EntrancesIsHiddenRequest) (*EntrancesIsHiddenReply, error)
	// 获取 搜索OGV后台sid值
	SearchOgv(context.Context, *SearchOgvReq) (*SearchOgvReply, error)
	// 获取运营资源皮肤配置
	SkinConf(context.Context, *NoArgRequest) (*SkinConfReply, error)
	// 获取web player icon配置数据
	WebPlayerIcon(context.Context, *WebPlayerIconRequest) (*WebPlayerIconReply, error)
	// 获取模块icon资源配置
	MngIcon(context.Context, *MngIconRequest) (*MngIconReply, error)
	// 获取我的页模块配置
	MineSections(context.Context, *MineSectionsRequest) (*MineSectionsReply, error)
	// audit
	AppAudit(context.Context, *NoArgRequest) (*AuditReply, error)
	// card_follow
	CardFollow(context.Context, *NoArgRequest) (*CardFollowReply, error)
	// feed tab Menu
	Menu(context.Context, *NoArgRequest) (*MenuReply, error)
	// feed Active
	Active(context.Context, *NoArgRequest) (*ActiveReply, error)
	// feed Special card
	Special(context.Context, *NoArgRequest) (*SpecialCardReply, error)
	// feed game DownLoad card
	DownLoad(context.Context, *NoArgRequest) (*DownLoadCardReply, error)
	// feed converge card
	Converge(context.Context, *NoArgRequest) (*ConvergeCardReply, error)
	// 获取在线配置
	ParamList(context.Context, *ParamReq) (*ParamReply, error)
	// 获取是否点击过tab运营资源
	MenuExtVer(context.Context, *MenuExtVerReq) (*MenuExtVerReply, error)
	// add tab运营资源
	AddMenuExtVer(context.Context, *AddMenuExtVerReq) (*AddMenuExtVerReply, error)
	// information region card
	InformationRegionCard(context.Context, *NoArgRequest) (*InformationRegionCardReply, error)
	// 天马卡片
	CardPosRecs(context.Context, *CardPosRecReplyRequest) (*CardPosRecReply, error)
	// gorpc接口迁移: 获取全部资源位数据
	ResourceAllNew(context.Context, *NoArgRequest) (*ResourceAllReply, error)
	// gorpc接口迁移: 获取全部内容投放数据
	AssignmentAllNew(context.Context, *NoArgRequest) (*AssignmentAllReply, error)
	// gorpc接口迁移: 获取默认banner配置
	DefBannerNew(context.Context, *NoArgRequest) (*DefBannerReply, error)
	// gorpc接口迁移: 获取banner配置
	ResourceNew(context.Context, *ResourceRequest) (*ResourceReply, error)
	// gorpc接口迁移: 批量获取默认banner配置
	ResourcesNew(context.Context, *ResourcesRequest) (*ResourcesReply, error)
	// gorpc接口迁移: Banners -> grpc Banners2
	// gorpc接口迁移: PasterAPP
	PasterAPPNew(context.Context, *PasterAPPRequest) (*PasterAPPReply, error)
	// gorpc接口迁移: IndexIcon
	IndexIconNew(context.Context, *NoArgRequest) (*IndexIconReply, error)
	// gorpc接口迁移: PlayerIcon
	PlayerIconNew(context.Context, *NoArgRequest) (*PlayerIconReply, error)
	// gorpc接口迁移: PlayerIcon2
	PlayerIcon2New(context.Context, *PlayerIconRequest) (*PlayerIconReply, error)
	// gorpc接口迁移: PlayerIcon2 -404 优化
	PlayerIcon2NewV2(context.Context, *PlayerIconRequest) (*PlayerIconV2Reply, error)
	// gorpc接口迁移: Cmtbox
	CmtboxNew(context.Context, *CmtboxRequest) (*CmtboxReply, error)
	// gorpc接口迁移: SideBars
	SideBarsNew(context.Context, *NoArgRequest) (*SideBarsReply, error)
	// gorpc接口迁移: AbTest
	AbTestNew(context.Context, *AbTestRequest) (*AbTestReply, error)
	// gorpc接口迁移: PasterCID
	PasterCIDNew(context.Context, *NoArgRequest) (*PasterCIDReply, error)
	// 单个查询运营tab数据
	AppActive(context.Context, *AppActiveRequest) (*AppActiveReply, error)
	// 天马运营tab menu
	AppMenu(context.Context, *AppMenusRequest) (*AppMenuReply, error)
	// 实时获取app entry配置
	GetAppEntryState(context.Context, *GetAppEntryStateReq) (*GetAppEntryStateRep, error)
	// 实时获取app entry配置 -404优化
	GetAppEntryStateV2(context.Context, *GetAppEntryStateReq) (*GetAppEntryStateV2Rep, error)
	// 获取ugc tab配置
	UgcTab(context.Context, *UgcTabReq) (*UgcTabReply, error)
	// 获取ugc tab配置 -404优化
	UgcTabV2(context.Context, *UgcTabReq) (*UgcTabV2Reply, error)
	// 批量获取ugc tab配置
	UgcTabBatch(context.Context, *UgcTabBatchReq) (*UgcTabBatchReply, error)
	// 获取S10分品类热门稿件aid集合
	GetS10PopEntranceAids(context.Context, *GetS10PopEntranceAidsReq) (*GetS10PopEntranceAidsReply, error)
	// 根据tid获取匹配的免流配置
	GetPlayerCustomizedPanel(context.Context, *GetPlayerCustomizedPanelReq) (*GetPlayerCustomizedPanelRep, error)
	// 根据tid获取匹配的免流配置-404优化
	GetPlayerCustomizedPanelV2(context.Context, *GetPlayerCustomizedPanelReq) (*GetPlayerCustomizedPanelV2Rep, error)
	// 业务弹窗规范
	PopUps(context.Context, *PopUpsReq) (*PopUpsReply, error)
	// 获取tab ext
	GetTabExt(context.Context, *GetTabExtReq) (*GetTabExtRep, error)
	// PC Web版头
	FrontPage(context.Context, *FrontPageReq) (*FrontPageResp, error)
	// 是否为up主
	IsUploader(context.Context, *IsUploaderReq) (*IsUploaderReply, error)
	// 获取首页模块配置
	HomeSections(context.Context, *HomeSectionsRequest) (*HomeSectionsReply, error)
}

// UnimplementedResourceServer can be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (*UnimplementedResourceServer) Relate(ctx context.Context, req *RelateRequest) (*SpecialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relate not implemented")
}
func (*UnimplementedResourceServer) WebRcmd(ctx context.Context, req *NoArgRequest) (*WebRcmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebRcmd not implemented")
}
func (*UnimplementedResourceServer) Banners2(ctx context.Context, req *BannersRequest) (*BannersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Banners2 not implemented")
}
func (*UnimplementedResourceServer) FeedBanners(ctx context.Context, req *FeedBannersRequest) (*FeedBannersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedBanners not implemented")
}
func (*UnimplementedResourceServer) CustomConfig(ctx context.Context, req *CustomConfigRequest) (*CustomConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomConfig not implemented")
}
func (*UnimplementedResourceServer) EntrancesIsHidden(ctx context.Context, req *EntrancesIsHiddenRequest) (*EntrancesIsHiddenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntrancesIsHidden not implemented")
}
func (*UnimplementedResourceServer) SearchOgv(ctx context.Context, req *SearchOgvReq) (*SearchOgvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOgv not implemented")
}
func (*UnimplementedResourceServer) SkinConf(ctx context.Context, req *NoArgRequest) (*SkinConfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkinConf not implemented")
}
func (*UnimplementedResourceServer) WebPlayerIcon(ctx context.Context, req *WebPlayerIconRequest) (*WebPlayerIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebPlayerIcon not implemented")
}
func (*UnimplementedResourceServer) MngIcon(ctx context.Context, req *MngIconRequest) (*MngIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MngIcon not implemented")
}
func (*UnimplementedResourceServer) MineSections(ctx context.Context, req *MineSectionsRequest) (*MineSectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineSections not implemented")
}
func (*UnimplementedResourceServer) AppAudit(ctx context.Context, req *NoArgRequest) (*AuditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppAudit not implemented")
}
func (*UnimplementedResourceServer) CardFollow(ctx context.Context, req *NoArgRequest) (*CardFollowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardFollow not implemented")
}
func (*UnimplementedResourceServer) Menu(ctx context.Context, req *NoArgRequest) (*MenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Menu not implemented")
}
func (*UnimplementedResourceServer) Active(ctx context.Context, req *NoArgRequest) (*ActiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (*UnimplementedResourceServer) Special(ctx context.Context, req *NoArgRequest) (*SpecialCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Special not implemented")
}
func (*UnimplementedResourceServer) DownLoad(ctx context.Context, req *NoArgRequest) (*DownLoadCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownLoad not implemented")
}
func (*UnimplementedResourceServer) Converge(ctx context.Context, req *NoArgRequest) (*ConvergeCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Converge not implemented")
}
func (*UnimplementedResourceServer) ParamList(ctx context.Context, req *ParamReq) (*ParamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParamList not implemented")
}
func (*UnimplementedResourceServer) MenuExtVer(ctx context.Context, req *MenuExtVerReq) (*MenuExtVerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuExtVer not implemented")
}
func (*UnimplementedResourceServer) AddMenuExtVer(ctx context.Context, req *AddMenuExtVerReq) (*AddMenuExtVerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMenuExtVer not implemented")
}
func (*UnimplementedResourceServer) InformationRegionCard(ctx context.Context, req *NoArgRequest) (*InformationRegionCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformationRegionCard not implemented")
}
func (*UnimplementedResourceServer) CardPosRecs(ctx context.Context, req *CardPosRecReplyRequest) (*CardPosRecReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardPosRecs not implemented")
}
func (*UnimplementedResourceServer) ResourceAllNew(ctx context.Context, req *NoArgRequest) (*ResourceAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceAllNew not implemented")
}
func (*UnimplementedResourceServer) AssignmentAllNew(ctx context.Context, req *NoArgRequest) (*AssignmentAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignmentAllNew not implemented")
}
func (*UnimplementedResourceServer) DefBannerNew(ctx context.Context, req *NoArgRequest) (*DefBannerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefBannerNew not implemented")
}
func (*UnimplementedResourceServer) ResourceNew(ctx context.Context, req *ResourceRequest) (*ResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceNew not implemented")
}
func (*UnimplementedResourceServer) ResourcesNew(ctx context.Context, req *ResourcesRequest) (*ResourcesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourcesNew not implemented")
}
func (*UnimplementedResourceServer) PasterAPPNew(ctx context.Context, req *PasterAPPRequest) (*PasterAPPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasterAPPNew not implemented")
}
func (*UnimplementedResourceServer) IndexIconNew(ctx context.Context, req *NoArgRequest) (*IndexIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexIconNew not implemented")
}
func (*UnimplementedResourceServer) PlayerIconNew(ctx context.Context, req *NoArgRequest) (*PlayerIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerIconNew not implemented")
}
func (*UnimplementedResourceServer) PlayerIcon2New(ctx context.Context, req *PlayerIconRequest) (*PlayerIconReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerIcon2New not implemented")
}
func (*UnimplementedResourceServer) PlayerIcon2NewV2(ctx context.Context, req *PlayerIconRequest) (*PlayerIconV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerIcon2NewV2 not implemented")
}
func (*UnimplementedResourceServer) CmtboxNew(ctx context.Context, req *CmtboxRequest) (*CmtboxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmtboxNew not implemented")
}
func (*UnimplementedResourceServer) SideBarsNew(ctx context.Context, req *NoArgRequest) (*SideBarsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SideBarsNew not implemented")
}
func (*UnimplementedResourceServer) AbTestNew(ctx context.Context, req *AbTestRequest) (*AbTestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbTestNew not implemented")
}
func (*UnimplementedResourceServer) PasterCIDNew(ctx context.Context, req *NoArgRequest) (*PasterCIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasterCIDNew not implemented")
}
func (*UnimplementedResourceServer) AppActive(ctx context.Context, req *AppActiveRequest) (*AppActiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppActive not implemented")
}
func (*UnimplementedResourceServer) AppMenu(ctx context.Context, req *AppMenusRequest) (*AppMenuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppMenu not implemented")
}
func (*UnimplementedResourceServer) GetAppEntryState(ctx context.Context, req *GetAppEntryStateReq) (*GetAppEntryStateRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppEntryState not implemented")
}
func (*UnimplementedResourceServer) GetAppEntryStateV2(ctx context.Context, req *GetAppEntryStateReq) (*GetAppEntryStateV2Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppEntryStateV2 not implemented")
}
func (*UnimplementedResourceServer) UgcTab(ctx context.Context, req *UgcTabReq) (*UgcTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgcTab not implemented")
}
func (*UnimplementedResourceServer) UgcTabV2(ctx context.Context, req *UgcTabReq) (*UgcTabV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgcTabV2 not implemented")
}
func (*UnimplementedResourceServer) UgcTabBatch(ctx context.Context, req *UgcTabBatchReq) (*UgcTabBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UgcTabBatch not implemented")
}
func (*UnimplementedResourceServer) GetS10PopEntranceAids(ctx context.Context, req *GetS10PopEntranceAidsReq) (*GetS10PopEntranceAidsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetS10PopEntranceAids not implemented")
}
func (*UnimplementedResourceServer) GetPlayerCustomizedPanel(ctx context.Context, req *GetPlayerCustomizedPanelReq) (*GetPlayerCustomizedPanelRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCustomizedPanel not implemented")
}
func (*UnimplementedResourceServer) GetPlayerCustomizedPanelV2(ctx context.Context, req *GetPlayerCustomizedPanelReq) (*GetPlayerCustomizedPanelV2Rep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCustomizedPanelV2 not implemented")
}
func (*UnimplementedResourceServer) PopUps(ctx context.Context, req *PopUpsReq) (*PopUpsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopUps not implemented")
}
func (*UnimplementedResourceServer) GetTabExt(ctx context.Context, req *GetTabExtReq) (*GetTabExtRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTabExt not implemented")
}
func (*UnimplementedResourceServer) FrontPage(ctx context.Context, req *FrontPageReq) (*FrontPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontPage not implemented")
}
func (*UnimplementedResourceServer) IsUploader(ctx context.Context, req *IsUploaderReq) (*IsUploaderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUploader not implemented")
}
func (*UnimplementedResourceServer) HomeSections(ctx context.Context, req *HomeSectionsRequest) (*HomeSectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeSections not implemented")
}

func RegisterResourceServer(s *grpc.Server, srv ResourceServer) {
	s.RegisterService(&_Resource_serviceDesc, srv)
}

func _Resource_Relate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Relate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/Relate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Relate(ctx, req.(*RelateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_WebRcmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).WebRcmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/WebRcmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).WebRcmd(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Banners2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Banners2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/Banners2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Banners2(ctx, req.(*BannersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_FeedBanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedBannersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).FeedBanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/FeedBanners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).FeedBanners(ctx, req.(*FeedBannersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_CustomConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).CustomConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/CustomConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).CustomConfig(ctx, req.(*CustomConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_EntrancesIsHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntrancesIsHiddenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).EntrancesIsHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/EntrancesIsHidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).EntrancesIsHidden(ctx, req.(*EntrancesIsHiddenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_SearchOgv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOgvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).SearchOgv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/SearchOgv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).SearchOgv(ctx, req.(*SearchOgvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_SkinConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).SkinConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/SkinConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).SkinConf(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_WebPlayerIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPlayerIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).WebPlayerIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/WebPlayerIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).WebPlayerIcon(ctx, req.(*WebPlayerIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_MngIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MngIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).MngIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/MngIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).MngIcon(ctx, req.(*MngIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_MineSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).MineSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/MineSections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).MineSections(ctx, req.(*MineSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_AppAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AppAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/AppAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AppAudit(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_CardFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).CardFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/CardFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).CardFollow(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Menu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Menu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/Menu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Menu(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Active_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Active(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/Active",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Active(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Special_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Special(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/Special",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Special(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_DownLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).DownLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/DownLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).DownLoad(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Converge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Converge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/Converge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Converge(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_ParamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).ParamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/ParamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).ParamList(ctx, req.(*ParamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_MenuExtVer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuExtVerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).MenuExtVer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/MenuExtVer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).MenuExtVer(ctx, req.(*MenuExtVerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_AddMenuExtVer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMenuExtVerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AddMenuExtVer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/AddMenuExtVer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AddMenuExtVer(ctx, req.(*AddMenuExtVerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_InformationRegionCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).InformationRegionCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/InformationRegionCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).InformationRegionCard(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_CardPosRecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardPosRecReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).CardPosRecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/CardPosRecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).CardPosRecs(ctx, req.(*CardPosRecReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_ResourceAllNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).ResourceAllNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/ResourceAllNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).ResourceAllNew(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_AssignmentAllNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AssignmentAllNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/AssignmentAllNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AssignmentAllNew(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_DefBannerNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).DefBannerNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/DefBannerNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).DefBannerNew(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_ResourceNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).ResourceNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/ResourceNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).ResourceNew(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_ResourcesNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).ResourcesNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/ResourcesNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).ResourcesNew(ctx, req.(*ResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_PasterAPPNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasterAPPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).PasterAPPNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/PasterAPPNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).PasterAPPNew(ctx, req.(*PasterAPPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_IndexIconNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).IndexIconNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/IndexIconNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).IndexIconNew(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_PlayerIconNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).PlayerIconNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/PlayerIconNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).PlayerIconNew(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_PlayerIcon2New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).PlayerIcon2New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/PlayerIcon2New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).PlayerIcon2New(ctx, req.(*PlayerIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_PlayerIcon2NewV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).PlayerIcon2NewV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/PlayerIcon2NewV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).PlayerIcon2NewV2(ctx, req.(*PlayerIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_CmtboxNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmtboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).CmtboxNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/CmtboxNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).CmtboxNew(ctx, req.(*CmtboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_SideBarsNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).SideBarsNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/SideBarsNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).SideBarsNew(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_AbTestNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AbTestNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/AbTestNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AbTestNew(ctx, req.(*AbTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_PasterCIDNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).PasterCIDNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/PasterCIDNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).PasterCIDNew(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_AppActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AppActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/AppActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AppActive(ctx, req.(*AppActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_AppMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AppMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/AppMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AppMenu(ctx, req.(*AppMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetAppEntryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppEntryStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetAppEntryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/GetAppEntryState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetAppEntryState(ctx, req.(*GetAppEntryStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetAppEntryStateV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppEntryStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetAppEntryStateV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/GetAppEntryStateV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetAppEntryStateV2(ctx, req.(*GetAppEntryStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_UgcTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgcTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).UgcTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/UgcTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).UgcTab(ctx, req.(*UgcTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_UgcTabV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgcTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).UgcTabV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/UgcTabV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).UgcTabV2(ctx, req.(*UgcTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_UgcTabBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UgcTabBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).UgcTabBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/UgcTabBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).UgcTabBatch(ctx, req.(*UgcTabBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetS10PopEntranceAids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetS10PopEntranceAidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetS10PopEntranceAids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/GetS10PopEntranceAids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetS10PopEntranceAids(ctx, req.(*GetS10PopEntranceAidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetPlayerCustomizedPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCustomizedPanelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetPlayerCustomizedPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/GetPlayerCustomizedPanel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetPlayerCustomizedPanel(ctx, req.(*GetPlayerCustomizedPanelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetPlayerCustomizedPanelV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCustomizedPanelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetPlayerCustomizedPanelV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/GetPlayerCustomizedPanelV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetPlayerCustomizedPanelV2(ctx, req.(*GetPlayerCustomizedPanelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_PopUps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopUpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).PopUps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/PopUps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).PopUps(ctx, req.(*PopUpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetTabExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTabExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetTabExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/GetTabExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetTabExt(ctx, req.(*GetTabExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_FrontPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).FrontPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/FrontPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).FrontPage(ctx, req.(*FrontPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_IsUploader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUploaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).IsUploader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/IsUploader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).IsUploader(ctx, req.(*IsUploaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_HomeSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).HomeSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v1.Resource/HomeSections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).HomeSections(ctx, req.(*HomeSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resource.service.v1.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Relate",
			Handler:    _Resource_Relate_Handler,
		},
		{
			MethodName: "WebRcmd",
			Handler:    _Resource_WebRcmd_Handler,
		},
		{
			MethodName: "Banners2",
			Handler:    _Resource_Banners2_Handler,
		},
		{
			MethodName: "FeedBanners",
			Handler:    _Resource_FeedBanners_Handler,
		},
		{
			MethodName: "CustomConfig",
			Handler:    _Resource_CustomConfig_Handler,
		},
		{
			MethodName: "EntrancesIsHidden",
			Handler:    _Resource_EntrancesIsHidden_Handler,
		},
		{
			MethodName: "SearchOgv",
			Handler:    _Resource_SearchOgv_Handler,
		},
		{
			MethodName: "SkinConf",
			Handler:    _Resource_SkinConf_Handler,
		},
		{
			MethodName: "WebPlayerIcon",
			Handler:    _Resource_WebPlayerIcon_Handler,
		},
		{
			MethodName: "MngIcon",
			Handler:    _Resource_MngIcon_Handler,
		},
		{
			MethodName: "MineSections",
			Handler:    _Resource_MineSections_Handler,
		},
		{
			MethodName: "AppAudit",
			Handler:    _Resource_AppAudit_Handler,
		},
		{
			MethodName: "CardFollow",
			Handler:    _Resource_CardFollow_Handler,
		},
		{
			MethodName: "Menu",
			Handler:    _Resource_Menu_Handler,
		},
		{
			MethodName: "Active",
			Handler:    _Resource_Active_Handler,
		},
		{
			MethodName: "Special",
			Handler:    _Resource_Special_Handler,
		},
		{
			MethodName: "DownLoad",
			Handler:    _Resource_DownLoad_Handler,
		},
		{
			MethodName: "Converge",
			Handler:    _Resource_Converge_Handler,
		},
		{
			MethodName: "ParamList",
			Handler:    _Resource_ParamList_Handler,
		},
		{
			MethodName: "MenuExtVer",
			Handler:    _Resource_MenuExtVer_Handler,
		},
		{
			MethodName: "AddMenuExtVer",
			Handler:    _Resource_AddMenuExtVer_Handler,
		},
		{
			MethodName: "InformationRegionCard",
			Handler:    _Resource_InformationRegionCard_Handler,
		},
		{
			MethodName: "CardPosRecs",
			Handler:    _Resource_CardPosRecs_Handler,
		},
		{
			MethodName: "ResourceAllNew",
			Handler:    _Resource_ResourceAllNew_Handler,
		},
		{
			MethodName: "AssignmentAllNew",
			Handler:    _Resource_AssignmentAllNew_Handler,
		},
		{
			MethodName: "DefBannerNew",
			Handler:    _Resource_DefBannerNew_Handler,
		},
		{
			MethodName: "ResourceNew",
			Handler:    _Resource_ResourceNew_Handler,
		},
		{
			MethodName: "ResourcesNew",
			Handler:    _Resource_ResourcesNew_Handler,
		},
		{
			MethodName: "PasterAPPNew",
			Handler:    _Resource_PasterAPPNew_Handler,
		},
		{
			MethodName: "IndexIconNew",
			Handler:    _Resource_IndexIconNew_Handler,
		},
		{
			MethodName: "PlayerIconNew",
			Handler:    _Resource_PlayerIconNew_Handler,
		},
		{
			MethodName: "PlayerIcon2New",
			Handler:    _Resource_PlayerIcon2New_Handler,
		},
		{
			MethodName: "PlayerIcon2NewV2",
			Handler:    _Resource_PlayerIcon2NewV2_Handler,
		},
		{
			MethodName: "CmtboxNew",
			Handler:    _Resource_CmtboxNew_Handler,
		},
		{
			MethodName: "SideBarsNew",
			Handler:    _Resource_SideBarsNew_Handler,
		},
		{
			MethodName: "AbTestNew",
			Handler:    _Resource_AbTestNew_Handler,
		},
		{
			MethodName: "PasterCIDNew",
			Handler:    _Resource_PasterCIDNew_Handler,
		},
		{
			MethodName: "AppActive",
			Handler:    _Resource_AppActive_Handler,
		},
		{
			MethodName: "AppMenu",
			Handler:    _Resource_AppMenu_Handler,
		},
		{
			MethodName: "GetAppEntryState",
			Handler:    _Resource_GetAppEntryState_Handler,
		},
		{
			MethodName: "GetAppEntryStateV2",
			Handler:    _Resource_GetAppEntryStateV2_Handler,
		},
		{
			MethodName: "UgcTab",
			Handler:    _Resource_UgcTab_Handler,
		},
		{
			MethodName: "UgcTabV2",
			Handler:    _Resource_UgcTabV2_Handler,
		},
		{
			MethodName: "UgcTabBatch",
			Handler:    _Resource_UgcTabBatch_Handler,
		},
		{
			MethodName: "GetS10PopEntranceAids",
			Handler:    _Resource_GetS10PopEntranceAids_Handler,
		},
		{
			MethodName: "GetPlayerCustomizedPanel",
			Handler:    _Resource_GetPlayerCustomizedPanel_Handler,
		},
		{
			MethodName: "GetPlayerCustomizedPanelV2",
			Handler:    _Resource_GetPlayerCustomizedPanelV2_Handler,
		},
		{
			MethodName: "PopUps",
			Handler:    _Resource_PopUps_Handler,
		},
		{
			MethodName: "GetTabExt",
			Handler:    _Resource_GetTabExt_Handler,
		},
		{
			MethodName: "FrontPage",
			Handler:    _Resource_FrontPage_Handler,
		},
		{
			MethodName: "IsUploader",
			Handler:    _Resource_IsUploader_Handler,
		},
		{
			MethodName: "HomeSections",
			Handler:    _Resource_HomeSections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *MenuExtVerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuExtVerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuExtVerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MenuExtVerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuExtVerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuExtVerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Click != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Click))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddMenuExtVerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMenuExtVerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMenuExtVerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddMenuExtVerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMenuExtVerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMenuExtVerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NoArgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoArgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Param) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Param) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Param) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Department != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Department))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Conditions) > 0 {
		i -= len(m.Conditions)
		copy(dAtA[i:], m.Conditions)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Conditions)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x30
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParamReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Plats) > 0 {
		dAtA2 := make([]byte, len(m.Plats)*10)
		var j1 int
		for _, num1 := range m.Plats {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParamReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Hidden) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hidden) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hidden) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HideDynamic != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HideDynamic))
		i--
		dAtA[i] = 0x68
	}
	if len(m.ChannelFuzzy) > 0 {
		for iNdEx := len(m.ChannelFuzzy) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChannelFuzzy[iNdEx])
			copy(dAtA[i:], m.ChannelFuzzy[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.ChannelFuzzy[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.ModuleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.HiddenCondition) > 0 {
		i -= len(m.HiddenCondition)
		copy(dAtA[i:], m.HiddenCondition)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HiddenCondition)))
		i--
		dAtA[i] = 0x52
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x48
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x40
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x38
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChannelMap) > 0 {
		for k := range m.ChannelMap {
			v := m.ChannelMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x18
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HiddenLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HiddenLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HiddenLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x28
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Conditions) > 0 {
		i -= len(m.Conditions)
		copy(dAtA[i:], m.Conditions)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Conditions)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EntranceHiddenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntranceHiddenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntranceHiddenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HiddenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HiddenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HiddenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		for iNdEx := len(m.Limit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntrancesIsHiddenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntrancesIsHiddenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntrancesIsHiddenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OidItems) > 0 {
		for k := range m.OidItems {
			v := m.OidItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x20
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x18
	}
	if m.Otype != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Otype))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Oids) > 0 {
		dAtA6 := make([]byte, len(m.Oids)*10)
		var j5 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OidList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OidList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OidList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Oids) > 0 {
		dAtA8 := make([]byte, len(m.Oids)*10)
		var j7 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintApi(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntrancesIsHiddenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntrancesIsHiddenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntrancesIsHiddenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HideDynamic {
		i--
		if m.HideDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ModuleInfos) > 0 {
		for k := range m.ModuleInfos {
			v := m.ModuleInfos[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Infos) > 0 {
		for k := range m.Infos {
			v := m.Infos[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RelateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchOgvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchOgvReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchOgvReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchOgvReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchOgvReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchOgvReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sids) > 0 {
		dAtA10 := make([]byte, len(m.Sids)*10)
		var j9 int
		for _, num1 := range m.Sids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintApi(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedBannersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedBannersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedBannersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SplashId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SplashId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.AdExtra) > 0 {
		i -= len(m.AdExtra)
		copy(dAtA[i:], m.AdExtra)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AdExtra)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.OpenEvent) > 0 {
		i -= len(m.OpenEvent)
		copy(dAtA[i:], m.OpenEvent)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenEvent)))
		i--
		dAtA[i] = 0x72
	}
	if m.IsAd {
		i--
		if m.IsAd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ResId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResId))
		i--
		dAtA[i] = 0x30
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x28
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x18
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Meta) > 0 {
		for iNdEx := len(m.Meta) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Meta[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BannerMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannerMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InlineId) > 0 {
		i -= len(m.InlineId)
		copy(dAtA[i:], m.InlineId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InlineId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InlineType) > 0 {
		i -= len(m.InlineType)
		copy(dAtA[i:], m.InlineType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InlineType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeedBannersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedBannersReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedBannersReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Banner) > 0 {
		for iNdEx := len(m.Banner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Banner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BannersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SplashId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SplashId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.AdExtra) > 0 {
		i -= len(m.AdExtra)
		copy(dAtA[i:], m.AdExtra)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AdExtra)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.OpenEvent) > 0 {
		i -= len(m.OpenEvent)
		copy(dAtA[i:], m.OpenEvent)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenEvent)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsAd {
		i--
		if m.IsAd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ResIDs) > 0 {
		i -= len(m.ResIDs)
		copy(dAtA[i:], m.ResIDs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ResIDs)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x18
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BannersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannersReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannersReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Banners) > 0 {
		for k := range m.Banners {
			v := m.Banners[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Banners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Banners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Banners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Banners) > 0 {
		for iNdEx := len(m.Banners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Banners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Banner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Banner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Banner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InlineBarrageSwitch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InlineBarrageSwitch))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.InlineUseSame != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InlineUseSame))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	{
		size, err := m.BannerMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xca
	if m.SplashId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SplashId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if m.CreativeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreativeType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if m.ServerType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ServerType))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.Index != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if len(m.ClientIp) > 0 {
		i -= len(m.ClientIp)
		copy(dAtA[i:], m.ClientIp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientIp)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.ClickUrl) > 0 {
		i -= len(m.ClickUrl)
		copy(dAtA[i:], m.ClickUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClickUrl)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ShowUrl) > 0 {
		i -= len(m.ShowUrl)
		copy(dAtA[i:], m.ShowUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShowUrl)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.AdCb) > 0 {
		i -= len(m.AdCb)
		copy(dAtA[i:], m.AdCb)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AdCb)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.CmMark != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CmMark))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.IsAdLoc {
		i--
		if m.IsAdLoc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.IsAdReplace {
		i--
		if m.IsAdReplace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.IsAd {
		i--
		if m.IsAd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.SrcId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SrcId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.CreativeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreativeId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.ResourceId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.MTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.End != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Start != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Area) > 0 {
		i -= len(m.Area)
		copy(dAtA[i:], m.Area)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Condition) > 0 {
		i -= len(m.Condition)
		copy(dAtA[i:], m.Condition)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Condition)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x22
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x18
	}
	if m.ParentId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RecReason) > 0 {
		i -= len(m.RecReason)
		copy(dAtA[i:], m.RecReason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecReason)))
		i--
		dAtA[i] = 0x62
	}
	if m.Position != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Siz) > 0 {
		i -= len(m.Siz)
		copy(dAtA[i:], m.Siz)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Siz)))
		i--
		dAtA[i] = 0x52
	}
	if m.Card != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Card))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Corner) > 0 {
		i -= len(m.Corner)
		copy(dAtA[i:], m.Corner)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Corner)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReValue) > 0 {
		i -= len(m.ReValue)
		copy(dAtA[i:], m.ReValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Scover) > 0 {
		i -= len(m.Scover)
		copy(dAtA[i:], m.Scover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Scover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WebRcmdReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebRcmdReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRcmdReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RcmdCard) > 0 {
		for iNdEx := len(m.RcmdCard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RcmdCard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rcmd) > 0 {
		for iNdEx := len(m.Rcmd) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rcmd[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WebRcmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebRcmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRcmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x40
	}
	if m.Priority != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AvID) > 0 {
		dAtA14 := make([]byte, len(m.AvID)*10)
		var j13 int
		for _, num1 := range m.AvID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintApi(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tag) > 0 {
		dAtA16 := make([]byte, len(m.Tag)*10)
		var j15 int
		for _, num1 := range m.Tag {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintApi(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Partition) > 0 {
		dAtA18 := make([]byte, len(m.Partition)*10)
		var j17 int
		for _, num1 := range m.Partition {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintApi(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CardValue) > 0 {
		i -= len(m.CardValue)
		copy(dAtA[i:], m.CardValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardValue)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CardType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WebRcmdCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebRcmdCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRcmdCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReValue) > 0 {
		i -= len(m.ReValue)
		copy(dAtA[i:], m.ReValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.TP != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TP))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CustomConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomConfigReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomConfigReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x50
	}
	if m.ETime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ETime))
		i--
		dAtA[i] = 0x48
	}
	if m.STime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.STime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ImageBig) > 0 {
		i -= len(m.ImageBig)
		copy(dAtA[i:], m.ImageBig)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImageBig)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HighlightContent) > 0 {
		i -= len(m.HighlightContent)
		copy(dAtA[i:], m.HighlightContent)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HighlightContent)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.TP != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TP))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SkinExtState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinExtState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkinExtState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SkinExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkinExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DressUpValue) > 0 {
		i -= len(m.DressUpValue)
		copy(dAtA[i:], m.DressUpValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DressUpValue)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.DressUpType) > 0 {
		i -= len(m.DressUpType)
		copy(dAtA[i:], m.DressUpType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DressUpType)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.UserScopeValue) > 0 {
		i -= len(m.UserScopeValue)
		copy(dAtA[i:], m.UserScopeValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserScopeValue)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UserScopeType) > 0 {
		i -= len(m.UserScopeType)
		copy(dAtA[i:], m.UserScopeType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserScopeType)))
		i--
		dAtA[i] = 0x5a
	}
	if m.LocationPolicyGID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LocationPolicyGID))
		i--
		dAtA[i] = 0x50
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x48
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x40
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SkinName) > 0 {
		i -= len(m.SkinName)
		copy(dAtA[i:], m.SkinName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SkinName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SkinID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SkinID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SkinLimitState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinLimitState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkinLimitState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SkinLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkinLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x40
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Conditions) > 0 {
		i -= len(m.Conditions)
		copy(dAtA[i:], m.Conditions)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Conditions)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SkinConfReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinConfReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkinConfReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SkinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkinInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		for iNdEx := len(m.Limit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebPlayerIconRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebPlayerIconRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebPlayerIconRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x28
	}
	if m.SeasonID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x20
	}
	if m.TypeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TagIDs) > 0 {
		dAtA21 := make([]byte, len(m.TagIDs)*10)
		var j20 int
		for _, num1 := range m.TagIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintApi(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WebPlayerIconReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebPlayerIconReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebPlayerIconReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Icon != nil {
		{
			size, err := m.Icon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Hash2) > 0 {
		i -= len(m.Hash2)
		copy(dAtA[i:], m.Hash2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hash2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.URL2) > 0 {
		i -= len(m.URL2)
		copy(dAtA[i:], m.URL2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash1) > 0 {
		i -= len(m.Hash1)
		copy(dAtA[i:], m.Hash1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hash1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.URL1) > 0 {
		i -= len(m.URL1)
		copy(dAtA[i:], m.URL1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MngIconRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MngIconRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MngIconRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Oids) > 0 {
		dAtA24 := make([]byte, len(m.Oids)*10)
		var j23 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintApi(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MngIconReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MngIconReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MngIconReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Info) > 0 {
		for k := range m.Info {
			v := m.Info[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MngIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MngIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MngIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x40
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Module) > 0 {
		for iNdEx := len(m.Module) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Module[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.EffectUrl) > 0 {
		i -= len(m.EffectUrl)
		copy(dAtA[i:], m.EffectUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EffectUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EffectGroup != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EffectGroup))
		i--
		dAtA[i] = 0x20
	}
	if m.GlobalRed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GlobalRed))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IconModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IconModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IconModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MineSectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MineSectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MineSectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x52
	}
	if m.FansCount != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FansCount))
		i--
		dAtA[i] = 0x48
	}
	if m.IsLiveHost {
		i--
		if m.IsLiveHost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsUploader {
		i--
		if m.IsUploader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MineSectionsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MineSectionsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MineSectionsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HomeSectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HomeSectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HomeSectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HomeSectionsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HomeSectionsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HomeSectionsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Section) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Section) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Section) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OpStyleType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OpStyleType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsMng != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsMng))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.AuditShow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AuditShow))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.BackgroundColor) > 0 {
		i -= len(m.BackgroundColor)
		copy(dAtA[i:], m.BackgroundColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackgroundColor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Background) > 0 {
		i -= len(m.Background)
		copy(dAtA[i:], m.Background)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Background)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SubtitleColor) > 0 {
		i -= len(m.SubtitleColor)
		copy(dAtA[i:], m.SubtitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubtitleColor)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SubtitleUrl) > 0 {
		i -= len(m.SubtitleUrl)
		copy(dAtA[i:], m.SubtitleUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubtitleUrl)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TitleColor) > 0 {
		i -= len(m.TitleColor)
		copy(dAtA[i:], m.TitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleColor)))
		i--
		dAtA[i] = 0x42
	}
	if m.ButtonStyle != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ButtonStyle))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ButtonIcon) > 0 {
		i -= len(m.ButtonIcon)
		copy(dAtA[i:], m.ButtonIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ButtonIcon)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ButtonUrl) > 0 {
		i -= len(m.ButtonUrl)
		copy(dAtA[i:], m.ButtonUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ButtonUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ButtonName) > 0 {
		i -= len(m.ButtonName)
		copy(dAtA[i:], m.ButtonName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ButtonName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Style != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SectionItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OpLinkContainerColor) > 0 {
		i -= len(m.OpLinkContainerColor)
		copy(dAtA[i:], m.OpLinkContainerColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpLinkContainerColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.OpBackgroundColor) > 0 {
		i -= len(m.OpBackgroundColor)
		copy(dAtA[i:], m.OpBackgroundColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpBackgroundColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.OpTitleColor) > 0 {
		i -= len(m.OpTitleColor)
		copy(dAtA[i:], m.OpTitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpTitleColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.RedDotUrl) > 0 {
		i -= len(m.RedDotUrl)
		copy(dAtA[i:], m.RedDotUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedDotUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.LogoSelected) > 0 {
		i -= len(m.LogoSelected)
		copy(dAtA[i:], m.LogoSelected)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoSelected)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Animate) > 0 {
		i -= len(m.Animate)
		copy(dAtA[i:], m.Animate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Animate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.TabId) > 0 {
		i -= len(m.TabId)
		copy(dAtA[i:], m.TabId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.OpLinkType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OpLinkType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.OpLinkIcon) > 0 {
		i -= len(m.OpLinkIcon)
		copy(dAtA[i:], m.OpLinkIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpLinkIcon)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.OpLinkText) > 0 {
		i -= len(m.OpLinkText)
		copy(dAtA[i:], m.OpLinkText)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpLinkText)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.OpTitleIcon) > 0 {
		i -= len(m.OpTitleIcon)
		copy(dAtA[i:], m.OpTitleIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpTitleIcon)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.OpSubTitle) > 0 {
		i -= len(m.OpSubTitle)
		copy(dAtA[i:], m.OpSubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpSubTitle)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OpTitle) > 0 {
		i -= len(m.OpTitle)
		copy(dAtA[i:], m.OpTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpTitle)))
		i--
		dAtA[i] = 0x5a
	}
	if m.RedDotForNew {
		i--
		if m.RedDotForNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.MngIcon != nil {
		{
			size, err := m.MngIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Display != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Display))
		i--
		dAtA[i] = 0x40
	}
	if m.GlobalRedDot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GlobalRedDot))
		i--
		dAtA[i] = 0x38
	}
	if m.RedDot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RedDot))
		i--
		dAtA[i] = 0x30
	}
	if m.NeedLogin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NeedLogin))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SectionItemOpLinkType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SectionItemOpLinkType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SectionItemOpLinkType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InformationRegionCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InformationRegionCardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InformationRegionCardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InformationRegionCards) > 0 {
		for iNdEx := len(m.InformationRegionCards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InformationRegionCards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InformationRegionCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InformationRegionCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InformationRegionCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PositionIdx != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PositionIdx))
		i--
		dAtA[i] = 0x28
	}
	if m.IsCover != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsCover))
		i--
		dAtA[i] = 0x20
	}
	if m.CardPosition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardPosition))
		i--
		dAtA[i] = 0x18
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x10
	}
	if m.CardType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetS10PopEntranceAidsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetS10PopEntranceAidsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetS10PopEntranceAidsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetS10PopEntranceAidsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetS10PopEntranceAidsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetS10PopEntranceAidsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Aids) > 0 {
		dAtA28 := make([]byte, len(m.Aids)*10)
		var j27 int
		for _, num1 := range m.Aids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintApi(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceAllReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceAllReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceAllReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAd != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsAd))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Level != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x78
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x70
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Assignments) > 0 {
		for iNdEx := len(m.Assignments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assignments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Mark) > 0 {
		i -= len(m.Mark)
		copy(dAtA[i:], m.Mark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Mark)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Preview) > 0 {
		i -= len(m.Preview)
		copy(dAtA[i:], m.Preview)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Preview)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Size_) > 0 {
		i -= len(m.Size_)
		copy(dAtA[i:], m.Size_)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Size_)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Position != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x30
	}
	if m.Counter != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x28
	}
	if m.Parent != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Platform != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Platform))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Assignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Assignment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Assignment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.ActivityEtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityEtime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.ActivityStime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityStime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ActivityId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivityId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PlayerCategory != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerCategory))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x72
	}
	if m.Atype != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Atype))
		i--
		dAtA[i] = 0x68
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x60
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x5d
	}
	if len(m.Agency) > 0 {
		i -= len(m.Agency)
		copy(dAtA[i:], m.Agency)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Agency)))
		i--
		dAtA[i] = 0x52
	}
	if m.Weight != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Litpic) > 0 {
		i -= len(m.Litpic)
		copy(dAtA[i:], m.Litpic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Litpic)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ResourceId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssignmentAllReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignmentAllReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentAllReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Assignments) > 0 {
		for iNdEx := len(m.Assignments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assignments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefBannerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefBannerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefBannerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefBanner != nil {
		{
			size, err := m.DefBanner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResourceReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourcesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourcesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResIDs) > 0 {
		dAtA32 := make([]byte, len(m.ResIDs)*10)
		var j31 int
		for _, num1 := range m.ResIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintApi(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourcesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourcesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Resources) > 0 {
		for k := range m.Resources {
			v := m.Resources[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PasterAPPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasterAPPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PasterAPPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TypeID) > 0 {
		i -= len(m.TypeID)
		copy(dAtA[i:], m.TypeID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TypeID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Aid) > 0 {
		i -= len(m.Aid)
		copy(dAtA[i:], m.Aid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Aid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AdType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AdType))
		i--
		dAtA[i] = 0x10
	}
	if m.Platform != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Platform))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PasterAPPReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasterAPPReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PasterAPPReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if m.AllowJump != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AllowJump))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndexIconReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexIconReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexIconReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IndexIcon) > 0 {
		for k := range m.IndexIcon {
			v := m.IndexIcon[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IndexIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IndexIconItem) > 0 {
		for iNdEx := len(m.IndexIconItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexIconItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IndexIconItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexIconItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexIconItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x60
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if m.Deltime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Deltime))
		i--
		dAtA[i] = 0x50
	}
	if m.Endtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Endtime))
		i--
		dAtA[i] = 0x48
	}
	if m.Sttime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sttime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Weight != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Links[iNdEx])
			copy(dAtA[i:], m.Links[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Links[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerIconRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIconRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerIconRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x32
	}
	if m.ShowPlayIcon {
		i--
		if m.ShowPlayIcon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if m.TypeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TagIDs) > 0 {
		dAtA36 := make([]byte, len(m.TagIDs)*10)
		var j35 int
		for _, num1 := range m.TagIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintApi(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0x12
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerIconV2Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIconV2Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerIconV2Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerIconReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIconReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerIconReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodragData != nil {
		{
			size, err := m.NodragData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.DragData != nil {
		{
			size, err := m.DragData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.DragRightPng) > 0 {
		i -= len(m.DragRightPng)
		copy(dAtA[i:], m.DragRightPng)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DragRightPng)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MiddlePng) > 0 {
		i -= len(m.MiddlePng)
		copy(dAtA[i:], m.MiddlePng)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MiddlePng)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DragLeftPng) > 0 {
		i -= len(m.DragLeftPng)
		copy(dAtA[i:], m.DragLeftPng)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DragLeftPng)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TypeValue) > 0 {
		i -= len(m.TypeValue)
		copy(dAtA[i:], m.TypeValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TypeValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Hash2) > 0 {
		i -= len(m.Hash2)
		copy(dAtA[i:], m.Hash2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hash2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url2) > 0 {
		i -= len(m.Url2)
		copy(dAtA[i:], m.Url2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash1) > 0 {
		i -= len(m.Hash1)
		copy(dAtA[i:], m.Hash1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hash1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url1) > 0 {
		i -= len(m.Url1)
		copy(dAtA[i:], m.Url1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IconData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IconData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IconData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpritsImg) > 0 {
		i -= len(m.SpritsImg)
		copy(dAtA[i:], m.SpritsImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpritsImg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetaJson) > 0 {
		i -= len(m.MetaJson)
		copy(dAtA[i:], m.MetaJson)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MetaJson)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CmtboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmtboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmtboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CmtboxReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmtboxReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmtboxReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.RenqiColor) > 0 {
		i -= len(m.RenqiColor)
		copy(dAtA[i:], m.RenqiColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RenqiColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.RenqiOffset) > 0 {
		i -= len(m.RenqiOffset)
		copy(dAtA[i:], m.RenqiOffset)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RenqiOffset)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.RenqiFmt) > 0 {
		i -= len(m.RenqiFmt)
		copy(dAtA[i:], m.RenqiFmt)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RenqiFmt)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RenqiFontsize) > 0 {
		i -= len(m.RenqiFontsize)
		copy(dAtA[i:], m.RenqiFontsize)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RenqiFontsize)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RenqiVisible) > 0 {
		i -= len(m.RenqiVisible)
		copy(dAtA[i:], m.RenqiVisible)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RenqiVisible)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintApi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TopMargin) > 0 {
		i -= len(m.TopMargin)
		copy(dAtA[i:], m.TopMargin)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TopMargin)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StyleParam) > 0 {
		i -= len(m.StyleParam)
		copy(dAtA[i:], m.StyleParam)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StyleParam)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Style) > 0 {
		i -= len(m.Style)
		copy(dAtA[i:], m.Style)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Style)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MaxOnscreen) > 0 {
		i -= len(m.MaxOnscreen)
		copy(dAtA[i:], m.MaxOnscreen)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MaxOnscreen)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SpeedFactor) > 0 {
		i -= len(m.SpeedFactor)
		copy(dAtA[i:], m.SpeedFactor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpeedFactor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SizeFactor) > 0 {
		i -= len(m.SizeFactor)
		copy(dAtA[i:], m.SizeFactor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SizeFactor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Server) > 0 {
		i -= len(m.Server)
		copy(dAtA[i:], m.Server)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Server)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LoadCid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LoadCid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SideBarsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SideBarsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SideBarsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		for k := range m.Limit {
			v := m.Limit[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SideBar) > 0 {
		for iNdEx := len(m.SideBar) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SideBar[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SideBar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SideBar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SideBar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WhiteUrlShow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WhiteUrlShow))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.Animate) > 0 {
		i -= len(m.Animate)
		copy(dAtA[i:], m.Animate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Animate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.RedDotLimit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RedDotLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.GlobalRedDot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GlobalRedDot))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.RedDotUrl) > 0 {
		i -= len(m.RedDotUrl)
		copy(dAtA[i:], m.RedDotUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedDotUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.TabId) > 0 {
		i -= len(m.TabId)
		copy(dAtA[i:], m.TabId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LogoSelected) > 0 {
		i -= len(m.LogoSelected)
		copy(dAtA[i:], m.LogoSelected)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoSelected)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Menu != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Menu))
		i--
		dAtA[i] = 0x78
	}
	if len(m.WhiteUrl) > 0 {
		i -= len(m.WhiteUrl)
		copy(dAtA[i:], m.WhiteUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WhiteUrl)))
		i--
		dAtA[i] = 0x72
	}
	if m.NeedLogin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NeedLogin))
		i--
		dAtA[i] = 0x68
	}
	if m.OnlineTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OnlineTime))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Conditions) > 0 {
		i -= len(m.Conditions)
		copy(dAtA[i:], m.Conditions)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Conditions)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x50
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x48
	}
	if m.Module != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Module))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogoWhite) > 0 {
		i -= len(m.LogoWhite)
		copy(dAtA[i:], m.LogoWhite)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoWhite)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x18
	}
	if m.Tip != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Tip))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SideBarLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SideBarLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SideBarLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SideBarLimitItem) > 0 {
		for iNdEx := len(m.SideBarLimitItem) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SideBarLimitItem[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SideBarLimitItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SideBarLimitItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SideBarLimitItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Condition) > 0 {
		i -= len(m.Condition)
		copy(dAtA[i:], m.Condition)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Condition)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AbTestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbTestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbTestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Groups) > 0 {
		i -= len(m.Groups)
		copy(dAtA[i:], m.Groups)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Groups)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AbTestReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbTestReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbTestReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Abtest) > 0 {
		for k := range m.Abtest {
			v := m.Abtest[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AbTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AbTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Utime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Utime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ParamValues) > 0 {
		i -= len(m.ParamValues)
		copy(dAtA[i:], m.ParamValues)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParamValues)))
		i--
		dAtA[i] = 0x22
	}
	if m.FlowPercent != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FlowPercent))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x12
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PasterCIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasterCIDReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PasterCIDReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Paster) > 0 {
		for k := range m.Paster {
			v := m.Paster[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTabExtReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTabExtReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTabExtReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tabs) > 0 {
		for iNdEx := len(m.Tabs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tabs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TType))
		i--
		dAtA[i] = 0x10
	}
	if m.TabId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTabExtRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTabExtRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTabExtRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TabExts) > 0 {
		for iNdEx := len(m.TabExts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TabExts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TabExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TabExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Click != nil {
		{
			size, err := m.Click.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.TType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.TabId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x78
	}
	if len(m.BgImage2) > 0 {
		i -= len(m.BgImage2)
		copy(dAtA[i:], m.BgImage2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImage2)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.BgImage1) > 0 {
		i -= len(m.BgImage1)
		copy(dAtA[i:], m.BgImage1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImage1)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TabBottomColor) > 0 {
		i -= len(m.TabBottomColor)
		copy(dAtA[i:], m.TabBottomColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabBottomColor)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TabMiddleColor) > 0 {
		i -= len(m.TabMiddleColor)
		copy(dAtA[i:], m.TabMiddleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabMiddleColor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TabTopColor) > 0 {
		i -= len(m.TabTopColor)
		copy(dAtA[i:], m.TabTopColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabTopColor)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BarColor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BarColor))
		i--
		dAtA[i] = 0x40
	}
	if len(m.FontColor) > 0 {
		i -= len(m.FontColor)
		copy(dAtA[i:], m.FontColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FontColor)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ActiveType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActiveType))
		i--
		dAtA[i] = 0x30
	}
	if m.Active != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Active))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ActiveIcon) > 0 {
		i -= len(m.ActiveIcon)
		copy(dAtA[i:], m.ActiveIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActiveIcon)))
		i--
		dAtA[i] = 0x22
	}
	if m.InactiveType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InactiveType))
		i--
		dAtA[i] = 0x18
	}
	if m.Inactive != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Inactive))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InactiveIcon) > 0 {
		i -= len(m.InactiveIcon)
		copy(dAtA[i:], m.InactiveIcon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InactiveIcon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Click) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Click) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Click) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsUploaderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUploaderReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsUploaderReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsUploaderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUploaderReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsUploaderReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsUploader {
		i--
		if m.IsUploader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MenuExtVerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuExtVerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Click != 0 {
		n += 1 + sovApi(uint64(m.Click))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddMenuExtVerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddMenuExtVerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoArgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Param) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Department != 0 {
		n += 1 + sovApi(uint64(m.Department))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParamReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Plats) > 0 {
		l = 0
		for _, e := range m.Plats {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParamReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Hidden) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ChannelMap) > 0 {
		for k, v := range m.ChannelMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	l = len(m.HiddenCondition)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ModuleId != 0 {
		n += 1 + sovApi(uint64(m.ModuleId))
	}
	if len(m.ChannelFuzzy) > 0 {
		for _, s := range m.ChannelFuzzy {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HideDynamic != 0 {
		n += 1 + sovApi(uint64(m.HideDynamic))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HiddenLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntranceHiddenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HiddenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Limit) > 0 {
		for _, e := range m.Limit {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntrancesIsHiddenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Otype != 0 {
		n += 1 + sovApi(uint64(m.Otype))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.OidItems) > 0 {
		for k, v := range m.OidItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OidList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntrancesIsHiddenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for k, v := range m.Infos {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if len(m.ModuleInfos) > 0 {
		for k, v := range m.ModuleInfos {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.HideDynamic {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchOgvReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchOgvReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sids) > 0 {
		l = 0
		for _, e := range m.Sids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedBannersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Meta) > 0 {
		for _, e := range m.Meta {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.ResId != 0 {
		n += 1 + sovApi(uint64(m.ResId))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsAd {
		n += 2
	}
	l = len(m.OpenEvent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AdExtra)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SplashId != 0 {
		n += 2 + sovApi(uint64(m.SplashId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BannerMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InlineType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InlineId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedBannersReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Banner) > 0 {
		for _, e := range m.Banner {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BannersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.ResIDs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsAd {
		n += 2
	}
	l = len(m.OpenEvent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AdExtra)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SplashId != 0 {
		n += 2 + sovApi(uint64(m.SplashId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BannersReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Banners) > 0 {
		for k, v := range m.Banners {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Banners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Banners) > 0 {
		for _, e := range m.Banners {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Banner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ParentId != 0 {
		n += 1 + sovApi(uint64(m.ParentId))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Area)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 2 + sovApi(uint64(m.Rank))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 2 + sovApi(uint64(m.Type))
	}
	if m.Start != 0 {
		n += 2 + sovApi(uint64(m.Start))
	}
	if m.End != 0 {
		n += 2 + sovApi(uint64(m.End))
	}
	if m.MTime != 0 {
		n += 2 + sovApi(uint64(m.MTime))
	}
	if m.ResourceId != 0 {
		n += 2 + sovApi(uint64(m.ResourceId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.CreativeId != 0 {
		n += 2 + sovApi(uint64(m.CreativeId))
	}
	if m.SrcId != 0 {
		n += 2 + sovApi(uint64(m.SrcId))
	}
	if m.IsAd {
		n += 3
	}
	if m.IsAdReplace {
		n += 3
	}
	if m.IsAdLoc {
		n += 3
	}
	if m.CmMark != 0 {
		n += 2 + sovApi(uint64(m.CmMark))
	}
	l = len(m.AdCb)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ShowUrl)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ClickUrl)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Index != 0 {
		n += 2 + sovApi(uint64(m.Index))
	}
	if m.ServerType != 0 {
		n += 2 + sovApi(uint64(m.ServerType))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.CreativeType != 0 {
		n += 2 + sovApi(uint64(m.CreativeType))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SplashId != 0 {
		n += 2 + sovApi(uint64(m.SplashId))
	}
	l = m.BannerMeta.Size()
	n += 2 + l + sovApi(uint64(l))
	if m.InlineUseSame != 0 {
		n += 2 + sovApi(uint64(m.InlineUseSame))
	}
	if m.InlineBarrageSwitch != 0 {
		n += 2 + sovApi(uint64(m.InlineBarrageSwitch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Scover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReType != 0 {
		n += 1 + sovApi(uint64(m.ReType))
	}
	l = len(m.ReValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Corner)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Card != 0 {
		n += 1 + sovApi(uint64(m.Card))
	}
	l = len(m.Siz)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovApi(uint64(m.Position))
	}
	l = len(m.RecReason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebRcmdReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rcmd) > 0 {
		for _, e := range m.Rcmd {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.RcmdCard) > 0 {
		for _, e := range m.RcmdCard {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebRcmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	l = len(m.CardValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Partition) > 0 {
		l = 0
		for _, e := range m.Partition {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Tag) > 0 {
		l = 0
		for _, e := range m.Tag {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.AvID) > 0 {
		l = 0
		for _, e := range m.AvID {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Priority != 0 {
		n += 1 + sovApi(uint64(m.Priority))
	}
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebRcmdCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReType != 0 {
		n += 1 + sovApi(uint64(m.ReType))
	}
	l = len(m.ReValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TP != 0 {
		n += 1 + sovApi(uint64(m.TP))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomConfigReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TP != 0 {
		n += 1 + sovApi(uint64(m.TP))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HighlightContent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImageBig)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.STime != 0 {
		n += 1 + sovApi(uint64(m.STime))
	}
	if m.ETime != 0 {
		n += 1 + sovApi(uint64(m.ETime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkinExtState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkinExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.SkinID != 0 {
		n += 1 + sovApi(uint64(m.SkinID))
	}
	l = len(m.SkinName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.LocationPolicyGID != 0 {
		n += 1 + sovApi(uint64(m.LocationPolicyGID))
	}
	l = len(m.UserScopeType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserScopeValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DressUpType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DressUpValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkinLimitState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkinLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.SID != 0 {
		n += 1 + sovApi(uint64(m.SID))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkinConfReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Limit) > 0 {
		for _, e := range m.Limit {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebPlayerIconRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if len(m.TagIDs) > 0 {
		l = 0
		for _, e := range m.TagIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.TypeID != 0 {
		n += 1 + sovApi(uint64(m.TypeID))
	}
	if m.SeasonID != 0 {
		n += 1 + sovApi(uint64(m.SeasonID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebPlayerIconReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Icon != nil {
		l = m.Icon.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hash1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.URL2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hash2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MngIconRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MngIconReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for k, v := range m.Info {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MngIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GlobalRed != 0 {
		n += 1 + sovApi(uint64(m.GlobalRed))
	}
	if m.EffectGroup != 0 {
		n += 1 + sovApi(uint64(m.EffectGroup))
	}
	l = len(m.EffectUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Module) > 0 {
		for _, e := range m.Module {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IconModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MineSectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsUploader {
		n += 2
	}
	if m.IsLiveHost {
		n += 2
	}
	if m.FansCount != 0 {
		n += 1 + sovApi(uint64(m.FansCount))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MineSectionsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HomeSectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HomeSectionsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Section) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Style != 0 {
		n += 1 + sovApi(uint64(m.Style))
	}
	l = len(m.ButtonName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ButtonUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ButtonIcon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ButtonStyle != 0 {
		n += 1 + sovApi(uint64(m.ButtonStyle))
	}
	l = len(m.TitleColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubtitleUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubtitleColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Background)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackgroundColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.AuditShow != 0 {
		n += 1 + sovApi(uint64(m.AuditShow))
	}
	if m.IsMng != 0 {
		n += 2 + sovApi(uint64(m.IsMng))
	}
	if m.OpStyleType != 0 {
		n += 2 + sovApi(uint64(m.OpStyleType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SectionItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NeedLogin != 0 {
		n += 1 + sovApi(uint64(m.NeedLogin))
	}
	if m.RedDot != 0 {
		n += 1 + sovApi(uint64(m.RedDot))
	}
	if m.GlobalRedDot != 0 {
		n += 1 + sovApi(uint64(m.GlobalRedDot))
	}
	if m.Display != 0 {
		n += 1 + sovApi(uint64(m.Display))
	}
	if m.MngIcon != nil {
		l = m.MngIcon.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RedDotForNew {
		n += 2
	}
	l = len(m.OpTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpSubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpTitleIcon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpLinkText)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpLinkIcon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OpLinkType != 0 {
		n += 2 + sovApi(uint64(m.OpLinkType))
	}
	l = len(m.TabId)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Animate)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LogoSelected)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.RedDotUrl)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.OpTitleColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.OpBackgroundColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.OpLinkContainerColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SectionItemOpLinkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InformationRegionCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InformationRegionCards) > 0 {
		for _, e := range m.InformationRegionCards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InformationRegionCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	if m.CardPosition != 0 {
		n += 1 + sovApi(uint64(m.CardPosition))
	}
	if m.IsCover != 0 {
		n += 1 + sovApi(uint64(m.IsCover))
	}
	if m.PositionIdx != 0 {
		n += 1 + sovApi(uint64(m.PositionIdx))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetS10PopEntranceAidsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetS10PopEntranceAidsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Aids) > 0 {
		l = 0
		for _, e := range m.Aids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceAllReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Platform != 0 {
		n += 1 + sovApi(uint64(m.Platform))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Parent != 0 {
		n += 1 + sovApi(uint64(m.Parent))
	}
	if m.Counter != 0 {
		n += 1 + sovApi(uint64(m.Counter))
	}
	if m.Position != 0 {
		n += 1 + sovApi(uint64(m.Position))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Preview)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Mark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Assignments) > 0 {
		for _, e := range m.Assignments {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Level != 0 {
		n += 1 + sovApi(uint64(m.Level))
	}
	if m.Type != 0 {
		n += 2 + sovApi(uint64(m.Type))
	}
	if m.IsAd != 0 {
		n += 2 + sovApi(uint64(m.IsAd))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Assignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ResourceId != 0 {
		n += 1 + sovApi(uint64(m.ResourceId))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Litpic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	l = len(m.Agency)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Atype != 0 {
		n += 1 + sovApi(uint64(m.Atype))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayerCategory != 0 {
		n += 1 + sovApi(uint64(m.PlayerCategory))
	}
	if m.Stime != 0 {
		n += 2 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 2 + sovApi(uint64(m.Etime))
	}
	if m.Ctime != 0 {
		n += 2 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 2 + sovApi(uint64(m.Mtime))
	}
	if m.ActivityId != 0 {
		n += 2 + sovApi(uint64(m.ActivityId))
	}
	if m.ActivityStime != 0 {
		n += 2 + sovApi(uint64(m.ActivityStime))
	}
	if m.ActivityEtime != 0 {
		n += 2 + sovApi(uint64(m.ActivityEtime))
	}
	if m.Category != 0 {
		n += 2 + sovApi(uint64(m.Category))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssignmentAllReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assignments) > 0 {
		for _, e := range m.Assignments {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefBannerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefBanner != nil {
		l = m.DefBanner.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResID != 0 {
		n += 1 + sovApi(uint64(m.ResID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourcesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResIDs) > 0 {
		l = 0
		for _, e := range m.ResIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourcesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PasterAPPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Platform != 0 {
		n += 1 + sovApi(uint64(m.Platform))
	}
	if m.AdType != 0 {
		n += 1 + sovApi(uint64(m.AdType))
	}
	l = len(m.Aid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TypeID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PasterAPPReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.AllowJump != 0 {
		n += 1 + sovApi(uint64(m.AllowJump))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexIconReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexIcon) > 0 {
		for k, v := range m.IndexIcon {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexIconItem) > 0 {
		for _, e := range m.IndexIconItem {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexIconItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, s := range m.Links {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Sttime != 0 {
		n += 1 + sovApi(uint64(m.Sttime))
	}
	if m.Endtime != 0 {
		n += 1 + sovApi(uint64(m.Endtime))
	}
	if m.Deltime != 0 {
		n += 1 + sovApi(uint64(m.Deltime))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerIconRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if len(m.TagIDs) > 0 {
		l = 0
		for _, e := range m.TagIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.TypeID != 0 {
		n += 1 + sovApi(uint64(m.TypeID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.ShowPlayIcon {
		n += 2
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerIconV2Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerIconReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hash1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hash2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.TypeValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.DragLeftPng)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MiddlePng)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DragRightPng)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DragData != nil {
		l = m.DragData.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NodragData != nil {
		l = m.NodragData.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IconData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetaJson)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SpritsImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CmtboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CmtboxReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.LoadCid != 0 {
		n += 1 + sovApi(uint64(m.LoadCid))
	}
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SizeFactor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SpeedFactor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MaxOnscreen)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Style)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.StyleParam)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TopMargin)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RenqiVisible)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RenqiFontsize)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RenqiFmt)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RenqiOffset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RenqiColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 2 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 2 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SideBarsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SideBar) > 0 {
		for _, e := range m.SideBar {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Limit) > 0 {
		for k, v := range m.Limit {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SideBar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Tip != 0 {
		n += 1 + sovApi(uint64(m.Tip))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LogoWhite)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Module != 0 {
		n += 1 + sovApi(uint64(m.Module))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OnlineTime != 0 {
		n += 1 + sovApi(uint64(m.OnlineTime))
	}
	if m.NeedLogin != 0 {
		n += 1 + sovApi(uint64(m.NeedLogin))
	}
	l = len(m.WhiteUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Menu != 0 {
		n += 1 + sovApi(uint64(m.Menu))
	}
	l = len(m.LogoSelected)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.TabId)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.RedDotUrl)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.GlobalRedDot != 0 {
		n += 2 + sovApi(uint64(m.GlobalRedDot))
	}
	if m.RedDotLimit != 0 {
		n += 2 + sovApi(uint64(m.RedDotLimit))
	}
	l = len(m.Animate)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.WhiteUrlShow != 0 {
		n += 2 + sovApi(uint64(m.WhiteUrlShow))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SideBarLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SideBarLimitItem) > 0 {
		for _, e := range m.SideBarLimitItem {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SideBarLimitItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AbTestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Groups)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AbTestReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Abtest) > 0 {
		for k, v := range m.Abtest {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AbTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FlowPercent != 0 {
		n += 1 + sovApi(uint64(m.FlowPercent))
	}
	l = len(m.ParamValues)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Utime != 0 {
		n += 1 + sovApi(uint64(m.Utime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PasterCIDReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Paster) > 0 {
		for k, v := range m.Paster {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTabExtReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Tabs) > 0 {
		for _, e := range m.Tabs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabId != 0 {
		n += 1 + sovApi(uint64(m.TabId))
	}
	if m.TType != 0 {
		n += 1 + sovApi(uint64(m.TType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTabExtRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TabExts) > 0 {
		for _, e := range m.TabExts {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InactiveIcon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Inactive != 0 {
		n += 1 + sovApi(uint64(m.Inactive))
	}
	if m.InactiveType != 0 {
		n += 1 + sovApi(uint64(m.InactiveType))
	}
	l = len(m.ActiveIcon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Active != 0 {
		n += 1 + sovApi(uint64(m.Active))
	}
	if m.ActiveType != 0 {
		n += 1 + sovApi(uint64(m.ActiveType))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BarColor != 0 {
		n += 1 + sovApi(uint64(m.BarColor))
	}
	l = len(m.TabTopColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TabMiddleColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TabBottomColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgImage1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgImage2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.TabId != 0 {
		n += 2 + sovApi(uint64(m.TabId))
	}
	if m.TType != 0 {
		n += 2 + sovApi(uint64(m.TType))
	}
	if m.Click != nil {
		l = m.Click.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Click) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsUploaderReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsUploaderReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsUploader {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MenuExtVerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuExtVerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuExtVerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuExtVerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuExtVerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuExtVerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Click", wireType)
			}
			m.Click = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Click |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMenuExtVerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMenuExtVerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMenuExtVerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMenuExtVerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMenuExtVerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMenuExtVerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoArgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Param) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Param: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Param: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			m.Department = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Department |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Plats = append(m.Plats, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Plats) == 0 {
					m.Plats = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Plats = append(m.Plats, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Plats", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Param{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hidden) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hidden: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hidden: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelMap == nil {
				m.ChannelMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChannelMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenCondition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HiddenCondition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelFuzzy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelFuzzy = append(m.ChannelFuzzy, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideDynamic", wireType)
			}
			m.HideDynamic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HideDynamic |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HiddenLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HiddenLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HiddenLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntranceHiddenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntranceHiddenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntranceHiddenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HiddenInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HiddenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HiddenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HiddenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &Hidden{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limit = append(m.Limit, &HiddenLimit{})
			if err := m.Limit[len(m.Limit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntrancesIsHiddenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntrancesIsHiddenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntrancesIsHiddenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Oids) == 0 {
					m.Oids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Otype", wireType)
			}
			m.Otype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Otype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OidItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OidItems == nil {
				m.OidItems = make(map[int64]*OidList)
			}
			var mapkey int64
			var mapvalue *OidList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OidList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OidItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OidList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OidList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OidList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Oids) == 0 {
					m.Oids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntrancesIsHiddenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntrancesIsHiddenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntrancesIsHiddenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infos == nil {
				m.Infos = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Infos[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfos == nil {
				m.ModuleInfos = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ModuleInfos[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideDynamic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchOgvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchOgvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchOgvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchOgvReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchOgvReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchOgvReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sids = append(m.Sids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sids) == 0 {
					m.Sids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sids = append(m.Sids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedBannersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedBannersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedBannersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta, &BannerMeta{})
			if err := m.Meta[len(m.Meta)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResId", wireType)
			}
			m.ResId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAd = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenEvent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenEvent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplashId", wireType)
			}
			m.SplashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SplashId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: banner_meta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: banner_meta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InlineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedBannersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedBannersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedBannersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banner = append(m.Banner, &Banner{})
			if err := m.Banner[len(m.Banner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAd = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenEvent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenEvent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdExtra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdExtra = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplashId", wireType)
			}
			m.SplashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SplashId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Banners == nil {
				m.Banners = make(map[int32]*Banners)
			}
			var mapkey int32
			var mapvalue *Banners
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Banners{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Banners[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Banners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Banners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Banners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banners = append(m.Banners, &Banner{})
			if err := m.Banners[len(m.Banners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Banner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Banner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Banner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeId", wireType)
			}
			m.CreativeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcId", wireType)
			}
			m.SrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAd = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdReplace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdReplace = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdLoc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdLoc = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmMark", wireType)
			}
			m.CmMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmMark |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdCb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdCb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			m.ServerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeType", wireType)
			}
			m.CreativeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplashId", wireType)
			}
			m.SplashId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SplashId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannerMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BannerMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineUseSame", wireType)
			}
			m.InlineUseSame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InlineUseSame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineBarrageSwitch", wireType)
			}
			m.InlineBarrageSwitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InlineBarrageSwitch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReType", wireType)
			}
			m.ReType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Siz", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Siz = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebRcmdReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebRcmdReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebRcmdReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rcmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rcmd = append(m.Rcmd, &WebRcmd{})
			if err := m.Rcmd[len(m.Rcmd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdCard = append(m.RcmdCard, &WebRcmdCard{})
			if err := m.RcmdCard[len(m.RcmdCard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebRcmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebRcmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebRcmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partition = append(m.Partition, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partition) == 0 {
					m.Partition = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partition = append(m.Partition, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tag = append(m.Tag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tag) == 0 {
					m.Tag = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tag = append(m.Tag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AvID = append(m.AvID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AvID) == 0 {
					m.AvID = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AvID = append(m.AvID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AvID", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebRcmdCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebRcmdCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebRcmdCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReType", wireType)
			}
			m.ReType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TP", wireType)
			}
			m.TP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TP", wireType)
			}
			m.TP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighlightContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighlightContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field STime", wireType)
			}
			m.STime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.STime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETime", wireType)
			}
			m.ETime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ETime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkinExtState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinExtState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinExtState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkinExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinID", wireType)
			}
			m.SkinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkinID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkinName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SkinExtState_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationPolicyGID", wireType)
			}
			m.LocationPolicyGID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocationPolicyGID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserScopeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserScopeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserScopeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserScopeValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DressUpType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DressUpType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DressUpValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DressUpValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkinLimitState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinLimitState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinLimitState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkinLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= SkinLimitState_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkinConfReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinConfReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinConfReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SkinInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &SkinExt{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limit = append(m.Limit, &SkinLimit{})
			if err := m.Limit[len(m.Limit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebPlayerIconRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebPlayerIconRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebPlayerIconRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TagIDs = append(m.TagIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TagIDs) == 0 {
					m.TagIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TagIDs = append(m.TagIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TagIDs", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebPlayerIconReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebPlayerIconReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebPlayerIconReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icon == nil {
				m.Icon = &PlayerIcon{}
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MngIconRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MngIconRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MngIconRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Oids) == 0 {
					m.Oids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MngIconReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MngIconReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MngIconReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = make(map[int64]*MngIcon)
			}
			var mapkey int64
			var mapvalue *MngIcon
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &MngIcon{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Info[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MngIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MngIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MngIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRed", wireType)
			}
			m.GlobalRed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalRed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectGroup", wireType)
			}
			m.EffectGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectGroup |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = append(m.Module, &IconModule{})
			if err := m.Module[len(m.Module)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IconModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IconModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IconModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MineSectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MineSectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MineSectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUploader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUploader = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiveHost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiveHost = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansCount", wireType)
			}
			m.FansCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MineSectionsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MineSectionsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MineSectionsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HomeSectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HomeSectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HomeSectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HomeSectionsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HomeSectionsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HomeSectionsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Section) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Section: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Section: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonStyle", wireType)
			}
			m.ButtonStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ButtonStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtitleUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubtitleUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubtitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Background = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackgroundColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SectionItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditShow", wireType)
			}
			m.AuditShow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditShow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMng", wireType)
			}
			m.IsMng = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsMng |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpStyleType", wireType)
			}
			m.OpStyleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpStyleType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SectionItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SectionItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SectionItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedLogin", wireType)
			}
			m.NeedLogin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedLogin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDot", wireType)
			}
			m.RedDot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedDot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRedDot", wireType)
			}
			m.GlobalRedDot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalRedDot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			m.Display = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Display |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MngIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MngIcon == nil {
				m.MngIcon = &MngIcon{}
			}
			if err := m.MngIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDotForNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedDotForNew = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpSubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpSubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpTitleIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpTitleIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpLinkText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpLinkText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpLinkIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpLinkIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpLinkType", wireType)
			}
			m.OpLinkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpLinkType |= SectionItemOpLinkType_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Animate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoSelected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoSelected = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDotUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedDotUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpTitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpTitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpBackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpBackgroundColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpLinkContainerColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpLinkContainerColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SectionItemOpLinkType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SectionItemOpLinkType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SectionItemOpLinkType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InformationRegionCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InformationRegionCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InformationRegionCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InformationRegionCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InformationRegionCards = append(m.InformationRegionCards, &InformationRegionCard{})
			if err := m.InformationRegionCards[len(m.InformationRegionCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InformationRegionCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InformationRegionCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InformationRegionCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardPosition", wireType)
			}
			m.CardPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardPosition |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCover", wireType)
			}
			m.IsCover = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCover |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionIdx", wireType)
			}
			m.PositionIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetS10PopEntranceAidsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetS10PopEntranceAidsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetS10PopEntranceAidsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetS10PopEntranceAidsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetS10PopEntranceAidsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetS10PopEntranceAidsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Aids = append(m.Aids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Aids) == 0 {
					m.Aids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Aids = append(m.Aids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Aids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceAllReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceAllReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceAllReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &ResourceInfo{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preview = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignments = append(m.Assignments, &Assignment{})
			if err := m.Assignments[len(m.Assignments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAd", wireType)
			}
			m.IsAd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Assignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Litpic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Litpic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atype", wireType)
			}
			m.Atype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCategory", wireType)
			}
			m.PlayerCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerCategory |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityStime", wireType)
			}
			m.ActivityStime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityStime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityEtime", wireType)
			}
			m.ActivityEtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityEtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignmentAllReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignmentAllReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignmentAllReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignments = append(m.Assignments, &Assignment{})
			if err := m.Assignments[len(m.Assignments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefBannerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefBannerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefBannerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefBanner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefBanner == nil {
				m.DefBanner = &Assignment{}
			}
			if err := m.DefBanner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResID", wireType)
			}
			m.ResID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &ResourceInfo{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourcesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResIDs = append(m.ResIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ResIDs) == 0 {
					m.ResIDs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResIDs = append(m.ResIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourcesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = make(map[int32]*ResourceInfo)
			}
			var mapkey int32
			var mapvalue *ResourceInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResourceInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resources[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasterAPPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasterAPPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasterAPPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdType", wireType)
			}
			m.AdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasterAPPReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasterAPPReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasterAPPReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowJump", wireType)
			}
			m.AllowJump = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowJump |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexIconReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexIconReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexIconReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexIcon == nil {
				m.IndexIcon = make(map[string]*IndexIcon)
			}
			var mapkey string
			var mapvalue *IndexIcon
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &IndexIcon{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IndexIcon[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexIconItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexIconItem = append(m.IndexIconItem, &IndexIconItem{})
			if err := m.IndexIconItem[len(m.IndexIconItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexIconItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexIconItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexIconItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sttime", wireType)
			}
			m.Sttime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sttime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endtime", wireType)
			}
			m.Endtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deltime", wireType)
			}
			m.Deltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deltime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerIconRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIconRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIconRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TagIDs = append(m.TagIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TagIDs) == 0 {
					m.TagIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TagIDs = append(m.TagIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TagIDs", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPlayIcon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPlayIcon = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerIconV2Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIconV2Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIconV2Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &PlayerIconReply{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerIconReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIconReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIconReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DragLeftPng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DragLeftPng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddlePng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddlePng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DragRightPng", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DragRightPng = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DragData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DragData == nil {
				m.DragData = &IconData{}
			}
			if err := m.DragData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodragData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodragData == nil {
				m.NodragData = &IconData{}
			}
			if err := m.NodragData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IconData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IconData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IconData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpritsImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpritsImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmtboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmtboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmtboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmtboxReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmtboxReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmtboxReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadCid", wireType)
			}
			m.LoadCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SizeFactor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpeedFactor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOnscreen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxOnscreen = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Style = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StyleParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StyleParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopMargin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopMargin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenqiVisible", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenqiVisible = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenqiFontsize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenqiFontsize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenqiFmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenqiFmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenqiOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenqiOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenqiColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenqiColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SideBarsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SideBarsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SideBarsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SideBar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SideBar = append(m.SideBar, &SideBar{})
			if err := m.SideBar[len(m.SideBar)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = make(map[int64]*SideBarLimit)
			}
			var mapkey int64
			var mapvalue *SideBarLimit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SideBarLimit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Limit[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SideBar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SideBar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SideBar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			m.Tip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoWhite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoWhite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			m.Module = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Module |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineTime", wireType)
			}
			m.OnlineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedLogin", wireType)
			}
			m.NeedLogin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedLogin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Menu", wireType)
			}
			m.Menu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Menu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoSelected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoSelected = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDotUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedDotUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalRedDot", wireType)
			}
			m.GlobalRedDot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalRedDot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedDotLimit", wireType)
			}
			m.RedDotLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedDotLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Animate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteUrlShow", wireType)
			}
			m.WhiteUrlShow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteUrlShow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SideBarLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SideBarLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SideBarLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SideBarLimitItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SideBarLimitItem = append(m.SideBarLimitItem, &SideBarLimitItem{})
			if err := m.SideBarLimitItem[len(m.SideBarLimitItem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SideBarLimitItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SideBarLimitItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SideBarLimitItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AbTestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbTestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbTestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AbTestReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbTestReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbTestReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abtest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Abtest == nil {
				m.Abtest = make(map[string]*AbTest)
			}
			var mapkey string
			var mapvalue *AbTest
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AbTest{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Abtest[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AbTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPercent", wireType)
			}
			m.FlowPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowPercent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamValues = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utime", wireType)
			}
			m.Utime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Utime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasterCIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasterCIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasterCIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paster == nil {
				m.Paster = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Paster[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTabExtReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTabExtReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTabExtReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tabs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tabs = append(m.Tabs, &Tab{})
			if err := m.Tabs[len(m.Tabs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabId", wireType)
			}
			m.TabId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TType", wireType)
			}
			m.TType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTabExtRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTabExtRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTabExtRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabExts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabExts = append(m.TabExts, &TabExt{})
			if err := m.TabExts[len(m.TabExts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InactiveIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inactive", wireType)
			}
			m.Inactive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inactive |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveType", wireType)
			}
			m.InactiveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InactiveType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			m.Active = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Active |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveType", wireType)
			}
			m.ActiveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarColor", wireType)
			}
			m.BarColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarColor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabTopColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabTopColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabMiddleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabMiddleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabBottomColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabBottomColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImage1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImage1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImage2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImage2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabId", wireType)
			}
			m.TabId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TType", wireType)
			}
			m.TType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Click", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Click == nil {
				m.Click = &Click{}
			}
			if err := m.Click.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Click) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Click: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Click: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUploaderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUploaderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUploaderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUploaderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUploaderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUploaderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUploader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUploader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
