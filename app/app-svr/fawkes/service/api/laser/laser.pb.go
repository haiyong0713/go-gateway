// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example/laser.proto

package laser

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 服务端下发日志上报事件
type LaserLogUploadResp struct {
	// 任务id
	Taskid int64 `protobuf:"varint,1,opt,name=taskid,proto3" json:"taskid,omitempty"`
	// 下发时间
	Date                 string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaserLogUploadResp) Reset()         { *m = LaserLogUploadResp{} }
func (m *LaserLogUploadResp) String() string { return proto.CompactTextString(m) }
func (*LaserLogUploadResp) ProtoMessage()    {}
func (*LaserLogUploadResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_584447fa2c47aced, []int{0}
}
func (m *LaserLogUploadResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LaserLogUploadResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LaserLogUploadResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LaserLogUploadResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaserLogUploadResp.Merge(m, src)
}
func (m *LaserLogUploadResp) XXX_Size() int {
	return m.Size()
}
func (m *LaserLogUploadResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LaserLogUploadResp.DiscardUnknown(m)
}

var xxx_messageInfo_LaserLogUploadResp proto.InternalMessageInfo

func (m *LaserLogUploadResp) GetTaskid() int64 {
	if m != nil {
		return m.Taskid
	}
	return 0
}

func (m *LaserLogUploadResp) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func init() {
	proto.RegisterType((*LaserLogUploadResp)(nil), "bilibili.broadcast.v1.LaserLogUploadResp")
}

func init() { proto.RegisterFile("example/laser.proto", fileDescriptor_584447fa2c47aced) }

var fileDescriptor_584447fa2c47aced = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0xd5, 0xcf, 0x49, 0x2c, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x4d, 0xca, 0xcc, 0xc9, 0x04, 0x61, 0xbd, 0xa4, 0xa2, 0xfc, 0xc4, 0x94, 0xe4, 0xc4, 0xe2,
	0x12, 0xbd, 0x32, 0x43, 0x29, 0xe9, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0xb0, 0xa2, 0xa4,
	0xd2, 0x34, 0xfd, 0xd4, 0xdc, 0x82, 0x92, 0x4a, 0x88, 0x1e, 0x25, 0x07, 0x2e, 0x21, 0x1f, 0x90,
	0x11, 0x3e, 0xf9, 0xe9, 0xa1, 0x05, 0x39, 0xf9, 0x89, 0x29, 0x41, 0xa9, 0xc5, 0x05, 0x42, 0x62,
	0x5c, 0x6c, 0x25, 0x89, 0xc5, 0xd9, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x50,
	0x9e, 0x90, 0x10, 0x17, 0x4b, 0x4a, 0x62, 0x49, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10,
	0x98, 0x6d, 0x94, 0xcc, 0xc5, 0x0a, 0x36, 0x41, 0x28, 0x8a, 0x4b, 0x38, 0x3c, 0xb1, 0x24, 0x39,
	0x03, 0x6e, 0x94, 0x6b, 0x59, 0x6a, 0x5e, 0x89, 0x90, 0x98, 0x1e, 0xc4, 0x7e, 0x3d, 0x98, 0xfd,
	0x7a, 0xae, 0x20, 0xfb, 0xa5, 0x34, 0xf5, 0xb0, 0x3a, 0x57, 0x0f, 0xd3, 0x39, 0x06, 0x8c, 0x4e,
	0x55, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0x23, 0x97, 0x7c,
	0x72, 0x7e, 0xae, 0x5e, 0x52, 0x62, 0x41, 0x66, 0x31, 0x76, 0x33, 0x02, 0x18, 0xa3, 0xcc, 0xd3,
	0x33, 0x4b, 0x10, 0x92, 0xc9, 0xf9, 0xfa, 0x60, 0xe5, 0x10, 0x52, 0x37, 0x3d, 0x5f, 0x1f, 0x26,
	0xa5, 0x0f, 0xd7, 0xa7, 0x5f, 0x66, 0x68, 0x5d, 0x66, 0xb8, 0x88, 0x89, 0xdf, 0xc9, 0x31, 0xc0,
	0xd3, 0x09, 0x26, 0x1a, 0x66, 0x98, 0xc4, 0x06, 0x76, 0xb8, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x83, 0x43, 0x2e, 0x8c, 0x74, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LaserClient is the client API for Laser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LaserClient interface {
	// 监听上报事件
	WatchLogUploadEvent(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (Laser_WatchLogUploadEventClient, error)
}

type laserClient struct {
	cc *grpc.ClientConn
}

func NewLaserClient(cc *grpc.ClientConn) LaserClient {
	return &laserClient{cc}
}

func (c *laserClient) WatchLogUploadEvent(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (Laser_WatchLogUploadEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Laser_serviceDesc.Streams[0], "/bilibili.broadcast.v1.Laser/WatchLogUploadEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &laserWatchLogUploadEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Laser_WatchLogUploadEventClient interface {
	Recv() (*LaserLogUploadResp, error)
	grpc.ClientStream
}

type laserWatchLogUploadEventClient struct {
	grpc.ClientStream
}

func (x *laserWatchLogUploadEventClient) Recv() (*LaserLogUploadResp, error) {
	m := new(LaserLogUploadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LaserServer is the server API for Laser service.
type LaserServer interface {
	// 监听上报事件
	WatchLogUploadEvent(*types.Empty, Laser_WatchLogUploadEventServer) error
}

// UnimplementedLaserServer can be embedded to have forward compatible implementations.
type UnimplementedLaserServer struct {
}

func (*UnimplementedLaserServer) WatchLogUploadEvent(req *types.Empty, srv Laser_WatchLogUploadEventServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogUploadEvent not implemented")
}

func RegisterLaserServer(s *grpc.Server, srv LaserServer) {
	s.RegisterService(&_Laser_serviceDesc, srv)
}

func _Laser_WatchLogUploadEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LaserServer).WatchLogUploadEvent(m, &laserWatchLogUploadEventServer{stream})
}

type Laser_WatchLogUploadEventServer interface {
	Send(*LaserLogUploadResp) error
	grpc.ServerStream
}

type laserWatchLogUploadEventServer struct {
	grpc.ServerStream
}

func (x *laserWatchLogUploadEventServer) Send(m *LaserLogUploadResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Laser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.broadcast.v1.Laser",
	HandlerType: (*LaserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchLogUploadEvent",
			Handler:       _Laser_WatchLogUploadEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example/laser.proto",
}

func (m *LaserLogUploadResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LaserLogUploadResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LaserLogUploadResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintLaser(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0x12
	}
	if m.Taskid != 0 {
		i = encodeVarintLaser(dAtA, i, uint64(m.Taskid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLaser(dAtA []byte, offset int, v uint64) int {
	offset -= sovLaser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LaserLogUploadResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Taskid != 0 {
		n += 1 + sovLaser(uint64(m.Taskid))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovLaser(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLaser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLaser(x uint64) (n int) {
	return sovLaser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LaserLogUploadResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLaser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LaserLogUploadResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LaserLogUploadResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			m.Taskid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taskid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLaser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLaser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLaser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLaser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLaser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLaser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLaser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLaser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLaser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLaser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLaser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLaser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLaser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLaser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLaser = fmt.Errorf("proto: unexpected end of group")
)
