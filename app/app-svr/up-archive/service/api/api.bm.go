// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: go-gateway/app/app-svr/up-archive/service/api/api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:

	go-gateway/app/app-svr/up-archive/service/api/api.proto
*/
package api

import (
	"context"

	bm "go-common/library/net/http/blademaster"
	"go-common/library/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathUpArchivePing = "/up.archive.service.v1.UpArchive/Ping"
var PathUpArchiveArcPassed = "/x/internal/up/archive/arc/passed"
var PathUpArchiveArcPassedTotal = "/x/internal/up/archive/arc/passed/total"
var PathUpArchiveArcPassedCursor = "/up.archive.service.v1.UpArchive/ArcPassedCursor"
var PathUpArchiveArcPassedStory = "/up.archive.service.v1.UpArchive/ArcPassedStory"
var PathUpArchiveArcsPassed = "/up.archive.service.v1.UpArchive/ArcsPassed"
var PathUpArchiveArcsPassedTotal = "/up.archive.service.v1.UpArchive/ArcsPassedTotal"
var PathUpArchiveArcPassedByAid = "/up.archive.service.v1.UpArchive/ArcPassedByAid"
var PathUpArchiveUpsPassed = "/up.archive.service.v1.UpArchive/UpsPassed"
var PathUpArchiveArcPassedSearch = "/up.archive.service.v1.UpArchive/ArcPassedSearch"
var PathUpArchiveArcsPassedSort = "/up.archive.service.v1.UpArchive/ArcsPassedSort"
var PathUpArchiveArcPassedExist = "/up.archive.service.v1.UpArchive/ArcPassedExist"

// UpArchiveBMServer is the server API for UpArchive service.
type UpArchiveBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// ArcPassed 投稿列表接口分页模式
	ArcPassed(ctx context.Context, req *ArcPassedReq) (resp *ArcPassedReply, err error)

	// ArcPassedTotal 投稿列表总投稿数接口
	ArcPassedTotal(ctx context.Context, req *ArcPassedTotalReq) (resp *ArcPassedTotalReply, err error)

	// ArcPassedCursor 投稿列表游标接口score模式
	ArcPassedCursor(ctx context.Context, req *ArcPassedCursorReq) (resp *ArcPassedCursorReply, err error)

	// ArcPassedStory story模式专供接口
	ArcPassedStory(ctx context.Context, req *ArcPassedStoryReq) (resp *ArcPassedStoryReply, err error)

	// ArcsPassed 批量投稿列表接口分页模式
	ArcsPassed(ctx context.Context, req *ArcsPassedReq) (resp *ArcsPassedReply, err error)

	// ArcsPassedTotal 批量投稿列表总投稿数接口
	ArcsPassedTotal(ctx context.Context, req *ArcsPassedTotalReq) (resp *ArcsPassedTotalReply, err error)

	// ArcPassedByAid 通过aid获取UP主稿件
	ArcPassedByAid(ctx context.Context, req *ArcPassedByAidReq) (resp *ArcPassedByAidReply, err error)

	// UpsPassed 多个up主的按分布时间排序的aid接口
	UpsPassed(ctx context.Context, req *UpsArcsReq) (resp *UpsAidPubTimeReply, err error)

	// ArcPassedSearch 投稿列表稿件搜索
	ArcPassedSearch(ctx context.Context, req *ArcPassedSearchReq) (resp *ArcPassedSearchReply, err error)

	// ArcsPassedSort 批量投稿列表，包含多种维度排序
	ArcsPassedSort(ctx context.Context, req *ArcsPassedSortReq) (resp *ArcsPassedSortReply, err error)

	// ArcPassedExist 稿件是否在列表中存在
	ArcPassedExist(ctx context.Context, req *ArcPassedExistReq) (resp *ArcPassedExistReply, err error)
}

var UpArchiveSvc UpArchiveBMServer

func upArchivePing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.Ping(c, p)
	c.JSON(resp, err)
}

func upArchiveArcPassed(c *bm.Context) {
	p := new(ArcPassedReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcPassed(c, p)
	c.JSON(resp, err)
}

func upArchiveArcPassedTotal(c *bm.Context) {
	p := new(ArcPassedTotalReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcPassedTotal(c, p)
	c.JSON(resp, err)
}

func upArchiveArcPassedCursor(c *bm.Context) {
	p := new(ArcPassedCursorReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcPassedCursor(c, p)
	c.JSON(resp, err)
}

func upArchiveArcPassedStory(c *bm.Context) {
	p := new(ArcPassedStoryReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcPassedStory(c, p)
	c.JSON(resp, err)
}

func upArchiveArcsPassed(c *bm.Context) {
	p := new(ArcsPassedReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcsPassed(c, p)
	c.JSON(resp, err)
}

func upArchiveArcsPassedTotal(c *bm.Context) {
	p := new(ArcsPassedTotalReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcsPassedTotal(c, p)
	c.JSON(resp, err)
}

func upArchiveArcPassedByAid(c *bm.Context) {
	p := new(ArcPassedByAidReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcPassedByAid(c, p)
	c.JSON(resp, err)
}

func upArchiveUpsPassed(c *bm.Context) {
	p := new(UpsArcsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.UpsPassed(c, p)
	c.JSON(resp, err)
}

func upArchiveArcPassedSearch(c *bm.Context) {
	p := new(ArcPassedSearchReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcPassedSearch(c, p)
	c.JSON(resp, err)
}

func upArchiveArcsPassedSort(c *bm.Context) {
	p := new(ArcsPassedSortReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcsPassedSort(c, p)
	c.JSON(resp, err)
}

func upArchiveArcPassedExist(c *bm.Context) {
	p := new(ArcPassedExistReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UpArchiveSvc.ArcPassedExist(c, p)
	c.JSON(resp, err)
}

// RegisterUpArchiveBMServer Register the blademaster route
func RegisterUpArchiveBMServer(e *bm.Engine, server UpArchiveBMServer) {
	UpArchiveSvc = server
	e.GET("/up.archive.service.v1.UpArchive/Ping", upArchivePing)
	e.GET("/x/internal/up/archive/arc/passed", upArchiveArcPassed)
	e.GET("/x/internal/up/archive/arc/passed/total", upArchiveArcPassedTotal)
	e.GET("/up.archive.service.v1.UpArchive/ArcPassedCursor", upArchiveArcPassedCursor)
	e.GET("/up.archive.service.v1.UpArchive/ArcPassedStory", upArchiveArcPassedStory)
	e.GET("/up.archive.service.v1.UpArchive/ArcsPassed", upArchiveArcsPassed)
	e.GET("/up.archive.service.v1.UpArchive/ArcsPassedTotal", upArchiveArcsPassedTotal)
	e.GET("/up.archive.service.v1.UpArchive/ArcPassedByAid", upArchiveArcPassedByAid)
	e.GET("/up.archive.service.v1.UpArchive/UpsPassed", upArchiveUpsPassed)
	e.GET("/up.archive.service.v1.UpArchive/ArcPassedSearch", upArchiveArcPassedSearch)
	e.GET("/up.archive.service.v1.UpArchive/ArcsPassedSort", upArchiveArcsPassedSort)
	e.GET("/up.archive.service.v1.UpArchive/ArcPassedExist", upArchiveArcPassedExist)
}
