// Code generated by kratos tool redisgen. DO NOT EDIT.

/*
  Package usermodel is a generated redis cache package.
  It is generated from:
  type _redis interface {
		// redis: -struct_name=dao -key=familyRelsOfParentKey
		CacheFamilyRelsOfParent(ctx context.Context, id int64) ([]*familymdl.FamilyRelation, error)
		// redis: -struct_name=dao -key=familyRelsOfParentKey -expire=d.familyRelsExpire
		AddCacheFamilyRelsOfParent(ctx context.Context, id int64, val []*familymdl.FamilyRelation) error
		// redis: -struct_name=dao -key=familyRelsOfParentKey
		DelCacheFamilyRelsOfParent(ctx context.Context, id int64) error
		// redis: -struct_name=dao -key=familyRelsOfChildKey
		CacheFamilyRelsOfChild(ctx context.Context, id int64) (*familymdl.FamilyRelation, error)
		// redis: -struct_name=dao -key=familyRelsOfChildKey -expire=d.familyRelsExpire
		AddCacheFamilyRelsOfChild(ctx context.Context, id int64, val *familymdl.FamilyRelation) error
		// redis: -struct_name=dao -key=familyRelsOfChildKey
		DelCacheFamilyRelsOfChild(ctx context.Context, id int64) error
		// redis: -struct_name=dao -key=sleepRemindKey
		CacheSleepRemind(ctx context.Context, mid int64) (*antiadmdl.SleepRemind, error)
		// redis: -struct_name=dao -key=sleepRemindKey -expire=d.sleepRemindExpire
		AddCacheSleepRemind(ctx context.Context, mid int64, val *antiadmdl.SleepRemind) error
		// redis: -struct_name=dao -key=sleepRemindKey
		DelCacheSleepRemind(ctx context.Context, mid int64) error
	}
*/

package usermodel

import (
	"context"
	"encoding/json"

	"go-common/library/cache/redis"
	"go-common/library/log"
	antiadmdl "go-gateway/app/app-svr/app-interface/interface-legacy/model/anti_addiction"
	familymdl "go-gateway/app/app-svr/app-interface/interface-legacy/model/family"
)

var _ _redis

// CacheFamilyRelsOfParent get data from redis
func (d *dao) CacheFamilyRelsOfParent(c context.Context, id int64) (res []*familymdl.FamilyRelation, err error) {
	key := familyRelsOfParentKey(id)
	reply, err1 := redis.Bytes(d.redis.Do(c, "GET", key))
	if err1 != nil {
		if err1 == redis.ErrNil {
			return
		}
		err = err1
		log.Errorc(c, "d.CacheFamilyRelsOfParent(get key: %v) err: %+v", key, err)
		return
	}
	res = []*familymdl.FamilyRelation{}
	err = json.Unmarshal(reply, &res)
	if err != nil {
		log.Errorc(c, "d.CacheFamilyRelsOfParent(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// AddCacheFamilyRelsOfParent Set data to redis
func (d *dao) AddCacheFamilyRelsOfParent(c context.Context, id int64, val []*familymdl.FamilyRelation) (err error) {
	if len(val) == 0 {
		return
	}
	key := familyRelsOfParentKey(id)
	var bs []byte
	bs, err = json.Marshal(val)
	if err != nil {
		log.Errorc(c, "d.AddCacheFamilyRelsOfParent(get key: %v) err: %+v", key, err)
		return
	}
	expire := d.familyRelsExpire
	if _, err = d.redis.Do(c, "set", key, bs, "EX", expire); err != nil {
		log.Errorc(c, "d.AddCacheFamilyRelsOfParent(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// DelCacheFamilyRelsOfParent delete data from redis
func (d *dao) DelCacheFamilyRelsOfParent(c context.Context, id int64) (err error) {
	key := familyRelsOfParentKey(id)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheFamilyRelsOfParent(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// CacheFamilyRelsOfChild get data from redis
func (d *dao) CacheFamilyRelsOfChild(c context.Context, id int64) (res *familymdl.FamilyRelation, err error) {
	key := familyRelsOfChildKey(id)
	reply, err1 := redis.Bytes(d.redis.Do(c, "GET", key))
	if err1 != nil {
		if err1 == redis.ErrNil {
			return
		}
		err = err1
		log.Errorc(c, "d.CacheFamilyRelsOfChild(get key: %v) err: %+v", key, err)
		return
	}
	res = &familymdl.FamilyRelation{}
	err = json.Unmarshal(reply, res)
	if err != nil {
		log.Errorc(c, "d.CacheFamilyRelsOfChild(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// AddCacheFamilyRelsOfChild Set data to redis
func (d *dao) AddCacheFamilyRelsOfChild(c context.Context, id int64, val *familymdl.FamilyRelation) (err error) {
	if val == nil {
		return
	}
	key := familyRelsOfChildKey(id)
	var bs []byte
	bs, err = json.Marshal(val)
	if err != nil {
		log.Errorc(c, "d.AddCacheFamilyRelsOfChild(get key: %v) err: %+v", key, err)
		return
	}
	expire := d.familyRelsExpire
	if _, err = d.redis.Do(c, "set", key, bs, "EX", expire); err != nil {
		log.Errorc(c, "d.AddCacheFamilyRelsOfChild(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// DelCacheFamilyRelsOfChild delete data from redis
func (d *dao) DelCacheFamilyRelsOfChild(c context.Context, id int64) (err error) {
	key := familyRelsOfChildKey(id)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheFamilyRelsOfChild(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// CacheSleepRemind get data from redis
func (d *dao) CacheSleepRemind(c context.Context, id int64) (res *antiadmdl.SleepRemind, err error) {
	key := sleepRemindKey(id)
	reply, err1 := redis.Bytes(d.redis.Do(c, "GET", key))
	if err1 != nil {
		if err1 == redis.ErrNil {
			return
		}
		err = err1
		log.Errorc(c, "d.CacheSleepRemind(get key: %v) err: %+v", key, err)
		return
	}
	res = &antiadmdl.SleepRemind{}
	err = json.Unmarshal(reply, res)
	if err != nil {
		log.Errorc(c, "d.CacheSleepRemind(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// AddCacheSleepRemind Set data to redis
func (d *dao) AddCacheSleepRemind(c context.Context, id int64, val *antiadmdl.SleepRemind) (err error) {
	if val == nil {
		return
	}
	key := sleepRemindKey(id)
	var bs []byte
	bs, err = json.Marshal(val)
	if err != nil {
		log.Errorc(c, "d.AddCacheSleepRemind(get key: %v) err: %+v", key, err)
		return
	}
	expire := d.sleepRemindExpire
	if _, err = d.redis.Do(c, "set", key, bs, "EX", expire); err != nil {
		log.Errorc(c, "d.AddCacheSleepRemind(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// DelCacheSleepRemind delete data from redis
func (d *dao) DelCacheSleepRemind(c context.Context, id int64) (err error) {
	key := sleepRemindKey(id)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheSleepRemind(get key: %v) err: %+v", key, err)
		return
	}
	return
}
