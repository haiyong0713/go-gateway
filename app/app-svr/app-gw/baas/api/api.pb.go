// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	go_common_library_time "go-common/library/time"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AuthZReq struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Cookie               string   `protobuf:"bytes,2,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Node                 string   `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthZReq) Reset()         { *m = AuthZReq{} }
func (m *AuthZReq) String() string { return proto.CompactTextString(m) }
func (*AuthZReq) ProtoMessage()    {}
func (*AuthZReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *AuthZReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthZReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthZReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthZReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthZReq.Merge(m, src)
}
func (m *AuthZReq) XXX_Size() int {
	return m.Size()
}
func (m *AuthZReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthZReq.DiscardUnknown(m)
}

var xxx_messageInfo_AuthZReq proto.InternalMessageInfo

func (m *AuthZReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthZReq) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *AuthZReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type AuthZReply struct {
	Projects             []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AuthZReply) Reset()         { *m = AuthZReply{} }
func (m *AuthZReply) String() string { return proto.CompactTextString(m) }
func (*AuthZReply) ProtoMessage()    {}
func (*AuthZReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *AuthZReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthZReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthZReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthZReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthZReply.Merge(m, src)
}
func (m *AuthZReply) XXX_Size() int {
	return m.Size()
}
func (m *AuthZReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthZReply.DiscardUnknown(m)
}

var xxx_messageInfo_AuthZReply proto.InternalMessageInfo

func (m *AuthZReply) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type Project struct {
	ProjectName          string   `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Project) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type ModelListRequest struct {
	TreeId               int64    `protobuf:"varint,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id" validate:"required"`
	Pn                   int32    `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" default:"1" min:"0"`
	Ps                   int32    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" default:"20" max:"100" min:"0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModelListRequest) Reset()         { *m = ModelListRequest{} }
func (m *ModelListRequest) String() string { return proto.CompactTextString(m) }
func (*ModelListRequest) ProtoMessage()    {}
func (*ModelListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *ModelListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelListRequest.Merge(m, src)
}
func (m *ModelListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModelListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModelListRequest proto.InternalMessageInfo

func (m *ModelListRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *ModelListRequest) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *ModelListRequest) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type ModelListReply struct {
	List                 []*MapperModelItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Pn                   int32              `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty"`
	Ps                   int32              `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty"`
	Total                int64              `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ModelListReply) Reset()         { *m = ModelListReply{} }
func (m *ModelListReply) String() string { return proto.CompactTextString(m) }
func (*ModelListReply) ProtoMessage()    {}
func (*ModelListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *ModelListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelListReply.Merge(m, src)
}
func (m *ModelListReply) XXX_Size() int {
	return m.Size()
}
func (m *ModelListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModelListReply proto.InternalMessageInfo

func (m *ModelListReply) GetList() []*MapperModelItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ModelListReply) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *ModelListReply) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *ModelListReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ModelItemListRequest struct {
	ModelName            string   `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" form:"model_name" validate:"required"`
	ExportApi            string   `protobuf:"bytes,2,opt,name=export_api,json=exportApi,proto3" json:"export_api,omitempty" form:"export_api" validate:"required"`
	TreeId               int64    `protobuf:"varint,3,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModelItemListRequest) Reset()         { *m = ModelItemListRequest{} }
func (m *ModelItemListRequest) String() string { return proto.CompactTextString(m) }
func (*ModelItemListRequest) ProtoMessage()    {}
func (*ModelItemListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *ModelItemListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelItemListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelItemListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelItemListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelItemListRequest.Merge(m, src)
}
func (m *ModelItemListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModelItemListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelItemListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModelItemListRequest proto.InternalMessageInfo

func (m *ModelItemListRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *ModelItemListRequest) GetExportApi() string {
	if m != nil {
		return m.ExportApi
	}
	return ""
}

func (m *ModelItemListRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

type ModelItemListReply struct {
	List                 []*FieldRuleMetadata `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	ModelName            string               `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ExportApi            string               `protobuf:"bytes,3,opt,name=export_api,json=exportApi,proto3" json:"export_api,omitempty"`
	DatasourceApi        []string             `protobuf:"bytes,4,rep,name=datasource_api,json=datasourceApi,proto3" json:"datasource_api,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ModelItemListReply) Reset()         { *m = ModelItemListReply{} }
func (m *ModelItemListReply) String() string { return proto.CompactTextString(m) }
func (*ModelItemListReply) ProtoMessage()    {}
func (*ModelItemListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ModelItemListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelItemListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelItemListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelItemListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelItemListReply.Merge(m, src)
}
func (m *ModelItemListReply) XXX_Size() int {
	return m.Size()
}
func (m *ModelItemListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelItemListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModelItemListReply proto.InternalMessageInfo

func (m *ModelItemListReply) GetList() []*FieldRuleMetadata {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ModelItemListReply) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *ModelItemListReply) GetExportApi() string {
	if m != nil {
		return m.ExportApi
	}
	return ""
}

func (m *ModelItemListReply) GetDatasourceApi() []string {
	if m != nil {
		return m.DatasourceApi
	}
	return nil
}

type ModelDetailRequest struct {
	ModelName            string   `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" form:"model_name" validate:"required"`
	TreeId               int64    `protobuf:"varint,2,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModelDetailRequest) Reset()         { *m = ModelDetailRequest{} }
func (m *ModelDetailRequest) String() string { return proto.CompactTextString(m) }
func (*ModelDetailRequest) ProtoMessage()    {}
func (*ModelDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *ModelDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelDetailRequest.Merge(m, src)
}
func (m *ModelDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModelDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModelDetailRequest proto.InternalMessageInfo

func (m *ModelDetailRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *ModelDetailRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

type ModelDetailReply struct {
	Detail               *ModelSchema `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ModelDetailReply) Reset()         { *m = ModelDetailReply{} }
func (m *ModelDetailReply) String() string { return proto.CompactTextString(m) }
func (*ModelDetailReply) ProtoMessage()    {}
func (*ModelDetailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *ModelDetailReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelDetailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelDetailReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelDetailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelDetailReply.Merge(m, src)
}
func (m *ModelDetailReply) XXX_Size() int {
	return m.Size()
}
func (m *ModelDetailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelDetailReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModelDetailReply proto.InternalMessageInfo

func (m *ModelDetailReply) GetDetail() *ModelSchema {
	if m != nil {
		return m.Detail
	}
	return nil
}

type ModelSchema struct {
	Type                 string                  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Properties           map[string]*ModelSchema `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ModelSchema) Reset()         { *m = ModelSchema{} }
func (m *ModelSchema) String() string { return proto.CompactTextString(m) }
func (*ModelSchema) ProtoMessage()    {}
func (*ModelSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *ModelSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelSchema.Merge(m, src)
}
func (m *ModelSchema) XXX_Size() int {
	return m.Size()
}
func (m *ModelSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelSchema.DiscardUnknown(m)
}

var xxx_messageInfo_ModelSchema proto.InternalMessageInfo

func (m *ModelSchema) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ModelSchema) GetProperties() map[string]*ModelSchema {
	if m != nil {
		return m.Properties
	}
	return nil
}

type StructedItem struct {
	Item                 map[string]*FieldValue `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StructedItem) Reset()         { *m = StructedItem{} }
func (m *StructedItem) String() string { return proto.CompactTextString(m) }
func (*StructedItem) ProtoMessage()    {}
func (*StructedItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *StructedItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructedItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StructedItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StructedItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructedItem.Merge(m, src)
}
func (m *StructedItem) XXX_Size() int {
	return m.Size()
}
func (m *StructedItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StructedItem.DiscardUnknown(m)
}

var xxx_messageInfo_StructedItem proto.InternalMessageInfo

func (m *StructedItem) GetItem() map[string]*FieldValue {
	if m != nil {
		return m.Item
	}
	return nil
}

type ItemReply struct {
	// Types that are valid to be assigned to Item:
	//	*ItemReply_ValueStruct
	//	*ItemReply_ValueRaw
	Item                 isItemReply_Item `protobuf_oneof:"item"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ItemReply) Reset()         { *m = ItemReply{} }
func (m *ItemReply) String() string { return proto.CompactTextString(m) }
func (*ItemReply) ProtoMessage()    {}
func (*ItemReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *ItemReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemReply.Merge(m, src)
}
func (m *ItemReply) XXX_Size() int {
	return m.Size()
}
func (m *ItemReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemReply.DiscardUnknown(m)
}

var xxx_messageInfo_ItemReply proto.InternalMessageInfo

type isItemReply_Item interface {
	isItemReply_Item()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ItemReply_ValueStruct struct {
	ValueStruct *StructedItem `protobuf:"bytes,1,opt,name=value_struct,json=valueStruct,proto3,oneof" json:"value_struct,omitempty"`
}
type ItemReply_ValueRaw struct {
	ValueRaw *FieldValue `protobuf:"bytes,2,opt,name=value_raw,json=valueRaw,proto3,oneof" json:"value_raw,omitempty"`
}

func (*ItemReply_ValueStruct) isItemReply_Item() {}
func (*ItemReply_ValueRaw) isItemReply_Item()    {}

func (m *ItemReply) GetItem() isItemReply_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ItemReply) GetValueStruct() *StructedItem {
	if x, ok := m.GetItem().(*ItemReply_ValueStruct); ok {
		return x.ValueStruct
	}
	return nil
}

func (m *ItemReply) GetValueRaw() *FieldValue {
	if x, ok := m.GetItem().(*ItemReply_ValueRaw); ok {
		return x.ValueRaw
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ItemReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ItemReply_ValueStruct)(nil),
		(*ItemReply_ValueRaw)(nil),
	}
}

type StringList struct {
	List                 []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringList) Reset()         { *m = StringList{} }
func (m *StringList) String() string { return proto.CompactTextString(m) }
func (*StringList) ProtoMessage()    {}
func (*StringList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *StringList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringList.Merge(m, src)
}
func (m *StringList) XXX_Size() int {
	return m.Size()
}
func (m *StringList) XXX_DiscardUnknown() {
	xxx_messageInfo_StringList.DiscardUnknown(m)
}

var xxx_messageInfo_StringList proto.InternalMessageInfo

func (m *StringList) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type IntList struct {
	List                 []int64  `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntList) Reset()         { *m = IntList{} }
func (m *IntList) String() string { return proto.CompactTextString(m) }
func (*IntList) ProtoMessage()    {}
func (*IntList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *IntList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntList.Merge(m, src)
}
func (m *IntList) XXX_Size() int {
	return m.Size()
}
func (m *IntList) XXX_DiscardUnknown() {
	xxx_messageInfo_IntList.DiscardUnknown(m)
}

var xxx_messageInfo_IntList proto.InternalMessageInfo

func (m *IntList) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

type BoolList struct {
	List                 []bool   `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolList) Reset()         { *m = BoolList{} }
func (m *BoolList) String() string { return proto.CompactTextString(m) }
func (*BoolList) ProtoMessage()    {}
func (*BoolList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *BoolList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoolList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoolList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoolList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolList.Merge(m, src)
}
func (m *BoolList) XXX_Size() int {
	return m.Size()
}
func (m *BoolList) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolList.DiscardUnknown(m)
}

var xxx_messageInfo_BoolList proto.InternalMessageInfo

func (m *BoolList) GetList() []bool {
	if m != nil {
		return m.List
	}
	return nil
}

type ItemList struct {
	List                 []*ItemReply `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ItemList) Reset()         { *m = ItemList{} }
func (m *ItemList) String() string { return proto.CompactTextString(m) }
func (*ItemList) ProtoMessage()    {}
func (*ItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *ItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemList.Merge(m, src)
}
func (m *ItemList) XXX_Size() int {
	return m.Size()
}
func (m *ItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemList.DiscardUnknown(m)
}

var xxx_messageInfo_ItemList proto.InternalMessageInfo

func (m *ItemList) GetList() []*ItemReply {
	if m != nil {
		return m.List
	}
	return nil
}

type FieldValue struct {
	// Types that are valid to be assigned to Value:
	//	*FieldValue_ValueString
	//	*FieldValue_ValueInt
	//	*FieldValue_ValueBool
	//	*FieldValue_ValueItem
	//	*FieldValue_ValueStringList
	//	*FieldValue_ValueBoolList
	//	*FieldValue_ValueIntList
	//	*FieldValue_ValueItemList
	Value                isFieldValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FieldValue) Reset()         { *m = FieldValue{} }
func (m *FieldValue) String() string { return proto.CompactTextString(m) }
func (*FieldValue) ProtoMessage()    {}
func (*FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *FieldValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValue.Merge(m, src)
}
func (m *FieldValue) XXX_Size() int {
	return m.Size()
}
func (m *FieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValue proto.InternalMessageInfo

type isFieldValue_Value interface {
	isFieldValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldValue_ValueString struct {
	ValueString string `protobuf:"bytes,1,opt,name=value_string,json=valueString,proto3,oneof" json:"value_string,omitempty"`
}
type FieldValue_ValueInt struct {
	ValueInt int64 `protobuf:"varint,2,opt,name=value_int,json=valueInt,proto3,oneof" json:"value_int,omitempty"`
}
type FieldValue_ValueBool struct {
	ValueBool bool `protobuf:"varint,3,opt,name=value_bool,json=valueBool,proto3,oneof" json:"value_bool,omitempty"`
}
type FieldValue_ValueItem struct {
	ValueItem *ItemReply `protobuf:"bytes,4,opt,name=value_item,json=valueItem,proto3,oneof" json:"value_item,omitempty"`
}
type FieldValue_ValueStringList struct {
	ValueStringList *StringList `protobuf:"bytes,5,opt,name=value_string_list,json=valueStringList,proto3,oneof" json:"value_string_list,omitempty"`
}
type FieldValue_ValueBoolList struct {
	ValueBoolList *BoolList `protobuf:"bytes,6,opt,name=value_bool_list,json=valueBoolList,proto3,oneof" json:"value_bool_list,omitempty"`
}
type FieldValue_ValueIntList struct {
	ValueIntList *IntList `protobuf:"bytes,7,opt,name=value_int_list,json=valueIntList,proto3,oneof" json:"value_int_list,omitempty"`
}
type FieldValue_ValueItemList struct {
	ValueItemList *ItemList `protobuf:"bytes,8,opt,name=value_item_list,json=valueItemList,proto3,oneof" json:"value_item_list,omitempty"`
}

func (*FieldValue_ValueString) isFieldValue_Value()     {}
func (*FieldValue_ValueInt) isFieldValue_Value()        {}
func (*FieldValue_ValueBool) isFieldValue_Value()       {}
func (*FieldValue_ValueItem) isFieldValue_Value()       {}
func (*FieldValue_ValueStringList) isFieldValue_Value() {}
func (*FieldValue_ValueBoolList) isFieldValue_Value()   {}
func (*FieldValue_ValueIntList) isFieldValue_Value()    {}
func (*FieldValue_ValueItemList) isFieldValue_Value()   {}

func (m *FieldValue) GetValue() isFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldValue) GetValueString() string {
	if x, ok := m.GetValue().(*FieldValue_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (m *FieldValue) GetValueInt() int64 {
	if x, ok := m.GetValue().(*FieldValue_ValueInt); ok {
		return x.ValueInt
	}
	return 0
}

func (m *FieldValue) GetValueBool() bool {
	if x, ok := m.GetValue().(*FieldValue_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (m *FieldValue) GetValueItem() *ItemReply {
	if x, ok := m.GetValue().(*FieldValue_ValueItem); ok {
		return x.ValueItem
	}
	return nil
}

func (m *FieldValue) GetValueStringList() *StringList {
	if x, ok := m.GetValue().(*FieldValue_ValueStringList); ok {
		return x.ValueStringList
	}
	return nil
}

func (m *FieldValue) GetValueBoolList() *BoolList {
	if x, ok := m.GetValue().(*FieldValue_ValueBoolList); ok {
		return x.ValueBoolList
	}
	return nil
}

func (m *FieldValue) GetValueIntList() *IntList {
	if x, ok := m.GetValue().(*FieldValue_ValueIntList); ok {
		return x.ValueIntList
	}
	return nil
}

func (m *FieldValue) GetValueItemList() *ItemList {
	if x, ok := m.GetValue().(*FieldValue_ValueItemList); ok {
		return x.ValueItemList
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldValue_ValueString)(nil),
		(*FieldValue_ValueInt)(nil),
		(*FieldValue_ValueBool)(nil),
		(*FieldValue_ValueItem)(nil),
		(*FieldValue_ValueStringList)(nil),
		(*FieldValue_ValueBoolList)(nil),
		(*FieldValue_ValueIntList)(nil),
		(*FieldValue_ValueItemList)(nil),
	}
}

type AddModelRequest struct {
	ModelName            string   `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" form:"model_name" validate:"required"`
	ModelFields          string   `protobuf:"bytes,2,opt,name=model_fields,json=modelFields,proto3" json:"model_fields,omitempty" form:"model_fields"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" form:"description"`
	TreeId               int64    `protobuf:"varint,4,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddModelRequest) Reset()         { *m = AddModelRequest{} }
func (m *AddModelRequest) String() string { return proto.CompactTextString(m) }
func (*AddModelRequest) ProtoMessage()    {}
func (*AddModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *AddModelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddModelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddModelRequest.Merge(m, src)
}
func (m *AddModelRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddModelRequest proto.InternalMessageInfo

func (m *AddModelRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *AddModelRequest) GetModelFields() string {
	if m != nil {
		return m.ModelFields
	}
	return ""
}

func (m *AddModelRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddModelRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

type AddModelFieldRequest struct {
	ModelName            string   `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" form:"model_name" validate:"required"`
	FieldName            string   `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty" form:"field_name" validate:"required"`
	FieldType            string   `protobuf:"bytes,3,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty" form:"field_type" validate:"required"`
	JsonAlias            string   `protobuf:"bytes,4,opt,name=json_alias,json=jsonAlias,proto3" json:"json_alias,omitempty" form:"json_alias"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddModelFieldRequest) Reset()         { *m = AddModelFieldRequest{} }
func (m *AddModelFieldRequest) String() string { return proto.CompactTextString(m) }
func (*AddModelFieldRequest) ProtoMessage()    {}
func (*AddModelFieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *AddModelFieldRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddModelFieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddModelFieldRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddModelFieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddModelFieldRequest.Merge(m, src)
}
func (m *AddModelFieldRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddModelFieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddModelFieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddModelFieldRequest proto.InternalMessageInfo

func (m *AddModelFieldRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *AddModelFieldRequest) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *AddModelFieldRequest) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *AddModelFieldRequest) GetJsonAlias() string {
	if m != nil {
		return m.JsonAlias
	}
	return ""
}

type UpdateModelFieldRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	ModelName            string   `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" form:"model_name" validate:"required"`
	FieldName            string   `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty" form:"field_name" validate:"required"`
	FieldType            string   `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty" form:"field_type" validate:"required"`
	JsonAlias            string   `protobuf:"bytes,5,opt,name=json_alias,json=jsonAlias,proto3" json:"json_alias,omitempty" form:"json_alias"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateModelFieldRequest) Reset()         { *m = UpdateModelFieldRequest{} }
func (m *UpdateModelFieldRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateModelFieldRequest) ProtoMessage()    {}
func (*UpdateModelFieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *UpdateModelFieldRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateModelFieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateModelFieldRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateModelFieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateModelFieldRequest.Merge(m, src)
}
func (m *UpdateModelFieldRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateModelFieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateModelFieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateModelFieldRequest proto.InternalMessageInfo

func (m *UpdateModelFieldRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateModelFieldRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *UpdateModelFieldRequest) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *UpdateModelFieldRequest) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *UpdateModelFieldRequest) GetJsonAlias() string {
	if m != nil {
		return m.JsonAlias
	}
	return ""
}

type DeleteModelFieldRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteModelFieldRequest) Reset()         { *m = DeleteModelFieldRequest{} }
func (m *DeleteModelFieldRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteModelFieldRequest) ProtoMessage()    {}
func (*DeleteModelFieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *DeleteModelFieldRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteModelFieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteModelFieldRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteModelFieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteModelFieldRequest.Merge(m, src)
}
func (m *DeleteModelFieldRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteModelFieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteModelFieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteModelFieldRequest proto.InternalMessageInfo

func (m *DeleteModelFieldRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MapperModelItem struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TreeId               int64                       `protobuf:"varint,4,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,6,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	IsDeleted            int32                       `protobuf:"varint,7,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MapperModelItem) Reset()         { *m = MapperModelItem{} }
func (m *MapperModelItem) String() string { return proto.CompactTextString(m) }
func (*MapperModelItem) ProtoMessage()    {}
func (*MapperModelItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *MapperModelItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapperModelItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapperModelItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapperModelItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapperModelItem.Merge(m, src)
}
func (m *MapperModelItem) XXX_Size() int {
	return m.Size()
}
func (m *MapperModelItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MapperModelItem.DiscardUnknown(m)
}

var xxx_messageInfo_MapperModelItem proto.InternalMessageInfo

func (m *MapperModelItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MapperModelItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MapperModelItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MapperModelItem) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *MapperModelItem) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *MapperModelItem) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *MapperModelItem) GetIsDeleted() int32 {
	if m != nil {
		return m.IsDeleted
	}
	return 0
}

type ModelField struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ModelName            string                      `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	FieldName            string                      `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldType            string                      `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
	JsonAlias            string                      `protobuf:"bytes,5,opt,name=json_alias,json=jsonAlias,proto3" json:"json_alias,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	IsDeleted            int32                       `protobuf:"varint,8,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ModelField) Reset()         { *m = ModelField{} }
func (m *ModelField) String() string { return proto.CompactTextString(m) }
func (*ModelField) ProtoMessage()    {}
func (*ModelField) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *ModelField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelField.Merge(m, src)
}
func (m *ModelField) XXX_Size() int {
	return m.Size()
}
func (m *ModelField) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelField.DiscardUnknown(m)
}

var xxx_messageInfo_ModelField proto.InternalMessageInfo

func (m *ModelField) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModelField) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *ModelField) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ModelField) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *ModelField) GetJsonAlias() string {
	if m != nil {
		return m.JsonAlias
	}
	return ""
}

func (m *ModelField) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ModelField) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *ModelField) GetIsDeleted() int32 {
	if m != nil {
		return m.IsDeleted
	}
	return 0
}

type ModelFieldReply struct {
	List                 []*ModelField `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ModelFieldReply) Reset()         { *m = ModelFieldReply{} }
func (m *ModelFieldReply) String() string { return proto.CompactTextString(m) }
func (*ModelFieldReply) ProtoMessage()    {}
func (*ModelFieldReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *ModelFieldReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelFieldReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelFieldReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelFieldReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelFieldReply.Merge(m, src)
}
func (m *ModelFieldReply) XXX_Size() int {
	return m.Size()
}
func (m *ModelFieldReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelFieldReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModelFieldReply proto.InternalMessageInfo

func (m *ModelFieldReply) GetList() []*ModelField {
	if m != nil {
		return m.List
	}
	return nil
}

type FieldRuleMetadata struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ModelName            string                      `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	FieldName            string                      `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldType            string                      `protobuf:"bytes,4,opt,name=field_type,json=fieldType,proto3" json:"field_type,omitempty"`
	JsonAlias            string                      `protobuf:"bytes,5,opt,name=json_alias,json=jsonAlias,proto3" json:"json_alias,omitempty"`
	DatasourceApi        string                      `protobuf:"bytes,6,opt,name=datasource_api,json=datasourceApi,proto3" json:"datasource_api,omitempty"`
	ExternalRule         string                      `protobuf:"bytes,7,opt,name=external_rule,json=externalRule,proto3" json:"external_rule,omitempty"`
	RuleId               int64                       `protobuf:"varint,8,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleType             string                      `protobuf:"bytes,9,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`
	ValueSource          string                      `protobuf:"bytes,10,opt,name=value_source,json=valueSource,proto3" json:"value_source,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FieldRuleMetadata) Reset()         { *m = FieldRuleMetadata{} }
func (m *FieldRuleMetadata) String() string { return proto.CompactTextString(m) }
func (*FieldRuleMetadata) ProtoMessage()    {}
func (*FieldRuleMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *FieldRuleMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldRuleMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldRuleMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldRuleMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldRuleMetadata.Merge(m, src)
}
func (m *FieldRuleMetadata) XXX_Size() int {
	return m.Size()
}
func (m *FieldRuleMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldRuleMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_FieldRuleMetadata proto.InternalMessageInfo

func (m *FieldRuleMetadata) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FieldRuleMetadata) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *FieldRuleMetadata) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *FieldRuleMetadata) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *FieldRuleMetadata) GetJsonAlias() string {
	if m != nil {
		return m.JsonAlias
	}
	return ""
}

func (m *FieldRuleMetadata) GetDatasourceApi() string {
	if m != nil {
		return m.DatasourceApi
	}
	return ""
}

func (m *FieldRuleMetadata) GetExternalRule() string {
	if m != nil {
		return m.ExternalRule
	}
	return ""
}

func (m *FieldRuleMetadata) GetRuleId() int64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *FieldRuleMetadata) GetRuleType() string {
	if m != nil {
		return m.RuleType
	}
	return ""
}

func (m *FieldRuleMetadata) GetValueSource() string {
	if m != nil {
		return m.ValueSource
	}
	return ""
}

func (m *FieldRuleMetadata) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

type ExportItem struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExportApi            string                      `protobuf:"bytes,2,opt,name=export_api,json=exportApi,proto3" json:"export_api,omitempty"`
	ModelName            string                      `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,4,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,5,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	State                int32                       `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	IsDeleted            int32                       `protobuf:"varint,7,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	TreeId               int64                       `protobuf:"varint,8,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ExportItem) Reset()         { *m = ExportItem{} }
func (m *ExportItem) String() string { return proto.CompactTextString(m) }
func (*ExportItem) ProtoMessage()    {}
func (*ExportItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *ExportItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportItem.Merge(m, src)
}
func (m *ExportItem) XXX_Size() int {
	return m.Size()
}
func (m *ExportItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportItem.DiscardUnknown(m)
}

var xxx_messageInfo_ExportItem proto.InternalMessageInfo

func (m *ExportItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExportItem) GetExportApi() string {
	if m != nil {
		return m.ExportApi
	}
	return ""
}

func (m *ExportItem) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *ExportItem) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ExportItem) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *ExportItem) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ExportItem) GetIsDeleted() int32 {
	if m != nil {
		return m.IsDeleted
	}
	return 0
}

func (m *ExportItem) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

type ExportListRequest struct {
	ExportApi            string   `protobuf:"bytes,1,opt,name=export_api,json=exportApi,proto3" json:"export_api,omitempty" form:"export_api"`
	TreeId               int64    `protobuf:"varint,2,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportListRequest) Reset()         { *m = ExportListRequest{} }
func (m *ExportListRequest) String() string { return proto.CompactTextString(m) }
func (*ExportListRequest) ProtoMessage()    {}
func (*ExportListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *ExportListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportListRequest.Merge(m, src)
}
func (m *ExportListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExportListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExportListRequest proto.InternalMessageInfo

func (m *ExportListRequest) GetExportApi() string {
	if m != nil {
		return m.ExportApi
	}
	return ""
}

func (m *ExportListRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

type ExportList struct {
	Export               *ExportItem   `protobuf:"bytes,1,opt,name=export,proto3" json:"export,omitempty"`
	Imports              []*ImportItem `protobuf:"bytes,2,rep,name=imports,proto3" json:"imports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ExportList) Reset()         { *m = ExportList{} }
func (m *ExportList) String() string { return proto.CompactTextString(m) }
func (*ExportList) ProtoMessage()    {}
func (*ExportList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *ExportList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportList.Merge(m, src)
}
func (m *ExportList) XXX_Size() int {
	return m.Size()
}
func (m *ExportList) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportList.DiscardUnknown(m)
}

var xxx_messageInfo_ExportList proto.InternalMessageInfo

func (m *ExportList) GetExport() *ExportItem {
	if m != nil {
		return m.Export
	}
	return nil
}

func (m *ExportList) GetImports() []*ImportItem {
	if m != nil {
		return m.Imports
	}
	return nil
}

type ExportListReply struct {
	List                 []*ExportList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ExportListReply) Reset()         { *m = ExportListReply{} }
func (m *ExportListReply) String() string { return proto.CompactTextString(m) }
func (*ExportListReply) ProtoMessage()    {}
func (*ExportListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *ExportListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportListReply.Merge(m, src)
}
func (m *ExportListReply) XXX_Size() int {
	return m.Size()
}
func (m *ExportListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExportListReply proto.InternalMessageInfo

func (m *ExportListReply) GetList() []*ExportList {
	if m != nil {
		return m.List
	}
	return nil
}

type AddExportRequest struct {
	ExportApi            string   `protobuf:"bytes,1,opt,name=export_api,json=exportApi,proto3" json:"export_api,omitempty" form:"export_api" validate:"required"`
	ModelName            string   `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" form:"model_name" validate:"required"`
	State                int32    `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty" form:"state"`
	TreeId               int64    `protobuf:"varint,4,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddExportRequest) Reset()         { *m = AddExportRequest{} }
func (m *AddExportRequest) String() string { return proto.CompactTextString(m) }
func (*AddExportRequest) ProtoMessage()    {}
func (*AddExportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *AddExportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddExportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddExportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddExportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddExportRequest.Merge(m, src)
}
func (m *AddExportRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddExportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddExportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddExportRequest proto.InternalMessageInfo

func (m *AddExportRequest) GetExportApi() string {
	if m != nil {
		return m.ExportApi
	}
	return ""
}

func (m *AddExportRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *AddExportRequest) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *AddExportRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

type UpdateExportRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	ExportApi            string   `protobuf:"bytes,2,opt,name=export_api,json=exportApi,proto3" json:"export_api,omitempty" form:"export_api" validate:"required"`
	ModelName            string   `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" form:"model_name" validate:"required"`
	State                int32    `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty" form:"state"`
	TreeId               int64    `protobuf:"varint,5,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateExportRequest) Reset()         { *m = UpdateExportRequest{} }
func (m *UpdateExportRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateExportRequest) ProtoMessage()    {}
func (*UpdateExportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *UpdateExportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateExportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateExportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateExportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateExportRequest.Merge(m, src)
}
func (m *UpdateExportRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateExportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateExportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateExportRequest proto.InternalMessageInfo

func (m *UpdateExportRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateExportRequest) GetExportApi() string {
	if m != nil {
		return m.ExportApi
	}
	return ""
}

func (m *UpdateExportRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *UpdateExportRequest) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UpdateExportRequest) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

type ImportItem struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaasExportId         int64    `protobuf:"varint,2,opt,name=baas_export_id,json=baasExportId,proto3" json:"baas_export_id,omitempty"`
	DatasourceApi        string   `protobuf:"bytes,3,opt,name=datasource_api,json=datasourceApi,proto3" json:"datasource_api,omitempty"`
	DatasourceType       string   `protobuf:"bytes,4,opt,name=datasource_type,json=datasourceType,proto3" json:"datasource_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportItem) Reset()         { *m = ImportItem{} }
func (m *ImportItem) String() string { return proto.CompactTextString(m) }
func (*ImportItem) ProtoMessage()    {}
func (*ImportItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *ImportItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportItem.Merge(m, src)
}
func (m *ImportItem) XXX_Size() int {
	return m.Size()
}
func (m *ImportItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportItem.DiscardUnknown(m)
}

var xxx_messageInfo_ImportItem proto.InternalMessageInfo

func (m *ImportItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImportItem) GetBaasExportId() int64 {
	if m != nil {
		return m.BaasExportId
	}
	return 0
}

func (m *ImportItem) GetDatasourceApi() string {
	if m != nil {
		return m.DatasourceApi
	}
	return ""
}

func (m *ImportItem) GetDatasourceType() string {
	if m != nil {
		return m.DatasourceType
	}
	return ""
}

type AddImportRequest struct {
	BaasExportId         int64    `protobuf:"varint,1,opt,name=baas_export_id,json=baasExportId,proto3" json:"baas_export_id,omitempty" form:"baas_export_id" validate:"required"`
	DatasourceApi        string   `protobuf:"bytes,2,opt,name=datasource_api,json=datasourceApi,proto3" json:"datasource_api,omitempty" form:"datasource_api" validate:"required"`
	DatasourceType       string   `protobuf:"bytes,3,opt,name=datasource_type,json=datasourceType,proto3" json:"datasource_type,omitempty" form:"datasource_type" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddImportRequest) Reset()         { *m = AddImportRequest{} }
func (m *AddImportRequest) String() string { return proto.CompactTextString(m) }
func (*AddImportRequest) ProtoMessage()    {}
func (*AddImportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *AddImportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddImportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddImportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddImportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddImportRequest.Merge(m, src)
}
func (m *AddImportRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddImportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddImportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddImportRequest proto.InternalMessageInfo

func (m *AddImportRequest) GetBaasExportId() int64 {
	if m != nil {
		return m.BaasExportId
	}
	return 0
}

func (m *AddImportRequest) GetDatasourceApi() string {
	if m != nil {
		return m.DatasourceApi
	}
	return ""
}

func (m *AddImportRequest) GetDatasourceType() string {
	if m != nil {
		return m.DatasourceType
	}
	return ""
}

type UpdateImportRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	BaasExportId         int64    `protobuf:"varint,2,opt,name=baas_export_id,json=baasExportId,proto3" json:"baas_export_id,omitempty" form:"baas_export_id"`
	DatasourceApi        string   `protobuf:"bytes,3,opt,name=datasource_api,json=datasourceApi,proto3" json:"datasource_api,omitempty" form:"datasource_api" validate:"required"`
	DatasourceType       string   `protobuf:"bytes,4,opt,name=datasource_type,json=datasourceType,proto3" json:"datasource_type,omitempty" form:"datasource_type" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateImportRequest) Reset()         { *m = UpdateImportRequest{} }
func (m *UpdateImportRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateImportRequest) ProtoMessage()    {}
func (*UpdateImportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *UpdateImportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateImportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateImportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateImportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateImportRequest.Merge(m, src)
}
func (m *UpdateImportRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateImportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateImportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateImportRequest proto.InternalMessageInfo

func (m *UpdateImportRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateImportRequest) GetBaasExportId() int64 {
	if m != nil {
		return m.BaasExportId
	}
	return 0
}

func (m *UpdateImportRequest) GetDatasourceApi() string {
	if m != nil {
		return m.DatasourceApi
	}
	return ""
}

func (m *UpdateImportRequest) GetDatasourceType() string {
	if m != nil {
		return m.DatasourceType
	}
	return ""
}

type AddModelFieldRuleRequest struct {
	FieldRuleList        string   `protobuf:"bytes,1,opt,name=field_rule_list,json=fieldRuleList,proto3" json:"field_rule_list,omitempty" form:"field_rule_list" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddModelFieldRuleRequest) Reset()         { *m = AddModelFieldRuleRequest{} }
func (m *AddModelFieldRuleRequest) String() string { return proto.CompactTextString(m) }
func (*AddModelFieldRuleRequest) ProtoMessage()    {}
func (*AddModelFieldRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *AddModelFieldRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddModelFieldRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddModelFieldRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddModelFieldRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddModelFieldRuleRequest.Merge(m, src)
}
func (m *AddModelFieldRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddModelFieldRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddModelFieldRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddModelFieldRuleRequest proto.InternalMessageInfo

func (m *AddModelFieldRuleRequest) GetFieldRuleList() string {
	if m != nil {
		return m.FieldRuleList
	}
	return ""
}

type UpdateModelFieldRuleRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	ModelName            string   `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty" form:"model_name" validate:"required"`
	FieldName            string   `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty" form:"field_name" validate:"required"`
	DatasourceApi        string   `protobuf:"bytes,4,opt,name=datasource_api,json=datasourceApi,proto3" json:"datasource_api,omitempty" form:"datasource_api" validate:"required"`
	ExternalRule         string   `protobuf:"bytes,5,opt,name=external_rule,json=externalRule,proto3" json:"external_rule,omitempty" form:"external_rule"`
	RuleType             string   `protobuf:"bytes,6,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty" form:"rule_type" validate:"required"`
	ValueSource          string   `protobuf:"bytes,7,opt,name=value_source,json=valueSource,proto3" json:"value_source,omitempty" form:"value_source" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateModelFieldRuleRequest) Reset()         { *m = UpdateModelFieldRuleRequest{} }
func (m *UpdateModelFieldRuleRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateModelFieldRuleRequest) ProtoMessage()    {}
func (*UpdateModelFieldRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *UpdateModelFieldRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateModelFieldRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateModelFieldRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateModelFieldRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateModelFieldRuleRequest.Merge(m, src)
}
func (m *UpdateModelFieldRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateModelFieldRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateModelFieldRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateModelFieldRuleRequest proto.InternalMessageInfo

func (m *UpdateModelFieldRuleRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateModelFieldRuleRequest) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *UpdateModelFieldRuleRequest) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *UpdateModelFieldRuleRequest) GetDatasourceApi() string {
	if m != nil {
		return m.DatasourceApi
	}
	return ""
}

func (m *UpdateModelFieldRuleRequest) GetExternalRule() string {
	if m != nil {
		return m.ExternalRule
	}
	return ""
}

func (m *UpdateModelFieldRuleRequest) GetRuleType() string {
	if m != nil {
		return m.RuleType
	}
	return ""
}

func (m *UpdateModelFieldRuleRequest) GetValueSource() string {
	if m != nil {
		return m.ValueSource
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthZReq)(nil), "app.gw.gateway.baas.v1.AuthZReq")
	proto.RegisterType((*AuthZReply)(nil), "app.gw.gateway.baas.v1.AuthZReply")
	proto.RegisterType((*Project)(nil), "app.gw.gateway.baas.v1.Project")
	proto.RegisterType((*ModelListRequest)(nil), "app.gw.gateway.baas.v1.ModelListRequest")
	proto.RegisterType((*ModelListReply)(nil), "app.gw.gateway.baas.v1.ModelListReply")
	proto.RegisterType((*ModelItemListRequest)(nil), "app.gw.gateway.baas.v1.ModelItemListRequest")
	proto.RegisterType((*ModelItemListReply)(nil), "app.gw.gateway.baas.v1.ModelItemListReply")
	proto.RegisterType((*ModelDetailRequest)(nil), "app.gw.gateway.baas.v1.ModelDetailRequest")
	proto.RegisterType((*ModelDetailReply)(nil), "app.gw.gateway.baas.v1.ModelDetailReply")
	proto.RegisterType((*ModelSchema)(nil), "app.gw.gateway.baas.v1.ModelSchema")
	proto.RegisterMapType((map[string]*ModelSchema)(nil), "app.gw.gateway.baas.v1.ModelSchema.PropertiesEntry")
	proto.RegisterType((*StructedItem)(nil), "app.gw.gateway.baas.v1.StructedItem")
	proto.RegisterMapType((map[string]*FieldValue)(nil), "app.gw.gateway.baas.v1.StructedItem.ItemEntry")
	proto.RegisterType((*ItemReply)(nil), "app.gw.gateway.baas.v1.ItemReply")
	proto.RegisterType((*StringList)(nil), "app.gw.gateway.baas.v1.StringList")
	proto.RegisterType((*IntList)(nil), "app.gw.gateway.baas.v1.IntList")
	proto.RegisterType((*BoolList)(nil), "app.gw.gateway.baas.v1.BoolList")
	proto.RegisterType((*ItemList)(nil), "app.gw.gateway.baas.v1.ItemList")
	proto.RegisterType((*FieldValue)(nil), "app.gw.gateway.baas.v1.FieldValue")
	proto.RegisterType((*AddModelRequest)(nil), "app.gw.gateway.baas.v1.AddModelRequest")
	proto.RegisterType((*AddModelFieldRequest)(nil), "app.gw.gateway.baas.v1.AddModelFieldRequest")
	proto.RegisterType((*UpdateModelFieldRequest)(nil), "app.gw.gateway.baas.v1.UpdateModelFieldRequest")
	proto.RegisterType((*DeleteModelFieldRequest)(nil), "app.gw.gateway.baas.v1.DeleteModelFieldRequest")
	proto.RegisterType((*MapperModelItem)(nil), "app.gw.gateway.baas.v1.MapperModelItem")
	proto.RegisterType((*ModelField)(nil), "app.gw.gateway.baas.v1.ModelField")
	proto.RegisterType((*ModelFieldReply)(nil), "app.gw.gateway.baas.v1.ModelFieldReply")
	proto.RegisterType((*FieldRuleMetadata)(nil), "app.gw.gateway.baas.v1.FieldRuleMetadata")
	proto.RegisterType((*ExportItem)(nil), "app.gw.gateway.baas.v1.ExportItem")
	proto.RegisterType((*ExportListRequest)(nil), "app.gw.gateway.baas.v1.ExportListRequest")
	proto.RegisterType((*ExportList)(nil), "app.gw.gateway.baas.v1.ExportList")
	proto.RegisterType((*ExportListReply)(nil), "app.gw.gateway.baas.v1.ExportListReply")
	proto.RegisterType((*AddExportRequest)(nil), "app.gw.gateway.baas.v1.AddExportRequest")
	proto.RegisterType((*UpdateExportRequest)(nil), "app.gw.gateway.baas.v1.UpdateExportRequest")
	proto.RegisterType((*ImportItem)(nil), "app.gw.gateway.baas.v1.ImportItem")
	proto.RegisterType((*AddImportRequest)(nil), "app.gw.gateway.baas.v1.AddImportRequest")
	proto.RegisterType((*UpdateImportRequest)(nil), "app.gw.gateway.baas.v1.UpdateImportRequest")
	proto.RegisterType((*AddModelFieldRuleRequest)(nil), "app.gw.gateway.baas.v1.AddModelFieldRuleRequest")
	proto.RegisterType((*UpdateModelFieldRuleRequest)(nil), "app.gw.gateway.baas.v1.UpdateModelFieldRuleRequest")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 2198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x6f, 0xdc, 0xc6,
	0x15, 0x17, 0xb9, 0x1f, 0xda, 0x7d, 0x5a, 0x7d, 0x4d, 0x64, 0x5b, 0x5d, 0x57, 0xe2, 0x7a, 0xec,
	0xd8, 0x72, 0x1c, 0xaf, 0x24, 0x3b, 0x69, 0x5d, 0x35, 0x41, 0x20, 0x22, 0x6e, 0xa5, 0x36, 0x4a,
	0x03, 0xca, 0x49, 0x80, 0xa4, 0x81, 0x4a, 0x2d, 0x47, 0x6b, 0x26, 0xdc, 0x25, 0x4d, 0x72, 0x2d,
	0xeb, 0x5c, 0xa0, 0x87, 0xf6, 0xd0, 0x22, 0x87, 0xa2, 0xd7, 0x1e, 0x7a, 0xe9, 0xa5, 0xc7, 0xe6,
	0x0f, 0x68, 0x81, 0x1e, 0x7b, 0xee, 0x81, 0x08, 0xdc, 0x9b, 0x7b, 0xea, 0x1e, 0x5b, 0x14, 0x28,
	0x66, 0x86, 0x1f, 0x43, 0x2e, 0xb9, 0x5a, 0xcb, 0x32, 0x50, 0xf4, 0x22, 0xec, 0xcc, 0x9b, 0xf7,
	0xe6, 0xbd, 0xdf, 0xfb, 0x98, 0x37, 0x43, 0x41, 0x5d, 0x77, 0xcc, 0xb6, 0xe3, 0xda, 0xbe, 0x8d,
	0x2e, 0xea, 0x8e, 0xd3, 0xee, 0x1e, 0xb7, 0xbb, 0xba, 0x4f, 0x8e, 0xf5, 0x93, 0xf6, 0xa1, 0xae,
	0x7b, 0xed, 0xc7, 0x9b, 0xcd, 0xdb, 0x5d, 0xd3, 0x7f, 0x38, 0x38, 0x6c, 0x77, 0xec, 0xde, 0x7a,
	0xd7, 0xee, 0xda, 0xeb, 0x6c, 0xf9, 0xe1, 0xe0, 0x88, 0x8d, 0xd8, 0x80, 0xfd, 0xe2, 0x62, 0x9a,
	0x97, 0xbb, 0xb6, 0xdd, 0xb5, 0x48, 0xb2, 0x8a, 0xf4, 0x1c, 0xff, 0x24, 0x24, 0xae, 0x66, 0x89,
	0xc7, 0xae, 0xee, 0x38, 0xc4, 0xf5, 0x38, 0x1d, 0x1f, 0x43, 0x6d, 0x7b, 0xe0, 0x3f, 0xfc, 0x44,
	0x23, 0x8f, 0x50, 0x13, 0x6a, 0x03, 0x8f, 0xb8, 0x7d, 0xbd, 0x47, 0x96, 0xa5, 0x96, 0xb4, 0x56,
	0xd7, 0xe2, 0x31, 0xba, 0x08, 0xd5, 0x8e, 0x6d, 0x7f, 0x61, 0x92, 0x65, 0x99, 0x51, 0xc2, 0x11,
	0xfa, 0x36, 0x94, 0xfb, 0xb6, 0x41, 0x96, 0x4b, 0x74, 0x56, 0xbd, 0x3a, 0x0c, 0x14, 0xe5, 0xc8,
	0x76, 0x7b, 0x5b, 0x98, 0xce, 0xe2, 0xd6, 0x63, 0xdd, 0x32, 0x0d, 0xdd, 0x27, 0x5b, 0xd8, 0x25,
	0x8f, 0x06, 0xa6, 0x4b, 0x0c, 0xac, 0x31, 0x06, 0xfc, 0x31, 0x40, 0xb8, 0xb1, 0x63, 0x9d, 0xa0,
	0x5d, 0xa8, 0x39, 0xae, 0xfd, 0x39, 0xe9, 0xf8, 0xde, 0xb2, 0xd4, 0x2a, 0xad, 0xcd, 0xdc, 0x51,
	0xda, 0xf9, 0xe8, 0xb4, 0x3f, 0xe0, 0xeb, 0xd4, 0xc6, 0xb3, 0x40, 0x89, 0x99, 0xb4, 0xf8, 0x17,
	0xfe, 0x31, 0x4c, 0x87, 0x4b, 0xd0, 0x5d, 0x68, 0x84, 0xd3, 0x07, 0x89, 0x51, 0xea, 0xc2, 0xb3,
	0x40, 0x49, 0xcd, 0x6b, 0x33, 0xe1, 0xe8, 0x7d, 0x6a, 0xe9, 0x37, 0x43, 0x8b, 0x98, 0x9d, 0x6a,
	0xed, 0x59, 0xa0, 0xb0, 0x71, 0xa8, 0xf6, 0x9f, 0x24, 0x58, 0xd8, 0xb3, 0x0d, 0x62, 0xbd, 0x67,
	0x7a, 0xbe, 0x46, 0x1e, 0x0d, 0x88, 0xe7, 0xa3, 0x77, 0x60, 0xda, 0x77, 0x09, 0x39, 0x30, 0x0d,
	0xb6, 0x45, 0x49, 0xbd, 0x3e, 0x0c, 0x14, 0xcc, 0x71, 0x08, 0x09, 0xf9, 0x50, 0x54, 0x29, 0x75,
	0xd7, 0x40, 0x9b, 0x20, 0x3b, 0x7d, 0xb6, 0x63, 0x45, 0xbd, 0x32, 0x0c, 0x94, 0x15, 0xce, 0xeb,
	0xf4, 0x71, 0xcb, 0x20, 0x47, 0xfa, 0xc0, 0xf2, 0xb7, 0xf0, 0x26, 0x6e, 0xf5, 0xcc, 0xfe, 0x16,
	0xde, 0xc0, 0x9a, 0xec, 0xf4, 0xd1, 0x5b, 0x20, 0x3b, 0x1e, 0x83, 0xbd, 0xa2, 0xbe, 0x3e, 0x0c,
	0x94, 0xb5, 0x90, 0xc5, 0x13, 0x58, 0xee, 0x6c, 0xe0, 0x56, 0x4f, 0x7f, 0xb2, 0x85, 0x37, 0x37,
	0x36, 0x44, 0x6e, 0x0f, 0xff, 0x54, 0x82, 0x39, 0xc1, 0x0c, 0xea, 0x82, 0xef, 0x42, 0xd9, 0x32,
	0x3d, 0x3f, 0x84, 0xff, 0x46, 0x11, 0xfc, 0x7b, 0x2c, 0x7c, 0x18, 0xef, 0xae, 0x4f, 0x7a, 0x1a,
	0x63, 0x42, 0x73, 0x89, 0x01, 0x4c, 0xbb, 0xb9, 0x44, 0x3b, 0xba, 0x1f, 0x5a, 0x82, 0x8a, 0x6f,
	0xfb, 0xba, 0xb5, 0x5c, 0xa6, 0xf8, 0x68, 0x7c, 0x80, 0xff, 0x21, 0xc1, 0x52, 0x2c, 0x49, 0x04,
	0x74, 0x07, 0xa0, 0x47, 0xe7, 0x45, 0xb7, 0xdd, 0x1c, 0x06, 0xca, 0xab, 0xdc, 0xc8, 0x84, 0x96,
	0x0f, 0x6b, 0x9d, 0x2d, 0x60, 0xde, 0xdc, 0x01, 0x20, 0x4f, 0x1c, 0xdb, 0xf5, 0x0f, 0x74, 0xc7,
	0x0c, 0x7d, 0x2a, 0x48, 0x4a, 0x68, 0x05, 0x92, 0xf8, 0x82, 0x6d, 0xc7, 0x14, 0x9d, 0x5c, 0x3a,
	0x8b, 0x93, 0xf1, 0x57, 0x12, 0xa0, 0x8c, 0xb5, 0x14, 0xf7, 0xb7, 0x53, 0xb8, 0xdf, 0x2c, 0xc2,
	0xfd, 0x7b, 0x26, 0xb1, 0x0c, 0x6d, 0x60, 0x91, 0x3d, 0xe2, 0xeb, 0x86, 0xee, 0xeb, 0x21, 0xf2,
	0x2b, 0x29, 0xa8, 0x78, 0x72, 0x0a, 0xf6, 0xaf, 0xa4, 0xec, 0x2f, 0x71, 0x72, 0x62, 0xd4, 0xab,
	0x30, 0x47, 0x65, 0x79, 0xf6, 0xc0, 0xed, 0x10, 0xb6, 0xa4, 0xdc, 0x2a, 0xad, 0xd5, 0xb5, 0xd9,
	0x64, 0x76, 0xdb, 0x31, 0xf1, 0x2f, 0x22, 0xd5, 0xdf, 0x25, 0xbe, 0x6e, 0x5a, 0xe7, 0xef, 0xa6,
	0x5b, 0x09, 0xb8, 0x32, 0x03, 0x17, 0x0d, 0x03, 0x65, 0x2e, 0x0d, 0x6e, 0x0c, 0xe4, 0x8f, 0xc2,
	0x14, 0x8c, 0x94, 0xe1, 0xd1, 0x5b, 0x35, 0xd8, 0x90, 0xa9, 0x31, 0x73, 0xe7, 0x6a, 0x61, 0xfc,
	0x52, 0xce, 0xfd, 0xce, 0x43, 0xd2, 0xd3, 0xb5, 0x90, 0x05, 0xff, 0x4d, 0x82, 0x19, 0x61, 0x1e,
	0x21, 0x28, 0xfb, 0x27, 0x4e, 0x54, 0x04, 0xd9, 0x6f, 0xb4, 0x0f, 0xe0, 0xb8, 0xb6, 0x43, 0x5c,
	0xdf, 0x24, 0xde, 0xb2, 0xcc, 0x9c, 0x75, 0x77, 0x82, 0x4d, 0x68, 0xbd, 0x0a, 0xb9, 0xee, 0xf7,
	0x7d, 0xf7, 0x44, 0x13, 0xc4, 0x34, 0x0f, 0x61, 0x3e, 0x43, 0x46, 0x0b, 0x50, 0xfa, 0x82, 0x9c,
	0x84, 0x5b, 0xd3, 0x9f, 0xe8, 0x3b, 0x50, 0x79, 0xac, 0x5b, 0x03, 0xee, 0xdc, 0x09, 0x2d, 0xe3,
	0x1c, 0x5b, 0xf2, 0x3d, 0x09, 0xff, 0x41, 0x82, 0xc6, 0xbe, 0xef, 0x0e, 0x3a, 0x3e, 0x31, 0x68,
	0xe4, 0x21, 0x15, 0xca, 0xa6, 0x4f, 0x7a, 0x61, 0xc0, 0xb5, 0x8b, 0xc4, 0x89, 0x3c, 0x6d, 0xfa,
	0x87, 0xab, 0xcf, 0x78, 0x9b, 0x9f, 0x42, 0x3d, 0x9e, 0xca, 0x51, 0xf9, 0x5e, 0x5a, 0x65, 0x3c,
	0x36, 0xa8, 0x3f, 0xa2, 0x2b, 0x45, 0x8d, 0x7f, 0x2b, 0x71, 0xe9, 0xd1, 0xd1, 0xd0, 0x60, 0xa4,
	0x03, 0x8f, 0x29, 0x14, 0xfa, 0xf7, 0xda, 0x24, 0x6a, 0xef, 0x4c, 0x69, 0x33, 0x8c, 0x97, 0x4f,
	0xa2, 0x6d, 0xa8, 0x73, 0x51, 0xae, 0x7e, 0x3c, 0xb9, 0x6a, 0x3b, 0x53, 0x5a, 0x8d, 0xb1, 0x69,
	0xfa, 0xb1, 0x5a, 0xe5, 0xe0, 0xe1, 0x16, 0xc0, 0xbe, 0xef, 0x9a, 0xfd, 0x2e, 0x4d, 0x64, 0x1a,
	0x30, 0x71, 0x0e, 0xd7, 0x79, 0x62, 0xe2, 0x15, 0x98, 0xde, 0xed, 0xfb, 0x23, 0xe4, 0x52, 0x48,
	0x5e, 0x85, 0x9a, 0x6a, 0xdb, 0xd6, 0x08, 0xbd, 0x16, 0xd2, 0xb7, 0xa1, 0x16, 0xd5, 0x09, 0xf4,
	0x66, 0xaa, 0x44, 0x5c, 0x29, 0x52, 0x39, 0xc6, 0x2c, 0x14, 0xf1, 0xcf, 0x12, 0x40, 0x62, 0x06,
	0xba, 0x2a, 0x00, 0x69, 0xf6, 0xbb, 0xdc, 0x5f, 0x22, 0x44, 0x66, 0xbf, 0x8b, 0x56, 0x22, 0x88,
	0xcc, 0xbe, 0xcf, 0x53, 0x31, 0x36, 0x7f, 0xb7, 0xef, 0x23, 0x05, 0x80, 0x93, 0x0f, 0x6d, 0xdb,
	0x62, 0xe5, 0xa4, 0xb6, 0x33, 0xa5, 0x71, 0x16, 0x6a, 0x0e, 0x52, 0xa3, 0x05, 0x2c, 0xc4, 0xca,
	0x0c, 0xe3, 0xd3, 0x15, 0x8e, 0x65, 0xb0, 0x00, 0xfd, 0x00, 0x16, 0x45, 0x45, 0x0f, 0x98, 0xed,
	0x95, 0xf1, 0xee, 0x4a, 0x9c, 0xb1, 0x33, 0xa5, 0xcd, 0x0b, 0x16, 0x31, 0x00, 0x7f, 0x00, 0xf3,
	0x89, 0xda, 0x5c, 0x5e, 0x95, 0xc9, 0x6b, 0x15, 0xc9, 0x8b, 0x7c, 0xb3, 0x33, 0xa5, 0xcd, 0xc6,
	0xd6, 0x31, 0x59, 0xdf, 0x87, 0xb9, 0x18, 0x21, 0x2e, 0x6a, 0x9a, 0x89, 0x2a, 0x6c, 0x58, 0xc2,
	0x28, 0xd8, 0x99, 0xd2, 0x1a, 0x11, 0x8e, 0x69, 0xa5, 0x28, 0x54, 0x5c, 0x52, 0x6d, 0xbc, 0x52,
	0x51, 0x40, 0xc4, 0x4a, 0x45, 0x13, 0xea, 0x74, 0x98, 0x70, 0xf8, 0x4b, 0x19, 0xe6, 0xb7, 0x0d,
	0x83, 0xd5, 0x82, 0xf3, 0x2f, 0xd3, 0x5b, 0xd0, 0xe0, 0xab, 0x8f, 0x68, 0x58, 0x79, 0xe1, 0x79,
	0x7a, 0x69, 0x18, 0x28, 0xaf, 0x88, 0xb2, 0x38, 0x15, 0x6b, 0x33, 0x6c, 0xc8, 0x42, 0xd0, 0x43,
	0xf7, 0x60, 0xc6, 0x20, 0x5e, 0xc7, 0x35, 0x1d, 0xdf, 0xb4, 0xfb, 0x61, 0xc3, 0x78, 0x71, 0x18,
	0x28, 0x88, 0xb3, 0x0a, 0x44, 0xac, 0x89, 0x4b, 0xc5, 0x93, 0xb7, 0x7c, 0xa6, 0x93, 0xf7, 0xf7,
	0x32, 0x2c, 0x45, 0xa0, 0xf0, 0x73, 0xf4, 0x65, 0xf4, 0x19, 0xcc, 0x6a, 0xe1, 0x18, 0x16, 0x25,
	0x25, 0xb4, 0x02, 0x49, 0x6c, 0x41, 0x5a, 0x12, 0x3b, 0x82, 0x4a, 0xf9, 0x92, 0x28, 0x6d, 0x9c,
	0xa4, 0x07, 0xf4, 0xc8, 0x7a, 0x03, 0xe0, 0x73, 0xcf, 0xee, 0x1f, 0xe8, 0x96, 0xa9, 0x7b, 0x0c,
	0xba, 0xba, 0x7a, 0x61, 0x18, 0x28, 0x8b, 0x5c, 0x52, 0x42, 0xc3, 0x5a, 0x9d, 0x0e, 0xb6, 0xd9,
	0xef, 0xaf, 0x65, 0xb8, 0xf4, 0xa1, 0x43, 0xc5, 0x8e, 0xe2, 0xb5, 0x09, 0x72, 0xdc, 0xe3, 0x0a,
	0x7d, 0x6a, 0x11, 0xfe, 0xb2, 0x69, 0x64, 0x20, 0x96, 0xcf, 0x0d, 0xe2, 0xd2, 0xb9, 0x41, 0x5c,
	0x3e, 0x37, 0x88, 0x2b, 0x13, 0x42, 0xfc, 0x1e, 0x5c, 0x7a, 0x97, 0x58, 0xe4, 0x7c, 0x10, 0xc6,
	0xff, 0x91, 0x60, 0x3e, 0xd3, 0x95, 0xd3, 0xfe, 0x3b, 0x12, 0xc3, 0xbc, 0x80, 0xa0, 0x2c, 0xf4,
	0x87, 0xec, 0x37, 0x6a, 0xe5, 0x24, 0x64, 0x3a, 0xf1, 0x2e, 0x65, 0x12, 0x2f, 0xbe, 0xaf, 0xbc,
	0x09, 0x95, 0x8e, 0x6f, 0xf6, 0x08, 0xb3, 0xb8, 0xa4, 0x2a, 0xff, 0x0a, 0x94, 0xcb, 0x5d, 0xfb,
	0x76, 0xc7, 0xee, 0xf5, 0xec, 0xfe, 0xba, 0x65, 0x1e, 0xba, 0xba, 0x7b, 0xb2, 0x4e, 0x57, 0xb4,
	0x1f, 0x98, 0x3d, 0xa2, 0xf1, 0xd5, 0x94, 0xad, 0xc7, 0xd8, 0xaa, 0x13, 0xb2, 0xb1, 0xd5, 0xb4,
	0x87, 0x35, 0xbd, 0x03, 0x83, 0x21, 0x66, 0xb0, 0x6a, 0x5b, 0xd1, 0xea, 0xa6, 0xc7, 0x21, 0x34,
	0xf0, 0xef, 0x64, 0x80, 0x04, 0xc8, 0x11, 0xd3, 0x4f, 0x6f, 0x90, 0xb3, 0x51, 0x25, 0x86, 0xca,
	0xca, 0x68, 0xa8, 0x88, 0xfe, 0x5f, 0x19, 0xf5, 0xbf, 0xe0, 0xe8, 0x04, 0xa7, 0xea, 0xd9, 0x70,
	0x9a, 0x7e, 0x01, 0x9c, 0x6a, 0x59, 0x9c, 0x76, 0x61, 0x5e, 0x8c, 0x37, 0xda, 0x5b, 0x7d, 0x2b,
	0xd5, 0x58, 0xe0, 0xb1, 0x9d, 0x25, 0x67, 0xe3, 0x9d, 0xc5, 0xbf, 0x65, 0x58, 0x1c, 0xb9, 0x90,
	0xfc, 0x4f, 0x21, 0x3f, 0x7a, 0xb1, 0xa9, 0xb2, 0x25, 0xe9, 0x8b, 0x0d, 0xba, 0x0a, 0xb3, 0xe4,
	0x89, 0x4f, 0xdc, 0xbe, 0x6e, 0x1d, 0xb8, 0x03, 0x8b, 0x23, 0x5e, 0xd7, 0x1a, 0xd1, 0x24, 0xb5,
	0x8f, 0xa6, 0x01, 0xa5, 0xd1, 0x34, 0xa8, 0xf1, 0x34, 0xa0, 0xc3, 0x5d, 0x03, 0x5d, 0x86, 0x3a,
	0x23, 0x30, 0x0d, 0xeb, 0xfc, 0xc5, 0x84, 0x4e, 0x30, 0x05, 0xaf, 0xc4, 0xed, 0x16, 0xdb, 0x6d,
	0x19, 0x78, 0x7e, 0xf1, 0xd6, 0x84, 0x4d, 0x25, 0xe1, 0x31, 0xf3, 0x3c, 0xe1, 0x81, 0x7f, 0x2d,
	0x03, 0xdc, 0x67, 0x57, 0xb8, 0xdc, 0x5c, 0x5f, 0x19, 0xbd, 0xf2, 0x8a, 0x57, 0xbe, 0xb4, 0x57,
	0x4a, 0x59, 0xaf, 0xc4, 0x3a, 0x95, 0xcf, 0x16, 0xb2, 0x95, 0xe7, 0x0a, 0xd9, 0x25, 0xa8, 0x78,
	0xbe, 0xee, 0xf3, 0x04, 0xa9, 0x68, 0x7c, 0x70, 0x4a, 0xc2, 0x8b, 0x65, 0xa9, 0x26, 0x96, 0x25,
	0xfc, 0x73, 0x09, 0x16, 0x39, 0x30, 0xe2, 0x63, 0xc2, 0x1b, 0x29, 0x3c, 0xa4, 0x6c, 0x8d, 0x16,
	0x9e, 0x00, 0x0a, 0xae, 0xfb, 0xf2, 0x99, 0x9a, 0x8e, 0x9f, 0x49, 0x91, 0x97, 0x58, 0xb7, 0xb7,
	0x05, 0x55, 0x2e, 0x3c, 0xbc, 0xc0, 0x14, 0x26, 0x5b, 0xe2, 0x59, 0x2d, 0xe4, 0x40, 0x6f, 0xc1,
	0xb4, 0xd9, 0xa3, 0xbf, 0xa2, 0x8b, 0x67, 0x21, 0xf3, 0x6e, 0x2f, 0x66, 0x8e, 0x58, 0x68, 0xde,
	0x8b, 0xa0, 0x3c, 0x47, 0xde, 0x0b, 0x6c, 0x3c, 0xef, 0x7f, 0x29, 0xc3, 0xc2, 0xb6, 0x61, 0xf0,
	0x79, 0xa1, 0x89, 0x1a, 0xc1, 0xf7, 0x6c, 0x4f, 0x2c, 0xe7, 0xd7, 0x2b, 0x5c, 0x8f, 0xe2, 0x8a,
	0x3f, 0x90, 0x2d, 0x0c, 0x03, 0xa5, 0xc1, 0x85, 0xb0, 0x69, 0x1c, 0x45, 0xda, 0x0b, 0xb7, 0x96,
	0x7f, 0x96, 0xe1, 0x15, 0xde, 0x2d, 0xa5, 0x41, 0x39, 0x5b, 0xa7, 0x74, 0x4e, 0x4f, 0x55, 0x3b,
	0xa3, 0x29, 0xfe, 0xa2, 0x38, 0x96, 0x27, 0xc6, 0xb1, 0x72, 0x26, 0x1c, 0xbf, 0x94, 0x00, 0x92,
	0xe0, 0x1d, 0xa9, 0x69, 0xd7, 0x60, 0x8e, 0x06, 0xe5, 0x41, 0x08, 0x42, 0x94, 0x94, 0x5a, 0x83,
	0xce, 0x86, 0x19, 0x63, 0xe4, 0x14, 0xfd, 0x52, 0x5e, 0xd1, 0xbf, 0x01, 0xf3, 0xc2, 0x32, 0xe1,
	0x78, 0x11, 0xb8, 0x69, 0x09, 0xa7, 0x85, 0x96, 0x86, 0x3b, 0xd7, 0x2b, 0xf2, 0xec, 0xfe, 0x88,
	0x2a, 0xdc, 0xcb, 0xb7, 0x87, 0x81, 0x72, 0x93, 0x5b, 0x9c, 0xa6, 0xe7, 0x1b, 0x9e, 0xd6, 0xfc,
	0xc1, 0x88, 0xe6, 0xdc, 0xff, 0x82, 0xd0, 0x34, 0x3d, 0x5f, 0x68, 0xc6, 0xd0, 0x8f, 0x47, 0x0d,
	0xe5, 0xc1, 0xd0, 0x1e, 0x06, 0xca, 0x6b, 0x23, 0x62, 0x8b, 0x3b, 0xde, 0x2c, 0x30, 0x5f, 0xc5,
	0x51, 0x9f, 0xc6, 0xe6, 0x0c, 0x51, 0xff, 0x4e, 0xbe, 0x67, 0xd5, 0x6f, 0x0c, 0x03, 0xe5, 0x42,
	0x2e, 0x9c, 0xa7, 0x42, 0x57, 0x7a, 0x39, 0xd0, 0x95, 0xcf, 0x05, 0x3a, 0x17, 0x96, 0xd3, 0x57,
	0xd1, 0x81, 0x45, 0x22, 0xf8, 0x3e, 0x82, 0x79, 0xde, 0xf2, 0xb0, 0xae, 0x22, 0xac, 0xd0, 0x99,
	0x4d, 0x33, 0x0b, 0x0a, 0x8c, 0x39, 0x8a, 0x44, 0xd3, 0xe2, 0x8d, 0x7f, 0x55, 0x86, 0xcb, 0x23,
	0x57, 0x3a, 0x61, 0xdf, 0xff, 0x93, 0x6b, 0xdd, 0x83, 0x9c, 0xc7, 0xec, 0x17, 0x8f, 0x84, 0xb7,
	0xb3, 0x2d, 0x22, 0xbf, 0xe5, 0x2d, 0x0f, 0x03, 0x65, 0x29, 0xaa, 0xcc, 0x02, 0x19, 0x67, 0x9a,
	0xc7, 0xfb, 0x62, 0x8f, 0xc8, 0x7a, 0x50, 0x75, 0x6d, 0x18, 0x28, 0xd7, 0x38, 0x6b, 0x4c, 0xca,
	0x57, 0x25, 0xe9, 0x26, 0xdf, 0xcf, 0x74, 0x93, 0xac, 0x4f, 0x55, 0x6f, 0x0d, 0x03, 0xe5, 0x06,
	0x97, 0x24, 0x52, 0xf3, 0x85, 0x89, 0xad, 0xe7, 0x9d, 0x3f, 0xce, 0x40, 0x59, 0xd5, 0x75, 0x0f,
	0x7d, 0x06, 0xf5, 0xf8, 0x43, 0x10, 0x5a, 0x1b, 0x7b, 0x03, 0x10, 0x9a, 0xaa, 0xe6, 0xf5, 0x09,
	0x56, 0xd2, 0x4e, 0xc3, 0x84, 0xd9, 0xd4, 0x37, 0x0f, 0xf4, 0xfa, 0x58, 0xc6, 0xcc, 0x87, 0xa0,
	0xe6, 0x6b, 0x13, 0xae, 0xa6, 0x5b, 0x91, 0xf0, 0x93, 0x16, 0x0b, 0x6f, 0xb6, 0xd7, 0x78, 0xee,
	0xd4, 0xb7, 0x8c, 0xe6, 0x8d, 0x09, 0x2e, 0x3f, 0x6c, 0x9b, 0x4e, 0xf8, 0xad, 0x80, 0xb3, 0x3f,
	0xd7, 0x1e, 0x6b, 0x13, 0xad, 0xa5, 0x9b, 0xfc, 0x10, 0x6a, 0x51, 0x95, 0x40, 0x85, 0x9a, 0x65,
	0xde, 0xf9, 0x9a, 0x17, 0xdb, 0xfc, 0x63, 0x6f, 0x3b, 0xfa, 0xd8, 0xdb, 0xbe, 0xdf, 0x73, 0xfc,
	0x13, 0xf4, 0x21, 0xcc, 0xa6, 0x4a, 0x4e, 0xb1, 0x0f, 0xf2, 0x1e, 0xc9, 0x0a, 0xc5, 0x7e, 0x0a,
	0x0b, 0xd9, 0xa2, 0x82, 0xd6, 0x8b, 0x24, 0x17, 0xbc, 0x28, 0x8d, 0x13, 0x9e, 0x7d, 0x22, 0x29,
	0x16, 0x5e, 0xf0, 0x98, 0x52, 0x28, 0xfc, 0x27, 0xa9, 0xce, 0xfc, 0xe6, 0x04, 0xed, 0xef, 0x69,
	0x41, 0x92, 0x6d, 0xb0, 0xf7, 0xa0, 0x1e, 0xf7, 0xc9, 0xc5, 0x59, 0x95, 0x6d, 0xa5, 0x0b, 0x15,
	0xde, 0x87, 0x86, 0xd8, 0x64, 0xa2, 0x5b, 0xe3, 0x61, 0x9e, 0x4c, 0x28, 0xd7, 0x91, 0x1f, 0xe0,
	0x63, 0x75, 0x4c, 0x9d, 0xf1, 0xa7, 0xeb, 0x18, 0x4a, 0x3c, 0x45, 0xc7, 0xc9, 0x84, 0x7e, 0x06,
	0x8b, 0x23, 0xa7, 0x25, 0xda, 0x98, 0x2c, 0x7c, 0x93, 0x03, 0xae, 0x50, 0x7c, 0x07, 0x96, 0xf2,
	0xce, 0x45, 0x74, 0x77, 0xe2, 0x30, 0x9e, 0x60, 0x93, 0x3d, 0xa8, 0xb0, 0xff, 0x74, 0x40, 0x85,
	0xef, 0xfa, 0xd1, 0x7f, 0x60, 0x34, 0xf1, 0x29, 0x2b, 0x1c, 0xeb, 0x44, 0xbd, 0xf0, 0x97, 0xa7,
	0xab, 0xd2, 0x5f, 0x9f, 0xae, 0x4a, 0x5f, 0x3f, 0x5d, 0x95, 0x7e, 0xf3, 0xf7, 0xd5, 0xa9, 0x4f,
	0x4a, 0xba, 0x63, 0x1e, 0x56, 0xd9, 0xae, 0x77, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x6a,
	0x2b, 0x26, 0x60, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BaasClient is the client API for Baas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BaasClient interface {
	ModelList(ctx context.Context, in *ModelListRequest, opts ...grpc.CallOption) (*ModelListReply, error)
	ModelItemList(ctx context.Context, in *ModelItemListRequest, opts ...grpc.CallOption) (*ModelItemListReply, error)
	ModelFieldList(ctx context.Context, in *ModelDetailRequest, opts ...grpc.CallOption) (*ModelFieldReply, error)
	ModelDetail(ctx context.Context, in *ModelDetailRequest, opts ...grpc.CallOption) (*ModelDetailReply, error)
	AddModel(ctx context.Context, in *AddModelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddModelField(ctx context.Context, in *AddModelFieldRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateModelField(ctx context.Context, in *UpdateModelFieldRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteModelField(ctx context.Context, in *DeleteModelFieldRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ExportList(ctx context.Context, in *ExportListRequest, opts ...grpc.CallOption) (*ExportListReply, error)
	AddExport(ctx context.Context, in *AddExportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateExport(ctx context.Context, in *UpdateExportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddImport(ctx context.Context, in *AddImportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateImport(ctx context.Context, in *UpdateImportRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddModelFieldRule(ctx context.Context, in *AddModelFieldRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateModelFieldRule(ctx context.Context, in *UpdateModelFieldRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AuthZ(ctx context.Context, in *AuthZReq, opts ...grpc.CallOption) (*AuthZReply, error)
}

type baasClient struct {
	cc *grpc.ClientConn
}

func NewBaasClient(cc *grpc.ClientConn) BaasClient {
	return &baasClient{cc}
}

func (c *baasClient) ModelList(ctx context.Context, in *ModelListRequest, opts ...grpc.CallOption) (*ModelListReply, error) {
	out := new(ModelListReply)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/ModelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) ModelItemList(ctx context.Context, in *ModelItemListRequest, opts ...grpc.CallOption) (*ModelItemListReply, error) {
	out := new(ModelItemListReply)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/ModelItemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) ModelFieldList(ctx context.Context, in *ModelDetailRequest, opts ...grpc.CallOption) (*ModelFieldReply, error) {
	out := new(ModelFieldReply)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/ModelFieldList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) ModelDetail(ctx context.Context, in *ModelDetailRequest, opts ...grpc.CallOption) (*ModelDetailReply, error) {
	out := new(ModelDetailReply)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/ModelDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) AddModel(ctx context.Context, in *AddModelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/AddModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) AddModelField(ctx context.Context, in *AddModelFieldRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/AddModelField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) UpdateModelField(ctx context.Context, in *UpdateModelFieldRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/UpdateModelField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) DeleteModelField(ctx context.Context, in *DeleteModelFieldRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/DeleteModelField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) ExportList(ctx context.Context, in *ExportListRequest, opts ...grpc.CallOption) (*ExportListReply, error) {
	out := new(ExportListReply)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/ExportList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) AddExport(ctx context.Context, in *AddExportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/AddExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) UpdateExport(ctx context.Context, in *UpdateExportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/UpdateExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) AddImport(ctx context.Context, in *AddImportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/AddImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) UpdateImport(ctx context.Context, in *UpdateImportRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/UpdateImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) AddModelFieldRule(ctx context.Context, in *AddModelFieldRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/AddModelFieldRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) UpdateModelFieldRule(ctx context.Context, in *UpdateModelFieldRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/UpdateModelFieldRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baasClient) AuthZ(ctx context.Context, in *AuthZReq, opts ...grpc.CallOption) (*AuthZReply, error) {
	out := new(AuthZReply)
	err := c.cc.Invoke(ctx, "/app.gw.gateway.baas.v1.Baas/AuthZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaasServer is the server API for Baas service.
type BaasServer interface {
	ModelList(context.Context, *ModelListRequest) (*ModelListReply, error)
	ModelItemList(context.Context, *ModelItemListRequest) (*ModelItemListReply, error)
	ModelFieldList(context.Context, *ModelDetailRequest) (*ModelFieldReply, error)
	ModelDetail(context.Context, *ModelDetailRequest) (*ModelDetailReply, error)
	AddModel(context.Context, *AddModelRequest) (*empty.Empty, error)
	AddModelField(context.Context, *AddModelFieldRequest) (*empty.Empty, error)
	UpdateModelField(context.Context, *UpdateModelFieldRequest) (*empty.Empty, error)
	DeleteModelField(context.Context, *DeleteModelFieldRequest) (*empty.Empty, error)
	ExportList(context.Context, *ExportListRequest) (*ExportListReply, error)
	AddExport(context.Context, *AddExportRequest) (*empty.Empty, error)
	UpdateExport(context.Context, *UpdateExportRequest) (*empty.Empty, error)
	AddImport(context.Context, *AddImportRequest) (*empty.Empty, error)
	UpdateImport(context.Context, *UpdateImportRequest) (*empty.Empty, error)
	AddModelFieldRule(context.Context, *AddModelFieldRuleRequest) (*empty.Empty, error)
	UpdateModelFieldRule(context.Context, *UpdateModelFieldRuleRequest) (*empty.Empty, error)
	AuthZ(context.Context, *AuthZReq) (*AuthZReply, error)
}

// UnimplementedBaasServer can be embedded to have forward compatible implementations.
type UnimplementedBaasServer struct {
}

func (*UnimplementedBaasServer) ModelList(ctx context.Context, req *ModelListRequest) (*ModelListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelList not implemented")
}
func (*UnimplementedBaasServer) ModelItemList(ctx context.Context, req *ModelItemListRequest) (*ModelItemListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelItemList not implemented")
}
func (*UnimplementedBaasServer) ModelFieldList(ctx context.Context, req *ModelDetailRequest) (*ModelFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelFieldList not implemented")
}
func (*UnimplementedBaasServer) ModelDetail(ctx context.Context, req *ModelDetailRequest) (*ModelDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelDetail not implemented")
}
func (*UnimplementedBaasServer) AddModel(ctx context.Context, req *AddModelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModel not implemented")
}
func (*UnimplementedBaasServer) AddModelField(ctx context.Context, req *AddModelFieldRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModelField not implemented")
}
func (*UnimplementedBaasServer) UpdateModelField(ctx context.Context, req *UpdateModelFieldRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelField not implemented")
}
func (*UnimplementedBaasServer) DeleteModelField(ctx context.Context, req *DeleteModelFieldRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelField not implemented")
}
func (*UnimplementedBaasServer) ExportList(ctx context.Context, req *ExportListRequest) (*ExportListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportList not implemented")
}
func (*UnimplementedBaasServer) AddExport(ctx context.Context, req *AddExportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExport not implemented")
}
func (*UnimplementedBaasServer) UpdateExport(ctx context.Context, req *UpdateExportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExport not implemented")
}
func (*UnimplementedBaasServer) AddImport(ctx context.Context, req *AddImportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImport not implemented")
}
func (*UnimplementedBaasServer) UpdateImport(ctx context.Context, req *UpdateImportRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImport not implemented")
}
func (*UnimplementedBaasServer) AddModelFieldRule(ctx context.Context, req *AddModelFieldRuleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModelFieldRule not implemented")
}
func (*UnimplementedBaasServer) UpdateModelFieldRule(ctx context.Context, req *UpdateModelFieldRuleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelFieldRule not implemented")
}
func (*UnimplementedBaasServer) AuthZ(ctx context.Context, req *AuthZReq) (*AuthZReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthZ not implemented")
}

func RegisterBaasServer(s *grpc.Server, srv BaasServer) {
	s.RegisterService(&_Baas_serviceDesc, srv)
}

func _Baas_ModelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).ModelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/ModelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).ModelList(ctx, req.(*ModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_ModelItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).ModelItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/ModelItemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).ModelItemList(ctx, req.(*ModelItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_ModelFieldList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).ModelFieldList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/ModelFieldList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).ModelFieldList(ctx, req.(*ModelDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_ModelDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).ModelDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/ModelDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).ModelDetail(ctx, req.(*ModelDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_AddModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).AddModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/AddModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).AddModel(ctx, req.(*AddModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_AddModelField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModelFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).AddModelField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/AddModelField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).AddModelField(ctx, req.(*AddModelFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_UpdateModelField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).UpdateModelField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/UpdateModelField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).UpdateModelField(ctx, req.(*UpdateModelFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_DeleteModelField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).DeleteModelField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/DeleteModelField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).DeleteModelField(ctx, req.(*DeleteModelFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_ExportList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).ExportList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/ExportList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).ExportList(ctx, req.(*ExportListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_AddExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).AddExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/AddExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).AddExport(ctx, req.(*AddExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_UpdateExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).UpdateExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/UpdateExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).UpdateExport(ctx, req.(*UpdateExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_AddImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).AddImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/AddImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).AddImport(ctx, req.(*AddImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_UpdateImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).UpdateImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/UpdateImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).UpdateImport(ctx, req.(*UpdateImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_AddModelFieldRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModelFieldRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).AddModelFieldRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/AddModelFieldRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).AddModelFieldRule(ctx, req.(*AddModelFieldRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_UpdateModelFieldRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelFieldRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).UpdateModelFieldRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/UpdateModelFieldRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).UpdateModelFieldRule(ctx, req.(*UpdateModelFieldRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Baas_AuthZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthZReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaasServer).AuthZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.gw.gateway.baas.v1.Baas/AuthZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaasServer).AuthZ(ctx, req.(*AuthZReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Baas_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.gw.gateway.baas.v1.Baas",
	HandlerType: (*BaasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModelList",
			Handler:    _Baas_ModelList_Handler,
		},
		{
			MethodName: "ModelItemList",
			Handler:    _Baas_ModelItemList_Handler,
		},
		{
			MethodName: "ModelFieldList",
			Handler:    _Baas_ModelFieldList_Handler,
		},
		{
			MethodName: "ModelDetail",
			Handler:    _Baas_ModelDetail_Handler,
		},
		{
			MethodName: "AddModel",
			Handler:    _Baas_AddModel_Handler,
		},
		{
			MethodName: "AddModelField",
			Handler:    _Baas_AddModelField_Handler,
		},
		{
			MethodName: "UpdateModelField",
			Handler:    _Baas_UpdateModelField_Handler,
		},
		{
			MethodName: "DeleteModelField",
			Handler:    _Baas_DeleteModelField_Handler,
		},
		{
			MethodName: "ExportList",
			Handler:    _Baas_ExportList_Handler,
		},
		{
			MethodName: "AddExport",
			Handler:    _Baas_AddExport_Handler,
		},
		{
			MethodName: "UpdateExport",
			Handler:    _Baas_UpdateExport_Handler,
		},
		{
			MethodName: "AddImport",
			Handler:    _Baas_AddImport_Handler,
		},
		{
			MethodName: "UpdateImport",
			Handler:    _Baas_UpdateImport_Handler,
		},
		{
			MethodName: "AddModelFieldRule",
			Handler:    _Baas_AddModelFieldRule_Handler,
		},
		{
			MethodName: "UpdateModelFieldRule",
			Handler:    _Baas_UpdateModelFieldRule_Handler,
		},
		{
			MethodName: "AuthZ",
			Handler:    _Baas_AuthZ_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *AuthZReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthZReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthZReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthZReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthZReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthZReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModelListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModelItemListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelItemListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelItemListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ExportApi) > 0 {
		i -= len(m.ExportApi)
		copy(dAtA[i:], m.ExportApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExportApi)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelItemListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelItemListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelItemListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DatasourceApi) > 0 {
		for iNdEx := len(m.DatasourceApi) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DatasourceApi[iNdEx])
			copy(dAtA[i:], m.DatasourceApi[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceApi[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ExportApi) > 0 {
		i -= len(m.ExportApi)
		copy(dAtA[i:], m.ExportApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExportApi)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModelDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelDetailReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelDetailReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelDetailReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Detail != nil {
		{
			size, err := m.Detail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Properties) > 0 {
		for k := range m.Properties {
			v := m.Properties[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StructedItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructedItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StructedItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Item) > 0 {
		for k := range m.Item {
			v := m.Item[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ItemReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size := m.Item.Size()
			i -= size
			if _, err := m.Item.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ItemReply_ValueStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemReply_ValueStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValueStruct != nil {
		{
			size, err := m.ValueStruct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ItemReply_ValueRaw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemReply_ValueRaw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValueRaw != nil {
		{
			size, err := m.ValueRaw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *StringList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IntList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		dAtA7 := make([]byte, len(m.List)*10)
		var j6 int
		for _, num1 := range m.List {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintApi(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.List[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintApi(dAtA, i, uint64(len(m.List)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldValue_ValueString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_ValueString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ValueString)
	copy(dAtA[i:], m.ValueString)
	i = encodeVarintApi(dAtA, i, uint64(len(m.ValueString)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *FieldValue_ValueInt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_ValueInt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintApi(dAtA, i, uint64(m.ValueInt))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *FieldValue_ValueBool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_ValueBool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.ValueBool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *FieldValue_ValueItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_ValueItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValueItem != nil {
		{
			size, err := m.ValueItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *FieldValue_ValueStringList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_ValueStringList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValueStringList != nil {
		{
			size, err := m.ValueStringList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *FieldValue_ValueBoolList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_ValueBoolList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValueBoolList != nil {
		{
			size, err := m.ValueBoolList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *FieldValue_ValueIntList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_ValueIntList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValueIntList != nil {
		{
			size, err := m.ValueIntList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *FieldValue_ValueItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_ValueItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ValueItemList != nil {
		{
			size, err := m.ValueItemList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AddModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddModelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddModelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModelFields) > 0 {
		i -= len(m.ModelFields)
		copy(dAtA[i:], m.ModelFields)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelFields)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddModelFieldRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddModelFieldRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddModelFieldRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JsonAlias) > 0 {
		i -= len(m.JsonAlias)
		copy(dAtA[i:], m.JsonAlias)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JsonAlias)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FieldType) > 0 {
		i -= len(m.FieldType)
		copy(dAtA[i:], m.FieldType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateModelFieldRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateModelFieldRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateModelFieldRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JsonAlias) > 0 {
		i -= len(m.JsonAlias)
		copy(dAtA[i:], m.JsonAlias)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JsonAlias)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldType) > 0 {
		i -= len(m.FieldType)
		copy(dAtA[i:], m.FieldType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteModelFieldRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteModelFieldRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteModelFieldRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapperModelItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapperModelItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapperModelItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsDeleted))
		i--
		dAtA[i] = 0x38
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x30
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModelField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsDeleted))
		i--
		dAtA[i] = 0x40
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.JsonAlias) > 0 {
		i -= len(m.JsonAlias)
		copy(dAtA[i:], m.JsonAlias)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JsonAlias)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldType) > 0 {
		i -= len(m.FieldType)
		copy(dAtA[i:], m.FieldType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModelFieldReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelFieldReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelFieldReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldRuleMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldRuleMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldRuleMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ValueSource) > 0 {
		i -= len(m.ValueSource)
		copy(dAtA[i:], m.ValueSource)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ValueSource)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RuleType) > 0 {
		i -= len(m.RuleType)
		copy(dAtA[i:], m.RuleType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RuleType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.RuleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RuleId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ExternalRule) > 0 {
		i -= len(m.ExternalRule)
		copy(dAtA[i:], m.ExternalRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExternalRule)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DatasourceApi) > 0 {
		i -= len(m.DatasourceApi)
		copy(dAtA[i:], m.DatasourceApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceApi)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.JsonAlias) > 0 {
		i -= len(m.JsonAlias)
		copy(dAtA[i:], m.JsonAlias)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JsonAlias)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FieldType) > 0 {
		i -= len(m.FieldType)
		copy(dAtA[i:], m.FieldType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExportItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x40
	}
	if m.IsDeleted != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsDeleted))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x28
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExportApi) > 0 {
		i -= len(m.ExportApi)
		copy(dAtA[i:], m.ExportApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExportApi)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExportListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExportApi) > 0 {
		i -= len(m.ExportApi)
		copy(dAtA[i:], m.ExportApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExportApi)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Imports) > 0 {
		for iNdEx := len(m.Imports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Imports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Export != nil {
		{
			size, err := m.Export.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddExportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddExportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddExportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExportApi) > 0 {
		i -= len(m.ExportApi)
		copy(dAtA[i:], m.ExportApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExportApi)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateExportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateExportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExportApi) > 0 {
		i -= len(m.ExportApi)
		copy(dAtA[i:], m.ExportApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExportApi)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImportItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DatasourceType) > 0 {
		i -= len(m.DatasourceType)
		copy(dAtA[i:], m.DatasourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DatasourceApi) > 0 {
		i -= len(m.DatasourceApi)
		copy(dAtA[i:], m.DatasourceApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceApi)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BaasExportId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BaasExportId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddImportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddImportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddImportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DatasourceType) > 0 {
		i -= len(m.DatasourceType)
		copy(dAtA[i:], m.DatasourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DatasourceApi) > 0 {
		i -= len(m.DatasourceApi)
		copy(dAtA[i:], m.DatasourceApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceApi)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaasExportId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BaasExportId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateImportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateImportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateImportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DatasourceType) > 0 {
		i -= len(m.DatasourceType)
		copy(dAtA[i:], m.DatasourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DatasourceApi) > 0 {
		i -= len(m.DatasourceApi)
		copy(dAtA[i:], m.DatasourceApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceApi)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BaasExportId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BaasExportId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddModelFieldRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddModelFieldRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddModelFieldRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FieldRuleList) > 0 {
		i -= len(m.FieldRuleList)
		copy(dAtA[i:], m.FieldRuleList)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldRuleList)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateModelFieldRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateModelFieldRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateModelFieldRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ValueSource) > 0 {
		i -= len(m.ValueSource)
		copy(dAtA[i:], m.ValueSource)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ValueSource)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RuleType) > 0 {
		i -= len(m.RuleType)
		copy(dAtA[i:], m.RuleType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RuleType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExternalRule) > 0 {
		i -= len(m.ExternalRule)
		copy(dAtA[i:], m.ExternalRule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExternalRule)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DatasourceApi) > 0 {
		i -= len(m.DatasourceApi)
		copy(dAtA[i:], m.DatasourceApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DatasourceApi)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModelName) > 0 {
		i -= len(m.ModelName)
		copy(dAtA[i:], m.ModelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModelName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthZReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthZReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelItemListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExportApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelItemListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExportApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.DatasourceApi) > 0 {
		for _, s := range m.DatasourceApi {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelDetailReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StructedItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for k, v := range m.Item {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		n += m.Item.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemReply_ValueStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueStruct != nil {
		l = m.ValueStruct.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ItemReply_ValueRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueRaw != nil {
		l = m.ValueRaw.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *StringList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IntList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		l = 0
		for _, e := range m.List {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		n += 1 + sovApi(uint64(len(m.List))) + len(m.List)*1
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldValue_ValueString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValueString)
	n += 1 + l + sovApi(uint64(l))
	return n
}
func (m *FieldValue_ValueInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovApi(uint64(m.ValueInt))
	return n
}
func (m *FieldValue_ValueBool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *FieldValue_ValueItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueItem != nil {
		l = m.ValueItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FieldValue_ValueStringList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueStringList != nil {
		l = m.ValueStringList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FieldValue_ValueBoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueBoolList != nil {
		l = m.ValueBoolList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FieldValue_ValueIntList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueIntList != nil {
		l = m.ValueIntList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FieldValue_ValueItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueItemList != nil {
		l = m.ValueItemList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *AddModelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ModelFields)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddModelFieldRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JsonAlias)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateModelFieldRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JsonAlias)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteModelFieldRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MapperModelItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.IsDeleted != 0 {
		n += 1 + sovApi(uint64(m.IsDeleted))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JsonAlias)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.IsDeleted != 0 {
		n += 1 + sovApi(uint64(m.IsDeleted))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelFieldReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldRuleMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JsonAlias)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DatasourceApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExternalRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RuleId != 0 {
		n += 1 + sovApi(uint64(m.RuleId))
	}
	l = len(m.RuleType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ValueSource)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ExportApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.IsDeleted != 0 {
		n += 1 + sovApi(uint64(m.IsDeleted))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExportApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Export != nil {
		l = m.Export.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Imports) > 0 {
		for _, e := range m.Imports {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddExportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExportApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateExportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ExportApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImportItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.BaasExportId != 0 {
		n += 1 + sovApi(uint64(m.BaasExportId))
	}
	l = len(m.DatasourceApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DatasourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddImportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaasExportId != 0 {
		n += 1 + sovApi(uint64(m.BaasExportId))
	}
	l = len(m.DatasourceApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DatasourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateImportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.BaasExportId != 0 {
		n += 1 + sovApi(uint64(m.BaasExportId))
	}
	l = len(m.DatasourceApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DatasourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddModelFieldRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldRuleList)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateModelFieldRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ModelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DatasourceApi)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExternalRule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RuleType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ValueSource)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthZReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthZReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthZReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthZReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthZReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthZReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, &Project{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MapperModelItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelItemListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelItemListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelItemListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelItemListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelItemListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelItemListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FieldRuleMetadata{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceApi = append(m.DatasourceApi, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelDetailReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelDetailReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelDetailReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &ModelSchema{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]*ModelSchema)
			}
			var mapkey string
			var mapvalue *ModelSchema
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ModelSchema{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructedItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructedItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructedItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = make(map[string]*FieldValue)
			}
			var mapkey string
			var mapvalue *FieldValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FieldValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Item[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueStruct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StructedItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ItemReply_ValueStruct{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ItemReply_ValueRaw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ItemReply{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &FieldValue_ValueString{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueInt", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_ValueInt{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueBool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &FieldValue_ValueBool{b}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ItemReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueItem{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueStringList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueStringList{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueBoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BoolList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueBoolList{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueIntList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IntList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueIntList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ItemList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueItemList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelFields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddModelFieldRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddModelFieldRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddModelFieldRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateModelFieldRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateModelFieldRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateModelFieldRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteModelFieldRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteModelFieldRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteModelFieldRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapperModelItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapperModelItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapperModelItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			m.IsDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDeleted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			m.IsDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDeleted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelFieldReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelFieldReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelFieldReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ModelField{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldRuleMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldRuleMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldRuleMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			m.IsDeleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDeleted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Export", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Export == nil {
				m.Export = &ExportItem{}
			}
			if err := m.Export.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imports = append(m.Imports, &ImportItem{})
			if err := m.Imports[len(m.Imports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ExportList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddExportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddExportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddExportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaasExportId", wireType)
			}
			m.BaasExportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaasExportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddImportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddImportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddImportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaasExportId", wireType)
			}
			m.BaasExportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaasExportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateImportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateImportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateImportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaasExportId", wireType)
			}
			m.BaasExportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaasExportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddModelFieldRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddModelFieldRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddModelFieldRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldRuleList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldRuleList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateModelFieldRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateModelFieldRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateModelFieldRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasourceApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasourceApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
