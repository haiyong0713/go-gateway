// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: frontpage.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	go_common_library_time "go-common/library/time"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FrontPage struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Pos                  int32                       `protobuf:"varint,3,opt,name=pos,proto3" json:"pos"`
	Logo                 string                      `protobuf:"bytes,4,opt,name=logo,json=log,proto3" json:"log"`
	Litpic               string                      `protobuf:"bytes,5,opt,name=litpic,proto3" json:"litpic"`
	JumpUrl              string                      `protobuf:"bytes,6,opt,name=jump_url,proto3" json:"jump_url"`
	State                int32                       `protobuf:"varint,7,opt,name=state,proto3" json:"state"`
	Stime                go_common_library_time.Time `protobuf:"varint,8,opt,name=stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time `protobuf:"varint,9,opt,name=etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	IsSplitLayer         int32                       `protobuf:"varint,10,opt,name=is_split_layer,proto3" json:"is_split_layer"`
	SplitLayer           string                      `protobuf:"bytes,11,opt,name=split_layer,proto3" json:"split_layer"`
	Style                int32                       `protobuf:"varint,12,opt,name=style,proto3" json:"style"`
	ResourceId           int64                       `protobuf:"varint,13,opt,name=resource_id,proto3" json:"resource_id"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FrontPage) Reset()         { *m = FrontPage{} }
func (m *FrontPage) String() string { return proto.CompactTextString(m) }
func (*FrontPage) ProtoMessage()    {}
func (*FrontPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538a3db1a618972, []int{0}
}
func (m *FrontPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrontPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrontPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrontPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontPage.Merge(m, src)
}
func (m *FrontPage) XXX_Size() int {
	return m.Size()
}
func (m *FrontPage) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontPage.DiscardUnknown(m)
}

var xxx_messageInfo_FrontPage proto.InternalMessageInfo

func (m *FrontPage) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FrontPage) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FrontPage) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *FrontPage) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *FrontPage) GetLitpic() string {
	if m != nil {
		return m.Litpic
	}
	return ""
}

func (m *FrontPage) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *FrontPage) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *FrontPage) GetStime() go_common_library_time.Time {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *FrontPage) GetEtime() go_common_library_time.Time {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *FrontPage) GetIsSplitLayer() int32 {
	if m != nil {
		return m.IsSplitLayer
	}
	return 0
}

func (m *FrontPage) GetSplitLayer() string {
	if m != nil {
		return m.SplitLayer
	}
	return ""
}

func (m *FrontPage) GetStyle() int32 {
	if m != nil {
		return m.Style
	}
	return 0
}

func (m *FrontPage) GetResourceId() int64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

type FrontPageReq struct {
	ResourceId           int64    `protobuf:"varint,1,opt,name=resource_id,proto3" json:"resource_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontPageReq) Reset()         { *m = FrontPageReq{} }
func (m *FrontPageReq) String() string { return proto.CompactTextString(m) }
func (*FrontPageReq) ProtoMessage()    {}
func (*FrontPageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538a3db1a618972, []int{1}
}
func (m *FrontPageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrontPageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrontPageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrontPageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontPageReq.Merge(m, src)
}
func (m *FrontPageReq) XXX_Size() int {
	return m.Size()
}
func (m *FrontPageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontPageReq.DiscardUnknown(m)
}

var xxx_messageInfo_FrontPageReq proto.InternalMessageInfo

func (m *FrontPageReq) GetResourceId() int64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

type FrontPageResp struct {
	Default              *FrontPage   `protobuf:"bytes,1,opt,name=default,proto3" json:"default"`
	Online               []*FrontPage `protobuf:"bytes,2,rep,name=online,proto3" json:"online"`
	Hidden               []*FrontPage `protobuf:"bytes,3,rep,name=hidden,proto3" json:"hidden"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FrontPageResp) Reset()         { *m = FrontPageResp{} }
func (m *FrontPageResp) String() string { return proto.CompactTextString(m) }
func (*FrontPageResp) ProtoMessage()    {}
func (*FrontPageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538a3db1a618972, []int{2}
}
func (m *FrontPageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrontPageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrontPageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrontPageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontPageResp.Merge(m, src)
}
func (m *FrontPageResp) XXX_Size() int {
	return m.Size()
}
func (m *FrontPageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontPageResp.DiscardUnknown(m)
}

var xxx_messageInfo_FrontPageResp proto.InternalMessageInfo

func (m *FrontPageResp) GetDefault() *FrontPage {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *FrontPageResp) GetOnline() []*FrontPage {
	if m != nil {
		return m.Online
	}
	return nil
}

func (m *FrontPageResp) GetHidden() []*FrontPage {
	if m != nil {
		return m.Hidden
	}
	return nil
}

func init() {
	proto.RegisterType((*FrontPage)(nil), "resource.service.v1.FrontPage")
	proto.RegisterType((*FrontPageReq)(nil), "resource.service.v1.FrontPageReq")
	proto.RegisterType((*FrontPageResp)(nil), "resource.service.v1.FrontPageResp")
}

func init() { proto.RegisterFile("frontpage.proto", fileDescriptor_8538a3db1a618972) }

var fileDescriptor_8538a3db1a618972 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x55, 0x92, 0x6d, 0xba, 0x75, 0xbb, 0x2c, 0x32, 0x12, 0x32, 0x8b, 0x54, 0x57, 0x3d, 0xe5,
	0xb2, 0xa9, 0x0a, 0x37, 0x0e, 0x48, 0x44, 0x82, 0x33, 0xb2, 0x38, 0x71, 0xa9, 0xd2, 0xc4, 0xcd,
	0x1a, 0x39, 0x71, 0x48, 0x9c, 0x4a, 0xf9, 0x28, 0xfe, 0x83, 0x23, 0x5f, 0x60, 0xa1, 0x1e, 0xf3,
	0x09, 0x9c, 0x90, 0x27, 0x6d, 0x89, 0x2a, 0x0e, 0xbd, 0x64, 0xfc, 0xde, 0xcc, 0x7b, 0x9a, 0x19,
	0x4d, 0xd0, 0xfd, 0xae, 0x52, 0x85, 0x2e, 0xe3, 0x8c, 0x87, 0x65, 0xa5, 0xb4, 0xc2, 0x2f, 0x2a,
	0x5e, 0xab, 0xa6, 0x4a, 0x78, 0x58, 0xf3, 0x6a, 0x2f, 0x12, 0x1e, 0xee, 0xd7, 0x0f, 0x8f, 0x99,
	0xd0, 0x4f, 0xcd, 0x36, 0x4c, 0x54, 0xbe, 0xca, 0x54, 0xa6, 0x56, 0x50, 0xbb, 0x6d, 0x76, 0x80,
	0x00, 0xc0, 0xab, 0xf7, 0x58, 0xfe, 0xb8, 0x41, 0x93, 0x4f, 0xd6, 0xf7, 0x73, 0x9c, 0x71, 0xfc,
	0x12, 0xb9, 0x22, 0x25, 0xce, 0xc2, 0x09, 0xbc, 0xc8, 0xef, 0x0c, 0x75, 0x45, 0xca, 0x5c, 0x91,
	0x62, 0x8a, 0x46, 0x5a, 0x68, 0xc9, 0x89, 0xbb, 0x70, 0x82, 0x49, 0x34, 0xe9, 0x0c, 0xed, 0x09,
	0xd6, 0x07, 0xfc, 0x0a, 0x79, 0xa5, 0xaa, 0x89, 0xb7, 0x70, 0x82, 0x51, 0x34, 0xee, 0x0c, 0xb5,
	0x90, 0xd9, 0x0f, 0x7e, 0x40, 0x37, 0x52, 0x65, 0x8a, 0xdc, 0x80, 0x14, 0x72, 0x52, 0x65, 0xcc,
	0x7e, 0xf0, 0x12, 0xf9, 0x52, 0xe8, 0x52, 0x24, 0x64, 0x04, 0x59, 0xd4, 0x19, 0x7a, 0x64, 0xd8,
	0x31, 0xe2, 0x00, 0xdd, 0x7e, 0x6b, 0xf2, 0x72, 0xd3, 0x54, 0x92, 0xf8, 0x50, 0x35, 0xeb, 0x0c,
	0x3d, 0x73, 0xec, 0xfc, 0xb2, 0x5d, 0xd6, 0x3a, 0xd6, 0x9c, 0x8c, 0xa1, 0x0d, 0xe8, 0x12, 0x08,
	0xd6, 0x07, 0xfc, 0xde, 0x16, 0x88, 0x9c, 0x93, 0x5b, 0x98, 0x30, 0xe8, 0x0b, 0x44, 0xce, 0xff,
	0x18, 0xfa, 0x3a, 0x53, 0x8f, 0x89, 0xca, 0x73, 0x55, 0xac, 0xa4, 0xd8, 0x56, 0x71, 0xd5, 0xae,
	0x6c, 0x26, 0xfc, 0x22, 0x72, 0xd0, 0x8b, 0x1c, 0xf4, 0x1c, 0xf4, 0x93, 0x7f, 0x7a, 0x7e, 0x95,
	0x1e, 0xaa, 0xf0, 0x3b, 0xf4, 0x4c, 0xd4, 0x9b, 0xba, 0x94, 0x42, 0x6f, 0x64, 0xdc, 0xf2, 0x8a,
	0x20, 0xe8, 0x14, 0x77, 0x86, 0x5e, 0x64, 0xd8, 0x05, 0xc6, 0x6b, 0x34, 0x1d, 0x0a, 0xa7, 0xb0,
	0x89, 0xfb, 0xce, 0xd0, 0x21, 0xcd, 0x86, 0xa0, 0xdf, 0x47, 0x2b, 0x39, 0x99, 0x0d, 0xf7, 0xd1,
	0x4a, 0x98, 0xa7, 0x95, 0xdc, 0x7a, 0x9e, 0x4e, 0x68, 0x23, 0x52, 0x72, 0x07, 0x53, 0x81, 0xe7,
	0x80, 0x66, 0x43, 0xb0, 0xfc, 0x80, 0x66, 0xe7, 0x73, 0x61, 0xfc, 0xfb, 0xa5, 0x85, 0x73, 0x85,
	0x85, 0x71, 0xd0, 0xdd, 0xc0, 0xa3, 0x2e, 0xf1, 0x47, 0x34, 0x4e, 0xf9, 0x2e, 0x6e, 0xa4, 0x06,
	0x83, 0xe9, 0x9b, 0x79, 0xf8, 0x9f, 0xd3, 0x0e, 0xcf, 0xa2, 0x68, 0xda, 0x19, 0x7a, 0x92, 0xb0,
	0xd3, 0x03, 0x47, 0xc8, 0x57, 0x85, 0x14, 0x85, 0x3d, 0x53, 0xef, 0x0a, 0x17, 0xb8, 0xb6, 0x5e,
	0xc1, 0x8e, 0xd1, 0x7a, 0x3c, 0x89, 0x34, 0xe5, 0x05, 0xf1, 0xae, 0xf7, 0xe8, 0x15, 0xec, 0x18,
	0xa3, 0xe7, 0x3f, 0x0f, 0x73, 0xe7, 0xd7, 0x61, 0xee, 0xfc, 0x3e, 0xcc, 0x9d, 0xaf, 0xee, 0x7e,
	0xbd, 0xf5, 0xe1, 0x67, 0x7b, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0x04, 0xab, 0x4e, 0x81, 0xc3,
	0x03, 0x00, 0x00,
}

func (m *FrontPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrontPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrontPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResourceId != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x68
	}
	if m.Style != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x60
	}
	if len(m.SplitLayer) > 0 {
		i -= len(m.SplitLayer)
		copy(dAtA[i:], m.SplitLayer)
		i = encodeVarintFrontpage(dAtA, i, uint64(len(m.SplitLayer)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsSplitLayer != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.IsSplitLayer))
		i--
		dAtA[i] = 0x50
	}
	if m.Etime != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x48
	}
	if m.Stime != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x40
	}
	if m.State != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintFrontpage(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Litpic) > 0 {
		i -= len(m.Litpic)
		copy(dAtA[i:], m.Litpic)
		i = encodeVarintFrontpage(dAtA, i, uint64(len(m.Litpic)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintFrontpage(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if m.Pos != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.Pos))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFrontpage(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrontPageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrontPageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrontPageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResourceId != 0 {
		i = encodeVarintFrontpage(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrontPageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrontPageResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrontPageResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hidden) > 0 {
		for iNdEx := len(m.Hidden) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hidden[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFrontpage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Online) > 0 {
		for iNdEx := len(m.Online) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Online[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFrontpage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Default != nil {
		{
			size, err := m.Default.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFrontpage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFrontpage(dAtA []byte, offset int, v uint64) int {
	offset -= sovFrontpage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FrontPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFrontpage(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFrontpage(uint64(l))
	}
	if m.Pos != 0 {
		n += 1 + sovFrontpage(uint64(m.Pos))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovFrontpage(uint64(l))
	}
	l = len(m.Litpic)
	if l > 0 {
		n += 1 + l + sovFrontpage(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovFrontpage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovFrontpage(uint64(m.State))
	}
	if m.Stime != 0 {
		n += 1 + sovFrontpage(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovFrontpage(uint64(m.Etime))
	}
	if m.IsSplitLayer != 0 {
		n += 1 + sovFrontpage(uint64(m.IsSplitLayer))
	}
	l = len(m.SplitLayer)
	if l > 0 {
		n += 1 + l + sovFrontpage(uint64(l))
	}
	if m.Style != 0 {
		n += 1 + sovFrontpage(uint64(m.Style))
	}
	if m.ResourceId != 0 {
		n += 1 + sovFrontpage(uint64(m.ResourceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FrontPageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != 0 {
		n += 1 + sovFrontpage(uint64(m.ResourceId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FrontPageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovFrontpage(uint64(l))
	}
	if len(m.Online) > 0 {
		for _, e := range m.Online {
			l = e.Size()
			n += 1 + l + sovFrontpage(uint64(l))
		}
	}
	if len(m.Hidden) > 0 {
		for _, e := range m.Hidden {
			l = e.Size()
			n += 1 + l + sovFrontpage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFrontpage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFrontpage(x uint64) (n int) {
	return sovFrontpage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FrontPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontpage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrontPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrontPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontpage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontpage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontpage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontpage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Litpic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontpage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontpage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Litpic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontpage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontpage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSplitLayer", wireType)
			}
			m.IsSplitLayer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSplitLayer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitLayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontpage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontpage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitLayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrontpage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrontpage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFrontpage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrontPageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontpage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrontPageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrontPageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrontpage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrontpage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFrontpage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrontPageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontpage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrontPageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrontPageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrontpage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrontpage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Default == nil {
				m.Default = &FrontPage{}
			}
			if err := m.Default.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrontpage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrontpage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Online = append(m.Online, &FrontPage{})
			if err := m.Online[len(m.Online)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrontpage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrontpage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hidden = append(m.Hidden, &FrontPage{})
			if err := m.Hidden[len(m.Hidden)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontpage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrontpage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFrontpage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrontpage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrontpage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrontpage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFrontpage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFrontpage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFrontpage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFrontpage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrontpage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFrontpage = fmt.Errorf("proto: unexpected end of group")
)
