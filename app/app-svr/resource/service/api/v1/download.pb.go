// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: download.proto

// use {app_id}.{version} as package name

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DownLoadCard struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Icon                 string   `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Cover                string   `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	UrlType              int32    `protobuf:"varint,6,opt,name=url_type,json=urlType,proto3" json:"url_type,omitempty"`
	UrlValue             string   `protobuf:"bytes,7,opt,name=url_value,json=urlValue,proto3" json:"url_value,omitempty"`
	BtnTxt               int32    `protobuf:"varint,8,opt,name=btn_txt,json=btnTxt,proto3" json:"btn_txt,omitempty"`
	ReType               int32    `protobuf:"varint,9,opt,name=re_type,json=reType,proto3" json:"re_type,omitempty"`
	ReValue              string   `protobuf:"bytes,10,opt,name=re_value,json=reValue,proto3" json:"re_value,omitempty"`
	Number               int32    `protobuf:"varint,11,opt,name=number,proto3" json:"number,omitempty"`
	DoubleCover          string   `protobuf:"bytes,12,opt,name=double_cover,json=doubleCover,proto3" json:"double_cover,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownLoadCard) Reset()         { *m = DownLoadCard{} }
func (m *DownLoadCard) String() string { return proto.CompactTextString(m) }
func (*DownLoadCard) ProtoMessage()    {}
func (*DownLoadCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ce52b48c9eea83, []int{0}
}
func (m *DownLoadCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownLoadCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownLoadCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownLoadCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownLoadCard.Merge(m, src)
}
func (m *DownLoadCard) XXX_Size() int {
	return m.Size()
}
func (m *DownLoadCard) XXX_DiscardUnknown() {
	xxx_messageInfo_DownLoadCard.DiscardUnknown(m)
}

var xxx_messageInfo_DownLoadCard proto.InternalMessageInfo

func (m *DownLoadCard) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DownLoadCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DownLoadCard) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *DownLoadCard) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *DownLoadCard) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *DownLoadCard) GetUrlType() int32 {
	if m != nil {
		return m.UrlType
	}
	return 0
}

func (m *DownLoadCard) GetUrlValue() string {
	if m != nil {
		return m.UrlValue
	}
	return ""
}

func (m *DownLoadCard) GetBtnTxt() int32 {
	if m != nil {
		return m.BtnTxt
	}
	return 0
}

func (m *DownLoadCard) GetReType() int32 {
	if m != nil {
		return m.ReType
	}
	return 0
}

func (m *DownLoadCard) GetReValue() string {
	if m != nil {
		return m.ReValue
	}
	return ""
}

func (m *DownLoadCard) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *DownLoadCard) GetDoubleCover() string {
	if m != nil {
		return m.DoubleCover
	}
	return ""
}

type DownLoadCardReply struct {
	List                 []*DownLoadCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DownLoadCardReply) Reset()         { *m = DownLoadCardReply{} }
func (m *DownLoadCardReply) String() string { return proto.CompactTextString(m) }
func (*DownLoadCardReply) ProtoMessage()    {}
func (*DownLoadCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ce52b48c9eea83, []int{1}
}
func (m *DownLoadCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownLoadCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownLoadCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownLoadCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownLoadCardReply.Merge(m, src)
}
func (m *DownLoadCardReply) XXX_Size() int {
	return m.Size()
}
func (m *DownLoadCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DownLoadCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_DownLoadCardReply proto.InternalMessageInfo

func (m *DownLoadCardReply) GetList() []*DownLoadCard {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*DownLoadCard)(nil), "resource.service.v1.DownLoadCard")
	proto.RegisterType((*DownLoadCardReply)(nil), "resource.service.v1.DownLoadCardReply")
}

func init() { proto.RegisterFile("download.proto", fileDescriptor_f7ce52b48c9eea83) }

var fileDescriptor_f7ce52b48c9eea83 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x6a, 0xeb, 0x30,
	0x10, 0x86, 0x91, 0x93, 0xd8, 0xc9, 0x24, 0x84, 0xf7, 0xf4, 0x1e, 0xad, 0x42, 0x21, 0x38, 0x59,
	0x79, 0x65, 0x48, 0x4b, 0x2f, 0xd0, 0x74, 0x55, 0xba, 0x32, 0xa1, 0x8b, 0x6e, 0x82, 0x6d, 0xcd,
	0xc2, 0xa0, 0x5a, 0x66, 0x2c, 0x3b, 0xc9, 0xb5, 0x7a, 0x8a, 0x2e, 0x7b, 0x84, 0x92, 0x93, 0x14,
	0x49, 0x5d, 0xb4, 0xd0, 0xdd, 0xfc, 0xff, 0x3f, 0xdf, 0x8f, 0x18, 0xc1, 0x5c, 0xea, 0x43, 0xad,
	0x74, 0x2e, 0xd3, 0x86, 0xb4, 0xd1, 0xfc, 0x1f, 0x61, 0xab, 0x3b, 0x2a, 0x31, 0x6d, 0x91, 0xfa,
	0xaa, 0xc4, 0xb4, 0xdf, 0xac, 0x5f, 0x03, 0x98, 0xdd, 0xeb, 0x43, 0xfd, 0xa8, 0x73, 0xb9, 0xcd,
	0x49, 0xf2, 0x39, 0x04, 0x95, 0x14, 0x2c, 0x66, 0xc9, 0x20, 0x0b, 0x2a, 0xc9, 0xff, 0xc3, 0xc8,
	0x54, 0x46, 0xa1, 0x08, 0x62, 0x96, 0x4c, 0x32, 0x2f, 0x38, 0x87, 0xa1, 0xc4, 0xb6, 0x14, 0x03,
	0x67, 0xba, 0xd9, 0x7a, 0x55, 0xa9, 0x6b, 0x31, 0xf4, 0x9e, 0x9d, 0x2d, 0x5d, 0xea, 0x1e, 0x49,
	0x8c, 0x3c, 0xed, 0x04, 0x5f, 0xc0, 0xb8, 0x23, 0xb5, 0x37, 0xa7, 0x06, 0x45, 0x18, 0xb3, 0x64,
	0x94, 0x45, 0x1d, 0xa9, 0xdd, 0xa9, 0x41, 0x7e, 0x05, 0x13, 0x1b, 0xf5, 0xb9, 0xea, 0x50, 0x44,
	0x0e, 0xb2, 0xbb, 0x4f, 0x56, 0xf3, 0x4b, 0x88, 0x0a, 0x53, 0xef, 0xcd, 0xd1, 0x88, 0xb1, 0xc3,
	0xc2, 0xc2, 0xd4, 0xbb, 0xa3, 0xb1, 0x01, 0xa1, 0xef, 0x9b, 0xf8, 0x80, 0xd0, 0xd5, 0x2d, 0x60,
	0x4c, 0xf8, 0xd5, 0x06, 0xae, 0x2d, 0x22, 0xf4, 0x65, 0x17, 0x10, 0xd6, 0xdd, 0x4b, 0x81, 0x24,
	0xa6, 0x1e, 0xf1, 0x8a, 0xaf, 0x60, 0x26, 0x75, 0x57, 0x28, 0xdc, 0xfb, 0x97, 0xcf, 0x1c, 0x36,
	0xf5, 0xde, 0xd6, 0x5a, 0xeb, 0x07, 0xf8, 0xfb, 0xfd, 0x66, 0x19, 0x36, 0xea, 0xc4, 0x6f, 0x61,
	0xa8, 0xaa, 0xd6, 0x08, 0x16, 0x0f, 0x92, 0xe9, 0xf5, 0x2a, 0xfd, 0xe5, 0xda, 0xe9, 0x0f, 0xca,
	0xad, 0xdf, 0xfd, 0x79, 0x3b, 0x2f, 0xd9, 0xfb, 0x79, 0xc9, 0x3e, 0xce, 0x4b, 0xf6, 0x1c, 0xf4,
	0x9b, 0x22, 0x74, 0xdf, 0x75, 0xf3, 0x19, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xeb, 0xf3, 0xae, 0xc0,
	0x01, 0x00, 0x00,
}

func (m *DownLoadCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownLoadCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownLoadCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DoubleCover) > 0 {
		i -= len(m.DoubleCover)
		copy(dAtA[i:], m.DoubleCover)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.DoubleCover)))
		i--
		dAtA[i] = 0x62
	}
	if m.Number != 0 {
		i = encodeVarintDownload(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ReValue) > 0 {
		i -= len(m.ReValue)
		copy(dAtA[i:], m.ReValue)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.ReValue)))
		i--
		dAtA[i] = 0x52
	}
	if m.ReType != 0 {
		i = encodeVarintDownload(dAtA, i, uint64(m.ReType))
		i--
		dAtA[i] = 0x48
	}
	if m.BtnTxt != 0 {
		i = encodeVarintDownload(dAtA, i, uint64(m.BtnTxt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.UrlValue) > 0 {
		i -= len(m.UrlValue)
		copy(dAtA[i:], m.UrlValue)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.UrlValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UrlType != 0 {
		i = encodeVarintDownload(dAtA, i, uint64(m.UrlType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDownload(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDownload(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownLoadCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownLoadCardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownLoadCardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDownload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDownload(dAtA []byte, offset int, v uint64) int {
	offset -= sovDownload(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DownLoadCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDownload(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	if m.UrlType != 0 {
		n += 1 + sovDownload(uint64(m.UrlType))
	}
	l = len(m.UrlValue)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	if m.BtnTxt != 0 {
		n += 1 + sovDownload(uint64(m.BtnTxt))
	}
	if m.ReType != 0 {
		n += 1 + sovDownload(uint64(m.ReType))
	}
	l = len(m.ReValue)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovDownload(uint64(m.Number))
	}
	l = len(m.DoubleCover)
	if l > 0 {
		n += 1 + l + sovDownload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownLoadCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDownload(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDownload(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDownload(x uint64) (n int) {
	return sovDownload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DownLoadCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownLoadCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownLoadCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlType", wireType)
			}
			m.UrlType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UrlType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtnTxt", wireType)
			}
			m.BtnTxt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtnTxt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReType", wireType)
			}
			m.ReType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoubleCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownLoadCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownLoadCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownLoadCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DownLoadCard{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDownload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDownload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDownload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDownload
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDownload
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDownload
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDownload        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDownload          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDownload = fmt.Errorf("proto: unexpected end of group")
)
