// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-gw/management/api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Project struct {
	ProjectName          string   `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{0}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Project) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type AuthZReq struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Cookie               string   `protobuf:"bytes,2,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Node                 string   `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthZReq) Reset()         { *m = AuthZReq{} }
func (m *AuthZReq) String() string { return proto.CompactTextString(m) }
func (*AuthZReq) ProtoMessage()    {}
func (*AuthZReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{1}
}
func (m *AuthZReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthZReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthZReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthZReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthZReq.Merge(m, src)
}
func (m *AuthZReq) XXX_Size() int {
	return m.Size()
}
func (m *AuthZReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthZReq.DiscardUnknown(m)
}

var xxx_messageInfo_AuthZReq proto.InternalMessageInfo

func (m *AuthZReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthZReq) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *AuthZReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type Gateway struct {
	ProjectName          string        `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name"`
	AppName              string        `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name"`
	Node                 string        `protobuf:"bytes,3,opt,name=node,proto3" json:"node"`
	TreeId               int64         `protobuf:"varint,4,opt,name=tree_id,json=treeId,proto3" json:"tree_id"`
	Configs              []*ConfigMeta `protobuf:"bytes,5,rep,name=configs,proto3" json:"configs"`
	UpdatedAt            int64         `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DiscoveryAppid       string        `protobuf:"bytes,7,opt,name=discovery_appid,json=discoveryAppid,proto3" json:"discovery_appid"`
	DiscoveryColor       string        `protobuf:"bytes,8,opt,name=discovery_color,json=discoveryColor,proto3" json:"discovery_color"`
	GrpcConfigs          []*ConfigMeta `protobuf:"bytes,9,rep,name=grpc_configs,json=grpcConfigs,proto3" json:"grpc_configs"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Gateway) Reset()         { *m = Gateway{} }
func (m *Gateway) String() string { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()    {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{2}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(m, src)
}
func (m *Gateway) XXX_Size() int {
	return m.Size()
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

func (m *Gateway) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Gateway) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *Gateway) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Gateway) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *Gateway) GetConfigs() []*ConfigMeta {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *Gateway) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Gateway) GetDiscoveryAppid() string {
	if m != nil {
		return m.DiscoveryAppid
	}
	return ""
}

func (m *Gateway) GetDiscoveryColor() string {
	if m != nil {
		return m.DiscoveryColor
	}
	return ""
}

func (m *Gateway) GetGrpcConfigs() []*ConfigMeta {
	if m != nil {
		return m.GrpcConfigs
	}
	return nil
}

type ConfigMeta struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	Env                  string   `protobuf:"bytes,2,opt,name=env,proto3" json:"env"`
	Zone                 string   `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone"`
	BuildName            string   `protobuf:"bytes,4,opt,name=build_name,json=buildName,proto3" json:"build_name"`
	Filename             string   `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename"`
	Enable               bool     `protobuf:"varint,6,opt,name=enable,proto3" json:"enable"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigMeta) Reset()         { *m = ConfigMeta{} }
func (m *ConfigMeta) String() string { return proto.CompactTextString(m) }
func (*ConfigMeta) ProtoMessage()    {}
func (*ConfigMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{3}
}
func (m *ConfigMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMeta.Merge(m, src)
}
func (m *ConfigMeta) XXX_Size() int {
	return m.Size()
}
func (m *ConfigMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMeta proto.InternalMessageInfo

func (m *ConfigMeta) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ConfigMeta) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *ConfigMeta) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *ConfigMeta) GetBuildName() string {
	if m != nil {
		return m.BuildName
	}
	return ""
}

func (m *ConfigMeta) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ConfigMeta) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type GatewayReply struct {
	Gateways             []*Gateway `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GatewayReply) Reset()         { *m = GatewayReply{} }
func (m *GatewayReply) String() string { return proto.CompactTextString(m) }
func (*GatewayReply) ProtoMessage()    {}
func (*GatewayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{4}
}
func (m *GatewayReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayReply.Merge(m, src)
}
func (m *GatewayReply) XXX_Size() int {
	return m.Size()
}
func (m *GatewayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayReply.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayReply proto.InternalMessageInfo

func (m *GatewayReply) GetGateways() []*Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

type AuthZReply struct {
	Projects             []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AuthZReply) Reset()         { *m = AuthZReply{} }
func (m *AuthZReply) String() string { return proto.CompactTextString(m) }
func (*AuthZReply) ProtoMessage()    {}
func (*AuthZReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{5}
}
func (m *AuthZReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthZReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthZReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthZReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthZReply.Merge(m, src)
}
func (m *AuthZReply) XXX_Size() int {
	return m.Size()
}
func (m *AuthZReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthZReply.DiscardUnknown(m)
}

var xxx_messageInfo_AuthZReply proto.InternalMessageInfo

func (m *AuthZReply) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type BreakerByNull struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BreakerByNull) Reset()         { *m = BreakerByNull{} }
func (m *BreakerByNull) String() string { return proto.CompactTextString(m) }
func (*BreakerByNull) ProtoMessage()    {}
func (*BreakerByNull) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{6}
}
func (m *BreakerByNull) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BreakerByNull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BreakerByNull.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BreakerByNull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakerByNull.Merge(m, src)
}
func (m *BreakerByNull) XXX_Size() int {
	return m.Size()
}
func (m *BreakerByNull) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakerByNull.DiscardUnknown(m)
}

var xxx_messageInfo_BreakerByNull proto.InternalMessageInfo

func (m *BreakerByNull) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BreakerByEcode struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required"`
	Ecode                int64    `protobuf:"varint,2,opt,name=ecode,proto3" json:"ecode" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BreakerByEcode) Reset()         { *m = BreakerByEcode{} }
func (m *BreakerByEcode) String() string { return proto.CompactTextString(m) }
func (*BreakerByEcode) ProtoMessage()    {}
func (*BreakerByEcode) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{7}
}
func (m *BreakerByEcode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BreakerByEcode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BreakerByEcode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BreakerByEcode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakerByEcode.Merge(m, src)
}
func (m *BreakerByEcode) XXX_Size() int {
	return m.Size()
}
func (m *BreakerByEcode) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakerByEcode.DiscardUnknown(m)
}

var xxx_messageInfo_BreakerByEcode proto.InternalMessageInfo

func (m *BreakerByEcode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BreakerByEcode) GetEcode() int64 {
	if m != nil {
		return m.Ecode
	}
	return 0
}

type BreakerByPlaceholder struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BreakerByPlaceholder) Reset()         { *m = BreakerByPlaceholder{} }
func (m *BreakerByPlaceholder) String() string { return proto.CompactTextString(m) }
func (*BreakerByPlaceholder) ProtoMessage()    {}
func (*BreakerByPlaceholder) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{8}
}
func (m *BreakerByPlaceholder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BreakerByPlaceholder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BreakerByPlaceholder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BreakerByPlaceholder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakerByPlaceholder.Merge(m, src)
}
func (m *BreakerByPlaceholder) XXX_Size() int {
	return m.Size()
}
func (m *BreakerByPlaceholder) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakerByPlaceholder.DiscardUnknown(m)
}

var xxx_messageInfo_BreakerByPlaceholder proto.InternalMessageInfo

func (m *BreakerByPlaceholder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BreakerByPlaceholder) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type BreakerByRetryBackup struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required"`
	BackupUrl            string   `protobuf:"bytes,2,opt,name=backup_url,json=backupUrl,proto3" json:"backup_url" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BreakerByRetryBackup) Reset()         { *m = BreakerByRetryBackup{} }
func (m *BreakerByRetryBackup) String() string { return proto.CompactTextString(m) }
func (*BreakerByRetryBackup) ProtoMessage()    {}
func (*BreakerByRetryBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{9}
}
func (m *BreakerByRetryBackup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BreakerByRetryBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BreakerByRetryBackup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BreakerByRetryBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakerByRetryBackup.Merge(m, src)
}
func (m *BreakerByRetryBackup) XXX_Size() int {
	return m.Size()
}
func (m *BreakerByRetryBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakerByRetryBackup.DiscardUnknown(m)
}

var xxx_messageInfo_BreakerByRetryBackup proto.InternalMessageInfo

func (m *BreakerByRetryBackup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BreakerByRetryBackup) GetBackupUrl() string {
	if m != nil {
		return m.BackupUrl
	}
	return ""
}

type BreakerByDirectlyBackup struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required"`
	BackupUrl            string   `protobuf:"bytes,2,opt,name=backup_url,json=backupUrl,proto3" json:"backup_url" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BreakerByDirectlyBackup) Reset()         { *m = BreakerByDirectlyBackup{} }
func (m *BreakerByDirectlyBackup) String() string { return proto.CompactTextString(m) }
func (*BreakerByDirectlyBackup) ProtoMessage()    {}
func (*BreakerByDirectlyBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{10}
}
func (m *BreakerByDirectlyBackup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BreakerByDirectlyBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BreakerByDirectlyBackup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BreakerByDirectlyBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakerByDirectlyBackup.Merge(m, src)
}
func (m *BreakerByDirectlyBackup) XXX_Size() int {
	return m.Size()
}
func (m *BreakerByDirectlyBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakerByDirectlyBackup.DiscardUnknown(m)
}

var xxx_messageInfo_BreakerByDirectlyBackup proto.InternalMessageInfo

func (m *BreakerByDirectlyBackup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BreakerByDirectlyBackup) GetBackupUrl() string {
	if m != nil {
		return m.BackupUrl
	}
	return ""
}

type BreakerAction struct {
	// Types that are valid to be assigned to Action:
	//	*BreakerAction_Null
	//	*BreakerAction_Ecode
	//	*BreakerAction_Placeholder
	//	*BreakerAction_DirectlyBackup
	//	*BreakerAction_RetryBackup
	Action               isBreakerAction_Action `protobuf_oneof:"action"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BreakerAction) Reset()         { *m = BreakerAction{} }
func (m *BreakerAction) String() string { return proto.CompactTextString(m) }
func (*BreakerAction) ProtoMessage()    {}
func (*BreakerAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{11}
}
func (m *BreakerAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BreakerAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BreakerAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BreakerAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakerAction.Merge(m, src)
}
func (m *BreakerAction) XXX_Size() int {
	return m.Size()
}
func (m *BreakerAction) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakerAction.DiscardUnknown(m)
}

var xxx_messageInfo_BreakerAction proto.InternalMessageInfo

type isBreakerAction_Action interface {
	isBreakerAction_Action()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BreakerAction_Null struct {
	Null *BreakerByNull `protobuf:"bytes,1,opt,name=null,proto3,oneof" json:"null,omitempty"`
}
type BreakerAction_Ecode struct {
	Ecode *BreakerByEcode `protobuf:"bytes,2,opt,name=ecode,proto3,oneof" json:"ecode,omitempty"`
}
type BreakerAction_Placeholder struct {
	Placeholder *BreakerByPlaceholder `protobuf:"bytes,3,opt,name=placeholder,proto3,oneof" json:"placeholder,omitempty"`
}
type BreakerAction_DirectlyBackup struct {
	DirectlyBackup *BreakerByDirectlyBackup `protobuf:"bytes,4,opt,name=directly_backup,json=directlyBackup,proto3,oneof" json:"directly_backup,omitempty"`
}
type BreakerAction_RetryBackup struct {
	RetryBackup *BreakerByRetryBackup `protobuf:"bytes,5,opt,name=retry_backup,json=retryBackup,proto3,oneof" json:"retry_backup,omitempty"`
}

func (*BreakerAction_Null) isBreakerAction_Action()           {}
func (*BreakerAction_Ecode) isBreakerAction_Action()          {}
func (*BreakerAction_Placeholder) isBreakerAction_Action()    {}
func (*BreakerAction_DirectlyBackup) isBreakerAction_Action() {}
func (*BreakerAction_RetryBackup) isBreakerAction_Action()    {}

func (m *BreakerAction) GetAction() isBreakerAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *BreakerAction) GetNull() *BreakerByNull {
	if x, ok := m.GetAction().(*BreakerAction_Null); ok {
		return x.Null
	}
	return nil
}

func (m *BreakerAction) GetEcode() *BreakerByEcode {
	if x, ok := m.GetAction().(*BreakerAction_Ecode); ok {
		return x.Ecode
	}
	return nil
}

func (m *BreakerAction) GetPlaceholder() *BreakerByPlaceholder {
	if x, ok := m.GetAction().(*BreakerAction_Placeholder); ok {
		return x.Placeholder
	}
	return nil
}

func (m *BreakerAction) GetDirectlyBackup() *BreakerByDirectlyBackup {
	if x, ok := m.GetAction().(*BreakerAction_DirectlyBackup); ok {
		return x.DirectlyBackup
	}
	return nil
}

func (m *BreakerAction) GetRetryBackup() *BreakerByRetryBackup {
	if x, ok := m.GetAction().(*BreakerAction_RetryBackup); ok {
		return x.RetryBackup
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BreakerAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BreakerAction_Null)(nil),
		(*BreakerAction_Ecode)(nil),
		(*BreakerAction_Placeholder)(nil),
		(*BreakerAction_DirectlyBackup)(nil),
		(*BreakerAction_RetryBackup)(nil),
	}
}

type FlowCopy struct {
	// Types that are valid to be assigned to Flow:
	//	*FlowCopy_Null
	//	*FlowCopy_Ratio
	//	*FlowCopy_Qps
	Flow                 isFlowCopy_Flow `protobuf_oneof:"flow"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FlowCopy) Reset()         { *m = FlowCopy{} }
func (m *FlowCopy) String() string { return proto.CompactTextString(m) }
func (*FlowCopy) ProtoMessage()    {}
func (*FlowCopy) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{12}
}
func (m *FlowCopy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowCopy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowCopy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowCopy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowCopy.Merge(m, src)
}
func (m *FlowCopy) XXX_Size() int {
	return m.Size()
}
func (m *FlowCopy) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowCopy.DiscardUnknown(m)
}

var xxx_messageInfo_FlowCopy proto.InternalMessageInfo

type isFlowCopy_Flow interface {
	isFlowCopy_Flow()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowCopy_Null struct {
	Null *CopyByNull `protobuf:"bytes,1,opt,name=null,proto3,oneof" json:"null,omitempty"`
}
type FlowCopy_Ratio struct {
	Ratio *CopyByRatio `protobuf:"bytes,2,opt,name=ratio,proto3,oneof" json:"ratio,omitempty"`
}
type FlowCopy_Qps struct {
	Qps *CopyByQPS `protobuf:"bytes,3,opt,name=qps,proto3,oneof" json:"qps,omitempty"`
}

func (*FlowCopy_Null) isFlowCopy_Flow()  {}
func (*FlowCopy_Ratio) isFlowCopy_Flow() {}
func (*FlowCopy_Qps) isFlowCopy_Flow()   {}

func (m *FlowCopy) GetFlow() isFlowCopy_Flow {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *FlowCopy) GetNull() *CopyByNull {
	if x, ok := m.GetFlow().(*FlowCopy_Null); ok {
		return x.Null
	}
	return nil
}

func (m *FlowCopy) GetRatio() *CopyByRatio {
	if x, ok := m.GetFlow().(*FlowCopy_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (m *FlowCopy) GetQps() *CopyByQPS {
	if x, ok := m.GetFlow().(*FlowCopy_Qps); ok {
		return x.Qps
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FlowCopy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FlowCopy_Null)(nil),
		(*FlowCopy_Ratio)(nil),
		(*FlowCopy_Qps)(nil),
	}
}

type CopyByNull struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyByNull) Reset()         { *m = CopyByNull{} }
func (m *CopyByNull) String() string { return proto.CompactTextString(m) }
func (*CopyByNull) ProtoMessage()    {}
func (*CopyByNull) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{13}
}
func (m *CopyByNull) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyByNull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyByNull.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyByNull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyByNull.Merge(m, src)
}
func (m *CopyByNull) XXX_Size() int {
	return m.Size()
}
func (m *CopyByNull) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyByNull.DiscardUnknown(m)
}

var xxx_messageInfo_CopyByNull proto.InternalMessageInfo

func (m *CopyByNull) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CopyByRatio struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required"`
	Ratio                int64    `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyByRatio) Reset()         { *m = CopyByRatio{} }
func (m *CopyByRatio) String() string { return proto.CompactTextString(m) }
func (*CopyByRatio) ProtoMessage()    {}
func (*CopyByRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{14}
}
func (m *CopyByRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyByRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyByRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyByRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyByRatio.Merge(m, src)
}
func (m *CopyByRatio) XXX_Size() int {
	return m.Size()
}
func (m *CopyByRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyByRatio.DiscardUnknown(m)
}

var xxx_messageInfo_CopyByRatio proto.InternalMessageInfo

func (m *CopyByRatio) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CopyByRatio) GetRatio() int64 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

type CopyByQPS struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" validate:"required"`
	Qps                  int64    `protobuf:"varint,2,opt,name=qps,proto3" json:"qps" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyByQPS) Reset()         { *m = CopyByQPS{} }
func (m *CopyByQPS) String() string { return proto.CompactTextString(m) }
func (*CopyByQPS) ProtoMessage()    {}
func (*CopyByQPS) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{15}
}
func (m *CopyByQPS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyByQPS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyByQPS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyByQPS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyByQPS.Merge(m, src)
}
func (m *CopyByQPS) XXX_Size() int {
	return m.Size()
}
func (m *CopyByQPS) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyByQPS.DiscardUnknown(m)
}

var xxx_messageInfo_CopyByQPS proto.InternalMessageInfo

func (m *CopyByQPS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CopyByQPS) GetQps() int64 {
	if m != nil {
		return m.Qps
	}
	return 0
}

type BreakerAPI struct {
	Api                  string         `protobuf:"bytes,1,opt,name=api,proto3" json:"api"`
	Ratio                int64          `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio"`
	Reason               string         `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason"`
	Condition            string         `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition"`
	Action               *BreakerAction `protobuf:"bytes,5,opt,name=action,proto3" json:"action"`
	Enable               bool           `protobuf:"varint,6,opt,name=enable,proto3" json:"enable"`
	Node                 string         `protobuf:"bytes,7,opt,name=node,proto3" json:"node"`
	Gateway              string         `protobuf:"bytes,8,opt,name=gateway,proto3" json:"gateway"`
	FlowCopy             *FlowCopy      `protobuf:"bytes,9,opt,name=flow_copy,json=flowCopy,proto3" json:"flow_copy"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BreakerAPI) Reset()         { *m = BreakerAPI{} }
func (m *BreakerAPI) String() string { return proto.CompactTextString(m) }
func (*BreakerAPI) ProtoMessage()    {}
func (*BreakerAPI) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{16}
}
func (m *BreakerAPI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BreakerAPI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BreakerAPI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BreakerAPI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakerAPI.Merge(m, src)
}
func (m *BreakerAPI) XXX_Size() int {
	return m.Size()
}
func (m *BreakerAPI) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakerAPI.DiscardUnknown(m)
}

var xxx_messageInfo_BreakerAPI proto.InternalMessageInfo

func (m *BreakerAPI) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *BreakerAPI) GetRatio() int64 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *BreakerAPI) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BreakerAPI) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func (m *BreakerAPI) GetAction() *BreakerAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *BreakerAPI) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *BreakerAPI) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *BreakerAPI) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *BreakerAPI) GetFlowCopy() *FlowCopy {
	if m != nil {
		return m.FlowCopy
	}
	return nil
}

type ListBreakerAPIReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBreakerAPIReq) Reset()         { *m = ListBreakerAPIReq{} }
func (m *ListBreakerAPIReq) String() string { return proto.CompactTextString(m) }
func (*ListBreakerAPIReq) ProtoMessage()    {}
func (*ListBreakerAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{17}
}
func (m *ListBreakerAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBreakerAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBreakerAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBreakerAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBreakerAPIReq.Merge(m, src)
}
func (m *ListBreakerAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *ListBreakerAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBreakerAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListBreakerAPIReq proto.InternalMessageInfo

func (m *ListBreakerAPIReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ListBreakerAPIReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type ListBreakerAPIReply struct {
	BreakerApiList       []*BreakerAPI `protobuf:"bytes,1,rep,name=breaker_api_list,json=breakerApiList,proto3" json:"breaker_api_list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListBreakerAPIReply) Reset()         { *m = ListBreakerAPIReply{} }
func (m *ListBreakerAPIReply) String() string { return proto.CompactTextString(m) }
func (*ListBreakerAPIReply) ProtoMessage()    {}
func (*ListBreakerAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{18}
}
func (m *ListBreakerAPIReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBreakerAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBreakerAPIReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBreakerAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBreakerAPIReply.Merge(m, src)
}
func (m *ListBreakerAPIReply) XXX_Size() int {
	return m.Size()
}
func (m *ListBreakerAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBreakerAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListBreakerAPIReply proto.InternalMessageInfo

func (m *ListBreakerAPIReply) GetBreakerApiList() []*BreakerAPI {
	if m != nil {
		return m.BreakerApiList
	}
	return nil
}

type SetBreakerAPIReq struct {
	Api                  string         `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty" form:"api" validate:"required"`
	Ratio                int64          `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty" form:"ratio" validate:"required"`
	Reason               string         `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty" form:"reason" validate:"required"`
	Condition            string         `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty" form:"condition"`
	Action               *BreakerAction `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty" form:"-"`
	Enable               bool           `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty" form:"enable"`
	Node                 string         `protobuf:"bytes,7,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string         `protobuf:"bytes,8,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Username             string         `protobuf:"bytes,9,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	FlowCopy             *FlowCopy      `protobuf:"bytes,10,opt,name=flow_copy,json=flowCopy,proto3" json:"flow_copy,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SetBreakerAPIReq) Reset()         { *m = SetBreakerAPIReq{} }
func (m *SetBreakerAPIReq) String() string { return proto.CompactTextString(m) }
func (*SetBreakerAPIReq) ProtoMessage()    {}
func (*SetBreakerAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{19}
}
func (m *SetBreakerAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBreakerAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBreakerAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBreakerAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBreakerAPIReq.Merge(m, src)
}
func (m *SetBreakerAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *SetBreakerAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBreakerAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetBreakerAPIReq proto.InternalMessageInfo

func (m *SetBreakerAPIReq) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *SetBreakerAPIReq) GetRatio() int64 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *SetBreakerAPIReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *SetBreakerAPIReq) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func (m *SetBreakerAPIReq) GetAction() *BreakerAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *SetBreakerAPIReq) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *SetBreakerAPIReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SetBreakerAPIReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *SetBreakerAPIReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SetBreakerAPIReq) GetFlowCopy() *FlowCopy {
	if m != nil {
		return m.FlowCopy
	}
	return nil
}

type EnableBreakerAPIReq struct {
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty" form:"api" validate:"required"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Disable              bool     `protobuf:"varint,4,opt,name=disable,proto3" json:"disable,omitempty" form:"disable"`
	Username             string   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableBreakerAPIReq) Reset()         { *m = EnableBreakerAPIReq{} }
func (m *EnableBreakerAPIReq) String() string { return proto.CompactTextString(m) }
func (*EnableBreakerAPIReq) ProtoMessage()    {}
func (*EnableBreakerAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{20}
}
func (m *EnableBreakerAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableBreakerAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableBreakerAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableBreakerAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableBreakerAPIReq.Merge(m, src)
}
func (m *EnableBreakerAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *EnableBreakerAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableBreakerAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_EnableBreakerAPIReq proto.InternalMessageInfo

func (m *EnableBreakerAPIReq) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *EnableBreakerAPIReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *EnableBreakerAPIReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *EnableBreakerAPIReq) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *EnableBreakerAPIReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type DeleteBreakerAPIReq struct {
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty" form:"api" validate:"required"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBreakerAPIReq) Reset()         { *m = DeleteBreakerAPIReq{} }
func (m *DeleteBreakerAPIReq) String() string { return proto.CompactTextString(m) }
func (*DeleteBreakerAPIReq) ProtoMessage()    {}
func (*DeleteBreakerAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{21}
}
func (m *DeleteBreakerAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBreakerAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBreakerAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBreakerAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBreakerAPIReq.Merge(m, src)
}
func (m *DeleteBreakerAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBreakerAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBreakerAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBreakerAPIReq proto.InternalMessageInfo

func (m *DeleteBreakerAPIReq) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *DeleteBreakerAPIReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DeleteBreakerAPIReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DeleteBreakerAPIReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type SetGatewayReq struct {
	AppName              string        `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty" form:"app_name" validate:"required"`
	Node                 string        `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	TreeId               int64         `protobuf:"varint,3,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id"`
	Configs              []*ConfigMeta `protobuf:"bytes,4,rep,name=configs,proto3" json:"configs,omitempty" form:"-"`
	Username             string        `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	DiscoveryAppid       string        `protobuf:"bytes,6,opt,name=discovery_appid,json=discoveryAppid,proto3" json:"discovery_appid,omitempty" form:"discovery_appid"`
	DiscoveryColor       string        `protobuf:"bytes,7,opt,name=discovery_color,json=discoveryColor,proto3" json:"discovery_color,omitempty" form:"discovery_color"`
	GrpcConfigs          []*ConfigMeta `protobuf:"bytes,8,rep,name=grpc_configs,json=grpcConfigs,proto3" json:"grpc_configs,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetGatewayReq) Reset()         { *m = SetGatewayReq{} }
func (m *SetGatewayReq) String() string { return proto.CompactTextString(m) }
func (*SetGatewayReq) ProtoMessage()    {}
func (*SetGatewayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{22}
}
func (m *SetGatewayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetGatewayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetGatewayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetGatewayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetGatewayReq.Merge(m, src)
}
func (m *SetGatewayReq) XXX_Size() int {
	return m.Size()
}
func (m *SetGatewayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetGatewayReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetGatewayReq proto.InternalMessageInfo

func (m *SetGatewayReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *SetGatewayReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SetGatewayReq) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *SetGatewayReq) GetConfigs() []*ConfigMeta {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *SetGatewayReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SetGatewayReq) GetDiscoveryAppid() string {
	if m != nil {
		return m.DiscoveryAppid
	}
	return ""
}

func (m *SetGatewayReq) GetDiscoveryColor() string {
	if m != nil {
		return m.DiscoveryColor
	}
	return ""
}

func (m *SetGatewayReq) GetGrpcConfigs() []*ConfigMeta {
	if m != nil {
		return m.GrpcConfigs
	}
	return nil
}

type ListGatewayReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGatewayReq) Reset()         { *m = ListGatewayReq{} }
func (m *ListGatewayReq) String() string { return proto.CompactTextString(m) }
func (*ListGatewayReq) ProtoMessage()    {}
func (*ListGatewayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{23}
}
func (m *ListGatewayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGatewayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGatewayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGatewayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGatewayReq.Merge(m, src)
}
func (m *ListGatewayReq) XXX_Size() int {
	return m.Size()
}
func (m *ListGatewayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGatewayReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListGatewayReq proto.InternalMessageInfo

func (m *ListGatewayReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type DeleteGatewayReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	AppName              string   `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty" form:"app_name" validate:"required"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteGatewayReq) Reset()         { *m = DeleteGatewayReq{} }
func (m *DeleteGatewayReq) String() string { return proto.CompactTextString(m) }
func (*DeleteGatewayReq) ProtoMessage()    {}
func (*DeleteGatewayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{24}
}
func (m *DeleteGatewayReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteGatewayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteGatewayReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteGatewayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGatewayReq.Merge(m, src)
}
func (m *DeleteGatewayReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteGatewayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGatewayReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGatewayReq proto.InternalMessageInfo

func (m *DeleteGatewayReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DeleteGatewayReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *DeleteGatewayReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type DynPath struct {
	Node                 string            `protobuf:"bytes,1,opt,name=node,proto3" json:"node"`
	Gateway              string            `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway"`
	Pattern              string            `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern"`
	ClientInfo           *ClientInfo       `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info"`
	UpdatedAt            int64             `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Enable               bool              `protobuf:"varint,6,opt,name=enable,proto3" json:"enable"`
	Annotation           map[string]string `protobuf:"bytes,7,rep,name=annotation,proto3" json:"annotation" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DynPath) Reset()         { *m = DynPath{} }
func (m *DynPath) String() string { return proto.CompactTextString(m) }
func (*DynPath) ProtoMessage()    {}
func (*DynPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{25}
}
func (m *DynPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynPath.Merge(m, src)
}
func (m *DynPath) XXX_Size() int {
	return m.Size()
}
func (m *DynPath) XXX_DiscardUnknown() {
	xxx_messageInfo_DynPath.DiscardUnknown(m)
}

var xxx_messageInfo_DynPath proto.InternalMessageInfo

func (m *DynPath) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DynPath) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DynPath) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *DynPath) GetClientInfo() *ClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *DynPath) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *DynPath) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *DynPath) GetAnnotation() map[string]string {
	if m != nil {
		return m.Annotation
	}
	return nil
}

type ListDynPathReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDynPathReq) Reset()         { *m = ListDynPathReq{} }
func (m *ListDynPathReq) String() string { return proto.CompactTextString(m) }
func (*ListDynPathReq) ProtoMessage()    {}
func (*ListDynPathReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{26}
}
func (m *ListDynPathReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDynPathReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDynPathReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDynPathReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDynPathReq.Merge(m, src)
}
func (m *ListDynPathReq) XXX_Size() int {
	return m.Size()
}
func (m *ListDynPathReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDynPathReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListDynPathReq proto.InternalMessageInfo

func (m *ListDynPathReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ListDynPathReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type ListDynPathReply struct {
	Node                 string     `protobuf:"bytes,1,opt,name=node,proto3" json:"node"`
	Gateway              string     `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway"`
	DynPaths             []*DynPath `protobuf:"bytes,3,rep,name=dyn_paths,json=dynPaths,proto3" json:"dyn_paths"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListDynPathReply) Reset()         { *m = ListDynPathReply{} }
func (m *ListDynPathReply) String() string { return proto.CompactTextString(m) }
func (*ListDynPathReply) ProtoMessage()    {}
func (*ListDynPathReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{27}
}
func (m *ListDynPathReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDynPathReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDynPathReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDynPathReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDynPathReply.Merge(m, src)
}
func (m *ListDynPathReply) XXX_Size() int {
	return m.Size()
}
func (m *ListDynPathReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDynPathReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListDynPathReply proto.InternalMessageInfo

func (m *ListDynPathReply) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ListDynPathReply) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ListDynPathReply) GetDynPaths() []*DynPath {
	if m != nil {
		return m.DynPaths
	}
	return nil
}

type ClientInfo struct {
	AppId                string   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id"`
	Endpoint             string   `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint"`
	Timeout              int64    `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout"`
	MaxRetries           *int64   `protobuf:"bytes,4,opt,name=max_retries,json=maxRetries,proto3,wktptr" json:"max_retries,omitempty"`
	SkipEndpointCheck    bool     `protobuf:"varint,5,opt,name=skip_endpoint_check,json=skipEndpointCheck,proto3" json:"skip_endpoint_check"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{28}
}
func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *ClientInfo) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *ClientInfo) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ClientInfo) GetMaxRetries() *int64 {
	if m != nil {
		return m.MaxRetries
	}
	return nil
}

func (m *ClientInfo) GetSkipEndpointCheck() bool {
	if m != nil {
		return m.SkipEndpointCheck
	}
	return false
}

type SetDynPathReq struct {
	Node                 string            `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string            `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Pattern              string            `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty" form:"pattern" validate:"required"`
	ClientInfo           *ClientInfo       `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty" form:"-"`
	UpdatedAt            int64             `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" form:"-"`
	Enable               bool              `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty" form:"enable"`
	Username             string            `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	Annotation           map[string]string `protobuf:"bytes,8,rep,name=annotation,proto3" json:"annotation,omitempty" form:"-" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetDynPathReq) Reset()         { *m = SetDynPathReq{} }
func (m *SetDynPathReq) String() string { return proto.CompactTextString(m) }
func (*SetDynPathReq) ProtoMessage()    {}
func (*SetDynPathReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{29}
}
func (m *SetDynPathReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDynPathReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDynPathReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDynPathReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDynPathReq.Merge(m, src)
}
func (m *SetDynPathReq) XXX_Size() int {
	return m.Size()
}
func (m *SetDynPathReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDynPathReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetDynPathReq proto.InternalMessageInfo

func (m *SetDynPathReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SetDynPathReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *SetDynPathReq) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *SetDynPathReq) GetClientInfo() *ClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *SetDynPathReq) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SetDynPathReq) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *SetDynPathReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SetDynPathReq) GetAnnotation() map[string]string {
	if m != nil {
		return m.Annotation
	}
	return nil
}

type DeleteDynPathReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Pattern              string   `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty" form:"pattern" validate:"required"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDynPathReq) Reset()         { *m = DeleteDynPathReq{} }
func (m *DeleteDynPathReq) String() string { return proto.CompactTextString(m) }
func (*DeleteDynPathReq) ProtoMessage()    {}
func (*DeleteDynPathReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{30}
}
func (m *DeleteDynPathReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDynPathReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDynPathReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDynPathReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDynPathReq.Merge(m, src)
}
func (m *DeleteDynPathReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDynPathReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDynPathReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDynPathReq proto.InternalMessageInfo

func (m *DeleteDynPathReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DeleteDynPathReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DeleteDynPathReq) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *DeleteDynPathReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UpdateALLGatewayConfigReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	AppName              string   `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty" form:"app_name" validate:"required"`
	Disable              bool     `protobuf:"varint,3,opt,name=disable,proto3" json:"disable,omitempty" form:"disable"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateALLGatewayConfigReq) Reset()         { *m = UpdateALLGatewayConfigReq{} }
func (m *UpdateALLGatewayConfigReq) String() string { return proto.CompactTextString(m) }
func (*UpdateALLGatewayConfigReq) ProtoMessage()    {}
func (*UpdateALLGatewayConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{31}
}
func (m *UpdateALLGatewayConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateALLGatewayConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateALLGatewayConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateALLGatewayConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateALLGatewayConfigReq.Merge(m, src)
}
func (m *UpdateALLGatewayConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateALLGatewayConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateALLGatewayConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateALLGatewayConfigReq proto.InternalMessageInfo

func (m *UpdateALLGatewayConfigReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *UpdateALLGatewayConfigReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *UpdateALLGatewayConfigReq) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *UpdateALLGatewayConfigReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type EnableDynPathReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Pattern              string   `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty" form:"pattern" validate:"required"`
	Disable              bool     `protobuf:"varint,4,opt,name=disable,proto3" json:"disable,omitempty" form:"disable"`
	Username             string   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableDynPathReq) Reset()         { *m = EnableDynPathReq{} }
func (m *EnableDynPathReq) String() string { return proto.CompactTextString(m) }
func (*EnableDynPathReq) ProtoMessage()    {}
func (*EnableDynPathReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{32}
}
func (m *EnableDynPathReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableDynPathReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableDynPathReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableDynPathReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableDynPathReq.Merge(m, src)
}
func (m *EnableDynPathReq) XXX_Size() int {
	return m.Size()
}
func (m *EnableDynPathReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableDynPathReq.DiscardUnknown(m)
}

var xxx_messageInfo_EnableDynPathReq proto.InternalMessageInfo

func (m *EnableDynPathReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *EnableDynPathReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *EnableDynPathReq) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *EnableDynPathReq) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *EnableDynPathReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type Sponsor struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	Uname                string   `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sponsor) Reset()         { *m = Sponsor{} }
func (m *Sponsor) String() string { return proto.CompactTextString(m) }
func (*Sponsor) ProtoMessage()    {}
func (*Sponsor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{33}
}
func (m *Sponsor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sponsor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sponsor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sponsor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sponsor.Merge(m, src)
}
func (m *Sponsor) XXX_Size() int {
	return m.Size()
}
func (m *Sponsor) XXX_DiscardUnknown() {
	xxx_messageInfo_Sponsor.DiscardUnknown(m)
}

var xxx_messageInfo_Sponsor proto.InternalMessageInfo

func (m *Sponsor) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Sponsor) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

type Entity struct {
	Gateway              string   `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway"`
	ObjectType           int64    `protobuf:"varint,2,opt,name=object_type,json=objectType,proto3" json:"type"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action"`
	Identifier           string   `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier"`
	Env                  string   `protobuf:"bytes,5,opt,name=env,proto3" json:"env"`
	Zone                 string   `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{34}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return m.Size()
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *Entity) GetObjectType() int64 {
	if m != nil {
		return m.ObjectType
	}
	return 0
}

func (m *Entity) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Entity) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Entity) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *Entity) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type ExtraContent struct {
	Detail               string   `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtraContent) Reset()         { *m = ExtraContent{} }
func (m *ExtraContent) String() string { return proto.CompactTextString(m) }
func (*ExtraContent) ProtoMessage()    {}
func (*ExtraContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{35}
}
func (m *ExtraContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraContent.Merge(m, src)
}
func (m *ExtraContent) XXX_Size() int {
	return m.Size()
}
func (m *ExtraContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraContent.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraContent proto.InternalMessageInfo

func (m *ExtraContent) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

type LogItem struct {
	JobId                string       `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id"`
	Ctime                int64        `protobuf:"varint,2,opt,name=ctime,proto3" json:"ctime"`
	Mtime                int64        `protobuf:"varint,3,opt,name=mtime,proto3" json:"mtime"`
	State                string       `protobuf:"bytes,4,opt,name=state,proto3" json:"state"`
	Level                string       `protobuf:"bytes,5,opt,name=level,proto3" json:"level"`
	Sponsor              Sponsor      `protobuf:"bytes,6,opt,name=sponsor,proto3" json:"sponsor"`
	Entity               Entity       `protobuf:"bytes,7,opt,name=entity,proto3" json:"entity"`
	ExtraContent         ExtraContent `protobuf:"bytes,8,opt,name=extra_content,json=extraContent,proto3" json:"extra_content"`
	Category             string       `protobuf:"bytes,9,opt,name=category,proto3" json:"category"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LogItem) Reset()         { *m = LogItem{} }
func (m *LogItem) String() string { return proto.CompactTextString(m) }
func (*LogItem) ProtoMessage()    {}
func (*LogItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{36}
}
func (m *LogItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogItem.Merge(m, src)
}
func (m *LogItem) XXX_Size() int {
	return m.Size()
}
func (m *LogItem) XXX_DiscardUnknown() {
	xxx_messageInfo_LogItem.DiscardUnknown(m)
}

var xxx_messageInfo_LogItem proto.InternalMessageInfo

func (m *LogItem) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *LogItem) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *LogItem) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *LogItem) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *LogItem) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LogItem) GetSponsor() Sponsor {
	if m != nil {
		return m.Sponsor
	}
	return Sponsor{}
}

func (m *LogItem) GetEntity() Entity {
	if m != nil {
		return m.Entity
	}
	return Entity{}
}

func (m *LogItem) GetExtraContent() ExtraContent {
	if m != nil {
		return m.ExtraContent
	}
	return ExtraContent{}
}

func (m *LogItem) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type Page struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num"`
	Size_                int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size"`
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{37}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Page) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Page) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ListLogReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Object               int64    `protobuf:"varint,3,opt,name=object,proto3" json:"object,omitempty" form:"object"`
	Pn                   int64    `protobuf:"varint,4,opt,name=pn,proto3" json:"pn,omitempty" form:"pn"`
	Ps                   int64    `protobuf:"varint,5,opt,name=ps,proto3" json:"ps,omitempty" form:"ps"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListLogReq) Reset()         { *m = ListLogReq{} }
func (m *ListLogReq) String() string { return proto.CompactTextString(m) }
func (*ListLogReq) ProtoMessage()    {}
func (*ListLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{38}
}
func (m *ListLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLogReq.Merge(m, src)
}
func (m *ListLogReq) XXX_Size() int {
	return m.Size()
}
func (m *ListLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListLogReq proto.InternalMessageInfo

func (m *ListLogReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ListLogReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ListLogReq) GetObject() int64 {
	if m != nil {
		return m.Object
	}
	return 0
}

func (m *ListLogReq) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *ListLogReq) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type ListLogReply struct {
	Lists                []*LogItem `protobuf:"bytes,1,rep,name=lists,proto3" json:"lists"`
	Pages                Page       `protobuf:"bytes,2,opt,name=pages,proto3" json:"page"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListLogReply) Reset()         { *m = ListLogReply{} }
func (m *ListLogReply) String() string { return proto.CompactTextString(m) }
func (*ListLogReply) ProtoMessage()    {}
func (*ListLogReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{39}
}
func (m *ListLogReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLogReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLogReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLogReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLogReply.Merge(m, src)
}
func (m *ListLogReply) XXX_Size() int {
	return m.Size()
}
func (m *ListLogReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLogReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListLogReply proto.InternalMessageInfo

func (m *ListLogReply) GetLists() []*LogItem {
	if m != nil {
		return m.Lists
	}
	return nil
}

func (m *ListLogReply) GetPages() Page {
	if m != nil {
		return m.Pages
	}
	return Page{}
}

type WorkerNode struct {
	Hostname             string            `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname"`
	Zone                 string            `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone"`
	GatewayVersion       string            `protobuf:"bytes,3,opt,name=gateway_version,json=gatewayVersion,proto3" json:"gateway_version"`
	SdkVersion           string            `protobuf:"bytes,4,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version"`
	AdvertiseAddr        string            `protobuf:"bytes,5,opt,name=advertise_addr,json=advertiseAddr,proto3" json:"advertise_addr"`
	Addrs                []string          `protobuf:"bytes,6,rep,name=addrs,proto3" json:"addrs"`
	Status               int64             `protobuf:"varint,7,opt,name=status,proto3" json:"status"`
	RegTimestamp         int64             `protobuf:"varint,8,opt,name=reg_timestamp,json=regTimestamp,proto3" json:"reg_timestamp"`
	UpTimestamp          int64             `protobuf:"varint,9,opt,name=up_timestamp,json=upTimestamp,proto3" json:"up_timestamp"`
	RenewTimestamp       int64             `protobuf:"varint,10,opt,name=renew_timestamp,json=renewTimestamp,proto3" json:"renew_timestamp"`
	DirtyTimestamp       int64             `protobuf:"varint,11,opt,name=dirty_timestamp,json=dirtyTimestamp,proto3" json:"dirty_timestamp"`
	LatestTimestamp      int64             `protobuf:"varint,12,opt,name=latest_timestamp,json=latestTimestamp,proto3" json:"latest_timestamp"`
	Version              string            `protobuf:"bytes,13,opt,name=version,proto3" json:"version"`
	Metadata             map[string]string `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MonitorUrl           string            `protobuf:"bytes,15,opt,name=monitor_url,json=monitorUrl,proto3" json:"monitor_url"`
	ConfigApi            string            `protobuf:"bytes,16,opt,name=config_api,json=configApi,proto3" json:"config_api"`
	ConfigDigest         string            `protobuf:"bytes,17,opt,name=config_digest,json=configDigest,proto3" json:"config_digest"`
	GrpcConfigApi        string            `protobuf:"bytes,18,opt,name=grpc_config_api,json=grpcConfigApi,proto3" json:"grpc_config_api"`
	GrpcConfigDigest     string            `protobuf:"bytes,19,opt,name=grpc_config_digest,json=grpcConfigDigest,proto3" json:"grpc_config_digest"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WorkerNode) Reset()         { *m = WorkerNode{} }
func (m *WorkerNode) String() string { return proto.CompactTextString(m) }
func (*WorkerNode) ProtoMessage()    {}
func (*WorkerNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{40}
}
func (m *WorkerNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerNode.Merge(m, src)
}
func (m *WorkerNode) XXX_Size() int {
	return m.Size()
}
func (m *WorkerNode) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerNode.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerNode proto.InternalMessageInfo

func (m *WorkerNode) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *WorkerNode) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *WorkerNode) GetGatewayVersion() string {
	if m != nil {
		return m.GatewayVersion
	}
	return ""
}

func (m *WorkerNode) GetSdkVersion() string {
	if m != nil {
		return m.SdkVersion
	}
	return ""
}

func (m *WorkerNode) GetAdvertiseAddr() string {
	if m != nil {
		return m.AdvertiseAddr
	}
	return ""
}

func (m *WorkerNode) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *WorkerNode) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WorkerNode) GetRegTimestamp() int64 {
	if m != nil {
		return m.RegTimestamp
	}
	return 0
}

func (m *WorkerNode) GetUpTimestamp() int64 {
	if m != nil {
		return m.UpTimestamp
	}
	return 0
}

func (m *WorkerNode) GetRenewTimestamp() int64 {
	if m != nil {
		return m.RenewTimestamp
	}
	return 0
}

func (m *WorkerNode) GetDirtyTimestamp() int64 {
	if m != nil {
		return m.DirtyTimestamp
	}
	return 0
}

func (m *WorkerNode) GetLatestTimestamp() int64 {
	if m != nil {
		return m.LatestTimestamp
	}
	return 0
}

func (m *WorkerNode) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *WorkerNode) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *WorkerNode) GetMonitorUrl() string {
	if m != nil {
		return m.MonitorUrl
	}
	return ""
}

func (m *WorkerNode) GetConfigApi() string {
	if m != nil {
		return m.ConfigApi
	}
	return ""
}

func (m *WorkerNode) GetConfigDigest() string {
	if m != nil {
		return m.ConfigDigest
	}
	return ""
}

func (m *WorkerNode) GetGrpcConfigApi() string {
	if m != nil {
		return m.GrpcConfigApi
	}
	return ""
}

func (m *WorkerNode) GetGrpcConfigDigest() string {
	if m != nil {
		return m.GrpcConfigDigest
	}
	return ""
}

type WorkerNodes struct {
	GatewayVersion       []string      `protobuf:"bytes,1,rep,name=gateway_version,json=gatewayVersion,proto3" json:"gateway_version"`
	SdkVersion           []string      `protobuf:"bytes,2,rep,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version"`
	Nodes                []*WorkerNode `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WorkerNodes) Reset()         { *m = WorkerNodes{} }
func (m *WorkerNodes) String() string { return proto.CompactTextString(m) }
func (*WorkerNodes) ProtoMessage()    {}
func (*WorkerNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{41}
}
func (m *WorkerNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerNodes.Merge(m, src)
}
func (m *WorkerNodes) XXX_Size() int {
	return m.Size()
}
func (m *WorkerNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerNodes.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerNodes proto.InternalMessageInfo

func (m *WorkerNodes) GetGatewayVersion() []string {
	if m != nil {
		return m.GatewayVersion
	}
	return nil
}

func (m *WorkerNodes) GetSdkVersion() []string {
	if m != nil {
		return m.SdkVersion
	}
	return nil
}

func (m *WorkerNodes) GetNodes() []*WorkerNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type GatewayProfileReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	AppName              string   `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty" form:"app_name" validate:"required"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	Cookie               string   `protobuf:"bytes,4,opt,name=cookie,proto3" json:"cookie,omitempty" form:"-"`
	Host                 string   `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayProfileReq) Reset()         { *m = GatewayProfileReq{} }
func (m *GatewayProfileReq) String() string { return proto.CompactTextString(m) }
func (*GatewayProfileReq) ProtoMessage()    {}
func (*GatewayProfileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{42}
}
func (m *GatewayProfileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayProfileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayProfileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayProfileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayProfileReq.Merge(m, src)
}
func (m *GatewayProfileReq) XXX_Size() int {
	return m.Size()
}
func (m *GatewayProfileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayProfileReq.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayProfileReq proto.InternalMessageInfo

func (m *GatewayProfileReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *GatewayProfileReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *GatewayProfileReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GatewayProfileReq) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *GatewayProfileReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type GatewayProfileReply struct {
	ProjectName          string        `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name"`
	AppName              string        `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name"`
	Node                 string        `protobuf:"bytes,3,opt,name=node,proto3" json:"node"`
	TreeId               int64         `protobuf:"varint,4,opt,name=tree_id,json=treeId,proto3" json:"tree_id"`
	Zones                []string      `protobuf:"bytes,5,rep,name=zones,proto3" json:"zones"`
	Configs              []*ConfigMeta `protobuf:"bytes,6,rep,name=configs,proto3" json:"configs"`
	UpdatedAt            int64         `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	WorkerNodes          *WorkerNodes  `protobuf:"bytes,8,opt,name=worker_nodes,json=workerNodes,proto3" json:"worker_nodes"`
	GrpcConfigs          []*ConfigMeta `protobuf:"bytes,9,rep,name=grpc_configs,json=grpcConfigs,proto3" json:"grpc_configs"`
	Envs                 []string      `protobuf:"bytes,10,rep,name=envs,proto3" json:"envs"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GatewayProfileReply) Reset()         { *m = GatewayProfileReply{} }
func (m *GatewayProfileReply) String() string { return proto.CompactTextString(m) }
func (*GatewayProfileReply) ProtoMessage()    {}
func (*GatewayProfileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{43}
}
func (m *GatewayProfileReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayProfileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayProfileReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayProfileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayProfileReply.Merge(m, src)
}
func (m *GatewayProfileReply) XXX_Size() int {
	return m.Size()
}
func (m *GatewayProfileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayProfileReply.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayProfileReply proto.InternalMessageInfo

func (m *GatewayProfileReply) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *GatewayProfileReply) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *GatewayProfileReply) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *GatewayProfileReply) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *GatewayProfileReply) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *GatewayProfileReply) GetConfigs() []*ConfigMeta {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *GatewayProfileReply) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *GatewayProfileReply) GetWorkerNodes() *WorkerNodes {
	if m != nil {
		return m.WorkerNodes
	}
	return nil
}

func (m *GatewayProfileReply) GetGrpcConfigs() []*ConfigMeta {
	if m != nil {
		return m.GrpcConfigs
	}
	return nil
}

func (m *GatewayProfileReply) GetEnvs() []string {
	if m != nil {
		return m.Envs
	}
	return nil
}

type ExecuteTaskReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Task                 string   `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty" form:"task" validate:"required"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteTaskReq) Reset()         { *m = ExecuteTaskReq{} }
func (m *ExecuteTaskReq) String() string { return proto.CompactTextString(m) }
func (*ExecuteTaskReq) ProtoMessage()    {}
func (*ExecuteTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{44}
}
func (m *ExecuteTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteTaskReq.Merge(m, src)
}
func (m *ExecuteTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteTaskReq proto.InternalMessageInfo

func (m *ExecuteTaskReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ExecuteTaskReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ExecuteTaskReq) GetTask() string {
	if m != nil {
		return m.Task
	}
	return ""
}

func (m *ExecuteTaskReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type ExecuteTaskReply struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteTaskReply) Reset()         { *m = ExecuteTaskReply{} }
func (m *ExecuteTaskReply) String() string { return proto.CompactTextString(m) }
func (*ExecuteTaskReply) ProtoMessage()    {}
func (*ExecuteTaskReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{45}
}
func (m *ExecuteTaskReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteTaskReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteTaskReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteTaskReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteTaskReply.Merge(m, src)
}
func (m *ExecuteTaskReply) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteTaskReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteTaskReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteTaskReply proto.InternalMessageInfo

func (m *ExecuteTaskReply) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type GatewayProxyReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" form:"token"`
	Suffix               string   `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty" form:"suffix"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayProxyReq) Reset()         { *m = GatewayProxyReq{} }
func (m *GatewayProxyReq) String() string { return proto.CompactTextString(m) }
func (*GatewayProxyReq) ProtoMessage()    {}
func (*GatewayProxyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{46}
}
func (m *GatewayProxyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayProxyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayProxyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayProxyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayProxyReq.Merge(m, src)
}
func (m *GatewayProxyReq) XXX_Size() int {
	return m.Size()
}
func (m *GatewayProxyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayProxyReq.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayProxyReq proto.InternalMessageInfo

func (m *GatewayProxyReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GatewayProxyReq) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

type GatewayProxyReply struct {
	Page                 []byte            `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	StatusCode           int32             `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code"`
	Header               map[string]Header `protobuf:"bytes,3,rep,name=header,proto3" json:"header" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GatewayProxyReply) Reset()         { *m = GatewayProxyReply{} }
func (m *GatewayProxyReply) String() string { return proto.CompactTextString(m) }
func (*GatewayProxyReply) ProtoMessage()    {}
func (*GatewayProxyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{47}
}
func (m *GatewayProxyReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayProxyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayProxyReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayProxyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayProxyReply.Merge(m, src)
}
func (m *GatewayProxyReply) XXX_Size() int {
	return m.Size()
}
func (m *GatewayProxyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayProxyReply.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayProxyReply proto.InternalMessageInfo

func (m *GatewayProxyReply) GetPage() []byte {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *GatewayProxyReply) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *GatewayProxyReply) GetHeader() map[string]Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type Header struct {
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{48}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type AppPromptAPIReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	Cookie               string   `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty" form:"-"`
	OnlyGateway          bool     `protobuf:"varint,4,opt,name=only_gateway,json=onlyGateway,proto3" json:"only_gateway,omitempty" form:"only_gateway"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppPromptAPIReq) Reset()         { *m = AppPromptAPIReq{} }
func (m *AppPromptAPIReq) String() string { return proto.CompactTextString(m) }
func (*AppPromptAPIReq) ProtoMessage()    {}
func (*AppPromptAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{49}
}
func (m *AppPromptAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppPromptAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppPromptAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppPromptAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppPromptAPIReq.Merge(m, src)
}
func (m *AppPromptAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *AppPromptAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppPromptAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppPromptAPIReq proto.InternalMessageInfo

func (m *AppPromptAPIReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *AppPromptAPIReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AppPromptAPIReq) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *AppPromptAPIReq) GetOnlyGateway() bool {
	if m != nil {
		return m.OnlyGateway
	}
	return false
}

type AppPromptAPIReply struct {
	Nodes                []*TreeNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AppPromptAPIReply) Reset()         { *m = AppPromptAPIReply{} }
func (m *AppPromptAPIReply) String() string { return proto.CompactTextString(m) }
func (*AppPromptAPIReply) ProtoMessage()    {}
func (*AppPromptAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{50}
}
func (m *AppPromptAPIReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppPromptAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppPromptAPIReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppPromptAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppPromptAPIReply.Merge(m, src)
}
func (m *AppPromptAPIReply) XXX_Size() int {
	return m.Size()
}
func (m *AppPromptAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppPromptAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppPromptAPIReply proto.InternalMessageInfo

func (m *AppPromptAPIReply) GetNodes() []*TreeNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type TreeNode struct {
	TreeId               int64    `protobuf:"varint,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	DiscoveryId          string   `protobuf:"bytes,4,opt,name=discovery_id,json=discoveryId,proto3" json:"discovery_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TreeNode) Reset()         { *m = TreeNode{} }
func (m *TreeNode) String() string { return proto.CompactTextString(m) }
func (*TreeNode) ProtoMessage()    {}
func (*TreeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{51}
}
func (m *TreeNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeNode.Merge(m, src)
}
func (m *TreeNode) XXX_Size() int {
	return m.Size()
}
func (m *TreeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeNode.DiscardUnknown(m)
}

var xxx_messageInfo_TreeNode proto.InternalMessageInfo

func (m *TreeNode) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *TreeNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TreeNode) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TreeNode) GetDiscoveryId() string {
	if m != nil {
		return m.DiscoveryId
	}
	return ""
}

type ConfigPromptAPIReq struct {
	TreeId               int64    `protobuf:"varint,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id" validate:"required"`
	Cookie               string   `protobuf:"bytes,2,opt,name=cookie,proto3" json:"cookie,omitempty" form:"-"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" form:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigPromptAPIReq) Reset()         { *m = ConfigPromptAPIReq{} }
func (m *ConfigPromptAPIReq) String() string { return proto.CompactTextString(m) }
func (*ConfigPromptAPIReq) ProtoMessage()    {}
func (*ConfigPromptAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{52}
}
func (m *ConfigPromptAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigPromptAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigPromptAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigPromptAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigPromptAPIReq.Merge(m, src)
}
func (m *ConfigPromptAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *ConfigPromptAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigPromptAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigPromptAPIReq proto.InternalMessageInfo

func (m *ConfigPromptAPIReq) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *ConfigPromptAPIReq) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *ConfigPromptAPIReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ConfigPromptAPIReply struct {
	List                 []*AppConfigItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ConfigPromptAPIReply) Reset()         { *m = ConfigPromptAPIReply{} }
func (m *ConfigPromptAPIReply) String() string { return proto.CompactTextString(m) }
func (*ConfigPromptAPIReply) ProtoMessage()    {}
func (*ConfigPromptAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{53}
}
func (m *ConfigPromptAPIReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigPromptAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigPromptAPIReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigPromptAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigPromptAPIReply.Merge(m, src)
}
func (m *ConfigPromptAPIReply) XXX_Size() int {
	return m.Size()
}
func (m *ConfigPromptAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigPromptAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigPromptAPIReply proto.InternalMessageInfo

func (m *ConfigPromptAPIReply) GetList() []*AppConfigItem {
	if m != nil {
		return m.List
	}
	return nil
}

type AppConfigItem struct {
	FileName             string   `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name"`
	Env                  string   `protobuf:"bytes,2,opt,name=env,proto3" json:"env"`
	Zone                 string   `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone"`
	BuildName            string   `protobuf:"bytes,4,opt,name=build_name,json=buildName,proto3" json:"build_name"`
	Token                string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppConfigItem) Reset()         { *m = AppConfigItem{} }
func (m *AppConfigItem) String() string { return proto.CompactTextString(m) }
func (*AppConfigItem) ProtoMessage()    {}
func (*AppConfigItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{54}
}
func (m *AppConfigItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppConfigItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppConfigItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppConfigItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppConfigItem.Merge(m, src)
}
func (m *AppConfigItem) XXX_Size() int {
	return m.Size()
}
func (m *AppConfigItem) XXX_DiscardUnknown() {
	xxx_messageInfo_AppConfigItem.DiscardUnknown(m)
}

var xxx_messageInfo_AppConfigItem proto.InternalMessageInfo

func (m *AppConfigItem) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *AppConfigItem) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *AppConfigItem) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *AppConfigItem) GetBuildName() string {
	if m != nil {
		return m.BuildName
	}
	return ""
}

func (m *AppConfigItem) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AppPathPromptAPIReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppPathPromptAPIReq) Reset()         { *m = AppPathPromptAPIReq{} }
func (m *AppPathPromptAPIReq) String() string { return proto.CompactTextString(m) }
func (*AppPathPromptAPIReq) ProtoMessage()    {}
func (*AppPathPromptAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{55}
}
func (m *AppPathPromptAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppPathPromptAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppPathPromptAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppPathPromptAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppPathPromptAPIReq.Merge(m, src)
}
func (m *AppPathPromptAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *AppPathPromptAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppPathPromptAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppPathPromptAPIReq proto.InternalMessageInfo

func (m *AppPathPromptAPIReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *AppPathPromptAPIReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type AppPathPromptAPIReply struct {
	Paths                []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppPathPromptAPIReply) Reset()         { *m = AppPathPromptAPIReply{} }
func (m *AppPathPromptAPIReply) String() string { return proto.CompactTextString(m) }
func (*AppPathPromptAPIReply) ProtoMessage()    {}
func (*AppPathPromptAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{56}
}
func (m *AppPathPromptAPIReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppPathPromptAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppPathPromptAPIReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppPathPromptAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppPathPromptAPIReply.Merge(m, src)
}
func (m *AppPathPromptAPIReply) XXX_Size() int {
	return m.Size()
}
func (m *AppPathPromptAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppPathPromptAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppPathPromptAPIReply proto.InternalMessageInfo

func (m *AppPathPromptAPIReply) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type InitGatewayConfigsReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	AppName              string   `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty" form:"app_name" validate:"required"`
	TreeId               int64    `protobuf:"varint,3,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id"`
	Cookie               string   `protobuf:"bytes,4,opt,name=cookie,proto3" json:"cookie,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitGatewayConfigsReq) Reset()         { *m = InitGatewayConfigsReq{} }
func (m *InitGatewayConfigsReq) String() string { return proto.CompactTextString(m) }
func (*InitGatewayConfigsReq) ProtoMessage()    {}
func (*InitGatewayConfigsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{57}
}
func (m *InitGatewayConfigsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitGatewayConfigsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitGatewayConfigsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitGatewayConfigsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitGatewayConfigsReq.Merge(m, src)
}
func (m *InitGatewayConfigsReq) XXX_Size() int {
	return m.Size()
}
func (m *InitGatewayConfigsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InitGatewayConfigsReq.DiscardUnknown(m)
}

var xxx_messageInfo_InitGatewayConfigsReq proto.InternalMessageInfo

func (m *InitGatewayConfigsReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *InitGatewayConfigsReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *InitGatewayConfigsReq) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *InitGatewayConfigsReq) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type SnapshotActionReq struct {
	Uuid     string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" form:"-"`
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" form:"-"`
	Action   string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty" form:"-"`
	// Types that are valid to be assigned to SnapshotReq:
	//	*SnapshotActionReq_ListBreakerAPIReq
	//	*SnapshotActionReq_SetBreakerAPIReq
	//	*SnapshotActionReq_EnableBreakerAPIReq
	//	*SnapshotActionReq_DeleteBreakerAPIReq
	//	*SnapshotActionReq_ListDynPathReq
	//	*SnapshotActionReq_SetDynPathReq
	//	*SnapshotActionReq_DeleteDynPathReq
	//	*SnapshotActionReq_EnableDynPathReq
	SnapshotReq          isSnapshotActionReq_SnapshotReq `protobuf_oneof:"snapshotReq"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SnapshotActionReq) Reset()         { *m = SnapshotActionReq{} }
func (m *SnapshotActionReq) String() string { return proto.CompactTextString(m) }
func (*SnapshotActionReq) ProtoMessage()    {}
func (*SnapshotActionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{58}
}
func (m *SnapshotActionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotActionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotActionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotActionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotActionReq.Merge(m, src)
}
func (m *SnapshotActionReq) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotActionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotActionReq.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotActionReq proto.InternalMessageInfo

type isSnapshotActionReq_SnapshotReq interface {
	isSnapshotActionReq_SnapshotReq()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SnapshotActionReq_ListBreakerAPIReq struct {
	ListBreakerAPIReq *ListBreakerAPIReq `protobuf:"bytes,4,opt,name=listBreakerAPIReq,proto3,oneof" json:"listBreakerAPIReq,omitempty"`
}
type SnapshotActionReq_SetBreakerAPIReq struct {
	SetBreakerAPIReq *SetBreakerAPIReq `protobuf:"bytes,5,opt,name=setBreakerAPIReq,proto3,oneof" json:"setBreakerAPIReq,omitempty"`
}
type SnapshotActionReq_EnableBreakerAPIReq struct {
	EnableBreakerAPIReq *EnableBreakerAPIReq `protobuf:"bytes,6,opt,name=enableBreakerAPIReq,proto3,oneof" json:"enableBreakerAPIReq,omitempty"`
}
type SnapshotActionReq_DeleteBreakerAPIReq struct {
	DeleteBreakerAPIReq *DeleteBreakerAPIReq `protobuf:"bytes,7,opt,name=deleteBreakerAPIReq,proto3,oneof" json:"deleteBreakerAPIReq,omitempty"`
}
type SnapshotActionReq_ListDynPathReq struct {
	ListDynPathReq *ListDynPathReq `protobuf:"bytes,8,opt,name=listDynPathReq,proto3,oneof" json:"listDynPathReq,omitempty"`
}
type SnapshotActionReq_SetDynPathReq struct {
	SetDynPathReq *SetDynPathReq `protobuf:"bytes,9,opt,name=setDynPathReq,proto3,oneof" json:"setDynPathReq,omitempty"`
}
type SnapshotActionReq_DeleteDynPathReq struct {
	DeleteDynPathReq *DeleteDynPathReq `protobuf:"bytes,10,opt,name=deleteDynPathReq,proto3,oneof" json:"deleteDynPathReq,omitempty"`
}
type SnapshotActionReq_EnableDynPathReq struct {
	EnableDynPathReq *EnableDynPathReq `protobuf:"bytes,11,opt,name=enableDynPathReq,proto3,oneof" json:"enableDynPathReq,omitempty"`
}

func (*SnapshotActionReq_ListBreakerAPIReq) isSnapshotActionReq_SnapshotReq()   {}
func (*SnapshotActionReq_SetBreakerAPIReq) isSnapshotActionReq_SnapshotReq()    {}
func (*SnapshotActionReq_EnableBreakerAPIReq) isSnapshotActionReq_SnapshotReq() {}
func (*SnapshotActionReq_DeleteBreakerAPIReq) isSnapshotActionReq_SnapshotReq() {}
func (*SnapshotActionReq_ListDynPathReq) isSnapshotActionReq_SnapshotReq()      {}
func (*SnapshotActionReq_SetDynPathReq) isSnapshotActionReq_SnapshotReq()       {}
func (*SnapshotActionReq_DeleteDynPathReq) isSnapshotActionReq_SnapshotReq()    {}
func (*SnapshotActionReq_EnableDynPathReq) isSnapshotActionReq_SnapshotReq()    {}

func (m *SnapshotActionReq) GetSnapshotReq() isSnapshotActionReq_SnapshotReq {
	if m != nil {
		return m.SnapshotReq
	}
	return nil
}

func (m *SnapshotActionReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SnapshotActionReq) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *SnapshotActionReq) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *SnapshotActionReq) GetListBreakerAPIReq() *ListBreakerAPIReq {
	if x, ok := m.GetSnapshotReq().(*SnapshotActionReq_ListBreakerAPIReq); ok {
		return x.ListBreakerAPIReq
	}
	return nil
}

func (m *SnapshotActionReq) GetSetBreakerAPIReq() *SetBreakerAPIReq {
	if x, ok := m.GetSnapshotReq().(*SnapshotActionReq_SetBreakerAPIReq); ok {
		return x.SetBreakerAPIReq
	}
	return nil
}

func (m *SnapshotActionReq) GetEnableBreakerAPIReq() *EnableBreakerAPIReq {
	if x, ok := m.GetSnapshotReq().(*SnapshotActionReq_EnableBreakerAPIReq); ok {
		return x.EnableBreakerAPIReq
	}
	return nil
}

func (m *SnapshotActionReq) GetDeleteBreakerAPIReq() *DeleteBreakerAPIReq {
	if x, ok := m.GetSnapshotReq().(*SnapshotActionReq_DeleteBreakerAPIReq); ok {
		return x.DeleteBreakerAPIReq
	}
	return nil
}

func (m *SnapshotActionReq) GetListDynPathReq() *ListDynPathReq {
	if x, ok := m.GetSnapshotReq().(*SnapshotActionReq_ListDynPathReq); ok {
		return x.ListDynPathReq
	}
	return nil
}

func (m *SnapshotActionReq) GetSetDynPathReq() *SetDynPathReq {
	if x, ok := m.GetSnapshotReq().(*SnapshotActionReq_SetDynPathReq); ok {
		return x.SetDynPathReq
	}
	return nil
}

func (m *SnapshotActionReq) GetDeleteDynPathReq() *DeleteDynPathReq {
	if x, ok := m.GetSnapshotReq().(*SnapshotActionReq_DeleteDynPathReq); ok {
		return x.DeleteDynPathReq
	}
	return nil
}

func (m *SnapshotActionReq) GetEnableDynPathReq() *EnableDynPathReq {
	if x, ok := m.GetSnapshotReq().(*SnapshotActionReq_EnableDynPathReq); ok {
		return x.EnableDynPathReq
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SnapshotActionReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SnapshotActionReq_ListBreakerAPIReq)(nil),
		(*SnapshotActionReq_SetBreakerAPIReq)(nil),
		(*SnapshotActionReq_EnableBreakerAPIReq)(nil),
		(*SnapshotActionReq_DeleteBreakerAPIReq)(nil),
		(*SnapshotActionReq_ListDynPathReq)(nil),
		(*SnapshotActionReq_SetDynPathReq)(nil),
		(*SnapshotActionReq_DeleteDynPathReq)(nil),
		(*SnapshotActionReq_EnableDynPathReq)(nil),
	}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{59}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type SnapshotActionReply struct {
	// Types that are valid to be assigned to SnapshotReply:
	//	*SnapshotActionReply_Empty
	//	*SnapshotActionReply_ListBreakerAPI
	//	*SnapshotActionReply_ListDynPath
	SnapshotReply        isSnapshotActionReply_SnapshotReply `protobuf_oneof:"snapshotReply"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *SnapshotActionReply) Reset()         { *m = SnapshotActionReply{} }
func (m *SnapshotActionReply) String() string { return proto.CompactTextString(m) }
func (*SnapshotActionReply) ProtoMessage()    {}
func (*SnapshotActionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{60}
}
func (m *SnapshotActionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotActionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotActionReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotActionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotActionReply.Merge(m, src)
}
func (m *SnapshotActionReply) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotActionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotActionReply.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotActionReply proto.InternalMessageInfo

type isSnapshotActionReply_SnapshotReply interface {
	isSnapshotActionReply_SnapshotReply()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SnapshotActionReply_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof" json:"empty,omitempty"`
}
type SnapshotActionReply_ListBreakerAPI struct {
	ListBreakerAPI *ListBreakerAPIReply `protobuf:"bytes,2,opt,name=listBreakerAPI,proto3,oneof" json:"listBreakerAPI,omitempty"`
}
type SnapshotActionReply_ListDynPath struct {
	ListDynPath *ListDynPathReply `protobuf:"bytes,3,opt,name=listDynPath,proto3,oneof" json:"listDynPath,omitempty"`
}

func (*SnapshotActionReply_Empty) isSnapshotActionReply_SnapshotReply()          {}
func (*SnapshotActionReply_ListBreakerAPI) isSnapshotActionReply_SnapshotReply() {}
func (*SnapshotActionReply_ListDynPath) isSnapshotActionReply_SnapshotReply()    {}

func (m *SnapshotActionReply) GetSnapshotReply() isSnapshotActionReply_SnapshotReply {
	if m != nil {
		return m.SnapshotReply
	}
	return nil
}

func (m *SnapshotActionReply) GetEmpty() *Empty {
	if x, ok := m.GetSnapshotReply().(*SnapshotActionReply_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *SnapshotActionReply) GetListBreakerAPI() *ListBreakerAPIReply {
	if x, ok := m.GetSnapshotReply().(*SnapshotActionReply_ListBreakerAPI); ok {
		return x.ListBreakerAPI
	}
	return nil
}

func (m *SnapshotActionReply) GetListDynPath() *ListDynPathReply {
	if x, ok := m.GetSnapshotReply().(*SnapshotActionReply_ListDynPath); ok {
		return x.ListDynPath
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SnapshotActionReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SnapshotActionReply_Empty)(nil),
		(*SnapshotActionReply_ListBreakerAPI)(nil),
		(*SnapshotActionReply_ListDynPath)(nil),
	}
}

type AddSnapshotReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddSnapshotReq) Reset()         { *m = AddSnapshotReq{} }
func (m *AddSnapshotReq) String() string { return proto.CompactTextString(m) }
func (*AddSnapshotReq) ProtoMessage()    {}
func (*AddSnapshotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{61}
}
func (m *AddSnapshotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSnapshotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSnapshotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSnapshotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSnapshotReq.Merge(m, src)
}
func (m *AddSnapshotReq) XXX_Size() int {
	return m.Size()
}
func (m *AddSnapshotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSnapshotReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddSnapshotReq proto.InternalMessageInfo

func (m *AddSnapshotReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *AddSnapshotReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *AddSnapshotReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type AddSnapshotReply struct {
	Meta                 *SnapshotMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AddSnapshotReply) Reset()         { *m = AddSnapshotReply{} }
func (m *AddSnapshotReply) String() string { return proto.CompactTextString(m) }
func (*AddSnapshotReply) ProtoMessage()    {}
func (*AddSnapshotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{62}
}
func (m *AddSnapshotReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSnapshotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSnapshotReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSnapshotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSnapshotReply.Merge(m, src)
}
func (m *AddSnapshotReply) XXX_Size() int {
	return m.Size()
}
func (m *AddSnapshotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSnapshotReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddSnapshotReply proto.InternalMessageInfo

func (m *AddSnapshotReply) GetMeta() *SnapshotMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type SnapshotMeta struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
	Gateway              string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotMeta) Reset()         { *m = SnapshotMeta{} }
func (m *SnapshotMeta) String() string { return proto.CompactTextString(m) }
func (*SnapshotMeta) ProtoMessage()    {}
func (*SnapshotMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{63}
}
func (m *SnapshotMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMeta.Merge(m, src)
}
func (m *SnapshotMeta) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMeta proto.InternalMessageInfo

func (m *SnapshotMeta) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SnapshotMeta) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SnapshotMeta) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type SnapshotProfileReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Uuid                 string   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty" form:"uuid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotProfileReq) Reset()         { *m = SnapshotProfileReq{} }
func (m *SnapshotProfileReq) String() string { return proto.CompactTextString(m) }
func (*SnapshotProfileReq) ProtoMessage()    {}
func (*SnapshotProfileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{64}
}
func (m *SnapshotProfileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotProfileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotProfileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotProfileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotProfileReq.Merge(m, src)
}
func (m *SnapshotProfileReq) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotProfileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotProfileReq.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotProfileReq proto.InternalMessageInfo

func (m *SnapshotProfileReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SnapshotProfileReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *SnapshotProfileReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type SnapshotProfileReply struct {
	Meta                 *SnapshotMeta        `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta"`
	DynPath              *ListDynPathReply    `protobuf:"bytes,2,opt,name=dyn_path,json=dynPath,proto3" json:"dyn_path"`
	BreakerApi           *ListBreakerAPIReply `protobuf:"bytes,3,opt,name=breaker_api,json=breakerApi,proto3" json:"breaker_api"`
	GrpcDynPath          *ListDynPathReply    `protobuf:"bytes,4,opt,name=grpc_dyn_path,json=grpcDynPath,proto3" json:"grpc_dyn_path"`
	GrpcBreakerApi       *ListBreakerAPIReply `protobuf:"bytes,5,opt,name=grpc_breaker_api,json=grpcBreakerApi,proto3" json:"grpc_breaker_api"`
	QuotaMethod          []*QuotaMethod       `protobuf:"bytes,6,rep,name=quota_method,json=quotaMethod,proto3" json:"quota_method"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SnapshotProfileReply) Reset()         { *m = SnapshotProfileReply{} }
func (m *SnapshotProfileReply) String() string { return proto.CompactTextString(m) }
func (*SnapshotProfileReply) ProtoMessage()    {}
func (*SnapshotProfileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{65}
}
func (m *SnapshotProfileReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotProfileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotProfileReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotProfileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotProfileReply.Merge(m, src)
}
func (m *SnapshotProfileReply) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotProfileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotProfileReply.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotProfileReply proto.InternalMessageInfo

func (m *SnapshotProfileReply) GetMeta() *SnapshotMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SnapshotProfileReply) GetDynPath() *ListDynPathReply {
	if m != nil {
		return m.DynPath
	}
	return nil
}

func (m *SnapshotProfileReply) GetBreakerApi() *ListBreakerAPIReply {
	if m != nil {
		return m.BreakerApi
	}
	return nil
}

func (m *SnapshotProfileReply) GetGrpcDynPath() *ListDynPathReply {
	if m != nil {
		return m.GrpcDynPath
	}
	return nil
}

func (m *SnapshotProfileReply) GetGrpcBreakerApi() *ListBreakerAPIReply {
	if m != nil {
		return m.GrpcBreakerApi
	}
	return nil
}

func (m *SnapshotProfileReply) GetQuotaMethod() []*QuotaMethod {
	if m != nil {
		return m.QuotaMethod
	}
	return nil
}

type CreateDeploymentReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Uuid                 string   `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty" form:"uuid" validate:"required"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" form:"description"`
	Username             string   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	DeploymentType       string   `protobuf:"bytes,6,opt,name=deployment_type,json=deploymentType,proto3" json:"deployment_type,omitempty" form:"deployment_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDeploymentReq) Reset()         { *m = CreateDeploymentReq{} }
func (m *CreateDeploymentReq) String() string { return proto.CompactTextString(m) }
func (*CreateDeploymentReq) ProtoMessage()    {}
func (*CreateDeploymentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{66}
}
func (m *CreateDeploymentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDeploymentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDeploymentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDeploymentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeploymentReq.Merge(m, src)
}
func (m *CreateDeploymentReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateDeploymentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeploymentReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeploymentReq proto.InternalMessageInfo

func (m *CreateDeploymentReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *CreateDeploymentReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *CreateDeploymentReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *CreateDeploymentReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateDeploymentReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateDeploymentReq) GetDeploymentType() string {
	if m != nil {
		return m.DeploymentType
	}
	return ""
}

type CreateDeploymentReply struct {
	DeploymentId         string   `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDeploymentReply) Reset()         { *m = CreateDeploymentReply{} }
func (m *CreateDeploymentReply) String() string { return proto.CompactTextString(m) }
func (*CreateDeploymentReply) ProtoMessage()    {}
func (*CreateDeploymentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{67}
}
func (m *CreateDeploymentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDeploymentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDeploymentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDeploymentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDeploymentReply.Merge(m, src)
}
func (m *CreateDeploymentReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateDeploymentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDeploymentReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDeploymentReply proto.InternalMessageInfo

func (m *CreateDeploymentReply) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

type DeploymentReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	DeploymentId         string   `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" form:"deployment_id" validate:"required"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	DeploymentType       string   `protobuf:"bytes,5,opt,name=deployment_type,json=deploymentType,proto3" json:"deployment_type,omitempty" form:"deployment_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentReq) Reset()         { *m = DeploymentReq{} }
func (m *DeploymentReq) String() string { return proto.CompactTextString(m) }
func (*DeploymentReq) ProtoMessage()    {}
func (*DeploymentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{68}
}
func (m *DeploymentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentReq.Merge(m, src)
}
func (m *DeploymentReq) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentReq proto.InternalMessageInfo

func (m *DeploymentReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DeploymentReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DeploymentReq) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *DeploymentReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeploymentReq) GetDeploymentType() string {
	if m != nil {
		return m.DeploymentType
	}
	return ""
}

type CompareDeploymentReply struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Node                 string      `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
	Gateway              string      `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway"`
	OldConfigs           *OldConfigs `protobuf:"bytes,4,opt,name=old_configs,json=oldConfigs,proto3" json:"old_configs"`
	NewConfigs           *NewConfigs `protobuf:"bytes,5,opt,name=new_configs,json=newConfigs,proto3" json:"new_configs"`
	Type                 string      `protobuf:"bytes,6,opt,name=type,proto3" json:"type"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CompareDeploymentReply) Reset()         { *m = CompareDeploymentReply{} }
func (m *CompareDeploymentReply) String() string { return proto.CompactTextString(m) }
func (*CompareDeploymentReply) ProtoMessage()    {}
func (*CompareDeploymentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{69}
}
func (m *CompareDeploymentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompareDeploymentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompareDeploymentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompareDeploymentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareDeploymentReply.Merge(m, src)
}
func (m *CompareDeploymentReply) XXX_Size() int {
	return m.Size()
}
func (m *CompareDeploymentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareDeploymentReply.DiscardUnknown(m)
}

var xxx_messageInfo_CompareDeploymentReply proto.InternalMessageInfo

func (m *CompareDeploymentReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CompareDeploymentReply) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *CompareDeploymentReply) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *CompareDeploymentReply) GetOldConfigs() *OldConfigs {
	if m != nil {
		return m.OldConfigs
	}
	return nil
}

func (m *CompareDeploymentReply) GetNewConfigs() *NewConfigs {
	if m != nil {
		return m.NewConfigs
	}
	return nil
}

func (m *CompareDeploymentReply) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type OldConfigs struct {
	BreakerApiList       []*BreakerAPI `protobuf:"bytes,1,rep,name=breaker_api_list,json=breakerApiList,proto3" json:"breaker_api_list"`
	DynPathList          []*DynPath    `protobuf:"bytes,2,rep,name=dyn_path_list,json=dynPathList,proto3" json:"dyn_path_list"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OldConfigs) Reset()         { *m = OldConfigs{} }
func (m *OldConfigs) String() string { return proto.CompactTextString(m) }
func (*OldConfigs) ProtoMessage()    {}
func (*OldConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{70}
}
func (m *OldConfigs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldConfigs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldConfigs.Merge(m, src)
}
func (m *OldConfigs) XXX_Size() int {
	return m.Size()
}
func (m *OldConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_OldConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_OldConfigs proto.InternalMessageInfo

func (m *OldConfigs) GetBreakerApiList() []*BreakerAPI {
	if m != nil {
		return m.BreakerApiList
	}
	return nil
}

func (m *OldConfigs) GetDynPathList() []*DynPath {
	if m != nil {
		return m.DynPathList
	}
	return nil
}

type NewConfigs struct {
	SnapshotDynPaths     []*SnapshotDynPath    `protobuf:"bytes,1,rep,name=snapshot_dyn_paths,json=snapshotDynPaths,proto3" json:"snapshot_dyn_paths"`
	SnapshotBreakerApis  []*SnapshotBreakerApi `protobuf:"bytes,2,rep,name=snapshot_breaker_apis,json=snapshotBreakerApis,proto3" json:"snapshot_breaker_apis"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NewConfigs) Reset()         { *m = NewConfigs{} }
func (m *NewConfigs) String() string { return proto.CompactTextString(m) }
func (*NewConfigs) ProtoMessage()    {}
func (*NewConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{71}
}
func (m *NewConfigs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewConfigs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewConfigs.Merge(m, src)
}
func (m *NewConfigs) XXX_Size() int {
	return m.Size()
}
func (m *NewConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_NewConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_NewConfigs proto.InternalMessageInfo

func (m *NewConfigs) GetSnapshotDynPaths() []*SnapshotDynPath {
	if m != nil {
		return m.SnapshotDynPaths
	}
	return nil
}

func (m *NewConfigs) GetSnapshotBreakerApis() []*SnapshotBreakerApi {
	if m != nil {
		return m.SnapshotBreakerApis
	}
	return nil
}

type SnapshotDynPath struct {
	DynPath              *DynPath `protobuf:"bytes,1,opt,name=dynPath,proto3" json:"dyn_path"`
	HasChanged           bool     `protobuf:"varint,2,opt,name=has_changed,json=hasChanged,proto3" json:"has_changed"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotDynPath) Reset()         { *m = SnapshotDynPath{} }
func (m *SnapshotDynPath) String() string { return proto.CompactTextString(m) }
func (*SnapshotDynPath) ProtoMessage()    {}
func (*SnapshotDynPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{72}
}
func (m *SnapshotDynPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotDynPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotDynPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotDynPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotDynPath.Merge(m, src)
}
func (m *SnapshotDynPath) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotDynPath) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotDynPath.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotDynPath proto.InternalMessageInfo

func (m *SnapshotDynPath) GetDynPath() *DynPath {
	if m != nil {
		return m.DynPath
	}
	return nil
}

func (m *SnapshotDynPath) GetHasChanged() bool {
	if m != nil {
		return m.HasChanged
	}
	return false
}

type SnapshotBreakerApi struct {
	BreakerApi           *BreakerAPI `protobuf:"bytes,1,opt,name=breaker_api,json=breakerApi,proto3" json:"breaker_api"`
	HasChanged           bool        `protobuf:"varint,2,opt,name=has_changed,json=hasChanged,proto3" json:"has_changed"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SnapshotBreakerApi) Reset()         { *m = SnapshotBreakerApi{} }
func (m *SnapshotBreakerApi) String() string { return proto.CompactTextString(m) }
func (*SnapshotBreakerApi) ProtoMessage()    {}
func (*SnapshotBreakerApi) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{73}
}
func (m *SnapshotBreakerApi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotBreakerApi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotBreakerApi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotBreakerApi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotBreakerApi.Merge(m, src)
}
func (m *SnapshotBreakerApi) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotBreakerApi) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotBreakerApi.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotBreakerApi proto.InternalMessageInfo

func (m *SnapshotBreakerApi) GetBreakerApi() *BreakerAPI {
	if m != nil {
		return m.BreakerApi
	}
	return nil
}

func (m *SnapshotBreakerApi) GetHasChanged() bool {
	if m != nil {
		return m.HasChanged
	}
	return false
}

type DeployDeploymentProfileReply struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Node                 string            `protobuf:"bytes,2,opt,name=node,proto3" json:"node"`
	Gateway              string            `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway"`
	Sponsor              string            `protobuf:"bytes,4,opt,name=sponsor,proto3" json:"sponsor"`
	Confirm              string            `protobuf:"bytes,5,opt,name=confirm,proto3" json:"confirm"`
	Description          string            `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	State                string            `protobuf:"bytes,7,opt,name=state,proto3" json:"state"`
	ActionLog            []*ActionLog      `protobuf:"bytes,8,rep,name=action_log,json=actionLog,proto3" json:"action_log"`
	InstanceStatus       []*InstanceStatus `protobuf:"bytes,9,rep,name=instance_status,json=instanceStatus,proto3" json:"instance_status"`
	Status               DeploymentStatus  `protobuf:"bytes,10,opt,name=status,proto3" json:"status"`
	Type                 string            `protobuf:"bytes,11,opt,name=type,proto3" json:"type"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeployDeploymentProfileReply) Reset()         { *m = DeployDeploymentProfileReply{} }
func (m *DeployDeploymentProfileReply) String() string { return proto.CompactTextString(m) }
func (*DeployDeploymentProfileReply) ProtoMessage()    {}
func (*DeployDeploymentProfileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{74}
}
func (m *DeployDeploymentProfileReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeployDeploymentProfileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeployDeploymentProfileReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeployDeploymentProfileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployDeploymentProfileReply.Merge(m, src)
}
func (m *DeployDeploymentProfileReply) XXX_Size() int {
	return m.Size()
}
func (m *DeployDeploymentProfileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployDeploymentProfileReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeployDeploymentProfileReply proto.InternalMessageInfo

func (m *DeployDeploymentProfileReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeployDeploymentProfileReply) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DeployDeploymentProfileReply) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DeployDeploymentProfileReply) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *DeployDeploymentProfileReply) GetConfirm() string {
	if m != nil {
		return m.Confirm
	}
	return ""
}

func (m *DeployDeploymentProfileReply) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DeployDeploymentProfileReply) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *DeployDeploymentProfileReply) GetActionLog() []*ActionLog {
	if m != nil {
		return m.ActionLog
	}
	return nil
}

func (m *DeployDeploymentProfileReply) GetInstanceStatus() []*InstanceStatus {
	if m != nil {
		return m.InstanceStatus
	}
	return nil
}

func (m *DeployDeploymentProfileReply) GetStatus() DeploymentStatus {
	if m != nil {
		return m.Status
	}
	return DeploymentStatus{}
}

func (m *DeployDeploymentProfileReply) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ActionLog struct {
	Instance             string   `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance"`
	Action               string   `protobuf:"bytes,2,opt,name=action,proto3" json:"action"`
	Level                string   `protobuf:"bytes,3,opt,name=level,proto3" json:"level"`
	CreatedAt            int64    `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	Sponsor              string   `protobuf:"bytes,5,opt,name=sponsor,proto3" json:"sponsor"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionLog) Reset()         { *m = ActionLog{} }
func (m *ActionLog) String() string { return proto.CompactTextString(m) }
func (*ActionLog) ProtoMessage()    {}
func (*ActionLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{75}
}
func (m *ActionLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionLog.Merge(m, src)
}
func (m *ActionLog) XXX_Size() int {
	return m.Size()
}
func (m *ActionLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionLog.DiscardUnknown(m)
}

var xxx_messageInfo_ActionLog proto.InternalMessageInfo

func (m *ActionLog) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *ActionLog) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ActionLog) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *ActionLog) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ActionLog) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

type InstanceStatus struct {
	Instance             string   `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr"`
	State                string   `protobuf:"bytes,3,opt,name=state,proto3" json:"state"`
	CreatedAt            int64    `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	Digest               string   `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceStatus) Reset()         { *m = InstanceStatus{} }
func (m *InstanceStatus) String() string { return proto.CompactTextString(m) }
func (*InstanceStatus) ProtoMessage()    {}
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{76}
}
func (m *InstanceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceStatus.Merge(m, src)
}
func (m *InstanceStatus) XXX_Size() int {
	return m.Size()
}
func (m *InstanceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceStatus proto.InternalMessageInfo

func (m *InstanceStatus) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *InstanceStatus) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *InstanceStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *InstanceStatus) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *InstanceStatus) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type ListDeploymentReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	PageNum              int64    `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty" form:"page_num" default:"1"`
	Size_                int64    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty" form:"size" validate:"min=1,required" default:"100"`
	Stime                int64    `protobuf:"varint,5,opt,name=stime,proto3" json:"stime,omitempty" form:"stime"`
	Etime                int64    `protobuf:"varint,6,opt,name=etime,proto3" json:"etime,omitempty" form:"etime"`
	DeploymentType       string   `protobuf:"bytes,7,opt,name=deployment_type,json=deploymentType,proto3" json:"deployment_type,omitempty" form:"deployment_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDeploymentReq) Reset()         { *m = ListDeploymentReq{} }
func (m *ListDeploymentReq) String() string { return proto.CompactTextString(m) }
func (*ListDeploymentReq) ProtoMessage()    {}
func (*ListDeploymentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{77}
}
func (m *ListDeploymentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDeploymentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDeploymentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDeploymentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeploymentReq.Merge(m, src)
}
func (m *ListDeploymentReq) XXX_Size() int {
	return m.Size()
}
func (m *ListDeploymentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeploymentReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeploymentReq proto.InternalMessageInfo

func (m *ListDeploymentReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ListDeploymentReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ListDeploymentReq) GetPageNum() int64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *ListDeploymentReq) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ListDeploymentReq) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *ListDeploymentReq) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *ListDeploymentReq) GetDeploymentType() string {
	if m != nil {
		return m.DeploymentType
	}
	return ""
}

type ListDeploymentReply struct {
	Node                 string            `protobuf:"bytes,1,opt,name=node,proto3" json:"node"`
	Gateway              string            `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway"`
	Lists                []*DeploymentMeta `protobuf:"bytes,3,rep,name=lists,proto3" json:"lists"`
	Pages                Page              `protobuf:"bytes,4,opt,name=pages,proto3" json:"page"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListDeploymentReply) Reset()         { *m = ListDeploymentReply{} }
func (m *ListDeploymentReply) String() string { return proto.CompactTextString(m) }
func (*ListDeploymentReply) ProtoMessage()    {}
func (*ListDeploymentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{78}
}
func (m *ListDeploymentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDeploymentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDeploymentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDeploymentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeploymentReply.Merge(m, src)
}
func (m *ListDeploymentReply) XXX_Size() int {
	return m.Size()
}
func (m *ListDeploymentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeploymentReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeploymentReply proto.InternalMessageInfo

func (m *ListDeploymentReply) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ListDeploymentReply) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *ListDeploymentReply) GetLists() []*DeploymentMeta {
	if m != nil {
		return m.Lists
	}
	return nil
}

func (m *ListDeploymentReply) GetPages() Page {
	if m != nil {
		return m.Pages
	}
	return Page{}
}

type DeploymentMeta struct {
	DeploymentId         string           `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id"`
	SnapshotUuid         string           `protobuf:"bytes,2,opt,name=snapshot_uuid,json=snapshotUuid,proto3" json:"snapshot_uuid"`
	Description          string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	Sponsor              string           `protobuf:"bytes,4,opt,name=sponsor,proto3" json:"sponsor"`
	CreatedAt            int64            `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            int64            `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	State                string           `protobuf:"bytes,7,opt,name=state,proto3" json:"state"`
	RollbackUuid         string           `protobuf:"bytes,8,opt,name=rollback_uuid,json=rollbackUuid,proto3" json:"rollback_uuid"`
	Node                 string           `protobuf:"bytes,9,opt,name=node,proto3" json:"node"`
	Gateway              string           `protobuf:"bytes,10,opt,name=gateway,proto3" json:"gateway"`
	Status               DeploymentStatus `protobuf:"bytes,11,opt,name=status,proto3" json:"status"`
	DeploymentType       string           `protobuf:"bytes,12,opt,name=deployment_type,json=deploymentType,proto3" json:"deployment_type"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeploymentMeta) Reset()         { *m = DeploymentMeta{} }
func (m *DeploymentMeta) String() string { return proto.CompactTextString(m) }
func (*DeploymentMeta) ProtoMessage()    {}
func (*DeploymentMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{79}
}
func (m *DeploymentMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentMeta.Merge(m, src)
}
func (m *DeploymentMeta) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentMeta.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentMeta proto.InternalMessageInfo

func (m *DeploymentMeta) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *DeploymentMeta) GetSnapshotUuid() string {
	if m != nil {
		return m.SnapshotUuid
	}
	return ""
}

func (m *DeploymentMeta) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DeploymentMeta) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *DeploymentMeta) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *DeploymentMeta) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *DeploymentMeta) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *DeploymentMeta) GetRollbackUuid() string {
	if m != nil {
		return m.RollbackUuid
	}
	return ""
}

func (m *DeploymentMeta) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DeploymentMeta) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DeploymentMeta) GetStatus() DeploymentStatus {
	if m != nil {
		return m.Status
	}
	return DeploymentStatus{}
}

func (m *DeploymentMeta) GetDeploymentType() string {
	if m != nil {
		return m.DeploymentType
	}
	return ""
}

type DeploymentStatus struct {
	Rollbacked           bool     `protobuf:"varint,1,opt,name=rollbacked,proto3" json:"rollbacked"`
	Persisted            bool     `protobuf:"varint,2,opt,name=persisted,proto3" json:"persisted"`
	Finished             bool     `protobuf:"varint,3,opt,name=finished,proto3" json:"finished"`
	Initialized          bool     `protobuf:"varint,4,opt,name=initialized,proto3" json:"initialized"`
	Deployed             bool     `protobuf:"varint,5,opt,name=deployed,proto3" json:"deployed"`
	SingleDeployed       bool     `protobuf:"varint,6,opt,name=single_deployed,json=singleDeployed,proto3" json:"single_deployed"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentStatus) Reset()         { *m = DeploymentStatus{} }
func (m *DeploymentStatus) String() string { return proto.CompactTextString(m) }
func (*DeploymentStatus) ProtoMessage()    {}
func (*DeploymentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{80}
}
func (m *DeploymentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentStatus.Merge(m, src)
}
func (m *DeploymentStatus) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentStatus proto.InternalMessageInfo

func (m *DeploymentStatus) GetRollbacked() bool {
	if m != nil {
		return m.Rollbacked
	}
	return false
}

func (m *DeploymentStatus) GetPersisted() bool {
	if m != nil {
		return m.Persisted
	}
	return false
}

func (m *DeploymentStatus) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func (m *DeploymentStatus) GetInitialized() bool {
	if m != nil {
		return m.Initialized
	}
	return false
}

func (m *DeploymentStatus) GetDeployed() bool {
	if m != nil {
		return m.Deployed
	}
	return false
}

func (m *DeploymentStatus) GetSingleDeployed() bool {
	if m != nil {
		return m.SingleDeployed
	}
	return false
}

type DeploymentConfirm struct {
	Sponsor              string   `protobuf:"bytes,1,opt,name=sponsor,proto3" json:"sponsor"`
	ConfirmedAt          int64    `protobuf:"varint,2,opt,name=confirmed_at,json=confirmedAt,proto3" json:"confirmed_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeploymentConfirm) Reset()         { *m = DeploymentConfirm{} }
func (m *DeploymentConfirm) String() string { return proto.CompactTextString(m) }
func (*DeploymentConfirm) ProtoMessage()    {}
func (*DeploymentConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{81}
}
func (m *DeploymentConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentConfirm.Merge(m, src)
}
func (m *DeploymentConfirm) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentConfirm proto.InternalMessageInfo

func (m *DeploymentConfirm) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *DeploymentConfirm) GetConfirmedAt() int64 {
	if m != nil {
		return m.ConfirmedAt
	}
	return 0
}

type AddActionLogReq struct {
	Node                 string    `protobuf:"bytes,1,opt,name=node,proto3" json:"node"`
	Gateway              string    `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway"`
	DeploymentId         string    `protobuf:"bytes,3,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id"`
	ActionLog            ActionLog `protobuf:"bytes,4,opt,name=action_log,json=actionLog,proto3" json:"action_log"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AddActionLogReq) Reset()         { *m = AddActionLogReq{} }
func (m *AddActionLogReq) String() string { return proto.CompactTextString(m) }
func (*AddActionLogReq) ProtoMessage()    {}
func (*AddActionLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{82}
}
func (m *AddActionLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddActionLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddActionLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddActionLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddActionLogReq.Merge(m, src)
}
func (m *AddActionLogReq) XXX_Size() int {
	return m.Size()
}
func (m *AddActionLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddActionLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddActionLogReq proto.InternalMessageInfo

func (m *AddActionLogReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *AddActionLogReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *AddActionLogReq) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *AddActionLogReq) GetActionLog() ActionLog {
	if m != nil {
		return m.ActionLog
	}
	return ActionLog{}
}

type SnapshotRunPlan struct {
	SetDynReq            []*SetDynPathReq       `protobuf:"bytes,1,rep,name=set_dyn_req,json=setDynReq,proto3" json:"set_dyn_req"`
	SetBreakerReq        []*SetBreakerAPIReq    `protobuf:"bytes,2,rep,name=set_breaker_req,json=setBreakerReq,proto3" json:"set_breaker_req"`
	DelDynReq            []*DeleteDynPathReq    `protobuf:"bytes,3,rep,name=del_dyn_req,json=delDynReq,proto3" json:"del_dyn_req"`
	DelBreakerReq        []*DeleteBreakerAPIReq `protobuf:"bytes,4,rep,name=del_breaker_req,json=delBreakerReq,proto3" json:"del_breaker_req"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SnapshotRunPlan) Reset()         { *m = SnapshotRunPlan{} }
func (m *SnapshotRunPlan) String() string { return proto.CompactTextString(m) }
func (*SnapshotRunPlan) ProtoMessage()    {}
func (*SnapshotRunPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{83}
}
func (m *SnapshotRunPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotRunPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotRunPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotRunPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRunPlan.Merge(m, src)
}
func (m *SnapshotRunPlan) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotRunPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRunPlan.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRunPlan proto.InternalMessageInfo

func (m *SnapshotRunPlan) GetSetDynReq() []*SetDynPathReq {
	if m != nil {
		return m.SetDynReq
	}
	return nil
}

func (m *SnapshotRunPlan) GetSetBreakerReq() []*SetBreakerAPIReq {
	if m != nil {
		return m.SetBreakerReq
	}
	return nil
}

func (m *SnapshotRunPlan) GetDelDynReq() []*DeleteDynPathReq {
	if m != nil {
		return m.DelDynReq
	}
	return nil
}

func (m *SnapshotRunPlan) GetDelBreakerReq() []*DeleteBreakerAPIReq {
	if m != nil {
		return m.DelBreakerReq
	}
	return nil
}

type ListLimiterReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListLimiterReq) Reset()         { *m = ListLimiterReq{} }
func (m *ListLimiterReq) String() string { return proto.CompactTextString(m) }
func (*ListLimiterReq) ProtoMessage()    {}
func (*ListLimiterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{84}
}
func (m *ListLimiterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLimiterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLimiterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLimiterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLimiterReq.Merge(m, src)
}
func (m *ListLimiterReq) XXX_Size() int {
	return m.Size()
}
func (m *ListLimiterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLimiterReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListLimiterReq proto.InternalMessageInfo

func (m *ListLimiterReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ListLimiterReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type Limiter struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Api                  string   `protobuf:"bytes,2,opt,name=api,proto3" json:"api"`
	Capacity             int64    `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity"`
	RefreshInterval      int64    `protobuf:"varint,4,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval"`
	Algorithm            int64    `protobuf:"varint,5,opt,name=algorithm,proto3" json:"algorithm"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Limiter) Reset()         { *m = Limiter{} }
func (m *Limiter) String() string { return proto.CompactTextString(m) }
func (*Limiter) ProtoMessage()    {}
func (*Limiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{85}
}
func (m *Limiter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Limiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Limiter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Limiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Limiter.Merge(m, src)
}
func (m *Limiter) XXX_Size() int {
	return m.Size()
}
func (m *Limiter) XXX_DiscardUnknown() {
	xxx_messageInfo_Limiter.DiscardUnknown(m)
}

var xxx_messageInfo_Limiter proto.InternalMessageInfo

func (m *Limiter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Limiter) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *Limiter) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Limiter) GetRefreshInterval() int64 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *Limiter) GetAlgorithm() int64 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

type LimiterListItem struct {
	Api                  string         `protobuf:"bytes,1,opt,name=api,proto3" json:"api"`
	Limiters             []*LimiterMeta `protobuf:"bytes,2,rep,name=limiters,proto3" json:"limiters"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LimiterListItem) Reset()         { *m = LimiterListItem{} }
func (m *LimiterListItem) String() string { return proto.CompactTextString(m) }
func (*LimiterListItem) ProtoMessage()    {}
func (*LimiterListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{86}
}
func (m *LimiterListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimiterListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimiterListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimiterListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimiterListItem.Merge(m, src)
}
func (m *LimiterListItem) XXX_Size() int {
	return m.Size()
}
func (m *LimiterListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_LimiterListItem.DiscardUnknown(m)
}

var xxx_messageInfo_LimiterListItem proto.InternalMessageInfo

func (m *LimiterListItem) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *LimiterListItem) GetLimiters() []*LimiterMeta {
	if m != nil {
		return m.Limiters
	}
	return nil
}

type LimiterMeta struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	TotalRule            TotalRule   `protobuf:"bytes,2,opt,name=total_rule,json=totalRule,proto3" json:"total_rule"`
	RefreshInterval      int64       `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval"`
	Algorithm            int64       `protobuf:"varint,4,opt,name=algorithm,proto3" json:"algorithm"`
	Rule                 string      `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule"`
	Enable               bool        `protobuf:"varint,6,opt,name=enable,proto3" json:"enable"`
	Zone                 string      `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone"`
	RefererRule          RefererRule `protobuf:"bytes,8,opt,name=referer_rule,json=refererRule,proto3" json:"referer_rule"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LimiterMeta) Reset()         { *m = LimiterMeta{} }
func (m *LimiterMeta) String() string { return proto.CompactTextString(m) }
func (*LimiterMeta) ProtoMessage()    {}
func (*LimiterMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{87}
}
func (m *LimiterMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimiterMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimiterMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimiterMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimiterMeta.Merge(m, src)
}
func (m *LimiterMeta) XXX_Size() int {
	return m.Size()
}
func (m *LimiterMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_LimiterMeta.DiscardUnknown(m)
}

var xxx_messageInfo_LimiterMeta proto.InternalMessageInfo

func (m *LimiterMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LimiterMeta) GetTotalRule() TotalRule {
	if m != nil {
		return m.TotalRule
	}
	return TotalRule{}
}

func (m *LimiterMeta) GetRefreshInterval() int64 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *LimiterMeta) GetAlgorithm() int64 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

func (m *LimiterMeta) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *LimiterMeta) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *LimiterMeta) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *LimiterMeta) GetRefererRule() RefererRule {
	if m != nil {
		return m.RefererRule
	}
	return RefererRule{}
}

type TotalRule struct {
	Capacity             int64    `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TotalRule) Reset()         { *m = TotalRule{} }
func (m *TotalRule) String() string { return proto.CompactTextString(m) }
func (*TotalRule) ProtoMessage()    {}
func (*TotalRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{88}
}
func (m *TotalRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalRule.Merge(m, src)
}
func (m *TotalRule) XXX_Size() int {
	return m.Size()
}
func (m *TotalRule) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalRule.DiscardUnknown(m)
}

var xxx_messageInfo_TotalRule proto.InternalMessageInfo

func (m *TotalRule) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

type RefererRule struct {
	Capacity             int64    `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefererRule) Reset()         { *m = RefererRule{} }
func (m *RefererRule) String() string { return proto.CompactTextString(m) }
func (*RefererRule) ProtoMessage()    {}
func (*RefererRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{89}
}
func (m *RefererRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefererRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefererRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefererRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefererRule.Merge(m, src)
}
func (m *RefererRule) XXX_Size() int {
	return m.Size()
}
func (m *RefererRule) XXX_DiscardUnknown() {
	xxx_messageInfo_RefererRule.DiscardUnknown(m)
}

var xxx_messageInfo_RefererRule proto.InternalMessageInfo

func (m *RefererRule) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

type ListLimiterReply struct {
	List                 []*LimiterListItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListLimiterReply) Reset()         { *m = ListLimiterReply{} }
func (m *ListLimiterReply) String() string { return proto.CompactTextString(m) }
func (*ListLimiterReply) ProtoMessage()    {}
func (*ListLimiterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{90}
}
func (m *ListLimiterReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLimiterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLimiterReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLimiterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLimiterReply.Merge(m, src)
}
func (m *ListLimiterReply) XXX_Size() int {
	return m.Size()
}
func (m *ListLimiterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLimiterReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListLimiterReply proto.InternalMessageInfo

func (m *ListLimiterReply) GetList() []*LimiterListItem {
	if m != nil {
		return m.List
	}
	return nil
}

type AddLimiterReq struct {
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty" form:"api" validate:"required"`
	Capacity             int64    `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty" form:"capacity" validate:"required"`
	RefreshInterval      int64    `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty" form:"refresh_interval" validate:"required"`
	Algorithm            int64    `protobuf:"varint,4,opt,name=algorithm,proto3" json:"algorithm,omitempty" form:"algorithm"`
	Zone                 string   `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty" form:"zone" validate:"required"`
	Rule                 string   `protobuf:"bytes,6,opt,name=rule,proto3" json:"rule,omitempty" form:"rule" default:"total"`
	Enable               bool     `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty" form:"enable"`
	Node                 string   `protobuf:"bytes,8,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,9,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Username             string   `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddLimiterReq) Reset()         { *m = AddLimiterReq{} }
func (m *AddLimiterReq) String() string { return proto.CompactTextString(m) }
func (*AddLimiterReq) ProtoMessage()    {}
func (*AddLimiterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{91}
}
func (m *AddLimiterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLimiterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLimiterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLimiterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLimiterReq.Merge(m, src)
}
func (m *AddLimiterReq) XXX_Size() int {
	return m.Size()
}
func (m *AddLimiterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLimiterReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddLimiterReq proto.InternalMessageInfo

func (m *AddLimiterReq) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *AddLimiterReq) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *AddLimiterReq) GetRefreshInterval() int64 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *AddLimiterReq) GetAlgorithm() int64 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

func (m *AddLimiterReq) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *AddLimiterReq) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *AddLimiterReq) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *AddLimiterReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *AddLimiterReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *AddLimiterReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type SetLimiterReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	Capacity             int64    `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty" form:"capacity" validate:"required"`
	RefreshInterval      int64    `protobuf:"varint,3,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty" form:"refresh_interval" validate:"required"`
	Algorithm            int64    `protobuf:"varint,4,opt,name=algorithm,proto3" json:"algorithm,omitempty" form:"algorithm"`
	Rule                 string   `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule,omitempty" form:"rule" default:"total"`
	Node                 string   `protobuf:"bytes,6,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,7,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Username             string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetLimiterReq) Reset()         { *m = SetLimiterReq{} }
func (m *SetLimiterReq) String() string { return proto.CompactTextString(m) }
func (*SetLimiterReq) ProtoMessage()    {}
func (*SetLimiterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{92}
}
func (m *SetLimiterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetLimiterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetLimiterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetLimiterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLimiterReq.Merge(m, src)
}
func (m *SetLimiterReq) XXX_Size() int {
	return m.Size()
}
func (m *SetLimiterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLimiterReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetLimiterReq proto.InternalMessageInfo

func (m *SetLimiterReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetLimiterReq) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *SetLimiterReq) GetRefreshInterval() int64 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *SetLimiterReq) GetAlgorithm() int64 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

func (m *SetLimiterReq) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *SetLimiterReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *SetLimiterReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *SetLimiterReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type DeleteLimiterReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteLimiterReq) Reset()         { *m = DeleteLimiterReq{} }
func (m *DeleteLimiterReq) String() string { return proto.CompactTextString(m) }
func (*DeleteLimiterReq) ProtoMessage()    {}
func (*DeleteLimiterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{93}
}
func (m *DeleteLimiterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteLimiterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteLimiterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteLimiterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLimiterReq.Merge(m, src)
}
func (m *DeleteLimiterReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteLimiterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLimiterReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLimiterReq proto.InternalMessageInfo

func (m *DeleteLimiterReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteLimiterReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DeleteLimiterReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DeleteLimiterReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type EnableLimiterReq struct {
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty" form:"api" validate:"required"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	Disable              bool     `protobuf:"varint,4,opt,name=disable,proto3" json:"disable,omitempty" form:"disable"`
	Username             string   `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty" form:"-"`
	Rule                 string   `protobuf:"bytes,6,opt,name=rule,proto3" json:"rule,omitempty" form:"rule" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableLimiterReq) Reset()         { *m = EnableLimiterReq{} }
func (m *EnableLimiterReq) String() string { return proto.CompactTextString(m) }
func (*EnableLimiterReq) ProtoMessage()    {}
func (*EnableLimiterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{94}
}
func (m *EnableLimiterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableLimiterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableLimiterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableLimiterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableLimiterReq.Merge(m, src)
}
func (m *EnableLimiterReq) XXX_Size() int {
	return m.Size()
}
func (m *EnableLimiterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableLimiterReq.DiscardUnknown(m)
}

var xxx_messageInfo_EnableLimiterReq proto.InternalMessageInfo

func (m *EnableLimiterReq) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *EnableLimiterReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *EnableLimiterReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *EnableLimiterReq) GetDisable() bool {
	if m != nil {
		return m.Disable
	}
	return false
}

func (m *EnableLimiterReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EnableLimiterReq) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

type QuotaMethod struct {
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api"`
	Rule                 string   `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule"`
	Node                 string   `protobuf:"bytes,3,opt,name=node,proto3" json:"node"`
	Gateway              string   `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway"`
	Enable               bool     `protobuf:"varint,5,opt,name=enable,proto3" json:"enable"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuotaMethod) Reset()         { *m = QuotaMethod{} }
func (m *QuotaMethod) String() string { return proto.CompactTextString(m) }
func (*QuotaMethod) ProtoMessage()    {}
func (*QuotaMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{95}
}
func (m *QuotaMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuotaMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuotaMethod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuotaMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaMethod.Merge(m, src)
}
func (m *QuotaMethod) XXX_Size() int {
	return m.Size()
}
func (m *QuotaMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaMethod.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaMethod proto.InternalMessageInfo

func (m *QuotaMethod) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *QuotaMethod) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *QuotaMethod) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *QuotaMethod) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *QuotaMethod) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type PluginReq struct {
	PluginName           string   `protobuf:"bytes,1,opt,name=plugin_name,json=pluginName,proto3" json:"plugin_name,omitempty" form:"plugin_name" validate:"required"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty" form:"field" validate:"required"`
	Plugin               *Plugin  `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty" form:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginReq) Reset()         { *m = PluginReq{} }
func (m *PluginReq) String() string { return proto.CompactTextString(m) }
func (*PluginReq) ProtoMessage()    {}
func (*PluginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{96}
}
func (m *PluginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PluginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PluginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginReq.Merge(m, src)
}
func (m *PluginReq) XXX_Size() int {
	return m.Size()
}
func (m *PluginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginReq.DiscardUnknown(m)
}

var xxx_messageInfo_PluginReq proto.InternalMessageInfo

func (m *PluginReq) GetPluginName() string {
	if m != nil {
		return m.PluginName
	}
	return ""
}

func (m *PluginReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *PluginReq) GetPlugin() *Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type Plugin struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Plugin) Reset()         { *m = Plugin{} }
func (m *Plugin) String() string { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()    {}
func (*Plugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{97}
}
func (m *Plugin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plugin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plugin.Merge(m, src)
}
func (m *Plugin) XXX_Size() int {
	return m.Size()
}
func (m *Plugin) XXX_DiscardUnknown() {
	xxx_messageInfo_Plugin.DiscardUnknown(m)
}

var xxx_messageInfo_Plugin proto.InternalMessageInfo

func (m *Plugin) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ZonePromptAPIReq struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty" form:"node" validate:"required"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty" form:"gateway" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZonePromptAPIReq) Reset()         { *m = ZonePromptAPIReq{} }
func (m *ZonePromptAPIReq) String() string { return proto.CompactTextString(m) }
func (*ZonePromptAPIReq) ProtoMessage()    {}
func (*ZonePromptAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{98}
}
func (m *ZonePromptAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZonePromptAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZonePromptAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZonePromptAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZonePromptAPIReq.Merge(m, src)
}
func (m *ZonePromptAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *ZonePromptAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ZonePromptAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_ZonePromptAPIReq proto.InternalMessageInfo

func (m *ZonePromptAPIReq) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ZonePromptAPIReq) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type ZonePromptAPIReply struct {
	Zones                []string `protobuf:"bytes,1,rep,name=zones,proto3" json:"zones"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZonePromptAPIReply) Reset()         { *m = ZonePromptAPIReply{} }
func (m *ZonePromptAPIReply) String() string { return proto.CompactTextString(m) }
func (*ZonePromptAPIReply) ProtoMessage()    {}
func (*ZonePromptAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{99}
}
func (m *ZonePromptAPIReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZonePromptAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZonePromptAPIReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZonePromptAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZonePromptAPIReply.Merge(m, src)
}
func (m *ZonePromptAPIReply) XXX_Size() int {
	return m.Size()
}
func (m *ZonePromptAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ZonePromptAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_ZonePromptAPIReply proto.InternalMessageInfo

func (m *ZonePromptAPIReply) GetZones() []string {
	if m != nil {
		return m.Zones
	}
	return nil
}

type PluginListReq struct {
	PluginName           string   `protobuf:"bytes,1,opt,name=plugin_name,json=pluginName,proto3" json:"plugin_name,omitempty" form:"plugin_name" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginListReq) Reset()         { *m = PluginListReq{} }
func (m *PluginListReq) String() string { return proto.CompactTextString(m) }
func (*PluginListReq) ProtoMessage()    {}
func (*PluginListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{100}
}
func (m *PluginListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PluginListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PluginListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginListReq.Merge(m, src)
}
func (m *PluginListReq) XXX_Size() int {
	return m.Size()
}
func (m *PluginListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginListReq.DiscardUnknown(m)
}

var xxx_messageInfo_PluginListReq proto.InternalMessageInfo

func (m *PluginListReq) GetPluginName() string {
	if m != nil {
		return m.PluginName
	}
	return ""
}

type PluginListReply struct {
	List                 []*PluginListItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PluginListReply) Reset()         { *m = PluginListReply{} }
func (m *PluginListReply) String() string { return proto.CompactTextString(m) }
func (*PluginListReply) ProtoMessage()    {}
func (*PluginListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{101}
}
func (m *PluginListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PluginListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PluginListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginListReply.Merge(m, src)
}
func (m *PluginListReply) XXX_Size() int {
	return m.Size()
}
func (m *PluginListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginListReply.DiscardUnknown(m)
}

var xxx_messageInfo_PluginListReply proto.InternalMessageInfo

func (m *PluginListReply) GetList() []*PluginListItem {
	if m != nil {
		return m.List
	}
	return nil
}

type PluginListItem struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Plugin               *Plugin  `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PluginListItem) Reset()         { *m = PluginListItem{} }
func (m *PluginListItem) String() string { return proto.CompactTextString(m) }
func (*PluginListItem) ProtoMessage()    {}
func (*PluginListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{102}
}
func (m *PluginListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PluginListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PluginListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginListItem.Merge(m, src)
}
func (m *PluginListItem) XXX_Size() int {
	return m.Size()
}
func (m *PluginListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginListItem.DiscardUnknown(m)
}

var xxx_messageInfo_PluginListItem proto.InternalMessageInfo

func (m *PluginListItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PluginListItem) GetPlugin() *Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type GRPCAppPackagePromptAPIReq struct {
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty" form:"endpoint"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GRPCAppPackagePromptAPIReq) Reset()         { *m = GRPCAppPackagePromptAPIReq{} }
func (m *GRPCAppPackagePromptAPIReq) String() string { return proto.CompactTextString(m) }
func (*GRPCAppPackagePromptAPIReq) ProtoMessage()    {}
func (*GRPCAppPackagePromptAPIReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{103}
}
func (m *GRPCAppPackagePromptAPIReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GRPCAppPackagePromptAPIReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GRPCAppPackagePromptAPIReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GRPCAppPackagePromptAPIReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCAppPackagePromptAPIReq.Merge(m, src)
}
func (m *GRPCAppPackagePromptAPIReq) XXX_Size() int {
	return m.Size()
}
func (m *GRPCAppPackagePromptAPIReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCAppPackagePromptAPIReq.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCAppPackagePromptAPIReq proto.InternalMessageInfo

func (m *GRPCAppPackagePromptAPIReq) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

type GRPCAppPackagePromptAPIReply struct {
	Package              map[string]*AppPackageService `protobuf:"bytes,1,rep,name=package,proto3" json:"package" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GRPCAppPackagePromptAPIReply) Reset()         { *m = GRPCAppPackagePromptAPIReply{} }
func (m *GRPCAppPackagePromptAPIReply) String() string { return proto.CompactTextString(m) }
func (*GRPCAppPackagePromptAPIReply) ProtoMessage()    {}
func (*GRPCAppPackagePromptAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{104}
}
func (m *GRPCAppPackagePromptAPIReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GRPCAppPackagePromptAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GRPCAppPackagePromptAPIReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GRPCAppPackagePromptAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCAppPackagePromptAPIReply.Merge(m, src)
}
func (m *GRPCAppPackagePromptAPIReply) XXX_Size() int {
	return m.Size()
}
func (m *GRPCAppPackagePromptAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCAppPackagePromptAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCAppPackagePromptAPIReply proto.InternalMessageInfo

func (m *GRPCAppPackagePromptAPIReply) GetPackage() map[string]*AppPackageService {
	if m != nil {
		return m.Package
	}
	return nil
}

type AppPackageService struct {
	Services             []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppPackageService) Reset()         { *m = AppPackageService{} }
func (m *AppPackageService) String() string { return proto.CompactTextString(m) }
func (*AppPackageService) ProtoMessage()    {}
func (*AppPackageService) Descriptor() ([]byte, []int) {
	return fileDescriptor_5303e11516ae7c5a, []int{105}
}
func (m *AppPackageService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppPackageService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppPackageService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppPackageService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppPackageService.Merge(m, src)
}
func (m *AppPackageService) XXX_Size() int {
	return m.Size()
}
func (m *AppPackageService) XXX_DiscardUnknown() {
	xxx_messageInfo_AppPackageService.DiscardUnknown(m)
}

var xxx_messageInfo_AppPackageService proto.InternalMessageInfo

func (m *AppPackageService) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "appgw.management.v1.Project")
	proto.RegisterType((*AuthZReq)(nil), "appgw.management.v1.AuthZReq")
	proto.RegisterType((*Gateway)(nil), "appgw.management.v1.Gateway")
	proto.RegisterType((*ConfigMeta)(nil), "appgw.management.v1.configMeta")
	proto.RegisterType((*GatewayReply)(nil), "appgw.management.v1.GatewayReply")
	proto.RegisterType((*AuthZReply)(nil), "appgw.management.v1.AuthZReply")
	proto.RegisterType((*BreakerByNull)(nil), "appgw.management.v1.BreakerByNull")
	proto.RegisterType((*BreakerByEcode)(nil), "appgw.management.v1.BreakerByEcode")
	proto.RegisterType((*BreakerByPlaceholder)(nil), "appgw.management.v1.BreakerByPlaceholder")
	proto.RegisterType((*BreakerByRetryBackup)(nil), "appgw.management.v1.BreakerByRetryBackup")
	proto.RegisterType((*BreakerByDirectlyBackup)(nil), "appgw.management.v1.BreakerByDirectlyBackup")
	proto.RegisterType((*BreakerAction)(nil), "appgw.management.v1.BreakerAction")
	proto.RegisterType((*FlowCopy)(nil), "appgw.management.v1.FlowCopy")
	proto.RegisterType((*CopyByNull)(nil), "appgw.management.v1.CopyByNull")
	proto.RegisterType((*CopyByRatio)(nil), "appgw.management.v1.CopyByRatio")
	proto.RegisterType((*CopyByQPS)(nil), "appgw.management.v1.CopyByQPS")
	proto.RegisterType((*BreakerAPI)(nil), "appgw.management.v1.BreakerAPI")
	proto.RegisterType((*ListBreakerAPIReq)(nil), "appgw.management.v1.ListBreakerAPIReq")
	proto.RegisterType((*ListBreakerAPIReply)(nil), "appgw.management.v1.ListBreakerAPIReply")
	proto.RegisterType((*SetBreakerAPIReq)(nil), "appgw.management.v1.SetBreakerAPIReq")
	proto.RegisterType((*EnableBreakerAPIReq)(nil), "appgw.management.v1.EnableBreakerAPIReq")
	proto.RegisterType((*DeleteBreakerAPIReq)(nil), "appgw.management.v1.DeleteBreakerAPIReq")
	proto.RegisterType((*SetGatewayReq)(nil), "appgw.management.v1.SetGatewayReq")
	proto.RegisterType((*ListGatewayReq)(nil), "appgw.management.v1.ListGatewayReq")
	proto.RegisterType((*DeleteGatewayReq)(nil), "appgw.management.v1.DeleteGatewayReq")
	proto.RegisterType((*DynPath)(nil), "appgw.management.v1.dynPath")
	proto.RegisterMapType((map[string]string)(nil), "appgw.management.v1.dynPath.AnnotationEntry")
	proto.RegisterType((*ListDynPathReq)(nil), "appgw.management.v1.ListDynPathReq")
	proto.RegisterType((*ListDynPathReply)(nil), "appgw.management.v1.ListDynPathReply")
	proto.RegisterType((*ClientInfo)(nil), "appgw.management.v1.clientInfo")
	proto.RegisterType((*SetDynPathReq)(nil), "appgw.management.v1.SetDynPathReq")
	proto.RegisterMapType((map[string]string)(nil), "appgw.management.v1.SetDynPathReq.AnnotationEntry")
	proto.RegisterType((*DeleteDynPathReq)(nil), "appgw.management.v1.DeleteDynPathReq")
	proto.RegisterType((*UpdateALLGatewayConfigReq)(nil), "appgw.management.v1.UpdateALLGatewayConfigReq")
	proto.RegisterType((*EnableDynPathReq)(nil), "appgw.management.v1.EnableDynPathReq")
	proto.RegisterType((*Sponsor)(nil), "appgw.management.v1.sponsor")
	proto.RegisterType((*Entity)(nil), "appgw.management.v1.entity")
	proto.RegisterType((*ExtraContent)(nil), "appgw.management.v1.extra_content")
	proto.RegisterType((*LogItem)(nil), "appgw.management.v1.log_item")
	proto.RegisterType((*Page)(nil), "appgw.management.v1.page")
	proto.RegisterType((*ListLogReq)(nil), "appgw.management.v1.ListLogReq")
	proto.RegisterType((*ListLogReply)(nil), "appgw.management.v1.ListLogReply")
	proto.RegisterType((*WorkerNode)(nil), "appgw.management.v1.worker_node")
	proto.RegisterMapType((map[string]string)(nil), "appgw.management.v1.worker_node.MetadataEntry")
	proto.RegisterType((*WorkerNodes)(nil), "appgw.management.v1.worker_nodes")
	proto.RegisterType((*GatewayProfileReq)(nil), "appgw.management.v1.GatewayProfileReq")
	proto.RegisterType((*GatewayProfileReply)(nil), "appgw.management.v1.GatewayProfileReply")
	proto.RegisterType((*ExecuteTaskReq)(nil), "appgw.management.v1.ExecuteTaskReq")
	proto.RegisterType((*ExecuteTaskReply)(nil), "appgw.management.v1.ExecuteTaskReply")
	proto.RegisterType((*GatewayProxyReq)(nil), "appgw.management.v1.GatewayProxyReq")
	proto.RegisterType((*GatewayProxyReply)(nil), "appgw.management.v1.GatewayProxyReply")
	proto.RegisterMapType((map[string]Header)(nil), "appgw.management.v1.GatewayProxyReply.HeaderEntry")
	proto.RegisterType((*Header)(nil), "appgw.management.v1.header")
	proto.RegisterType((*AppPromptAPIReq)(nil), "appgw.management.v1.AppPromptAPIReq")
	proto.RegisterType((*AppPromptAPIReply)(nil), "appgw.management.v1.AppPromptAPIReply")
	proto.RegisterType((*TreeNode)(nil), "appgw.management.v1.TreeNode")
	proto.RegisterType((*ConfigPromptAPIReq)(nil), "appgw.management.v1.ConfigPromptAPIReq")
	proto.RegisterType((*ConfigPromptAPIReply)(nil), "appgw.management.v1.ConfigPromptAPIReply")
	proto.RegisterType((*AppConfigItem)(nil), "appgw.management.v1.AppConfigItem")
	proto.RegisterType((*AppPathPromptAPIReq)(nil), "appgw.management.v1.AppPathPromptAPIReq")
	proto.RegisterType((*AppPathPromptAPIReply)(nil), "appgw.management.v1.AppPathPromptAPIReply")
	proto.RegisterType((*InitGatewayConfigsReq)(nil), "appgw.management.v1.InitGatewayConfigsReq")
	proto.RegisterType((*SnapshotActionReq)(nil), "appgw.management.v1.SnapshotActionReq")
	proto.RegisterType((*Empty)(nil), "appgw.management.v1.Empty")
	proto.RegisterType((*SnapshotActionReply)(nil), "appgw.management.v1.SnapshotActionReply")
	proto.RegisterType((*AddSnapshotReq)(nil), "appgw.management.v1.AddSnapshotReq")
	proto.RegisterType((*AddSnapshotReply)(nil), "appgw.management.v1.AddSnapshotReply")
	proto.RegisterType((*SnapshotMeta)(nil), "appgw.management.v1.snapshotMeta")
	proto.RegisterType((*SnapshotProfileReq)(nil), "appgw.management.v1.SnapshotProfileReq")
	proto.RegisterType((*SnapshotProfileReply)(nil), "appgw.management.v1.SnapshotProfileReply")
	proto.RegisterType((*CreateDeploymentReq)(nil), "appgw.management.v1.CreateDeploymentReq")
	proto.RegisterType((*CreateDeploymentReply)(nil), "appgw.management.v1.CreateDeploymentReply")
	proto.RegisterType((*DeploymentReq)(nil), "appgw.management.v1.DeploymentReq")
	proto.RegisterType((*CompareDeploymentReply)(nil), "appgw.management.v1.CompareDeploymentReply")
	proto.RegisterType((*OldConfigs)(nil), "appgw.management.v1.old_configs")
	proto.RegisterType((*NewConfigs)(nil), "appgw.management.v1.new_configs")
	proto.RegisterType((*SnapshotDynPath)(nil), "appgw.management.v1.snapshot_dyn_path")
	proto.RegisterType((*SnapshotBreakerApi)(nil), "appgw.management.v1.snapshot_breaker_api")
	proto.RegisterType((*DeployDeploymentProfileReply)(nil), "appgw.management.v1.DeployDeploymentProfileReply")
	proto.RegisterType((*ActionLog)(nil), "appgw.management.v1.action_log")
	proto.RegisterType((*InstanceStatus)(nil), "appgw.management.v1.instance_status")
	proto.RegisterType((*ListDeploymentReq)(nil), "appgw.management.v1.ListDeploymentReq")
	proto.RegisterType((*ListDeploymentReply)(nil), "appgw.management.v1.ListDeploymentReply")
	proto.RegisterType((*DeploymentMeta)(nil), "appgw.management.v1.DeploymentMeta")
	proto.RegisterType((*DeploymentStatus)(nil), "appgw.management.v1.deployment_status")
	proto.RegisterType((*DeploymentConfirm)(nil), "appgw.management.v1.DeploymentConfirm")
	proto.RegisterType((*AddActionLogReq)(nil), "appgw.management.v1.AddActionLogReq")
	proto.RegisterType((*SnapshotRunPlan)(nil), "appgw.management.v1.SnapshotRunPlan")
	proto.RegisterType((*ListLimiterReq)(nil), "appgw.management.v1.ListLimiterReq")
	proto.RegisterType((*Limiter)(nil), "appgw.management.v1.Limiter")
	proto.RegisterType((*LimiterListItem)(nil), "appgw.management.v1.LimiterListItem")
	proto.RegisterType((*LimiterMeta)(nil), "appgw.management.v1.LimiterMeta")
	proto.RegisterType((*TotalRule)(nil), "appgw.management.v1.total_rule")
	proto.RegisterType((*RefererRule)(nil), "appgw.management.v1.referer_rule")
	proto.RegisterType((*ListLimiterReply)(nil), "appgw.management.v1.ListLimiterReply")
	proto.RegisterType((*AddLimiterReq)(nil), "appgw.management.v1.AddLimiterReq")
	proto.RegisterType((*SetLimiterReq)(nil), "appgw.management.v1.SetLimiterReq")
	proto.RegisterType((*DeleteLimiterReq)(nil), "appgw.management.v1.DeleteLimiterReq")
	proto.RegisterType((*EnableLimiterReq)(nil), "appgw.management.v1.EnableLimiterReq")
	proto.RegisterType((*QuotaMethod)(nil), "appgw.management.v1.QuotaMethod")
	proto.RegisterType((*PluginReq)(nil), "appgw.management.v1.PluginReq")
	proto.RegisterType((*Plugin)(nil), "appgw.management.v1.Plugin")
	proto.RegisterType((*ZonePromptAPIReq)(nil), "appgw.management.v1.ZonePromptAPIReq")
	proto.RegisterType((*ZonePromptAPIReply)(nil), "appgw.management.v1.ZonePromptAPIReply")
	proto.RegisterType((*PluginListReq)(nil), "appgw.management.v1.PluginListReq")
	proto.RegisterType((*PluginListReply)(nil), "appgw.management.v1.PluginListReply")
	proto.RegisterType((*PluginListItem)(nil), "appgw.management.v1.PluginListItem")
	proto.RegisterType((*GRPCAppPackagePromptAPIReq)(nil), "appgw.management.v1.GRPCAppPackagePromptAPIReq")
	proto.RegisterType((*GRPCAppPackagePromptAPIReply)(nil), "appgw.management.v1.GRPCAppPackagePromptAPIReply")
	proto.RegisterMapType((map[string]*AppPackageService)(nil), "appgw.management.v1.GRPCAppPackagePromptAPIReply.PackageEntry")
	proto.RegisterType((*AppPackageService)(nil), "appgw.management.v1.AppPackageService")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-gw/management/api/api.proto", fileDescriptor_5303e11516ae7c5a)
}

var fileDescriptor_5303e11516ae7c5a = []byte{
	// 6628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x3d, 0x5b, 0x6c, 0x1c, 0xd7,
	0x75, 0x9a, 0x7d, 0x70, 0x97, 0x67, 0x97, 0xaf, 0xa1, 0x2c, 0xcb, 0xb4, 0xa3, 0xa1, 0x47, 0x0f,
	0x4b, 0xb6, 0x45, 0x59, 0x52, 0x22, 0xab, 0x8a, 0x1d, 0x87, 0x4b, 0xc9, 0x26, 0x63, 0x4b, 0xa1,
	0xae, 0x1e, 0x4d, 0x04, 0x21, 0x9b, 0xe1, 0xce, 0xe5, 0x72, 0xc2, 0xd9, 0x99, 0xd1, 0xcc, 0xac,
	0x24, 0x1a, 0x08, 0x50, 0x14, 0xfd, 0x48, 0x11, 0xa4, 0x68, 0x81, 0x16, 0x2d, 0x10, 0xa0, 0x48,
	0xda, 0x8f, 0xfe, 0x14, 0xe8, 0x57, 0xd0, 0x16, 0xfd, 0x08, 0x9a, 0xf6, 0x23, 0x01, 0x5a, 0xa0,
	0x05, 0x02, 0xb4, 0x40, 0x81, 0x4d, 0xe1, 0x14, 0x08, 0xca, 0x8f, 0x22, 0x25, 0xda, 0x8f, 0xfc,
	0x15, 0xf7, 0x35, 0x73, 0x67, 0x76, 0x66, 0xb8, 0xa4, 0xa8, 0xca, 0xf6, 0x07, 0x77, 0xe6, 0x9e,
	0x7b, 0xee, 0xb9, 0x8f, 0x73, 0xee, 0xb9, 0xe7, 0x9e, 0x7b, 0xee, 0x10, 0x2e, 0x75, 0xdd, 0xb3,
	0x5d, 0x23, 0xc4, 0x8f, 0x8c, 0xad, 0x73, 0x86, 0xe7, 0x91, 0xbf, 0xb3, 0xc1, 0x43, 0x9f, 0x3e,
	0xbb, 0x8f, 0xce, 0xf5, 0x0c, 0xc7, 0xe8, 0xe2, 0x1e, 0x76, 0xc2, 0x73, 0x86, 0x67, 0x91, 0xbf,
	0x05, 0xcf, 0x77, 0x43, 0x57, 0x9d, 0x35, 0x3c, 0xaf, 0xfb, 0x68, 0x21, 0xce, 0x5f, 0x78, 0x78,
	0x7e, 0xee, 0x6c, 0xd7, 0x0a, 0x37, 0xfa, 0x6b, 0x0b, 0x1d, 0xb7, 0x77, 0xae, 0xeb, 0x76, 0xdd,
	0x73, 0x14, 0x77, 0xad, 0xbf, 0x4e, 0x53, 0x34, 0x41, 0xdf, 0x18, 0x8d, 0xb9, 0x17, 0xbb, 0xae,
	0xdb, 0xb5, 0x71, 0x8c, 0x85, 0x7b, 0x5e, 0xb8, 0xc5, 0x33, 0x8f, 0xa5, 0x33, 0x1f, 0xf9, 0x86,
	0xe7, 0x61, 0x3f, 0x60, 0xf9, 0xfa, 0x7d, 0xa8, 0xad, 0xfa, 0xee, 0x37, 0x70, 0x27, 0x54, 0x2f,
	0x42, 0xd3, 0x63, 0xaf, 0x6d, 0xc7, 0xe8, 0xe1, 0xa3, 0xca, 0xbc, 0x72, 0x7a, 0xbc, 0x35, 0xbd,
	0x3d, 0xd0, 0x12, 0x70, 0xd4, 0xe0, 0xa9, 0x1b, 0x46, 0x0f, 0xab, 0x2f, 0x41, 0xc5, 0x71, 0x4d,
	0x7c, 0xb4, 0x44, 0x91, 0xeb, 0xdb, 0x03, 0x8d, 0xa6, 0x11, 0xfd, 0xd5, 0x1f, 0x41, 0x7d, 0xb1,
	0x1f, 0x6e, 0xdc, 0x43, 0xf8, 0x81, 0x3a, 0x07, 0xf5, 0x7e, 0x80, 0xfd, 0x98, 0x34, 0x8a, 0xd2,
	0xea, 0x11, 0x18, 0xeb, 0xb8, 0xee, 0xa6, 0xc5, 0xe9, 0x20, 0x9e, 0x52, 0xdf, 0xe4, 0xd4, 0xcb,
	0x94, 0xfa, 0xf1, 0x9d, 0x81, 0xa6, 0xad, 0xbb, 0x7e, 0xef, 0x8a, 0x4e, 0xa9, 0xcf, 0x3f, 0x34,
	0x6c, 0xcb, 0x34, 0x42, 0x7c, 0x45, 0xf7, 0xf1, 0x83, 0xbe, 0xe5, 0x63, 0x53, 0xe7, 0x15, 0xff,
	0x4f, 0x19, 0x6a, 0xef, 0x31, 0x7e, 0xec, 0xaf, 0x5f, 0xaf, 0x40, 0xdd, 0xf0, 0x3c, 0x56, 0x80,
	0xf5, 0xad, 0xb9, 0x3d, 0xd0, 0x22, 0x18, 0xaa, 0x19, 0x9e, 0x97, 0x18, 0x80, 0x72, 0xd6, 0x00,
	0xa8, 0x27, 0xa0, 0x16, 0xfa, 0x18, 0xb7, 0x2d, 0xf3, 0x68, 0x65, 0x5e, 0x39, 0x5d, 0x6e, 0x35,
	0xb6, 0x07, 0x9a, 0x00, 0xa1, 0x31, 0xf2, 0xb2, 0x62, 0xaa, 0xef, 0x42, 0xad, 0xe3, 0x3a, 0xeb,
	0x56, 0x37, 0x38, 0x5a, 0x9d, 0x2f, 0x9f, 0x6e, 0x5c, 0xd0, 0x16, 0x32, 0xe4, 0x62, 0x81, 0xe1,
	0x5c, 0xc7, 0xa1, 0xc1, 0xc8, 0xf0, 0x32, 0x48, 0xbc, 0xa8, 0x67, 0x01, 0xfa, 0x1e, 0x19, 0x10,
	0xb3, 0x6d, 0x84, 0x47, 0xc7, 0x68, 0x85, 0x93, 0xdb, 0x03, 0x4d, 0x82, 0xa2, 0x71, 0xfe, 0xbe,
	0x18, 0xaa, 0x6f, 0xc1, 0x94, 0x69, 0x05, 0x1d, 0xf7, 0x21, 0xf6, 0xb7, 0xda, 0x86, 0xe7, 0x59,
	0xe6, 0xd1, 0x1a, 0xed, 0xc5, 0xec, 0xf6, 0x40, 0x4b, 0x67, 0xa1, 0xc9, 0x08, 0xb0, 0x48, 0xd2,
	0xc9, 0xd2, 0x1d, 0xd7, 0x76, 0xfd, 0xa3, 0xf5, 0xac, 0xd2, 0x34, 0x4b, 0x2a, 0xbd, 0x44, 0xd2,
	0xea, 0x6d, 0x68, 0x76, 0x7d, 0xaf, 0xd3, 0x16, 0xfd, 0x1e, 0x1f, 0xad, 0xdf, 0x94, 0x6b, 0x72,
	0x41, 0xd4, 0x20, 0xa9, 0x25, 0x96, 0xd0, 0x7f, 0xae, 0x00, 0xc4, 0xd8, 0xaa, 0x06, 0xd5, 0xd0,
	0xdd, 0xc4, 0x0e, 0x67, 0xf9, 0xf8, 0xf6, 0x40, 0x63, 0x00, 0xc4, 0x1e, 0xea, 0x0b, 0x50, 0xc6,
	0xce, 0x43, 0xce, 0xe0, 0xda, 0xf6, 0x40, 0x23, 0x49, 0x44, 0x7e, 0x08, 0x5f, 0x3f, 0x74, 0x9d,
	0x04, 0x5f, 0x49, 0x1a, 0xd1, 0x5f, 0x32, 0xd2, 0x6b, 0x7d, 0xcb, 0x36, 0x99, 0x80, 0x54, 0x28,
	0x0e, 0x1d, 0xe9, 0x18, 0x8a, 0xc6, 0xe9, 0x3b, 0x15, 0x92, 0xd3, 0x50, 0x5f, 0xb7, 0x6c, 0x4c,
	0x91, 0xab, 0xb1, 0x34, 0x09, 0x18, 0x8a, 0xde, 0x54, 0x1d, 0xc6, 0xb0, 0x63, 0xac, 0xd9, 0x98,
	0xb2, 0xaf, 0xde, 0x82, 0xed, 0x81, 0xc6, 0x21, 0x88, 0x3f, 0xf5, 0xbb, 0xd0, 0xe4, 0xb2, 0x8d,
	0xb0, 0x67, 0x6f, 0xa9, 0xef, 0x42, 0x9d, 0xeb, 0x9e, 0xe0, 0xa8, 0x42, 0xc7, 0xf1, 0xa5, 0xcc,
	0x71, 0xe4, 0x85, 0x58, 0xdd, 0xa2, 0x04, 0x8a, 0xde, 0xf4, 0xdb, 0x00, 0x7c, 0xb6, 0x72, 0xaa,
	0x7c, 0x42, 0x14, 0x53, 0xe5, 0xea, 0x83, 0x51, 0x15, 0x25, 0x50, 0xf4, 0xa6, 0x9f, 0x85, 0x89,
	0x96, 0x8f, 0x8d, 0x4d, 0xec, 0xb7, 0xb6, 0x6e, 0xf4, 0x6d, 0x9b, 0xce, 0x98, 0x78, 0x1e, 0xb2,
	0x19, 0x43, 0x06, 0x81, 0xfe, 0xea, 0xdf, 0x84, 0xc9, 0x08, 0xfd, 0x5a, 0x87, 0xcc, 0xa1, 0x8b,
	0x09, 0x7c, 0x4d, 0xe0, 0xef, 0x0c, 0xb4, 0xd9, 0x6c, 0x05, 0x40, 0xc6, 0xf1, 0x12, 0x54, 0x71,
	0x47, 0x28, 0xa6, 0x72, 0x6b, 0x9e, 0xb0, 0x9e, 0x02, 0xf2, 0x8a, 0xb1, 0x5c, 0xfd, 0x37, 0x14,
	0x38, 0x1c, 0xd5, 0xbf, 0x6a, 0x1b, 0x1d, 0xbc, 0xe1, 0xda, 0x26, 0xf6, 0xf7, 0xd7, 0x8a, 0x8b,
	0x50, 0x31, 0x8d, 0xd0, 0xe0, 0x02, 0x46, 0x0b, 0x91, 0x74, 0x6e, 0x21, 0x92, 0xa9, 0xff, 0x9e,
	0xdc, 0x04, 0x84, 0x43, 0x7f, 0xab, 0x65, 0x74, 0x36, 0xfb, 0xde, 0xfe, 0x9a, 0x70, 0x15, 0x60,
	0x8d, 0x16, 0x6f, 0xf7, 0x7d, 0x9b, 0x37, 0xe4, 0x24, 0x95, 0xd4, 0x08, 0x9a, 0x47, 0x60, 0x9c,
	0xa1, 0xdc, 0xf1, 0x6d, 0xfd, 0xf7, 0x15, 0x78, 0x3e, 0x6a, 0xd3, 0x55, 0xcb, 0xc7, 0x9d, 0xd0,
	0xfe, 0x18, 0x34, 0xeb, 0x5b, 0xe5, 0x48, 0xb8, 0x16, 0x3b, 0xa1, 0xe5, 0x3a, 0xea, 0x65, 0xa8,
	0x38, 0x7d, 0xdb, 0xa6, 0x8d, 0x69, 0x5c, 0xd0, 0x33, 0x25, 0x36, 0x21, 0x8e, 0xcb, 0x87, 0x10,
	0x2d, 0xa1, 0x7e, 0x5e, 0x96, 0x98, 0xc6, 0x85, 0xe3, 0xc5, 0x45, 0xa9, 0x68, 0x2e, 0x1f, 0xe2,
	0x62, 0xa3, 0x5e, 0x87, 0x86, 0x17, 0x0b, 0x0b, 0x55, 0x1a, 0x8d, 0x0b, 0x67, 0x8a, 0x49, 0x48,
	0xd2, 0xb5, 0x7c, 0x08, 0xc9, 0xe5, 0xd5, 0x5f, 0x27, 0xba, 0x95, 0x0d, 0x72, 0x9b, 0xf5, 0x96,
	0xea, 0x98, 0xc6, 0x85, 0xd7, 0x8b, 0x49, 0x26, 0x39, 0xb3, 0x7c, 0x88, 0xa8, 0xdd, 0x04, 0xaf,
	0x6e, 0x40, 0xd3, 0x27, 0x12, 0x25, 0xa8, 0x56, 0x47, 0x69, 0xa8, 0x24, 0x83, 0xa4, 0xa1, 0x7e,
	0x9c, 0x6c, 0xd5, 0x61, 0xcc, 0xa0, 0x03, 0xaf, 0xff, 0xa5, 0x02, 0xf5, 0x77, 0x6d, 0xf7, 0xd1,
	0x92, 0xeb, 0x6d, 0xa9, 0x9f, 0x4b, 0x70, 0x21, 0x5b, 0xab, 0x13, 0xc4, 0x14, 0x0b, 0x2e, 0x43,
	0xd5, 0x37, 0x42, 0xcb, 0xe5, 0x2c, 0x98, 0x2f, 0x28, 0x87, 0x08, 0x1e, 0x19, 0x7f, 0x5a, 0x40,
	0xbd, 0x00, 0xe5, 0x07, 0x5e, 0xc0, 0xc7, 0xfd, 0x58, 0x41, 0xb9, 0x9b, 0xab, 0xb7, 0x96, 0x0f,
	0x21, 0x82, 0xdc, 0x1a, 0x83, 0xca, 0xba, 0xed, 0x3e, 0xd2, 0x5f, 0x05, 0x88, 0xdb, 0xb2, 0x8b,
	0x76, 0xfa, 0x10, 0x1a, 0x52, 0xfd, 0xfb, 0x56, 0x4d, 0x71, 0x2f, 0xb9, 0x6a, 0xa2, 0x80, 0x5c,
	0xd5, 0x44, 0x73, 0x75, 0x1f, 0xc6, 0xa3, 0x3e, 0xec, 0xaf, 0xe6, 0x37, 0xd8, 0x28, 0xb1, 0x7a,
	0x8f, 0x91, 0xe5, 0xee, 0x81, 0x17, 0xe4, 0x15, 0x21, 0x79, 0xfa, 0x1f, 0x94, 0x01, 0xc4, 0x04,
	0x5b, 0x5d, 0x21, 0xeb, 0xa5, 0xe1, 0x59, 0xbc, 0x52, 0xba, 0x5e, 0x1a, 0x9e, 0x85, 0xc8, 0x0f,
	0x59, 0x6b, 0xe5, 0x5e, 0x8d, 0x47, 0xbd, 0x12, 0x2c, 0xd2, 0x61, 0xcc, 0xc7, 0x46, 0xe0, 0x3a,
	0x7c, 0x49, 0xa5, 0x2b, 0x1b, 0x83, 0x20, 0xfe, 0x54, 0x5f, 0x83, 0xf1, 0x8e, 0xeb, 0x98, 0x16,
	0x91, 0x28, 0xbe, 0xaa, 0x4e, 0x6c, 0x0f, 0xb4, 0x18, 0x88, 0xe2, 0x57, 0xf5, 0x5d, 0x21, 0x7b,
	0x5c, 0x8a, 0x0b, 0x27, 0x3b, 0x53, 0x0f, 0xac, 0x52, 0x56, 0x0a, 0xf1, 0xe7, 0x28, 0x4b, 0x6e,
	0x64, 0xe5, 0xd5, 0x32, 0xad, 0xbc, 0x93, 0x50, 0xe3, 0x8b, 0x28, 0x37, 0x81, 0xa8, 0x79, 0xc6,
	0x41, 0x48, 0xbc, 0xa8, 0x2b, 0x30, 0x4e, 0x04, 0xae, 0xdd, 0x71, 0xbd, 0xad, 0xa3, 0xe3, 0xb4,
	0xcd, 0x9f, 0xc9, 0x6c, 0xb3, 0x98, 0x47, 0xac, 0xf3, 0x51, 0x19, 0x54, 0x5f, 0xe7, 0x19, 0xfa,
	0xef, 0x28, 0x30, 0xf3, 0x81, 0x15, 0x84, 0x31, 0x6f, 0x88, 0x89, 0x2d, 0xcc, 0x65, 0x65, 0x8f,
	0xe6, 0xb2, 0xfa, 0xc5, 0xb8, 0x03, 0x4c, 0x15, 0x9f, 0xda, 0x19, 0x68, 0x3a, 0x2b, 0xcb, 0x33,
	0xb2, 0x8b, 0x8b, 0x62, 0xfa, 0x43, 0x98, 0x4d, 0xb7, 0x87, 0x18, 0x11, 0x6d, 0x98, 0x5e, 0x63,
	0xa0, 0xb6, 0xe1, 0x59, 0x6d, 0xdb, 0x0a, 0x42, 0x6e, 0x4c, 0x68, 0x85, 0xdc, 0x5a, 0x5d, 0x69,
	0x1d, 0xde, 0x1e, 0x68, 0x43, 0x85, 0xd1, 0x24, 0x87, 0x2c, 0x7a, 0x16, 0xa9, 0x4f, 0xff, 0xb7,
	0x0a, 0x4c, 0xdf, 0xc2, 0xa9, 0x71, 0xf8, 0xac, 0x2c, 0xa6, 0xfa, 0xce, 0x40, 0x3b, 0xc6, 0xba,
	0x62, 0x78, 0x56, 0x76, 0x37, 0xa8, 0x04, 0x5f, 0x49, 0x4a, 0xf0, 0x89, 0x9d, 0x81, 0x36, 0xcf,
	0xca, 0xb1, 0xf9, 0x37, 0x9f, 0x3f, 0x37, 0xd5, 0xb7, 0x53, 0xc2, 0x7d, 0x72, 0x67, 0xa0, 0xbd,
	0xcc, 0x0b, 0x53, 0x78, 0x76, 0x69, 0x21, 0xf7, 0x17, 0x86, 0xe5, 0xfe, 0xf0, 0xce, 0x40, 0x9b,
	0x66, 0x14, 0xa2, 0x2c, 0x5d, 0x16, 0xff, 0xe5, 0x7d, 0x88, 0x7f, 0x73, 0x87, 0x58, 0x9d, 0x94,
	0xe8, 0x59, 0x3d, 0x9a, 0x00, 0x67, 0x52, 0x13, 0x60, 0x66, 0x67, 0xa0, 0x4d, 0x30, 0x2c, 0x6e,
	0x71, 0x46, 0xf3, 0xe0, 0xcd, 0xc4, 0x3c, 0xd8, 0x9f, 0x84, 0xd5, 0xf7, 0x25, 0x61, 0xc4, 0x86,
	0x8e, 0xf6, 0x8f, 0xe3, 0xcc, 0x86, 0x4e, 0xf4, 0x26, 0xde, 0x4d, 0x2e, 0xcb, 0xf3, 0x0c, 0x46,
	0x99, 0x67, 0x29, 0x4a, 0xd1, 0x34, 0xfb, 0xe3, 0x12, 0xcc, 0x5e, 0xa3, 0x3d, 0x3f, 0x08, 0x01,
	0x7b, 0x33, 0xb1, 0x57, 0xde, 0xdf, 0xe0, 0x95, 0xf7, 0x37, 0x78, 0xaf, 0x43, 0xcd, 0xb4, 0x02,
	0xca, 0xe3, 0x0a, 0xe5, 0xb1, 0xba, 0x33, 0xd0, 0x26, 0x19, 0x05, 0x9e, 0xa1, 0x23, 0x81, 0x92,
	0x18, 0xea, 0x6a, 0xd1, 0x50, 0xeb, 0xbf, 0x54, 0x60, 0xf6, 0x2a, 0xb6, 0x71, 0xf8, 0x49, 0x1f,
	0x20, 0xb9, 0xcb, 0x95, 0xc2, 0x2e, 0x7f, 0xab, 0x02, 0x13, 0xb7, 0x70, 0x18, 0xed, 0xc0, 0x1e,
	0xa8, 0x2d, 0xc9, 0x57, 0xc0, 0x7a, 0xfc, 0xca, 0xce, 0x40, 0x3b, 0x2e, 0x7a, 0xcc, 0x72, 0x72,
	0xea, 0x17, 0x6e, 0x84, 0x7d, 0x77, 0xfd, 0xb5, 0xd8, 0xc3, 0x50, 0xa6, 0x7a, 0x4b, 0xe2, 0x2c,
	0xcf, 0xd0, 0x23, 0x47, 0xc3, 0x7b, 0xb1, 0xa3, 0xa1, 0x32, 0xda, 0x86, 0x3b, 0x39, 0x0a, 0x91,
	0xa7, 0x61, 0x64, 0x09, 0x51, 0x97, 0x86, 0x9d, 0x0c, 0x63, 0xb4, 0xc0, 0xdc, 0xce, 0x40, 0x3b,
	0x12, 0x49, 0xa0, 0x8c, 0xa0, 0x0f, 0xf9, 0x1a, 0x96, 0x86, 0x7d, 0x0d, 0xb5, 0x7c, 0x22, 0x14,
	0x41, 0x1f, 0x72, 0x39, 0xac, 0xa6, 0x5c, 0x0e, 0xf5, 0xfd, 0x8c, 0x40, 0xc2, 0xdd, 0xb0, 0x02,
	0x93, 0x64, 0x11, 0x92, 0x44, 0x61, 0xbf, 0x2b, 0xb0, 0xfe, 0xd7, 0x0a, 0x4c, 0xb3, 0x89, 0x74,
	0x00, 0xd4, 0x12, 0x12, 0x59, 0xda, 0xa7, 0x44, 0xca, 0x2c, 0x2e, 0x17, 0xce, 0x88, 0xbf, 0x2a,
	0x43, 0xcd, 0xdc, 0x72, 0x56, 0x8d, 0x70, 0x23, 0x32, 0x94, 0x94, 0xdd, 0x0c, 0xa5, 0x52, 0x81,
	0xa1, 0x74, 0x12, 0x6a, 0x9e, 0x11, 0x86, 0xd8, 0x17, 0xcb, 0x29, 0x45, 0xe3, 0x20, 0x24, 0x5e,
	0xd4, 0x9b, 0xd0, 0xe8, 0xd8, 0x16, 0x76, 0xc2, 0xb6, 0xe5, 0xac, 0xbb, 0x7c, 0x87, 0x94, 0xc3,
	0x4f, 0x8a, 0xb7, 0xe2, 0xac, 0xbb, 0xad, 0xa9, 0xed, 0x81, 0x26, 0x97, 0x43, 0x10, 0x67, 0xa6,
	0x3c, 0x68, 0xd5, 0xdd, 0x3c, 0x68, 0xa3, 0x98, 0x8e, 0xf7, 0x01, 0x0c, 0xc7, 0x71, 0x43, 0x83,
	0xae, 0xd5, 0x35, 0x2a, 0x74, 0xd9, 0xdb, 0x38, 0x3e, 0x86, 0x0b, 0x8b, 0x11, 0xfa, 0x35, 0x87,
	0x6c, 0xb5, 0x68, 0x03, 0x62, 0x1a, 0x48, 0x7a, 0x9f, 0x7b, 0x1b, 0xa6, 0x52, 0xe8, 0xea, 0x34,
	0x94, 0x37, 0xf1, 0x16, 0xf7, 0xb1, 0x92, 0x57, 0xf5, 0x30, 0x54, 0x1f, 0x1a, 0x76, 0x5f, 0x78,
	0x57, 0x59, 0xe2, 0x4a, 0xe9, 0xb2, 0xa2, 0x7f, 0x5b, 0x61, 0x22, 0x7c, 0x95, 0x55, 0xfd, 0x8c,
	0x8d, 0xc8, 0xef, 0x2b, 0x30, 0x9d, 0x68, 0x0d, 0x31, 0x21, 0x0f, 0x44, 0xa2, 0x96, 0x61, 0xdc,
	0xdc, 0x72, 0xda, 0x9e, 0x11, 0x6e, 0x90, 0x5d, 0x62, 0xbe, 0x37, 0x8b, 0xf3, 0x80, 0x59, 0xde,
	0x51, 0x11, 0x54, 0xe7, 0xf0, 0x40, 0xff, 0x4e, 0x09, 0x64, 0x81, 0x79, 0x19, 0xc6, 0xc8, 0x7c,
	0xb2, 0x4c, 0xde, 0x3e, 0xb6, 0xc1, 0xa0, 0x10, 0x54, 0x35, 0x3c, 0x6f, 0xc5, 0x24, 0x13, 0x09,
	0x3b, 0xa6, 0xe7, 0x5a, 0x4e, 0x28, 0xbb, 0x92, 0x05, 0x0c, 0x45, 0x6f, 0xa4, 0x33, 0xa1, 0xd5,
	0xc3, 0x6e, 0x3f, 0xe4, 0xba, 0x9c, 0x79, 0x8b, 0x19, 0x08, 0x89, 0x17, 0xb5, 0x05, 0x8d, 0x9e,
	0xf1, 0xb8, 0x4d, 0xf6, 0xe1, 0x16, 0x0e, 0xb8, 0xdc, 0xbf, 0xb8, 0xc0, 0x3c, 0xfd, 0x0b, 0xc2,
	0xd3, 0xbf, 0xb0, 0xe2, 0x84, 0x97, 0x3e, 0x7b, 0x97, 0xb0, 0xba, 0x55, 0xf9, 0xde, 0xcf, 0x34,
	0x05, 0x41, 0xcf, 0x78, 0x8c, 0x58, 0x21, 0xf5, 0x3d, 0x98, 0x0d, 0x36, 0x2d, 0xaf, 0x2d, 0xea,
	0x6e, 0x77, 0x36, 0x70, 0x67, 0x93, 0x4a, 0x7c, 0xbd, 0xf5, 0xfc, 0xf6, 0x40, 0xcb, 0xca, 0x46,
	0x33, 0x04, 0x78, 0x8d, 0xc3, 0x96, 0x08, 0x48, 0xff, 0x21, 0x5b, 0x0e, 0x3f, 0x16, 0x02, 0x44,
	0x28, 0x24, 0x15, 0x87, 0x44, 0x81, 0x67, 0xe4, 0x50, 0x10, 0x3a, 0xe5, 0xc6, 0xbe, 0x74, 0x4a,
	0x52, 0x33, 0xca, 0xf2, 0xf1, 0x5a, 0x86, 0x42, 0x49, 0x62, 0x4b, 0xea, 0x64, 0x0f, 0x86, 0xb8,
	0xac, 0x9d, 0x6b, 0x85, 0x0b, 0xf0, 0xd7, 0x13, 0xfa, 0x87, 0x2d, 0x7a, 0x17, 0x32, 0x3b, 0x94,
	0x60, 0xe3, 0x90, 0x16, 0x4a, 0xf5, 0xf1, 0xe0, 0x74, 0xd0, 0xaf, 0xa2, 0xa5, 0xef, 0xd3, 0x22,
	0x44, 0xa3, 0x1b, 0x93, 0xbf, 0x54, 0xe0, 0x85, 0x3b, 0x94, 0xff, 0x8b, 0x1f, 0x7c, 0xc0, 0x57,
	0x7e, 0x66, 0x5d, 0x3c, 0xf3, 0xf5, 0x5f, 0xda, 0x32, 0x94, 0xf7, 0xb6, 0x65, 0x28, 0xee, 0xf2,
	0x9f, 0x95, 0x60, 0x9a, 0xed, 0xa9, 0x3e, 0x2d, 0xec, 0x7e, 0x5a, 0x9b, 0xab, 0x6b, 0x50, 0x0b,
	0x3c, 0xd7, 0x09, 0x5c, 0x5f, 0x7d, 0x01, 0xca, 0x7d, 0xbe, 0xc6, 0x94, 0x99, 0xe3, 0xad, 0x6f,
	0x99, 0x88, 0xfc, 0xa8, 0x1a, 0x54, 0xfb, 0x12, 0xa3, 0xa9, 0xe3, 0x8d, 0x02, 0x10, 0x7b, 0xe8,
	0xbf, 0x50, 0x88, 0x5a, 0x09, 0xad, 0x70, 0x4b, 0x5e, 0x2d, 0x95, 0x82, 0xd5, 0xf2, 0x0c, 0x34,
	0xdc, 0x35, 0x7a, 0x30, 0x1a, 0x6e, 0x79, 0xe2, 0x08, 0x85, 0xae, 0xbc, 0x24, 0x8d, 0x80, 0x65,
	0xde, 0xde, 0xf2, 0xe8, 0x79, 0x15, 0xf7, 0x42, 0x48, 0x5e, 0xbd, 0x94, 0x83, 0x6d, 0x01, 0xc0,
	0x32, 0x49, 0x0b, 0xd6, 0x2d, 0xec, 0xcb, 0x87, 0x65, 0x31, 0x14, 0x49, 0xef, 0xe2, 0x54, 0xae,
	0x5a, 0x70, 0x2a, 0x37, 0x96, 0x75, 0x2a, 0xa7, 0x5f, 0x84, 0x09, 0xfc, 0x38, 0xf4, 0x0d, 0x62,
	0xe2, 0x87, 0xd8, 0xa1, 0xf6, 0x99, 0x89, 0x43, 0xc3, 0xb2, 0xe5, 0xd5, 0x99, 0x41, 0x10, 0x7f,
	0xea, 0x3f, 0x29, 0x43, 0xdd, 0x76, 0xbb, 0x6d, 0x2b, 0xc4, 0x3d, 0xb2, 0x9c, 0x7f, 0xc3, 0x5d,
	0x4b, 0x2d, 0xe7, 0x0c, 0x82, 0xaa, 0xdf, 0x70, 0xd7, 0x56, 0xe8, 0x78, 0x77, 0xc8, 0x4a, 0x2c,
	0x3b, 0x3a, 0x29, 0x00, 0xb1, 0x07, 0x41, 0xe8, 0x51, 0x84, 0x72, 0x8c, 0xd0, 0x63, 0x08, 0x3d,
	0x81, 0x10, 0x84, 0x46, 0x28, 0x26, 0x0a, 0x45, 0xa0, 0x00, 0xc4, 0x1e, 0x04, 0xc1, 0xc6, 0x0f,
	0xb1, 0xcd, 0x87, 0x80, 0x22, 0x50, 0x00, 0x62, 0x0f, 0xb2, 0x8f, 0xe3, 0x92, 0x41, 0x47, 0x22,
	0xcf, 0x98, 0xe1, 0x38, 0xad, 0xa9, 0x1f, 0x0f, 0xb4, 0x43, 0x84, 0xd3, 0x1c, 0x80, 0x22, 0xb9,
	0x5a, 0x12, 0xa2, 0x41, 0x17, 0x11, 0x62, 0x45, 0x64, 0xd1, 0x61, 0x28, 0xad, 0x49, 0x4e, 0x86,
	0x17, 0x41, 0x42, 0xaa, 0xbe, 0x96, 0x1a, 0x76, 0xea, 0xe1, 0xc9, 0x73, 0x48, 0x25, 0x30, 0x5b,
	0xcf, 0x71, 0x92, 0x49, 0x02, 0xa8, 0x49, 0x93, 0x4b, 0x9c, 0x8b, 0xa7, 0xa1, 0xde, 0x31, 0x42,
	0xdc, 0x75, 0xfd, 0x2d, 0xe1, 0xf9, 0x21, 0x06, 0x94, 0x80, 0xa1, 0xe8, 0x4d, 0xff, 0x3a, 0x54,
	0x3c, 0xa3, 0x8b, 0x89, 0x04, 0x39, 0xfd, 0x9e, 0x3c, 0x5d, 0x9c, 0x7e, 0x0f, 0x91, 0x1f, 0x22,
	0x41, 0x81, 0xf5, 0x61, 0x42, 0xa8, 0x49, 0x1a, 0xd1, 0x5f, 0x76, 0x62, 0x1c, 0x1a, 0xb6, 0xcc,
	0x3b, 0x0a, 0x40, 0xec, 0x41, 0x14, 0x36, 0x10, 0x13, 0xf5, 0x03, 0xb7, 0xfb, 0x8c, 0xf5, 0xd6,
	0x19, 0x18, 0x63, 0xf3, 0x90, 0xb7, 0x55, 0x32, 0x16, 0x18, 0x5c, 0x47, 0x1c, 0x41, 0xfd, 0x0c,
	0x94, 0x3c, 0x87, 0x07, 0x20, 0x4c, 0xec, 0x0c, 0xb4, 0x71, 0xae, 0xdd, 0x1c, 0x1d, 0x95, 0x3c,
	0x87, 0x66, 0x07, 0xdc, 0x36, 0x91, 0xb3, 0x03, 0x92, 0x1d, 0xe8, 0xdf, 0x51, 0xa0, 0x19, 0x75,
	0x99, 0x58, 0xe4, 0x5f, 0x80, 0xaa, 0x6d, 0x05, 0xd1, 0xb1, 0x70, 0xb6, 0x6f, 0x4d, 0x4c, 0x29,
	0x2e, 0xbd, 0x04, 0x1f, 0xb1, 0x87, 0xfa, 0x36, 0x54, 0x09, 0x97, 0x02, 0x7e, 0xcc, 0xf3, 0x42,
	0x66, 0x79, 0x82, 0xd1, 0x6a, 0x72, 0xf1, 0xa0, 0x5c, 0x45, 0xac, 0x94, 0xfe, 0x93, 0x3a, 0x34,
	0x1e, 0xb9, 0xfe, 0x26, 0xf6, 0xdb, 0x74, 0x28, 0x4f, 0x43, 0x7d, 0xc3, 0x0d, 0x42, 0xc9, 0xfd,
	0x42, 0xc5, 0x43, 0xc0, 0x50, 0xf4, 0x16, 0x69, 0x8f, 0x52, 0xe6, 0x99, 0xfe, 0x5b, 0x30, 0xc5,
	0xc7, 0xb6, 0xfd, 0x10, 0xfb, 0x41, 0xac, 0xd3, 0x68, 0x40, 0x43, 0x2a, 0x0b, 0x4d, 0x72, 0xc0,
	0x5d, 0x96, 0x56, 0xdf, 0x80, 0x46, 0x60, 0x6e, 0x46, 0x25, 0xd9, 0xd4, 0xa6, 0x7b, 0x4d, 0x09,
	0x8c, 0x20, 0x30, 0x37, 0x45, 0x89, 0x5f, 0x83, 0x49, 0xc3, 0x7c, 0x88, 0xfd, 0xd0, 0x0a, 0x70,
	0xdb, 0x30, 0x4d, 0x9f, 0x4f, 0x77, 0x75, 0x7b, 0xa0, 0xa5, 0x72, 0xd0, 0x44, 0x94, 0x5e, 0x34,
	0x4d, 0x9f, 0x88, 0x29, 0x01, 0x07, 0x47, 0xc7, 0xe6, 0xcb, 0x42, 0x41, 0x50, 0x00, 0x62, 0x0f,
	0xa2, 0xf8, 0x88, 0x2a, 0xe9, 0x07, 0x74, 0x5e, 0x97, 0x99, 0x1e, 0x63, 0x10, 0xc4, 0x9f, 0xea,
	0x25, 0x98, 0xf0, 0x71, 0xb7, 0x4d, 0x54, 0x52, 0x10, 0x1a, 0x3d, 0x8f, 0x4e, 0xdb, 0x72, 0x6b,
	0x86, 0x4c, 0xc7, 0x44, 0x06, 0x6a, 0xfa, 0xb8, 0x7b, 0x5b, 0xa4, 0xd4, 0x8b, 0xd0, 0xec, 0x7b,
	0x52, 0xb1, 0x71, 0x5a, 0x8c, 0x46, 0x66, 0xc8, 0x70, 0xd4, 0xe8, 0x7b, 0x71, 0xa1, 0xb7, 0x60,
	0xca, 0xc7, 0x0e, 0x7e, 0x24, 0x95, 0x03, 0x5a, 0x8e, 0x0e, 0x6e, 0x2a, 0x0b, 0x4d, 0x52, 0x40,
	0xa2, 0xb4, 0x69, 0xf9, 0xe1, 0x96, 0x54, 0xba, 0x11, 0x97, 0x4e, 0x65, 0xd1, 0x43, 0xcf, 0x70,
	0x2b, 0x2e, 0xfd, 0x0e, 0x4c, 0xdb, 0x46, 0x88, 0x83, 0x50, 0x2a, 0xde, 0xa4, 0xc5, 0xe9, 0x19,
	0x43, 0x3a, 0x0f, 0x4d, 0x31, 0x48, 0x4c, 0xe0, 0x24, 0xd4, 0x04, 0x5f, 0x27, 0xe2, 0x65, 0x53,
	0xf0, 0x54, 0xbc, 0xa8, 0x5f, 0x81, 0x7a, 0x0f, 0x87, 0x06, 0x3d, 0xf1, 0x9f, 0xa4, 0x53, 0x63,
	0x21, 0x53, 0xb4, 0x25, 0xe1, 0x5d, 0xb8, 0xce, 0x0b, 0x70, 0x1b, 0x9b, 0x08, 0xae, 0xa0, 0x81,
	0xa2, 0x37, 0x22, 0x5c, 0x3d, 0xd7, 0xb1, 0x42, 0xd7, 0xa7, 0xc7, 0xe5, 0x53, 0xb1, 0x70, 0x49,
	0x60, 0x04, 0x3c, 0x71, 0xc7, 0xb7, 0xd5, 0xb3, 0x22, 0x10, 0xa6, 0x6d, 0x78, 0xd6, 0xd1, 0xe9,
	0x78, 0xcd, 0x8d, 0xa1, 0xf4, 0x30, 0x61, 0xdd, 0xea, 0x2e, 0x7a, 0x16, 0x91, 0x05, 0x9e, 0x61,
	0x5a, 0x5d, 0x1c, 0x84, 0x47, 0x67, 0x68, 0x09, 0x2a, 0x0b, 0x89, 0x0c, 0xd4, 0x64, 0xc9, 0xab,
	0x34, 0xa5, 0x7e, 0x1e, 0xa6, 0x24, 0x9f, 0x1a, 0xad, 0x4b, 0x95, 0xe6, 0x4c, 0x32, 0x0b, 0x4d,
	0xc4, 0xce, 0x33, 0x52, 0xe9, 0x55, 0x50, 0x65, 0x0c, 0x5e, 0xf3, 0x2c, 0x2d, 0x7f, 0x64, 0x7b,
	0xa0, 0x65, 0xe4, 0xa2, 0xe9, 0x98, 0x04, 0x6b, 0xc2, 0xdc, 0xe7, 0x61, 0x22, 0x31, 0x88, 0x7b,
	0xda, 0x7b, 0xfc, 0xad, 0x02, 0x4d, 0x89, 0x1d, 0x41, 0x96, 0x12, 0x50, 0xe8, 0x1c, 0xdb, 0x8f,
	0x12, 0x28, 0xd1, 0x92, 0x85, 0x4a, 0x60, 0x11, 0xaa, 0xb4, 0x62, 0xee, 0x94, 0x98, 0xdf, 0x4d,
	0x60, 0xd8, 0x5c, 0xa7, 0x45, 0x10, 0x7b, 0xe8, 0xbf, 0x59, 0x82, 0x19, 0xbe, 0x75, 0x58, 0xf5,
	0xdd, 0x75, 0xcb, 0xc6, 0x9f, 0x1c, 0xdf, 0xa1, 0x7a, 0x22, 0x8a, 0xfc, 0xcb, 0xda, 0x35, 0x88,
	0x38, 0xc0, 0x79, 0xa8, 0x10, 0x25, 0x9e, 0x69, 0x2f, 0xd3, 0x1c, 0xfd, 0xbb, 0x15, 0x98, 0x4d,
	0x0f, 0x02, 0x59, 0xab, 0x3e, 0xfe, 0xc1, 0x7f, 0x1a, 0x54, 0xc9, 0xf2, 0xc3, 0x42, 0xff, 0xb8,
	0x2e, 0xa7, 0x00, 0xc4, 0x1e, 0x72, 0x74, 0xe0, 0xd8, 0xc1, 0x45, 0x07, 0xd6, 0x76, 0xf3, 0x6d,
	0xde, 0x4d, 0xce, 0x0c, 0x6e, 0xd4, 0xbd, 0xbc, 0x9b, 0x80, 0x06, 0x6c, 0x70, 0x65, 0x08, 0xe2,
	0xcb, 0xf5, 0x0d, 0x3a, 0xc3, 0x9e, 0x4a, 0xe4, 0x1f, 0xe1, 0x04, 0x76, 0x1e, 0x06, 0x47, 0x81,
	0x0e, 0x22, 0xe5, 0x04, 0x49, 0x23, 0xfa, 0xab, 0xff, 0x97, 0x02, 0x93, 0xd7, 0x1e, 0xe3, 0x4e,
	0x3f, 0xc4, 0xb7, 0x8d, 0x60, 0xf3, 0x19, 0x5b, 0x6e, 0x6f, 0x42, 0x25, 0x34, 0x82, 0xcd, 0xe1,
	0xa8, 0x56, 0x02, 0xcd, 0xa9, 0x9a, 0x64, 0xed, 0x61, 0x93, 0x7d, 0x19, 0xa6, 0x13, 0xfd, 0x25,
	0x53, 0x81, 0x88, 0xa3, 0x11, 0x6c, 0xc6, 0x9b, 0x1b, 0x26, 0x8e, 0x0c, 0x84, 0xc6, 0xc8, 0xcb,
	0x8a, 0xa9, 0x9b, 0x30, 0x15, 0xcf, 0xa3, 0xc7, 0xf4, 0x18, 0xe2, 0x54, 0x32, 0x8c, 0x72, 0x7a,
	0x67, 0xa0, 0x35, 0x79, 0x83, 0x09, 0x58, 0x17, 0xd1, 0x94, 0x67, 0x60, 0x2c, 0xe8, 0xaf, 0xaf,
	0x5b, 0x8f, 0xf9, 0xc0, 0x48, 0x16, 0x29, 0x83, 0xeb, 0x88, 0x23, 0xe8, 0x7f, 0x98, 0xd0, 0x59,
	0x8f, 0xb7, 0x22, 0x57, 0x2f, 0x31, 0xf1, 0x68, 0x3d, 0x4d, 0xc6, 0x44, 0x6a, 0xf8, 0x31, 0xa3,
	0x9e, 0x28, 0x57, 0x6a, 0xb9, 0xb4, 0xa3, 0x30, 0xad, 0x2a, 0x57, 0xae, 0x31, 0x18, 0x01, 0x4b,
	0x2c, 0x11, 0x56, 0xdd, 0x83, 0xb1, 0x0d, 0x6c, 0xb0, 0x80, 0xac, 0x7c, 0xb7, 0xd7, 0x50, 0x3b,
	0x16, 0x96, 0x69, 0x21, 0xee, 0x7c, 0x17, 0x9b, 0x1e, 0x46, 0x09, 0xf1, 0xe7, 0xdc, 0x5d, 0x68,
	0x48, 0x68, 0x19, 0x8b, 0xce, 0x79, 0x79, 0xd1, 0xc9, 0xdb, 0x59, 0x71, 0xa2, 0xd2, 0x8a, 0xf4,
	0xba, 0x68, 0x33, 0xb1, 0xe1, 0x28, 0x38, 0xe0, 0x2b, 0x10, 0xb5, 0xe1, 0x18, 0x04, 0xf1, 0xa7,
	0xfe, 0x23, 0x05, 0xa6, 0x16, 0x3d, 0x6f, 0xd5, 0x77, 0x7b, 0x5e, 0xc8, 0xcf, 0x5e, 0x8f, 0x27,
	0x24, 0x7b, 0x6a, 0x67, 0xa0, 0x35, 0x24, 0xc9, 0xe6, 0x52, 0x2c, 0x8b, 0x52, 0x69, 0x44, 0x0d,
	0x5d, 0x2e, 0xd0, 0xd0, 0x57, 0xa0, 0xe9, 0x3a, 0xf6, 0x56, 0x5b, 0x4c, 0x0d, 0xe6, 0x08, 0x79,
	0x7e, 0x67, 0xa0, 0xcd, 0xf2, 0x3d, 0x89, 0x94, 0xab, 0xa3, 0x06, 0x49, 0xf2, 0x81, 0xd7, 0x6f,
	0xc1, 0x4c, 0xb2, 0x0f, 0x7c, 0x93, 0xc1, 0xf4, 0x4e, 0xd1, 0x26, 0xe3, 0xb6, 0x8f, 0xf1, 0x8d,
	0xec, 0x55, 0xf1, 0xfb, 0x0a, 0xd4, 0x45, 0xb6, 0xac, 0x89, 0x95, 0x7c, 0x4d, 0x2c, 0x42, 0xbf,
	0x4a, 0x59, 0xa1, 0x5f, 0x4c, 0x38, 0xc3, 0x0d, 0x59, 0xd7, 0x93, 0x34, 0xa2, 0xbf, 0x64, 0x9d,
	0x89, 0x0f, 0x20, 0xb9, 0xc2, 0xe7, 0xeb, 0x8c, 0x0c, 0x47, 0x8d, 0x28, 0xb5, 0x62, 0xea, 0xdf,
	0x53, 0x40, 0x65, 0x0a, 0x2c, 0xc1, 0xc0, 0x77, 0xd2, 0xad, 0x95, 0x34, 0x8c, 0x38, 0xd2, 0xcd,
	0x0e, 0x27, 0xe1, 0x1d, 0x39, 0x91, 0x0c, 0xa7, 0xcf, 0x61, 0xd9, 0x71, 0xa0, 0xee, 0x1c, 0xde,
	0x21, 0x49, 0x4e, 0x08, 0x94, 0xa8, 0x1c, 0xf2, 0xf8, 0x0a, 0x1c, 0x1e, 0x6a, 0x21, 0x61, 0xcf,
	0x17, 0xa1, 0x22, 0x05, 0xf3, 0x64, 0x6f, 0xf5, 0x17, 0x3d, 0x8f, 0x95, 0x5d, 0x21, 0xfb, 0x40,
	0x3a, 0x62, 0x34, 0x86, 0x87, 0xfe, 0xea, 0x7f, 0xaf, 0xc0, 0x44, 0x02, 0x43, 0x7d, 0x15, 0xc6,
	0xc9, 0xc2, 0x2d, 0x2f, 0xd4, 0x2c, 0x00, 0x4a, 0x00, 0x59, 0x9c, 0x34, 0x5d, 0x79, 0xff, 0xbf,
	0x22, 0xb7, 0xa3, 0x10, 0xf2, 0x6a, 0x76, 0x08, 0xb9, 0xfe, 0xbb, 0x0a, 0xcc, 0x12, 0xe9, 0x35,
	0xc2, 0x8d, 0x04, 0x13, 0x9f, 0xe1, 0x31, 0xda, 0x65, 0x78, 0x6e, 0xb8, 0x45, 0x84, 0x69, 0x1a,
	0xd9, 0x78, 0x87, 0x1b, 0x42, 0xa1, 0xd0, 0xce, 0xb0, 0xf3, 0x2d, 0xf6, 0xd0, 0x7f, 0xa1, 0xc0,
	0x73, 0x2b, 0x8e, 0x15, 0x26, 0x3c, 0xd1, 0xc1, 0x33, 0x37, 0x27, 0xf7, 0x14, 0xe3, 0x30, 0x92,
	0x45, 0xa9, 0xff, 0x68, 0x0c, 0x66, 0x6e, 0x39, 0x86, 0x17, 0x6c, 0xb8, 0x21, 0x0b, 0x8e, 0x22,
	0xbd, 0x9c, 0x87, 0x4a, 0xbf, 0x1f, 0xad, 0x8f, 0x29, 0x3b, 0x93, 0xe4, 0x10, 0xbd, 0xe9, 0xe3,
	0xc0, 0xed, 0xfb, 0x9d, 0x1c, 0xbd, 0x29, 0x72, 0x49, 0x3b, 0x12, 0x9e, 0xd1, 0xec, 0xd8, 0xab,
	0xbb, 0x30, 0x63, 0xa7, 0xe3, 0xf8, 0xf8, 0xa9, 0xd3, 0xa9, 0xcc, 0x49, 0x35, 0x14, 0xf5, 0xb7,
	0x7c, 0x08, 0x0d, 0x93, 0x50, 0x6f, 0xc1, 0x74, 0x90, 0x0a, 0x8b, 0xe3, 0x71, 0x62, 0x27, 0xf3,
	0xce, 0x7e, 0xd2, 0x54, 0x87, 0x08, 0xa8, 0xf7, 0x61, 0x16, 0x0f, 0x47, 0x43, 0x71, 0x17, 0xe4,
	0xe9, 0x4c, 0xba, 0x19, 0xd1, 0x53, 0xcb, 0x87, 0x50, 0x16, 0x19, 0x42, 0xdd, 0x1c, 0x0e, 0x25,
	0xe2, 0x8e, 0xc9, 0x6c, 0xea, 0x19, 0xa1, 0x47, 0x84, 0x7a, 0x06, 0x19, 0xf5, 0x3a, 0x4c, 0xda,
	0x89, 0x83, 0x6e, 0x6e, 0xd0, 0x1e, 0xcf, 0x1d, 0xe5, 0x18, 0x75, 0xf9, 0x10, 0x4a, 0x15, 0x56,
	0xbf, 0x04, 0x13, 0x81, 0x7c, 0x5c, 0xc6, 0xe3, 0x39, 0xf5, 0xdd, 0x0f, 0xd6, 0x96, 0x0f, 0xa1,
	0x64, 0x51, 0xc2, 0x2b, 0x33, 0x75, 0xfe, 0xc5, 0xc3, 0xd6, 0x4e, 0x16, 0xf4, 0x3a, 0x41, 0x71,
	0x88, 0x00, 0x21, 0x8a, 0x53, 0xa7, 0x2c, 0xd4, 0x67, 0x92, 0x47, 0x34, 0x7d, 0x24, 0x43, 0x88,
	0xa6, 0x09, 0xb4, 0x26, 0xa0, 0x11, 0xf0, 0x49, 0x83, 0xf0, 0x03, 0xbd, 0x06, 0xd5, 0x6b, 0x3d,
	0x2f, 0xdc, 0xd2, 0x7f, 0xa5, 0xc0, 0x6c, 0x7a, 0x36, 0x11, 0x85, 0x73, 0x01, 0xaa, 0xf4, 0x32,
	0x1a, 0x0f, 0x04, 0x9f, 0xcb, 0xae, 0x99, 0x60, 0xd0, 0x50, 0x7a, 0xf2, 0xa2, 0x22, 0xc6, 0xa8,
	0x98, 0x7b, 0xdc, 0x80, 0x3a, 0x3d, 0xd2, 0x74, 0xf0, 0xec, 0x2d, 0xc1, 0x2d, 0x29, 0x6e, 0x79,
	0x05, 0x1a, 0x12, 0xff, 0x78, 0x98, 0xf8, 0xc9, 0xdd, 0x39, 0xcf, 0xa8, 0xc9, 0x65, 0x5b, 0x53,
	0x30, 0x11, 0x0f, 0x81, 0x67, 0x6f, 0xe9, 0x3f, 0x50, 0x60, 0x72, 0xd1, 0x34, 0x6f, 0xc5, 0xe3,
	0xf2, 0x2c, 0xf7, 0x16, 0xa3, 0x47, 0xed, 0xdc, 0x82, 0xe9, 0x44, 0xb3, 0x09, 0xbf, 0xde, 0x81,
	0x4a, 0x0f, 0x87, 0x06, 0x67, 0x57, 0xf6, 0x5e, 0x4f, 0xf4, 0x9e, 0xee, 0xca, 0xe8, 0xea, 0x4a,
	0x8a, 0x20, 0xfa, 0xab, 0x3f, 0x80, 0xa6, 0x9c, 0x4f, 0xd6, 0x62, 0x49, 0xa1, 0x52, 0x6c, 0x92,
	0xe6, 0xca, 0xb4, 0xf0, 0xf2, 0xa0, 0x7c, 0x58, 0x55, 0xce, 0x3f, 0xac, 0xd2, 0x7f, 0xac, 0x80,
	0x2a, 0x7a, 0x71, 0x10, 0xfe, 0x8f, 0x03, 0xd9, 0xdf, 0xd1, 0x4e, 0x0f, 0xed, 0xef, 0x08, 0x34,
	0xa7, 0x6a, 0x9a, 0xf5, 0x27, 0x15, 0x38, 0x3c, 0xd4, 0x95, 0x83, 0xe0, 0x8b, 0x7a, 0x03, 0xea,
	0x22, 0x98, 0x85, 0x4f, 0xa7, 0xd1, 0xa4, 0x9f, 0x39, 0x3e, 0x44, 0x51, 0x14, 0x85, 0x79, 0xdd,
	0x83, 0x86, 0x14, 0x9a, 0xcd, 0x27, 0xd4, 0xc8, 0x33, 0x94, 0xed, 0xda, 0x24, 0x02, 0x08, 0xe2,
	0xb0, 0x6e, 0xf5, 0x3e, 0x50, 0x3f, 0x61, 0x3b, 0x6a, 0x70, 0x65, 0x2f, 0x0d, 0xa6, 0x2e, 0xcb,
	0x44, 0x79, 0xe6, 0x28, 0xe0, 0x48, 0xea, 0x06, 0x50, 0x17, 0x62, 0x5b, 0x6e, 0x7e, 0x75, 0x8f,
	0xcd, 0xa7, 0x6e, 0xe3, 0x34, 0x15, 0x34, 0x49, 0x20, 0xad, 0xb8, 0x1f, 0x77, 0xa0, 0xf9, 0xa0,
	0xef, 0x86, 0x46, 0xbb, 0x87, 0xc3, 0x0d, 0xd7, 0xe4, 0xce, 0x9b, 0x6c, 0x0f, 0xdf, 0x4d, 0x82,
	0x78, 0x9d, 0xe2, 0xb1, 0x4d, 0x83, 0x5c, 0x12, 0x35, 0x1e, 0xc4, 0xd9, 0xfa, 0x4e, 0x09, 0x66,
	0x97, 0x7c, 0x6c, 0x84, 0xf8, 0x2a, 0xf6, 0x6c, 0x77, 0x8b, 0x90, 0xf8, 0x84, 0x0a, 0xbc, 0x7a,
	0x19, 0x1a, 0x26, 0x0e, 0x3a, 0xbe, 0xe5, 0x49, 0x91, 0xef, 0x47, 0x76, 0x06, 0x9a, 0xca, 0x4f,
	0xcf, 0xe3, 0x4c, 0x1d, 0xc9, 0xa8, 0x7b, 0x0c, 0x40, 0x8d, 0x06, 0x8a, 0x1d, 0x68, 0x0f, 0x07,
	0xa0, 0x26, 0x11, 0x74, 0x34, 0x19, 0x43, 0x6e, 0x13, 0xc0, 0x97, 0xe1, 0xb9, 0xe1, 0x31, 0x27,
	0x33, 0xf3, 0x12, 0x4c, 0x48, 0x85, 0x23, 0x4d, 0x47, 0xa5, 0x30, 0x91, 0x81, 0x9a, 0x71, 0x72,
	0xc5, 0xd4, 0xff, 0xa1, 0x04, 0x13, 0x1f, 0x1b, 0xfe, 0xdd, 0x4c, 0x77, 0x82, 0x31, 0xf2, 0xf5,
	0x9d, 0x81, 0x76, 0x7a, 0x68, 0x80, 0xf2, 0x38, 0x9a, 0xe8, 0xdf, 0xe8, 0xae, 0xaa, 0x2c, 0xfe,
	0x54, 0xf7, 0xcc, 0x9f, 0xbf, 0x29, 0xc1, 0x91, 0x25, 0xb7, 0xe7, 0x19, 0xfe, 0x10, 0x87, 0x8e,
	0x40, 0x29, 0x62, 0xcb, 0xd8, 0xf6, 0x40, 0x2b, 0x59, 0x26, 0x2a, 0x1d, 0xd0, 0xe2, 0xa3, 0x22,
	0x68, 0xb8, 0xb6, 0xd9, 0x8e, 0x83, 0xaa, 0xf3, 0xef, 0xad, 0x49, 0x78, 0x4c, 0xff, 0x49, 0x00,
	0x04, 0xae, 0x6d, 0x0a, 0x57, 0x26, 0x82, 0x86, 0x83, 0x1f, 0xb5, 0xe3, 0x1b, 0xe1, 0xf9, 0x34,
	0x25, 0x3c, 0x46, 0x53, 0x02, 0x20, 0x70, 0xf0, 0x23, 0xc9, 0x3d, 0x2a, 0x49, 0x7e, 0x1c, 0xca,
	0xc1, 0x36, 0xf9, 0x7f, 0xa7, 0x24, 0xba, 0xf1, 0xd4, 0x6f, 0xed, 0xa8, 0xb7, 0x60, 0x42, 0x68,
	0x67, 0x46, 0xbd, 0x34, 0x42, 0x48, 0x26, 0x9b, 0x53, 0x72, 0x31, 0xd4, 0xe0, 0x79, 0xf4, 0x2a,
	0xd0, 0xff, 0x2a, 0x89, 0x81, 0x53, 0x6d, 0x50, 0xc5, 0x9a, 0xd8, 0x8e, 0x83, 0x3f, 0x59, 0x3f,
	0x4e, 0x15, 0x2e, 0xa1, 0x11, 0x3a, 0x3b, 0x86, 0x1a, 0xa6, 0x82, 0xa6, 0x05, 0x8c, 0x2f, 0x2b,
	0x81, 0xfa, 0x18, 0x9e, 0x8b, 0xf0, 0xa4, 0xfe, 0x07, 0xbc, 0x6b, 0x67, 0x8a, 0x2b, 0x94, 0x4a,
	0xb4, 0x5e, 0xd8, 0x1e, 0x68, 0xd9, 0xb4, 0xd0, 0xac, 0x00, 0xc7, 0xcb, 0x4c, 0xa0, 0x7f, 0x5b,
	0x81, 0x99, 0xa1, 0x26, 0xaa, 0x57, 0xa3, 0x98, 0x6c, 0x6e, 0x35, 0x14, 0x0f, 0x6e, 0xce, 0x3a,
	0xff, 0x06, 0x34, 0x36, 0x8c, 0xa0, 0xdd, 0xd9, 0x30, 0x9c, 0x2e, 0x36, 0xe9, 0x5c, 0xa9, 0x33,
	0x49, 0x93, 0xc0, 0x08, 0x36, 0x8c, 0x60, 0x89, 0xbd, 0xeb, 0xdf, 0x55, 0xe0, 0x70, 0x56, 0xe3,
	0xd5, 0x9b, 0x49, 0x93, 0xa1, 0xe8, 0x6a, 0xa8, 0x24, 0x4f, 0x85, 0x96, 0xc2, 0xde, 0x5b, 0xf7,
	0xc3, 0x0a, 0xbc, 0xc4, 0x14, 0x44, 0xac, 0x26, 0x12, 0x96, 0xd6, 0x53, 0xd5, 0x16, 0x27, 0xe3,
	0xb0, 0x9d, 0x4a, 0x8c, 0x36, 0x14, 0x94, 0x73, 0x92, 0x1f, 0xf8, 0xf8, 0x3d, 0xae, 0x09, 0xe3,
	0xf3, 0x1c, 0xbf, 0x87, 0xc4, 0x8b, 0x7a, 0x3e, 0xb9, 0x78, 0x8e, 0xc5, 0x87, 0xc2, 0x12, 0x38,
	0xb9, 0x6a, 0x46, 0x91, 0x47, 0xb5, 0x9c, 0xc8, 0xa3, 0x1b, 0x00, 0xcc, 0x31, 0xd1, 0xb6, 0xdd,
	0x6e, 0xe1, 0x0d, 0x89, 0x18, 0x8d, 0xc7, 0xa7, 0x47, 0x69, 0x34, 0xce, 0xde, 0x3f, 0x70, 0xbb,
	0xea, 0x1a, 0x4c, 0x59, 0x4e, 0x10, 0x1a, 0x4e, 0x07, 0xb7, 0x79, 0x40, 0x02, 0x3b, 0xef, 0x39,
	0x91, 0x49, 0x34, 0x85, 0xcb, 0x0e, 0x5d, 0x53, 0x40, 0x34, 0x29, 0x00, 0xb7, 0x58, 0x1c, 0xc3,
	0x8d, 0x28, 0xd6, 0x01, 0x0a, 0xfc, 0x26, 0xd2, 0x12, 0xc2, 0x89, 0x47, 0x9e, 0xfd, 0x54, 0x5c,
	0x84, 0xd0, 0x95, 0x8d, 0x4c, 0x5d, 0xf9, 0xcf, 0x8a, 0x3c, 0x44, 0x64, 0x9d, 0x13, 0xcd, 0x91,
	0x83, 0x4f, 0x04, 0x0c, 0x45, 0x6f, 0x52, 0xa4, 0x5c, 0x29, 0x37, 0x52, 0x2e, 0x0a, 0xfc, 0x2a,
	0xe7, 0x04, 0x7e, 0x9d, 0x05, 0xe8, 0x50, 0x3b, 0x84, 0x9e, 0xe1, 0x55, 0xe2, 0x33, 0xbc, 0x18,
	0x8a, 0xc6, 0xf9, 0xfb, 0x62, 0x28, 0x0b, 0x5c, 0x35, 0x5f, 0xe0, 0xf4, 0x7f, 0x54, 0x86, 0xd8,
	0xb4, 0x87, 0x8e, 0xbd, 0x04, 0x15, 0x1a, 0xbd, 0x22, 0x4d, 0x0d, 0x1a, 0xb3, 0x42, 0x7f, 0x63,
	0x91, 0x2b, 0xe7, 0x88, 0xdc, 0x1e, 0xbb, 0xa4, 0xc3, 0x18, 0x0f, 0x14, 0xa8, 0x4a, 0x21, 0x7d,
	0x2c, 0x38, 0x80, 0x3f, 0xf5, 0x3f, 0x2f, 0xb3, 0xdb, 0xb1, 0x1f, 0x1b, 0x03, 0xeb, 0x0a, 0xd4,
	0x3d, 0xa3, 0x8b, 0xdb, 0x4e, 0xbf, 0xc7, 0x3d, 0x98, 0xda, 0xce, 0x40, 0x7b, 0x51, 0x04, 0x99,
	0xb2, 0x1c, 0x7d, 0xde, 0xc4, 0xeb, 0x46, 0xdf, 0x0e, 0xaf, 0xe8, 0xe7, 0x69, 0x74, 0x69, 0x17,
	0xdf, 0xe8, 0xf7, 0xd4, 0xf7, 0x79, 0xc0, 0x1a, 0x1b, 0x99, 0x37, 0x77, 0x06, 0xda, 0x45, 0x7e,
	0xa6, 0x66, 0x7d, 0x98, 0x68, 0x76, 0xcf, 0x72, 0xde, 0x3e, 0xff, 0x7a, 0x54, 0xbb, 0x44, 0xed,
	0x8d, 0x37, 0x74, 0x1e, 0xdf, 0x76, 0x8a, 0x70, 0xc3, 0xe2, 0x36, 0x73, 0x59, 0x3e, 0xca, 0xa3,
	0x60, 0x1d, 0xb1, 0x6c, 0x82, 0x87, 0x29, 0xde, 0x58, 0x1a, 0x0f, 0x73, 0x3c, 0xfa, 0xcc, 0x32,
	0xde, 0x6a, 0x7b, 0x36, 0xde, 0x7e, 0xa6, 0xb0, 0xcb, 0xc3, 0x69, 0xcb, 0xed, 0x40, 0x6e, 0x7e,
	0x5c, 0x15, 0xc1, 0x6a, 0xec, 0x08, 0xf0, 0x78, 0x8e, 0x47, 0x4d, 0xd4, 0x4c, 0x77, 0xcf, 0x05,
	0x21, 0x6b, 0x95, 0x7d, 0x85, 0xac, 0xfd, 0x47, 0x05, 0x26, 0x93, 0x75, 0xec, 0x77, 0xe3, 0x40,
	0xca, 0x45, 0xcb, 0x2b, 0xdd, 0x74, 0x95, 0xe2, 0x72, 0x89, 0x0c, 0x14, 0x79, 0x62, 0xee, 0x90,
	0xad, 0x56, 0x6a, 0xb5, 0x28, 0x8f, 0xb0, 0x5a, 0x8c, 0xb8, 0x5c, 0x25, 0x27, 0x70, 0x75, 0xb7,
	0x09, 0xbc, 0xc7, 0x8f, 0x14, 0xed, 0xba, 0x64, 0x5d, 0x82, 0x09, 0xdf, 0xb5, 0xed, 0x35, 0xa3,
	0xb3, 0xc9, 0x06, 0xa4, 0x1e, 0x0f, 0x48, 0x22, 0x03, 0x35, 0x45, 0xf2, 0x8e, 0xec, 0x7c, 0x1a,
	0xdf, 0x4d, 0xba, 0xa0, 0x40, 0xba, 0xe2, 0xb5, 0xa7, 0x71, 0x20, 0x6b, 0xcf, 0x5b, 0xc3, 0xf3,
	0xa9, 0x29, 0x7d, 0x54, 0x29, 0x99, 0x35, 0x34, 0x91, 0x7e, 0x50, 0x82, 0x99, 0xa1, 0xba, 0xd4,
	0x05, 0x00, 0xd1, 0x71, 0xcc, 0xc4, 0xac, 0xce, 0x06, 0x3c, 0x86, 0x22, 0xe9, 0x5d, 0x7d, 0x0d,
	0xc6, 0x3d, 0xec, 0x07, 0x56, 0x10, 0x46, 0x36, 0x15, 0x3d, 0x86, 0x8b, 0x80, 0x28, 0x7e, 0x65,
	0x5f, 0x36, 0x72, 0xac, 0x60, 0x03, 0x9b, 0xfc, 0x9a, 0x00, 0xff, 0xb2, 0x11, 0x83, 0xa1, 0xe8,
	0x8d, 0x08, 0xa0, 0xe5, 0x58, 0xa1, 0x65, 0xd8, 0xd6, 0x87, 0xd8, 0xe4, 0x07, 0xc4, 0x54, 0x00,
	0x25, 0x30, 0x92, 0x13, 0x84, 0x38, 0xeb, 0x0e, 0x36, 0xf9, 0xcd, 0x24, 0x66, 0xa6, 0x72, 0x18,
	0x8a, 0xde, 0xc8, 0xb8, 0x05, 0x96, 0xd3, 0xb5, 0x71, 0x3b, 0x2a, 0xc0, 0xae, 0xd0, 0xd0, 0x71,
	0x4b, 0x65, 0xa1, 0x49, 0x06, 0xb8, 0xca, 0xd3, 0xba, 0x0b, 0x33, 0xf1, 0xec, 0x5c, 0xe2, 0xe6,
	0x95, 0x24, 0xfd, 0x4a, 0x81, 0xf4, 0x5f, 0x84, 0x26, 0x37, 0xc8, 0x98, 0x40, 0x97, 0xe2, 0x68,
	0x48, 0x19, 0x8e, 0x1a, 0x51, 0x6a, 0x31, 0xd4, 0x3f, 0x52, 0x60, 0x6a, 0xd1, 0x34, 0x17, 0x85,
	0x9d, 0x44, 0x96, 0xa7, 0x03, 0xd1, 0x76, 0x97, 0xb2, 0x77, 0xf2, 0xbb, 0x6a, 0x15, 0x94, 0xb0,
	0xfb, 0x8a, 0x6e, 0x3d, 0x49, 0x76, 0x9f, 0xca, 0x85, 0x38, 0xdb, 0xf6, 0xd3, 0x7f, 0xbb, 0x0c,
	0x53, 0x91, 0x7b, 0xb9, 0xef, 0xac, 0xda, 0x86, 0xa3, 0xde, 0x82, 0x46, 0x80, 0xd9, 0x2e, 0xc5,
	0xc7, 0x0f, 0x0a, 0x4f, 0x8f, 0x13, 0x87, 0x26, 0x3c, 0xce, 0x23, 0x2e, 0x8a, 0xc6, 0xd9, 0x19,
	0x0a, 0x19, 0xb9, 0x35, 0x98, 0x22, 0x39, 0x62, 0x97, 0x40, 0x08, 0xb3, 0x4d, 0xd7, 0x68, 0x47,
	0x5d, 0x5c, 0x46, 0x92, 0x14, 0xe8, 0x19, 0x0d, 0x47, 0x23, 0x75, 0xdc, 0x25, 0xea, 0xd3, 0x8e,
	0x1a, 0x5e, 0x2e, 0xa0, 0x9f, 0x3e, 0x9e, 0x11, 0x5a, 0xd6, 0x8e, 0xdb, 0x6e, 0x62, 0x9b, 0xb7,
	0x1d, 0x93, 0x09, 0x6f, 0x27, 0xda, 0xce, 0x6e, 0x66, 0x8f, 0x7c, 0xe0, 0x25, 0x54, 0x83, 0x9d,
	0x6c, 0xbe, 0x89, 0xed, 0xb8, 0xf9, 0xd1, 0x3d, 0xcf, 0x0f, 0xac, 0x9e, 0x15, 0xb2, 0x1e, 0x3d,
	0xc3, 0x03, 0xea, 0x9f, 0x2a, 0x50, 0xe3, 0x2d, 0xc9, 0xdd, 0x70, 0xf1, 0x4f, 0xcd, 0x94, 0x32,
	0x3e, 0x35, 0x43, 0xef, 0x03, 0x78, 0x46, 0xc7, 0x0a, 0xb7, 0xb8, 0x35, 0xc5, 0xef, 0x03, 0x30,
	0x18, 0x8a, 0xde, 0xd4, 0x77, 0x60, 0xda, 0xc7, 0xeb, 0x3e, 0x0e, 0x36, 0xda, 0x96, 0x13, 0x62,
	0xff, 0xa1, 0x61, 0x73, 0x3b, 0x8a, 0xfa, 0x29, 0xd2, 0x79, 0x68, 0x8a, 0x43, 0x56, 0x38, 0x80,
	0xe8, 0x42, 0xc3, 0xee, 0xba, 0xbe, 0x15, 0x6e, 0xf4, 0x44, 0x84, 0x3c, 0xd1, 0x85, 0x11, 0x10,
	0xc5, 0xaf, 0xfa, 0x63, 0x98, 0xe2, 0xbd, 0x22, 0x43, 0x4d, 0x43, 0x1a, 0x0a, 0x3e, 0x98, 0xf3,
	0x25, 0xa8, 0xdb, 0x0c, 0x5b, 0xf8, 0x08, 0xe6, 0x73, 0x1c, 0xd0, 0x14, 0x89, 0xdd, 0x45, 0x27,
	0xfd, 0x14, 0xa5, 0x50, 0xf4, 0xa6, 0xff, 0x69, 0x19, 0x1a, 0x12, 0x5e, 0xee, 0xa0, 0x22, 0x00,
	0x7a, 0x8d, 0xa1, 0xed, 0xf7, 0x6d, 0x11, 0x98, 0x94, 0x3d, 0xcd, 0x63, 0xb4, 0x78, 0x9a, 0xc7,
	0x30, 0x34, 0xce, 0x2e, 0x45, 0xf4, 0x6d, 0x9c, 0x39, 0xc6, 0xe5, 0x7d, 0x8f, 0x71, 0xa5, 0x78,
	0x8c, 0x89, 0x96, 0xa4, 0x6d, 0xaf, 0xc6, 0x5a, 0x92, 0x36, 0x88, 0xfe, 0x8e, 0xfa, 0x29, 0x1f,
	0x1a, 0x1e, 0x52, 0xcb, 0x0c, 0x0f, 0xb9, 0x07, 0x4d, 0x1f, 0xaf, 0x63, 0x9f, 0x4c, 0x23, 0x52,
	0x4f, 0x51, 0xd4, 0xa3, 0x8c, 0xd8, 0x3a, 0xcc, 0x47, 0x29, 0x51, 0x1c, 0x35, 0x78, 0x8a, 0x8c,
	0x94, 0x7e, 0x49, 0x1e, 0xfd, 0x84, 0x14, 0x2b, 0x45, 0x52, 0xac, 0x5f, 0x4e, 0xb6, 0x69, 0x0f,
	0x25, 0xef, 0xb2, 0xfb, 0xd4, 0xd1, 0xac, 0x27, 0x56, 0x75, 0x2b, 0x11, 0xb9, 0x73, 0xa2, 0x48,
	0xe6, 0x84, 0x18, 0x0f, 0xc5, 0xee, 0xfc, 0x6b, 0x05, 0x26, 0x16, 0x4d, 0x53, 0xd2, 0x26, 0xfb,
	0xfb, 0xe0, 0xc7, 0x92, 0xd4, 0x13, 0xb6, 0x70, 0x4a, 0xc1, 0x21, 0x51, 0x2f, 0x32, 0xcb, 0xc7,
	0x93, 0xfc, 0x5e, 0xae, 0x00, 0x9e, 0xdb, 0x19, 0x68, 0xaf, 0x89, 0xaf, 0xf0, 0x24, 0x31, 0xb2,
	0x89, 0x0e, 0xc9, 0xe6, 0x85, 0x61, 0xd9, 0x94, 0x3e, 0xcc, 0x13, 0x4f, 0x7d, 0x59, 0x44, 0xdf,
	0xe4, 0x02, 0x56, 0x4d, 0x2b, 0x56, 0x7a, 0x47, 0x2d, 0x5b, 0xb1, 0x52, 0xd9, 0xbb, 0xc8, 0x65,
	0x9b, 0x79, 0x72, 0xa4, 0x1d, 0x22, 0x81, 0x4a, 0xfb, 0x39, 0x76, 0x13, 0x89, 0x8b, 0x7c, 0x7c,
	0x67, 0xb8, 0x36, 0xea, 0xc7, 0x7b, 0xea, 0x4f, 0xa0, 0xf1, 0xc7, 0x9f, 0xfc, 0x58, 0x1a, 0x0a,
	0x8f, 0xa5, 0xff, 0xbb, 0x4c, 0xef, 0x93, 0x4b, 0xa2, 0x75, 0x5e, 0x52, 0x66, 0x2f, 0xef, 0x0c,
	0xb4, 0xcf, 0xb0, 0x52, 0x79, 0xe7, 0x10, 0x25, 0xfa, 0xbd, 0x90, 0x4f, 0xa1, 0x5c, 0x5d, 0x4c,
	0xa8, 0xbe, 0x11, 0xc5, 0x43, 0xf0, 0x7c, 0xec, 0x09, 0x78, 0x5e, 0x7b, 0x72, 0x9e, 0xd7, 0x0b,
	0x79, 0xbe, 0x1d, 0xdd, 0x00, 0x7f, 0x32, 0xb6, 0x7f, 0x22, 0xbe, 0x1f, 0xf4, 0xd3, 0xe8, 0xfe,
	0xf3, 0x13, 0xab, 0xcf, 0x4f, 0xdf, 0x07, 0xa5, 0x48, 0x97, 0x24, 0x1d, 0x28, 0x75, 0x89, 0x09,
	0x79, 0x66, 0x97, 0x68, 0xd6, 0x5f, 0x28, 0xd0, 0x90, 0x4e, 0xd1, 0x8b, 0x2c, 0x2f, 0x61, 0x43,
	0x94, 0x32, 0x6d, 0x88, 0xe2, 0x3b, 0x1d, 0xd2, 0x3e, 0xac, 0x52, 0xb0, 0x0f, 0x8b, 0x0d, 0x91,
	0x6a, 0xee, 0x67, 0x7c, 0xff, 0x45, 0x81, 0xf1, 0x55, 0xbb, 0xdf, 0xb5, 0xe8, 0x46, 0xe0, 0x7d,
	0x68, 0x78, 0x34, 0x21, 0x87, 0xbf, 0xbe, 0xba, 0x33, 0xd0, 0x4e, 0x71, 0x2f, 0x61, 0x9c, 0x99,
	0x3d, 0x0c, 0xc0, 0x30, 0x68, 0xc0, 0xe4, 0x15, 0xa8, 0xae, 0x5b, 0xd8, 0x16, 0xce, 0x21, 0xe9,
	0x53, 0x76, 0x14, 0x9c, 0xf3, 0x29, 0x3b, 0x9a, 0xa7, 0x2e, 0xc2, 0x18, 0xa3, 0xc4, 0xa3, 0x3a,
	0xb2, 0x03, 0xd7, 0x59, 0xc3, 0xd3, 0x41, 0x8d, 0xac, 0xa0, 0x7e, 0x0a, 0xc6, 0x58, 0x3e, 0x19,
	0x4c, 0x7a, 0x1d, 0x4e, 0xda, 0xd4, 0xd2, 0xab, 0x6d, 0xec, 0x4b, 0xb7, 0xdf, 0x51, 0x60, 0xfa,
	0x9e, 0xeb, 0xe0, 0x8f, 0x4b, 0xe0, 0xec, 0xe7, 0x40, 0x4d, 0x35, 0x87, 0x47, 0xcd, 0xb2, 0x0b,
	0x3a, 0x4a, 0xf6, 0x05, 0x1d, 0xfd, 0x3e, 0x4c, 0xb0, 0xee, 0x12, 0x7b, 0xe9, 0xa0, 0x79, 0xa9,
	0xdf, 0x86, 0x29, 0x99, 0x3a, 0x69, 0xd1, 0x62, 0xc2, 0x84, 0x3b, 0x5e, 0xc0, 0xa0, 0x5c, 0x0b,
	0xce, 0x86, 0xc9, 0x24, 0x06, 0x99, 0x30, 0xd1, 0x0d, 0x06, 0x36, 0x61, 0x36, 0xf1, 0x16, 0xbb,
	0xca, 0xf0, 0x4e, 0x24, 0x12, 0xa5, 0xdd, 0x45, 0x82, 0x8a, 0x3a, 0x43, 0x8f, 0x04, 0xe2, 0x3a,
	0xcc, 0xbd, 0x87, 0x56, 0x97, 0x68, 0x54, 0x72, 0x67, 0xd3, 0xe8, 0x26, 0x39, 0x7e, 0x4e, 0xfa,
	0x40, 0x0e, 0xab, 0x7e, 0x76, 0x67, 0xa0, 0x4d, 0x09, 0x23, 0x86, 0xe5, 0xe8, 0xf1, 0x77, 0x72,
	0xf4, 0xff, 0x54, 0xe0, 0xa5, 0x5c, 0x7a, 0x64, 0x80, 0x30, 0xd4, 0x3c, 0x96, 0xc1, 0xc7, 0xe8,
	0x0b, 0xd9, 0x37, 0x3f, 0x0a, 0x68, 0x2c, 0x70, 0x28, 0xbb, 0x05, 0xc2, 0x3f, 0x40, 0x45, 0x21,
	0x48, 0xbc, 0xcc, 0xad, 0x41, 0x53, 0xc6, 0xca, 0xb8, 0x04, 0xf2, 0x56, 0xf2, 0x12, 0xc8, 0xa9,
	0xbc, 0x38, 0x79, 0x4e, 0xe6, 0x16, 0xf6, 0x1f, 0x5a, 0x1d, 0x2c, 0xdf, 0x07, 0x79, 0x9b, 0x5d,
	0x8e, 0x48, 0xe4, 0x13, 0x7d, 0x1a, 0xb0, 0x57, 0x21, 0x95, 0x74, 0x07, 0x20, 0x60, 0x28, 0x7a,
	0xbb, 0xf0, 0x5b, 0xa7, 0x00, 0xae, 0x47, 0xb5, 0xa9, 0x97, 0xa0, 0xb2, 0x6a, 0x39, 0x5d, 0xf5,
	0xc8, 0xd0, 0xd7, 0x82, 0x68, 0x14, 0xe6, 0x5c, 0x0e, 0x5c, 0x7d, 0x0f, 0xaa, 0xf4, 0xd3, 0xe0,
	0x6a, 0xf6, 0x3d, 0x0c, 0xf1, 0x91, 0xff, 0x39, 0xad, 0x28, 0x9b, 0x70, 0xe6, 0xfd, 0xf8, 0xbb,
	0xfc, 0xbb, 0x90, 0x7a, 0xb9, 0xe8, 0xb2, 0x0e, 0x23, 0xb6, 0x06, 0x93, 0xc9, 0x3b, 0x7f, 0xea,
	0xa9, 0x5d, 0x6e, 0xf8, 0xf0, 0xe8, 0xc0, 0xb9, 0xd3, 0x23, 0xe1, 0x91, 0x3a, 0x96, 0x01, 0x16,
	0x4d, 0x53, 0xb4, 0x39, 0xd7, 0x55, 0x15, 0x7f, 0xb5, 0x2d, 0x77, 0x0c, 0xdf, 0x87, 0x09, 0xf6,
	0xa9, 0x97, 0x83, 0x20, 0x76, 0x03, 0x26, 0x12, 0x9f, 0x8b, 0x53, 0x8b, 0x7c, 0x51, 0x23, 0xd0,
	0xfb, 0x3a, 0x1c, 0x61, 0x46, 0x49, 0xfa, 0x3b, 0x34, 0x6a, 0xf6, 0x1d, 0xe6, 0xdc, 0x8f, 0xd6,
	0xe4, 0xd6, 0x60, 0xc0, 0xf3, 0x57, 0x99, 0x39, 0xf0, 0xd4, 0xaa, 0x30, 0x61, 0x8e, 0x77, 0xc2,
	0xb6, 0xc9, 0xdc, 0x7e, 0x3a, 0xb5, 0x60, 0x78, 0x51, 0x74, 0xe4, 0x69, 0x56, 0xb3, 0xc6, 0x3c,
	0x76, 0x52, 0x14, 0xf3, 0x88, 0x17, 0x02, 0xe6, 0x46, 0x0e, 0x64, 0x24, 0x52, 0x94, 0xf0, 0x86,
	0xaa, 0xa3, 0x79, 0x4c, 0x73, 0xdb, 0x7c, 0x13, 0xa6, 0x59, 0x47, 0x0f, 0x8e, 0xe4, 0x6d, 0x61,
	0x2d, 0x4b, 0x24, 0x47, 0xbe, 0x6a, 0x90, 0x4b, 0xf5, 0x0e, 0xcc, 0x70, 0x1e, 0x1e, 0x28, 0xd9,
	0xdb, 0x62, 0x1f, 0xb3, 0x2b, 0xd5, 0x0c, 0x47, 0x6e, 0x2e, 0xd5, 0xaf, 0x42, 0x43, 0x0a, 0x73,
	0x55, 0x47, 0xb9, 0xb1, 0x30, 0x37, 0x5a, 0xb4, 0x2c, 0xd7, 0x6e, 0x82, 0xf2, 0x08, 0x8e, 0xf8,
	0xdd, 0xb5, 0xdb, 0x41, 0x10, 0x8b, 0xb4, 0x9b, 0x20, 0x36, 0x9a, 0xa7, 0xbd, 0x88, 0x5e, 0xe2,
	0x7e, 0x83, 0x3a, 0xda, 0x1d, 0x88, 0x5c, 0x7a, 0x5f, 0x86, 0x49, 0x2e, 0x3e, 0x07, 0x44, 0xf0,
	0x3a, 0xd4, 0xf8, 0x27, 0x56, 0x54, 0x2d, 0x97, 0x73, 0xec, 0xa0, 0x28, 0x67, 0x61, 0x4c, 0x7c,
	0xa1, 0xe5, 0xab, 0xd0, 0x90, 0xae, 0xff, 0xe6, 0x48, 0x4c, 0xf2, 0x42, 0x74, 0x8e, 0xc4, 0x0c,
	0xdd, 0x22, 0xbe, 0x1f, 0xfd, 0xf3, 0x11, 0x7a, 0x61, 0x56, 0x3d, 0x31, 0xc2, 0x9d, 0xda, 0x07,
	0x73, 0xa7, 0x46, 0xbb, 0x79, 0xab, 0x7e, 0x05, 0xd4, 0xe1, 0xfb, 0x67, 0xea, 0xab, 0x99, 0xa5,
	0x33, 0x2f, 0xaa, 0xe5, 0x8e, 0xf0, 0x7d, 0x68, 0xca, 0x97, 0x4c, 0x73, 0xda, 0x9d, 0xba, 0x4b,
	0x3b, 0x77, 0x6a, 0x04, 0x2c, 0x66, 0x70, 0x4e, 0xa5, 0xae, 0x49, 0xaa, 0xaf, 0xe4, 0xfc, 0x17,
	0x82, 0xf4, 0x75, 0xcf, 0xb9, 0x33, 0xa3, 0x21, 0x92, 0x6a, 0x36, 0x60, 0x3a, 0x7d, 0xb3, 0x2f,
	0x47, 0xbf, 0x64, 0x5c, 0x49, 0x9c, 0x7b, 0x75, 0x44, 0x4c, 0x6e, 0x5a, 0x25, 0x2f, 0xf4, 0xe4,
	0xac, 0x3e, 0x43, 0x77, 0xe8, 0x72, 0x56, 0x9f, 0xac, 0xdb, 0x41, 0x5f, 0x85, 0x86, 0x74, 0x03,
	0x25, 0x47, 0x4a, 0x93, 0x57, 0x6b, 0x72, 0xa4, 0x74, 0xe8, 0x22, 0x0b, 0x8e, 0x8f, 0x1e, 0x85,
	0x69, 0xf8, 0x4a, 0x61, 0xbb, 0x24, 0xdb, 0xf0, 0xcc, 0x68, 0x88, 0x9c, 0x1f, 0xe9, 0xb0, 0xf0,
	0x1c, 0x7e, 0x64, 0x44, 0xec, 0xe7, 0xf0, 0x23, 0x3b, 0xce, 0xdc, 0x84, 0x99, 0xa1, 0xf8, 0xe6,
	0x1c, 0x15, 0x9b, 0xac, 0xe4, 0xb5, 0x1c, 0xe9, 0xca, 0x8c, 0x95, 0xfe, 0x32, 0xa9, 0x85, 0x1e,
	0x53, 0xef, 0xb1, 0x96, 0x7c, 0xc5, 0x3b, 0x9d, 0x0e, 0xb7, 0x7c, 0x22, 0x7a, 0x1e, 0x3c, 0x9f,
	0x13, 0xbe, 0x39, 0x12, 0xd9, 0xf3, 0x05, 0x38, 0x39, 0x01, 0xa1, 0x5f, 0x03, 0x90, 0xda, 0x9e,
	0x6f, 0x82, 0x25, 0x2b, 0x3a, 0x3d, 0x12, 0x1e, 0xa1, 0x7f, 0x13, 0x66, 0xd3, 0xf5, 0x2f, 0xda,
	0xf6, 0x13, 0x0d, 0xd2, 0x2a, 0xa8, 0x88, 0x87, 0x73, 0x1c, 0x1c, 0x1b, 0xdf, 0xa5, 0x71, 0x1c,
	0x07, 0x44, 0xef, 0x3a, 0x4c, 0x2d, 0xd9, 0x6e, 0x80, 0x0f, 0xae, 0x79, 0x4b, 0x86, 0xd3, 0xc1,
	0xf6, 0x01, 0xd1, 0xe3, 0x06, 0x97, 0x38, 0xa2, 0xce, 0x37, 0xb8, 0x62, 0x0f, 0x6e, 0x81, 0xc1,
	0x95, 0x38, 0x7d, 0x63, 0x06, 0x97, 0xa0, 0xac, 0xe7, 0x69, 0x33, 0x89, 0xf0, 0xae, 0x06, 0x57,
	0x31, 0xb1, 0xc4, 0x59, 0xca, 0xee, 0x06, 0x97, 0x20, 0x56, 0x64, 0x70, 0x8d, 0x46, 0x2f, 0xe1,
	0xe3, 0x2e, 0xb4, 0x8f, 0x46, 0xa0, 0x17, 0x1b, 0x5c, 0x07, 0x44, 0xf0, 0x1a, 0x34, 0x6e, 0xe1,
	0xb0, 0xef, 0x71, 0x3f, 0xe5, 0xb1, 0x02, 0x8f, 0x56, 0x11, 0x99, 0x36, 0x4c, 0x24, 0x3c, 0x86,
	0x39, 0xcd, 0x4a, 0x3b, 0x39, 0xe7, 0x5e, 0x19, 0x05, 0x8d, 0xc8, 0xcb, 0x5d, 0x80, 0xd8, 0x4f,
	0x97, 0xc3, 0xe2, 0x84, 0xf3, 0x71, 0xee, 0xc4, 0xae, 0x38, 0x84, 0xae, 0x03, 0x47, 0xb8, 0xf7,
	0x8b, 0xf9, 0xcb, 0x9f, 0xb6, 0x3d, 0xf1, 0x4d, 0x78, 0x3e, 0xc7, 0xdb, 0xa6, 0x9e, 0xdb, 0x9b,
	0x6f, 0x2e, 0x4f, 0x8b, 0x17, 0x39, 0xf3, 0x5a, 0xcf, 0xfd, 0xf8, 0xa3, 0x63, 0xca, 0x3f, 0x7d,
	0x74, 0x4c, 0xf9, 0xf7, 0x8f, 0x8e, 0x29, 0x7f, 0xf4, 0xf3, 0x63, 0x87, 0xee, 0x95, 0x0d, 0xcf,
	0x5a, 0x1b, 0xa3, 0xec, 0xbc, 0xf8, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xf7, 0x29, 0x46,
	0xbf, 0x73, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagementClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	AuthZ(ctx context.Context, in *AuthZReq, opts ...grpc.CallOption) (*AuthZReply, error)
	Gateway(ctx context.Context, in *AuthZReq, opts ...grpc.CallOption) (*GatewayReply, error)
	GatewayProfile(ctx context.Context, in *GatewayProfileReq, opts ...grpc.CallOption) (*GatewayProfileReply, error)
	AddGateway(ctx context.Context, in *SetGatewayReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateGateway(ctx context.Context, in *SetGatewayReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteGateway(ctx context.Context, in *DeleteGatewayReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EnableALLGatewayConfig(ctx context.Context, in *UpdateALLGatewayConfigReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DisableALLGatewayConfig(ctx context.Context, in *UpdateALLGatewayConfigReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EnableAllGRPCGatewayConfig(ctx context.Context, in *UpdateALLGatewayConfigReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DisableAllGRPCGatewayConfig(ctx context.Context, in *UpdateALLGatewayConfigReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ListBreakerAPI(ctx context.Context, in *ListBreakerAPIReq, opts ...grpc.CallOption) (*ListBreakerAPIReply, error)
	SetBreakerAPI(ctx context.Context, in *SetBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateBreakerAPI(ctx context.Context, in *SetBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EnableBreakerAPI(ctx context.Context, in *EnableBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DisableBreakerAPI(ctx context.Context, in *EnableBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteBreakerAPI(ctx context.Context, in *DeleteBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ListDynPath(ctx context.Context, in *ListDynPathReq, opts ...grpc.CallOption) (*ListDynPathReply, error)
	AddDynPath(ctx context.Context, in *SetDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateDynPath(ctx context.Context, in *SetDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteDynPath(ctx context.Context, in *DeleteDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EnableDynPath(ctx context.Context, in *EnableDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DisableDynPath(ctx context.Context, in *EnableDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ListLog(ctx context.Context, in *ListLogReq, opts ...grpc.CallOption) (*ListLogReply, error)
	ExecuteTask(ctx context.Context, in *ExecuteTaskReq, opts ...grpc.CallOption) (*ExecuteTaskReply, error)
	GatewayProxy(ctx context.Context, in *GatewayProxyReq, opts ...grpc.CallOption) (*GatewayProxyReply, error)
	InitGatewayConfigs(ctx context.Context, in *InitGatewayConfigsReq, opts ...grpc.CallOption) (*empty.Empty, error)
	AppPromptAPI(ctx context.Context, in *AppPromptAPIReq, opts ...grpc.CallOption) (*AppPromptAPIReply, error)
	ConfigPromptAPI(ctx context.Context, in *ConfigPromptAPIReq, opts ...grpc.CallOption) (*ConfigPromptAPIReply, error)
	AppPathPromptAPI(ctx context.Context, in *AppPathPromptAPIReq, opts ...grpc.CallOption) (*AppPathPromptAPIReply, error)
	SnapshotAction(ctx context.Context, in *SnapshotActionReq, opts ...grpc.CallOption) (*SnapshotActionReply, error)
	AddSnapshot(ctx context.Context, in *AddSnapshotReq, opts ...grpc.CallOption) (*AddSnapshotReply, error)
	SnapshotProfile(ctx context.Context, in *SnapshotProfileReq, opts ...grpc.CallOption) (*SnapshotProfileReply, error)
	CreateDeployment(ctx context.Context, in *CreateDeploymentReq, opts ...grpc.CallOption) (*CreateDeploymentReply, error)
	CompareDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*CompareDeploymentReply, error)
	ConfirmDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeployDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeployDeploymentProfile(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*DeployDeploymentProfileReply, error)
	Deployment(ctx context.Context, in *ListDeploymentReq, opts ...grpc.CallOption) (*ListDeploymentReply, error)
	DeployDeploymentAll(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	RollbackDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	FinishDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	CloseDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	CancelDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ListLimiter(ctx context.Context, in *ListLimiterReq, opts ...grpc.CallOption) (*ListLimiterReply, error)
	AddLimiter(ctx context.Context, in *AddLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateLimiter(ctx context.Context, in *SetLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteLimiter(ctx context.Context, in *DeleteLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EnableLimiter(ctx context.Context, in *EnableLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DisableLimiter(ctx context.Context, in *EnableLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SetupPlugin(ctx context.Context, in *PluginReq, opts ...grpc.CallOption) (*empty.Empty, error)
	ZonePromptAPI(ctx context.Context, in *ZonePromptAPIReq, opts ...grpc.CallOption) (*ZonePromptAPIReply, error)
	PluginList(ctx context.Context, in *PluginListReq, opts ...grpc.CallOption) (*PluginListReply, error)
	GRPCAppMethodPromptAPI(ctx context.Context, in *AppPathPromptAPIReq, opts ...grpc.CallOption) (*AppPathPromptAPIReply, error)
	GRPCAppPackagePromptAPI(ctx context.Context, in *GRPCAppPackagePromptAPIReq, opts ...grpc.CallOption) (*GRPCAppPackagePromptAPIReply, error)
}

type managementClient struct {
	cc *grpc.ClientConn
}

func NewManagementClient(cc *grpc.ClientConn) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AuthZ(ctx context.Context, in *AuthZReq, opts ...grpc.CallOption) (*AuthZReply, error) {
	out := new(AuthZReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/AuthZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Gateway(ctx context.Context, in *AuthZReq, opts ...grpc.CallOption) (*GatewayReply, error) {
	out := new(GatewayReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/Gateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GatewayProfile(ctx context.Context, in *GatewayProfileReq, opts ...grpc.CallOption) (*GatewayProfileReply, error) {
	out := new(GatewayProfileReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/GatewayProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddGateway(ctx context.Context, in *SetGatewayReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/AddGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateGateway(ctx context.Context, in *SetGatewayReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/UpdateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteGateway(ctx context.Context, in *DeleteGatewayReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DeleteGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) EnableALLGatewayConfig(ctx context.Context, in *UpdateALLGatewayConfigReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/EnableALLGatewayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DisableALLGatewayConfig(ctx context.Context, in *UpdateALLGatewayConfigReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DisableALLGatewayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) EnableAllGRPCGatewayConfig(ctx context.Context, in *UpdateALLGatewayConfigReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/EnableAllGRPCGatewayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DisableAllGRPCGatewayConfig(ctx context.Context, in *UpdateALLGatewayConfigReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DisableAllGRPCGatewayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListBreakerAPI(ctx context.Context, in *ListBreakerAPIReq, opts ...grpc.CallOption) (*ListBreakerAPIReply, error) {
	out := new(ListBreakerAPIReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/ListBreakerAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SetBreakerAPI(ctx context.Context, in *SetBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/SetBreakerAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateBreakerAPI(ctx context.Context, in *SetBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/UpdateBreakerAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) EnableBreakerAPI(ctx context.Context, in *EnableBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/EnableBreakerAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DisableBreakerAPI(ctx context.Context, in *EnableBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DisableBreakerAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteBreakerAPI(ctx context.Context, in *DeleteBreakerAPIReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DeleteBreakerAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListDynPath(ctx context.Context, in *ListDynPathReq, opts ...grpc.CallOption) (*ListDynPathReply, error) {
	out := new(ListDynPathReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/ListDynPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddDynPath(ctx context.Context, in *SetDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/AddDynPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateDynPath(ctx context.Context, in *SetDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/UpdateDynPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteDynPath(ctx context.Context, in *DeleteDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DeleteDynPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) EnableDynPath(ctx context.Context, in *EnableDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/EnableDynPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DisableDynPath(ctx context.Context, in *EnableDynPathReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DisableDynPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListLog(ctx context.Context, in *ListLogReq, opts ...grpc.CallOption) (*ListLogReply, error) {
	out := new(ListLogReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/ListLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ExecuteTask(ctx context.Context, in *ExecuteTaskReq, opts ...grpc.CallOption) (*ExecuteTaskReply, error) {
	out := new(ExecuteTaskReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/ExecuteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GatewayProxy(ctx context.Context, in *GatewayProxyReq, opts ...grpc.CallOption) (*GatewayProxyReply, error) {
	out := new(GatewayProxyReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/GatewayProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) InitGatewayConfigs(ctx context.Context, in *InitGatewayConfigsReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/InitGatewayConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AppPromptAPI(ctx context.Context, in *AppPromptAPIReq, opts ...grpc.CallOption) (*AppPromptAPIReply, error) {
	out := new(AppPromptAPIReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/AppPromptAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ConfigPromptAPI(ctx context.Context, in *ConfigPromptAPIReq, opts ...grpc.CallOption) (*ConfigPromptAPIReply, error) {
	out := new(ConfigPromptAPIReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/ConfigPromptAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AppPathPromptAPI(ctx context.Context, in *AppPathPromptAPIReq, opts ...grpc.CallOption) (*AppPathPromptAPIReply, error) {
	out := new(AppPathPromptAPIReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/AppPathPromptAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SnapshotAction(ctx context.Context, in *SnapshotActionReq, opts ...grpc.CallOption) (*SnapshotActionReply, error) {
	out := new(SnapshotActionReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/SnapshotAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddSnapshot(ctx context.Context, in *AddSnapshotReq, opts ...grpc.CallOption) (*AddSnapshotReply, error) {
	out := new(AddSnapshotReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/AddSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SnapshotProfile(ctx context.Context, in *SnapshotProfileReq, opts ...grpc.CallOption) (*SnapshotProfileReply, error) {
	out := new(SnapshotProfileReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/SnapshotProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateDeployment(ctx context.Context, in *CreateDeploymentReq, opts ...grpc.CallOption) (*CreateDeploymentReply, error) {
	out := new(CreateDeploymentReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CompareDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*CompareDeploymentReply, error) {
	out := new(CompareDeploymentReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/CompareDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ConfirmDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/ConfirmDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeployDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DeployDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeployDeploymentProfile(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*DeployDeploymentProfileReply, error) {
	out := new(DeployDeploymentProfileReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DeployDeploymentProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) Deployment(ctx context.Context, in *ListDeploymentReq, opts ...grpc.CallOption) (*ListDeploymentReply, error) {
	out := new(ListDeploymentReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/Deployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeployDeploymentAll(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DeployDeploymentAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) RollbackDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/RollbackDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) FinishDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/FinishDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CloseDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/CloseDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CancelDeployment(ctx context.Context, in *DeploymentReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/CancelDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ListLimiter(ctx context.Context, in *ListLimiterReq, opts ...grpc.CallOption) (*ListLimiterReply, error) {
	out := new(ListLimiterReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/ListLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddLimiter(ctx context.Context, in *AddLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/AddLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateLimiter(ctx context.Context, in *SetLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/UpdateLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteLimiter(ctx context.Context, in *DeleteLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DeleteLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) EnableLimiter(ctx context.Context, in *EnableLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/EnableLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DisableLimiter(ctx context.Context, in *EnableLimiterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/DisableLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) SetupPlugin(ctx context.Context, in *PluginReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/SetupPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) ZonePromptAPI(ctx context.Context, in *ZonePromptAPIReq, opts ...grpc.CallOption) (*ZonePromptAPIReply, error) {
	out := new(ZonePromptAPIReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/ZonePromptAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) PluginList(ctx context.Context, in *PluginListReq, opts ...grpc.CallOption) (*PluginListReply, error) {
	out := new(PluginListReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/PluginList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GRPCAppMethodPromptAPI(ctx context.Context, in *AppPathPromptAPIReq, opts ...grpc.CallOption) (*AppPathPromptAPIReply, error) {
	out := new(AppPathPromptAPIReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/GRPCAppMethodPromptAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GRPCAppPackagePromptAPI(ctx context.Context, in *GRPCAppPackagePromptAPIReq, opts ...grpc.CallOption) (*GRPCAppPackagePromptAPIReply, error) {
	out := new(GRPCAppPackagePromptAPIReply)
	err := c.cc.Invoke(ctx, "/appgw.management.v1.Management/GRPCAppPackagePromptAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
type ManagementServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	AuthZ(context.Context, *AuthZReq) (*AuthZReply, error)
	Gateway(context.Context, *AuthZReq) (*GatewayReply, error)
	GatewayProfile(context.Context, *GatewayProfileReq) (*GatewayProfileReply, error)
	AddGateway(context.Context, *SetGatewayReq) (*empty.Empty, error)
	UpdateGateway(context.Context, *SetGatewayReq) (*empty.Empty, error)
	DeleteGateway(context.Context, *DeleteGatewayReq) (*empty.Empty, error)
	EnableALLGatewayConfig(context.Context, *UpdateALLGatewayConfigReq) (*empty.Empty, error)
	DisableALLGatewayConfig(context.Context, *UpdateALLGatewayConfigReq) (*empty.Empty, error)
	EnableAllGRPCGatewayConfig(context.Context, *UpdateALLGatewayConfigReq) (*empty.Empty, error)
	DisableAllGRPCGatewayConfig(context.Context, *UpdateALLGatewayConfigReq) (*empty.Empty, error)
	ListBreakerAPI(context.Context, *ListBreakerAPIReq) (*ListBreakerAPIReply, error)
	SetBreakerAPI(context.Context, *SetBreakerAPIReq) (*empty.Empty, error)
	UpdateBreakerAPI(context.Context, *SetBreakerAPIReq) (*empty.Empty, error)
	EnableBreakerAPI(context.Context, *EnableBreakerAPIReq) (*empty.Empty, error)
	DisableBreakerAPI(context.Context, *EnableBreakerAPIReq) (*empty.Empty, error)
	DeleteBreakerAPI(context.Context, *DeleteBreakerAPIReq) (*empty.Empty, error)
	ListDynPath(context.Context, *ListDynPathReq) (*ListDynPathReply, error)
	AddDynPath(context.Context, *SetDynPathReq) (*empty.Empty, error)
	UpdateDynPath(context.Context, *SetDynPathReq) (*empty.Empty, error)
	DeleteDynPath(context.Context, *DeleteDynPathReq) (*empty.Empty, error)
	EnableDynPath(context.Context, *EnableDynPathReq) (*empty.Empty, error)
	DisableDynPath(context.Context, *EnableDynPathReq) (*empty.Empty, error)
	ListLog(context.Context, *ListLogReq) (*ListLogReply, error)
	ExecuteTask(context.Context, *ExecuteTaskReq) (*ExecuteTaskReply, error)
	GatewayProxy(context.Context, *GatewayProxyReq) (*GatewayProxyReply, error)
	InitGatewayConfigs(context.Context, *InitGatewayConfigsReq) (*empty.Empty, error)
	AppPromptAPI(context.Context, *AppPromptAPIReq) (*AppPromptAPIReply, error)
	ConfigPromptAPI(context.Context, *ConfigPromptAPIReq) (*ConfigPromptAPIReply, error)
	AppPathPromptAPI(context.Context, *AppPathPromptAPIReq) (*AppPathPromptAPIReply, error)
	SnapshotAction(context.Context, *SnapshotActionReq) (*SnapshotActionReply, error)
	AddSnapshot(context.Context, *AddSnapshotReq) (*AddSnapshotReply, error)
	SnapshotProfile(context.Context, *SnapshotProfileReq) (*SnapshotProfileReply, error)
	CreateDeployment(context.Context, *CreateDeploymentReq) (*CreateDeploymentReply, error)
	CompareDeployment(context.Context, *DeploymentReq) (*CompareDeploymentReply, error)
	ConfirmDeployment(context.Context, *DeploymentReq) (*empty.Empty, error)
	DeployDeployment(context.Context, *DeploymentReq) (*empty.Empty, error)
	DeployDeploymentProfile(context.Context, *DeploymentReq) (*DeployDeploymentProfileReply, error)
	Deployment(context.Context, *ListDeploymentReq) (*ListDeploymentReply, error)
	DeployDeploymentAll(context.Context, *DeploymentReq) (*empty.Empty, error)
	RollbackDeployment(context.Context, *DeploymentReq) (*empty.Empty, error)
	FinishDeployment(context.Context, *DeploymentReq) (*empty.Empty, error)
	CloseDeployment(context.Context, *DeploymentReq) (*empty.Empty, error)
	CancelDeployment(context.Context, *DeploymentReq) (*empty.Empty, error)
	ListLimiter(context.Context, *ListLimiterReq) (*ListLimiterReply, error)
	AddLimiter(context.Context, *AddLimiterReq) (*empty.Empty, error)
	UpdateLimiter(context.Context, *SetLimiterReq) (*empty.Empty, error)
	DeleteLimiter(context.Context, *DeleteLimiterReq) (*empty.Empty, error)
	EnableLimiter(context.Context, *EnableLimiterReq) (*empty.Empty, error)
	DisableLimiter(context.Context, *EnableLimiterReq) (*empty.Empty, error)
	SetupPlugin(context.Context, *PluginReq) (*empty.Empty, error)
	ZonePromptAPI(context.Context, *ZonePromptAPIReq) (*ZonePromptAPIReply, error)
	PluginList(context.Context, *PluginListReq) (*PluginListReply, error)
	GRPCAppMethodPromptAPI(context.Context, *AppPathPromptAPIReq) (*AppPathPromptAPIReply, error)
	GRPCAppPackagePromptAPI(context.Context, *GRPCAppPackagePromptAPIReq) (*GRPCAppPackagePromptAPIReply, error)
}

// UnimplementedManagementServer can be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (*UnimplementedManagementServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedManagementServer) AuthZ(ctx context.Context, req *AuthZReq) (*AuthZReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthZ not implemented")
}
func (*UnimplementedManagementServer) Gateway(ctx context.Context, req *AuthZReq) (*GatewayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gateway not implemented")
}
func (*UnimplementedManagementServer) GatewayProfile(ctx context.Context, req *GatewayProfileReq) (*GatewayProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayProfile not implemented")
}
func (*UnimplementedManagementServer) AddGateway(ctx context.Context, req *SetGatewayReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGateway not implemented")
}
func (*UnimplementedManagementServer) UpdateGateway(ctx context.Context, req *SetGatewayReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}
func (*UnimplementedManagementServer) DeleteGateway(ctx context.Context, req *DeleteGatewayReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGateway not implemented")
}
func (*UnimplementedManagementServer) EnableALLGatewayConfig(ctx context.Context, req *UpdateALLGatewayConfigReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableALLGatewayConfig not implemented")
}
func (*UnimplementedManagementServer) DisableALLGatewayConfig(ctx context.Context, req *UpdateALLGatewayConfigReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableALLGatewayConfig not implemented")
}
func (*UnimplementedManagementServer) EnableAllGRPCGatewayConfig(ctx context.Context, req *UpdateALLGatewayConfigReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAllGRPCGatewayConfig not implemented")
}
func (*UnimplementedManagementServer) DisableAllGRPCGatewayConfig(ctx context.Context, req *UpdateALLGatewayConfigReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAllGRPCGatewayConfig not implemented")
}
func (*UnimplementedManagementServer) ListBreakerAPI(ctx context.Context, req *ListBreakerAPIReq) (*ListBreakerAPIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBreakerAPI not implemented")
}
func (*UnimplementedManagementServer) SetBreakerAPI(ctx context.Context, req *SetBreakerAPIReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBreakerAPI not implemented")
}
func (*UnimplementedManagementServer) UpdateBreakerAPI(ctx context.Context, req *SetBreakerAPIReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBreakerAPI not implemented")
}
func (*UnimplementedManagementServer) EnableBreakerAPI(ctx context.Context, req *EnableBreakerAPIReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableBreakerAPI not implemented")
}
func (*UnimplementedManagementServer) DisableBreakerAPI(ctx context.Context, req *EnableBreakerAPIReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBreakerAPI not implemented")
}
func (*UnimplementedManagementServer) DeleteBreakerAPI(ctx context.Context, req *DeleteBreakerAPIReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBreakerAPI not implemented")
}
func (*UnimplementedManagementServer) ListDynPath(ctx context.Context, req *ListDynPathReq) (*ListDynPathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDynPath not implemented")
}
func (*UnimplementedManagementServer) AddDynPath(ctx context.Context, req *SetDynPathReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDynPath not implemented")
}
func (*UnimplementedManagementServer) UpdateDynPath(ctx context.Context, req *SetDynPathReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDynPath not implemented")
}
func (*UnimplementedManagementServer) DeleteDynPath(ctx context.Context, req *DeleteDynPathReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDynPath not implemented")
}
func (*UnimplementedManagementServer) EnableDynPath(ctx context.Context, req *EnableDynPathReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDynPath not implemented")
}
func (*UnimplementedManagementServer) DisableDynPath(ctx context.Context, req *EnableDynPathReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableDynPath not implemented")
}
func (*UnimplementedManagementServer) ListLog(ctx context.Context, req *ListLogReq) (*ListLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLog not implemented")
}
func (*UnimplementedManagementServer) ExecuteTask(ctx context.Context, req *ExecuteTaskReq) (*ExecuteTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (*UnimplementedManagementServer) GatewayProxy(ctx context.Context, req *GatewayProxyReq) (*GatewayProxyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayProxy not implemented")
}
func (*UnimplementedManagementServer) InitGatewayConfigs(ctx context.Context, req *InitGatewayConfigsReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitGatewayConfigs not implemented")
}
func (*UnimplementedManagementServer) AppPromptAPI(ctx context.Context, req *AppPromptAPIReq) (*AppPromptAPIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppPromptAPI not implemented")
}
func (*UnimplementedManagementServer) ConfigPromptAPI(ctx context.Context, req *ConfigPromptAPIReq) (*ConfigPromptAPIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigPromptAPI not implemented")
}
func (*UnimplementedManagementServer) AppPathPromptAPI(ctx context.Context, req *AppPathPromptAPIReq) (*AppPathPromptAPIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppPathPromptAPI not implemented")
}
func (*UnimplementedManagementServer) SnapshotAction(ctx context.Context, req *SnapshotActionReq) (*SnapshotActionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotAction not implemented")
}
func (*UnimplementedManagementServer) AddSnapshot(ctx context.Context, req *AddSnapshotReq) (*AddSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSnapshot not implemented")
}
func (*UnimplementedManagementServer) SnapshotProfile(ctx context.Context, req *SnapshotProfileReq) (*SnapshotProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotProfile not implemented")
}
func (*UnimplementedManagementServer) CreateDeployment(ctx context.Context, req *CreateDeploymentReq) (*CreateDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (*UnimplementedManagementServer) CompareDeployment(ctx context.Context, req *DeploymentReq) (*CompareDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareDeployment not implemented")
}
func (*UnimplementedManagementServer) ConfirmDeployment(ctx context.Context, req *DeploymentReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDeployment not implemented")
}
func (*UnimplementedManagementServer) DeployDeployment(ctx context.Context, req *DeploymentReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployDeployment not implemented")
}
func (*UnimplementedManagementServer) DeployDeploymentProfile(ctx context.Context, req *DeploymentReq) (*DeployDeploymentProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployDeploymentProfile not implemented")
}
func (*UnimplementedManagementServer) Deployment(ctx context.Context, req *ListDeploymentReq) (*ListDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deployment not implemented")
}
func (*UnimplementedManagementServer) DeployDeploymentAll(ctx context.Context, req *DeploymentReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployDeploymentAll not implemented")
}
func (*UnimplementedManagementServer) RollbackDeployment(ctx context.Context, req *DeploymentReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackDeployment not implemented")
}
func (*UnimplementedManagementServer) FinishDeployment(ctx context.Context, req *DeploymentReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishDeployment not implemented")
}
func (*UnimplementedManagementServer) CloseDeployment(ctx context.Context, req *DeploymentReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseDeployment not implemented")
}
func (*UnimplementedManagementServer) CancelDeployment(ctx context.Context, req *DeploymentReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDeployment not implemented")
}
func (*UnimplementedManagementServer) ListLimiter(ctx context.Context, req *ListLimiterReq) (*ListLimiterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLimiter not implemented")
}
func (*UnimplementedManagementServer) AddLimiter(ctx context.Context, req *AddLimiterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLimiter not implemented")
}
func (*UnimplementedManagementServer) UpdateLimiter(ctx context.Context, req *SetLimiterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLimiter not implemented")
}
func (*UnimplementedManagementServer) DeleteLimiter(ctx context.Context, req *DeleteLimiterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLimiter not implemented")
}
func (*UnimplementedManagementServer) EnableLimiter(ctx context.Context, req *EnableLimiterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableLimiter not implemented")
}
func (*UnimplementedManagementServer) DisableLimiter(ctx context.Context, req *EnableLimiterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableLimiter not implemented")
}
func (*UnimplementedManagementServer) SetupPlugin(ctx context.Context, req *PluginReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupPlugin not implemented")
}
func (*UnimplementedManagementServer) ZonePromptAPI(ctx context.Context, req *ZonePromptAPIReq) (*ZonePromptAPIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZonePromptAPI not implemented")
}
func (*UnimplementedManagementServer) PluginList(ctx context.Context, req *PluginListReq) (*PluginListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginList not implemented")
}
func (*UnimplementedManagementServer) GRPCAppMethodPromptAPI(ctx context.Context, req *AppPathPromptAPIReq) (*AppPathPromptAPIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCAppMethodPromptAPI not implemented")
}
func (*UnimplementedManagementServer) GRPCAppPackagePromptAPI(ctx context.Context, req *GRPCAppPackagePromptAPIReq) (*GRPCAppPackagePromptAPIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCAppPackagePromptAPI not implemented")
}

func RegisterManagementServer(s *grpc.Server, srv ManagementServer) {
	s.RegisterService(&_Management_serviceDesc, srv)
}

func _Management_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AuthZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthZReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AuthZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/AuthZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AuthZ(ctx, req.(*AuthZReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Gateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthZReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Gateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/Gateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Gateway(ctx, req.(*AuthZReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/GatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GatewayProfile(ctx, req.(*GatewayProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/AddGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddGateway(ctx, req.(*SetGatewayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateGateway(ctx, req.(*SetGatewayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteGateway(ctx, req.(*DeleteGatewayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_EnableALLGatewayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateALLGatewayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).EnableALLGatewayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/EnableALLGatewayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).EnableALLGatewayConfig(ctx, req.(*UpdateALLGatewayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DisableALLGatewayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateALLGatewayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DisableALLGatewayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DisableALLGatewayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DisableALLGatewayConfig(ctx, req.(*UpdateALLGatewayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_EnableAllGRPCGatewayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateALLGatewayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).EnableAllGRPCGatewayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/EnableAllGRPCGatewayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).EnableAllGRPCGatewayConfig(ctx, req.(*UpdateALLGatewayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DisableAllGRPCGatewayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateALLGatewayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DisableAllGRPCGatewayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DisableAllGRPCGatewayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DisableAllGRPCGatewayConfig(ctx, req.(*UpdateALLGatewayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListBreakerAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBreakerAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListBreakerAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/ListBreakerAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListBreakerAPI(ctx, req.(*ListBreakerAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SetBreakerAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBreakerAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SetBreakerAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/SetBreakerAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SetBreakerAPI(ctx, req.(*SetBreakerAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateBreakerAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBreakerAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateBreakerAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/UpdateBreakerAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateBreakerAPI(ctx, req.(*SetBreakerAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_EnableBreakerAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableBreakerAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).EnableBreakerAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/EnableBreakerAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).EnableBreakerAPI(ctx, req.(*EnableBreakerAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DisableBreakerAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableBreakerAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DisableBreakerAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DisableBreakerAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DisableBreakerAPI(ctx, req.(*EnableBreakerAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteBreakerAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBreakerAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteBreakerAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DeleteBreakerAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteBreakerAPI(ctx, req.(*DeleteBreakerAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListDynPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDynPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListDynPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/ListDynPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListDynPath(ctx, req.(*ListDynPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddDynPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDynPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddDynPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/AddDynPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddDynPath(ctx, req.(*SetDynPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateDynPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDynPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateDynPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/UpdateDynPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateDynPath(ctx, req.(*SetDynPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteDynPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDynPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteDynPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DeleteDynPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteDynPath(ctx, req.(*DeleteDynPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_EnableDynPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableDynPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).EnableDynPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/EnableDynPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).EnableDynPath(ctx, req.(*EnableDynPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DisableDynPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableDynPathReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DisableDynPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DisableDynPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DisableDynPath(ctx, req.(*EnableDynPathReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/ListLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListLog(ctx, req.(*ListLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ExecuteTask(ctx, req.(*ExecuteTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GatewayProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayProxyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GatewayProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/GatewayProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GatewayProxy(ctx, req.(*GatewayProxyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_InitGatewayConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitGatewayConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).InitGatewayConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/InitGatewayConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).InitGatewayConfigs(ctx, req.(*InitGatewayConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AppPromptAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPromptAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AppPromptAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/AppPromptAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AppPromptAPI(ctx, req.(*AppPromptAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ConfigPromptAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigPromptAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ConfigPromptAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/ConfigPromptAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ConfigPromptAPI(ctx, req.(*ConfigPromptAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AppPathPromptAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPathPromptAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AppPathPromptAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/AppPathPromptAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AppPathPromptAPI(ctx, req.(*AppPathPromptAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SnapshotAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SnapshotAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/SnapshotAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SnapshotAction(ctx, req.(*SnapshotActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSnapshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/AddSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddSnapshot(ctx, req.(*AddSnapshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SnapshotProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SnapshotProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/SnapshotProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SnapshotProfile(ctx, req.(*SnapshotProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateDeployment(ctx, req.(*CreateDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CompareDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CompareDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/CompareDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CompareDeployment(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ConfirmDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ConfirmDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/ConfirmDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ConfirmDeployment(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeployDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeployDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DeployDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeployDeployment(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeployDeploymentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeployDeploymentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DeployDeploymentProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeployDeploymentProfile(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_Deployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).Deployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/Deployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).Deployment(ctx, req.(*ListDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeployDeploymentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeployDeploymentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DeployDeploymentAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeployDeploymentAll(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_RollbackDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).RollbackDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/RollbackDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).RollbackDeployment(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_FinishDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).FinishDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/FinishDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).FinishDeployment(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CloseDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CloseDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/CloseDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CloseDeployment(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CancelDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CancelDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/CancelDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CancelDeployment(ctx, req.(*DeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ListLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLimiterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ListLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/ListLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ListLimiter(ctx, req.(*ListLimiterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLimiterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/AddLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddLimiter(ctx, req.(*AddLimiterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLimiterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/UpdateLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateLimiter(ctx, req.(*SetLimiterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLimiterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DeleteLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteLimiter(ctx, req.(*DeleteLimiterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_EnableLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableLimiterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).EnableLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/EnableLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).EnableLimiter(ctx, req.(*EnableLimiterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DisableLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableLimiterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DisableLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/DisableLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DisableLimiter(ctx, req.(*EnableLimiterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_SetupPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).SetupPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/SetupPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).SetupPlugin(ctx, req.(*PluginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_ZonePromptAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZonePromptAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).ZonePromptAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/ZonePromptAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).ZonePromptAPI(ctx, req.(*ZonePromptAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_PluginList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).PluginList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/PluginList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).PluginList(ctx, req.(*PluginListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GRPCAppMethodPromptAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPathPromptAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GRPCAppMethodPromptAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/GRPCAppMethodPromptAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GRPCAppMethodPromptAPI(ctx, req.(*AppPathPromptAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GRPCAppPackagePromptAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCAppPackagePromptAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GRPCAppPackagePromptAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appgw.management.v1.Management/GRPCAppPackagePromptAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GRPCAppPackagePromptAPI(ctx, req.(*GRPCAppPackagePromptAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Management_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appgw.management.v1.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Management_Ping_Handler,
		},
		{
			MethodName: "AuthZ",
			Handler:    _Management_AuthZ_Handler,
		},
		{
			MethodName: "Gateway",
			Handler:    _Management_Gateway_Handler,
		},
		{
			MethodName: "GatewayProfile",
			Handler:    _Management_GatewayProfile_Handler,
		},
		{
			MethodName: "AddGateway",
			Handler:    _Management_AddGateway_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _Management_UpdateGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _Management_DeleteGateway_Handler,
		},
		{
			MethodName: "EnableALLGatewayConfig",
			Handler:    _Management_EnableALLGatewayConfig_Handler,
		},
		{
			MethodName: "DisableALLGatewayConfig",
			Handler:    _Management_DisableALLGatewayConfig_Handler,
		},
		{
			MethodName: "EnableAllGRPCGatewayConfig",
			Handler:    _Management_EnableAllGRPCGatewayConfig_Handler,
		},
		{
			MethodName: "DisableAllGRPCGatewayConfig",
			Handler:    _Management_DisableAllGRPCGatewayConfig_Handler,
		},
		{
			MethodName: "ListBreakerAPI",
			Handler:    _Management_ListBreakerAPI_Handler,
		},
		{
			MethodName: "SetBreakerAPI",
			Handler:    _Management_SetBreakerAPI_Handler,
		},
		{
			MethodName: "UpdateBreakerAPI",
			Handler:    _Management_UpdateBreakerAPI_Handler,
		},
		{
			MethodName: "EnableBreakerAPI",
			Handler:    _Management_EnableBreakerAPI_Handler,
		},
		{
			MethodName: "DisableBreakerAPI",
			Handler:    _Management_DisableBreakerAPI_Handler,
		},
		{
			MethodName: "DeleteBreakerAPI",
			Handler:    _Management_DeleteBreakerAPI_Handler,
		},
		{
			MethodName: "ListDynPath",
			Handler:    _Management_ListDynPath_Handler,
		},
		{
			MethodName: "AddDynPath",
			Handler:    _Management_AddDynPath_Handler,
		},
		{
			MethodName: "UpdateDynPath",
			Handler:    _Management_UpdateDynPath_Handler,
		},
		{
			MethodName: "DeleteDynPath",
			Handler:    _Management_DeleteDynPath_Handler,
		},
		{
			MethodName: "EnableDynPath",
			Handler:    _Management_EnableDynPath_Handler,
		},
		{
			MethodName: "DisableDynPath",
			Handler:    _Management_DisableDynPath_Handler,
		},
		{
			MethodName: "ListLog",
			Handler:    _Management_ListLog_Handler,
		},
		{
			MethodName: "ExecuteTask",
			Handler:    _Management_ExecuteTask_Handler,
		},
		{
			MethodName: "GatewayProxy",
			Handler:    _Management_GatewayProxy_Handler,
		},
		{
			MethodName: "InitGatewayConfigs",
			Handler:    _Management_InitGatewayConfigs_Handler,
		},
		{
			MethodName: "AppPromptAPI",
			Handler:    _Management_AppPromptAPI_Handler,
		},
		{
			MethodName: "ConfigPromptAPI",
			Handler:    _Management_ConfigPromptAPI_Handler,
		},
		{
			MethodName: "AppPathPromptAPI",
			Handler:    _Management_AppPathPromptAPI_Handler,
		},
		{
			MethodName: "SnapshotAction",
			Handler:    _Management_SnapshotAction_Handler,
		},
		{
			MethodName: "AddSnapshot",
			Handler:    _Management_AddSnapshot_Handler,
		},
		{
			MethodName: "SnapshotProfile",
			Handler:    _Management_SnapshotProfile_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _Management_CreateDeployment_Handler,
		},
		{
			MethodName: "CompareDeployment",
			Handler:    _Management_CompareDeployment_Handler,
		},
		{
			MethodName: "ConfirmDeployment",
			Handler:    _Management_ConfirmDeployment_Handler,
		},
		{
			MethodName: "DeployDeployment",
			Handler:    _Management_DeployDeployment_Handler,
		},
		{
			MethodName: "DeployDeploymentProfile",
			Handler:    _Management_DeployDeploymentProfile_Handler,
		},
		{
			MethodName: "Deployment",
			Handler:    _Management_Deployment_Handler,
		},
		{
			MethodName: "DeployDeploymentAll",
			Handler:    _Management_DeployDeploymentAll_Handler,
		},
		{
			MethodName: "RollbackDeployment",
			Handler:    _Management_RollbackDeployment_Handler,
		},
		{
			MethodName: "FinishDeployment",
			Handler:    _Management_FinishDeployment_Handler,
		},
		{
			MethodName: "CloseDeployment",
			Handler:    _Management_CloseDeployment_Handler,
		},
		{
			MethodName: "CancelDeployment",
			Handler:    _Management_CancelDeployment_Handler,
		},
		{
			MethodName: "ListLimiter",
			Handler:    _Management_ListLimiter_Handler,
		},
		{
			MethodName: "AddLimiter",
			Handler:    _Management_AddLimiter_Handler,
		},
		{
			MethodName: "UpdateLimiter",
			Handler:    _Management_UpdateLimiter_Handler,
		},
		{
			MethodName: "DeleteLimiter",
			Handler:    _Management_DeleteLimiter_Handler,
		},
		{
			MethodName: "EnableLimiter",
			Handler:    _Management_EnableLimiter_Handler,
		},
		{
			MethodName: "DisableLimiter",
			Handler:    _Management_DisableLimiter_Handler,
		},
		{
			MethodName: "SetupPlugin",
			Handler:    _Management_SetupPlugin_Handler,
		},
		{
			MethodName: "ZonePromptAPI",
			Handler:    _Management_ZonePromptAPI_Handler,
		},
		{
			MethodName: "PluginList",
			Handler:    _Management_PluginList_Handler,
		},
		{
			MethodName: "GRPCAppMethodPromptAPI",
			Handler:    _Management_GRPCAppMethodPromptAPI_Handler,
		},
		{
			MethodName: "GRPCAppPackagePromptAPI",
			Handler:    _Management_GRPCAppPackagePromptAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-gw/management/api/api.proto",
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthZReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthZReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthZReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GrpcConfigs) > 0 {
		for iNdEx := len(m.GrpcConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GrpcConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.DiscoveryColor) > 0 {
		i -= len(m.DiscoveryColor)
		copy(dAtA[i:], m.DiscoveryColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DiscoveryColor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DiscoveryAppid) > 0 {
		i -= len(m.DiscoveryAppid)
		copy(dAtA[i:], m.DiscoveryAppid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DiscoveryAppid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuildName) > 0 {
		i -= len(m.BuildName)
		copy(dAtA[i:], m.BuildName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BuildName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gateways) > 0 {
		for iNdEx := len(m.Gateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AuthZReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthZReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthZReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BreakerByNull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BreakerByNull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerByNull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BreakerByEcode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BreakerByEcode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerByEcode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ecode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ecode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BreakerByPlaceholder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BreakerByPlaceholder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerByPlaceholder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BreakerByRetryBackup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BreakerByRetryBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerByRetryBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BackupUrl) > 0 {
		i -= len(m.BackupUrl)
		copy(dAtA[i:], m.BackupUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BreakerByDirectlyBackup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BreakerByDirectlyBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerByDirectlyBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BackupUrl) > 0 {
		i -= len(m.BackupUrl)
		copy(dAtA[i:], m.BackupUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BackupUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BreakerAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BreakerAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != nil {
		{
			size := m.Action.Size()
			i -= size
			if _, err := m.Action.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BreakerAction_Null) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerAction_Null) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Null != nil {
		{
			size, err := m.Null.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BreakerAction_Ecode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerAction_Ecode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ecode != nil {
		{
			size, err := m.Ecode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BreakerAction_Placeholder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerAction_Placeholder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Placeholder != nil {
		{
			size, err := m.Placeholder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BreakerAction_DirectlyBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerAction_DirectlyBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectlyBackup != nil {
		{
			size, err := m.DirectlyBackup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BreakerAction_RetryBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerAction_RetryBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RetryBackup != nil {
		{
			size, err := m.RetryBackup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *FlowCopy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowCopy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCopy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Flow != nil {
		{
			size := m.Flow.Size()
			i -= size
			if _, err := m.Flow.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlowCopy_Null) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCopy_Null) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Null != nil {
		{
			size, err := m.Null.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *FlowCopy_Ratio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCopy_Ratio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ratio != nil {
		{
			size, err := m.Ratio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FlowCopy_Qps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowCopy_Qps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Qps != nil {
		{
			size, err := m.Qps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CopyByNull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyByNull) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyByNull) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyByRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyByRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyByRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ratio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyByQPS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyByQPS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyByQPS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Qps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qps))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BreakerAPI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BreakerAPI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BreakerAPI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlowCopy != nil {
		{
			size, err := m.FlowCopy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Condition) > 0 {
		i -= len(m.Condition)
		copy(dAtA[i:], m.Condition)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Condition)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ratio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBreakerAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBreakerAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBreakerAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBreakerAPIReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBreakerAPIReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBreakerAPIReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BreakerApiList) > 0 {
		for iNdEx := len(m.BreakerApiList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BreakerApiList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetBreakerAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBreakerAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBreakerAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlowCopy != nil {
		{
			size, err := m.FlowCopy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Condition) > 0 {
		i -= len(m.Condition)
		copy(dAtA[i:], m.Condition)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Condition)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ratio != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnableBreakerAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableBreakerAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableBreakerAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Disable {
		i--
		if m.Disable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBreakerAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBreakerAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBreakerAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetGatewayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetGatewayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetGatewayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GrpcConfigs) > 0 {
		for iNdEx := len(m.GrpcConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GrpcConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.DiscoveryColor) > 0 {
		i -= len(m.DiscoveryColor)
		copy(dAtA[i:], m.DiscoveryColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DiscoveryColor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DiscoveryAppid) > 0 {
		i -= len(m.DiscoveryAppid)
		copy(dAtA[i:], m.DiscoveryAppid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DiscoveryAppid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListGatewayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListGatewayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteGatewayReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGatewayReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteGatewayReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Annotation) > 0 {
		for k := range m.Annotation {
			v := m.Annotation[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.ClientInfo != nil {
		{
			size, err := m.ClientInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDynPathReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDynPathReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDynPathReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDynPathReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDynPathReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDynPathReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DynPaths) > 0 {
		for iNdEx := len(m.DynPaths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DynPaths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkipEndpointCheck {
		i--
		if m.SkipEndpointCheck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MaxRetries != nil {
		n14, err14 := github_com_gogo_protobuf_types.StdInt64MarshalTo(*m.MaxRetries, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdInt64(*m.MaxRetries):])
		if err14 != nil {
			return 0, err14
		}
		i -= n14
		i = encodeVarintApi(dAtA, i, uint64(n14))
		i--
		dAtA[i] = 0x22
	}
	if m.Timeout != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDynPathReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDynPathReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDynPathReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Annotation) > 0 {
		for k := range m.Annotation {
			v := m.Annotation[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.ClientInfo != nil {
		{
			size, err := m.ClientInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDynPathReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDynPathReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDynPathReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateALLGatewayConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateALLGatewayConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateALLGatewayConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if m.Disable {
		i--
		if m.Disable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnableDynPathReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableDynPathReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableDynPathReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Disable {
		i--
		if m.Disable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sponsor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sponsor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sponsor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uname) > 0 {
		i -= len(m.Uname)
		copy(dAtA[i:], m.Uname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjectType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ObjectType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtraContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtraContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size, err := m.ExtraContent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Entity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Sponsor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintApi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x18
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.JobId) > 0 {
		i -= len(m.JobId)
		copy(dAtA[i:], m.JobId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JobId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x28
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x20
	}
	if m.Object != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Object))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListLogReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLogReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLogReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Pages.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Lists) > 0 {
		for iNdEx := len(m.Lists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkerNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GrpcConfigDigest) > 0 {
		i -= len(m.GrpcConfigDigest)
		copy(dAtA[i:], m.GrpcConfigDigest)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GrpcConfigDigest)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.GrpcConfigApi) > 0 {
		i -= len(m.GrpcConfigApi)
		copy(dAtA[i:], m.GrpcConfigApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GrpcConfigApi)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ConfigDigest) > 0 {
		i -= len(m.ConfigDigest)
		copy(dAtA[i:], m.ConfigDigest)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConfigDigest)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ConfigApi) > 0 {
		i -= len(m.ConfigApi)
		copy(dAtA[i:], m.ConfigApi)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConfigApi)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.MonitorUrl) > 0 {
		i -= len(m.MonitorUrl)
		copy(dAtA[i:], m.MonitorUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MonitorUrl)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LatestTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LatestTimestamp))
		i--
		dAtA[i] = 0x60
	}
	if m.DirtyTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DirtyTimestamp))
		i--
		dAtA[i] = 0x58
	}
	if m.RenewTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RenewTimestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.UpTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.RegTimestamp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RegTimestamp))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AdvertiseAddr) > 0 {
		i -= len(m.AdvertiseAddr)
		copy(dAtA[i:], m.AdvertiseAddr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AdvertiseAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SdkVersion) > 0 {
		i -= len(m.SdkVersion)
		copy(dAtA[i:], m.SdkVersion)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SdkVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GatewayVersion) > 0 {
		i -= len(m.GatewayVersion)
		copy(dAtA[i:], m.GatewayVersion)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GatewayVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SdkVersion) > 0 {
		for iNdEx := len(m.SdkVersion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SdkVersion[iNdEx])
			copy(dAtA[i:], m.SdkVersion[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.SdkVersion[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GatewayVersion) > 0 {
		for iNdEx := len(m.GatewayVersion) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GatewayVersion[iNdEx])
			copy(dAtA[i:], m.GatewayVersion[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.GatewayVersion[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayProfileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayProfileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayProfileReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayProfileReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayProfileReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Envs) > 0 {
		for iNdEx := len(m.Envs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Envs[iNdEx])
			copy(dAtA[i:], m.Envs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Envs[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.GrpcConfigs) > 0 {
		for iNdEx := len(m.GrpcConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GrpcConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.WorkerNodes != nil {
		{
			size, err := m.WorkerNodes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zones[iNdEx])
			copy(dAtA[i:], m.Zones[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Zones[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Task) > 0 {
		i -= len(m.Task)
		copy(dAtA[i:], m.Task)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Task)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteTaskReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteTaskReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteTaskReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayProxyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayProxyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayProxyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Suffix) > 0 {
		i -= len(m.Suffix)
		copy(dAtA[i:], m.Suffix)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Suffix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayProxyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayProxyReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayProxyReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Header) > 0 {
		for k := range m.Header {
			v := m.Header[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StatusCode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatusCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppPromptAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppPromptAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppPromptAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OnlyGateway {
		i--
		if m.OnlyGateway {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppPromptAPIReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppPromptAPIReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppPromptAPIReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TreeNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiscoveryId) > 0 {
		i -= len(m.DiscoveryId)
		copy(dAtA[i:], m.DiscoveryId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DiscoveryId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigPromptAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigPromptAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigPromptAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0x12
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigPromptAPIReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigPromptAPIReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigPromptAPIReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppConfigItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppConfigItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppConfigItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuildName) > 0 {
		i -= len(m.BuildName)
		copy(dAtA[i:], m.BuildName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BuildName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppPathPromptAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppPathPromptAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppPathPromptAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppPathPromptAPIReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppPathPromptAPIReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppPathPromptAPIReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Paths) > 0 {
		for iNdEx := len(m.Paths) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Paths[iNdEx])
			copy(dAtA[i:], m.Paths[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Paths[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InitGatewayConfigsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitGatewayConfigsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitGatewayConfigsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cookie) > 0 {
		i -= len(m.Cookie)
		copy(dAtA[i:], m.Cookie)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cookie)))
		i--
		dAtA[i] = 0x22
	}
	if m.TreeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TreeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotActionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotActionReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SnapshotReq != nil {
		{
			size := m.SnapshotReq.Size()
			i -= size
			if _, err := m.SnapshotReq.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotActionReq_ListBreakerAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq_ListBreakerAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListBreakerAPIReq != nil {
		{
			size, err := m.ListBreakerAPIReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReq_SetBreakerAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq_SetBreakerAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetBreakerAPIReq != nil {
		{
			size, err := m.SetBreakerAPIReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReq_EnableBreakerAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq_EnableBreakerAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableBreakerAPIReq != nil {
		{
			size, err := m.EnableBreakerAPIReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReq_DeleteBreakerAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq_DeleteBreakerAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteBreakerAPIReq != nil {
		{
			size, err := m.DeleteBreakerAPIReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReq_ListDynPathReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq_ListDynPathReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListDynPathReq != nil {
		{
			size, err := m.ListDynPathReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReq_SetDynPathReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq_SetDynPathReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetDynPathReq != nil {
		{
			size, err := m.SetDynPathReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReq_DeleteDynPathReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq_DeleteDynPathReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteDynPathReq != nil {
		{
			size, err := m.DeleteDynPathReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReq_EnableDynPathReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReq_EnableDynPathReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableDynPathReq != nil {
		{
			size, err := m.EnableDynPathReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotActionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotActionReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SnapshotReply != nil {
		{
			size := m.SnapshotReply.Size()
			i -= size
			if _, err := m.SnapshotReply.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotActionReply_Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReply_Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Empty != nil {
		{
			size, err := m.Empty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReply_ListBreakerAPI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReply_ListBreakerAPI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListBreakerAPI != nil {
		{
			size, err := m.ListBreakerAPI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SnapshotActionReply_ListDynPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotActionReply_ListDynPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListDynPath != nil {
		{
			size, err := m.ListDynPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AddSnapshotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSnapshotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSnapshotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddSnapshotReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSnapshotReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSnapshotReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotProfileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotProfileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotProfileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotProfileReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotProfileReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotProfileReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QuotaMethod) > 0 {
		for iNdEx := len(m.QuotaMethod) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QuotaMethod[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.GrpcBreakerApi != nil {
		{
			size, err := m.GrpcBreakerApi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GrpcDynPath != nil {
		{
			size, err := m.GrpcDynPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BreakerApi != nil {
		{
			size, err := m.BreakerApi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DynPath != nil {
		{
			size, err := m.DynPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDeploymentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeploymentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDeploymentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentType) > 0 {
		i -= len(m.DeploymentType)
		copy(dAtA[i:], m.DeploymentType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeploymentType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDeploymentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDeploymentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDeploymentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentType) > 0 {
		i -= len(m.DeploymentType)
		copy(dAtA[i:], m.DeploymentType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeploymentType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompareDeploymentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareDeploymentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompareDeploymentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x32
	}
	if m.NewConfigs != nil {
		{
			size, err := m.NewConfigs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OldConfigs != nil {
		{
			size, err := m.OldConfigs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OldConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldConfigs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldConfigs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DynPathList) > 0 {
		for iNdEx := len(m.DynPathList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DynPathList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BreakerApiList) > 0 {
		for iNdEx := len(m.BreakerApiList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BreakerApiList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewConfigs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewConfigs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SnapshotBreakerApis) > 0 {
		for iNdEx := len(m.SnapshotBreakerApis) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SnapshotBreakerApis[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SnapshotDynPaths) > 0 {
		for iNdEx := len(m.SnapshotDynPaths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SnapshotDynPaths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotDynPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotDynPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotDynPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasChanged {
		i--
		if m.HasChanged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.DynPath != nil {
		{
			size, err := m.DynPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotBreakerApi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotBreakerApi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotBreakerApi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasChanged {
		i--
		if m.HasChanged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BreakerApi != nil {
		{
			size, err := m.BreakerApi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeployDeploymentProfileReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeployDeploymentProfileReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeployDeploymentProfileReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.InstanceStatus) > 0 {
		for iNdEx := len(m.InstanceStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InstanceStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ActionLog) > 0 {
		for iNdEx := len(m.ActionLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActionLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintApi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Confirm) > 0 {
		i -= len(m.Confirm)
		copy(dAtA[i:], m.Confirm)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Confirm)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InstanceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintApi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDeploymentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDeploymentReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDeploymentReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentType) > 0 {
		i -= len(m.DeploymentType)
		copy(dAtA[i:], m.DeploymentType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeploymentType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.PageNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDeploymentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDeploymentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDeploymentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Pages.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Lists) > 0 {
		for iNdEx := len(m.Lists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeploymentType) > 0 {
		i -= len(m.DeploymentType)
		copy(dAtA[i:], m.DeploymentType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeploymentType)))
		i--
		dAtA[i] = 0x62
	}
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RollbackUuid) > 0 {
		i -= len(m.RollbackUuid)
		copy(dAtA[i:], m.RollbackUuid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RollbackUuid)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintApi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SnapshotUuid) > 0 {
		i -= len(m.SnapshotUuid)
		copy(dAtA[i:], m.SnapshotUuid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SnapshotUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SingleDeployed {
		i--
		if m.SingleDeployed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Deployed {
		i--
		if m.Deployed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Initialized {
		i--
		if m.Initialized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Finished {
		i--
		if m.Finished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Persisted {
		i--
		if m.Persisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Rollbacked {
		i--
		if m.Rollbacked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfirmedAt != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ConfirmedAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddActionLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddActionLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddActionLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.ActionLog.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotRunPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRunPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotRunPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DelBreakerReq) > 0 {
		for iNdEx := len(m.DelBreakerReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelBreakerReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DelDynReq) > 0 {
		for iNdEx := len(m.DelDynReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelDynReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SetBreakerReq) > 0 {
		for iNdEx := len(m.SetBreakerReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SetBreakerReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SetDynReq) > 0 {
		for iNdEx := len(m.SetDynReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SetDynReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListLimiterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLimiterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLimiterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Limiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Limiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Limiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Algorithm != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x28
	}
	if m.RefreshInterval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x20
	}
	if m.Capacity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LimiterListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimiterListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimiterListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limiters) > 0 {
		for iNdEx := len(m.Limiters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limiters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LimiterMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimiterMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimiterMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.RefererRule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Algorithm != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x20
	}
	if m.RefreshInterval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TotalRule.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Capacity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefererRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefererRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefererRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Capacity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListLimiterReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLimiterReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLimiterReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddLimiterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLimiterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLimiterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x42
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Algorithm != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x20
	}
	if m.RefreshInterval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.Capacity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetLimiterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLimiterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetLimiterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Algorithm != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x20
	}
	if m.RefreshInterval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.Capacity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteLimiterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteLimiterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteLimiterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnableLimiterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableLimiterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableLimiterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Disable {
		i--
		if m.Disable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuotaMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotaMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuotaMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Api) > 0 {
		i -= len(m.Api)
		copy(dAtA[i:], m.Api)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Api)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PluginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Plugin != nil {
		{
			size, err := m.Plugin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PluginName) > 0 {
		i -= len(m.PluginName)
		copy(dAtA[i:], m.PluginName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PluginName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Plugin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plugin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plugin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZonePromptAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZonePromptAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZonePromptAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		i -= len(m.Node)
		copy(dAtA[i:], m.Node)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Node)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZonePromptAPIReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZonePromptAPIReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZonePromptAPIReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zones[iNdEx])
			copy(dAtA[i:], m.Zones[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Zones[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PluginListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PluginName) > 0 {
		i -= len(m.PluginName)
		copy(dAtA[i:], m.PluginName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PluginName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PluginListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PluginListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Plugin != nil {
		{
			size, err := m.Plugin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GRPCAppPackagePromptAPIReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GRPCAppPackagePromptAPIReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRPCAppPackagePromptAPIReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GRPCAppPackagePromptAPIReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GRPCAppPackagePromptAPIReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GRPCAppPackagePromptAPIReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Package) > 0 {
		for k := range m.Package {
			v := m.Package[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppPackageService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppPackageService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppPackageService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Services[iNdEx])
			copy(dAtA[i:], m.Services[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Services[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthZReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Gateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovApi(uint64(m.UpdatedAt))
	}
	l = len(m.DiscoveryAppid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DiscoveryColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.GrpcConfigs) > 0 {
		for _, e := range m.GrpcConfigs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BuildName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GatewayReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuthZReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BreakerByNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BreakerByEcode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ecode != 0 {
		n += 1 + sovApi(uint64(m.Ecode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BreakerByPlaceholder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BreakerByRetryBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackupUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BreakerByDirectlyBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BackupUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BreakerAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BreakerAction_Null) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Null != nil {
		l = m.Null.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *BreakerAction_Ecode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecode != nil {
		l = m.Ecode.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *BreakerAction_Placeholder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Placeholder != nil {
		l = m.Placeholder.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *BreakerAction_DirectlyBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectlyBackup != nil {
		l = m.DirectlyBackup.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *BreakerAction_RetryBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetryBackup != nil {
		l = m.RetryBackup.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FlowCopy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flow != nil {
		n += m.Flow.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlowCopy_Null) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Null != nil {
		l = m.Null.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FlowCopy_Ratio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ratio != nil {
		l = m.Ratio.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FlowCopy_Qps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Qps != nil {
		l = m.Qps.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *CopyByNull) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyByRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovApi(uint64(m.Ratio))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyByQPS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Qps != 0 {
		n += 1 + sovApi(uint64(m.Qps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BreakerAPI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovApi(uint64(m.Ratio))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FlowCopy != nil {
		l = m.FlowCopy.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBreakerAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBreakerAPIReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BreakerApiList) > 0 {
		for _, e := range m.BreakerApiList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetBreakerAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovApi(uint64(m.Ratio))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FlowCopy != nil {
		l = m.FlowCopy.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnableBreakerAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Disable {
		n += 2
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBreakerAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetGatewayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DiscoveryAppid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DiscoveryColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.GrpcConfigs) > 0 {
		for _, e := range m.GrpcConfigs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListGatewayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteGatewayReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ClientInfo != nil {
		l = m.ClientInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovApi(uint64(m.UpdatedAt))
	}
	if m.Enable {
		n += 2
	}
	if len(m.Annotation) > 0 {
		for k, v := range m.Annotation {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDynPathReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDynPathReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.DynPaths) > 0 {
		for _, e := range m.DynPaths {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovApi(uint64(m.Timeout))
	}
	if m.MaxRetries != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdInt64(*m.MaxRetries)
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SkipEndpointCheck {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDynPathReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ClientInfo != nil {
		l = m.ClientInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovApi(uint64(m.UpdatedAt))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Annotation) > 0 {
		for k, v := range m.Annotation {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteDynPathReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateALLGatewayConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Disable {
		n += 2
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnableDynPathReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Disable {
		n += 2
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Sponsor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ObjectType != 0 {
		n += 1 + sovApi(uint64(m.ObjectType))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtraContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Sponsor.Size()
	n += 1 + l + sovApi(uint64(l))
	l = m.Entity.Size()
	n += 1 + l + sovApi(uint64(l))
	l = m.ExtraContent.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Object != 0 {
		n += 1 + sovApi(uint64(m.Object))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListLogReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lists) > 0 {
		for _, e := range m.Lists {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = m.Pages.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GatewayVersion)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SdkVersion)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AdvertiseAddr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, s := range m.Addrs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.RegTimestamp != 0 {
		n += 1 + sovApi(uint64(m.RegTimestamp))
	}
	if m.UpTimestamp != 0 {
		n += 1 + sovApi(uint64(m.UpTimestamp))
	}
	if m.RenewTimestamp != 0 {
		n += 1 + sovApi(uint64(m.RenewTimestamp))
	}
	if m.DirtyTimestamp != 0 {
		n += 1 + sovApi(uint64(m.DirtyTimestamp))
	}
	if m.LatestTimestamp != 0 {
		n += 1 + sovApi(uint64(m.LatestTimestamp))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	l = len(m.MonitorUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ConfigApi)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ConfigDigest)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.GrpcConfigApi)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.GrpcConfigDigest)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GatewayVersion) > 0 {
		for _, s := range m.GatewayVersion {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.SdkVersion) > 0 {
		for _, s := range m.SdkVersion {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GatewayProfileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GatewayProfileReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	if len(m.Zones) > 0 {
		for _, s := range m.Zones {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovApi(uint64(m.UpdatedAt))
	}
	if m.WorkerNodes != nil {
		l = m.WorkerNodes.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.GrpcConfigs) > 0 {
		for _, e := range m.GrpcConfigs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Envs) > 0 {
		for _, s := range m.Envs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecuteTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Task)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecuteTaskReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GatewayProxyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GatewayProxyReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovApi(uint64(m.StatusCode))
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + l + sovApi(uint64(l))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppPromptAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OnlyGateway {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppPromptAPIReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TreeNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DiscoveryId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigPromptAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigPromptAPIReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppConfigItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BuildName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppPathPromptAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppPathPromptAPIReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for _, s := range m.Paths {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InitGatewayConfigsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovApi(uint64(m.TreeId))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotActionReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SnapshotReq != nil {
		n += m.SnapshotReq.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotActionReq_ListBreakerAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListBreakerAPIReq != nil {
		l = m.ListBreakerAPIReq.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReq_SetBreakerAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetBreakerAPIReq != nil {
		l = m.SetBreakerAPIReq.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReq_EnableBreakerAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableBreakerAPIReq != nil {
		l = m.EnableBreakerAPIReq.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReq_DeleteBreakerAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteBreakerAPIReq != nil {
		l = m.DeleteBreakerAPIReq.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReq_ListDynPathReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListDynPathReq != nil {
		l = m.ListDynPathReq.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReq_SetDynPathReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetDynPathReq != nil {
		l = m.SetDynPathReq.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReq_DeleteDynPathReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteDynPathReq != nil {
		l = m.DeleteDynPathReq.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReq_EnableDynPathReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDynPathReq != nil {
		l = m.EnableDynPathReq.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotActionReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SnapshotReply != nil {
		n += m.SnapshotReply.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotActionReply_Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Empty != nil {
		l = m.Empty.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReply_ListBreakerAPI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListBreakerAPI != nil {
		l = m.ListBreakerAPI.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *SnapshotActionReply_ListDynPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListDynPath != nil {
		l = m.ListDynPath.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *AddSnapshotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddSnapshotReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotProfileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotProfileReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DynPath != nil {
		l = m.DynPath.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BreakerApi != nil {
		l = m.BreakerApi.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GrpcDynPath != nil {
		l = m.GrpcDynPath.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GrpcBreakerApi != nil {
		l = m.GrpcBreakerApi.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.QuotaMethod) > 0 {
		for _, e := range m.QuotaMethod {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDeploymentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeploymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDeploymentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeploymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompareDeploymentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OldConfigs != nil {
		l = m.OldConfigs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NewConfigs != nil {
		l = m.NewConfigs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OldConfigs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BreakerApiList) > 0 {
		for _, e := range m.BreakerApiList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.DynPathList) > 0 {
		for _, e := range m.DynPathList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewConfigs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SnapshotDynPaths) > 0 {
		for _, e := range m.SnapshotDynPaths {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.SnapshotBreakerApis) > 0 {
		for _, e := range m.SnapshotBreakerApis {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotDynPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DynPath != nil {
		l = m.DynPath.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasChanged {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotBreakerApi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BreakerApi != nil {
		l = m.BreakerApi.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasChanged {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeployDeploymentProfileReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Confirm)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ActionLog) > 0 {
		for _, e := range m.ActionLog {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.InstanceStatus) > 0 {
		for _, e := range m.InstanceStatus {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActionLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovApi(uint64(m.CreatedAt))
	}
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstanceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovApi(uint64(m.CreatedAt))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDeploymentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageNum != 0 {
		n += 1 + sovApi(uint64(m.PageNum))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	l = len(m.DeploymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDeploymentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Lists) > 0 {
		for _, e := range m.Lists {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = m.Pages.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SnapshotUuid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovApi(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovApi(uint64(m.UpdatedAt))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RollbackUuid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Status.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.DeploymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rollbacked {
		n += 2
	}
	if m.Persisted {
		n += 2
	}
	if m.Finished {
		n += 2
	}
	if m.Initialized {
		n += 2
	}
	if m.Deployed {
		n += 2
	}
	if m.SingleDeployed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeploymentConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ConfirmedAt != 0 {
		n += 1 + sovApi(uint64(m.ConfirmedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddActionLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.ActionLog.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotRunPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SetDynReq) > 0 {
		for _, e := range m.SetDynReq {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.SetBreakerReq) > 0 {
		for _, e := range m.SetBreakerReq {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.DelDynReq) > 0 {
		for _, e := range m.DelDynReq {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.DelBreakerReq) > 0 {
		for _, e := range m.DelBreakerReq {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListLimiterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Limiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Capacity != 0 {
		n += 1 + sovApi(uint64(m.Capacity))
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovApi(uint64(m.RefreshInterval))
	}
	if m.Algorithm != 0 {
		n += 1 + sovApi(uint64(m.Algorithm))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LimiterListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Limiters) > 0 {
		for _, e := range m.Limiters {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LimiterMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.TotalRule.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.RefreshInterval != 0 {
		n += 1 + sovApi(uint64(m.RefreshInterval))
	}
	if m.Algorithm != 0 {
		n += 1 + sovApi(uint64(m.Algorithm))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.RefererRule.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TotalRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Capacity != 0 {
		n += 1 + sovApi(uint64(m.Capacity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefererRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Capacity != 0 {
		n += 1 + sovApi(uint64(m.Capacity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListLimiterReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddLimiterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Capacity != 0 {
		n += 1 + sovApi(uint64(m.Capacity))
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovApi(uint64(m.RefreshInterval))
	}
	if m.Algorithm != 0 {
		n += 1 + sovApi(uint64(m.Algorithm))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLimiterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Capacity != 0 {
		n += 1 + sovApi(uint64(m.Capacity))
	}
	if m.RefreshInterval != 0 {
		n += 1 + sovApi(uint64(m.RefreshInterval))
	}
	if m.Algorithm != 0 {
		n += 1 + sovApi(uint64(m.Algorithm))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteLimiterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnableLimiterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Disable {
		n += 2
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QuotaMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Api)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PluginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PluginName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Plugin != nil {
		l = m.Plugin.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Plugin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZonePromptAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ZonePromptAPIReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Zones) > 0 {
		for _, s := range m.Zones {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PluginListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PluginName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PluginListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PluginListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Plugin != nil {
		l = m.Plugin.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GRPCAppPackagePromptAPIReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GRPCAppPackagePromptAPIReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Package) > 0 {
		for k, v := range m.Package {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppPackageService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthZReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthZReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthZReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigMeta{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryAppid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryAppid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcConfigs = append(m.GrpcConfigs, &ConfigMeta{})
			if err := m.GrpcConfigs[len(m.GrpcConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: configMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: configMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthZReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthZReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthZReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, &Project{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BreakerByNull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BreakerByNull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BreakerByNull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BreakerByEcode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BreakerByEcode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BreakerByEcode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecode", wireType)
			}
			m.Ecode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ecode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BreakerByPlaceholder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BreakerByPlaceholder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BreakerByPlaceholder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BreakerByRetryBackup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BreakerByRetryBackup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BreakerByRetryBackup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BreakerByDirectlyBackup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BreakerByDirectlyBackup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BreakerByDirectlyBackup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BreakerAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BreakerAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BreakerAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Null", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BreakerByNull{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &BreakerAction_Null{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BreakerByEcode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &BreakerAction_Ecode{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BreakerByPlaceholder{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &BreakerAction_Placeholder{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectlyBackup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BreakerByDirectlyBackup{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &BreakerAction_DirectlyBackup{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryBackup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BreakerByRetryBackup{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &BreakerAction_RetryBackup{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowCopy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowCopy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowCopy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Null", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CopyByNull{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Flow = &FlowCopy_Null{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CopyByRatio{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Flow = &FlowCopy_Ratio{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CopyByQPS{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Flow = &FlowCopy_Qps{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyByNull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyByNull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyByNull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyByRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyByRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyByRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyByQPS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyByQPS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyByQPS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qps", wireType)
			}
			m.Qps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BreakerAPI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BreakerAPI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BreakerAPI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &BreakerAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCopy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowCopy == nil {
				m.FlowCopy = &FlowCopy{}
			}
			if err := m.FlowCopy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBreakerAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBreakerAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBreakerAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBreakerAPIReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBreakerAPIReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBreakerAPIReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakerApiList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BreakerApiList = append(m.BreakerApiList, &BreakerAPI{})
			if err := m.BreakerApiList[len(m.BreakerApiList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBreakerAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBreakerAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBreakerAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &BreakerAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCopy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowCopy == nil {
				m.FlowCopy = &FlowCopy{}
			}
			if err := m.FlowCopy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableBreakerAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableBreakerAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableBreakerAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBreakerAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBreakerAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBreakerAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetGatewayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetGatewayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetGatewayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigMeta{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryAppid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryAppid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcConfigs = append(m.GrpcConfigs, &ConfigMeta{})
			if err := m.GrpcConfigs[len(m.GrpcConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGatewayReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGatewayReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGatewayReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: dynPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: dynPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientInfo == nil {
				m.ClientInfo = &ClientInfo{}
			}
			if err := m.ClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotation == nil {
				m.Annotation = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotation[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDynPathReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDynPathReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDynPathReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDynPathReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDynPathReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDynPathReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynPaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynPaths = append(m.DynPaths, &DynPath{})
			if err := m.DynPaths[len(m.DynPaths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRetries == nil {
				m.MaxRetries = new(int64)
			}
			if err := github_com_gogo_protobuf_types.StdInt64Unmarshal(m.MaxRetries, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipEndpointCheck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipEndpointCheck = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDynPathReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDynPathReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDynPathReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientInfo == nil {
				m.ClientInfo = &ClientInfo{}
			}
			if err := m.ClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotation == nil {
				m.Annotation = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotation[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDynPathReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDynPathReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDynPathReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateALLGatewayConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateALLGatewayConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateALLGatewayConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableDynPathReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableDynPathReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableDynPathReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sponsor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sponsor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sponsor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectType", wireType)
			}
			m.ObjectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: extra_content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: extra_content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: log_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: log_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sponsor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtraContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			m.Object = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Object |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLogReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLogReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLogReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lists = append(m.Lists, &LogItem{})
			if err := m.Lists[len(m.Lists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: worker_node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: worker_node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdkVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegTimestamp", wireType)
			}
			m.RegTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpTimestamp", wireType)
			}
			m.UpTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewTimestamp", wireType)
			}
			m.RenewTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenewTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirtyTimestamp", wireType)
			}
			m.DirtyTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DirtyTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestTimestamp", wireType)
			}
			m.LatestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitorUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitorUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcConfigApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcConfigApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcConfigDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcConfigDigest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: worker_nodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: worker_nodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayVersion = append(m.GatewayVersion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdkVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdkVersion = append(m.SdkVersion, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &WorkerNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayProfileReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayProfileReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayProfileReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ConfigMeta{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerNodes == nil {
				m.WorkerNodes = &WorkerNodes{}
			}
			if err := m.WorkerNodes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcConfigs = append(m.GrpcConfigs, &ConfigMeta{})
			if err := m.GrpcConfigs[len(m.GrpcConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Envs = append(m.Envs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Task = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteTaskReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteTaskReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteTaskReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayProxyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayProxyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayProxyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayProxyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayProxyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayProxyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = append(m.Page[:0], dAtA[iNdEx:postIndex]...)
			if m.Page == nil {
				m.Page = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = make(map[string]Header)
			}
			var mapkey string
			mapvalue := &Header{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Header{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Header[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppPromptAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppPromptAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppPromptAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyGateway", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyGateway = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppPromptAPIReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppPromptAPIReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppPromptAPIReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &TreeNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigPromptAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigPromptAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigPromptAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigPromptAPIReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigPromptAPIReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigPromptAPIReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AppConfigItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppConfigItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppConfigItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppConfigItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppPathPromptAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppPathPromptAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppPathPromptAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppPathPromptAPIReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppPathPromptAPIReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppPathPromptAPIReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitGatewayConfigsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitGatewayConfigsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitGatewayConfigsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotActionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotActionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotActionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListBreakerAPIReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListBreakerAPIReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReq = &SnapshotActionReq_ListBreakerAPIReq{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetBreakerAPIReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetBreakerAPIReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReq = &SnapshotActionReq_SetBreakerAPIReq{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableBreakerAPIReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnableBreakerAPIReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReq = &SnapshotActionReq_EnableBreakerAPIReq{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteBreakerAPIReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteBreakerAPIReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReq = &SnapshotActionReq_DeleteBreakerAPIReq{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListDynPathReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListDynPathReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReq = &SnapshotActionReq_ListDynPathReq{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetDynPathReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetDynPathReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReq = &SnapshotActionReq_SetDynPathReq{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteDynPathReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteDynPathReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReq = &SnapshotActionReq_DeleteDynPathReq{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDynPathReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnableDynPathReq{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReq = &SnapshotActionReq_EnableDynPathReq{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotActionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotActionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotActionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReply = &SnapshotActionReply_Empty{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListBreakerAPI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListBreakerAPIReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReply = &SnapshotActionReply_ListBreakerAPI{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListDynPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListDynPathReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SnapshotReply = &SnapshotActionReply_ListDynPath{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSnapshotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSnapshotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSnapshotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSnapshotReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSnapshotReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSnapshotReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &SnapshotMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: snapshotMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: snapshotMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotProfileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotProfileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotProfileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotProfileReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotProfileReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotProfileReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &SnapshotMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynPath == nil {
				m.DynPath = &ListDynPathReply{}
			}
			if err := m.DynPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakerApi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BreakerApi == nil {
				m.BreakerApi = &ListBreakerAPIReply{}
			}
			if err := m.BreakerApi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcDynPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GrpcDynPath == nil {
				m.GrpcDynPath = &ListDynPathReply{}
			}
			if err := m.GrpcDynPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcBreakerApi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GrpcBreakerApi == nil {
				m.GrpcBreakerApi = &ListBreakerAPIReply{}
			}
			if err := m.GrpcBreakerApi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuotaMethod = append(m.QuotaMethod, &QuotaMethod{})
			if err := m.QuotaMethod[len(m.QuotaMethod)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeploymentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeploymentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeploymentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeploymentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeploymentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeploymentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareDeploymentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompareDeploymentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompareDeploymentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldConfigs == nil {
				m.OldConfigs = &OldConfigs{}
			}
			if err := m.OldConfigs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewConfigs == nil {
				m.NewConfigs = &NewConfigs{}
			}
			if err := m.NewConfigs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: old_configs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: old_configs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakerApiList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BreakerApiList = append(m.BreakerApiList, &BreakerAPI{})
			if err := m.BreakerApiList[len(m.BreakerApiList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynPathList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynPathList = append(m.DynPathList, &DynPath{})
			if err := m.DynPathList[len(m.DynPathList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: new_configs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: new_configs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotDynPaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotDynPaths = append(m.SnapshotDynPaths, &SnapshotDynPath{})
			if err := m.SnapshotDynPaths[len(m.SnapshotDynPaths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotBreakerApis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotBreakerApis = append(m.SnapshotBreakerApis, &SnapshotBreakerApi{})
			if err := m.SnapshotBreakerApis[len(m.SnapshotBreakerApis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotDynPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: snapshot_dyn_path: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: snapshot_dyn_path: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynPath == nil {
				m.DynPath = &DynPath{}
			}
			if err := m.DynPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasChanged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasChanged = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotBreakerApi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: snapshot_breaker_api: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: snapshot_breaker_api: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakerApi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BreakerApi == nil {
				m.BreakerApi = &BreakerAPI{}
			}
			if err := m.BreakerApi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasChanged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasChanged = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployDeploymentProfileReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployDeploymentProfileReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployDeploymentProfileReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionLog = append(m.ActionLog, &ActionLog{})
			if err := m.ActionLog[len(m.ActionLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceStatus = append(m.InstanceStatus, &InstanceStatus{})
			if err := m.InstanceStatus[len(m.InstanceStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: action_log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: action_log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: instance_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: instance_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDeploymentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDeploymentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDeploymentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDeploymentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDeploymentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDeploymentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lists = append(m.Lists, &DeploymentMeta{})
			if err := m.Lists[len(m.Lists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollbackUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollbackUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: deployment_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: deployment_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollbacked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rollbacked = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Persisted = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finished = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initialized = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deployed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleDeployed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SingleDeployed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedAt", wireType)
			}
			m.ConfirmedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddActionLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddActionLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddActionLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActionLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRunPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRunPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRunPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetDynReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetDynReq = append(m.SetDynReq, &SetDynPathReq{})
			if err := m.SetDynReq[len(m.SetDynReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetBreakerReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetBreakerReq = append(m.SetBreakerReq, &SetBreakerAPIReq{})
			if err := m.SetBreakerReq[len(m.SetBreakerReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelDynReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelDynReq = append(m.DelDynReq, &DeleteDynPathReq{})
			if err := m.DelDynReq[len(m.DelDynReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelBreakerReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelBreakerReq = append(m.DelBreakerReq, &DeleteBreakerAPIReq{})
			if err := m.DelBreakerReq[len(m.DelBreakerReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLimiterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLimiterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLimiterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Limiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimiterListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimiterListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimiterListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limiters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limiters = append(m.Limiters, &LimiterMeta{})
			if err := m.Limiters[len(m.Limiters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimiterMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimiterMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimiterMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefererRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefererRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: total_rule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: total_rule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefererRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: referer_rule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: referer_rule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLimiterReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLimiterReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLimiterReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LimiterListItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLimiterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLimiterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLimiterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLimiterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLimiterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLimiterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshInterval", wireType)
			}
			m.RefreshInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteLimiterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteLimiterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteLimiterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableLimiterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableLimiterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableLimiterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuotaMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotaMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotaMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Api", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Api = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plugin == nil {
				m.Plugin = &Plugin{}
			}
			if err := m.Plugin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plugin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plugin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plugin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZonePromptAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZonePromptAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZonePromptAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZonePromptAPIReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZonePromptAPIReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZonePromptAPIReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &PluginListItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plugin == nil {
				m.Plugin = &Plugin{}
			}
			if err := m.Plugin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GRPCAppPackagePromptAPIReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRPCAppPackagePromptAPIReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRPCAppPackagePromptAPIReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GRPCAppPackagePromptAPIReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRPCAppPackagePromptAPIReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRPCAppPackagePromptAPIReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Package == nil {
				m.Package = make(map[string]*AppPackageService)
			}
			var mapkey string
			var mapvalue *AppPackageService
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AppPackageService{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Package[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppPackageService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppPackageService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppPackageService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
