// Code generated by kratos tool btsgen. DO NOT EDIT.

/*
  Package timemachine is a generated cache proxy package.
  It is generated from:
  type _bts interface {
		// bts: -struct_name=Dao -nullcache=&timemachine.UserYearReport2020{Mid:0} -check_null_code=$==nil||$.Mid==0 -sync=true
		UserYearReport2020(c context.Context, mid int64) (*timemachine.UserYearReport2020, error)
		// bts: -struct_name=Dao -nullcache=&timemachine.UserInfo{Mid:0} -check_null_code=$==nil||$.Mid==0 -sync=true
		UserInfoByMid(c context.Context, mid int64) (*timemachine.UserInfo, error)
	}
*/

package timemachine

import (
	"context"

	"go-common/library/cache"
	"go-gateway/app/web-svr/activity/interface/model/timemachine"
)

var _ _bts

// UserYearReport2020 get data from cache if miss will call source method, then add to cache.
func (d *Dao) UserYearReport2020(c context.Context, mid int64) (res *timemachine.UserYearReport2020, err error) {
	addCache := true
	res, err = d.CacheUserYearReport2020(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil || res.Mid == 0 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:UserYearReport2020")
		return
	}
	cache.MetricMisses.Inc("bts:UserYearReport2020")
	res, err = d.RawUserYearReport2020(c, mid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &timemachine.UserYearReport2020{Mid: 0}
	}
	if !addCache {
		return
	}
	d.AddCacheUserYearReport2020(c, mid, miss)
	return
}

// UserInfoByMid get data from cache if miss will call source method, then add to cache.
func (d *Dao) UserInfoByMid(c context.Context, mid int64) (res *timemachine.UserInfo, err error) {
	addCache := true
	res, err = d.CacheUserInfoByMid(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil || res.Mid == 0 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:UserInfoByMid")
		return
	}
	cache.MetricMisses.Inc("bts:UserInfoByMid")
	res, err = d.RawUserInfoByMid(c, mid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &timemachine.UserInfo{Mid: 0}
	}
	if !addCache {
		return
	}
	d.AddCacheUserInfoByMid(c, mid, miss)
	return
}
