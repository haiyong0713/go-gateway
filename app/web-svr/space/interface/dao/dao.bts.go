// Code generated by kratos tool btsgen. DO NOT EDIT.

/*
  Package dao is a generated cache proxy package.
  It is generated from:
  type _bts interface {
		// bts: -nullcache=&model.Notice{Notice:"ff2364a0be3d20e46cc69efb36afe9a5"} -check_null_code=$.Notice=="ff2364a0be3d20e46cc69efb36afe9a5" -struct_name=Dao
		Notice(c context.Context, mid int64) (*model.Notice, error)
		// bts: -nullcache=&model.AidReason{Aid:-1} -check_null_code=$!=nil&&$.Aid==-1 -struct_name=Dao
		TopArc(c context.Context, mid int64) (*model.AidReason, error)
		// bts: -nullcache=&model.AidReasons{List:[]*model.AidReason{{Aid:-1}}} -check_null_code=len($.List)==1&&$.List[0].Aid==-1 -struct_name=Dao
		Masterpiece(c context.Context, mid int64) (*model.AidReasons, error)
		// bts: -nullcache=&model.ThemeDetails{List:[]*model.ThemeDetail{{ID:-1}}} -check_null_code=len($.List)==1&&$.List[0].ID==-1 -struct_name=Dao
		Theme(c context.Context, mid int64) (*model.ThemeDetails, error)
		// bts: -nullcache=-1 -check_null_code=$==-1 -struct_name=Dao
		TopDynamic(c context.Context, mid int64) (int64, error)
		// bts: -nullcache=&pb.OfficialReply{Uid:req.Mid,Id:-1} -check_null_code=$==nil||$.Id==-1 -struct_name=Dao -singleflight=true
		Official(c context.Context, req *pb.OfficialRequest) (*pb.OfficialReply, error)
		// bts: -nullcache=&model.UserTab{TabType:-1} -check_null_code=$==nil -struct_name=Dao -singleflight=true
		UserTab(c context.Context, req *pb.UserTabReq) (*model.UserTab, error)
		// bts: -nullcache=&model.TopPhotoArc{Aid:-1} -check_null_code=$==nil||$.Aid==-1 -struct_name=Dao -singleflight=true
		TopPhotoArc(c context.Context, mid int64) (*model.TopPhotoArc, error)
		// bts: -nullcache=&pb.WhitelistReply{IsWhite:false} -check_null_code=$==nil -struct_name=Dao -singleflight=true
		Whitelist(c context.Context, req *pb.WhitelistReq) (*pb.WhitelistReply, error)
		// bts: -nullcache=&pb.WhitelistValidTimeReply{IsWhite:false} -check_null_code=$==nil -struct_name=Dao -singleflight=true
		QueryWhitelistValid(c context.Context, req *pb.WhitelistReq) (res *pb.WhitelistValidTimeReply, err error)
	}
*/

package dao

import (
	"context"

	"go-common/library/cache"
	pb "go-gateway/app/web-svr/space/interface/api/v1"
	"go-gateway/app/web-svr/space/interface/model"

	"golang.org/x/sync/singleflight"
)

var _ _bts
var cacheSingleFlights = [5]*singleflight.Group{{}, {}, {}, {}, {}}

// Notice get data from cache if miss will call source method, then add to cache.
func (d *Dao) Notice(c context.Context, mid int64) (res *model.Notice, err error) {
	addCache := true
	res, err = d.CacheNotice(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res.Notice == "ff2364a0be3d20e46cc69efb36afe9a5" {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:Notice")
		return
	}
	cache.MetricMisses.Inc("bts:Notice")
	res, err = d.RawNotice(c, mid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.Notice{Notice: "ff2364a0be3d20e46cc69efb36afe9a5"}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheNotice(c, mid, miss)
	})
	return
}

// TopArc get data from cache if miss will call source method, then add to cache.
func (d *Dao) TopArc(c context.Context, mid int64) (res *model.AidReason, err error) {
	addCache := true
	res, err = d.CacheTopArc(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res != nil && res.Aid == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:TopArc")
		return
	}
	cache.MetricMisses.Inc("bts:TopArc")
	res, err = d.RawTopArc(c, mid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.AidReason{Aid: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheTopArc(c, mid, miss)
	})
	return
}

// Masterpiece get data from cache if miss will call source method, then add to cache.
func (d *Dao) Masterpiece(c context.Context, mid int64) (res *model.AidReasons, err error) {
	addCache := true
	res, err = d.CacheMasterpiece(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if len(res.List) == 1 && res.List[0].Aid == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:Masterpiece")
		return
	}
	cache.MetricMisses.Inc("bts:Masterpiece")
	res, err = d.RawMasterpiece(c, mid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.AidReasons{List: []*model.AidReason{{Aid: -1}}}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheMasterpiece(c, mid, miss)
	})
	return
}

// Theme get data from cache if miss will call source method, then add to cache.
func (d *Dao) Theme(c context.Context, mid int64) (res *model.ThemeDetails, err error) {
	addCache := true
	res, err = d.CacheTheme(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if len(res.List) == 1 && res.List[0].ID == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:Theme")
		return
	}
	cache.MetricMisses.Inc("bts:Theme")
	res, err = d.RawTheme(c, mid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.ThemeDetails{List: []*model.ThemeDetail{{ID: -1}}}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheTheme(c, mid, miss)
	})
	return
}

// TopDynamic get data from cache if miss will call source method, then add to cache.
func (d *Dao) TopDynamic(c context.Context, mid int64) (res int64, err error) {
	addCache := true
	res, err = d.CacheTopDynamic(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == -1 {
			res = 0
		}
	}()
	if res != 0 {
		cache.MetricHits.Inc("bts:TopDynamic")
		return
	}
	cache.MetricMisses.Inc("bts:TopDynamic")
	res, err = d.RawTopDynamic(c, mid)
	if err != nil {
		return
	}
	miss := res
	if miss == 0 {
		miss = -1
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheTopDynamic(c, mid, miss)
	})
	return
}

// Official get data from cache if miss will call source method, then add to cache.
func (d *Dao) Official(c context.Context, req *pb.OfficialRequest) (res *pb.OfficialReply, err error) {
	addCache := true
	res, err = d.CacheOfficial(c, req)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil || res.Id == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:Official")
		return
	}
	var rr interface{}
	sf := d.cacheSFOfficial(req)
	rr, err, _ = cacheSingleFlights[0].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:Official")
		r, e = d.RawOfficial(c, req)
		return
	})
	res = rr.(*pb.OfficialReply)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &pb.OfficialReply{Uid: req.Mid, Id: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheOfficial(c, req, miss)
	})
	return
}

// UserTab get data from cache if miss will call source method, then add to cache.
func (d *Dao) UserTab(c context.Context, req *pb.UserTabReq) (res *model.UserTab, err error) {
	addCache := true
	res, err = d.CacheUserTab(c, req)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:UserTab")
		return
	}
	var rr interface{}
	sf := d.cacheSFUserTab(req)
	rr, err, _ = cacheSingleFlights[1].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:UserTab")
		r, e = d.RawUserTab(c, req)
		return
	})
	res = rr.(*model.UserTab)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.UserTab{TabType: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheUserTab(c, req, miss)
	})
	return
}

// TopPhotoArc get data from cache if miss will call source method, then add to cache.
func (d *Dao) TopPhotoArc(c context.Context, mid int64) (res *model.TopPhotoArc, err error) {
	addCache := true
	res, err = d.CacheTopPhotoArc(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil || res.Aid == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:TopPhotoArc")
		return
	}
	var rr interface{}
	sf := d.cacheSFTopPhotoArc(mid)
	rr, err, _ = cacheSingleFlights[2].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:TopPhotoArc")
		r, e = d.RawTopPhotoArc(c, mid)
		return
	})
	res = rr.(*model.TopPhotoArc)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.TopPhotoArc{Aid: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheTopPhotoArc(c, mid, miss)
	})
	return
}

// Whitelist get data from cache if miss will call source method, then add to cache.
func (d *Dao) Whitelist(c context.Context, req *pb.WhitelistReq) (res *pb.WhitelistReply, err error) {
	addCache := true
	res, err = d.CacheWhitelist(c, req)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:Whitelist")
		return
	}
	var rr interface{}
	sf := d.cacheSFWhitelist(req)
	rr, err, _ = cacheSingleFlights[3].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:Whitelist")
		r, e = d.RawWhitelist(c, req)
		return
	})
	res = rr.(*pb.WhitelistReply)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &pb.WhitelistReply{IsWhite: false}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheWhitelist(c, req, miss)
	})
	return
}

// QueryWhitelistValid get data from cache if miss will call source method, then add to cache.
func (d *Dao) QueryWhitelistValid(c context.Context, req *pb.WhitelistReq) (res *pb.WhitelistValidTimeReply, err error) {
	addCache := true
	res, err = d.CacheQueryWhitelistValid(c, req)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:QueryWhitelistValid")
		return
	}
	var rr interface{}
	sf := d.cacheSFQueryWhitelistValid(req)
	rr, err, _ = cacheSingleFlights[4].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:QueryWhitelistValid")
		r, e = d.RawQueryWhitelistValid(c, req)
		return
	})
	res = rr.(*pb.WhitelistValidTimeReply)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &pb.WhitelistValidTimeReply{IsWhite: false}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheQueryWhitelistValid(c, req, miss)
	})
	return
}

// MemberTopphoto get data from cache if miss will call source method, then add to cache.
func (d *Dao) MemberTopphoto(c context.Context, mid int64) (res *model.MemberTopphoto, err error) {
	addCache := true
	res, err = d.CacheMemberTopphoto(c, mid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil || res.Sid == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:MemberTopphoto")
		return
	}
	var rr interface{}
	sf := d.cacheSFMemberTopphoto(mid)
	rr, err, _ = cacheSingleFlights[1].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:MemberTopphoto")
		r, e = d.RawMemberTopphoto(c, mid)
		return
	})
	res = rr.(*model.MemberTopphoto)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.MemberTopphoto{Mid: mid, Sid: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheMemberTopphoto(c, mid, miss)
	})
	return
}

// MemberUploadTopphotoByID get data from cache if miss will call source method, then add to cache.
func (d *Dao) MemberUploadTopphotoByID(c context.Context, id int64) (res *model.MemberPhotoUpload, err error) {
	addCache := true
	res, err = d.CacheMemberUploadTopphotoByID(c, id)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil || res.ImgPath == "-1" {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:MemberUploadTopphotoByID")
		return
	}
	var rr interface{}
	sf := d.cacheSFMemberUploadTopphotoByID(id)
	rr, err, _ = cacheSingleFlights[2].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:MemberUploadTopphotoByID")
		r, e = d.RawMemberUploadTopphotoByID(c, id)
		return
	})
	res = rr.(*model.MemberPhotoUpload)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.MemberPhotoUpload{ID: id, ImgPath: "-1"}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheMemberUploadTopphotoByID(c, id, miss)
	})
	return
}

// MemberUploadTopphoto get data from cache if miss will call source method, then add to cache.
func (d *Dao) MemberUploadTopphoto(c context.Context, mid int64, platFrom int) (res *model.MemberPhotoUpload, err error) {
	addCache := true
	res, err = d.CacheMemberUploadTopphoto(c, mid, platFrom)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil || res.ImgPath == "-1" {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:MemberUploadTopphoto")
		return
	}
	var rr interface{}
	sf := d.cacheSFMemberUploadTopphoto(mid, platFrom)
	rr, err, _ = cacheSingleFlights[3].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:MemberUploadTopphoto")
		r, e = d.RawMemberUploadTopphoto(c, mid, platFrom)
		return
	})
	res = rr.(*model.MemberPhotoUpload)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.MemberPhotoUpload{ID: mid, ImgPath: "-1"}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheMemberUploadTopphoto(c, mid, miss, platFrom)
	})
	return
}
