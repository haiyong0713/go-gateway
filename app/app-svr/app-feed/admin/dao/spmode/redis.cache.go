// Code generated by kratos tool redisgen. DO NOT EDIT.

/*
  Package spmode is a generated redis cache package.
  It is generated from:
  type _redis interface {
		// redis: -key=modelUserKey -struct_name=Dao
		DelCacheModelUser(c context.Context, mid int64) error
		// redis: -key=devModelUserKey -struct_name=Dao
		DelCacheDevModelUser(c context.Context, mobiApp string, deviceToken string) error
		// redis: -key=familyRelsOfParentKey -struct_name=Dao
		DelCacheFamilyRelsOfParent(ctx context.Context, id int64) error
		// redis: -key=familyRelsOfChildKey -struct_name=Dao
		DelCacheFamilyRelsOfChild(ctx context.Context, id int64) error
	}
*/

package spmode

import (
	"context"

	"go-common/library/cache/redis"
	"go-common/library/log"
)

var _ _redis

// DelCacheModelUser delete data from redis
func (d *Dao) DelCacheModelUser(c context.Context, id int64) (err error) {
	key := modelUserKey(id)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheModelUser(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// DelCacheDevModelUser delete data from redis
func (d *Dao) DelCacheDevModelUser(c context.Context, id string, deviceToken string) (err error) {
	key := devModelUserKey(id, deviceToken)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheDevModelUser(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// DelCacheFamilyRelsOfParent delete data from redis
func (d *Dao) DelCacheFamilyRelsOfParent(c context.Context, id int64) (err error) {
	key := familyRelsOfParentKey(id)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheFamilyRelsOfParent(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// DelCacheFamilyRelsOfChild delete data from redis
func (d *Dao) DelCacheFamilyRelsOfChild(c context.Context, id int64) (err error) {
	key := familyRelsOfChildKey(id)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheFamilyRelsOfChild(get key: %v) err: %+v", key, err)
		return
	}
	return
}
