// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: menu.proto

// use {app_id}.{version} as package name

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	go_common_library_time "go-common/library/time"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Menu struct {
	TabId                int64                       `protobuf:"varint,1,opt,name=tabId,proto3" json:"tabId,omitempty"`
	Plat                 int32                       `protobuf:"varint,2,opt,name=plat,proto3" json:"plat,omitempty"`
	Name                 string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CType                int32                       `protobuf:"varint,4,opt,name=cType,proto3" json:"cType,omitempty"`
	CValue               string                      `protobuf:"bytes,5,opt,name=cValue,proto3" json:"cValue,omitempty"`
	PlatVersion          []byte                      `protobuf:"bytes,6,opt,name=platVersion,proto3" json:"platVersion,omitempty"`
	STime                go_common_library_time.Time `protobuf:"varint,7,opt,name=sTime,proto3,casttype=go-common/library/time.Time" json:"sTime,omitempty"`
	ETime                go_common_library_time.Time `protobuf:"varint,8,opt,name=eTime,proto3,casttype=go-common/library/time.Time" json:"eTime,omitempty"`
	Status               int32                       `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	Color                string                      `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Badge                string                      `protobuf:"bytes,11,opt,name=badge,proto3" json:"badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Menu) Reset()         { *m = Menu{} }
func (m *Menu) String() string { return proto.CompactTextString(m) }
func (*Menu) ProtoMessage()    {}
func (*Menu) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{0}
}
func (m *Menu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Menu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Menu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Menu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Menu.Merge(m, src)
}
func (m *Menu) XXX_Size() int {
	return m.Size()
}
func (m *Menu) XXX_DiscardUnknown() {
	xxx_messageInfo_Menu.DiscardUnknown(m)
}

var xxx_messageInfo_Menu proto.InternalMessageInfo

func (m *Menu) GetTabId() int64 {
	if m != nil {
		return m.TabId
	}
	return 0
}

func (m *Menu) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *Menu) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Menu) GetCType() int32 {
	if m != nil {
		return m.CType
	}
	return 0
}

func (m *Menu) GetCValue() string {
	if m != nil {
		return m.CValue
	}
	return ""
}

func (m *Menu) GetPlatVersion() []byte {
	if m != nil {
		return m.PlatVersion
	}
	return nil
}

func (m *Menu) GetSTime() go_common_library_time.Time {
	if m != nil {
		return m.STime
	}
	return 0
}

func (m *Menu) GetETime() go_common_library_time.Time {
	if m != nil {
		return m.ETime
	}
	return 0
}

func (m *Menu) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Menu) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Menu) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

type MenuReply struct {
	List                 []*Menu  `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MenuReply) Reset()         { *m = MenuReply{} }
func (m *MenuReply) String() string { return proto.CompactTextString(m) }
func (*MenuReply) ProtoMessage()    {}
func (*MenuReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{1}
}
func (m *MenuReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MenuReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MenuReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MenuReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MenuReply.Merge(m, src)
}
func (m *MenuReply) XXX_Size() int {
	return m.Size()
}
func (m *MenuReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MenuReply.DiscardUnknown(m)
}

var xxx_messageInfo_MenuReply proto.InternalMessageInfo

func (m *MenuReply) GetList() []*Menu {
	if m != nil {
		return m.List
	}
	return nil
}

type Active struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID             int64    `protobuf:"varint,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Background           string   `protobuf:"bytes,4,opt,name=background,proto3" json:"background,omitempty"`
	Type                 string   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Content              []byte   `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Active) Reset()         { *m = Active{} }
func (m *Active) String() string { return proto.CompactTextString(m) }
func (*Active) ProtoMessage()    {}
func (*Active) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{2}
}
func (m *Active) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Active) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Active.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Active) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Active.Merge(m, src)
}
func (m *Active) XXX_Size() int {
	return m.Size()
}
func (m *Active) XXX_DiscardUnknown() {
	xxx_messageInfo_Active.DiscardUnknown(m)
}

var xxx_messageInfo_Active proto.InternalMessageInfo

func (m *Active) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Active) GetParentID() int64 {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *Active) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Active) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *Active) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Active) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type ActiveReply struct {
	List                 []*Active `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ActiveReply) Reset()         { *m = ActiveReply{} }
func (m *ActiveReply) String() string { return proto.CompactTextString(m) }
func (*ActiveReply) ProtoMessage()    {}
func (*ActiveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{3}
}
func (m *ActiveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveReply.Merge(m, src)
}
func (m *ActiveReply) XXX_Size() int {
	return m.Size()
}
func (m *ActiveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveReply.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveReply proto.InternalMessageInfo

func (m *ActiveReply) GetList() []*Active {
	if m != nil {
		return m.List
	}
	return nil
}

type AppActiveReply struct {
	List                 []*Active `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Cover                string    `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AppActiveReply) Reset()         { *m = AppActiveReply{} }
func (m *AppActiveReply) String() string { return proto.CompactTextString(m) }
func (*AppActiveReply) ProtoMessage()    {}
func (*AppActiveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{4}
}
func (m *AppActiveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppActiveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppActiveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppActiveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppActiveReply.Merge(m, src)
}
func (m *AppActiveReply) XXX_Size() int {
	return m.Size()
}
func (m *AppActiveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppActiveReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppActiveReply proto.InternalMessageInfo

func (m *AppActiveReply) GetList() []*Active {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AppActiveReply) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

type AppActiveRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppActiveRequest) Reset()         { *m = AppActiveRequest{} }
func (m *AppActiveRequest) String() string { return proto.CompactTextString(m) }
func (*AppActiveRequest) ProtoMessage()    {}
func (*AppActiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{5}
}
func (m *AppActiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppActiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppActiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppActiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppActiveRequest.Merge(m, src)
}
func (m *AppActiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppActiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppActiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppActiveRequest proto.InternalMessageInfo

func (m *AppActiveRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AppMenusRequest struct {
	Plat                 int32    `protobuf:"varint,1,opt,name=plat,proto3" json:"plat,omitempty"`
	Build                int32    `protobuf:"varint,2,opt,name=build,proto3" json:"build,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMenusRequest) Reset()         { *m = AppMenusRequest{} }
func (m *AppMenusRequest) String() string { return proto.CompactTextString(m) }
func (*AppMenusRequest) ProtoMessage()    {}
func (*AppMenusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{6}
}
func (m *AppMenusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMenusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMenusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMenusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMenusRequest.Merge(m, src)
}
func (m *AppMenusRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppMenusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMenusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppMenusRequest proto.InternalMessageInfo

func (m *AppMenusRequest) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *AppMenusRequest) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

type AppMenu struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TabId                int64    `protobuf:"varint,2,opt,name=tabId,proto3" json:"tabId,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Img                  string   `protobuf:"bytes,4,opt,name=img,proto3" json:"img,omitempty"`
	Icon                 string   `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Color                string   `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMenu) Reset()         { *m = AppMenu{} }
func (m *AppMenu) String() string { return proto.CompactTextString(m) }
func (*AppMenu) ProtoMessage()    {}
func (*AppMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{7}
}
func (m *AppMenu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMenu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMenu.Merge(m, src)
}
func (m *AppMenu) XXX_Size() int {
	return m.Size()
}
func (m *AppMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMenu.DiscardUnknown(m)
}

var xxx_messageInfo_AppMenu proto.InternalMessageInfo

func (m *AppMenu) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppMenu) GetTabId() int64 {
	if m != nil {
		return m.TabId
	}
	return 0
}

func (m *AppMenu) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppMenu) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *AppMenu) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *AppMenu) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type AppMenuReply struct {
	List                 []*AppMenu `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AppMenuReply) Reset()         { *m = AppMenuReply{} }
func (m *AppMenuReply) String() string { return proto.CompactTextString(m) }
func (*AppMenuReply) ProtoMessage()    {}
func (*AppMenuReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0357f39af0c26546, []int{8}
}
func (m *AppMenuReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppMenuReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppMenuReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppMenuReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMenuReply.Merge(m, src)
}
func (m *AppMenuReply) XXX_Size() int {
	return m.Size()
}
func (m *AppMenuReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMenuReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppMenuReply proto.InternalMessageInfo

func (m *AppMenuReply) GetList() []*AppMenu {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*Menu)(nil), "resource.service.v1.Menu")
	proto.RegisterType((*MenuReply)(nil), "resource.service.v1.MenuReply")
	proto.RegisterType((*Active)(nil), "resource.service.v1.Active")
	proto.RegisterType((*ActiveReply)(nil), "resource.service.v1.ActiveReply")
	proto.RegisterType((*AppActiveReply)(nil), "resource.service.v1.AppActiveReply")
	proto.RegisterType((*AppActiveRequest)(nil), "resource.service.v1.AppActiveRequest")
	proto.RegisterType((*AppMenusRequest)(nil), "resource.service.v1.AppMenusRequest")
	proto.RegisterType((*AppMenu)(nil), "resource.service.v1.AppMenu")
	proto.RegisterType((*AppMenuReply)(nil), "resource.service.v1.AppMenuReply")
}

func init() { proto.RegisterFile("menu.proto", fileDescriptor_0357f39af0c26546) }

var fileDescriptor_0357f39af0c26546 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb5, 0xce, 0x9f, 0x36, 0x93, 0xaa, 0x54, 0x0b, 0x42, 0x4b, 0x8b, 0x52, 0xcb, 0xa7,
	0x5c, 0xe2, 0x50, 0x10, 0x17, 0x90, 0x10, 0xa9, 0xb8, 0xf4, 0xc0, 0xc5, 0xaa, 0x8a, 0xc4, 0xcd,
	0x76, 0x06, 0xb3, 0xc2, 0xf6, 0x9a, 0xf5, 0xda, 0x52, 0x4e, 0xbc, 0x05, 0x8f, 0x84, 0x38, 0xf2,
	0x04, 0x08, 0xe5, 0x31, 0x38, 0xa1, 0x9d, 0x75, 0x4a, 0xda, 0xe6, 0x80, 0xc4, 0x6d, 0xbe, 0xd1,
	0x37, 0xab, 0x99, 0xf9, 0xcd, 0x02, 0x14, 0x58, 0x36, 0x61, 0xa5, 0x95, 0x51, 0xfc, 0xbe, 0xc6,
	0x5a, 0x35, 0x3a, 0xc5, 0xb0, 0x46, 0xdd, 0xca, 0x14, 0xc3, 0xf6, 0xec, 0x78, 0x96, 0x49, 0xf3,
	0xb1, 0x49, 0xc2, 0x54, 0x15, 0xf3, 0x4c, 0x65, 0x6a, 0x4e, 0xde, 0xa4, 0xf9, 0x40, 0x8a, 0x04,
	0x45, 0xee, 0x8d, 0xe0, 0x9b, 0x07, 0xfd, 0xb7, 0x58, 0x36, 0xfc, 0x01, 0x0c, 0x4c, 0x9c, 0x5c,
	0x2c, 0x05, 0xf3, 0xd9, 0xb4, 0x17, 0x39, 0xc1, 0x39, 0xf4, 0xab, 0x3c, 0x36, 0xc2, 0xf3, 0xd9,
	0x74, 0x10, 0x51, 0x6c, 0x73, 0x65, 0x5c, 0xa0, 0xe8, 0xf9, 0x6c, 0x3a, 0x8a, 0x28, 0xb6, 0xd5,
	0xe9, 0xe5, 0xaa, 0x42, 0xd1, 0x27, 0xa3, 0x13, 0xfc, 0x21, 0x0c, 0xd3, 0xab, 0x38, 0x6f, 0x50,
	0x0c, 0xc8, 0xdb, 0x29, 0xee, 0xc3, 0xd8, 0xbe, 0x74, 0x85, 0xba, 0x96, 0xaa, 0x14, 0x43, 0x9f,
	0x4d, 0x0f, 0xa2, 0xed, 0x14, 0x7f, 0x0e, 0x83, 0xfa, 0x52, 0x16, 0x28, 0xf6, 0x6c, 0x37, 0xe7,
	0xa7, 0xbf, 0x7f, 0x9e, 0x9e, 0x64, 0x6a, 0x96, 0xaa, 0xa2, 0x50, 0xe5, 0x3c, 0x97, 0x89, 0x8e,
	0xf5, 0x6a, 0x6e, 0x64, 0x81, 0xa1, 0xb5, 0x45, 0xce, 0x6d, 0xcb, 0x90, 0xca, 0xf6, 0xff, 0xb1,
	0x8c, 0xdc, 0xb6, 0xcf, 0xda, 0xc4, 0xa6, 0xa9, 0xc5, 0x88, 0xda, 0xef, 0x14, 0x4d, 0xa5, 0x72,
	0xa5, 0x05, 0x50, 0xfb, 0x4e, 0xd8, 0x6c, 0x12, 0x2f, 0x33, 0x14, 0x63, 0x97, 0x25, 0x11, 0xbc,
	0x80, 0x91, 0xdd, 0x63, 0x84, 0x55, 0xbe, 0xe2, 0x33, 0xe8, 0xe7, 0xb2, 0x36, 0x82, 0xf9, 0xbd,
	0xe9, 0xf8, 0xe9, 0xa3, 0x70, 0x07, 0xa8, 0x90, 0xdc, 0x64, 0x0b, 0xbe, 0x32, 0x18, 0x2e, 0x52,
	0x23, 0x5b, 0xe4, 0x87, 0xe0, 0xc9, 0x0d, 0x03, 0x4f, 0x2e, 0xf9, 0x31, 0xec, 0x57, 0xb1, 0xc6,
	0xd2, 0x5c, 0xbc, 0x21, 0x08, 0xbd, 0xe8, 0x5a, 0xef, 0x04, 0x31, 0x01, 0x48, 0xe2, 0xf4, 0x53,
	0xa6, 0x55, 0x53, 0x2e, 0x89, 0xc6, 0x28, 0xda, 0xca, 0xd8, 0x1a, 0x63, 0x39, 0x39, 0x20, 0x14,
	0x73, 0x01, 0x7b, 0xa9, 0x2a, 0x0d, 0x96, 0xa6, 0x43, 0xb1, 0x91, 0xc1, 0x2b, 0x18, 0xbb, 0xbe,
	0xdc, 0x58, 0xf3, 0x1b, 0x63, 0x9d, 0xec, 0x1c, 0xab, 0xf3, 0xbb, 0xc1, 0xde, 0xc1, 0xe1, 0xa2,
	0xaa, 0xfe, 0xe7, 0x09, 0xc7, 0xa0, 0x45, 0x4d, 0xd3, 0x13, 0x83, 0x16, 0x75, 0x10, 0xc0, 0xd1,
	0xd6, 0xc3, 0x9f, 0x1b, 0xac, 0xcd, 0xed, 0xd5, 0x05, 0x2f, 0xe1, 0xde, 0xa2, 0xaa, 0xec, 0x9a,
	0xeb, 0x8d, 0x65, 0x73, 0xce, 0x6c, 0xeb, 0x9c, 0x2d, 0xce, 0x46, 0xe6, 0xcb, 0xee, 0xc6, 0x9d,
	0x08, 0xbe, 0xc0, 0x5e, 0x57, 0x7c, 0x07, 0xc9, 0xf5, 0x4f, 0xf1, 0x6e, 0xfd, 0x94, 0x3b, 0x30,
	0x8e, 0xa0, 0x27, 0x8b, 0xac, 0xa3, 0x60, 0x43, 0xeb, 0x92, 0xa9, 0x2a, 0x37, 0xeb, 0xb7, 0xf1,
	0xdf, 0x2b, 0x1b, 0x6e, 0x5d, 0x59, 0xf0, 0x1a, 0x0e, 0xba, 0x06, 0xdc, 0xe2, 0x9e, 0xdc, 0x58,
	0xdc, 0xe3, 0xdd, 0x8b, 0xeb, 0x0a, 0xc8, 0x79, 0x7e, 0xf4, 0x7d, 0x3d, 0x61, 0x3f, 0xd6, 0x13,
	0xf6, 0x6b, 0x3d, 0x61, 0xef, 0xbd, 0xf6, 0x2c, 0x19, 0xd2, 0x9f, 0x7f, 0xf6, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x1e, 0xf9, 0x0d, 0x21, 0x45, 0x04, 0x00, 0x00,
}

func (m *Menu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Menu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Menu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x52
	}
	if m.Status != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.ETime != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.ETime))
		i--
		dAtA[i] = 0x40
	}
	if m.STime != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.STime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PlatVersion) > 0 {
		i -= len(m.PlatVersion)
		copy(dAtA[i:], m.PlatVersion)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.PlatVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CValue) > 0 {
		i -= len(m.CValue)
		copy(dAtA[i:], m.CValue)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.CValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CType != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.CType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Plat != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x10
	}
	if m.TabId != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.TabId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MenuReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MenuReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MenuReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMenu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Active) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Active) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Active) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Background) > 0 {
		i -= len(m.Background)
		copy(dAtA[i:], m.Background)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Background)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParentID != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.ParentID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActiveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMenu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppActiveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppActiveReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppActiveReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMenu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppActiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppActiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppActiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppMenusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMenusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMenusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Build != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x10
	}
	if m.Plat != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppMenu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMenu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMenu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Img) > 0 {
		i -= len(m.Img)
		copy(dAtA[i:], m.Img)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Img)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMenu(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TabId != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.TabId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMenu(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppMenuReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppMenuReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppMenuReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMenu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMenu(dAtA []byte, offset int, v uint64) int {
	offset -= sovMenu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Menu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabId != 0 {
		n += 1 + sovMenu(uint64(m.TabId))
	}
	if m.Plat != 0 {
		n += 1 + sovMenu(uint64(m.Plat))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	if m.CType != 0 {
		n += 1 + sovMenu(uint64(m.CType))
	}
	l = len(m.CValue)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	l = len(m.PlatVersion)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	if m.STime != 0 {
		n += 1 + sovMenu(uint64(m.STime))
	}
	if m.ETime != 0 {
		n += 1 + sovMenu(uint64(m.ETime))
	}
	if m.Status != 0 {
		n += 1 + sovMenu(uint64(m.Status))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MenuReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovMenu(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Active) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMenu(uint64(m.Id))
	}
	if m.ParentID != 0 {
		n += 1 + sovMenu(uint64(m.ParentID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	l = len(m.Background)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovMenu(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppActiveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovMenu(uint64(l))
		}
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppActiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMenu(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMenusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plat != 0 {
		n += 1 + sovMenu(uint64(m.Plat))
	}
	if m.Build != 0 {
		n += 1 + sovMenu(uint64(m.Build))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMenu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMenu(uint64(m.Id))
	}
	if m.TabId != 0 {
		n += 1 + sovMenu(uint64(m.TabId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	l = len(m.Img)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovMenu(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppMenuReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovMenu(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMenu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMenu(x uint64) (n int) {
	return sovMenu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Menu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Menu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Menu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabId", wireType)
			}
			m.TabId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CType", wireType)
			}
			m.CType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatVersion = append(m.PlatVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.PlatVersion == nil {
				m.PlatVersion = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field STime", wireType)
			}
			m.STime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.STime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETime", wireType)
			}
			m.ETime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ETime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MenuReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MenuReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MenuReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Menu{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Active) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Active: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Active: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Background = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Active{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppActiveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppActiveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppActiveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Active{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppActiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppActiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppActiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMenusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMenusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMenusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMenu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMenu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMenu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabId", wireType)
			}
			m.TabId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppMenuReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppMenuReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppMenuReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMenu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMenu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AppMenu{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMenu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMenu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMenu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMenu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMenu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMenu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMenu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMenu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMenu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMenu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMenu = fmt.Errorf("proto: unexpected end of group")
)
