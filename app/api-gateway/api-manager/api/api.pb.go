// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/api-gateway/api-manager/api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ApiDetailListReq struct {
	//类型 0-grpc 1-http
	Tp int32 `protobuf:"varint,1,opt,name=tp,proto3" json:"tp,omitempty"`
	//discovery列表或者url列表
	Name                 []string `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiDetailListReq) Reset()         { *m = ApiDetailListReq{} }
func (m *ApiDetailListReq) String() string { return proto.CompactTextString(m) }
func (*ApiDetailListReq) ProtoMessage()    {}
func (*ApiDetailListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0399757a23b4398, []int{0}
}
func (m *ApiDetailListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiDetailListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiDetailListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiDetailListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiDetailListReq.Merge(m, src)
}
func (m *ApiDetailListReq) XXX_Size() int {
	return m.Size()
}
func (m *ApiDetailListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiDetailListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ApiDetailListReq proto.InternalMessageInfo

type ApiDetailListResp struct {
	//key:name value:接口详情
	Res                  map[string]*ApiInfo `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ApiDetailListResp) Reset()         { *m = ApiDetailListResp{} }
func (m *ApiDetailListResp) String() string { return proto.CompactTextString(m) }
func (*ApiDetailListResp) ProtoMessage()    {}
func (*ApiDetailListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0399757a23b4398, []int{1}
}
func (m *ApiDetailListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiDetailListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiDetailListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiDetailListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiDetailListResp.Merge(m, src)
}
func (m *ApiDetailListResp) XXX_Size() int {
	return m.Size()
}
func (m *ApiDetailListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiDetailListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ApiDetailListResp proto.InternalMessageInfo

type ApiInfo struct {
	ServiceName          []string `protobuf:"bytes,1,rep,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	PbAlias              string   `protobuf:"bytes,2,opt,name=pb_alias,json=pbAlias,proto3" json:"pb_alias,omitempty"`
	PbPath               string   `protobuf:"bytes,3,opt,name=pb_path,json=pbPath,proto3" json:"pb_path,omitempty"`
	Input                string   `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	Output               string   `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApiInfo) Reset()         { *m = ApiInfo{} }
func (m *ApiInfo) String() string { return proto.CompactTextString(m) }
func (*ApiInfo) ProtoMessage()    {}
func (*ApiInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0399757a23b4398, []int{2}
}
func (m *ApiInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiInfo.Merge(m, src)
}
func (m *ApiInfo) XXX_Size() int {
	return m.Size()
}
func (m *ApiInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ApiInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ApiDetailListReq)(nil), "api.gateway.manager.service.ApiDetailListReq")
	proto.RegisterType((*ApiDetailListResp)(nil), "api.gateway.manager.service.ApiDetailListResp")
	proto.RegisterMapType((map[string]*ApiInfo)(nil), "api.gateway.manager.service.ApiDetailListResp.ResEntry")
	proto.RegisterType((*ApiInfo)(nil), "api.gateway.manager.service.ApiInfo")
}

func init() {
	proto.RegisterFile("app/api-gateway/api-manager/api/api.proto", fileDescriptor_b0399757a23b4398)
}

var fileDescriptor_b0399757a23b4398 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xae, 0xb3, 0x4d, 0xd2, 0x4c, 0x00, 0x15, 0x83, 0xe8, 0x36, 0xa0, 0x25, 0xac, 0x38, 0x04,
	0xa1, 0x38, 0x52, 0x38, 0x80, 0x72, 0x6b, 0x05, 0x87, 0x4a, 0xfc, 0xc9, 0x47, 0x84, 0x14, 0xcd,
	0xb6, 0xee, 0xc6, 0x62, 0x63, 0x3b, 0xbb, 0xde, 0xa0, 0xbc, 0x04, 0x67, 0x1e, 0x86, 0x07, 0xe8,
	0x91, 0x27, 0x40, 0x10, 0xde, 0x80, 0x27, 0x40, 0xb6, 0x97, 0x03, 0x20, 0x81, 0x7a, 0x58, 0xe9,
	0xfb, 0x3e, 0x7f, 0x33, 0xf3, 0xcd, 0x68, 0xe1, 0x01, 0x1a, 0x33, 0x41, 0x23, 0xc7, 0x39, 0x5a,
	0xf1, 0x1e, 0x37, 0x1e, 0x2f, 0x51, 0x61, 0x2e, 0x4a, 0x87, 0xdd, 0xc7, 0x4c, 0xa9, 0xad, 0xa6,
	0xb7, 0x1d, 0x6c, 0x6c, 0xac, 0xb1, 0xb0, 0x4a, 0x94, 0x6b, 0x79, 0x2a, 0x06, 0xe3, 0x5c, 0xda,
	0x45, 0x9d, 0xb1, 0x53, 0xbd, 0x9c, 0xe4, 0x3a, 0xd7, 0x13, 0x5f, 0x93, 0xd5, 0xe7, 0x9e, 0x79,
	0xe2, 0x51, 0xe8, 0x35, 0xb8, 0x93, 0x6b, 0x9d, 0x17, 0x22, 0x4c, 0x50, 0x4a, 0x5b, 0xb4, 0x52,
	0xab, 0x2a, 0xbc, 0xa6, 0xaf, 0x60, 0xff, 0xc8, 0xc8, 0xa7, 0xc2, 0xa2, 0x2c, 0x9e, 0xcb, 0xca,
	0x72, 0xb1, 0xa2, 0xd7, 0xa0, 0x65, 0x4d, 0x4c, 0x86, 0x64, 0xd4, 0xe6, 0x2d, 0x6b, 0xe8, 0x43,
	0xd8, 0x55, 0xb8, 0x14, 0x71, 0x6b, 0x18, 0x8d, 0x7a, 0xc7, 0x07, 0x3f, 0xbe, 0xdc, 0xbd, 0xb1,
	0xc6, 0x42, 0x9e, 0xa1, 0x15, 0xb3, 0xb4, 0x14, 0xab, 0x5a, 0x96, 0xe2, 0x2c, 0xe5, 0xde, 0x94,
	0x7e, 0x22, 0x70, 0xfd, 0x8f, 0x8e, 0x95, 0xa1, 0x27, 0x10, 0x95, 0xa2, 0x8a, 0xc9, 0x30, 0x1a,
	0xf5, 0xa7, 0x8f, 0xd9, 0x3f, 0xd6, 0x63, 0x7f, 0x15, 0x33, 0x2e, 0xaa, 0x67, 0xca, 0x96, 0x1b,
	0xee, 0x7a, 0x0c, 0xde, 0xc2, 0xde, 0x2f, 0x81, 0xee, 0x43, 0xf4, 0x4e, 0x6c, 0x7c, 0xd4, 0x1e,
	0x77, 0x90, 0xce, 0xa0, 0xbd, 0xc6, 0xa2, 0x76, 0x61, 0xc9, 0xa8, 0x3f, 0xbd, 0xff, 0xbf, 0x51,
	0x27, 0xea, 0x5c, 0xf3, 0x50, 0x32, 0x6b, 0x3d, 0x21, 0xe9, 0x07, 0x02, 0xdd, 0x46, 0xa6, 0xf7,
	0xe0, 0x4a, 0xe3, 0x9c, 0xfb, 0xfd, 0x5d, 0xfa, 0x1e, 0xef, 0x37, 0xda, 0x4b, 0x5c, 0x0a, 0x7a,
	0x08, 0x7b, 0x26, 0x9b, 0x63, 0x21, 0xb1, 0xf2, 0x13, 0x7b, 0xbc, 0x6b, 0xb2, 0x23, 0x47, 0xe9,
	0x01, 0x74, 0x4d, 0x36, 0x37, 0x68, 0x17, 0x71, 0xe4, 0x5f, 0x3a, 0x26, 0x7b, 0x8d, 0x76, 0x41,
	0x6f, 0x42, 0x5b, 0x2a, 0x53, 0xdb, 0x78, 0xd7, 0xcb, 0x81, 0xd0, 0x5b, 0xd0, 0xd1, 0xb5, 0x75,
	0x72, 0x3b, 0xb8, 0x03, 0x9b, 0x6e, 0xa0, 0xfb, 0x22, 0xc4, 0xa6, 0x0a, 0xae, 0xfe, 0x76, 0x1c,
	0x3a, 0xbe, 0xcc, 0x21, 0x57, 0x03, 0x76, 0xb9, 0xbb, 0x1f, 0x1f, 0x5e, 0x7c, 0x4b, 0x76, 0x2e,
	0xb6, 0x09, 0xf9, 0xbc, 0x4d, 0xc8, 0xd7, 0x6d, 0x42, 0x3e, 0x7e, 0x4f, 0x76, 0xde, 0x44, 0x68,
	0x64, 0xd6, 0xf1, 0x7f, 0xcf, 0xa3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x49, 0x3a, 0x84,
	0xd4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerClient interface {
	//批量接口信息
	ApiDetailList(ctx context.Context, in *ApiDetailListReq, opts ...grpc.CallOption) (*ApiDetailListResp, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) ApiDetailList(ctx context.Context, in *ApiDetailListReq, opts ...grpc.CallOption) (*ApiDetailListResp, error) {
	out := new(ApiDetailListResp)
	err := c.cc.Invoke(ctx, "/api.gateway.manager.service.Manager/ApiDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
type ManagerServer interface {
	//批量接口信息
	ApiDetailList(context.Context, *ApiDetailListReq) (*ApiDetailListResp, error)
}

// UnimplementedManagerServer can be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (*UnimplementedManagerServer) ApiDetailList(ctx context.Context, req *ApiDetailListReq) (*ApiDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiDetailList not implemented")
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_ApiDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ApiDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gateway.manager.service.Manager/ApiDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ApiDetailList(ctx, req.(*ApiDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.gateway.manager.service.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiDetailList",
			Handler:    _Manager_ApiDetailList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/api-gateway/api-manager/api/api.proto",
}

func (m *ApiDetailListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDetailListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDetailListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Tp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApiDetailListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiDetailListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiDetailListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Res) > 0 {
		for k := range m.Res {
			v := m.Res[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApiInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Input) > 0 {
		i -= len(m.Input)
		copy(dAtA[i:], m.Input)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Input)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PbPath) > 0 {
		i -= len(m.PbPath)
		copy(dAtA[i:], m.PbPath)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PbPath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PbAlias) > 0 {
		i -= len(m.PbAlias)
		copy(dAtA[i:], m.PbAlias)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PbAlias)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceName) > 0 {
		for iNdEx := len(m.ServiceName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceName[iNdEx])
			copy(dAtA[i:], m.ServiceName[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.ServiceName[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApiDetailListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tp != 0 {
		n += 1 + sovApi(uint64(m.Tp))
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiDetailListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Res) > 0 {
		for k, v := range m.Res {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApiInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceName) > 0 {
		for _, s := range m.ServiceName {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.PbAlias)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PbPath)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Input)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApiDetailListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDetailListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDetailListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiDetailListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiDetailListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiDetailListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = make(map[string]*ApiInfo)
			}
			var mapkey string
			var mapvalue *ApiInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ApiInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Res[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = append(m.ServiceName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PbAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PbPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
