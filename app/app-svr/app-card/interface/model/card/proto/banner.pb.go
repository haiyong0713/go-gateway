// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: banner.proto

package api

import (
	encoding_json "encoding/json"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BannerItem struct {
	Id                   int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Image                string                   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Hash                 string                   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Uri                  string                   `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	RequestId            string                   `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CreativeId           int32                    `protobuf:"varint,7,opt,name=creative_id,json=creativeId,proto3" json:"creative_id,omitempty"`
	SrcId                int32                    `protobuf:"varint,8,opt,name=src_id,json=srcId,proto3" json:"src_id,omitempty"`
	IsAd                 bool                     `protobuf:"varint,9,opt,name=is_ad,json=isAd,proto3" json:"is_ad,omitempty"`
	IsAdLoc              bool                     `protobuf:"varint,10,opt,name=is_ad_loc,json=isAdLoc,proto3" json:"is_ad_loc,omitempty"`
	AdCb                 string                   `protobuf:"bytes,11,opt,name=ad_cb,json=adCb,proto3" json:"ad_cb,omitempty"`
	ShowUrl              string                   `protobuf:"bytes,12,opt,name=show_url,json=showUrl,proto3" json:"show_url,omitempty"`
	ClickUrl             string                   `protobuf:"bytes,13,opt,name=click_url,json=clickUrl,proto3" json:"click_url,omitempty"`
	ClientIp             string                   `protobuf:"bytes,14,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	ServerType           int32                    `protobuf:"varint,15,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty"`
	ResourceId           int32                    `protobuf:"varint,16,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Index                int32                    `protobuf:"varint,17,opt,name=index,proto3" json:"index,omitempty"`
	CmMark               int32                    `protobuf:"varint,18,opt,name=cm_mark,json=cmMark,proto3" json:"cm_mark,omitempty"`
	Extra                encoding_json.RawMessage `protobuf:"bytes,19,opt,name=extra,proto3,casttype=encoding/json.RawMessage" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BannerItem) Reset()         { *m = BannerItem{} }
func (m *BannerItem) String() string { return proto.CompactTextString(m) }
func (*BannerItem) ProtoMessage()    {}
func (*BannerItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cee9d86390dc24e, []int{0}
}
func (m *BannerItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannerItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannerItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BannerItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannerItem.Merge(m, src)
}
func (m *BannerItem) XXX_Size() int {
	return m.Size()
}
func (m *BannerItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BannerItem.DiscardUnknown(m)
}

var xxx_messageInfo_BannerItem proto.InternalMessageInfo

func (m *BannerItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BannerItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BannerItem) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *BannerItem) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BannerItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *BannerItem) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *BannerItem) GetCreativeId() int32 {
	if m != nil {
		return m.CreativeId
	}
	return 0
}

func (m *BannerItem) GetSrcId() int32 {
	if m != nil {
		return m.SrcId
	}
	return 0
}

func (m *BannerItem) GetIsAd() bool {
	if m != nil {
		return m.IsAd
	}
	return false
}

func (m *BannerItem) GetIsAdLoc() bool {
	if m != nil {
		return m.IsAdLoc
	}
	return false
}

func (m *BannerItem) GetAdCb() string {
	if m != nil {
		return m.AdCb
	}
	return ""
}

func (m *BannerItem) GetShowUrl() string {
	if m != nil {
		return m.ShowUrl
	}
	return ""
}

func (m *BannerItem) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *BannerItem) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *BannerItem) GetServerType() int32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *BannerItem) GetResourceId() int32 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *BannerItem) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BannerItem) GetCmMark() int32 {
	if m != nil {
		return m.CmMark
	}
	return 0
}

func (m *BannerItem) GetExtra() encoding_json.RawMessage {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*BannerItem)(nil), "bilibili.app.card.v1.BannerItem")
}

func init() { proto.RegisterFile("banner.proto", fileDescriptor_2cee9d86390dc24e) }

var fileDescriptor_2cee9d86390dc24e = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0x87, 0x71, 0x12, 0xe7, 0xcf, 0x34, 0x84, 0x32, 0x2d, 0x62, 0x28, 0x90, 0x46, 0xac, 0xbc,
	0xc1, 0x51, 0xe1, 0x04, 0x4d, 0x37, 0x58, 0xa2, 0x52, 0x65, 0x01, 0x0b, 0x36, 0xd6, 0x78, 0xe6,
	0xe1, 0x0c, 0xb1, 0x3d, 0x66, 0x66, 0x9c, 0xb6, 0x07, 0xe0, 0x0e, 0xac, 0x39, 0x0d, 0x4b, 0x4e,
	0x80, 0x50, 0xb8, 0x05, 0x2b, 0x34, 0xcf, 0x14, 0x36, 0x5d, 0xd8, 0x7a, 0xbf, 0xef, 0x7b, 0x1e,
	0xf9, 0x69, 0x1e, 0x99, 0xe6, 0xbc, 0xae, 0xc1, 0xc4, 0x8d, 0xd1, 0x4e, 0xd3, 0xc3, 0x5c, 0x95,
	0xca, 0x3f, 0x31, 0x6f, 0x9a, 0x58, 0x70, 0x23, 0xe3, 0xed, 0xc9, 0xd1, 0xf3, 0x42, 0xb9, 0x75,
	0x9b, 0xc7, 0x42, 0x57, 0xcb, 0x42, 0x17, 0x7a, 0x89, 0xcd, 0x79, 0xfb, 0x01, 0x13, 0x06, 0xac,
	0xba, 0x43, 0x9e, 0x7d, 0x1e, 0x10, 0xb2, 0xc2, 0x53, 0x13, 0x07, 0x15, 0x9d, 0x91, 0x9e, 0x92,
	0x2c, 0x58, 0x04, 0x51, 0x3f, 0xed, 0x29, 0x49, 0x0f, 0x49, 0xe8, 0x94, 0x2b, 0x81, 0xf5, 0x16,
	0x41, 0x34, 0x49, 0xbb, 0xe0, 0xa9, 0xaa, 0x78, 0x01, 0xac, 0xdf, 0x51, 0x0c, 0x94, 0x92, 0xc1,
	0x9a, 0xdb, 0x35, 0x1b, 0x20, 0xc4, 0x9a, 0xee, 0x93, 0x7e, 0x6b, 0x14, 0x0b, 0x11, 0xf9, 0x92,
	0x3e, 0x25, 0xc4, 0xc0, 0xa7, 0x16, 0xac, 0xcb, 0x94, 0x64, 0x43, 0x14, 0x93, 0xbf, 0x24, 0x91,
	0xf4, 0x98, 0xec, 0x09, 0x03, 0xdc, 0xa9, 0x2d, 0x78, 0x3f, 0x5a, 0x04, 0x51, 0x98, 0x92, 0x1b,
	0x94, 0x48, 0xfa, 0x80, 0x0c, 0xad, 0x11, 0xde, 0x8d, 0xd1, 0x85, 0xd6, 0x88, 0x44, 0xd2, 0x03,
	0x12, 0x2a, 0x9b, 0x71, 0xc9, 0x26, 0x8b, 0x20, 0x1a, 0xa7, 0x03, 0x65, 0x4f, 0x25, 0x3d, 0x22,
	0x13, 0x84, 0x59, 0xa9, 0x05, 0x23, 0x28, 0x46, 0x5e, 0xbc, 0xd6, 0xc2, 0x7f, 0xc0, 0x65, 0x26,
	0x72, 0xb6, 0xd7, 0xfd, 0x2e, 0x97, 0x67, 0x39, 0x7d, 0x44, 0xc6, 0x76, 0xad, 0x2f, 0xb3, 0xd6,
	0x94, 0x6c, 0x8a, 0x7c, 0xe4, 0xf3, 0x5b, 0x53, 0xd2, 0xc7, 0x64, 0x22, 0x4a, 0x25, 0x36, 0xe8,
	0xee, 0xa2, 0x1b, 0x23, 0xf8, 0x2f, 0xa1, 0x76, 0x99, 0x6a, 0xd8, 0xec, 0x9f, 0x84, 0xda, 0x25,
	0x8d, 0x1f, 0xc9, 0x82, 0xd9, 0x82, 0xc9, 0xdc, 0x75, 0x03, 0xec, 0x5e, 0x37, 0x52, 0x87, 0xde,
	0x5c, 0x37, 0xe0, 0x1b, 0x0c, 0x58, 0xdd, 0x1a, 0x81, 0x33, 0xef, 0x77, 0x0d, 0x37, 0x28, 0xc1,
	0x5b, 0x50, 0xb5, 0x84, 0x2b, 0x76, 0xbf, 0x1b, 0x19, 0x03, 0x7d, 0x48, 0x46, 0xa2, 0xca, 0x2a,
	0x6e, 0x36, 0x8c, 0x22, 0x1f, 0x8a, 0xea, 0x9c, 0x9b, 0x0d, 0x7d, 0x41, 0x42, 0xb8, 0x72, 0x86,
	0xb3, 0x83, 0x45, 0x10, 0x4d, 0x57, 0x4f, 0x7e, 0xff, 0x38, 0x66, 0x50, 0x0b, 0x2d, 0x55, 0x5d,
	0x2c, 0x3f, 0x5a, 0x5d, 0xc7, 0x29, 0xbf, 0x3c, 0x07, 0x6b, 0x79, 0x01, 0x69, 0xd7, 0xba, 0x7a,
	0xf5, 0x6d, 0x37, 0x0f, 0xbe, 0xef, 0xe6, 0xc1, 0xcf, 0xdd, 0x3c, 0xf8, 0xf2, 0x6b, 0x7e, 0x87,
	0xcc, 0x85, 0xae, 0xe2, 0x9c, 0x37, 0xca, 0xc6, 0xb7, 0x2d, 0xda, 0x45, 0xf0, 0xbe, 0xcf, 0x1b,
	0xf5, 0xb5, 0x37, 0x5b, 0x9d, 0x5e, 0x24, 0x67, 0xdc, 0xc8, 0x77, 0x27, 0xfe, 0x9d, 0x0f, 0x71,
	0xb1, 0x5e, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x5e, 0x7a, 0xf2, 0xad, 0x02, 0x00, 0x00,
}

func (m *BannerItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BannerItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.CmMark != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.CmMark))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Index != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ResourceId != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.ResourceId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ServerType != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.ServerType))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ClientIp) > 0 {
		i -= len(m.ClientIp)
		copy(dAtA[i:], m.ClientIp)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.ClientIp)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ClickUrl) > 0 {
		i -= len(m.ClickUrl)
		copy(dAtA[i:], m.ClickUrl)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.ClickUrl)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ShowUrl) > 0 {
		i -= len(m.ShowUrl)
		copy(dAtA[i:], m.ShowUrl)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.ShowUrl)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AdCb) > 0 {
		i -= len(m.AdCb)
		copy(dAtA[i:], m.AdCb)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.AdCb)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsAdLoc {
		i--
		if m.IsAdLoc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsAd {
		i--
		if m.IsAd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.SrcId != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.SrcId))
		i--
		dAtA[i] = 0x40
	}
	if m.CreativeId != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.CreativeId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBanner(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBanner(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBanner(dAtA []byte, offset int, v uint64) int {
	offset -= sovBanner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BannerItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBanner(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	if m.CreativeId != 0 {
		n += 1 + sovBanner(uint64(m.CreativeId))
	}
	if m.SrcId != 0 {
		n += 1 + sovBanner(uint64(m.SrcId))
	}
	if m.IsAd {
		n += 2
	}
	if m.IsAdLoc {
		n += 2
	}
	l = len(m.AdCb)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.ShowUrl)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.ClickUrl)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovBanner(uint64(l))
	}
	if m.ServerType != 0 {
		n += 1 + sovBanner(uint64(m.ServerType))
	}
	if m.ResourceId != 0 {
		n += 2 + sovBanner(uint64(m.ResourceId))
	}
	if m.Index != 0 {
		n += 2 + sovBanner(uint64(m.Index))
	}
	if m.CmMark != 0 {
		n += 2 + sovBanner(uint64(m.CmMark))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 2 + l + sovBanner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBanner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBanner(x uint64) (n int) {
	return sovBanner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BannerItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBanner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannerItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannerItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreativeId", wireType)
			}
			m.CreativeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreativeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcId", wireType)
			}
			m.SrcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAd = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdLoc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdLoc = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdCb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdCb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClickUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClickUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			m.ServerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmMark", wireType)
			}
			m.CmMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmMark |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBanner
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBanner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBanner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBanner
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBanner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBanner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBanner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBanner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBanner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBanner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBanner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBanner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBanner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBanner = fmt.Errorf("proto: unexpected end of group")
)
