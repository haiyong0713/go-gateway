// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: go-gateway/app/app-svr/topic/interface/api/api.proto

/*
Package v1 is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

It is generated from these files:

	go-gateway/app/app-svr/topic/interface/api/api.proto
*/
package v1

import (
	"context"

	bm "go-common/library/net/http/blademaster"
	"go-common/library/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathTopicTopicDetailsAll = "/bilibili.app.topic.v1.Topic/TopicDetailsAll"
var PathTopicTopicDetailsFold = "/bilibili.app.topic.v1.Topic/TopicDetailsFold"
var PathTopicTopicSetDetails = "/bilibili.app.topic.v1.Topic/TopicSetDetails"
var PathTopicTopicMergedResource = "/bilibili.app.topic.v1.Topic/TopicMergedResource"

// TopicBMServer is the server API for Topic service.
type TopicBMServer interface {
	// 话题详情页总数据
	TopicDetailsAll(ctx context.Context, req *TopicDetailsAllReq) (resp *TopicDetailsAllReply, err error)

	// 话题详情页折叠数据
	TopicDetailsFold(ctx context.Context, req *TopicDetailsFoldReq) (resp *TopicDetailsFoldReply, err error)

	// 新话题话题集聚合页
	TopicSetDetails(ctx context.Context, req *TopicSetDetailsReq) (resp *TopicSetDetailsReply, err error)

	// 新话题收拢动态页
	TopicMergedResource(ctx context.Context, req *TopicMergedResourceReq) (resp *TopicMergedResourceReply, err error)
}

var v1TopicSvc TopicBMServer

func topicTopicDetailsAll(c *bm.Context) {
	p := new(TopicDetailsAllReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := v1TopicSvc.TopicDetailsAll(c, p)
	c.JSON(resp, err)
}

func topicTopicDetailsFold(c *bm.Context) {
	p := new(TopicDetailsFoldReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := v1TopicSvc.TopicDetailsFold(c, p)
	c.JSON(resp, err)
}

func topicTopicSetDetails(c *bm.Context) {
	p := new(TopicSetDetailsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := v1TopicSvc.TopicSetDetails(c, p)
	c.JSON(resp, err)
}

func topicTopicMergedResource(c *bm.Context) {
	p := new(TopicMergedResourceReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := v1TopicSvc.TopicMergedResource(c, p)
	c.JSON(resp, err)
}

// RegisterTopicBMServer Register the blademaster route
func RegisterTopicBMServer(e *bm.Engine, server TopicBMServer) {
	v1TopicSvc = server
	e.GET("/bilibili.app.topic.v1.Topic/TopicDetailsAll", topicTopicDetailsAll)
	e.GET("/bilibili.app.topic.v1.Topic/TopicDetailsFold", topicTopicDetailsFold)
	e.GET("/bilibili.app.topic.v1.Topic/TopicSetDetails", topicTopicSetDetails)
	e.GET("/bilibili.app.topic.v1.Topic/TopicMergedResource", topicTopicMergedResource)
}
