// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-interface/interface-legacy/api/history/history.proto

package history

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	v1 "go-gateway/app/app-svr/archive/middleware/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 搜索历史记录来源
type HistorySource int32

const (
	// 主站历史记录页
	HistorySource_history HistorySource = 0
	// 会员购浏览记录
	HistorySource_shopping HistorySource = 1
)

var HistorySource_name = map[int32]string{
	0: "history",
	1: "shopping",
}

var HistorySource_value = map[string]int32{
	"history":  0,
	"shopping": 1,
}

func (x HistorySource) String() string {
	return proto.EnumName(HistorySource_name, int32(x))
}

func (HistorySource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{0}
}

// DT 设备类型枚举
type DT int32

const (
	DT_Unknown DT = 0
	DT_Phone   DT = 1
	DT_Pad     DT = 2
	DT_PC      DT = 3
	DT_TV      DT = 4
	DT_Car     DT = 5
	DT_IoT     DT = 6
	DT_AndPad  DT = 7
)

var DT_name = map[int32]string{
	0: "Unknown",
	1: "Phone",
	2: "Pad",
	3: "PC",
	4: "TV",
	5: "Car",
	6: "IoT",
	7: "AndPad",
}

var DT_value = map[string]int32{
	"Unknown": 0,
	"Phone":   1,
	"Pad":     2,
	"PC":      3,
	"TV":      4,
	"Car":     5,
	"IoT":     6,
	"AndPad":  7,
}

func (x DT) String() string {
	return proto.EnumName(DT_name, int32(x))
}

func (DT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{1}
}

// HistoryTabReq 历史记录列表请求参数
type HistoryTabReq struct {
	// 1.搜索列表，入参是当前定位到的tab
	// 2.普通列表，不需要传此参数
	// 业务类型（视频-archive 直播-live 专栏-article 商品-goods 展演-show）
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	// 查询请求来源
	Source HistorySource `protobuf:"varint,2,opt,name=source,proto3,enum=bilibili.app.interface.v1.HistorySource" json:"source,omitempty"`
	// 搜索关键词,搜索时需传
	Keyword              string   `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoryTabReq) Reset()         { *m = HistoryTabReq{} }
func (m *HistoryTabReq) String() string { return proto.CompactTextString(m) }
func (*HistoryTabReq) ProtoMessage()    {}
func (*HistoryTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{0}
}
func (m *HistoryTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryTabReq.Merge(m, src)
}
func (m *HistoryTabReq) XXX_Size() int {
	return m.Size()
}
func (m *HistoryTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryTabReq proto.InternalMessageInfo

func (m *HistoryTabReq) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *HistoryTabReq) GetSource() HistorySource {
	if m != nil {
		return m.Source
	}
	return HistorySource_history
}

func (m *HistoryTabReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

// CursorReply 历史记录列表返回值
type HistoryTabReply struct {
	// 顶部tab
	Tab                  []*CursorTab `protobuf:"bytes,1,rep,name=tab,proto3" json:"tab,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HistoryTabReply) Reset()         { *m = HistoryTabReply{} }
func (m *HistoryTabReply) String() string { return proto.CompactTextString(m) }
func (*HistoryTabReply) ProtoMessage()    {}
func (*HistoryTabReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{1}
}
func (m *HistoryTabReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryTabReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryTabReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryTabReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryTabReply.Merge(m, src)
}
func (m *HistoryTabReply) XXX_Size() int {
	return m.Size()
}
func (m *HistoryTabReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryTabReply.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryTabReply proto.InternalMessageInfo

func (m *HistoryTabReply) GetTab() []*CursorTab {
	if m != nil {
		return m.Tab
	}
	return nil
}

// CursorReq 历史记录列表请求参数
type CursorReq struct {
	// 翻页游标（透传上页结果返回）
	Cursor *Cursor `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// 业务类型（全部-all 视频-archive 直播-live 专栏-article）
	Business string `protobuf:"bytes,2,opt,name=business,proto3" json:"business,omitempty"`
	//秒开参数
	PlayerPreload *PlayerPreloadParams `protobuf:"bytes,3,opt,name=player_preload,json=playerPreload,proto3" json:"player_preload,omitempty"`
	// 秒开用
	PlayerArgs           *v1.PlayerArgs `protobuf:"bytes,4,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CursorReq) Reset()         { *m = CursorReq{} }
func (m *CursorReq) String() string { return proto.CompactTextString(m) }
func (*CursorReq) ProtoMessage()    {}
func (*CursorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{2}
}
func (m *CursorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CursorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CursorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CursorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CursorReq.Merge(m, src)
}
func (m *CursorReq) XXX_Size() int {
	return m.Size()
}
func (m *CursorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CursorReq.DiscardUnknown(m)
}

var xxx_messageInfo_CursorReq proto.InternalMessageInfo

func (m *CursorReq) GetCursor() *Cursor {
	if m != nil {
		return m.Cursor
	}
	return nil
}

func (m *CursorReq) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *CursorReq) GetPlayerPreload() *PlayerPreloadParams {
	if m != nil {
		return m.PlayerPreload
	}
	return nil
}

func (m *CursorReq) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

// CursorReply 历史记录列表返回值
type CursorReply struct {
	// 卡片内容
	Items []*CursorItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// 顶部tab
	Tab []*CursorTab `protobuf:"bytes,2,rep,name=tab,proto3" json:"tab,omitempty"`
	// 翻页游标
	Cursor *Cursor `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// 是否还有更多数据
	HasMore              bool     `protobuf:"varint,4,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CursorReply) Reset()         { *m = CursorReply{} }
func (m *CursorReply) String() string { return proto.CompactTextString(m) }
func (*CursorReply) ProtoMessage()    {}
func (*CursorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{3}
}
func (m *CursorReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CursorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CursorReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CursorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CursorReply.Merge(m, src)
}
func (m *CursorReply) XXX_Size() int {
	return m.Size()
}
func (m *CursorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CursorReply.DiscardUnknown(m)
}

var xxx_messageInfo_CursorReply proto.InternalMessageInfo

func (m *CursorReply) GetItems() []*CursorItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CursorReply) GetTab() []*CursorTab {
	if m != nil {
		return m.Tab
	}
	return nil
}

func (m *CursorReply) GetCursor() *Cursor {
	if m != nil {
		return m.Cursor
	}
	return nil
}

func (m *CursorReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

// CursorReq 历史记录列表请求参数
type CursorV2Req struct {
	// 翻页游标（透传上页结果返回）
	Cursor *Cursor `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// 业务类型（视频-archive 直播-live 专栏-article 商品-goods 展演-show）
	Business string `protobuf:"bytes,2,opt,name=business,proto3" json:"business,omitempty"`
	//秒开参数
	PlayerPreload *PlayerPreloadParams `protobuf:"bytes,3,opt,name=player_preload,json=playerPreload,proto3" json:"player_preload,omitempty"`
	// 秒开用
	PlayerArgs *v1.PlayerArgs `protobuf:"bytes,4,opt,name=player_args,json=playerArgs,proto3" json:"player_args,omitempty"`
	//是否选择本机的播放历史
	IsLocal              bool     `protobuf:"varint,5,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CursorV2Req) Reset()         { *m = CursorV2Req{} }
func (m *CursorV2Req) String() string { return proto.CompactTextString(m) }
func (*CursorV2Req) ProtoMessage()    {}
func (*CursorV2Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{4}
}
func (m *CursorV2Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CursorV2Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CursorV2Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CursorV2Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CursorV2Req.Merge(m, src)
}
func (m *CursorV2Req) XXX_Size() int {
	return m.Size()
}
func (m *CursorV2Req) XXX_DiscardUnknown() {
	xxx_messageInfo_CursorV2Req.DiscardUnknown(m)
}

var xxx_messageInfo_CursorV2Req proto.InternalMessageInfo

func (m *CursorV2Req) GetCursor() *Cursor {
	if m != nil {
		return m.Cursor
	}
	return nil
}

func (m *CursorV2Req) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *CursorV2Req) GetPlayerPreload() *PlayerPreloadParams {
	if m != nil {
		return m.PlayerPreload
	}
	return nil
}

func (m *CursorV2Req) GetPlayerArgs() *v1.PlayerArgs {
	if m != nil {
		return m.PlayerArgs
	}
	return nil
}

func (m *CursorV2Req) GetIsLocal() bool {
	if m != nil {
		return m.IsLocal
	}
	return false
}

// CursorReply 历史记录列表返回值
type CursorV2Reply struct {
	// 卡片内容
	Items []*CursorItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// 翻页游标
	Cursor *Cursor `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// 是否还有更多数据
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 空页面的跳转链接
	EmptyLink            string   `protobuf:"bytes,4,opt,name=empty_link,json=emptyLink,proto3" json:"empty_link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CursorV2Reply) Reset()         { *m = CursorV2Reply{} }
func (m *CursorV2Reply) String() string { return proto.CompactTextString(m) }
func (*CursorV2Reply) ProtoMessage()    {}
func (*CursorV2Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{5}
}
func (m *CursorV2Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CursorV2Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CursorV2Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CursorV2Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CursorV2Reply.Merge(m, src)
}
func (m *CursorV2Reply) XXX_Size() int {
	return m.Size()
}
func (m *CursorV2Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_CursorV2Reply.DiscardUnknown(m)
}

var xxx_messageInfo_CursorV2Reply proto.InternalMessageInfo

func (m *CursorV2Reply) GetItems() []*CursorItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CursorV2Reply) GetCursor() *Cursor {
	if m != nil {
		return m.Cursor
	}
	return nil
}

func (m *CursorV2Reply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *CursorV2Reply) GetEmptyLink() string {
	if m != nil {
		return m.EmptyLink
	}
	return ""
}

// CursorItem 历史记录卡片内容
type CursorItem struct {
	// Types that are valid to be assigned to CardItem:
	//	*CursorItem_CardUgc
	//	*CursorItem_CardOgv
	//	*CursorItem_CardArticle
	//	*CursorItem_CardLive
	//	*CursorItem_CardCheese
	CardItem isCursorItem_CardItem `protobuf_oneof:"card_item"`
	// 标题
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// 跳转链接
	Uri string `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	// 观看时间
	ViewAt int64 `protobuf:"varint,8,opt,name=view_at,json=viewAt,proto3" json:"view_at,omitempty"`
	// 历史记录主键（删除传递）
	Kid int64 `protobuf:"varint,9,opt,name=kid,proto3" json:"kid,omitempty"`
	// 业务id（如稿件aid，直播room_id等）
	Oid int64 `protobuf:"varint,10,opt,name=oid,proto3" json:"oid,omitempty"`
	// 业务类型
	Business string `protobuf:"bytes,11,opt,name=business,proto3" json:"business,omitempty"`
	// 业务类型
	Tp int32 `protobuf:"varint,12,opt,name=tp,proto3" json:"tp,omitempty"`
	// 播放设备
	Dt *DeviceType `protobuf:"bytes,13,opt,name=dt,proto3" json:"dt,omitempty"`
	// 是否有分享按钮
	HasShare             bool     `protobuf:"varint,14,opt,name=has_share,json=hasShare,proto3" json:"has_share,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CursorItem) Reset()         { *m = CursorItem{} }
func (m *CursorItem) String() string { return proto.CompactTextString(m) }
func (*CursorItem) ProtoMessage()    {}
func (*CursorItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{6}
}
func (m *CursorItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CursorItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CursorItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CursorItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CursorItem.Merge(m, src)
}
func (m *CursorItem) XXX_Size() int {
	return m.Size()
}
func (m *CursorItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CursorItem.DiscardUnknown(m)
}

var xxx_messageInfo_CursorItem proto.InternalMessageInfo

type isCursorItem_CardItem interface {
	isCursorItem_CardItem()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CursorItem_CardUgc struct {
	CardUgc *CardUGC `protobuf:"bytes,1,opt,name=card_ugc,json=cardUgc,proto3,oneof" json:"card_ugc,omitempty"`
}
type CursorItem_CardOgv struct {
	CardOgv *CardOGV `protobuf:"bytes,2,opt,name=card_ogv,json=cardOgv,proto3,oneof" json:"card_ogv,omitempty"`
}
type CursorItem_CardArticle struct {
	CardArticle *CardArticle `protobuf:"bytes,3,opt,name=card_article,json=cardArticle,proto3,oneof" json:"card_article,omitempty"`
}
type CursorItem_CardLive struct {
	CardLive *CardLive `protobuf:"bytes,4,opt,name=card_live,json=cardLive,proto3,oneof" json:"card_live,omitempty"`
}
type CursorItem_CardCheese struct {
	CardCheese *CardCheese `protobuf:"bytes,5,opt,name=card_cheese,json=cardCheese,proto3,oneof" json:"card_cheese,omitempty"`
}

func (*CursorItem_CardUgc) isCursorItem_CardItem()     {}
func (*CursorItem_CardOgv) isCursorItem_CardItem()     {}
func (*CursorItem_CardArticle) isCursorItem_CardItem() {}
func (*CursorItem_CardLive) isCursorItem_CardItem()    {}
func (*CursorItem_CardCheese) isCursorItem_CardItem()  {}

func (m *CursorItem) GetCardItem() isCursorItem_CardItem {
	if m != nil {
		return m.CardItem
	}
	return nil
}

func (m *CursorItem) GetCardUgc() *CardUGC {
	if x, ok := m.GetCardItem().(*CursorItem_CardUgc); ok {
		return x.CardUgc
	}
	return nil
}

func (m *CursorItem) GetCardOgv() *CardOGV {
	if x, ok := m.GetCardItem().(*CursorItem_CardOgv); ok {
		return x.CardOgv
	}
	return nil
}

func (m *CursorItem) GetCardArticle() *CardArticle {
	if x, ok := m.GetCardItem().(*CursorItem_CardArticle); ok {
		return x.CardArticle
	}
	return nil
}

func (m *CursorItem) GetCardLive() *CardLive {
	if x, ok := m.GetCardItem().(*CursorItem_CardLive); ok {
		return x.CardLive
	}
	return nil
}

func (m *CursorItem) GetCardCheese() *CardCheese {
	if x, ok := m.GetCardItem().(*CursorItem_CardCheese); ok {
		return x.CardCheese
	}
	return nil
}

func (m *CursorItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CursorItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *CursorItem) GetViewAt() int64 {
	if m != nil {
		return m.ViewAt
	}
	return 0
}

func (m *CursorItem) GetKid() int64 {
	if m != nil {
		return m.Kid
	}
	return 0
}

func (m *CursorItem) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *CursorItem) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *CursorItem) GetTp() int32 {
	if m != nil {
		return m.Tp
	}
	return 0
}

func (m *CursorItem) GetDt() *DeviceType {
	if m != nil {
		return m.Dt
	}
	return nil
}

func (m *CursorItem) GetHasShare() bool {
	if m != nil {
		return m.HasShare
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CursorItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CursorItem_CardUgc)(nil),
		(*CursorItem_CardOgv)(nil),
		(*CursorItem_CardArticle)(nil),
		(*CursorItem_CardLive)(nil),
		(*CursorItem_CardCheese)(nil),
	}
}

// CardUGC ugc卡片
type CardUGC struct {
	// 封面
	Cover string `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	// 观看进度
	Progress int64 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// 时长
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// up名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// up mid
	Mid int64 `protobuf:"varint,5,opt,name=mid,proto3" json:"mid,omitempty"`
	// 是否展示关注按钮
	DisplayAttention bool `protobuf:"varint,6,opt,name=display_attention,json=displayAttention,proto3" json:"display_attention,omitempty"`
	// 历史观看视频id
	Cid int64 `protobuf:"varint,7,opt,name=cid,proto3" json:"cid,omitempty"`
	// 多p视频的第几p（单p视频不返回）
	Page int32 `protobuf:"varint,8,opt,name=page,proto3" json:"page,omitempty"`
	// 多p视频的分集标题
	Subtitle string `protobuf:"bytes,9,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 新关注组件
	Relation *Relation `protobuf:"bytes,10,opt,name=relation,proto3" json:"relation,omitempty"`
	// bvid
	Bvid string `protobuf:"bytes,11,opt,name=bvid,proto3" json:"bvid,omitempty"`
	// 稿件分p数
	Videos int64 `protobuf:"varint,12,opt,name=videos,proto3" json:"videos,omitempty"`
	// 短链地址
	ShortLink string `protobuf:"bytes,13,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	// 分享subtitle
	ShareSubtitle string `protobuf:"bytes,14,opt,name=share_subtitle,json=shareSubtitle,proto3" json:"share_subtitle,omitempty"`
	// 播放量
	View int64 `protobuf:"varint,15,opt,name=view,proto3" json:"view,omitempty"`
	// 稿件状态
	State int64 `protobuf:"varint,16,opt,name=state,proto3" json:"state,omitempty"`
	//角标
	Badge                string   `protobuf:"bytes,17,opt,name=badge,proto3" json:"badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardUGC) Reset()         { *m = CardUGC{} }
func (m *CardUGC) String() string { return proto.CompactTextString(m) }
func (*CardUGC) ProtoMessage()    {}
func (*CardUGC) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{7}
}
func (m *CardUGC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardUGC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardUGC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardUGC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardUGC.Merge(m, src)
}
func (m *CardUGC) XXX_Size() int {
	return m.Size()
}
func (m *CardUGC) XXX_DiscardUnknown() {
	xxx_messageInfo_CardUGC.DiscardUnknown(m)
}

var xxx_messageInfo_CardUGC proto.InternalMessageInfo

func (m *CardUGC) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardUGC) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *CardUGC) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CardUGC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CardUGC) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *CardUGC) GetDisplayAttention() bool {
	if m != nil {
		return m.DisplayAttention
	}
	return false
}

func (m *CardUGC) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *CardUGC) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *CardUGC) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *CardUGC) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

func (m *CardUGC) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *CardUGC) GetVideos() int64 {
	if m != nil {
		return m.Videos
	}
	return 0
}

func (m *CardUGC) GetShortLink() string {
	if m != nil {
		return m.ShortLink
	}
	return ""
}

func (m *CardUGC) GetShareSubtitle() string {
	if m != nil {
		return m.ShareSubtitle
	}
	return ""
}

func (m *CardUGC) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *CardUGC) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CardUGC) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

// CardOGV ogv卡片
type CardOGV struct {
	// 封面
	Cover string `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	// 观看进度
	Progress int64 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// 时长
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// 番剧卡分集标题
	Subtitle string `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 角标
	Badge string `protobuf:"bytes,5,opt,name=badge,proto3" json:"badge,omitempty"`
	// 稿件状态
	State                int64    `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardOGV) Reset()         { *m = CardOGV{} }
func (m *CardOGV) String() string { return proto.CompactTextString(m) }
func (*CardOGV) ProtoMessage()    {}
func (*CardOGV) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{8}
}
func (m *CardOGV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardOGV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardOGV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardOGV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardOGV.Merge(m, src)
}
func (m *CardOGV) XXX_Size() int {
	return m.Size()
}
func (m *CardOGV) XXX_DiscardUnknown() {
	xxx_messageInfo_CardOGV.DiscardUnknown(m)
}

var xxx_messageInfo_CardOGV proto.InternalMessageInfo

func (m *CardOGV) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardOGV) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *CardOGV) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CardOGV) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *CardOGV) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *CardOGV) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

// CardArticle 专栏卡片
type CardArticle struct {
	// 封面
	Covers []string `protobuf:"bytes,1,rep,name=covers,proto3" json:"covers,omitempty"`
	// up名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// up mid
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	// 是否展示关注按钮
	DisplayAttention bool `protobuf:"varint,4,opt,name=display_attention,json=displayAttention,proto3" json:"display_attention,omitempty"`
	// 角标
	Badge string `protobuf:"bytes,5,opt,name=badge,proto3" json:"badge,omitempty"`
	// 新关注组件
	Relation             *Relation `protobuf:"bytes,6,opt,name=relation,proto3" json:"relation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CardArticle) Reset()         { *m = CardArticle{} }
func (m *CardArticle) String() string { return proto.CompactTextString(m) }
func (*CardArticle) ProtoMessage()    {}
func (*CardArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{9}
}
func (m *CardArticle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardArticle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardArticle.Merge(m, src)
}
func (m *CardArticle) XXX_Size() int {
	return m.Size()
}
func (m *CardArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_CardArticle.DiscardUnknown(m)
}

var xxx_messageInfo_CardArticle proto.InternalMessageInfo

func (m *CardArticle) GetCovers() []string {
	if m != nil {
		return m.Covers
	}
	return nil
}

func (m *CardArticle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CardArticle) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *CardArticle) GetDisplayAttention() bool {
	if m != nil {
		return m.DisplayAttention
	}
	return false
}

func (m *CardArticle) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *CardArticle) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

// CardLive 直播卡片
type CardLive struct {
	// 封面
	Cover string `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	// up名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// up mid
	Mid int64 `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	// tag名称
	Tag string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	// 直播状态
	Status int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	// 是否展示关注按钮
	DisplayAttention bool `protobuf:"varint,6,opt,name=display_attention,json=displayAttention,proto3" json:"display_attention,omitempty"`
	// 新关注组件
	Relation             *Relation `protobuf:"bytes,7,opt,name=relation,proto3" json:"relation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CardLive) Reset()         { *m = CardLive{} }
func (m *CardLive) String() string { return proto.CompactTextString(m) }
func (*CardLive) ProtoMessage()    {}
func (*CardLive) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{10}
}
func (m *CardLive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardLive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardLive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardLive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardLive.Merge(m, src)
}
func (m *CardLive) XXX_Size() int {
	return m.Size()
}
func (m *CardLive) XXX_DiscardUnknown() {
	xxx_messageInfo_CardLive.DiscardUnknown(m)
}

var xxx_messageInfo_CardLive proto.InternalMessageInfo

func (m *CardLive) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardLive) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CardLive) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *CardLive) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *CardLive) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CardLive) GetDisplayAttention() bool {
	if m != nil {
		return m.DisplayAttention
	}
	return false
}

func (m *CardLive) GetRelation() *Relation {
	if m != nil {
		return m.Relation
	}
	return nil
}

// CardCheese 付费课程卡片
type CardCheese struct {
	// 封面
	Cover string `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	// 观看进度
	Progress int64 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	// 时长
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// 付费课程分集标题
	Subtitle string `protobuf:"bytes,4,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	// 稿件状态
	State                int64    `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardCheese) Reset()         { *m = CardCheese{} }
func (m *CardCheese) String() string { return proto.CompactTextString(m) }
func (*CardCheese) ProtoMessage()    {}
func (*CardCheese) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{11}
}
func (m *CardCheese) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardCheese) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardCheese.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardCheese) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardCheese.Merge(m, src)
}
func (m *CardCheese) XXX_Size() int {
	return m.Size()
}
func (m *CardCheese) XXX_DiscardUnknown() {
	xxx_messageInfo_CardCheese.DiscardUnknown(m)
}

var xxx_messageInfo_CardCheese proto.InternalMessageInfo

func (m *CardCheese) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardCheese) GetProgress() int64 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *CardCheese) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CardCheese) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *CardCheese) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

// CursorTab 历史记录顶部tab
type CursorTab struct {
	// 业务类型
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	// 业务名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 客户端router地址
	Router string `protobuf:"bytes,3,opt,name=router,proto3" json:"router,omitempty"`
	// tab定位
	Focus                bool     `protobuf:"varint,4,opt,name=focus,proto3" json:"focus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CursorTab) Reset()         { *m = CursorTab{} }
func (m *CursorTab) String() string { return proto.CompactTextString(m) }
func (*CursorTab) ProtoMessage()    {}
func (*CursorTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{12}
}
func (m *CursorTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CursorTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CursorTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CursorTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CursorTab.Merge(m, src)
}
func (m *CursorTab) XXX_Size() int {
	return m.Size()
}
func (m *CursorTab) XXX_DiscardUnknown() {
	xxx_messageInfo_CursorTab.DiscardUnknown(m)
}

var xxx_messageInfo_CursorTab proto.InternalMessageInfo

func (m *CursorTab) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *CursorTab) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CursorTab) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *CursorTab) GetFocus() bool {
	if m != nil {
		return m.Focus
	}
	return false
}

// Cursor 历史记录游标
type Cursor struct {
	// 本页最大值游标值（透传历史记录服务）
	Max int64 `protobuf:"varint,1,opt,name=max,proto3" json:"max,omitempty"`
	// 本页最大值游标类型（透传历史记录服务）
	MaxTp                int32    `protobuf:"varint,2,opt,name=max_tp,json=maxTp,proto3" json:"max_tp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cursor) Reset()         { *m = Cursor{} }
func (m *Cursor) String() string { return proto.CompactTextString(m) }
func (*Cursor) ProtoMessage()    {}
func (*Cursor) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{13}
}
func (m *Cursor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cursor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cursor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cursor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cursor.Merge(m, src)
}
func (m *Cursor) XXX_Size() int {
	return m.Size()
}
func (m *Cursor) XXX_DiscardUnknown() {
	xxx_messageInfo_Cursor.DiscardUnknown(m)
}

var xxx_messageInfo_Cursor proto.InternalMessageInfo

func (m *Cursor) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Cursor) GetMaxTp() int32 {
	if m != nil {
		return m.MaxTp
	}
	return 0
}

// DeleteReq 历史记录删除请求参数
type DeleteReq struct {
	// 要删除的历史信息
	HisInfo              []*HisInfo `protobuf:"bytes,1,rep,name=his_info,json=hisInfo,proto3" json:"his_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DeleteReq) Reset()         { *m = DeleteReq{} }
func (m *DeleteReq) String() string { return proto.CompactTextString(m) }
func (*DeleteReq) ProtoMessage()    {}
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{14}
}
func (m *DeleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReq.Merge(m, src)
}
func (m *DeleteReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReq proto.InternalMessageInfo

func (m *DeleteReq) GetHisInfo() []*HisInfo {
	if m != nil {
		return m.HisInfo
	}
	return nil
}

// HisInfo 历史记录信息
type HisInfo struct {
	// 业务类型
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	// 历史主键id
	Kid                  int64    `protobuf:"varint,2,opt,name=kid,proto3" json:"kid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HisInfo) Reset()         { *m = HisInfo{} }
func (m *HisInfo) String() string { return proto.CompactTextString(m) }
func (*HisInfo) ProtoMessage()    {}
func (*HisInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{15}
}
func (m *HisInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HisInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HisInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HisInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HisInfo.Merge(m, src)
}
func (m *HisInfo) XXX_Size() int {
	return m.Size()
}
func (m *HisInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HisInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HisInfo proto.InternalMessageInfo

func (m *HisInfo) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *HisInfo) GetKid() int64 {
	if m != nil {
		return m.Kid
	}
	return 0
}

// NoReply 无信息
type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{16}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

// DeviceType 设备类型
type DeviceType struct {
	// 类型
	Type DT `protobuf:"varint,1,opt,name=type,proto3,enum=bilibili.app.interface.v1.DT" json:"type,omitempty"`
	// 图标
	Icon                 string   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceType) Reset()         { *m = DeviceType{} }
func (m *DeviceType) String() string { return proto.CompactTextString(m) }
func (*DeviceType) ProtoMessage()    {}
func (*DeviceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{17}
}
func (m *DeviceType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceType.Merge(m, src)
}
func (m *DeviceType) XXX_Size() int {
	return m.Size()
}
func (m *DeviceType) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceType.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceType proto.InternalMessageInfo

func (m *DeviceType) GetType() DT {
	if m != nil {
		return m.Type
	}
	return DT_Unknown
}

func (m *DeviceType) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

// 新关注组件
type Relation struct {
	// 按钮展示文案：0或者字段不存在：未关注、1：已关注、2：被关注、3：互相关注
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 用户关注UP主：0或者字段不存在：未关注、1：已关注
	IsFollow int32 `protobuf:"varint,2,opt,name=is_follow,json=isFollow,proto3" json:"is_follow,omitempty"`
	// UP主关注用户：0或者字段不存在：未被关注、1：被关注
	IsFollowed           int32    `protobuf:"varint,3,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Relation) Reset()         { *m = Relation{} }
func (m *Relation) String() string { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()    {}
func (*Relation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{18}
}
func (m *Relation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Relation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Relation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Relation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relation.Merge(m, src)
}
func (m *Relation) XXX_Size() int {
	return m.Size()
}
func (m *Relation) XXX_DiscardUnknown() {
	xxx_messageInfo_Relation.DiscardUnknown(m)
}

var xxx_messageInfo_Relation proto.InternalMessageInfo

func (m *Relation) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Relation) GetIsFollow() int32 {
	if m != nil {
		return m.IsFollow
	}
	return 0
}

func (m *Relation) GetIsFollowed() int32 {
	if m != nil {
		return m.IsFollowed
	}
	return 0
}

// SearchReq 历史记录搜索请求参数
type SearchReq struct {
	// 搜索关键词
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty" validate:"required"`
	// 第几页
	Pn int64 `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty" validate:"gt=0,required"`
	// 业务类型（视频-archive 直播-live 专栏-article 商品-goods 展演-show）
	Business             string   `protobuf:"bytes,3,opt,name=business,proto3" json:"business,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchReq) Reset()         { *m = SearchReq{} }
func (m *SearchReq) String() string { return proto.CompactTextString(m) }
func (*SearchReq) ProtoMessage()    {}
func (*SearchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{19}
}
func (m *SearchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchReq.Merge(m, src)
}
func (m *SearchReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchReq proto.InternalMessageInfo

func (m *SearchReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchReq) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *SearchReq) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

// SearchReply 历史记录搜索返回值
type SearchReply struct {
	// 卡片内容
	Items []*CursorItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// 是否还有更多数据
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// 翻页数据
	Page                 *Page    `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchReply) Reset()         { *m = SearchReply{} }
func (m *SearchReply) String() string { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()    {}
func (*SearchReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{20}
}
func (m *SearchReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchReply.Merge(m, src)
}
func (m *SearchReply) XXX_Size() int {
	return m.Size()
}
func (m *SearchReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchReply.DiscardUnknown(m)
}

var xxx_messageInfo_SearchReply proto.InternalMessageInfo

func (m *SearchReply) GetItems() []*CursorItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SearchReply) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *SearchReply) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

// Page 翻页数据
type Page struct {
	// 当前是第几页
	Pn int64 `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty"`
	// 总数量
	Total                int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{21}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *Page) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// 秒开参数
type PlayerPreloadParams struct {
	Qn int64 `protobuf:"varint,1,opt,name=qn,proto3" json:"qn,omitempty"`
	// 功能版本号（秒开用）
	Fnver int64 `protobuf:"varint,2,opt,name=fnver,proto3" json:"fnver,omitempty"`
	// 功能标识（秒开用）
	Fnval int64 `protobuf:"varint,3,opt,name=fnval,proto3" json:"fnval,omitempty"`
	// 返回url是否强制使用域名（秒开用）
	ForceHost int64 `protobuf:"varint,4,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	// 是否需要4k视频，fourk=1 表示需要，其他表示不需要
	Fourk                int64    `protobuf:"varint,5,opt,name=fourk,proto3" json:"fourk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerPreloadParams) Reset()         { *m = PlayerPreloadParams{} }
func (m *PlayerPreloadParams) String() string { return proto.CompactTextString(m) }
func (*PlayerPreloadParams) ProtoMessage()    {}
func (*PlayerPreloadParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{22}
}
func (m *PlayerPreloadParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerPreloadParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerPreloadParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerPreloadParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerPreloadParams.Merge(m, src)
}
func (m *PlayerPreloadParams) XXX_Size() int {
	return m.Size()
}
func (m *PlayerPreloadParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerPreloadParams.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerPreloadParams proto.InternalMessageInfo

func (m *PlayerPreloadParams) GetQn() int64 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *PlayerPreloadParams) GetFnver() int64 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *PlayerPreloadParams) GetFnval() int64 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *PlayerPreloadParams) GetForceHost() int64 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *PlayerPreloadParams) GetFourk() int64 {
	if m != nil {
		return m.Fourk
	}
	return 0
}

type ClearReq struct {
	// 业务类型（视频-archive 直播-live 专栏-article 商品-goods 展演-show）
	Business             string   `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearReq) Reset()         { *m = ClearReq{} }
func (m *ClearReq) String() string { return proto.CompactTextString(m) }
func (*ClearReq) ProtoMessage()    {}
func (*ClearReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{23}
}
func (m *ClearReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearReq.Merge(m, src)
}
func (m *ClearReq) XXX_Size() int {
	return m.Size()
}
func (m *ClearReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearReq proto.InternalMessageInfo

func (m *ClearReq) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

// LatestHistoryReq 最新的历史记录列表请求参数
type LatestHistoryReq struct {
	// 业务类型（视频-archive 直播-live 专栏-article 商品-goods 展演-show）
	Business string `protobuf:"bytes,1,opt,name=business,proto3" json:"business,omitempty"`
	//秒开参数
	PlayerPreload        *PlayerPreloadParams `protobuf:"bytes,2,opt,name=player_preload,json=playerPreload,proto3" json:"player_preload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LatestHistoryReq) Reset()         { *m = LatestHistoryReq{} }
func (m *LatestHistoryReq) String() string { return proto.CompactTextString(m) }
func (*LatestHistoryReq) ProtoMessage()    {}
func (*LatestHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{24}
}
func (m *LatestHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestHistoryReq.Merge(m, src)
}
func (m *LatestHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *LatestHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_LatestHistoryReq proto.InternalMessageInfo

func (m *LatestHistoryReq) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *LatestHistoryReq) GetPlayerPreload() *PlayerPreloadParams {
	if m != nil {
		return m.PlayerPreload
	}
	return nil
}

// LatestHistoryReply 最新的历史记录返回值
type LatestHistoryReply struct {
	// 卡片内容
	Items *CursorItem `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	// 场景
	Scene string `protobuf:"bytes,2,opt,name=scene,proto3" json:"scene,omitempty"`
	// 续播弹窗停留时间
	Rtime int64 `protobuf:"varint,3,opt,name=rtime,proto3" json:"rtime,omitempty"`
	// 分流上报的标志
	Flag                 string   `protobuf:"bytes,4,opt,name=flag,proto3" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LatestHistoryReply) Reset()         { *m = LatestHistoryReply{} }
func (m *LatestHistoryReply) String() string { return proto.CompactTextString(m) }
func (*LatestHistoryReply) ProtoMessage()    {}
func (*LatestHistoryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18a49045ca7d7dc, []int{25}
}
func (m *LatestHistoryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestHistoryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestHistoryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestHistoryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestHistoryReply.Merge(m, src)
}
func (m *LatestHistoryReply) XXX_Size() int {
	return m.Size()
}
func (m *LatestHistoryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestHistoryReply.DiscardUnknown(m)
}

var xxx_messageInfo_LatestHistoryReply proto.InternalMessageInfo

func (m *LatestHistoryReply) GetItems() *CursorItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *LatestHistoryReply) GetScene() string {
	if m != nil {
		return m.Scene
	}
	return ""
}

func (m *LatestHistoryReply) GetRtime() int64 {
	if m != nil {
		return m.Rtime
	}
	return 0
}

func (m *LatestHistoryReply) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func init() {
	proto.RegisterEnum("bilibili.app.interface.v1.HistorySource", HistorySource_name, HistorySource_value)
	proto.RegisterEnum("bilibili.app.interface.v1.DT", DT_name, DT_value)
	proto.RegisterType((*HistoryTabReq)(nil), "bilibili.app.interface.v1.HistoryTabReq")
	proto.RegisterType((*HistoryTabReply)(nil), "bilibili.app.interface.v1.HistoryTabReply")
	proto.RegisterType((*CursorReq)(nil), "bilibili.app.interface.v1.CursorReq")
	proto.RegisterType((*CursorReply)(nil), "bilibili.app.interface.v1.CursorReply")
	proto.RegisterType((*CursorV2Req)(nil), "bilibili.app.interface.v1.CursorV2Req")
	proto.RegisterType((*CursorV2Reply)(nil), "bilibili.app.interface.v1.CursorV2Reply")
	proto.RegisterType((*CursorItem)(nil), "bilibili.app.interface.v1.CursorItem")
	proto.RegisterType((*CardUGC)(nil), "bilibili.app.interface.v1.CardUGC")
	proto.RegisterType((*CardOGV)(nil), "bilibili.app.interface.v1.CardOGV")
	proto.RegisterType((*CardArticle)(nil), "bilibili.app.interface.v1.CardArticle")
	proto.RegisterType((*CardLive)(nil), "bilibili.app.interface.v1.CardLive")
	proto.RegisterType((*CardCheese)(nil), "bilibili.app.interface.v1.CardCheese")
	proto.RegisterType((*CursorTab)(nil), "bilibili.app.interface.v1.CursorTab")
	proto.RegisterType((*Cursor)(nil), "bilibili.app.interface.v1.Cursor")
	proto.RegisterType((*DeleteReq)(nil), "bilibili.app.interface.v1.DeleteReq")
	proto.RegisterType((*HisInfo)(nil), "bilibili.app.interface.v1.HisInfo")
	proto.RegisterType((*NoReply)(nil), "bilibili.app.interface.v1.NoReply")
	proto.RegisterType((*DeviceType)(nil), "bilibili.app.interface.v1.DeviceType")
	proto.RegisterType((*Relation)(nil), "bilibili.app.interface.v1.Relation")
	proto.RegisterType((*SearchReq)(nil), "bilibili.app.interface.v1.SearchReq")
	proto.RegisterType((*SearchReply)(nil), "bilibili.app.interface.v1.SearchReply")
	proto.RegisterType((*Page)(nil), "bilibili.app.interface.v1.Page")
	proto.RegisterType((*PlayerPreloadParams)(nil), "bilibili.app.interface.v1.PlayerPreloadParams")
	proto.RegisterType((*ClearReq)(nil), "bilibili.app.interface.v1.ClearReq")
	proto.RegisterType((*LatestHistoryReq)(nil), "bilibili.app.interface.v1.LatestHistoryReq")
	proto.RegisterType((*LatestHistoryReply)(nil), "bilibili.app.interface.v1.LatestHistoryReply")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-interface/interface-legacy/api/history/history.proto", fileDescriptor_a18a49045ca7d7dc)
}

var fileDescriptor_a18a49045ca7d7dc = []byte{
	// 1802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x5f, 0x6f, 0x1c, 0x49,
	0x11, 0xf7, 0xcc, 0x7a, 0xff, 0xd5, 0xc6, 0xbe, 0xbd, 0x3e, 0xc8, 0xcd, 0xf9, 0xb8, 0xc4, 0xcc,
	0x71, 0x91, 0x95, 0x8b, 0xd7, 0xd8, 0x27, 0x40, 0x1c, 0x3a, 0x81, 0xed, 0x88, 0xd8, 0x10, 0xb0,
	0x35, 0x76, 0x2c, 0x81, 0x90, 0x96, 0xde, 0x99, 0xf6, 0x6c, 0xcb, 0xb3, 0xd3, 0x93, 0x9e, 0xde,
	0x75, 0xf6, 0x03, 0xf0, 0x47, 0x88, 0x17, 0xde, 0x10, 0x2f, 0x48, 0xbc, 0xf0, 0x39, 0x78, 0xe3,
	0x0d, 0x1e, 0x91, 0x90, 0x02, 0x0a, 0xdf, 0xe0, 0xc4, 0x07, 0x40, 0xd5, 0xdd, 0x33, 0xbb, 0xeb,
	0x4b, 0x76, 0x9d, 0x4b, 0xe0, 0x89, 0x87, 0xd5, 0x56, 0xf5, 0x74, 0xd5, 0x54, 0xff, 0xea, 0x57,
	0xdd, 0xd5, 0x03, 0x47, 0xb1, 0xd8, 0x8c, 0xa9, 0x62, 0x97, 0x74, 0xbc, 0x45, 0xb3, 0x0c, 0x7f,
	0x9b, 0xf9, 0x48, 0xea, 0x7f, 0x9e, 0x2a, 0x26, 0xcf, 0x69, 0xc8, 0xb6, 0x4a, 0x69, 0x33, 0x61,
	0x31, 0x0d, 0x71, 0x2a, 0xdf, 0xea, 0xf3, 0x5c, 0x09, 0x39, 0x2e, 0xfe, 0x3b, 0x99, 0x14, 0x4a,
	0x90, 0x77, 0x7a, 0x3c, 0xe1, 0xf8, 0xeb, 0xd0, 0x2c, 0xeb, 0x94, 0x86, 0x9d, 0xd1, 0xf6, 0xda,
	0x66, 0xcc, 0x55, 0x7f, 0xd8, 0xeb, 0x84, 0x62, 0xb0, 0x15, 0x8b, 0x58, 0x6c, 0x69, 0x8b, 0xde,
	0xf0, 0x5c, 0x6b, 0x5a, 0xd1, 0x92, 0xf1, 0xb4, 0xf6, 0xf1, 0x8b, 0x42, 0x93, 0x61, 0x9f, 0x8f,
	0xd8, 0xd6, 0x80, 0x47, 0x51, 0xc2, 0x2e, 0xa9, 0x64, 0x5b, 0xa3, 0xed, 0xad, 0x4c, 0xb2, 0x44,
	0xd0, 0xc8, 0xd8, 0xfa, 0xbf, 0x70, 0x60, 0xe5, 0xc0, 0xc4, 0x75, 0x4a, 0x7b, 0x01, 0x7b, 0x4c,
	0xd6, 0xa0, 0xd1, 0x1b, 0xe6, 0x3c, 0x65, 0x79, 0xee, 0x39, 0xeb, 0xce, 0x46, 0x33, 0x28, 0x75,
	0xf2, 0x1d, 0xa8, 0xe5, 0x62, 0x28, 0x43, 0xe6, 0xb9, 0xeb, 0xce, 0xc6, 0xea, 0xce, 0x46, 0xe7,
	0x85, 0x8b, 0xe8, 0x58, 0xaf, 0x27, 0x7a, 0x7e, 0x60, 0xed, 0x88, 0x07, 0xf5, 0x0b, 0x36, 0xbe,
	0x14, 0x32, 0xf2, 0x2a, 0xda, 0x79, 0xa1, 0xfa, 0x87, 0xf0, 0xc6, 0x74, 0x20, 0x59, 0x32, 0x26,
	0x5f, 0x87, 0x8a, 0xa2, 0x3d, 0xcf, 0x59, 0xaf, 0x6c, 0xb4, 0x76, 0xbe, 0x32, 0xe7, 0x5d, 0xfb,
	0x43, 0x99, 0x0b, 0x89, 0x76, 0x68, 0xe0, 0xff, 0xca, 0x85, 0xa6, 0x19, 0xc2, 0x05, 0x7d, 0x13,
	0x6a, 0xa1, 0x56, 0xf4, 0x72, 0x5a, 0x3b, 0x5f, 0x5e, 0xe8, 0x28, 0xb0, 0x06, 0x33, 0x58, 0xb8,
	0x57, 0xb0, 0x78, 0x04, 0xab, 0x59, 0x42, 0xc7, 0x4c, 0x76, 0x2d, 0xa2, 0x7a, 0x41, 0xad, 0x9d,
	0xce, 0x1c, 0xf7, 0xc7, 0xda, 0xe0, 0xd8, 0xcc, 0x3f, 0xa6, 0x92, 0x0e, 0xf2, 0x60, 0x25, 0x9b,
	0x1e, 0x24, 0x47, 0xd0, 0xb2, 0x6e, 0xa9, 0x8c, 0x73, 0x6f, 0xf9, 0x79, 0x3e, 0x6d, 0x62, 0x3b,
	0x93, 0xc4, 0x4e, 0x9c, 0xef, 0xca, 0x38, 0x0f, 0x20, 0x2b, 0x65, 0xff, 0x6f, 0x0e, 0xb4, 0x0a,
	0x30, 0x10, 0xd4, 0x6f, 0x41, 0x95, 0x2b, 0x36, 0xc8, 0x2d, 0xac, 0x1f, 0x2c, 0x44, 0xe3, 0x50,
	0xb1, 0x41, 0x60, 0x6c, 0x8a, 0x8c, 0xb8, 0x2f, 0x99, 0x91, 0xa9, 0x1c, 0x54, 0x5e, 0x36, 0x07,
	0xef, 0x40, 0xa3, 0x4f, 0xf3, 0xee, 0x40, 0x48, 0xa6, 0xd1, 0x68, 0x04, 0xf5, 0x3e, 0xcd, 0x7f,
	0x20, 0x24, 0xf3, 0xff, 0xe8, 0x16, 0x4b, 0x3b, 0xdb, 0xf9, 0x7f, 0xa6, 0x11, 0x29, 0x9e, 0x77,
	0x13, 0x11, 0xd2, 0xc4, 0xab, 0x1a, 0xa4, 0x78, 0xfe, 0x10, 0x55, 0xff, 0x4f, 0x0e, 0xac, 0x4c,
	0x90, 0x7a, 0x65, 0x1a, 0x4c, 0x80, 0x76, 0x5f, 0x25, 0x9d, 0x95, 0x99, 0x74, 0x92, 0xf7, 0x00,
	0xd8, 0x20, 0x53, 0xe3, 0x6e, 0xc2, 0xd3, 0x0b, 0x8d, 0x47, 0x33, 0x68, 0xea, 0x91, 0x87, 0x3c,
	0xbd, 0xf0, 0xff, 0xbe, 0x0c, 0x30, 0x09, 0x85, 0x7c, 0x1b, 0x1a, 0x21, 0x95, 0x51, 0x77, 0x18,
	0x87, 0x36, 0xdd, 0xfe, 0xbc, 0x28, 0xa8, 0x8c, 0x1e, 0x3d, 0xd8, 0x3f, 0x58, 0x0a, 0xea, 0x68,
	0xf5, 0x28, 0x0e, 0x4b, 0x07, 0x22, 0x1e, 0xd9, 0x65, 0x2c, 0x72, 0x70, 0xf4, 0xe0, 0xac, 0x70,
	0x70, 0x14, 0x8f, 0xc8, 0xf7, 0xe1, 0x86, 0x76, 0x40, 0xa5, 0xe2, 0x61, 0xc2, 0x2c, 0x2b, 0xee,
	0x2c, 0x70, 0xb2, 0x6b, 0x66, 0x1f, 0x2c, 0x05, 0xad, 0x70, 0xa2, 0x92, 0x3d, 0x68, 0x6a, 0x67,
	0x09, 0x1f, 0x31, 0xcb, 0x85, 0xf7, 0x17, 0x78, 0x7a, 0xc8, 0x47, 0xe8, 0x46, 0xaf, 0x02, 0x65,
	0x72, 0x00, 0xda, 0x65, 0x37, 0xec, 0x33, 0x96, 0x33, 0xcd, 0x81, 0x05, 0x99, 0xa5, 0x32, 0xda,
	0xd7, 0x93, 0x0f, 0x96, 0x02, 0x08, 0x4b, 0x8d, 0x7c, 0x01, 0xaa, 0x8a, 0xab, 0x84, 0x79, 0x35,
	0x9d, 0x05, 0xa3, 0x90, 0x36, 0x54, 0x86, 0x92, 0x7b, 0x75, 0x3d, 0x86, 0x22, 0x79, 0x1b, 0xea,
	0x23, 0xce, 0x2e, 0xbb, 0x54, 0x79, 0x8d, 0x75, 0x67, 0xa3, 0x12, 0xd4, 0x50, 0xdd, 0x55, 0x38,
	0xf5, 0x82, 0x47, 0x5e, 0x53, 0x0f, 0xa2, 0x88, 0x23, 0x82, 0x47, 0x1e, 0x98, 0x11, 0xc1, 0xa3,
	0x99, 0x9a, 0x6b, 0x5d, 0xa9, 0xb9, 0x55, 0x70, 0x55, 0xe6, 0xdd, 0x58, 0x77, 0x36, 0xaa, 0x81,
	0xab, 0x32, 0xf2, 0x35, 0x70, 0x23, 0xe5, 0xad, 0x2c, 0x5c, 0xd1, 0x7d, 0x36, 0xe2, 0x21, 0x3b,
	0x1d, 0x67, 0x2c, 0x70, 0x23, 0x45, 0xde, 0x85, 0x26, 0xb2, 0x2d, 0xef, 0x53, 0xc9, 0xbc, 0x55,
	0x4d, 0x37, 0xa4, 0xdf, 0x09, 0xea, 0x7b, 0x2d, 0x0b, 0x39, 0x72, 0xda, 0xff, 0x47, 0x05, 0xea,
	0x96, 0x24, 0xb8, 0xfa, 0x50, 0x8c, 0x98, 0xb4, 0xe7, 0x9f, 0x51, 0x30, 0xdc, 0x4c, 0x8a, 0x58,
	0x16, 0x5b, 0x44, 0x25, 0x28, 0x75, 0x7c, 0x16, 0x0d, 0x25, 0x55, 0x5c, 0xa4, 0x9a, 0x06, 0x95,
	0xa0, 0xd4, 0x09, 0x81, 0xe5, 0x94, 0x0e, 0x98, 0x25, 0xb4, 0x96, 0x11, 0x8c, 0x01, 0x8f, 0x74,
	0x86, 0x2a, 0x01, 0x8a, 0xe4, 0x43, 0x78, 0x33, 0xe2, 0x39, 0x56, 0x73, 0x97, 0x2a, 0xc5, 0x52,
	0xed, 0xaa, 0xa6, 0x23, 0x6e, 0xdb, 0x07, 0xbb, 0xc5, 0x38, 0x9a, 0x87, 0x3c, 0xd2, 0x89, 0xa8,
	0x04, 0x28, 0xe2, 0x4b, 0x32, 0x1a, 0x33, 0x9d, 0x85, 0x6a, 0xa0, 0x65, 0x0c, 0x2a, 0x1f, 0xf6,
	0x4c, 0x1e, 0x9b, 0x06, 0xdf, 0x42, 0x47, 0xf2, 0x4b, 0x96, 0x98, 0x80, 0x61, 0x21, 0xdb, 0x02,
	0x3b, 0x35, 0x28, 0x8d, 0xf0, 0x85, 0xbd, 0x11, 0x8f, 0x6c, 0xe2, 0xb4, 0x4c, 0x6e, 0x42, 0x6d,
	0xc4, 0x23, 0x26, 0x72, 0x9d, 0x38, 0x4d, 0x06, 0xd4, 0xb0, 0xb0, 0xf3, 0xbe, 0x90, 0xca, 0x14,
	0xf6, 0x8a, 0x29, 0x6c, 0x3d, 0x82, 0x85, 0x4d, 0x3e, 0x80, 0x55, 0x9d, 0xa0, 0x6e, 0x19, 0xed,
	0xaa, 0x9e, 0xb2, 0xa2, 0x47, 0x4f, 0x8a, 0x90, 0x09, 0x2c, 0x23, 0xb9, 0xbc, 0x37, 0xb4, 0x6f,
	0x2d, 0x63, 0xa6, 0x72, 0x45, 0x15, 0xf3, 0xda, 0x7a, 0xd0, 0x28, 0x38, 0xda, 0xa3, 0x51, 0xcc,
	0xbc, 0x37, 0x4d, 0xfe, 0xb4, 0xe2, 0xff, 0xde, 0x31, 0x19, 0x3e, 0x7a, 0x70, 0xf6, 0x9a, 0x33,
	0x3c, 0x0d, 0xf4, 0xf2, 0x15, 0xa0, 0xcb, 0x58, 0xaa, 0x53, 0xb1, 0x4c, 0xe2, 0xae, 0x4d, 0xc5,
	0xed, 0xff, 0x05, 0x8f, 0xea, 0xa9, 0x3d, 0xe1, 0x26, 0xd4, 0x74, 0x60, 0x66, 0x93, 0x6e, 0x06,
	0x56, 0x2b, 0x19, 0xe5, 0x7e, 0x96, 0x51, 0x95, 0x05, 0x8c, 0x5a, 0x7e, 0x01, 0xa3, 0x9e, 0x1f,
	0xe6, 0x34, 0x4b, 0x6a, 0x9f, 0x83, 0x25, 0xfe, 0x53, 0x07, 0x1a, 0xc5, 0x56, 0xf5, 0x02, 0xd0,
	0xaf, 0xb7, 0x98, 0x36, 0x36, 0x1e, 0xb1, 0x45, 0x17, 0x45, 0x04, 0x07, 0x51, 0x1b, 0xe6, 0x3a,
	0xe4, 0x6a, 0x60, 0xb5, 0x97, 0x2b, 0xa4, 0xe9, 0x05, 0xd6, 0x3f, 0xcf, 0x02, 0x7f, 0xed, 0x00,
	0xec, 0xcf, 0xec, 0x9b, 0xff, 0x3b, 0x5e, 0x19, 0x06, 0x55, 0xa7, 0x19, 0xc4, 0x8b, 0xc6, 0xf7,
	0x94, 0xf6, 0xe6, 0x76, 0xf2, 0xcf, 0x43, 0xfd, 0x26, 0xd4, 0xa4, 0x18, 0x2a, 0x26, 0x6d, 0x6b,
	0x6e, 0x35, 0x7c, 0xd5, 0xb9, 0x08, 0x87, 0xb9, 0x25, 0x8f, 0x51, 0xfc, 0x6d, 0xa8, 0x99, 0x57,
	0xe9, 0x6c, 0xd1, 0x27, 0xfa, 0x15, 0x98, 0x2d, 0xfa, 0x84, 0x7c, 0x11, 0x6a, 0x03, 0xfa, 0xa4,
	0xab, 0x32, 0xed, 0xbf, 0x1a, 0x54, 0x07, 0xf4, 0xc9, 0x69, 0xe6, 0x7f, 0x0f, 0x9a, 0xf7, 0x59,
	0xc2, 0x14, 0xc3, 0x66, 0xed, 0x13, 0x68, 0xf4, 0x79, 0xde, 0xe5, 0xe9, 0xb9, 0xb0, 0x3d, 0x88,
	0x3f, 0xff, 0x36, 0x71, 0x98, 0x9e, 0x8b, 0xa0, 0xde, 0x37, 0x82, 0xff, 0x0d, 0xa8, 0xdb, 0xb1,
	0xb9, 0xeb, 0xb4, 0xe7, 0x90, 0x5b, 0x9e, 0x43, 0x7e, 0x13, 0xea, 0x3f, 0x14, 0xba, 0x07, 0xf2,
	0x4f, 0x00, 0x26, 0xe7, 0x05, 0xd9, 0x86, 0x65, 0x35, 0xce, 0x98, 0x76, 0xb1, 0xba, 0xf3, 0xde,
	0xbc, 0x43, 0xe6, 0x34, 0xd0, 0x53, 0x11, 0x45, 0x1e, 0x8a, 0xb4, 0x40, 0x11, 0x65, 0xff, 0xa7,
	0xd0, 0x28, 0x78, 0x32, 0xc5, 0x51, 0x67, 0x86, 0xa3, 0xef, 0x42, 0x93, 0xe7, 0xdd, 0x73, 0x91,
	0x24, 0xe2, 0xd2, 0x42, 0xd4, 0xe0, 0xf9, 0x77, 0xb5, 0x4e, 0x6e, 0x43, 0xab, 0x7c, 0xc8, 0x4c,
	0x11, 0x54, 0x03, 0x28, 0x1e, 0xb3, 0xc8, 0xff, 0xa5, 0x03, 0xcd, 0x13, 0x86, 0xad, 0x21, 0xe2,
	0xb8, 0x3d, 0xb9, 0x51, 0xe9, 0xc5, 0xef, 0xbd, 0xfd, 0xe9, 0xd3, 0xdb, 0x6f, 0x8d, 0x68, 0xc2,
	0x23, 0xaa, 0xd8, 0xc7, 0xbe, 0x64, 0x8f, 0x87, 0x5c, 0xb2, 0xc8, 0x2f, 0xaf, 0x5a, 0xe4, 0x1e,
	0xb8, 0x99, 0x09, 0xba, 0xb2, 0xf7, 0xa5, 0x4f, 0x9f, 0xde, 0xf6, 0x26, 0xb3, 0x63, 0xf5, 0xc9,
	0x57, 0xef, 0x4d, 0x4c, 0xdc, 0x2c, 0x9d, 0x81, 0xb7, 0x32, 0x0b, 0xaf, 0xff, 0x3b, 0x07, 0x5a,
	0x45, 0x28, 0xaf, 0xdc, 0x55, 0x4e, 0xb7, 0x86, 0xee, 0x6c, 0x6b, 0xf8, 0x91, 0x3d, 0xde, 0x4c,
	0x8b, 0x75, 0x7b, 0x5e, 0xe3, 0x4d, 0x63, 0x66, 0xce, 0x3f, 0xff, 0x1e, 0x2c, 0xa3, 0x86, 0xbd,
	0x44, 0x96, 0x5a, 0x7a, 0xe2, 0x82, 0xb0, 0xb9, 0x11, 0x8a, 0x26, 0x96, 0x15, 0x46, 0xf1, 0x7f,
	0xee, 0xc0, 0x5b, 0xcf, 0xe9, 0xda, 0xd1, 0xfa, 0x71, 0x69, 0xfd, 0x58, 0x5b, 0x9f, 0xa7, 0x58,
	0xe2, 0xd6, 0x5a, 0x2b, 0x76, 0x94, 0x26, 0xb6, 0x86, 0x8d, 0x82, 0x07, 0xdf, 0xb9, 0x90, 0x21,
	0xeb, 0xf6, 0x45, 0xae, 0x74, 0xf9, 0x54, 0x82, 0xa6, 0x1e, 0x39, 0x10, 0xb9, 0x32, 0x85, 0x35,
	0x94, 0x17, 0x45, 0x0d, 0x6b, 0xc5, 0xbf, 0x03, 0x8d, 0xfd, 0x84, 0x51, 0xb9, 0xe0, 0x32, 0xee,
	0xff, 0xcc, 0x81, 0xf6, 0x43, 0xaa, 0x58, 0xae, 0xec, 0xbd, 0x79, 0xd1, 0xed, 0xfd, 0xb3, 0xf7,
	0x18, 0xf7, 0x35, 0xdc, 0x63, 0xfc, 0xdf, 0x38, 0x40, 0xae, 0xc4, 0x71, 0x85, 0x0a, 0xce, 0x4b,
	0x53, 0x01, 0x77, 0xb7, 0x90, 0xa5, 0xc5, 0xfe, 0x64, 0x14, 0x1c, 0x95, 0x8a, 0x0f, 0x58, 0x01,
	0xb2, 0x56, 0xb0, 0x08, 0xcf, 0x93, 0xf2, 0x6c, 0xd0, 0xf2, 0xdd, 0xbb, 0xe5, 0x57, 0x0d, 0xf3,
	0xfd, 0x81, 0xb4, 0xa0, 0x6e, 0x3f, 0xbf, 0xb4, 0x97, 0xc8, 0x0d, 0x68, 0xe4, 0x7d, 0x91, 0x65,
	0x3c, 0x8d, 0xdb, 0xce, 0xdd, 0x13, 0x70, 0xef, 0x9f, 0xe2, 0x84, 0x47, 0xe9, 0x45, 0x2a, 0x2e,
	0xd3, 0xf6, 0x12, 0x69, 0x42, 0xf5, 0xb8, 0x2f, 0x52, 0xd6, 0x76, 0x48, 0x1d, 0x2a, 0xc7, 0x34,
	0x6a, 0xbb, 0xa4, 0x06, 0xee, 0xf1, 0x7e, 0xbb, 0x82, 0xff, 0xa7, 0x67, 0xed, 0x65, 0x7c, 0xb0,
	0x4f, 0x65, 0xbb, 0x8a, 0xc2, 0xa1, 0x38, 0x6d, 0xd7, 0x08, 0x40, 0x6d, 0x37, 0x8d, 0x70, 0x76,
	0x7d, 0xe7, 0xdf, 0x55, 0xbd, 0x3f, 0xe1, 0x0b, 0x49, 0x0f, 0x60, 0xf2, 0x65, 0x83, 0x5c, 0xe3,
	0x9b, 0x89, 0xf9, 0x12, 0xb3, 0x76, 0xf7, 0x9a, 0x33, 0x11, 0xed, 0xb3, 0x72, 0x37, 0x5e, 0x7c,
	0x2b, 0x47, 0xdf, 0x77, 0xae, 0x31, 0x0b, 0xfd, 0xfe, 0x04, 0x1a, 0xc5, 0xbd, 0x91, 0x2c, 0xb6,
	0xd1, 0xd7, 0xf0, 0xb5, 0x8d, 0x6b, 0xcd, 0x43, 0xef, 0x11, 0xdc, 0x98, 0x2c, 0xe4, 0x6c, 0xe7,
	0xbf, 0x84, 0x4d, 0x00, 0x35, 0x73, 0xec, 0xcc, 0xc5, 0xa6, 0x3c, 0x99, 0xd6, 0xe6, 0x9d, 0x43,
	0xf6, 0xe8, 0x40, 0xbc, 0xcd, 0xbe, 0x37, 0xd7, 0x67, 0xb9, 0x4b, 0xcf, 0xc5, 0x7b, 0x7a, 0x03,
	0x3d, 0x86, 0xaa, 0x2e, 0x7e, 0x32, 0xf7, 0xf2, 0x67, 0xb7, 0x87, 0x6b, 0x45, 0x7a, 0x01, 0x2b,
	0x33, 0xd5, 0x49, 0x3e, 0x9c, 0x63, 0x74, 0x75, 0x3f, 0x59, 0xdb, 0xbc, 0xfe, 0xe4, 0x2c, 0x19,
	0xef, 0xfd, 0xe8, 0xcf, 0xcf, 0x6e, 0x39, 0x7f, 0x7d, 0x76, 0xcb, 0xf9, 0xe7, 0xb3, 0x5b, 0xce,
	0x6f, 0xff, 0x75, 0x6b, 0x09, 0xde, 0x0f, 0xc5, 0x60, 0xe2, 0x23, 0x96, 0x59, 0x38, 0xeb, 0x28,
	0xef, 0x8c, 0xb6, 0x8f, 0x9d, 0x1f, 0x17, 0xd5, 0xf9, 0x07, 0xf7, 0xe6, 0xde, 0xee, 0xf1, 0xe1,
	0x61, 0xf1, 0xf8, 0x6c, 0xdb, 0xfa, 0xef, 0xd5, 0xf4, 0x07, 0xcb, 0x8f, 0xfe, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x6b, 0x3d, 0xcd, 0x94, 0x89, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HistoryClient is the client API for History service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HistoryClient interface {
	// 历史记录tab
	HistoryTab(ctx context.Context, in *HistoryTabReq, opts ...grpc.CallOption) (*HistoryTabReply, error)
	// 历史记录列表
	Cursor(ctx context.Context, in *CursorReq, opts ...grpc.CallOption) (*CursorReply, error)
	// 历史记录列表V2，6.9.0版本之后
	CursorV2(ctx context.Context, in *CursorV2Req, opts ...grpc.CallOption) (*CursorV2Reply, error)
	// 历史记录tabv2 6.29版本之后使用
	HistoryTabV2(ctx context.Context, in *HistoryTabReq, opts ...grpc.CallOption) (*HistoryTabReply, error)
	// 历史记录删除
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*NoReply, error)
	// 历史记录搜索
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchReply, error)
	// 清空历史记录
	Clear(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*NoReply, error)
	// 获取最新的历史记录
	LatestHistory(ctx context.Context, in *LatestHistoryReq, opts ...grpc.CallOption) (*LatestHistoryReply, error)
}

type historyClient struct {
	cc *grpc.ClientConn
}

func NewHistoryClient(cc *grpc.ClientConn) HistoryClient {
	return &historyClient{cc}
}

func (c *historyClient) HistoryTab(ctx context.Context, in *HistoryTabReq, opts ...grpc.CallOption) (*HistoryTabReply, error) {
	out := new(HistoryTabReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.History/HistoryTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) Cursor(ctx context.Context, in *CursorReq, opts ...grpc.CallOption) (*CursorReply, error) {
	out := new(CursorReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.History/Cursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) CursorV2(ctx context.Context, in *CursorV2Req, opts ...grpc.CallOption) (*CursorV2Reply, error) {
	out := new(CursorV2Reply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.History/CursorV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) HistoryTabV2(ctx context.Context, in *HistoryTabReq, opts ...grpc.CallOption) (*HistoryTabReply, error) {
	out := new(HistoryTabReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.History/HistoryTabV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.History/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.History/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) Clear(ctx context.Context, in *ClearReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.History/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyClient) LatestHistory(ctx context.Context, in *LatestHistoryReq, opts ...grpc.CallOption) (*LatestHistoryReply, error) {
	out := new(LatestHistoryReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.History/LatestHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryServer is the server API for History service.
type HistoryServer interface {
	// 历史记录tab
	HistoryTab(context.Context, *HistoryTabReq) (*HistoryTabReply, error)
	// 历史记录列表
	Cursor(context.Context, *CursorReq) (*CursorReply, error)
	// 历史记录列表V2，6.9.0版本之后
	CursorV2(context.Context, *CursorV2Req) (*CursorV2Reply, error)
	// 历史记录tabv2 6.29版本之后使用
	HistoryTabV2(context.Context, *HistoryTabReq) (*HistoryTabReply, error)
	// 历史记录删除
	Delete(context.Context, *DeleteReq) (*NoReply, error)
	// 历史记录搜索
	Search(context.Context, *SearchReq) (*SearchReply, error)
	// 清空历史记录
	Clear(context.Context, *ClearReq) (*NoReply, error)
	// 获取最新的历史记录
	LatestHistory(context.Context, *LatestHistoryReq) (*LatestHistoryReply, error)
}

// UnimplementedHistoryServer can be embedded to have forward compatible implementations.
type UnimplementedHistoryServer struct {
}

func (*UnimplementedHistoryServer) HistoryTab(ctx context.Context, req *HistoryTabReq) (*HistoryTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryTab not implemented")
}
func (*UnimplementedHistoryServer) Cursor(ctx context.Context, req *CursorReq) (*CursorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cursor not implemented")
}
func (*UnimplementedHistoryServer) CursorV2(ctx context.Context, req *CursorV2Req) (*CursorV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CursorV2 not implemented")
}
func (*UnimplementedHistoryServer) HistoryTabV2(ctx context.Context, req *HistoryTabReq) (*HistoryTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryTabV2 not implemented")
}
func (*UnimplementedHistoryServer) Delete(ctx context.Context, req *DeleteReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedHistoryServer) Search(ctx context.Context, req *SearchReq) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedHistoryServer) Clear(ctx context.Context, req *ClearReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (*UnimplementedHistoryServer) LatestHistory(ctx context.Context, req *LatestHistoryReq) (*LatestHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestHistory not implemented")
}

func RegisterHistoryServer(s *grpc.Server, srv HistoryServer) {
	s.RegisterService(&_History_serviceDesc, srv)
}

func _History_HistoryTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).HistoryTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.History/HistoryTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).HistoryTab(ctx, req.(*HistoryTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_Cursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CursorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).Cursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.History/Cursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).Cursor(ctx, req.(*CursorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_CursorV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CursorV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).CursorV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.History/CursorV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).CursorV2(ctx, req.(*CursorV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_HistoryTabV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).HistoryTabV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.History/HistoryTabV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).HistoryTabV2(ctx, req.(*HistoryTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.History/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.History/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.History/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).Clear(ctx, req.(*ClearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _History_LatestHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServer).LatestHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.History/LatestHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServer).LatestHistory(ctx, req.(*LatestHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _History_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.interface.v1.History",
	HandlerType: (*HistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HistoryTab",
			Handler:    _History_HistoryTab_Handler,
		},
		{
			MethodName: "Cursor",
			Handler:    _History_Cursor_Handler,
		},
		{
			MethodName: "CursorV2",
			Handler:    _History_CursorV2_Handler,
		},
		{
			MethodName: "HistoryTabV2",
			Handler:    _History_HistoryTabV2_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _History_Delete_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _History_Search_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _History_Clear_Handler,
		},
		{
			MethodName: "LatestHistory",
			Handler:    _History_LatestHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-interface/interface-legacy/api/history/history.proto",
}

func (m *HistoryTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryTabReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryTabReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Source != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryTabReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryTabReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryTabReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tab) > 0 {
		for iNdEx := len(m.Tab) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tab[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CursorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CursorReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PlayerPreload != nil {
		{
			size, err := m.PlayerPreload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cursor != nil {
		{
			size, err := m.Cursor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CursorReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CursorReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Cursor != nil {
		{
			size, err := m.Cursor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tab) > 0 {
		for iNdEx := len(m.Tab) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tab[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CursorV2Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CursorV2Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorV2Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsLocal {
		i--
		if m.IsLocal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.PlayerArgs != nil {
		{
			size, err := m.PlayerArgs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PlayerPreload != nil {
		{
			size, err := m.PlayerPreload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cursor != nil {
		{
			size, err := m.Cursor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CursorV2Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CursorV2Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorV2Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EmptyLink) > 0 {
		i -= len(m.EmptyLink)
		copy(dAtA[i:], m.EmptyLink)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.EmptyLink)))
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Cursor != nil {
		{
			size, err := m.Cursor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CursorItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CursorItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasShare {
		i--
		if m.HasShare {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Dt != nil {
		{
			size, err := m.Dt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Tp != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Tp))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Oid != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x50
	}
	if m.Kid != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Kid))
		i--
		dAtA[i] = 0x48
	}
	if m.ViewAt != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.ViewAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if m.CardItem != nil {
		{
			size := m.CardItem.Size()
			i -= size
			if _, err := m.CardItem.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CursorItem_CardUgc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorItem_CardUgc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardUgc != nil {
		{
			size, err := m.CardUgc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CursorItem_CardOgv) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorItem_CardOgv) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardOgv != nil {
		{
			size, err := m.CardOgv.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CursorItem_CardArticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorItem_CardArticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardArticle != nil {
		{
			size, err := m.CardArticle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CursorItem_CardLive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorItem_CardLive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardLive != nil {
		{
			size, err := m.CardLive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CursorItem_CardCheese) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorItem_CardCheese) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CardCheese != nil {
		{
			size, err := m.CardCheese.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CardUGC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardUGC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardUGC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.State != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.View != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ShareSubtitle) > 0 {
		i -= len(m.ShareSubtitle)
		copy(dAtA[i:], m.ShareSubtitle)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.ShareSubtitle)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ShortLink) > 0 {
		i -= len(m.ShortLink)
		copy(dAtA[i:], m.ShortLink)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.ShortLink)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Videos != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Videos))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Page != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x40
	}
	if m.Cid != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x38
	}
	if m.DisplayAttention {
		i--
		if m.DisplayAttention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Mid != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Duration != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Progress != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardOGV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardOGV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardOGV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x22
	}
	if m.Duration != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Progress != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardArticle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardArticle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardArticle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DisplayAttention {
		i--
		if m.DisplayAttention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Mid != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Covers) > 0 {
		for iNdEx := len(m.Covers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Covers[iNdEx])
			copy(dAtA[i:], m.Covers[iNdEx])
			i = encodeVarintHistory(dAtA, i, uint64(len(m.Covers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CardLive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardLive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardLive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Relation != nil {
		{
			size, err := m.Relation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DisplayAttention {
		i--
		if m.DisplayAttention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mid != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardCheese) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardCheese) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardCheese) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x22
	}
	if m.Duration != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Progress != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CursorTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CursorTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CursorTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Focus {
		i--
		if m.Focus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Router) > 0 {
		i -= len(m.Router)
		copy(dAtA[i:], m.Router)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Router)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cursor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cursor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cursor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxTp != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.MaxTp))
		i--
		dAtA[i] = 0x10
	}
	if m.Max != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HisInfo) > 0 {
		for iNdEx := len(m.HisInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HisInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HisInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HisInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HisInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Kid != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Kid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeviceType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Relation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Relation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Relation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFollowed != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.IsFollowed))
		i--
		dAtA[i] = 0x18
	}
	if m.IsFollow != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.IsFollow))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pn != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHistory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerPreloadParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerPreloadParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerPreloadParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Fourk != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Fourk))
		i--
		dAtA[i] = 0x28
	}
	if m.ForceHost != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x20
	}
	if m.Fnval != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x18
	}
	if m.Fnver != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x10
	}
	if m.Qn != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LatestHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestHistoryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerPreload != nil {
		{
			size, err := m.PlayerPreload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LatestHistoryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestHistoryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestHistoryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Flag) > 0 {
		i -= len(m.Flag)
		copy(dAtA[i:], m.Flag)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Flag)))
		i--
		dAtA[i] = 0x22
	}
	if m.Rtime != 0 {
		i = encodeVarintHistory(dAtA, i, uint64(m.Rtime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Scene) > 0 {
		i -= len(m.Scene)
		copy(dAtA[i:], m.Scene)
		i = encodeVarintHistory(dAtA, i, uint64(len(m.Scene)))
		i--
		dAtA[i] = 0x12
	}
	if m.Items != nil {
		{
			size, err := m.Items.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHistory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HistoryTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovHistory(uint64(m.Source))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HistoryTabReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tab) > 0 {
		for _, e := range m.Tab {
			l = e.Size()
			n += 1 + l + sovHistory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CursorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cursor != nil {
		l = m.Cursor.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.PlayerPreload != nil {
		l = m.PlayerPreload.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CursorReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovHistory(uint64(l))
		}
	}
	if len(m.Tab) > 0 {
		for _, e := range m.Tab {
			l = e.Size()
			n += 1 + l + sovHistory(uint64(l))
		}
	}
	if m.Cursor != nil {
		l = m.Cursor.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.HasMore {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CursorV2Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cursor != nil {
		l = m.Cursor.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.PlayerPreload != nil {
		l = m.PlayerPreload.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.PlayerArgs != nil {
		l = m.PlayerArgs.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.IsLocal {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CursorV2Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovHistory(uint64(l))
		}
	}
	if m.Cursor != nil {
		l = m.Cursor.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.HasMore {
		n += 2
	}
	l = len(m.EmptyLink)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CursorItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardItem != nil {
		n += m.CardItem.Size()
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.ViewAt != 0 {
		n += 1 + sovHistory(uint64(m.ViewAt))
	}
	if m.Kid != 0 {
		n += 1 + sovHistory(uint64(m.Kid))
	}
	if m.Oid != 0 {
		n += 1 + sovHistory(uint64(m.Oid))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Tp != 0 {
		n += 1 + sovHistory(uint64(m.Tp))
	}
	if m.Dt != nil {
		l = m.Dt.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.HasShare {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CursorItem_CardUgc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardUgc != nil {
		l = m.CardUgc.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	return n
}
func (m *CursorItem_CardOgv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardOgv != nil {
		l = m.CardOgv.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	return n
}
func (m *CursorItem_CardArticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardArticle != nil {
		l = m.CardArticle.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	return n
}
func (m *CursorItem_CardLive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardLive != nil {
		l = m.CardLive.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	return n
}
func (m *CursorItem_CardCheese) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CardCheese != nil {
		l = m.CardCheese.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	return n
}
func (m *CardUGC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Progress != 0 {
		n += 1 + sovHistory(uint64(m.Progress))
	}
	if m.Duration != 0 {
		n += 1 + sovHistory(uint64(m.Duration))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovHistory(uint64(m.Mid))
	}
	if m.DisplayAttention {
		n += 2
	}
	if m.Cid != 0 {
		n += 1 + sovHistory(uint64(m.Cid))
	}
	if m.Page != 0 {
		n += 1 + sovHistory(uint64(m.Page))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Videos != 0 {
		n += 1 + sovHistory(uint64(m.Videos))
	}
	l = len(m.ShortLink)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.ShareSubtitle)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.View != 0 {
		n += 1 + sovHistory(uint64(m.View))
	}
	if m.State != 0 {
		n += 2 + sovHistory(uint64(m.State))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 2 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardOGV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Progress != 0 {
		n += 1 + sovHistory(uint64(m.Progress))
	}
	if m.Duration != 0 {
		n += 1 + sovHistory(uint64(m.Duration))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovHistory(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardArticle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Covers) > 0 {
		for _, s := range m.Covers {
			l = len(s)
			n += 1 + l + sovHistory(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovHistory(uint64(m.Mid))
	}
	if m.DisplayAttention {
		n += 2
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardLive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovHistory(uint64(m.Mid))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovHistory(uint64(m.Status))
	}
	if m.DisplayAttention {
		n += 2
	}
	if m.Relation != nil {
		l = m.Relation.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardCheese) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Progress != 0 {
		n += 1 + sovHistory(uint64(m.Progress))
	}
	if m.Duration != 0 {
		n += 1 + sovHistory(uint64(m.Duration))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovHistory(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CursorTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Router)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Focus {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cursor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Max != 0 {
		n += 1 + sovHistory(uint64(m.Max))
	}
	if m.MaxTp != 0 {
		n += 1 + sovHistory(uint64(m.MaxTp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HisInfo) > 0 {
		for _, e := range m.HisInfo {
			l = e.Size()
			n += 1 + l + sovHistory(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HisInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Kid != 0 {
		n += 1 + sovHistory(uint64(m.Kid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHistory(uint64(m.Type))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Relation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovHistory(uint64(m.Status))
	}
	if m.IsFollow != 0 {
		n += 1 + sovHistory(uint64(m.IsFollow))
	}
	if m.IsFollowed != 0 {
		n += 1 + sovHistory(uint64(m.IsFollowed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Pn != 0 {
		n += 1 + sovHistory(uint64(m.Pn))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovHistory(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovHistory(uint64(m.Pn))
	}
	if m.Total != 0 {
		n += 1 + sovHistory(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerPreloadParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Qn != 0 {
		n += 1 + sovHistory(uint64(m.Qn))
	}
	if m.Fnver != 0 {
		n += 1 + sovHistory(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovHistory(uint64(m.Fnval))
	}
	if m.ForceHost != 0 {
		n += 1 + sovHistory(uint64(m.ForceHost))
	}
	if m.Fourk != 0 {
		n += 1 + sovHistory(uint64(m.Fourk))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LatestHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.PlayerPreload != nil {
		l = m.PlayerPreload.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LatestHistoryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Items != nil {
		l = m.Items.Size()
		n += 1 + l + sovHistory(uint64(l))
	}
	l = len(m.Scene)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.Rtime != 0 {
		n += 1 + sovHistory(uint64(m.Rtime))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovHistory(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHistory(x uint64) (n int) {
	return sovHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HistoryTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= HistorySource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryTabReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryTabReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryTabReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tab = append(m.Tab, &CursorTab{})
			if err := m.Tab[len(m.Tab)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CursorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CursorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CursorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cursor == nil {
				m.Cursor = &Cursor{}
			}
			if err := m.Cursor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPreload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerPreload == nil {
				m.PlayerPreload = &PlayerPreloadParams{}
			}
			if err := m.PlayerPreload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CursorReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CursorReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CursorReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CursorItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tab = append(m.Tab, &CursorTab{})
			if err := m.Tab[len(m.Tab)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cursor == nil {
				m.Cursor = &Cursor{}
			}
			if err := m.Cursor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CursorV2Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CursorV2Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CursorV2Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cursor == nil {
				m.Cursor = &Cursor{}
			}
			if err := m.Cursor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPreload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerPreload == nil {
				m.PlayerPreload = &PlayerPreloadParams{}
			}
			if err := m.PlayerPreload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerArgs == nil {
				m.PlayerArgs = &v1.PlayerArgs{}
			}
			if err := m.PlayerArgs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CursorV2Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CursorV2Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CursorV2Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CursorItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cursor == nil {
				m.Cursor = &Cursor{}
			}
			if err := m.Cursor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmptyLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CursorItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CursorItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CursorItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardUgc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardUGC{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &CursorItem_CardUgc{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardOgv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardOGV{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &CursorItem_CardOgv{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardArticle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardArticle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &CursorItem_CardArticle{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardLive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardLive{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &CursorItem_CardLive{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardCheese", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardCheese{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CardItem = &CursorItem_CardCheese{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewAt", wireType)
			}
			m.ViewAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			m.Kid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dt == nil {
				m.Dt = &DeviceType{}
			}
			if err := m.Dt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasShare", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasShare = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardUGC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardUGC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardUGC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayAttention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayAttention = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Videos", wireType)
			}
			m.Videos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Videos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareSubtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareSubtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardOGV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardOGV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardOGV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardArticle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardArticle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardArticle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Covers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Covers = append(m.Covers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayAttention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayAttention = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardLive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardLive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardLive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayAttention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisplayAttention = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Relation == nil {
				m.Relation = &Relation{}
			}
			if err := m.Relation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardCheese) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardCheese: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardCheese: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CursorTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CursorTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CursorTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Focus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Focus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cursor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cursor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cursor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTp", wireType)
			}
			m.MaxTp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HisInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HisInfo = append(m.HisInfo, &HisInfo{})
			if err := m.HisInfo[len(m.HisInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HisInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HisInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HisInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			m.Kid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DT(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Relation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Relation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Relation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollow", wireType)
			}
			m.IsFollow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			m.IsFollowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFollowed |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CursorItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerPreloadParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerPreloadParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerPreloadParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			m.Fourk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fourk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPreload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerPreload == nil {
				m.PlayerPreload = &PlayerPreloadParams{}
			}
			if err := m.PlayerPreload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestHistoryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestHistoryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestHistoryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = &CursorItem{}
			}
			if err := m.Items.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scene", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scene = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtime", wireType)
			}
			m.Rtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHistory = fmt.Errorf("proto: unexpected end of group")
)
