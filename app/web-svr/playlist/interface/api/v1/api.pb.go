// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/web-svr/playlist/interface/api/v1/api.proto

// use {app_id}.{version} as package name

package v1

import (
	context "context"
	fmt "fmt"
	go_common_library_time "go-common/library/time"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PlStatReq struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	Fid                  int64                       `protobuf:"varint,3,opt,name=fid,proto3" json:"fid,omitempty" form:"fid"`
	View                 int64                       `protobuf:"varint,4,opt,name=view,proto3" json:"view,omitempty" form:"view"`
	Reply                int64                       `protobuf:"varint,5,opt,name=reply,proto3" json:"reply,omitempty" form:"reply"`
	Fav                  int64                       `protobuf:"varint,6,opt,name=fav,proto3" json:"fav,omitempty" form:"fav"`
	Share                int64                       `protobuf:"varint,7,opt,name=share,proto3" json:"share,omitempty" form:"share"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PlStatReq) Reset()         { *m = PlStatReq{} }
func (m *PlStatReq) String() string { return proto.CompactTextString(m) }
func (*PlStatReq) ProtoMessage()    {}
func (*PlStatReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac6f855bb04f1957, []int{0}
}
func (m *PlStatReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlStatReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlStatReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlStatReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlStatReq.Merge(m, src)
}
func (m *PlStatReq) XXX_Size() int {
	return m.Size()
}
func (m *PlStatReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlStatReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlStatReq proto.InternalMessageInfo

func (m *PlStatReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlStatReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PlStatReq) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *PlStatReq) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PlStatReq) GetReply() int64 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *PlStatReq) GetFav() int64 {
	if m != nil {
		return m.Fav
	}
	return 0
}

func (m *PlStatReq) GetShare() int64 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *PlStatReq) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func init() {
	proto.RegisterType((*PlStatReq)(nil), "playlist.service.v1.PlStatReq")
}

func init() {
	proto.RegisterFile("go-gateway/app/web-svr/playlist/interface/api/v1/api.proto", fileDescriptor_ac6f855bb04f1957)
}

var fileDescriptor_ac6f855bb04f1957 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x8b, 0xd4, 0x30,
	0x14, 0xc7, 0x69, 0x67, 0x67, 0x7f, 0xc4, 0x5f, 0x4b, 0x04, 0x09, 0xb3, 0xd8, 0x2e, 0x15, 0x64,
	0x2f, 0x9b, 0x30, 0x0a, 0x1e, 0x3c, 0x08, 0x2e, 0x78, 0x14, 0x86, 0x8e, 0x27, 0x6f, 0x69, 0x9b,
	0x76, 0x1e, 0x34, 0x93, 0x9a, 0xc9, 0x44, 0xfa, 0x07, 0x0a, 0x1e, 0xfd, 0x0b, 0x8a, 0xcc, 0xd1,
	0x63, 0x8f, 0x9e, 0x24, 0x89, 0xe3, 0xc0, 0xb8, 0xa7, 0x36, 0xdf, 0xcf, 0x87, 0xf7, 0xe0, 0x7d,
	0xd1, 0x9b, 0x46, 0xdd, 0x96, 0x4a, 0x4a, 0xb5, 0x66, 0xbc, 0xeb, 0x18, 0xac, 0x8d, 0xd0, 0x35,
	0x2f, 0x05, 0x93, 0x1c, 0xd6, 0xac, 0x6b, 0x79, 0xdf, 0xc2, 0xc6, 0x30, 0xde, 0x01, 0xb3, 0x73,
	0xf7, 0xa1, 0x9d, 0x56, 0x46, 0xe1, 0xa7, 0x7b, 0x44, 0x37, 0x42, 0x5b, 0x28, 0x05, 0xb5, 0xf3,
	0xd9, 0x6d, 0x03, 0x66, 0xb5, 0x2d, 0x68, 0xa9, 0x24, 0x6b, 0x54, 0xa3, 0x98, 0x77, 0x8b, 0x6d,
	0xed, 0x5f, 0xfe, 0xe1, 0xff, 0xc2, 0x8c, 0xd9, 0x55, 0xa3, 0x54, 0xd3, 0x8a, 0x83, 0x25, 0x64,
	0x67, 0xfa, 0x00, 0xb3, 0x6f, 0x31, 0xba, 0x58, 0xb4, 0x4b, 0xc3, 0x4d, 0x2e, 0xbe, 0xe0, 0xe7,
	0x28, 0x86, 0x8a, 0x44, 0xd7, 0xd1, 0xcd, 0xe4, 0xee, 0xd1, 0x38, 0xa4, 0x17, 0xb5, 0xd2, 0xf2,
	0x6d, 0x06, 0x55, 0x96, 0xc7, 0x50, 0xe1, 0x6b, 0x34, 0x91, 0x50, 0x91, 0xd8, 0xf3, 0xc7, 0xe3,
	0x90, 0xa2, 0xc0, 0xa5, 0x13, 0x1c, 0x72, 0x46, 0x0d, 0x15, 0x99, 0x1c, 0x1b, 0xb5, 0x37, 0x6a,
	0xa8, 0xf0, 0x0b, 0x74, 0x62, 0x41, 0x7c, 0x25, 0x27, 0x5e, 0x79, 0x32, 0x0e, 0xe9, 0x83, 0xa0,
	0xb8, 0x34, 0xcb, 0x3d, 0xc4, 0x2f, 0xd1, 0x54, 0x8b, 0xae, 0xed, 0xc9, 0xd4, 0x5b, 0x97, 0xe3,
	0x90, 0x3e, 0x0c, 0x96, 0x8f, 0xb3, 0x3c, 0x60, 0xbf, 0x8e, 0x5b, 0x72, 0xfa, 0xdf, 0x3a, 0x6e,
	0xdd, 0x3a, 0x6e, 0xdd, 0xa4, 0xcd, 0x8a, 0x6b, 0x41, 0xce, 0x8e, 0x27, 0xf9, 0x38, 0xcb, 0x03,
	0xc6, 0xef, 0xd0, 0x54, 0x1a, 0x90, 0x82, 0x9c, 0x7b, 0xef, 0xe6, 0xd7, 0x90, 0x86, 0xe0, 0xf7,
	0x90, 0x5e, 0x1d, 0xca, 0x6b, 0xa1, 0xd0, 0x5c, 0xf7, 0xcc, 0x11, 0xfa, 0x09, 0xa4, 0xc8, 0x83,
	0xf5, 0xea, 0x23, 0x3a, 0x5f, 0xfc, 0xad, 0x0a, 0xbf, 0x47, 0x67, 0x4b, 0x61, 0xdc, 0x4d, 0x71,
	0x42, 0xef, 0x29, 0x90, 0xfe, 0x3b, 0xf8, 0xec, 0x19, 0x0d, 0xe5, 0xd0, 0x7d, 0x39, 0xf4, 0x83,
	0x2b, 0xe7, 0xee, 0xf2, 0xfb, 0x2e, 0x89, 0x7e, 0xec, 0x92, 0xe8, 0xe7, 0x2e, 0x89, 0x3e, 0xc7,
	0x76, 0x5e, 0x9c, 0x7a, 0xe3, 0xf5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xee, 0xc2, 0x22,
	0x4a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlaylistClient is the client API for Playlist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlaylistClient interface {
	// SetStat set playlist stat cache.
	SetStat(ctx context.Context, in *PlStatReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type playlistClient struct {
	cc *grpc.ClientConn
}

func NewPlaylistClient(cc *grpc.ClientConn) PlaylistClient {
	return &playlistClient{cc}
}

func (c *playlistClient) SetStat(ctx context.Context, in *PlStatReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/playlist.service.v1.Playlist/SetStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServer is the server API for Playlist service.
type PlaylistServer interface {
	// SetStat set playlist stat cache.
	SetStat(context.Context, *PlStatReq) (*empty.Empty, error)
}

// UnimplementedPlaylistServer can be embedded to have forward compatible implementations.
type UnimplementedPlaylistServer struct {
}

func (*UnimplementedPlaylistServer) SetStat(ctx context.Context, req *PlStatReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStat not implemented")
}

func RegisterPlaylistServer(s *grpc.Server, srv PlaylistServer) {
	s.RegisterService(&_Playlist_serviceDesc, srv)
}

func _Playlist_SetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).SetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.service.v1.Playlist/SetStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).SetStat(ctx, req.(*PlStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Playlist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "playlist.service.v1.Playlist",
	HandlerType: (*PlaylistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStat",
			Handler:    _Playlist_SetStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/web-svr/playlist/interface/api/v1/api.proto",
}

func (m *PlStatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlStatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Fid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
	}
	if m.View != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.View))
	}
	if m.Reply != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Reply))
	}
	if m.Fav != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fav))
	}
	if m.Share != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Share))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlStatReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.View != 0 {
		n += 1 + sovApi(uint64(m.View))
	}
	if m.Reply != 0 {
		n += 1 + sovApi(uint64(m.Reply))
	}
	if m.Fav != 0 {
		n += 1 + sovApi(uint64(m.Fav))
	}
	if m.Share != 0 {
		n += 1 + sovApi(uint64(m.Share))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlStatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlStatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlStatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			m.Fav = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fav |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
