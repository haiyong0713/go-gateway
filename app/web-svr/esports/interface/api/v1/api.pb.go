// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// use {app_id}.{version} as package name

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClearCacheType int32

const (
	ClearCacheType_CONTEST         ClearCacheType = 0
	ClearCacheType_SEASON          ClearCacheType = 1
	ClearCacheType_TEAM            ClearCacheType = 2
	ClearCacheType_TEAMS_IN_SEASON ClearCacheType = 3
)

var ClearCacheType_name = map[int32]string{
	0: "CONTEST",
	1: "SEASON",
	2: "TEAM",
	3: "TEAMS_IN_SEASON",
}

var ClearCacheType_value = map[string]int32{
	"CONTEST":         0,
	"SEASON":          1,
	"TEAM":            2,
	"TEAMS_IN_SEASON": 3,
}

func (x ClearCacheType) String() string {
	return proto.EnumName(ClearCacheType_name, int32(x))
}

func (ClearCacheType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

// 视频库联动筛选请求
type RefreshLolDataRequest struct {
	LeidaSid             int64    `protobuf:"varint,1,opt,name=leida_sid,json=leidaSid,proto3" json:"leida_sid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshLolDataRequest) Reset()         { *m = RefreshLolDataRequest{} }
func (m *RefreshLolDataRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshLolDataRequest) ProtoMessage()    {}
func (*RefreshLolDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *RefreshLolDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshLolDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshLolDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshLolDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshLolDataRequest.Merge(m, src)
}
func (m *RefreshLolDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefreshLolDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshLolDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshLolDataRequest proto.InternalMessageInfo

func (m *RefreshLolDataRequest) GetLeidaSid() int64 {
	if m != nil {
		return m.LeidaSid
	}
	return 0
}

type ClearMatchSeasonsCacheRequest struct {
	MatchID              int64    `protobuf:"varint,1,opt,name=MatchID,proto3" json:"MatchID,omitempty" validate:"required"`
	SeasonID             int64    `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearMatchSeasonsCacheRequest) Reset()         { *m = ClearMatchSeasonsCacheRequest{} }
func (m *ClearMatchSeasonsCacheRequest) String() string { return proto.CompactTextString(m) }
func (*ClearMatchSeasonsCacheRequest) ProtoMessage()    {}
func (*ClearMatchSeasonsCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *ClearMatchSeasonsCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearMatchSeasonsCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearMatchSeasonsCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearMatchSeasonsCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearMatchSeasonsCacheRequest.Merge(m, src)
}
func (m *ClearMatchSeasonsCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClearMatchSeasonsCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearMatchSeasonsCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearMatchSeasonsCacheRequest proto.InternalMessageInfo

func (m *ClearMatchSeasonsCacheRequest) GetMatchID() int64 {
	if m != nil {
		return m.MatchID
	}
	return 0
}

func (m *ClearMatchSeasonsCacheRequest) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type ClearComponentContestCacheRequest struct {
	SeasonID             int64    `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty" validate:"required"`
	ContestID            int64    `protobuf:"varint,2,opt,name=ContestID,proto3" json:"ContestID,omitempty"`
	SeriesID             int64    `protobuf:"varint,3,opt,name=SeriesID,proto3" json:"SeriesID,omitempty"`
	ContestHome          int64    `protobuf:"varint,4,opt,name=ContestHome,proto3" json:"ContestHome,omitempty"`
	ContestAway          int64    `protobuf:"varint,5,opt,name=ContestAway,proto3" json:"ContestAway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearComponentContestCacheRequest) Reset()         { *m = ClearComponentContestCacheRequest{} }
func (m *ClearComponentContestCacheRequest) String() string { return proto.CompactTextString(m) }
func (*ClearComponentContestCacheRequest) ProtoMessage()    {}
func (*ClearComponentContestCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ClearComponentContestCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearComponentContestCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearComponentContestCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearComponentContestCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearComponentContestCacheRequest.Merge(m, src)
}
func (m *ClearComponentContestCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClearComponentContestCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearComponentContestCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearComponentContestCacheRequest proto.InternalMessageInfo

func (m *ClearComponentContestCacheRequest) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *ClearComponentContestCacheRequest) GetContestID() int64 {
	if m != nil {
		return m.ContestID
	}
	return 0
}

func (m *ClearComponentContestCacheRequest) GetSeriesID() int64 {
	if m != nil {
		return m.SeriesID
	}
	return 0
}

func (m *ClearComponentContestCacheRequest) GetContestHome() int64 {
	if m != nil {
		return m.ContestHome
	}
	return 0
}

func (m *ClearComponentContestCacheRequest) GetContestAway() int64 {
	if m != nil {
		return m.ContestAway
	}
	return 0
}

// 赛程组件信息请求
type ComponentSeasonContestListRequest struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentSeasonContestListRequest) Reset()         { *m = ComponentSeasonContestListRequest{} }
func (m *ComponentSeasonContestListRequest) String() string { return proto.CompactTextString(m) }
func (*ComponentSeasonContestListRequest) ProtoMessage()    {}
func (*ComponentSeasonContestListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *ComponentSeasonContestListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentSeasonContestListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentSeasonContestListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentSeasonContestListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentSeasonContestListRequest.Merge(m, src)
}
func (m *ComponentSeasonContestListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComponentSeasonContestListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentSeasonContestListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentSeasonContestListRequest proto.InternalMessageInfo

func (m *ComponentSeasonContestListRequest) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

// 赛程组件信息返回结果
type ComponentSeasonContestListReply struct {
	ComponentContestList map[int64]*ContestCardComponentList `protobuf:"bytes,1,rep,name=componentContestList,proto3" json:"-" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ComponentSeasonContestListReply) Reset()         { *m = ComponentSeasonContestListReply{} }
func (m *ComponentSeasonContestListReply) String() string { return proto.CompactTextString(m) }
func (*ComponentSeasonContestListReply) ProtoMessage()    {}
func (*ComponentSeasonContestListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *ComponentSeasonContestListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentSeasonContestListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentSeasonContestListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentSeasonContestListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentSeasonContestListReply.Merge(m, src)
}
func (m *ComponentSeasonContestListReply) XXX_Size() int {
	return m.Size()
}
func (m *ComponentSeasonContestListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentSeasonContestListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentSeasonContestListReply proto.InternalMessageInfo

func (m *ComponentSeasonContestListReply) GetComponentContestList() map[int64]*ContestCardComponentList {
	if m != nil {
		return m.ComponentContestList
	}
	return nil
}

type ContestCardComponentList struct {
	List                 []*ContestCardComponent `protobuf:"bytes,1,rep,name=List,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ContestCardComponentList) Reset()         { *m = ContestCardComponentList{} }
func (m *ContestCardComponentList) String() string { return proto.CompactTextString(m) }
func (*ContestCardComponentList) ProtoMessage()    {}
func (*ContestCardComponentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *ContestCardComponentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestCardComponentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestCardComponentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestCardComponentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestCardComponentList.Merge(m, src)
}
func (m *ContestCardComponentList) XXX_Size() int {
	return m.Size()
}
func (m *ContestCardComponentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestCardComponentList.DiscardUnknown(m)
}

var xxx_messageInfo_ContestCardComponentList proto.InternalMessageInfo

func (m *ContestCardComponentList) GetList() []*ContestCardComponent {
	if m != nil {
		return m.List
	}
	return nil
}

// 赛程组件数据
type ContestCardComponent struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 赛程开始时间
	StartTime int64 `protobuf:"varint,2,opt,name=StartTime,proto3" json:"start_time"`
	// 赛程结束时间
	EndTime int64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"end_time"`
	// 赛程比赛阶段
	Title string `protobuf:"bytes,4,opt,name=Title,proto3" json:"title"`
	// 赛程状态
	Status string `protobuf:"bytes,5,opt,name=Status,proto3" json:"status"`
	// 集锦房间号url
	CollectionURL string `protobuf:"bytes,6,opt,name=CollectionURL,proto3" json:"collection_url"`
	// 直播房间号
	LiveRoom int64 `protobuf:"varint,7,opt,name=LiveRoom,proto3" json:"live_room"`
	// 回播房间号url
	PlayBack string `protobuf:"bytes,8,opt,name=PlayBack,proto3" json:"play_back"`
	// 比赛数据页类型 0：无 1：LOL 2:DATA2
	DataType int64 `protobuf:"varint,9,opt,name=DataType,proto3" json:"data_type"`
	// score数据 match_id
	MatchID int64 `protobuf:"varint,10,opt,name=MatchID,proto3" json:"match_id"`
	// 赛季id
	SeasonID int64 `protobuf:"varint,11,opt,name=SeasonID,proto3" json:"season_id"`
	// 赛程是否填写竞猜
	GuessType int64 `protobuf:"varint,12,opt,name=GuessType,proto3" json:"guess_type"`
	// 赛程阶段ID
	SeriesID int64 `protobuf:"varint,13,opt,name=SeriesID,proto3" json:"series_id"`
	// 是否订阅赛程
	IsSub int64 `protobuf:"varint,14,opt,name=IsSub,proto3" json:"is_sub"`
	// 是否竞猜赛程
	IsGuess int64 `protobuf:"varint,15,opt,name=IsGuess,proto3" json:"is_guess"`
	// 主队
	Home *Team4FrontendComponent `protobuf:"bytes,16,opt,name=Home,proto3" json:"home"`
	// 客队
	Away *Team4FrontendComponent `protobuf:"bytes,17,opt,name=Away,proto3" json:"away"`
	// 系列赛阶段
	Series *ContestSeriesComponent `protobuf:"bytes,18,opt,name=Series,proto3" json:"series"`
	// 比赛进行状态：1未开始，2进行中，3已结束
	ContestStatus int64 `protobuf:"varint,19,opt,name=ContestStatus,proto3" json:"contest_status"`
	// 比赛冻结状态
	ContestFreeze int64 `protobuf:"varint,20,opt,name=ContestFreeze,proto3" json:"contest_freeze"`
	// int64 赛程综合状态，此状态值后续不提供给第三方业务使用，只用于赛事内部业务闭环使用
	GameState int64 `protobuf:"varint,21,opt,name=GameState,proto3" json:"game_state"`
	// 是否显示竞猜按扭
	GuessShow            int64    `protobuf:"varint,22,opt,name=GuessShow,proto3" json:"guess_show"`
	HomeScore            int64    `protobuf:"varint,23,opt,name=HomeScore,proto3" json:"home_score"`
	AwayScore            int64    `protobuf:"varint,24,opt,name=AwayScore,proto3" json:"away_score"`
	GameStage            string   `protobuf:"bytes,25,opt,name=GameStage,proto3" json:"game_stage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContestCardComponent) Reset()         { *m = ContestCardComponent{} }
func (m *ContestCardComponent) String() string { return proto.CompactTextString(m) }
func (*ContestCardComponent) ProtoMessage()    {}
func (*ContestCardComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ContestCardComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestCardComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestCardComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestCardComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestCardComponent.Merge(m, src)
}
func (m *ContestCardComponent) XXX_Size() int {
	return m.Size()
}
func (m *ContestCardComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestCardComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ContestCardComponent proto.InternalMessageInfo

func (m *ContestCardComponent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContestCardComponent) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ContestCardComponent) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ContestCardComponent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ContestCardComponent) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ContestCardComponent) GetCollectionURL() string {
	if m != nil {
		return m.CollectionURL
	}
	return ""
}

func (m *ContestCardComponent) GetLiveRoom() int64 {
	if m != nil {
		return m.LiveRoom
	}
	return 0
}

func (m *ContestCardComponent) GetPlayBack() string {
	if m != nil {
		return m.PlayBack
	}
	return ""
}

func (m *ContestCardComponent) GetDataType() int64 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *ContestCardComponent) GetMatchID() int64 {
	if m != nil {
		return m.MatchID
	}
	return 0
}

func (m *ContestCardComponent) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *ContestCardComponent) GetGuessType() int64 {
	if m != nil {
		return m.GuessType
	}
	return 0
}

func (m *ContestCardComponent) GetSeriesID() int64 {
	if m != nil {
		return m.SeriesID
	}
	return 0
}

func (m *ContestCardComponent) GetIsSub() int64 {
	if m != nil {
		return m.IsSub
	}
	return 0
}

func (m *ContestCardComponent) GetIsGuess() int64 {
	if m != nil {
		return m.IsGuess
	}
	return 0
}

func (m *ContestCardComponent) GetHome() *Team4FrontendComponent {
	if m != nil {
		return m.Home
	}
	return nil
}

func (m *ContestCardComponent) GetAway() *Team4FrontendComponent {
	if m != nil {
		return m.Away
	}
	return nil
}

func (m *ContestCardComponent) GetSeries() *ContestSeriesComponent {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *ContestCardComponent) GetContestStatus() int64 {
	if m != nil {
		return m.ContestStatus
	}
	return 0
}

func (m *ContestCardComponent) GetContestFreeze() int64 {
	if m != nil {
		return m.ContestFreeze
	}
	return 0
}

func (m *ContestCardComponent) GetGameState() int64 {
	if m != nil {
		return m.GameState
	}
	return 0
}

func (m *ContestCardComponent) GetGuessShow() int64 {
	if m != nil {
		return m.GuessShow
	}
	return 0
}

func (m *ContestCardComponent) GetHomeScore() int64 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *ContestCardComponent) GetAwayScore() int64 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *ContestCardComponent) GetGameStage() string {
	if m != nil {
		return m.GameStage
	}
	return ""
}

// 赛程组件吃鸡类比赛请求
type ComponentSeasonContestBattleRequest struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComponentSeasonContestBattleRequest) Reset()         { *m = ComponentSeasonContestBattleRequest{} }
func (m *ComponentSeasonContestBattleRequest) String() string { return proto.CompactTextString(m) }
func (*ComponentSeasonContestBattleRequest) ProtoMessage()    {}
func (*ComponentSeasonContestBattleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *ComponentSeasonContestBattleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentSeasonContestBattleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentSeasonContestBattleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentSeasonContestBattleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentSeasonContestBattleRequest.Merge(m, src)
}
func (m *ComponentSeasonContestBattleRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComponentSeasonContestBattleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentSeasonContestBattleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentSeasonContestBattleRequest proto.InternalMessageInfo

func (m *ComponentSeasonContestBattleRequest) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

// 赛程组件吃鸡类比赛返回结果
type ComponentSeasonContestBattleReply struct {
	ComponentContestBattle map[int64]*ContestBattleCardComponentList `protobuf:"bytes,1,rep,name=componentContestBattle,proto3" json:"-" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral   struct{}                                  `json:"-"`
	XXX_unrecognized       []byte                                    `json:"-"`
	XXX_sizecache          int32                                     `json:"-"`
}

func (m *ComponentSeasonContestBattleReply) Reset()         { *m = ComponentSeasonContestBattleReply{} }
func (m *ComponentSeasonContestBattleReply) String() string { return proto.CompactTextString(m) }
func (*ComponentSeasonContestBattleReply) ProtoMessage()    {}
func (*ComponentSeasonContestBattleReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *ComponentSeasonContestBattleReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComponentSeasonContestBattleReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComponentSeasonContestBattleReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComponentSeasonContestBattleReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentSeasonContestBattleReply.Merge(m, src)
}
func (m *ComponentSeasonContestBattleReply) XXX_Size() int {
	return m.Size()
}
func (m *ComponentSeasonContestBattleReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentSeasonContestBattleReply.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentSeasonContestBattleReply proto.InternalMessageInfo

func (m *ComponentSeasonContestBattleReply) GetComponentContestBattle() map[int64]*ContestBattleCardComponentList {
	if m != nil {
		return m.ComponentContestBattle
	}
	return nil
}

// 赛程组件吃鸡类比赛数据
type ContestBattleCardComponent struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 赛程开始时间
	StartTime int64 `protobuf:"varint,2,opt,name=StartTime,proto3" json:"start_time"`
	// 赛程结束时间
	EndTime int64 `protobuf:"varint,3,opt,name=EndTime,proto3" json:"end_time"`
	// 赛程比赛阶段
	Title string `protobuf:"bytes,4,opt,name=Title,proto3" json:"title"`
	// 赛程状态
	Status string `protobuf:"bytes,5,opt,name=Status,proto3" json:"status"`
	// 集锦房间号url
	CollectionURL string `protobuf:"bytes,6,opt,name=CollectionURL,proto3" json:"collection_url"`
	// 直播房间号
	LiveRoom int64 `protobuf:"varint,7,opt,name=LiveRoom,proto3" json:"live_room"`
	// 回播房间号url
	PlayBack string `protobuf:"bytes,8,opt,name=PlayBack,proto3" json:"play_back"`
	// score数据 match_id
	MatchID int64 `protobuf:"varint,9,opt,name=MatchID,proto3" json:"match_id"`
	// 赛季id
	SeasonID int64 `protobuf:"varint,10,opt,name=SeasonID,proto3" json:"season_id"`
	// 是否订阅赛程
	IsSub int64 `protobuf:"varint,11,opt,name=IsSub,proto3" json:"is_sub"`
	// 赛程是否填写竞猜
	GuessType int64 `protobuf:"varint,12,opt,name=GuessType,proto3" json:"guess_type"`
	// 是否竞猜赛程
	IsGuess int64 `protobuf:"varint,13,opt,name=IsGuess,proto3" json:"is_guess"`
	// 比赛进行状态：1未开始，2进行中，3已结束
	ContestStatus int64 `protobuf:"varint,14,opt,name=ContestStatus,proto3" json:"contest_status"`
	// 比赛冻结状态
	ContestFreeze int64 `protobuf:"varint,15,opt,name=ContestFreeze,proto3" json:"contest_freeze"`
	// int64 赛程综合状态，此状态值后续不提供给第三方业务使用，只用于赛事内部业务闭环使用
	GameState int64 `protobuf:"varint,16,opt,name=GameState,proto3" json:"game_state"`
	// 是否显示竞猜按扭
	GuessShow int64 `protobuf:"varint,17,opt,name=GuessShow,proto3" json:"guess_show"`
	// 赛程阶段
	GameStage            string   `protobuf:"bytes,18,opt,name=GameStage,proto3" json:"game_stage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContestBattleCardComponent) Reset()         { *m = ContestBattleCardComponent{} }
func (m *ContestBattleCardComponent) String() string { return proto.CompactTextString(m) }
func (*ContestBattleCardComponent) ProtoMessage()    {}
func (*ContestBattleCardComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *ContestBattleCardComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestBattleCardComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestBattleCardComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestBattleCardComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestBattleCardComponent.Merge(m, src)
}
func (m *ContestBattleCardComponent) XXX_Size() int {
	return m.Size()
}
func (m *ContestBattleCardComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestBattleCardComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ContestBattleCardComponent proto.InternalMessageInfo

func (m *ContestBattleCardComponent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContestBattleCardComponent) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ContestBattleCardComponent) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ContestBattleCardComponent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ContestBattleCardComponent) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ContestBattleCardComponent) GetCollectionURL() string {
	if m != nil {
		return m.CollectionURL
	}
	return ""
}

func (m *ContestBattleCardComponent) GetLiveRoom() int64 {
	if m != nil {
		return m.LiveRoom
	}
	return 0
}

func (m *ContestBattleCardComponent) GetPlayBack() string {
	if m != nil {
		return m.PlayBack
	}
	return ""
}

func (m *ContestBattleCardComponent) GetMatchID() int64 {
	if m != nil {
		return m.MatchID
	}
	return 0
}

func (m *ContestBattleCardComponent) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *ContestBattleCardComponent) GetIsSub() int64 {
	if m != nil {
		return m.IsSub
	}
	return 0
}

func (m *ContestBattleCardComponent) GetGuessType() int64 {
	if m != nil {
		return m.GuessType
	}
	return 0
}

func (m *ContestBattleCardComponent) GetIsGuess() int64 {
	if m != nil {
		return m.IsGuess
	}
	return 0
}

func (m *ContestBattleCardComponent) GetContestStatus() int64 {
	if m != nil {
		return m.ContestStatus
	}
	return 0
}

func (m *ContestBattleCardComponent) GetContestFreeze() int64 {
	if m != nil {
		return m.ContestFreeze
	}
	return 0
}

func (m *ContestBattleCardComponent) GetGameState() int64 {
	if m != nil {
		return m.GameState
	}
	return 0
}

func (m *ContestBattleCardComponent) GetGuessShow() int64 {
	if m != nil {
		return m.GuessShow
	}
	return 0
}

func (m *ContestBattleCardComponent) GetGameStage() string {
	if m != nil {
		return m.GameStage
	}
	return ""
}

type ContestBattleCardComponentList struct {
	List                 []*ContestBattleCardComponent `protobuf:"bytes,1,rep,name=List,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ContestBattleCardComponentList) Reset()         { *m = ContestBattleCardComponentList{} }
func (m *ContestBattleCardComponentList) String() string { return proto.CompactTextString(m) }
func (*ContestBattleCardComponentList) ProtoMessage()    {}
func (*ContestBattleCardComponentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *ContestBattleCardComponentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestBattleCardComponentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestBattleCardComponentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestBattleCardComponentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestBattleCardComponentList.Merge(m, src)
}
func (m *ContestBattleCardComponentList) XXX_Size() int {
	return m.Size()
}
func (m *ContestBattleCardComponentList) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestBattleCardComponentList.DiscardUnknown(m)
}

var xxx_messageInfo_ContestBattleCardComponentList proto.InternalMessageInfo

func (m *ContestBattleCardComponentList) GetList() []*ContestBattleCardComponent {
	if m != nil {
		return m.List
	}
	return nil
}

type Team4FrontendComponent struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 战队Logo
	Icon string `protobuf:"bytes,2,opt,name=Icon,proto3" json:"icon"`
	// 战队简称
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"name"`
	// 战队得分
	Wins int64 `protobuf:"varint,4,opt,name=Wins,proto3" json:"wins"`
	// 战队地区名称
	Region string `protobuf:"bytes,5,opt,name=Region,proto3" json:"region"`
	// 战队地区ID
	RegionID             int64    `protobuf:"varint,6,opt,name=RegionID,proto3" json:"region_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Team4FrontendComponent) Reset()         { *m = Team4FrontendComponent{} }
func (m *Team4FrontendComponent) String() string { return proto.CompactTextString(m) }
func (*Team4FrontendComponent) ProtoMessage()    {}
func (*Team4FrontendComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *Team4FrontendComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team4FrontendComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team4FrontendComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team4FrontendComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team4FrontendComponent.Merge(m, src)
}
func (m *Team4FrontendComponent) XXX_Size() int {
	return m.Size()
}
func (m *Team4FrontendComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_Team4FrontendComponent.DiscardUnknown(m)
}

var xxx_messageInfo_Team4FrontendComponent proto.InternalMessageInfo

func (m *Team4FrontendComponent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Team4FrontendComponent) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Team4FrontendComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team4FrontendComponent) GetWins() int64 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *Team4FrontendComponent) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Team4FrontendComponent) GetRegionID() int64 {
	if m != nil {
		return m.RegionID
	}
	return 0
}

type ContestSeriesComponent struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 系列赛父阶段标题
	ParentTitle string `protobuf:"bytes,2,opt,name=ParentTitle,proto3" json:"parent_title"`
	// 系列赛子阶段标题
	ChildTitle string `protobuf:"bytes,3,opt,name=ChildTitle,proto3" json:"child_title"`
	// 开始时间
	StartTime int64 `protobuf:"varint,4,opt,name=StartTime,proto3" json:"start_time"`
	// 结束时间
	EndTime int64 `protobuf:"varint,5,opt,name=EndTime,proto3" json:"end_time"`
	// score系列赛id
	ScoreID              string   `protobuf:"bytes,6,opt,name=ScoreID,proto3" json:"score_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContestSeriesComponent) Reset()         { *m = ContestSeriesComponent{} }
func (m *ContestSeriesComponent) String() string { return proto.CompactTextString(m) }
func (*ContestSeriesComponent) ProtoMessage()    {}
func (*ContestSeriesComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *ContestSeriesComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestSeriesComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestSeriesComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestSeriesComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestSeriesComponent.Merge(m, src)
}
func (m *ContestSeriesComponent) XXX_Size() int {
	return m.Size()
}
func (m *ContestSeriesComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestSeriesComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ContestSeriesComponent proto.InternalMessageInfo

func (m *ContestSeriesComponent) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContestSeriesComponent) GetParentTitle() string {
	if m != nil {
		return m.ParentTitle
	}
	return ""
}

func (m *ContestSeriesComponent) GetChildTitle() string {
	if m != nil {
		return m.ChildTitle
	}
	return ""
}

func (m *ContestSeriesComponent) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ContestSeriesComponent) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ContestSeriesComponent) GetScoreID() string {
	if m != nil {
		return m.ScoreID
	}
	return ""
}

type UpdateSeasonGuessVersionRequest struct {
	MatchId              int64    `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSeasonGuessVersionRequest) Reset()         { *m = UpdateSeasonGuessVersionRequest{} }
func (m *UpdateSeasonGuessVersionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSeasonGuessVersionRequest) ProtoMessage()    {}
func (*UpdateSeasonGuessVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *UpdateSeasonGuessVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSeasonGuessVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSeasonGuessVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSeasonGuessVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeasonGuessVersionRequest.Merge(m, src)
}
func (m *UpdateSeasonGuessVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSeasonGuessVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeasonGuessVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeasonGuessVersionRequest proto.InternalMessageInfo

func (m *UpdateSeasonGuessVersionRequest) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type UpdateSeasonGuessVersionReply struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSeasonGuessVersionReply) Reset()         { *m = UpdateSeasonGuessVersionReply{} }
func (m *UpdateSeasonGuessVersionReply) String() string { return proto.CompactTextString(m) }
func (*UpdateSeasonGuessVersionReply) ProtoMessage()    {}
func (*UpdateSeasonGuessVersionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *UpdateSeasonGuessVersionReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSeasonGuessVersionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSeasonGuessVersionReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSeasonGuessVersionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeasonGuessVersionReply.Merge(m, src)
}
func (m *UpdateSeasonGuessVersionReply) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSeasonGuessVersionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeasonGuessVersionReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeasonGuessVersionReply proto.InternalMessageInfo

func (m *UpdateSeasonGuessVersionReply) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ClearUserGuessCacheRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	MatchId              int64    `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearUserGuessCacheRequest) Reset()         { *m = ClearUserGuessCacheRequest{} }
func (m *ClearUserGuessCacheRequest) String() string { return proto.CompactTextString(m) }
func (*ClearUserGuessCacheRequest) ProtoMessage()    {}
func (*ClearUserGuessCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *ClearUserGuessCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearUserGuessCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearUserGuessCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearUserGuessCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearUserGuessCacheRequest.Merge(m, src)
}
func (m *ClearUserGuessCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClearUserGuessCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearUserGuessCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearUserGuessCacheRequest proto.InternalMessageInfo

func (m *ClearUserGuessCacheRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ClearUserGuessCacheRequest) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type ClearUserGuessCacheReply struct {
	Status               int64    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearUserGuessCacheReply) Reset()         { *m = ClearUserGuessCacheReply{} }
func (m *ClearUserGuessCacheReply) String() string { return proto.CompactTextString(m) }
func (*ClearUserGuessCacheReply) ProtoMessage()    {}
func (*ClearUserGuessCacheReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *ClearUserGuessCacheReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearUserGuessCacheReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearUserGuessCacheReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearUserGuessCacheReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearUserGuessCacheReply.Merge(m, src)
}
func (m *ClearUserGuessCacheReply) XXX_Size() int {
	return m.Size()
}
func (m *ClearUserGuessCacheReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearUserGuessCacheReply.DiscardUnknown(m)
}

var xxx_messageInfo_ClearUserGuessCacheReply proto.InternalMessageInfo

func (m *ClearUserGuessCacheReply) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ClearCacheRequest struct {
	CacheType            ClearCacheType `protobuf:"varint,1,opt,name=cache_type,json=cacheType,proto3,enum=esports.service.v1.ClearCacheType" json:"cache_type,omitempty"`
	CacheKeys            []int64        `protobuf:"varint,2,rep,packed,name=cache_keys,json=cacheKeys,proto3" json:"cache_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClearCacheRequest) Reset()         { *m = ClearCacheRequest{} }
func (m *ClearCacheRequest) String() string { return proto.CompactTextString(m) }
func (*ClearCacheRequest) ProtoMessage()    {}
func (*ClearCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *ClearCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearCacheRequest.Merge(m, src)
}
func (m *ClearCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClearCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearCacheRequest proto.InternalMessageInfo

func (m *ClearCacheRequest) GetCacheType() ClearCacheType {
	if m != nil {
		return m.CacheType
	}
	return ClearCacheType_CONTEST
}

func (m *ClearCacheRequest) GetCacheKeys() []int64 {
	if m != nil {
		return m.CacheKeys
	}
	return nil
}

type ClearCacheReply struct {
	// 0: 全部成功 1：部分成功 2：全部失败
	Status               int64          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	CacheType            ClearCacheType `protobuf:"varint,2,opt,name=cache_type,json=cacheType,proto3,enum=esports.service.v1.ClearCacheType" json:"cache_type,omitempty"`
	CacheKeys            []int64        `protobuf:"varint,3,rep,packed,name=cache_keys,json=cacheKeys,proto3" json:"cache_keys,omitempty"`
	FailedKeys           []int64        `protobuf:"varint,4,rep,packed,name=failed_keys,json=failedKeys,proto3" json:"failed_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ClearCacheReply) Reset()         { *m = ClearCacheReply{} }
func (m *ClearCacheReply) String() string { return proto.CompactTextString(m) }
func (*ClearCacheReply) ProtoMessage()    {}
func (*ClearCacheReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *ClearCacheReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearCacheReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearCacheReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearCacheReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearCacheReply.Merge(m, src)
}
func (m *ClearCacheReply) XXX_Size() int {
	return m.Size()
}
func (m *ClearCacheReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearCacheReply.DiscardUnknown(m)
}

var xxx_messageInfo_ClearCacheReply proto.InternalMessageInfo

func (m *ClearCacheReply) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ClearCacheReply) GetCacheType() ClearCacheType {
	if m != nil {
		return m.CacheType
	}
	return ClearCacheType_CONTEST
}

func (m *ClearCacheReply) GetCacheKeys() []int64 {
	if m != nil {
		return m.CacheKeys
	}
	return nil
}

func (m *ClearCacheReply) GetFailedKeys() []int64 {
	if m != nil {
		return m.FailedKeys
	}
	return nil
}

type FavedUsersReply struct {
	Page                 *ModelPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	User                 []*User    `protobuf:"bytes,2,rep,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FavedUsersReply) Reset()         { *m = FavedUsersReply{} }
func (m *FavedUsersReply) String() string { return proto.CompactTextString(m) }
func (*FavedUsersReply) ProtoMessage()    {}
func (*FavedUsersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *FavedUsersReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavedUsersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavedUsersReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavedUsersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavedUsersReply.Merge(m, src)
}
func (m *FavedUsersReply) XXX_Size() int {
	return m.Size()
}
func (m *FavedUsersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FavedUsersReply.DiscardUnknown(m)
}

var xxx_messageInfo_FavedUsersReply proto.InternalMessageInfo

func (m *FavedUsersReply) GetPage() *ModelPage {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *FavedUsersReply) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

type ModelPage struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Size_                int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Count                int32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModelPage) Reset()         { *m = ModelPage{} }
func (m *ModelPage) String() string { return proto.CompactTextString(m) }
func (*ModelPage) ProtoMessage()    {}
func (*ModelPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *ModelPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModelPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModelPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelPage.Merge(m, src)
}
func (m *ModelPage) XXX_Size() int {
	return m.Size()
}
func (m *ModelPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelPage.DiscardUnknown(m)
}

var xxx_messageInfo_ModelPage proto.InternalMessageInfo

func (m *ModelPage) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ModelPage) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ModelPage) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type User struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Oid                  int64    `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Typ                  int32    `protobuf:"varint,4,opt,name=typ,proto3" json:"typ,omitempty"`
	State                int32    `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	Ctime                int64    `protobuf:"varint,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                int64    `protobuf:"varint,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *User) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *User) GetTyp() int32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *User) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *User) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *User) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

// NoArgReq
type NoArgRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoArgRequest) Reset()         { *m = NoArgRequest{} }
func (m *NoArgRequest) String() string { return proto.CompactTextString(m) }
func (*NoArgRequest) ProtoMessage()    {}
func (*NoArgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *NoArgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoArgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoArgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoArgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoArgRequest.Merge(m, src)
}
func (m *NoArgRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoArgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoArgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoArgRequest proto.InternalMessageInfo

// 收藏请求参数
type FavRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Cid                  int64    `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavRequest) Reset()         { *m = FavRequest{} }
func (m *FavRequest) String() string { return proto.CompactTextString(m) }
func (*FavRequest) ProtoMessage()    {}
func (*FavRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *FavRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavRequest.Merge(m, src)
}
func (m *FavRequest) XXX_Size() int {
	return m.Size()
}
func (m *FavRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FavRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FavRequest proto.InternalMessageInfo

func (m *FavRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FavRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// 赛程请求参数
type LiveContestsRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Cids                 []int64  `protobuf:"varint,2,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveContestsRequest) Reset()         { *m = LiveContestsRequest{} }
func (m *LiveContestsRequest) String() string { return proto.CompactTextString(m) }
func (*LiveContestsRequest) ProtoMessage()    {}
func (*LiveContestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *LiveContestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveContestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveContestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveContestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveContestsRequest.Merge(m, src)
}
func (m *LiveContestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiveContestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveContestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiveContestsRequest proto.InternalMessageInfo

func (m *LiveContestsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *LiveContestsRequest) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

// Ott赛程请求参数
type OttContestsRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Cids                 []int64  `protobuf:"varint,2,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OttContestsRequest) Reset()         { *m = OttContestsRequest{} }
func (m *OttContestsRequest) String() string { return proto.CompactTextString(m) }
func (*OttContestsRequest) ProtoMessage()    {}
func (*OttContestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *OttContestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OttContestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OttContestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OttContestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OttContestsRequest.Merge(m, src)
}
func (m *OttContestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OttContestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OttContestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OttContestsRequest proto.InternalMessageInfo

func (m *OttContestsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *OttContestsRequest) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

// 订阅赛程用户请求参数
type SubContestsRequest struct {
	Cid                  int64    `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty" validate:"required"`
	Pn                   int32    `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty" validate:"min=1"`
	Ps                   int32    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=5000"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubContestsRequest) Reset()         { *m = SubContestsRequest{} }
func (m *SubContestsRequest) String() string { return proto.CompactTextString(m) }
func (*SubContestsRequest) ProtoMessage()    {}
func (*SubContestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *SubContestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubContestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubContestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubContestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubContestsRequest.Merge(m, src)
}
func (m *SubContestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubContestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubContestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubContestsRequest proto.InternalMessageInfo

func (m *SubContestsRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *SubContestsRequest) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *SubContestsRequest) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

// 开始时间赛程请求参数
type StimeContestsRequest struct {
	Stime                string   `protobuf:"bytes,1,opt,name=stime,proto3" json:"stime,omitempty" validate:"required"`
	Etime                string   `protobuf:"bytes,2,opt,name=etime,proto3" json:"etime,omitempty" validate:"required"`
	Roomids              []int64  `protobuf:"varint,3,rep,packed,name=roomids,proto3" json:"roomids,omitempty" validate:"required"`
	Mid                  int64    `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StimeContestsRequest) Reset()         { *m = StimeContestsRequest{} }
func (m *StimeContestsRequest) String() string { return proto.CompactTextString(m) }
func (*StimeContestsRequest) ProtoMessage()    {}
func (*StimeContestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *StimeContestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StimeContestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StimeContestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StimeContestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StimeContestsRequest.Merge(m, src)
}
func (m *StimeContestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *StimeContestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StimeContestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StimeContestsRequest proto.InternalMessageInfo

func (m *StimeContestsRequest) GetStime() string {
	if m != nil {
		return m.Stime
	}
	return ""
}

func (m *StimeContestsRequest) GetEtime() string {
	if m != nil {
		return m.Etime
	}
	return ""
}

func (m *StimeContestsRequest) GetRoomids() []int64 {
	if m != nil {
		return m.Roomids
	}
	return nil
}

func (m *StimeContestsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

// 赛程订阅用户列表新接口请求参数
type SubContestUsersV2Request struct {
	Cid                  int64    `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty" validate:"required"`
	Cursor               int64    `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	CursorSize           int32    `protobuf:"varint,3,opt,name=cursor_size,json=cursorSize,proto3" json:"cursor_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubContestUsersV2Request) Reset()         { *m = SubContestUsersV2Request{} }
func (m *SubContestUsersV2Request) String() string { return proto.CompactTextString(m) }
func (*SubContestUsersV2Request) ProtoMessage()    {}
func (*SubContestUsersV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *SubContestUsersV2Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubContestUsersV2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubContestUsersV2Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubContestUsersV2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubContestUsersV2Request.Merge(m, src)
}
func (m *SubContestUsersV2Request) XXX_Size() int {
	return m.Size()
}
func (m *SubContestUsersV2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_SubContestUsersV2Request.DiscardUnknown(m)
}

var xxx_messageInfo_SubContestUsersV2Request proto.InternalMessageInfo

func (m *SubContestUsersV2Request) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *SubContestUsersV2Request) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *SubContestUsersV2Request) GetCursorSize() int32 {
	if m != nil {
		return m.CursorSize
	}
	return 0
}

// 赛程订阅用户列表新接口返回
type SubContestUsersV2Reply struct {
	Cursor               int64    `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	User                 []*User  `protobuf:"bytes,2,rep,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubContestUsersV2Reply) Reset()         { *m = SubContestUsersV2Reply{} }
func (m *SubContestUsersV2Reply) String() string { return proto.CompactTextString(m) }
func (*SubContestUsersV2Reply) ProtoMessage()    {}
func (*SubContestUsersV2Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *SubContestUsersV2Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubContestUsersV2Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubContestUsersV2Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubContestUsersV2Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubContestUsersV2Reply.Merge(m, src)
}
func (m *SubContestUsersV2Reply) XXX_Size() int {
	return m.Size()
}
func (m *SubContestUsersV2Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_SubContestUsersV2Reply.DiscardUnknown(m)
}

var xxx_messageInfo_SubContestUsersV2Reply proto.InternalMessageInfo

func (m *SubContestUsersV2Reply) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *SubContestUsersV2Reply) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

// 赛程列表请求参数
type ContestListRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Sort                 int64    `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	MatchId              int64    `protobuf:"varint,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Tid                  int64    `protobuf:"varint,4,opt,name=tid,proto3" json:"tid,omitempty"`
	Stime                string   `protobuf:"bytes,5,opt,name=stime,proto3" json:"stime,omitempty"`
	Etime                string   `protobuf:"bytes,6,opt,name=etime,proto3" json:"etime,omitempty"`
	Sids                 []int64  `protobuf:"varint,7,rep,packed,name=sids,proto3" json:"sids,omitempty"`
	Cids                 []int64  `protobuf:"varint,8,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	GuessType            int64    `protobuf:"varint,9,opt,name=guess_type,json=guessType,proto3" json:"guess_type,omitempty"`
	Pn                   int64    `protobuf:"varint,10,opt,name=pn,proto3" json:"pn,omitempty" validate:"min=1"`
	Ps                   int64    `protobuf:"varint,11,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=100"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContestListRequest) Reset()         { *m = ContestListRequest{} }
func (m *ContestListRequest) String() string { return proto.CompactTextString(m) }
func (*ContestListRequest) ProtoMessage()    {}
func (*ContestListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *ContestListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestListRequest.Merge(m, src)
}
func (m *ContestListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContestListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContestListRequest proto.InternalMessageInfo

func (m *ContestListRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ContestListRequest) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *ContestListRequest) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *ContestListRequest) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ContestListRequest) GetStime() string {
	if m != nil {
		return m.Stime
	}
	return ""
}

func (m *ContestListRequest) GetEtime() string {
	if m != nil {
		return m.Etime
	}
	return ""
}

func (m *ContestListRequest) GetSids() []int64 {
	if m != nil {
		return m.Sids
	}
	return nil
}

func (m *ContestListRequest) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *ContestListRequest) GetGuessType() int64 {
	if m != nil {
		return m.GuessType
	}
	return 0
}

func (m *ContestListRequest) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *ContestListRequest) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

// 赛程列表请求返回
type ContestListReply struct {
	Page                 *ModelPage `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Contests             []*Contest `protobuf:"bytes,2,rep,name=Contests,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ContestListReply) Reset()         { *m = ContestListReply{} }
func (m *ContestListReply) String() string { return proto.CompactTextString(m) }
func (*ContestListReply) ProtoMessage()    {}
func (*ContestListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *ContestListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestListReply.Merge(m, src)
}
func (m *ContestListReply) XXX_Size() int {
	return m.Size()
}
func (m *ContestListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestListReply.DiscardUnknown(m)
}

var xxx_messageInfo_ContestListReply proto.InternalMessageInfo

func (m *ContestListReply) GetPage() *ModelPage {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ContestListReply) GetContests() []*Contest {
	if m != nil {
		return m.Contests
	}
	return nil
}

// 赛程请求返回
type LiveContestsReply struct {
	Contests             []*Contest `protobuf:"bytes,1,rep,name=Contests,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *LiveContestsReply) Reset()         { *m = LiveContestsReply{} }
func (m *LiveContestsReply) String() string { return proto.CompactTextString(m) }
func (*LiveContestsReply) ProtoMessage()    {}
func (*LiveContestsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *LiveContestsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveContestsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveContestsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveContestsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveContestsReply.Merge(m, src)
}
func (m *LiveContestsReply) XXX_Size() int {
	return m.Size()
}
func (m *LiveContestsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveContestsReply.DiscardUnknown(m)
}

var xxx_messageInfo_LiveContestsReply proto.InternalMessageInfo

func (m *LiveContestsReply) GetContests() []*Contest {
	if m != nil {
		return m.Contests
	}
	return nil
}

// Ott赛程请求返回
type OttContestsReply struct {
	Contests             []*Contest `protobuf:"bytes,1,rep,name=Contests,proto3" json:"Contests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OttContestsReply) Reset()         { *m = OttContestsReply{} }
func (m *OttContestsReply) String() string { return proto.CompactTextString(m) }
func (*OttContestsReply) ProtoMessage()    {}
func (*OttContestsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *OttContestsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OttContestsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OttContestsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OttContestsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OttContestsReply.Merge(m, src)
}
func (m *OttContestsReply) XXX_Size() int {
	return m.Size()
}
func (m *OttContestsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OttContestsReply.DiscardUnknown(m)
}

var xxx_messageInfo_OttContestsReply proto.InternalMessageInfo

func (m *OttContestsReply) GetContests() []*Contest {
	if m != nil {
		return m.Contests
	}
	return nil
}

// 游戏请求参数
type GamesRequest struct {
	Gids                 []int64  `protobuf:"varint,1,rep,packed,name=gids,proto3" json:"gids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GamesRequest) Reset()         { *m = GamesRequest{} }
func (m *GamesRequest) String() string { return proto.CompactTextString(m) }
func (*GamesRequest) ProtoMessage()    {}
func (*GamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *GamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamesRequest.Merge(m, src)
}
func (m *GamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GamesRequest proto.InternalMessageInfo

func (m *GamesRequest) GetGids() []int64 {
	if m != nil {
		return m.Gids
	}
	return nil
}

// 游戏请求返回
type GamesReply struct {
	Games                []*Game  `protobuf:"bytes,1,rep,name=Games,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GamesReply) Reset()         { *m = GamesReply{} }
func (m *GamesReply) String() string { return proto.CompactTextString(m) }
func (*GamesReply) ProtoMessage()    {}
func (*GamesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *GamesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamesReply.Merge(m, src)
}
func (m *GamesReply) XXX_Size() int {
	return m.Size()
}
func (m *GamesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GamesReply.DiscardUnknown(m)
}

var xxx_messageInfo_GamesReply proto.InternalMessageInfo

func (m *GamesReply) GetGames() []*Game {
	if m != nil {
		return m.Games
	}
	return nil
}

// 赛程游戏请求参数
type GameMapRequest struct {
	Cids                 []int64  `protobuf:"varint,1,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameMapRequest) Reset()         { *m = GameMapRequest{} }
func (m *GameMapRequest) String() string { return proto.CompactTextString(m) }
func (*GameMapRequest) ProtoMessage()    {}
func (*GameMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *GameMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMapRequest.Merge(m, src)
}
func (m *GameMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *GameMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameMapRequest proto.InternalMessageInfo

func (m *GameMapRequest) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

// 赛程游戏请求返回
type GameMapReply struct {
	Games                map[int64]*Game `protobuf:"bytes,1,rep,name=games,proto3" json:"-" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GameMapReply) Reset()         { *m = GameMapReply{} }
func (m *GameMapReply) String() string { return proto.CompactTextString(m) }
func (*GameMapReply) ProtoMessage()    {}
func (*GameMapReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *GameMapReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMapReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMapReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMapReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMapReply.Merge(m, src)
}
func (m *GameMapReply) XXX_Size() int {
	return m.Size()
}
func (m *GameMapReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMapReply.DiscardUnknown(m)
}

var xxx_messageInfo_GameMapReply proto.InternalMessageInfo

func (m *GameMapReply) GetGames() map[int64]*Game {
	if m != nil {
		return m.Games
	}
	return nil
}

// 赛程数据
type Contest struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	//比赛阶段
	GameStage string `protobuf:"bytes,2,opt,name=GameStage,proto3" json:"game_stage"`
	//比赛开始时间
	Stime int64 `protobuf:"varint,3,opt,name=Stime,proto3" json:"stime"`
	//比赛结束时间
	Etime int64 `protobuf:"varint,4,opt,name=Etime,proto3" json:"etime"`
	//主场队伍id
	HomeID int64 `protobuf:"varint,5,opt,name=HomeID,proto3" json:"home_id"`
	//客场队伍id
	AwayID int64 `protobuf:"varint,6,opt,name=AwayID,proto3" json:"away_id"`
	//主场分数
	HomeScore int64 `protobuf:"varint,7,opt,name=HomeScore,proto3" json:"home_score"`
	//客场分数
	AwayScore int64 `protobuf:"varint,8,opt,name=AwayScore,proto3" json:"away_score"`
	//直播房间号
	LiveRoom int64 `protobuf:"varint,9,opt,name=LiveRoom,proto3" json:"live_room"`
	//回播房间号
	Aid int64 `protobuf:"varint,10,opt,name=Aid,proto3" json:"aid"`
	//集锦房间号
	Collection int64 `protobuf:"varint,11,opt,name=Collection,proto3" json:"collection"`
	//订阅状态 3-已订阅  其它-未订阅
	GameState int64 `protobuf:"varint,12,opt,name=GameState,proto3" json:"game_state"`
	// 赛程描述
	Dic string `protobuf:"bytes,13,opt,name=Dic,proto3" json:"dic"`
	// 0 启用 1 冻结
	Status int64 `protobuf:"varint,14,opt,name=Status,proto3" json:"status"`
	//季度id
	Sid int64 `protobuf:"varint,15,opt,name=Sid,proto3" json:"sid"`
	//赛事id
	Mid int64 `protobuf:"varint,16,opt,name=Mid,proto3" json:"mid"`
	//赛程类型：0普通1特殊
	Special int64 `protobuf:"varint,17,opt,name=Special,proto3" json:"special"`
	//胜利战队
	SuccessTeam int64 `protobuf:"varint,18,opt,name=SuccessTeam,proto3" json:"success_team"`
	//赛程名称
	SpecialName string `protobuf:"bytes,19,opt,name=SpecialName,proto3" json:"special_name"`
	//胜利文案
	SpecialTips string `protobuf:"bytes,20,opt,name=SpecialTips,proto3" json:"special_tips"`
	//赛程图片
	SpecialImage string `protobuf:"bytes,21,opt,name=SpecialImage,proto3" json:"special_image"`
	//回播房间号url
	Playback string `protobuf:"bytes,22,opt,name=Playback,proto3" json:"playback"`
	//集锦房间号url
	CollectionURL string `protobuf:"bytes,23,opt,name=CollectionURL,proto3" json:"collection_url"`
	//集锦房间号url
	LiveURL string `protobuf:"bytes,24,opt,name=LiveURL,proto3" json:"live_url"`
	//比赛数据页类型 0：无 1：LOL 2:DATA2
	DataType int64 `protobuf:"varint,25,opt,name=DataType,proto3" json:"data_type"`
	//雷达数据match_id
	MatchID int64 `protobuf:"varint,26,opt,name=MatchID,proto3" json:"match_id"`
	//赛季
	Season *Season `protobuf:"bytes,27,opt,name=season,proto3" json:"season"`
	//主场战队信息
	HomeTeam *Team `protobuf:"bytes,28,opt,name=HomeTeam,proto3" json:"home_team"`
	//客场战队信息
	AwayTeam *Team `protobuf:"bytes,29,opt,name=AwayTeam,proto3" json:"away_team"`
	//特殊赛程胜利队信息
	SuccessTeaminfo *Team `protobuf:"bytes,30,opt,name=SuccessTeaminfo,proto3" json:"success_teaminfo"`
	//是否有竞猜
	GuessShow int64 `protobuf:"varint,31,opt,name=GuessShow,proto3" json:"guess_show"`
	//比赛阶段1
	GameStage1 string `protobuf:"bytes,32,opt,name=GameStage1,proto3" json:"game_stage1"`
	//比赛阶段2
	GameStage2 string `protobuf:"bytes,33,opt,name=GameStage2,proto3" json:"game_stage2"`
	//跳转地址
	JumpURL   string `protobuf:"bytes,34,opt,name=JumpURL,proto3" json:"jump_url"`
	CanGuess  bool   `protobuf:"varint,35,opt,name=CanGuess,json=can_guess,proto3" json:"can_guess"`
	GuessLink string `protobuf:"bytes,36,opt,name=GuessLink,json=guess_link,proto3" json:"guess_link"`
	// 是否为奥林匹克赛程
	IsOlympic bool `protobuf:"varint,37,opt,name=IsOlympic,proto3" json:"IsOlympic,omitempty"`
	// 仅奥运赛程使用，其他场景无需关注； 0不展示集锦及敬请期待按钮；1按照比赛状态及配置信息正常展示
	OlympicShowRule int32 `protobuf:"varint,38,opt,name=OlympicShowRule,proto3" json:"OlympicShowRule,omitempty"`
	// 赛程的冻结状态，此状态为冻结时不吐出详情
	ContestFreeze int64 `protobuf:"varint,39,opt,name=ContestFreeze,proto3" json:"contest_freeze"`
	// 比赛状态，枚举：1未开始，2进行中，3已结束
	ContestStatus        int64    `protobuf:"varint,40,opt,name=ContestStatus,proto3" json:"contest_status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contest) Reset()         { *m = Contest{} }
func (m *Contest) String() string { return proto.CompactTextString(m) }
func (*Contest) ProtoMessage()    {}
func (*Contest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *Contest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contest.Merge(m, src)
}
func (m *Contest) XXX_Size() int {
	return m.Size()
}
func (m *Contest) XXX_DiscardUnknown() {
	xxx_messageInfo_Contest.DiscardUnknown(m)
}

var xxx_messageInfo_Contest proto.InternalMessageInfo

func (m *Contest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Contest) GetGameStage() string {
	if m != nil {
		return m.GameStage
	}
	return ""
}

func (m *Contest) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *Contest) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *Contest) GetHomeID() int64 {
	if m != nil {
		return m.HomeID
	}
	return 0
}

func (m *Contest) GetAwayID() int64 {
	if m != nil {
		return m.AwayID
	}
	return 0
}

func (m *Contest) GetHomeScore() int64 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *Contest) GetAwayScore() int64 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *Contest) GetLiveRoom() int64 {
	if m != nil {
		return m.LiveRoom
	}
	return 0
}

func (m *Contest) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *Contest) GetCollection() int64 {
	if m != nil {
		return m.Collection
	}
	return 0
}

func (m *Contest) GetGameState() int64 {
	if m != nil {
		return m.GameState
	}
	return 0
}

func (m *Contest) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *Contest) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Contest) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *Contest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Contest) GetSpecial() int64 {
	if m != nil {
		return m.Special
	}
	return 0
}

func (m *Contest) GetSuccessTeam() int64 {
	if m != nil {
		return m.SuccessTeam
	}
	return 0
}

func (m *Contest) GetSpecialName() string {
	if m != nil {
		return m.SpecialName
	}
	return ""
}

func (m *Contest) GetSpecialTips() string {
	if m != nil {
		return m.SpecialTips
	}
	return ""
}

func (m *Contest) GetSpecialImage() string {
	if m != nil {
		return m.SpecialImage
	}
	return ""
}

func (m *Contest) GetPlayback() string {
	if m != nil {
		return m.Playback
	}
	return ""
}

func (m *Contest) GetCollectionURL() string {
	if m != nil {
		return m.CollectionURL
	}
	return ""
}

func (m *Contest) GetLiveURL() string {
	if m != nil {
		return m.LiveURL
	}
	return ""
}

func (m *Contest) GetDataType() int64 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *Contest) GetMatchID() int64 {
	if m != nil {
		return m.MatchID
	}
	return 0
}

func (m *Contest) GetSeason() *Season {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *Contest) GetHomeTeam() *Team {
	if m != nil {
		return m.HomeTeam
	}
	return nil
}

func (m *Contest) GetAwayTeam() *Team {
	if m != nil {
		return m.AwayTeam
	}
	return nil
}

func (m *Contest) GetSuccessTeaminfo() *Team {
	if m != nil {
		return m.SuccessTeaminfo
	}
	return nil
}

func (m *Contest) GetGuessShow() int64 {
	if m != nil {
		return m.GuessShow
	}
	return 0
}

func (m *Contest) GetGameStage1() string {
	if m != nil {
		return m.GameStage1
	}
	return ""
}

func (m *Contest) GetGameStage2() string {
	if m != nil {
		return m.GameStage2
	}
	return ""
}

func (m *Contest) GetJumpURL() string {
	if m != nil {
		return m.JumpURL
	}
	return ""
}

func (m *Contest) GetCanGuess() bool {
	if m != nil {
		return m.CanGuess
	}
	return false
}

func (m *Contest) GetGuessLink() string {
	if m != nil {
		return m.GuessLink
	}
	return ""
}

func (m *Contest) GetIsOlympic() bool {
	if m != nil {
		return m.IsOlympic
	}
	return false
}

func (m *Contest) GetOlympicShowRule() int32 {
	if m != nil {
		return m.OlympicShowRule
	}
	return 0
}

func (m *Contest) GetContestFreeze() int64 {
	if m != nil {
		return m.ContestFreeze
	}
	return 0
}

func (m *Contest) GetContestStatus() int64 {
	if m != nil {
		return m.ContestStatus
	}
	return 0
}

// 赛季数据
type Season struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	//赛事id
	Mid int64 `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	//简称
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"title"`
	//全称
	SubTitle string `protobuf:"bytes,4,opt,name=SubTitle,proto3" json:"sub_title"`
	//开始时间
	Stime int64 `protobuf:"varint,5,opt,name=Stime,proto3" json:"stime"`
	//结束时间
	Etime int64 `protobuf:"varint,6,opt,name=Etime,proto3" json:"etime"`
	//主办方
	Sponsor string `protobuf:"bytes,7,opt,name=Sponsor,proto3" json:"sponsor"`
	// logo
	Logo string `protobuf:"bytes,8,opt,name=Logo,proto3" json:"logo"`
	//备注
	Dic string `protobuf:"bytes,9,opt,name=Dic,proto3" json:"dic"`
	// 0 启用  1 冻结
	Status int64 `protobuf:"varint,10,opt,name=Status,proto3" json:"status"`
	// 权重
	Rank int64 `protobuf:"varint,11,opt,name=Rank,proto3" json:"rank"`
	//是否在移动端展示: 0否1是
	IsApp int64 `protobuf:"varint,12,opt,name=IsApp,proto3" json:"is_app"`
	//赛季URL
	URL string `protobuf:"bytes,13,opt,name=URL,proto3" json:"url"`
	//比赛数据页焦点图
	DataFocus string `protobuf:"bytes,14,opt,name=DataFocus,proto3" json:"data_focus"`
	//比赛数据页焦点图url
	FocusURL string `protobuf:"bytes,15,opt,name=FocusURL,proto3" json:"focus_url"`
	//搜索赛程卡标题底图
	SearchImage string `protobuf:"bytes,16,opt,name=SearchImage,proto3" json:"search_image"`
	// LOGO全
	LogoFull string `protobuf:"bytes,17,opt,name=LogoFull,proto3" json:"logo_full"`
	//同步平台
	SyncPlatform         int64    `protobuf:"varint,18,opt,name=SyncPlatform,proto3" json:"sync_platform"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Season) Reset()         { *m = Season{} }
func (m *Season) String() string { return proto.CompactTextString(m) }
func (*Season) ProtoMessage()    {}
func (*Season) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *Season) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Season) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Season.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Season) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Season.Merge(m, src)
}
func (m *Season) XXX_Size() int {
	return m.Size()
}
func (m *Season) XXX_DiscardUnknown() {
	xxx_messageInfo_Season.DiscardUnknown(m)
}

var xxx_messageInfo_Season proto.InternalMessageInfo

func (m *Season) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Season) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Season) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Season) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *Season) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *Season) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *Season) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *Season) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Season) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *Season) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Season) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Season) GetIsApp() int64 {
	if m != nil {
		return m.IsApp
	}
	return 0
}

func (m *Season) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Season) GetDataFocus() string {
	if m != nil {
		return m.DataFocus
	}
	return ""
}

func (m *Season) GetFocusURL() string {
	if m != nil {
		return m.FocusURL
	}
	return ""
}

func (m *Season) GetSearchImage() string {
	if m != nil {
		return m.SearchImage
	}
	return ""
}

func (m *Season) GetLogoFull() string {
	if m != nil {
		return m.LogoFull
	}
	return ""
}

func (m *Season) GetSyncPlatform() int64 {
	if m != nil {
		return m.SyncPlatform
	}
	return 0
}

// 战队数据
type Team struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	//简称
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	//全称
	SubTitle string `protobuf:"bytes,3,opt,name=SubTitle,proto3" json:"sub_title"`
	//英文全称
	ETitle string `protobuf:"bytes,4,opt,name=ETitle,proto3" json:"e_title"`
	//地区
	Area string `protobuf:"bytes,5,opt,name=Area,proto3" json:"area"`
	//英文全称
	Logo string `protobuf:"bytes,7,opt,name=Logo,proto3" json:"logo"`
	//地区
	UID int64 `protobuf:"varint,6,opt,name=UID,proto3" json:"uid"`
	//成员
	Members string `protobuf:"bytes,8,opt,name=Members,proto3" json:"members"`
	//备注
	Dic string `protobuf:"bytes,9,opt,name=Dic,proto3" json:"dic"`
	//战队类型
	TeamType int64 `protobuf:"varint,10,opt,name=TeamType,proto3" json:"team_type"`
	// LOGO全
	LogoFull             string   `protobuf:"bytes,11,opt,name=LogoFull,proto3" json:"logo_full"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Team) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Team) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *Team) GetETitle() string {
	if m != nil {
		return m.ETitle
	}
	return ""
}

func (m *Team) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *Team) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Team) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *Team) GetMembers() string {
	if m != nil {
		return m.Members
	}
	return ""
}

func (m *Team) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *Team) GetTeamType() int64 {
	if m != nil {
		return m.TeamType
	}
	return 0
}

func (m *Team) GetLogoFull() string {
	if m != nil {
		return m.LogoFull
	}
	return ""
}

// 游戏数据
type Game struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	//中文全称
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	//游戏简称
	SubTitle string `protobuf:"bytes,3,opt,name=SubTitle,proto3" json:"sub_title"`
	//英文全称
	ETitle string `protobuf:"bytes,4,opt,name=ETitle,proto3" json:"e_title"`
	//平台
	Plat string `protobuf:"bytes,5,opt,name=Plat,proto3" json:"plat"`
	//游戏类型
	GameType int64 `protobuf:"varint,6,opt,name=GameType,proto3" json:"game_type"`
	//游戏 logo
	Logo string `protobuf:"bytes,7,opt,name=Logo,proto3" json:"logo"`
	//发行商
	Publisher string `protobuf:"bytes,8,opt,name=Publisher,proto3" json:"publisher"`
	//运行商
	Operations string `protobuf:"bytes,9,opt,name=Operations,proto3" json:"operations"`
	//发布时间
	PbTime int64 `protobuf:"varint,10,opt,name=PbTime,proto3" json:"pb_time"`
	//备注
	Dic string `protobuf:"bytes,11,opt,name=Dic,proto3" json:"dic"`
	//LOGO全
	LogoFull             string   `protobuf:"bytes,12,opt,name=LogoFull,proto3" json:"logo_full"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Game) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Game) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *Game) GetETitle() string {
	if m != nil {
		return m.ETitle
	}
	return ""
}

func (m *Game) GetPlat() string {
	if m != nil {
		return m.Plat
	}
	return ""
}

func (m *Game) GetGameType() int64 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *Game) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Game) GetPublisher() string {
	if m != nil {
		return m.Publisher
	}
	return ""
}

func (m *Game) GetOperations() string {
	if m != nil {
		return m.Operations
	}
	return ""
}

func (m *Game) GetPbTime() int64 {
	if m != nil {
		return m.PbTime
	}
	return 0
}

func (m *Game) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *Game) GetLogoFull() string {
	if m != nil {
		return m.LogoFull
	}
	return ""
}

type RefreshContestDataPageCacheRequest struct {
	Cids                 []int64  `protobuf:"varint,1,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshContestDataPageCacheRequest) Reset()         { *m = RefreshContestDataPageCacheRequest{} }
func (m *RefreshContestDataPageCacheRequest) String() string { return proto.CompactTextString(m) }
func (*RefreshContestDataPageCacheRequest) ProtoMessage()    {}
func (*RefreshContestDataPageCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}
func (m *RefreshContestDataPageCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshContestDataPageCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshContestDataPageCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshContestDataPageCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshContestDataPageCacheRequest.Merge(m, src)
}
func (m *RefreshContestDataPageCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefreshContestDataPageCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshContestDataPageCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshContestDataPageCacheRequest proto.InternalMessageInfo

func (m *RefreshContestDataPageCacheRequest) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

// 积分赛配置中的战队配置
type SeriesPointMatchTeamConfig struct {
	Tid                  int64    `protobuf:"varint,1,opt,name=Tid,proto3" json:"team_id"`
	Group                string   `protobuf:"bytes,2,opt,name=Group,proto3" json:"group"`
	Priority             int64    `protobuf:"varint,3,opt,name=Priority,proto3" json:"priority"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeriesPointMatchTeamConfig) Reset()         { *m = SeriesPointMatchTeamConfig{} }
func (m *SeriesPointMatchTeamConfig) String() string { return proto.CompactTextString(m) }
func (*SeriesPointMatchTeamConfig) ProtoMessage()    {}
func (*SeriesPointMatchTeamConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}
func (m *SeriesPointMatchTeamConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesPointMatchTeamConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesPointMatchTeamConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesPointMatchTeamConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesPointMatchTeamConfig.Merge(m, src)
}
func (m *SeriesPointMatchTeamConfig) XXX_Size() int {
	return m.Size()
}
func (m *SeriesPointMatchTeamConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesPointMatchTeamConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesPointMatchTeamConfig proto.InternalMessageInfo

func (m *SeriesPointMatchTeamConfig) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *SeriesPointMatchTeamConfig) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *SeriesPointMatchTeamConfig) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// 积分赛配置
type SeriesPointMatchConfig struct {
	//关联赛季ID
	SeasonId int64 `protobuf:"varint,1,opt,name=SeasonId,proto3" json:"season_id" validate:"required"`
	//关联阶段ID
	SeriesId int64 `protobuf:"varint,2,opt,name=SeriesId,proto3" json:"series_id" validate:"required"`
	//获胜后增加的积分数
	ScoreIncrWin int64 `protobuf:"varint,3,opt,name=ScoreIncrWin,proto3" json:"score_incr_win"`
	//落败后扣减的积分数
	ScoreDecrLose int64 `protobuf:"varint,4,opt,name=ScoreDecrLose,proto3" json:"score_decr_lose"`
	//获胜后增加的小分数
	SmallScoreIncrWin int64 `protobuf:"varint,5,opt,name=SmallScoreIncrWin,proto3" json:"small_score_incr_win"`
	//落败后扣减的小分数
	SmallScoreDecrLose int64 `protobuf:"varint,6,opt,name=SmallScoreDecrLose,proto3" json:"small_score_decr_lose"`
	//是否使用战队分组
	UseTeamGroup bool `protobuf:"varint,7,opt,name=UseTeamGroup,proto3" json:"use_team_group"`
	//战队分组信息
	Teams []*SeriesPointMatchTeamConfig `protobuf:"bytes,8,rep,name=Teams,proto3" json:"team_group"`
	// 每组出线名额
	GroupOutletNum       int64    `protobuf:"varint,9,opt,name=GroupOutletNum,proto3" json:"group_outlet_num"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeriesPointMatchConfig) Reset()         { *m = SeriesPointMatchConfig{} }
func (m *SeriesPointMatchConfig) String() string { return proto.CompactTextString(m) }
func (*SeriesPointMatchConfig) ProtoMessage()    {}
func (*SeriesPointMatchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{44}
}
func (m *SeriesPointMatchConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesPointMatchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesPointMatchConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesPointMatchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesPointMatchConfig.Merge(m, src)
}
func (m *SeriesPointMatchConfig) XXX_Size() int {
	return m.Size()
}
func (m *SeriesPointMatchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesPointMatchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesPointMatchConfig proto.InternalMessageInfo

func (m *SeriesPointMatchConfig) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeriesPointMatchConfig) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *SeriesPointMatchConfig) GetScoreIncrWin() int64 {
	if m != nil {
		return m.ScoreIncrWin
	}
	return 0
}

func (m *SeriesPointMatchConfig) GetScoreDecrLose() int64 {
	if m != nil {
		return m.ScoreDecrLose
	}
	return 0
}

func (m *SeriesPointMatchConfig) GetSmallScoreIncrWin() int64 {
	if m != nil {
		return m.SmallScoreIncrWin
	}
	return 0
}

func (m *SeriesPointMatchConfig) GetSmallScoreDecrLose() int64 {
	if m != nil {
		return m.SmallScoreDecrLose
	}
	return 0
}

func (m *SeriesPointMatchConfig) GetUseTeamGroup() bool {
	if m != nil {
		return m.UseTeamGroup
	}
	return false
}

func (m *SeriesPointMatchConfig) GetTeams() []*SeriesPointMatchTeamConfig {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *SeriesPointMatchConfig) GetGroupOutletNum() int64 {
	if m != nil {
		return m.GroupOutletNum
	}
	return 0
}

type GetSeriesPointMatchReq struct {
	//关联阶段ID
	SeriesId             int64    `protobuf:"varint,1,opt,name=SeriesId,proto3" json:"series_id" form:"series_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSeriesPointMatchReq) Reset()         { *m = GetSeriesPointMatchReq{} }
func (m *GetSeriesPointMatchReq) String() string { return proto.CompactTextString(m) }
func (*GetSeriesPointMatchReq) ProtoMessage()    {}
func (*GetSeriesPointMatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{45}
}
func (m *GetSeriesPointMatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeriesPointMatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeriesPointMatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeriesPointMatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeriesPointMatchReq.Merge(m, src)
}
func (m *GetSeriesPointMatchReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSeriesPointMatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeriesPointMatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeriesPointMatchReq proto.InternalMessageInfo

func (m *GetSeriesPointMatchReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type AddSeriesPointMatchConfigResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddSeriesPointMatchConfigResp) Reset()         { *m = AddSeriesPointMatchConfigResp{} }
func (m *AddSeriesPointMatchConfigResp) String() string { return proto.CompactTextString(m) }
func (*AddSeriesPointMatchConfigResp) ProtoMessage()    {}
func (*AddSeriesPointMatchConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46}
}
func (m *AddSeriesPointMatchConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSeriesPointMatchConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSeriesPointMatchConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSeriesPointMatchConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSeriesPointMatchConfigResp.Merge(m, src)
}
func (m *AddSeriesPointMatchConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *AddSeriesPointMatchConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSeriesPointMatchConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddSeriesPointMatchConfigResp proto.InternalMessageInfo

type UpdateSeriesPointMatchResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSeriesPointMatchResp) Reset()         { *m = UpdateSeriesPointMatchResp{} }
func (m *UpdateSeriesPointMatchResp) String() string { return proto.CompactTextString(m) }
func (*UpdateSeriesPointMatchResp) ProtoMessage()    {}
func (*UpdateSeriesPointMatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{47}
}
func (m *UpdateSeriesPointMatchResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSeriesPointMatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSeriesPointMatchResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSeriesPointMatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeriesPointMatchResp.Merge(m, src)
}
func (m *UpdateSeriesPointMatchResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSeriesPointMatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeriesPointMatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeriesPointMatchResp proto.InternalMessageInfo

// 用户级接口: 积分排名表中的战队信息
type SeriesPointMatchTeamListItem struct {
	TeamId               int64    `protobuf:"varint,1,opt,name=TeamId,proto3" json:"team_id"`
	Group                string   `protobuf:"bytes,2,opt,name=Group,proto3" json:"group_name"`
	TeamName             string   `protobuf:"bytes,3,opt,name=TeamName,proto3" json:"team_name"`
	IconUrl              string   `protobuf:"bytes,4,opt,name=IconUrl,proto3" json:"icon_url"`
	WinTimes             int64    `protobuf:"varint,5,opt,name=WinTimes,proto3" json:"win_times"`
	LoseTimes            int64    `protobuf:"varint,6,opt,name=LoseTimes,proto3" json:"lose_times"`
	Score                int64    `protobuf:"varint,7,opt,name=Score,proto3" json:"score"`
	SmallScore           int64    `protobuf:"varint,8,opt,name=SmallScore,proto3" json:"small_score"`
	Rank                 int64    `protobuf:"varint,9,opt,name=Rank,proto3" json:"rank"`
	LeidaTid             int64    `protobuf:"varint,10,opt,name=LeidaTid,proto3" json:"leida_tid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeriesPointMatchTeamListItem) Reset()         { *m = SeriesPointMatchTeamListItem{} }
func (m *SeriesPointMatchTeamListItem) String() string { return proto.CompactTextString(m) }
func (*SeriesPointMatchTeamListItem) ProtoMessage()    {}
func (*SeriesPointMatchTeamListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48}
}
func (m *SeriesPointMatchTeamListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesPointMatchTeamListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesPointMatchTeamListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesPointMatchTeamListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesPointMatchTeamListItem.Merge(m, src)
}
func (m *SeriesPointMatchTeamListItem) XXX_Size() int {
	return m.Size()
}
func (m *SeriesPointMatchTeamListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesPointMatchTeamListItem.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesPointMatchTeamListItem proto.InternalMessageInfo

func (m *SeriesPointMatchTeamListItem) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *SeriesPointMatchTeamListItem) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *SeriesPointMatchTeamListItem) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *SeriesPointMatchTeamListItem) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *SeriesPointMatchTeamListItem) GetWinTimes() int64 {
	if m != nil {
		return m.WinTimes
	}
	return 0
}

func (m *SeriesPointMatchTeamListItem) GetLoseTimes() int64 {
	if m != nil {
		return m.LoseTimes
	}
	return 0
}

func (m *SeriesPointMatchTeamListItem) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *SeriesPointMatchTeamListItem) GetSmallScore() int64 {
	if m != nil {
		return m.SmallScore
	}
	return 0
}

func (m *SeriesPointMatchTeamListItem) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *SeriesPointMatchTeamListItem) GetLeidaTid() int64 {
	if m != nil {
		return m.LeidaTid
	}
	return 0
}

// 用户级接口: 积分排名表中的分组战队列表
type SeriesPointMatchGroupList struct {
	Name                 string                          `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`
	GroupTeams           []*SeriesPointMatchTeamListItem `protobuf:"bytes,2,rep,name=GroupTeams,proto3" json:"teams"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SeriesPointMatchGroupList) Reset()         { *m = SeriesPointMatchGroupList{} }
func (m *SeriesPointMatchGroupList) String() string { return proto.CompactTextString(m) }
func (*SeriesPointMatchGroupList) ProtoMessage()    {}
func (*SeriesPointMatchGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{49}
}
func (m *SeriesPointMatchGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesPointMatchGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesPointMatchGroupList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesPointMatchGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesPointMatchGroupList.Merge(m, src)
}
func (m *SeriesPointMatchGroupList) XXX_Size() int {
	return m.Size()
}
func (m *SeriesPointMatchGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesPointMatchGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesPointMatchGroupList proto.InternalMessageInfo

func (m *SeriesPointMatchGroupList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SeriesPointMatchGroupList) GetGroupTeams() []*SeriesPointMatchTeamListItem {
	if m != nil {
		return m.GroupTeams
	}
	return nil
}

// 用户级接口: 积分排名表
type SeriesPointMatchInfo struct {
	//关联赛季ID
	SeasonId int64 `protobuf:"varint,1,opt,name=SeasonId,proto3" json:"season_id"`
	//关联阶段ID
	SeriesId int64 `protobuf:"varint,2,opt,name=SeriesId,proto3" json:"series_id"`
	//是否使用战队分组
	UseTeamGroup bool `protobuf:"varint,3,opt,name=UseTeamGroup,proto3" json:"use_team_group"`
	//是否开启积分计算
	UseSmallScore bool `protobuf:"varint,4,opt,name=UseSmallScore,proto3" json:"use_small_score"`
	//总的战队排名信息
	TotalTeams []*SeriesPointMatchTeamListItem `protobuf:"bytes,5,rep,name=TotalTeams,proto3" json:"total_teams"`
	//分组内的战队排名信息
	GroupTeams []*SeriesPointMatchGroupList `protobuf:"bytes,6,rep,name=GroupTeams,proto3" json:"group_teams"`
	//积分表刷新时间
	RefreshTime int64 `protobuf:"varint,7,opt,name=RefreshTime,proto3" json:"refresh_time"`
	// 每组出线名额
	GroupOutletNum       int64    `protobuf:"varint,8,opt,name=GroupOutletNum,proto3" json:"group_outlet_num"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeriesPointMatchInfo) Reset()         { *m = SeriesPointMatchInfo{} }
func (m *SeriesPointMatchInfo) String() string { return proto.CompactTextString(m) }
func (*SeriesPointMatchInfo) ProtoMessage()    {}
func (*SeriesPointMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50}
}
func (m *SeriesPointMatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesPointMatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesPointMatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesPointMatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesPointMatchInfo.Merge(m, src)
}
func (m *SeriesPointMatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *SeriesPointMatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesPointMatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesPointMatchInfo proto.InternalMessageInfo

func (m *SeriesPointMatchInfo) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeriesPointMatchInfo) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *SeriesPointMatchInfo) GetUseTeamGroup() bool {
	if m != nil {
		return m.UseTeamGroup
	}
	return false
}

func (m *SeriesPointMatchInfo) GetUseSmallScore() bool {
	if m != nil {
		return m.UseSmallScore
	}
	return false
}

func (m *SeriesPointMatchInfo) GetTotalTeams() []*SeriesPointMatchTeamListItem {
	if m != nil {
		return m.TotalTeams
	}
	return nil
}

func (m *SeriesPointMatchInfo) GetGroupTeams() []*SeriesPointMatchGroupList {
	if m != nil {
		return m.GroupTeams
	}
	return nil
}

func (m *SeriesPointMatchInfo) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *SeriesPointMatchInfo) GetGroupOutletNum() int64 {
	if m != nil {
		return m.GroupOutletNum
	}
	return 0
}

type RefreshSeriesPointMatchInfoReq struct {
	//关联阶段ID
	SeriesId             int64    `protobuf:"varint,1,opt,name=SeriesId,proto3" json:"series_id" form:"series_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSeriesPointMatchInfoReq) Reset()         { *m = RefreshSeriesPointMatchInfoReq{} }
func (m *RefreshSeriesPointMatchInfoReq) String() string { return proto.CompactTextString(m) }
func (*RefreshSeriesPointMatchInfoReq) ProtoMessage()    {}
func (*RefreshSeriesPointMatchInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{51}
}
func (m *RefreshSeriesPointMatchInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSeriesPointMatchInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSeriesPointMatchInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSeriesPointMatchInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSeriesPointMatchInfoReq.Merge(m, src)
}
func (m *RefreshSeriesPointMatchInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSeriesPointMatchInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSeriesPointMatchInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSeriesPointMatchInfoReq proto.InternalMessageInfo

func (m *RefreshSeriesPointMatchInfoReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type GetSeriesPointMatchInfoReq struct {
	//关联阶段ID
	SeriesId             int64    `protobuf:"varint,1,opt,name=SeriesId,proto3" json:"series_id" form:"series_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSeriesPointMatchInfoReq) Reset()         { *m = GetSeriesPointMatchInfoReq{} }
func (m *GetSeriesPointMatchInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetSeriesPointMatchInfoReq) ProtoMessage()    {}
func (*GetSeriesPointMatchInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{52}
}
func (m *GetSeriesPointMatchInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeriesPointMatchInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeriesPointMatchInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeriesPointMatchInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeriesPointMatchInfoReq.Merge(m, src)
}
func (m *GetSeriesPointMatchInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSeriesPointMatchInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeriesPointMatchInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeriesPointMatchInfoReq proto.InternalMessageInfo

func (m *GetSeriesPointMatchInfoReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type IsSeriesPointMatchInfoGeneratedReq struct {
	//关联阶段ID
	SeriesId             int64    `protobuf:"varint,1,opt,name=SeriesId,proto3" json:"series_id" form:"series_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsSeriesPointMatchInfoGeneratedReq) Reset()         { *m = IsSeriesPointMatchInfoGeneratedReq{} }
func (m *IsSeriesPointMatchInfoGeneratedReq) String() string { return proto.CompactTextString(m) }
func (*IsSeriesPointMatchInfoGeneratedReq) ProtoMessage()    {}
func (*IsSeriesPointMatchInfoGeneratedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{53}
}
func (m *IsSeriesPointMatchInfoGeneratedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsSeriesPointMatchInfoGeneratedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsSeriesPointMatchInfoGeneratedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsSeriesPointMatchInfoGeneratedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSeriesPointMatchInfoGeneratedReq.Merge(m, src)
}
func (m *IsSeriesPointMatchInfoGeneratedReq) XXX_Size() int {
	return m.Size()
}
func (m *IsSeriesPointMatchInfoGeneratedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSeriesPointMatchInfoGeneratedReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsSeriesPointMatchInfoGeneratedReq proto.InternalMessageInfo

func (m *IsSeriesPointMatchInfoGeneratedReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type IsSeriesPointMatchInfoGeneratedResp struct {
	//是否已生成积分表
	ViewGenerated        bool     `protobuf:"varint,7,opt,name=ViewGenerated,proto3" json:"view_generated"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsSeriesPointMatchInfoGeneratedResp) Reset()         { *m = IsSeriesPointMatchInfoGeneratedResp{} }
func (m *IsSeriesPointMatchInfoGeneratedResp) String() string { return proto.CompactTextString(m) }
func (*IsSeriesPointMatchInfoGeneratedResp) ProtoMessage()    {}
func (*IsSeriesPointMatchInfoGeneratedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{54}
}
func (m *IsSeriesPointMatchInfoGeneratedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsSeriesPointMatchInfoGeneratedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsSeriesPointMatchInfoGeneratedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsSeriesPointMatchInfoGeneratedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSeriesPointMatchInfoGeneratedResp.Merge(m, src)
}
func (m *IsSeriesPointMatchInfoGeneratedResp) XXX_Size() int {
	return m.Size()
}
func (m *IsSeriesPointMatchInfoGeneratedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSeriesPointMatchInfoGeneratedResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsSeriesPointMatchInfoGeneratedResp proto.InternalMessageInfo

func (m *IsSeriesPointMatchInfoGeneratedResp) GetViewGenerated() bool {
	if m != nil {
		return m.ViewGenerated
	}
	return false
}

type SeriesKnockoutContestConfigItem struct {
	//关联阶段ID
	ContestId            int64                              `protobuf:"varint,1,opt,name=ContestId,proto3" json:"contest_id" validate:"required"`
	Children             []*SeriesKnockoutContestConfigItem `protobuf:"bytes,2,rep,name=Children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SeriesKnockoutContestConfigItem) Reset()         { *m = SeriesKnockoutContestConfigItem{} }
func (m *SeriesKnockoutContestConfigItem) String() string { return proto.CompactTextString(m) }
func (*SeriesKnockoutContestConfigItem) ProtoMessage()    {}
func (*SeriesKnockoutContestConfigItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{55}
}
func (m *SeriesKnockoutContestConfigItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesKnockoutContestConfigItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesKnockoutContestConfigItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesKnockoutContestConfigItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesKnockoutContestConfigItem.Merge(m, src)
}
func (m *SeriesKnockoutContestConfigItem) XXX_Size() int {
	return m.Size()
}
func (m *SeriesKnockoutContestConfigItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesKnockoutContestConfigItem.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesKnockoutContestConfigItem proto.InternalMessageInfo

func (m *SeriesKnockoutContestConfigItem) GetContestId() int64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *SeriesKnockoutContestConfigItem) GetChildren() []*SeriesKnockoutContestConfigItem {
	if m != nil {
		return m.Children
	}
	return nil
}

type SeriesKnockoutContestInfoItem struct {
	//关联阶段ID
	ContestId int64 `protobuf:"varint,1,opt,name=ContestId,proto3" json:"contest_id" validate:"required"`
	//主场队伍id
	HomeTeamID int64 `protobuf:"varint,2,opt,name=HomeTeamID,proto3" json:"home_team_id"`
	//客场队伍id
	AwayTeamID int64 `protobuf:"varint,3,opt,name=AwayTeamID,proto3" json:"away_team_id"`
	//主场队伍名
	HomeTeamName string `protobuf:"bytes,4,opt,name=HomeTeamName,proto3" json:"home_team_name"`
	//客场队伍名
	AwayTeamName string `protobuf:"bytes,5,opt,name=AwayTeamName,proto3" json:"away_team_name"`
	//主场队伍Logo
	HomeTeamLogo string `protobuf:"bytes,6,opt,name=HomeTeamLogo,proto3" json:"home_team_logo"`
	//客场队伍Logo
	AwayTeamLogo string `protobuf:"bytes,7,opt,name=AwayTeamLogo,proto3" json:"away_team_logo"`
	//主场分数
	HomeTeamScore int64 `protobuf:"varint,8,opt,name=HomeTeamScore,proto3" json:"home_score"`
	//客场分数
	AwayTeamScore int64 `protobuf:"varint,9,opt,name=AwayTeamScore,proto3" json:"away_score"`
	//获胜队伍id
	WinTeamID int64 `protobuf:"varint,10,opt,name=WinTeamID,proto3" json:"win_team_id"`
	//赛程阶段名
	GameStage string `protobuf:"bytes,11,opt,name=GameStage,proto3" json:"game_stage"`
	//赛程开始时间
	StartTime int64 `protobuf:"varint,12,opt,name=StartTime,proto3" json:"start_time"`
	//赛程结束时间
	EndTime  int64                            `protobuf:"varint,13,opt,name=EndTime,proto3" json:"end_time"`
	Children []*SeriesKnockoutContestInfoItem `protobuf:"bytes,14,rep,name=Children,proto3" json:"children,omitempty"`
	//赛程冻结状态
	ContestFreeze        int64                 `protobuf:"varint,15,opt,name=ContestFreeze,proto3" json:"contest_freeze"`
	ContestInfo          *ContestCardComponent `protobuf:"bytes,16,opt,name=contestInfo,proto3" json:"contest_info"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SeriesKnockoutContestInfoItem) Reset()         { *m = SeriesKnockoutContestInfoItem{} }
func (m *SeriesKnockoutContestInfoItem) String() string { return proto.CompactTextString(m) }
func (*SeriesKnockoutContestInfoItem) ProtoMessage()    {}
func (*SeriesKnockoutContestInfoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{56}
}
func (m *SeriesKnockoutContestInfoItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesKnockoutContestInfoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesKnockoutContestInfoItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesKnockoutContestInfoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesKnockoutContestInfoItem.Merge(m, src)
}
func (m *SeriesKnockoutContestInfoItem) XXX_Size() int {
	return m.Size()
}
func (m *SeriesKnockoutContestInfoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesKnockoutContestInfoItem.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesKnockoutContestInfoItem proto.InternalMessageInfo

func (m *SeriesKnockoutContestInfoItem) GetContestId() int64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetHomeTeamID() int64 {
	if m != nil {
		return m.HomeTeamID
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetAwayTeamID() int64 {
	if m != nil {
		return m.AwayTeamID
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetHomeTeamName() string {
	if m != nil {
		return m.HomeTeamName
	}
	return ""
}

func (m *SeriesKnockoutContestInfoItem) GetAwayTeamName() string {
	if m != nil {
		return m.AwayTeamName
	}
	return ""
}

func (m *SeriesKnockoutContestInfoItem) GetHomeTeamLogo() string {
	if m != nil {
		return m.HomeTeamLogo
	}
	return ""
}

func (m *SeriesKnockoutContestInfoItem) GetAwayTeamLogo() string {
	if m != nil {
		return m.AwayTeamLogo
	}
	return ""
}

func (m *SeriesKnockoutContestInfoItem) GetHomeTeamScore() int64 {
	if m != nil {
		return m.HomeTeamScore
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetAwayTeamScore() int64 {
	if m != nil {
		return m.AwayTeamScore
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetWinTeamID() int64 {
	if m != nil {
		return m.WinTeamID
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetGameStage() string {
	if m != nil {
		return m.GameStage
	}
	return ""
}

func (m *SeriesKnockoutContestInfoItem) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetChildren() []*SeriesKnockoutContestInfoItem {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *SeriesKnockoutContestInfoItem) GetContestFreeze() int64 {
	if m != nil {
		return m.ContestFreeze
	}
	return 0
}

func (m *SeriesKnockoutContestInfoItem) GetContestInfo() *ContestCardComponent {
	if m != nil {
		return m.ContestInfo
	}
	return nil
}

// 淘汰赛配置
type SeriesKnockoutMatchConfig struct {
	//关联赛季ID
	SeasonId int64 `protobuf:"varint,1,opt,name=SeasonId,proto3" json:"season_id" validate:"required"`
	//关联阶段ID
	SeriesId             int64                              `protobuf:"varint,2,opt,name=SeriesId,proto3" json:"series_id" validate:"required"`
	Groups               []*SeriesKnockoutContestConfigItem `protobuf:"bytes,3,rep,name=Groups,proto3" json:"groups" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SeriesKnockoutMatchConfig) Reset()         { *m = SeriesKnockoutMatchConfig{} }
func (m *SeriesKnockoutMatchConfig) String() string { return proto.CompactTextString(m) }
func (*SeriesKnockoutMatchConfig) ProtoMessage()    {}
func (*SeriesKnockoutMatchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{57}
}
func (m *SeriesKnockoutMatchConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesKnockoutMatchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesKnockoutMatchConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesKnockoutMatchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesKnockoutMatchConfig.Merge(m, src)
}
func (m *SeriesKnockoutMatchConfig) XXX_Size() int {
	return m.Size()
}
func (m *SeriesKnockoutMatchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesKnockoutMatchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesKnockoutMatchConfig proto.InternalMessageInfo

func (m *SeriesKnockoutMatchConfig) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeriesKnockoutMatchConfig) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *SeriesKnockoutMatchConfig) GetGroups() []*SeriesKnockoutContestConfigItem {
	if m != nil {
		return m.Groups
	}
	return nil
}

// 淘汰赛树状图
type SeriesKnockoutMatchInfo struct {
	//关联赛季ID
	SeasonId int64 `protobuf:"varint,1,opt,name=SeasonId,proto3" json:"season_id" validate:"required"`
	//关联阶段ID
	SeriesId int64                            `protobuf:"varint,2,opt,name=SeriesId,proto3" json:"series_id" validate:"required"`
	Groups   []*SeriesKnockoutContestInfoItem `protobuf:"bytes,3,rep,name=Groups,proto3" json:"groups" validate:"required"`
	//积分表刷新时间
	RefreshTime int64 `protobuf:"varint,4,opt,name=RefreshTime,proto3" json:"refresh_time"`
	//待定队伍ID列表
	ToBeDeterminedTeamIds []int64  `protobuf:"varint,5,rep,packed,name=ToBeDeterminedTeamIds,proto3" json:"tbd_team_ids"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SeriesKnockoutMatchInfo) Reset()         { *m = SeriesKnockoutMatchInfo{} }
func (m *SeriesKnockoutMatchInfo) String() string { return proto.CompactTextString(m) }
func (*SeriesKnockoutMatchInfo) ProtoMessage()    {}
func (*SeriesKnockoutMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{58}
}
func (m *SeriesKnockoutMatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesKnockoutMatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesKnockoutMatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesKnockoutMatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesKnockoutMatchInfo.Merge(m, src)
}
func (m *SeriesKnockoutMatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *SeriesKnockoutMatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesKnockoutMatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesKnockoutMatchInfo proto.InternalMessageInfo

func (m *SeriesKnockoutMatchInfo) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *SeriesKnockoutMatchInfo) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *SeriesKnockoutMatchInfo) GetGroups() []*SeriesKnockoutContestInfoItem {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *SeriesKnockoutMatchInfo) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *SeriesKnockoutMatchInfo) GetToBeDeterminedTeamIds() []int64 {
	if m != nil {
		return m.ToBeDeterminedTeamIds
	}
	return nil
}

type GetSeriesKnockoutMatchConfigReq struct {
	//关联阶段ID
	SeriesId             int64    `protobuf:"varint,1,opt,name=SeriesId,proto3" json:"series_id" form:"series_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSeriesKnockoutMatchConfigReq) Reset()         { *m = GetSeriesKnockoutMatchConfigReq{} }
func (m *GetSeriesKnockoutMatchConfigReq) String() string { return proto.CompactTextString(m) }
func (*GetSeriesKnockoutMatchConfigReq) ProtoMessage()    {}
func (*GetSeriesKnockoutMatchConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{59}
}
func (m *GetSeriesKnockoutMatchConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeriesKnockoutMatchConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeriesKnockoutMatchConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeriesKnockoutMatchConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeriesKnockoutMatchConfigReq.Merge(m, src)
}
func (m *GetSeriesKnockoutMatchConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSeriesKnockoutMatchConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeriesKnockoutMatchConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeriesKnockoutMatchConfigReq proto.InternalMessageInfo

func (m *GetSeriesKnockoutMatchConfigReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type AddSeriesKnockoutMatchConfigResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddSeriesKnockoutMatchConfigResp) Reset()         { *m = AddSeriesKnockoutMatchConfigResp{} }
func (m *AddSeriesKnockoutMatchConfigResp) String() string { return proto.CompactTextString(m) }
func (*AddSeriesKnockoutMatchConfigResp) ProtoMessage()    {}
func (*AddSeriesKnockoutMatchConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{60}
}
func (m *AddSeriesKnockoutMatchConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSeriesKnockoutMatchConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSeriesKnockoutMatchConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSeriesKnockoutMatchConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSeriesKnockoutMatchConfigResp.Merge(m, src)
}
func (m *AddSeriesKnockoutMatchConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *AddSeriesKnockoutMatchConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSeriesKnockoutMatchConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddSeriesKnockoutMatchConfigResp proto.InternalMessageInfo

type UpdateSeriesKnockoutMatchConfigResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSeriesKnockoutMatchConfigResp) Reset()         { *m = UpdateSeriesKnockoutMatchConfigResp{} }
func (m *UpdateSeriesKnockoutMatchConfigResp) String() string { return proto.CompactTextString(m) }
func (*UpdateSeriesKnockoutMatchConfigResp) ProtoMessage()    {}
func (*UpdateSeriesKnockoutMatchConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{61}
}
func (m *UpdateSeriesKnockoutMatchConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSeriesKnockoutMatchConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSeriesKnockoutMatchConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSeriesKnockoutMatchConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeriesKnockoutMatchConfigResp.Merge(m, src)
}
func (m *UpdateSeriesKnockoutMatchConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSeriesKnockoutMatchConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeriesKnockoutMatchConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeriesKnockoutMatchConfigResp proto.InternalMessageInfo

type GetSeriesKnockoutMatchInfoReq struct {
	//关联阶段ID
	SeriesId             int64    `protobuf:"varint,1,opt,name=SeriesId,proto3" json:"series_id" form:"series_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSeriesKnockoutMatchInfoReq) Reset()         { *m = GetSeriesKnockoutMatchInfoReq{} }
func (m *GetSeriesKnockoutMatchInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetSeriesKnockoutMatchInfoReq) ProtoMessage()    {}
func (*GetSeriesKnockoutMatchInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{62}
}
func (m *GetSeriesKnockoutMatchInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeriesKnockoutMatchInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeriesKnockoutMatchInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeriesKnockoutMatchInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeriesKnockoutMatchInfoReq.Merge(m, src)
}
func (m *GetSeriesKnockoutMatchInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSeriesKnockoutMatchInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeriesKnockoutMatchInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeriesKnockoutMatchInfoReq proto.InternalMessageInfo

func (m *GetSeriesKnockoutMatchInfoReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type RefreshSeriesKnockoutMatchInfoReq struct {
	//关联阶段ID
	SeriesId             int64    `protobuf:"varint,1,opt,name=SeriesId,proto3" json:"series_id" form:"series_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSeriesKnockoutMatchInfoReq) Reset()         { *m = RefreshSeriesKnockoutMatchInfoReq{} }
func (m *RefreshSeriesKnockoutMatchInfoReq) String() string { return proto.CompactTextString(m) }
func (*RefreshSeriesKnockoutMatchInfoReq) ProtoMessage()    {}
func (*RefreshSeriesKnockoutMatchInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{63}
}
func (m *RefreshSeriesKnockoutMatchInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSeriesKnockoutMatchInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSeriesKnockoutMatchInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSeriesKnockoutMatchInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSeriesKnockoutMatchInfoReq.Merge(m, src)
}
func (m *RefreshSeriesKnockoutMatchInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSeriesKnockoutMatchInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSeriesKnockoutMatchInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSeriesKnockoutMatchInfoReq proto.InternalMessageInfo

func (m *RefreshSeriesKnockoutMatchInfoReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type IsSeriesKnockoutMatchInfoGeneratedReq struct {
	//关联阶段ID
	SeriesId             int64    `protobuf:"varint,1,opt,name=SeriesId,proto3" json:"series_id" form:"series_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsSeriesKnockoutMatchInfoGeneratedReq) Reset()         { *m = IsSeriesKnockoutMatchInfoGeneratedReq{} }
func (m *IsSeriesKnockoutMatchInfoGeneratedReq) String() string { return proto.CompactTextString(m) }
func (*IsSeriesKnockoutMatchInfoGeneratedReq) ProtoMessage()    {}
func (*IsSeriesKnockoutMatchInfoGeneratedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{64}
}
func (m *IsSeriesKnockoutMatchInfoGeneratedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsSeriesKnockoutMatchInfoGeneratedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsSeriesKnockoutMatchInfoGeneratedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsSeriesKnockoutMatchInfoGeneratedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSeriesKnockoutMatchInfoGeneratedReq.Merge(m, src)
}
func (m *IsSeriesKnockoutMatchInfoGeneratedReq) XXX_Size() int {
	return m.Size()
}
func (m *IsSeriesKnockoutMatchInfoGeneratedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSeriesKnockoutMatchInfoGeneratedReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsSeriesKnockoutMatchInfoGeneratedReq proto.InternalMessageInfo

func (m *IsSeriesKnockoutMatchInfoGeneratedReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type IsSeriesKnockoutMatchInfoGeneratedResp struct {
	//是否已生成积分表
	ViewGenerated        bool     `protobuf:"varint,7,opt,name=ViewGenerated,proto3" json:"view_generated"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsSeriesKnockoutMatchInfoGeneratedResp) Reset() {
	*m = IsSeriesKnockoutMatchInfoGeneratedResp{}
}
func (m *IsSeriesKnockoutMatchInfoGeneratedResp) String() string { return proto.CompactTextString(m) }
func (*IsSeriesKnockoutMatchInfoGeneratedResp) ProtoMessage()    {}
func (*IsSeriesKnockoutMatchInfoGeneratedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{65}
}
func (m *IsSeriesKnockoutMatchInfoGeneratedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsSeriesKnockoutMatchInfoGeneratedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsSeriesKnockoutMatchInfoGeneratedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsSeriesKnockoutMatchInfoGeneratedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsSeriesKnockoutMatchInfoGeneratedResp.Merge(m, src)
}
func (m *IsSeriesKnockoutMatchInfoGeneratedResp) XXX_Size() int {
	return m.Size()
}
func (m *IsSeriesKnockoutMatchInfoGeneratedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsSeriesKnockoutMatchInfoGeneratedResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsSeriesKnockoutMatchInfoGeneratedResp proto.InternalMessageInfo

func (m *IsSeriesKnockoutMatchInfoGeneratedResp) GetViewGenerated() bool {
	if m != nil {
		return m.ViewGenerated
	}
	return false
}

// 视频库联动筛选请求
type VideoListFilterRequest struct {
	GameId               int64    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	MatchId              int64    `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	YearId               int64    `protobuf:"varint,3,opt,name=year_id,json=yearId,proto3" json:"year_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoListFilterRequest) Reset()         { *m = VideoListFilterRequest{} }
func (m *VideoListFilterRequest) String() string { return proto.CompactTextString(m) }
func (*VideoListFilterRequest) ProtoMessage()    {}
func (*VideoListFilterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{66}
}
func (m *VideoListFilterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoListFilterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoListFilterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoListFilterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoListFilterRequest.Merge(m, src)
}
func (m *VideoListFilterRequest) XXX_Size() int {
	return m.Size()
}
func (m *VideoListFilterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoListFilterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VideoListFilterRequest proto.InternalMessageInfo

func (m *VideoListFilterRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *VideoListFilterRequest) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *VideoListFilterRequest) GetYearId() int64 {
	if m != nil {
		return m.YearId
	}
	return 0
}

// 视频库联动筛选返回结果
type VideoListFilterReply struct {
	Games                *VideoListFilterItemList `protobuf:"bytes,1,opt,name=games,proto3" json:"games"`
	Matchs               *VideoListFilterItemList `protobuf:"bytes,2,opt,name=matchs,proto3" json:"matchs"`
	Years                *VideoListFilterItemList `protobuf:"bytes,3,opt,name=years,proto3" json:"years"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *VideoListFilterReply) Reset()         { *m = VideoListFilterReply{} }
func (m *VideoListFilterReply) String() string { return proto.CompactTextString(m) }
func (*VideoListFilterReply) ProtoMessage()    {}
func (*VideoListFilterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{67}
}
func (m *VideoListFilterReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoListFilterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoListFilterReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoListFilterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoListFilterReply.Merge(m, src)
}
func (m *VideoListFilterReply) XXX_Size() int {
	return m.Size()
}
func (m *VideoListFilterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoListFilterReply.DiscardUnknown(m)
}

var xxx_messageInfo_VideoListFilterReply proto.InternalMessageInfo

func (m *VideoListFilterReply) GetGames() *VideoListFilterItemList {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *VideoListFilterReply) GetMatchs() *VideoListFilterItemList {
	if m != nil {
		return m.Matchs
	}
	return nil
}

func (m *VideoListFilterReply) GetYears() *VideoListFilterItemList {
	if m != nil {
		return m.Years
	}
	return nil
}

// 视频库联动筛选数据
type VideoListFilterItem struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 全称
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	// 简称
	SubTitle             string   `protobuf:"bytes,3,opt,name=SubTitle,proto3" json:"sub_title"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoListFilterItem) Reset()         { *m = VideoListFilterItem{} }
func (m *VideoListFilterItem) String() string { return proto.CompactTextString(m) }
func (*VideoListFilterItem) ProtoMessage()    {}
func (*VideoListFilterItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{68}
}
func (m *VideoListFilterItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoListFilterItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoListFilterItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoListFilterItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoListFilterItem.Merge(m, src)
}
func (m *VideoListFilterItem) XXX_Size() int {
	return m.Size()
}
func (m *VideoListFilterItem) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoListFilterItem.DiscardUnknown(m)
}

var xxx_messageInfo_VideoListFilterItem proto.InternalMessageInfo

func (m *VideoListFilterItem) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *VideoListFilterItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *VideoListFilterItem) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

type VideoListFilterItemList struct {
	List                 []*VideoListFilterItem `protobuf:"bytes,1,rep,name=List,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VideoListFilterItemList) Reset()         { *m = VideoListFilterItemList{} }
func (m *VideoListFilterItemList) String() string { return proto.CompactTextString(m) }
func (*VideoListFilterItemList) ProtoMessage()    {}
func (*VideoListFilterItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{69}
}
func (m *VideoListFilterItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoListFilterItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoListFilterItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoListFilterItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoListFilterItemList.Merge(m, src)
}
func (m *VideoListFilterItemList) XXX_Size() int {
	return m.Size()
}
func (m *VideoListFilterItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoListFilterItemList.DiscardUnknown(m)
}

var xxx_messageInfo_VideoListFilterItemList proto.InternalMessageInfo

func (m *VideoListFilterItemList) GetList() []*VideoListFilterItem {
	if m != nil {
		return m.List
	}
	return nil
}

type ClearTopicVideoListRequest struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearTopicVideoListRequest) Reset()         { *m = ClearTopicVideoListRequest{} }
func (m *ClearTopicVideoListRequest) String() string { return proto.CompactTextString(m) }
func (*ClearTopicVideoListRequest) ProtoMessage()    {}
func (*ClearTopicVideoListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{70}
}
func (m *ClearTopicVideoListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearTopicVideoListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearTopicVideoListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearTopicVideoListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearTopicVideoListRequest.Merge(m, src)
}
func (m *ClearTopicVideoListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClearTopicVideoListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearTopicVideoListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearTopicVideoListRequest proto.InternalMessageInfo

func (m *ClearTopicVideoListRequest) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

// 视频库联动筛选请求
type EsTopicVideoListRequest struct {
	GameId               int64    `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	MatchId              int64    `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	YearId               int64    `protobuf:"varint,3,opt,name=year_id,json=yearId,proto3" json:"year_id,omitempty"`
	Pn                   int64    `protobuf:"varint,4,opt,name=pn,proto3" json:"pn,omitempty" validate:"min=1"`
	Ps                   int64    `protobuf:"varint,5,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=50"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EsTopicVideoListRequest) Reset()         { *m = EsTopicVideoListRequest{} }
func (m *EsTopicVideoListRequest) String() string { return proto.CompactTextString(m) }
func (*EsTopicVideoListRequest) ProtoMessage()    {}
func (*EsTopicVideoListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{71}
}
func (m *EsTopicVideoListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EsTopicVideoListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EsTopicVideoListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EsTopicVideoListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EsTopicVideoListRequest.Merge(m, src)
}
func (m *EsTopicVideoListRequest) XXX_Size() int {
	return m.Size()
}
func (m *EsTopicVideoListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EsTopicVideoListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EsTopicVideoListRequest proto.InternalMessageInfo

func (m *EsTopicVideoListRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *EsTopicVideoListRequest) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *EsTopicVideoListRequest) GetYearId() int64 {
	if m != nil {
		return m.YearId
	}
	return 0
}

func (m *EsTopicVideoListRequest) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *EsTopicVideoListRequest) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type EsTopicVideoListReply struct {
	SearchAids           []int64    `protobuf:"varint,1,rep,packed,name=SearchAids,proto3" json:"search_list"`
	Page                 *ModelPage `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EsTopicVideoListReply) Reset()         { *m = EsTopicVideoListReply{} }
func (m *EsTopicVideoListReply) String() string { return proto.CompactTextString(m) }
func (*EsTopicVideoListReply) ProtoMessage()    {}
func (*EsTopicVideoListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{72}
}
func (m *EsTopicVideoListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EsTopicVideoListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EsTopicVideoListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EsTopicVideoListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EsTopicVideoListReply.Merge(m, src)
}
func (m *EsTopicVideoListReply) XXX_Size() int {
	return m.Size()
}
func (m *EsTopicVideoListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EsTopicVideoListReply.DiscardUnknown(m)
}

var xxx_messageInfo_EsTopicVideoListReply proto.InternalMessageInfo

func (m *EsTopicVideoListReply) GetSearchAids() []int64 {
	if m != nil {
		return m.SearchAids
	}
	return nil
}

func (m *EsTopicVideoListReply) GetPage() *ModelPage {
	if m != nil {
		return m.Page
	}
	return nil
}

func init() {
	proto.RegisterEnum("esports.service.v1.ClearCacheType", ClearCacheType_name, ClearCacheType_value)
	proto.RegisterType((*RefreshLolDataRequest)(nil), "esports.service.v1.RefreshLolDataRequest")
	proto.RegisterType((*ClearMatchSeasonsCacheRequest)(nil), "esports.service.v1.ClearMatchSeasonsCacheRequest")
	proto.RegisterType((*ClearComponentContestCacheRequest)(nil), "esports.service.v1.ClearComponentContestCacheRequest")
	proto.RegisterType((*ComponentSeasonContestListRequest)(nil), "esports.service.v1.ComponentSeasonContestListRequest")
	proto.RegisterType((*ComponentSeasonContestListReply)(nil), "esports.service.v1.ComponentSeasonContestListReply")
	proto.RegisterMapType((map[int64]*ContestCardComponentList)(nil), "esports.service.v1.ComponentSeasonContestListReply.ComponentContestListEntry")
	proto.RegisterType((*ContestCardComponentList)(nil), "esports.service.v1.ContestCardComponentList")
	proto.RegisterType((*ContestCardComponent)(nil), "esports.service.v1.ContestCardComponent")
	proto.RegisterType((*ComponentSeasonContestBattleRequest)(nil), "esports.service.v1.ComponentSeasonContestBattleRequest")
	proto.RegisterType((*ComponentSeasonContestBattleReply)(nil), "esports.service.v1.ComponentSeasonContestBattleReply")
	proto.RegisterMapType((map[int64]*ContestBattleCardComponentList)(nil), "esports.service.v1.ComponentSeasonContestBattleReply.ComponentContestBattleEntry")
	proto.RegisterType((*ContestBattleCardComponent)(nil), "esports.service.v1.ContestBattleCardComponent")
	proto.RegisterType((*ContestBattleCardComponentList)(nil), "esports.service.v1.ContestBattleCardComponentList")
	proto.RegisterType((*Team4FrontendComponent)(nil), "esports.service.v1.Team4FrontendComponent")
	proto.RegisterType((*ContestSeriesComponent)(nil), "esports.service.v1.ContestSeriesComponent")
	proto.RegisterType((*UpdateSeasonGuessVersionRequest)(nil), "esports.service.v1.UpdateSeasonGuessVersionRequest")
	proto.RegisterType((*UpdateSeasonGuessVersionReply)(nil), "esports.service.v1.UpdateSeasonGuessVersionReply")
	proto.RegisterType((*ClearUserGuessCacheRequest)(nil), "esports.service.v1.ClearUserGuessCacheRequest")
	proto.RegisterType((*ClearUserGuessCacheReply)(nil), "esports.service.v1.ClearUserGuessCacheReply")
	proto.RegisterType((*ClearCacheRequest)(nil), "esports.service.v1.ClearCacheRequest")
	proto.RegisterType((*ClearCacheReply)(nil), "esports.service.v1.ClearCacheReply")
	proto.RegisterType((*FavedUsersReply)(nil), "esports.service.v1.FavedUsersReply")
	proto.RegisterType((*ModelPage)(nil), "esports.service.v1.ModelPage")
	proto.RegisterType((*User)(nil), "esports.service.v1.User")
	proto.RegisterType((*NoArgRequest)(nil), "esports.service.v1.NoArgRequest")
	proto.RegisterType((*FavRequest)(nil), "esports.service.v1.FavRequest")
	proto.RegisterType((*LiveContestsRequest)(nil), "esports.service.v1.LiveContestsRequest")
	proto.RegisterType((*OttContestsRequest)(nil), "esports.service.v1.OttContestsRequest")
	proto.RegisterType((*SubContestsRequest)(nil), "esports.service.v1.SubContestsRequest")
	proto.RegisterType((*StimeContestsRequest)(nil), "esports.service.v1.StimeContestsRequest")
	proto.RegisterType((*SubContestUsersV2Request)(nil), "esports.service.v1.SubContestUsersV2Request")
	proto.RegisterType((*SubContestUsersV2Reply)(nil), "esports.service.v1.SubContestUsersV2Reply")
	proto.RegisterType((*ContestListRequest)(nil), "esports.service.v1.ContestListRequest")
	proto.RegisterType((*ContestListReply)(nil), "esports.service.v1.ContestListReply")
	proto.RegisterType((*LiveContestsReply)(nil), "esports.service.v1.LiveContestsReply")
	proto.RegisterType((*OttContestsReply)(nil), "esports.service.v1.OttContestsReply")
	proto.RegisterType((*GamesRequest)(nil), "esports.service.v1.GamesRequest")
	proto.RegisterType((*GamesReply)(nil), "esports.service.v1.GamesReply")
	proto.RegisterType((*GameMapRequest)(nil), "esports.service.v1.GameMapRequest")
	proto.RegisterType((*GameMapReply)(nil), "esports.service.v1.GameMapReply")
	proto.RegisterMapType((map[int64]*Game)(nil), "esports.service.v1.GameMapReply.GamesEntry")
	proto.RegisterType((*Contest)(nil), "esports.service.v1.Contest")
	proto.RegisterType((*Season)(nil), "esports.service.v1.Season")
	proto.RegisterType((*Team)(nil), "esports.service.v1.Team")
	proto.RegisterType((*Game)(nil), "esports.service.v1.Game")
	proto.RegisterType((*RefreshContestDataPageCacheRequest)(nil), "esports.service.v1.RefreshContestDataPageCacheRequest")
	proto.RegisterType((*SeriesPointMatchTeamConfig)(nil), "esports.service.v1.SeriesPointMatchTeamConfig")
	proto.RegisterType((*SeriesPointMatchConfig)(nil), "esports.service.v1.SeriesPointMatchConfig")
	proto.RegisterType((*GetSeriesPointMatchReq)(nil), "esports.service.v1.GetSeriesPointMatchReq")
	proto.RegisterType((*AddSeriesPointMatchConfigResp)(nil), "esports.service.v1.AddSeriesPointMatchConfigResp")
	proto.RegisterType((*UpdateSeriesPointMatchResp)(nil), "esports.service.v1.UpdateSeriesPointMatchResp")
	proto.RegisterType((*SeriesPointMatchTeamListItem)(nil), "esports.service.v1.SeriesPointMatchTeamListItem")
	proto.RegisterType((*SeriesPointMatchGroupList)(nil), "esports.service.v1.SeriesPointMatchGroupList")
	proto.RegisterType((*SeriesPointMatchInfo)(nil), "esports.service.v1.SeriesPointMatchInfo")
	proto.RegisterType((*RefreshSeriesPointMatchInfoReq)(nil), "esports.service.v1.RefreshSeriesPointMatchInfoReq")
	proto.RegisterType((*GetSeriesPointMatchInfoReq)(nil), "esports.service.v1.GetSeriesPointMatchInfoReq")
	proto.RegisterType((*IsSeriesPointMatchInfoGeneratedReq)(nil), "esports.service.v1.IsSeriesPointMatchInfoGeneratedReq")
	proto.RegisterType((*IsSeriesPointMatchInfoGeneratedResp)(nil), "esports.service.v1.IsSeriesPointMatchInfoGeneratedResp")
	proto.RegisterType((*SeriesKnockoutContestConfigItem)(nil), "esports.service.v1.SeriesKnockoutContestConfigItem")
	proto.RegisterType((*SeriesKnockoutContestInfoItem)(nil), "esports.service.v1.SeriesKnockoutContestInfoItem")
	proto.RegisterType((*SeriesKnockoutMatchConfig)(nil), "esports.service.v1.SeriesKnockoutMatchConfig")
	proto.RegisterType((*SeriesKnockoutMatchInfo)(nil), "esports.service.v1.SeriesKnockoutMatchInfo")
	proto.RegisterType((*GetSeriesKnockoutMatchConfigReq)(nil), "esports.service.v1.GetSeriesKnockoutMatchConfigReq")
	proto.RegisterType((*AddSeriesKnockoutMatchConfigResp)(nil), "esports.service.v1.AddSeriesKnockoutMatchConfigResp")
	proto.RegisterType((*UpdateSeriesKnockoutMatchConfigResp)(nil), "esports.service.v1.UpdateSeriesKnockoutMatchConfigResp")
	proto.RegisterType((*GetSeriesKnockoutMatchInfoReq)(nil), "esports.service.v1.GetSeriesKnockoutMatchInfoReq")
	proto.RegisterType((*RefreshSeriesKnockoutMatchInfoReq)(nil), "esports.service.v1.RefreshSeriesKnockoutMatchInfoReq")
	proto.RegisterType((*IsSeriesKnockoutMatchInfoGeneratedReq)(nil), "esports.service.v1.IsSeriesKnockoutMatchInfoGeneratedReq")
	proto.RegisterType((*IsSeriesKnockoutMatchInfoGeneratedResp)(nil), "esports.service.v1.IsSeriesKnockoutMatchInfoGeneratedResp")
	proto.RegisterType((*VideoListFilterRequest)(nil), "esports.service.v1.VideoListFilterRequest")
	proto.RegisterType((*VideoListFilterReply)(nil), "esports.service.v1.VideoListFilterReply")
	proto.RegisterType((*VideoListFilterItem)(nil), "esports.service.v1.VideoListFilterItem")
	proto.RegisterType((*VideoListFilterItemList)(nil), "esports.service.v1.VideoListFilterItemList")
	proto.RegisterType((*ClearTopicVideoListRequest)(nil), "esports.service.v1.ClearTopicVideoListRequest")
	proto.RegisterType((*EsTopicVideoListRequest)(nil), "esports.service.v1.EsTopicVideoListRequest")
	proto.RegisterType((*EsTopicVideoListReply)(nil), "esports.service.v1.EsTopicVideoListReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 5063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3c, 0x49, 0x73, 0x1c, 0x59,
	0x5a, 0x53, 0x8b, 0xaa, 0x54, 0x9f, 0x64, 0x49, 0x7e, 0x96, 0xe5, 0x52, 0x59, 0x76, 0xa9, 0xd3,
	0xcb, 0xd8, 0xdd, 0xb6, 0xda, 0x52, 0xb7, 0xc7, 0xdd, 0xcd, 0xcc, 0x04, 0x5a, 0xdb, 0x45, 0xcb,
	0xcb, 0xa4, 0xe4, 0xee, 0x09, 0x06, 0xba, 0x26, 0x95, 0xf9, 0x2c, 0xe7, 0xa8, 0x2a, 0xb3, 0x3a,
	0x33, 0x4b, 0x42, 0x9e, 0x81, 0x03, 0xc3, 0x32, 0x5c, 0x06, 0x02, 0x26, 0x80, 0x08, 0x38, 0xc1,
	0x85, 0xc3, 0x04, 0xc1, 0x85, 0x08, 0xe6, 0xc2, 0x91, 0xe0, 0x06, 0x27, 0x22, 0xb8, 0x54, 0x10,
	0xcd, 0x4d, 0x07, 0x0e, 0xfe, 0x01, 0x04, 0xf1, 0x7d, 0xef, 0xe5, 0x56, 0x95, 0x99, 0x55, 0x52,
	0xb7, 0x27, 0xfa, 0xc0, 0xa9, 0x32, 0xdf, 0xb7, 0xbd, 0xe5, 0xdb, 0xde, 0xf7, 0x5e, 0x16, 0x54,
	0xb4, 0x8e, 0xb9, 0xd4, 0x71, 0x6c, 0xcf, 0x66, 0x8c, 0xbb, 0x1d, 0xdb, 0xf1, 0xdc, 0x25, 0x97,
	0x3b, 0x87, 0xa6, 0xce, 0x97, 0x0e, 0x97, 0x6b, 0x77, 0xf7, 0x4d, 0xef, 0x45, 0x77, 0x6f, 0x49,
	0xb7, 0xdb, 0x6f, 0xef, 0xdb, 0xfb, 0xf6, 0xdb, 0x84, 0xba, 0xd7, 0x7d, 0x4e, 0x6f, 0xf4, 0x42,
	0x4f, 0x82, 0x85, 0xf2, 0x08, 0x2e, 0xaa, 0xfc, 0xb9, 0xc3, 0xdd, 0x17, 0xdb, 0x76, 0x6b, 0x43,
	0xf3, 0x34, 0x95, 0x7f, 0xd6, 0xe5, 0xae, 0xc7, 0xde, 0x85, 0x4a, 0x8b, 0x9b, 0x86, 0xd6, 0x74,
	0x4d, 0xa3, 0x9a, 0x5b, 0xcc, 0xdd, 0x2a, 0xac, 0x5d, 0x7a, 0xd5, 0xab, 0x5f, 0x38, 0xd4, 0x5a,
	0xa6, 0xa1, 0x79, 0xfc, 0x03, 0xc5, 0xe1, 0x9f, 0x75, 0x4d, 0x87, 0x1b, 0x8a, 0x3a, 0x4e, 0x98,
	0x3b, 0xa6, 0xa1, 0x58, 0x70, 0x65, 0xbd, 0xc5, 0x35, 0xe7, 0x91, 0xe6, 0xe9, 0x2f, 0x76, 0xb8,
	0xe6, 0xda, 0x96, 0xbb, 0xae, 0xe9, 0x2f, 0xb8, 0xcf, 0x76, 0x19, 0xca, 0x04, 0x6b, 0x6c, 0x0c,
	0x63, 0xea, 0xe3, 0xb1, 0x1a, 0x8c, 0x0b, 0x4e, 0x8d, 0x8d, 0x6a, 0x1e, 0x69, 0xd4, 0xe0, 0x5d,
	0xf9, 0x8f, 0x1c, 0xbc, 0x41, 0x02, 0xd7, 0xed, 0x76, 0xc7, 0xb6, 0xb8, 0xe5, 0xad, 0xdb, 0x96,
	0xc7, 0x5d, 0x2f, 0x26, 0xf4, 0x9d, 0x08, 0x87, 0x61, 0x43, 0xf1, 0x11, 0xd9, 0x02, 0x54, 0x24,
	0xaf, 0x40, 0x6e, 0xd8, 0x20, 0x3a, 0xe5, 0x98, 0xdc, 0x6d, 0x6c, 0x54, 0x0b, 0x7e, 0xa7, 0xc4,
	0x3b, 0x5b, 0x84, 0x09, 0x89, 0xf8, 0xd0, 0x6e, 0xf3, 0x6a, 0x91, 0xc0, 0xd1, 0xa6, 0x08, 0xc6,
	0xea, 0x91, 0x76, 0x5c, 0x1d, 0x8b, 0x61, 0x60, 0x93, 0x72, 0x1f, 0xde, 0x08, 0x86, 0x24, 0xba,
	0x24, 0xa1, 0xdb, 0xa6, 0xeb, 0xf9, 0xe3, 0x9a, 0x81, 0x42, 0xb0, 0x3a, 0x2a, 0x3e, 0x2a, 0x7f,
	0x9b, 0x87, 0x7a, 0x16, 0x5d, 0xa7, 0x75, 0xcc, 0x7e, 0x92, 0x83, 0x59, 0xbd, 0x6f, 0xba, 0x10,
	0x5a, 0xcd, 0x2d, 0x16, 0x6e, 0x4d, 0xac, 0x3c, 0x5a, 0x1a, 0xd4, 0xaa, 0xa5, 0x21, 0x3c, 0x97,
	0xd6, 0x13, 0xf8, 0x6d, 0x5a, 0x9e, 0x73, 0xbc, 0x36, 0x76, 0xd2, 0xab, 0xe7, 0xee, 0xaa, 0x89,
	0x12, 0x6b, 0x5d, 0x98, 0x4f, 0xa5, 0xc4, 0xd1, 0x1d, 0xf0, 0x63, 0x7f, 0x74, 0x07, 0xfc, 0x98,
	0xad, 0xc1, 0xd8, 0xa1, 0xd6, 0xea, 0x72, 0x5a, 0x8e, 0x89, 0x95, 0x3b, 0xc9, 0x3d, 0x95, 0xeb,
	0xef, 0x18, 0x01, 0x6b, 0xea, 0xa7, 0x20, 0xfd, 0x20, 0xff, 0x5e, 0x4e, 0xd9, 0x83, 0x6a, 0x1a,
	0x1a, 0xdb, 0x82, 0x62, 0x64, 0x32, 0x6e, 0x8d, 0x2a, 0x62, 0x6d, 0xfc, 0xa4, 0x57, 0x2f, 0xb6,
	0x50, 0x10, 0xd1, 0x2b, 0xff, 0x54, 0x81, 0xd9, 0x24, 0x44, 0x36, 0x07, 0xf9, 0x40, 0x0d, 0x4b,
	0x27, 0xbd, 0x7a, 0xde, 0x34, 0xd4, 0x7c, 0x63, 0x83, 0xdd, 0x81, 0xca, 0x8e, 0xa7, 0x39, 0xde,
	0xae, 0xd9, 0x16, 0x03, 0x2c, 0xac, 0x4d, 0x9d, 0xf4, 0xea, 0xe0, 0x62, 0x63, 0xd3, 0x33, 0xdb,
	0x5c, 0x0d, 0x11, 0xd8, 0x4d, 0x28, 0x6f, 0x5a, 0x06, 0xe1, 0x92, 0xfa, 0xad, 0x4d, 0x9e, 0xf4,
	0xea, 0xe3, 0xdc, 0x32, 0x04, 0xa6, 0x0f, 0x64, 0x75, 0x18, 0xdb, 0x35, 0xbd, 0x96, 0xd0, 0xc2,
	0xca, 0x5a, 0xe5, 0xa4, 0x57, 0x1f, 0xf3, 0xb0, 0x41, 0x15, 0xed, 0x4c, 0x81, 0xd2, 0x8e, 0xa7,
	0x79, 0x5d, 0x97, 0xb4, 0xb0, 0xb2, 0x06, 0x27, 0xbd, 0x7a, 0xc9, 0xa5, 0x16, 0x55, 0x42, 0xd8,
	0x7b, 0x70, 0x6e, 0xdd, 0x6e, 0xb5, 0xb8, 0xee, 0x99, 0xb6, 0xf5, 0x4c, 0xdd, 0xae, 0x96, 0x08,
	0x95, 0x9d, 0xf4, 0xea, 0x53, 0x7a, 0x00, 0x68, 0x76, 0x9d, 0x96, 0x1a, 0x47, 0x64, 0xb7, 0x61,
	0x7c, 0xdb, 0x3c, 0xe4, 0xaa, 0x6d, 0xb7, 0xab, 0x65, 0xea, 0xe7, 0xb9, 0x93, 0x5e, 0xbd, 0xd2,
	0x32, 0x0f, 0x79, 0xd3, 0xb1, 0xed, 0xb6, 0x1a, 0x80, 0x11, 0xf5, 0x69, 0x4b, 0x3b, 0x5e, 0xd3,
	0xf4, 0x83, 0xea, 0x38, 0xf1, 0x27, 0xd4, 0x4e, 0x4b, 0x3b, 0x6e, 0xee, 0x69, 0xfa, 0x81, 0x1a,
	0x80, 0x11, 0x15, 0x5d, 0xd5, 0xee, 0x71, 0x87, 0x57, 0x2b, 0x21, 0x57, 0x43, 0xf3, 0xb4, 0xa6,
	0x77, 0xdc, 0xe1, 0x6a, 0x00, 0xc6, 0x79, 0xf2, 0xfd, 0x0d, 0x84, 0xf3, 0xd4, 0xc6, 0xa6, 0xa6,
	0x69, 0x84, 0x4e, 0xe6, 0x76, 0xc4, 0x45, 0x4c, 0x84, 0x2c, 0x5d, 0x6a, 0x43, 0xcc, 0xd0, 0x31,
	0xdc, 0x81, 0xca, 0x87, 0x5d, 0xee, 0xba, 0x24, 0x7e, 0x32, 0x5c, 0xa8, 0x7d, 0x6c, 0x14, 0xf2,
	0x43, 0x04, 0xc1, 0x58, 0x3a, 0x8a, 0x73, 0x51, 0xc6, 0xd8, 0x26, 0x19, 0x07, 0x7e, 0x63, 0xac,
	0xe1, 0xee, 0x74, 0xf7, 0xaa, 0x53, 0x84, 0x47, 0x2b, 0x61, 0xba, 0x4d, 0xb7, 0xbb, 0xa7, 0x0a,
	0x00, 0x8e, 0xa6, 0xe1, 0x12, 0xef, 0xea, 0x74, 0x38, 0x1a, 0xd3, 0x6d, 0x92, 0x6c, 0xd5, 0x07,
	0xb2, 0x87, 0x50, 0x24, 0xd7, 0x33, 0x43, 0x76, 0xf2, 0x66, 0x92, 0x12, 0xef, 0x72, 0xad, 0xfd,
	0xee, 0x96, 0x83, 0x1a, 0x6a, 0xf5, 0xab, 0xf1, 0x0b, 0xbb, 0xcd, 0x55, 0xe2, 0x80, 0x9c, 0xc8,
	0x45, 0x9d, 0x3f, 0x1b, 0x27, 0xed, 0x48, 0x3b, 0x56, 0x89, 0x03, 0x7b, 0x0c, 0x25, 0x31, 0xd2,
	0x2a, 0x4b, 0xe7, 0x25, 0x2d, 0x46, 0x20, 0x86, 0xbc, 0x84, 0x52, 0x52, 0xa3, 0x2a, 0xb9, 0x08,
	0xa5, 0x14, 0xd8, 0x42, 0x7f, 0x2f, 0xd0, 0x8c, 0x48, 0xa5, 0x24, 0x40, 0x53, 0xea, 0x71, 0x1c,
	0x31, 0x42, 0xb9, 0xe5, 0x70, 0xfe, 0x92, 0x57, 0x67, 0x07, 0x29, 0x9f, 0x13, 0x44, 0x8d, 0x23,
	0xd2, 0xd2, 0x6b, 0x6d, 0x8e, 0x7c, 0x78, 0xf5, 0x62, 0x64, 0xe9, 0xb5, 0x36, 0x27, 0x61, 0xb8,
	0xf4, 0x3e, 0x42, 0xa0, 0x28, 0x3b, 0x2f, 0xec, 0xa3, 0xea, 0x5c, 0xbf, 0xa2, 0xb8, 0x2f, 0xec,
	0x23, 0x35, 0x44, 0x40, 0x6c, 0x9c, 0xf1, 0x1d, 0xdd, 0x76, 0x78, 0xf5, 0x52, 0x88, 0x8d, 0x8b,
	0xd1, 0x74, 0xb1, 0x55, 0x0d, 0x11, 0x10, 0x1b, 0x67, 0x55, 0x60, 0x57, 0x43, 0x6c, 0x9c, 0x70,
	0x1f, 0x3b, 0x40, 0x88, 0xf4, 0x7b, 0x9f, 0x57, 0xe7, 0xc9, 0xb8, 0x62, 0xfd, 0xde, 0x0f, 0xfb,
	0xbd, 0xcf, 0x95, 0x07, 0x70, 0x2d, 0xd9, 0xdf, 0xaf, 0x69, 0x1e, 0x7a, 0x8e, 0xd4, 0xe8, 0xf3,
	0x8f, 0xf9, 0xb4, 0xa8, 0xe5, 0x53, 0x62, 0xfc, 0xf9, 0x93, 0x1c, 0xcc, 0xf5, 0x47, 0x03, 0x01,
	0x97, 0x4e, 0xf7, 0x3b, 0xa3, 0x47, 0xa0, 0x08, 0xdf, 0x81, 0x18, 0x24, 0x60, 0xb1, 0x28, 0x94,
	0x22, 0xb7, 0xf6, 0xdb, 0x70, 0x39, 0x83, 0x3a, 0x21, 0x12, 0x3d, 0x8c, 0x47, 0xa2, 0x95, 0x0c,
	0x5d, 0x16, 0x8c, 0x32, 0xe3, 0xd1, 0xdf, 0x95, 0xa0, 0x96, 0x8e, 0xfd, 0xff, 0x11, 0xe3, 0x8b,
	0x47, 0x8c, 0x48, 0x18, 0xa8, 0x8c, 0x1a, 0x06, 0x20, 0x3b, 0x0c, 0x04, 0xde, 0x7a, 0x22, 0xcd,
	0x5b, 0x9f, 0x2e, 0x50, 0x44, 0x7c, 0xfb, 0xb9, 0x2c, 0xdf, 0x3e, 0xe0, 0xf7, 0xa6, 0xce, 0xec,
	0xf7, 0xa6, 0xcf, 0xe4, 0xf7, 0x66, 0x4e, 0xe5, 0xf7, 0xce, 0x8f, 0xe0, 0xf7, 0x42, 0xdf, 0xc4,
	0x86, 0xf9, 0x26, 0x0b, 0xae, 0x66, 0xdb, 0x15, 0xdb, 0x8e, 0x25, 0x70, 0x4b, 0xa7, 0xb3, 0xcc,
	0x81, 0x34, 0xee, 0x3f, 0x73, 0x30, 0x97, 0x1c, 0xe0, 0x52, 0xcd, 0x72, 0x01, 0x8a, 0x0d, 0xdd,
	0xb6, 0xc8, 0x22, 0x2b, 0x82, 0xa1, 0xa9, 0xdb, 0x96, 0x4a, 0xad, 0x08, 0x7d, 0xac, 0x49, 0x1b,
	0x94, 0x50, 0x4b, 0xc3, 0x70, 0x8b, 0xad, 0x08, 0xfd, 0xc4, 0xb4, 0x5c, 0xb1, 0x67, 0x10, 0xd0,
	0x23, 0xd3, 0x72, 0x55, 0x6a, 0x45, 0xcb, 0x53, 0xf9, 0xbe, 0x69, 0x5b, 0x51, 0xcb, 0x73, 0xa8,
	0x45, 0x95, 0x10, 0xd4, 0x60, 0xf1, 0xd4, 0xd8, 0x20, 0xa3, 0x93, 0x1a, 0x2c, 0xb0, 0x48, 0x83,
	0x7d, 0xb0, 0xf2, 0x67, 0x79, 0x98, 0x4b, 0x0e, 0xb8, 0xa9, 0x63, 0x5b, 0x81, 0x89, 0xa7, 0x9a,
	0xc3, 0x2d, 0x4f, 0xb8, 0x08, 0x31, 0xc4, 0x99, 0x93, 0x5e, 0x7d, 0xb2, 0x43, 0xcd, 0x4d, 0xe1,
	0x29, 0xa2, 0x48, 0xec, 0x6d, 0x80, 0xf5, 0x17, 0x66, 0xcb, 0x10, 0x24, 0x62, 0xdc, 0xd3, 0x27,
	0xbd, 0xfa, 0x84, 0x8e, 0xad, 0x92, 0x22, 0x82, 0x12, 0xf7, 0x6b, 0xc5, 0x53, 0xf8, 0xb5, 0xb1,
	0x2c, 0xbf, 0x76, 0x13, 0xca, 0x14, 0x0c, 0xe5, 0xbc, 0x54, 0x04, 0x1e, 0x85, 0x4a, 0x72, 0x01,
	0x12, 0xa8, 0x7c, 0x13, 0xea, 0xcf, 0x3a, 0xb8, 0x2d, 0x14, 0x96, 0x4e, 0x8a, 0xfa, 0x31, 0x77,
	0x5c, 0x9c, 0x64, 0x19, 0xf9, 0xe6, 0x21, 0x70, 0x1d, 0x32, 0x28, 0x94, 0xe9, 0xbd, 0x61, 0x28,
	0x0f, 0xe0, 0x4a, 0x3a, 0x35, 0x46, 0xbf, 0x39, 0x90, 0xbe, 0x52, 0x52, 0xca, 0x37, 0xa5, 0x01,
	0x35, 0xda, 0xc8, 0x3e, 0x73, 0xb9, 0x43, 0x54, 0xb1, 0x1d, 0xec, 0x0c, 0x14, 0xda, 0x61, 0xac,
	0x6d, 0x9b, 0x46, 0xac, 0x0f, 0xf9, 0x78, 0x1f, 0x56, 0xa0, 0x9a, 0xc8, 0x2a, 0x4b, 0x7c, 0x17,
	0xce, 0x8b, 0x7d, 0x74, 0x54, 0xea, 0x2a, 0x80, 0x8e, 0xef, 0xe4, 0xab, 0x88, 0x60, 0x6a, 0x45,
	0x49, 0x34, 0xa8, 0x80, 0x74, 0x97, 0xbc, 0x9a, 0xee, 0x3f, 0xb2, 0x2b, 0x3e, 0x8b, 0x03, 0x7e,
	0xec, 0x56, 0xf3, 0x8b, 0x05, 0xdc, 0x46, 0x53, 0xcb, 0x47, 0xfc, 0xd8, 0x55, 0x7e, 0x9e, 0x83,
	0xe9, 0xa8, 0xdc, 0x8c, 0x2e, 0xf6, 0xf5, 0x26, 0xff, 0xc5, 0x7b, 0x53, 0xe8, 0xeb, 0x0d, 0xab,
	0xc3, 0xc4, 0x73, 0xcd, 0x6c, 0x71, 0x43, 0xc0, 0x8b, 0x04, 0x07, 0xd1, 0x44, 0xdd, 0x75, 0x60,
	0x7a, 0x4b, 0x3b, 0xe4, 0x06, 0xce, 0xac, 0x2b, 0x7a, 0xbb, 0x0c, 0xc5, 0x0e, 0x7a, 0xae, 0x1c,
	0x25, 0x02, 0x57, 0x92, 0xfa, 0xf3, 0xc8, 0x36, 0x78, 0xeb, 0x29, 0x3a, 0x32, 0x42, 0x65, 0x77,
	0xa0, 0xd8, 0x75, 0xb9, 0x43, 0xb3, 0x31, 0xb1, 0x52, 0x4d, 0x22, 0x41, 0x01, 0x2a, 0x61, 0x29,
	0x1f, 0x42, 0x25, 0x60, 0x80, 0x7a, 0x60, 0x75, 0xdb, 0x24, 0x6c, 0x4c, 0xc5, 0x47, 0xc6, 0xa0,
	0xe8, 0x9a, 0x2f, 0xc5, 0x7c, 0x8c, 0xa9, 0xf4, 0xcc, 0x66, 0x61, 0x4c, 0xb7, 0xbb, 0x96, 0x47,
	0xc6, 0x36, 0xa6, 0x8a, 0x17, 0xe5, 0xa7, 0x39, 0x28, 0x22, 0x5f, 0x36, 0x05, 0xf9, 0x40, 0x97,
	0xf2, 0xa6, 0x81, 0x4c, 0xed, 0x40, 0x8b, 0xf0, 0xd1, 0x57, 0xb7, 0x42, 0xa8, 0x6e, 0x33, 0x50,
	0xf0, 0x8e, 0x3b, 0x64, 0x8d, 0x63, 0x2a, 0x3e, 0xa2, 0x10, 0xf2, 0xfc, 0x64, 0x75, 0x63, 0xaa,
	0x78, 0x21, 0xd1, 0x68, 0x77, 0xc2, 0xf7, 0xa8, 0xe2, 0x05, 0x5b, 0xdb, 0xd4, 0x5a, 0x16, 0xad,
	0xf4, 0xa2, 0x4c, 0xc1, 0xe4, 0x63, 0x7b, 0xd5, 0xd9, 0x97, 0xea, 0xa6, 0xdc, 0x03, 0xd8, 0xd2,
	0x0e, 0xd3, 0x55, 0x7e, 0x06, 0x0a, 0x7a, 0xd8, 0x4f, 0xdd, 0x34, 0x94, 0x5f, 0x81, 0x0b, 0x98,
	0x0d, 0x48, 0x27, 0xe6, 0xa6, 0x93, 0x32, 0x28, 0xea, 0xa6, 0xe1, 0x2b, 0x20, 0x3d, 0x2b, 0x1f,
	0x00, 0x7b, 0xe2, 0x79, 0x67, 0xa3, 0xfd, 0x59, 0x0e, 0xd8, 0x4e, 0x77, 0xaf, 0x9f, 0xf8, 0xb6,
	0xe8, 0xe1, 0x90, 0x1a, 0x13, 0xe2, 0xb0, 0xeb, 0x90, 0xef, 0x88, 0x18, 0x31, 0xb6, 0x36, 0xfb,
	0xaa, 0x57, 0x9f, 0x09, 0x31, 0xdb, 0xa6, 0xf5, 0xad, 0x65, 0x45, 0xcd, 0x77, 0x2c, 0x76, 0x17,
	0xf2, 0x1d, 0x57, 0x2c, 0xe3, 0xda, 0x95, 0x57, 0xbd, 0xfa, 0x7c, 0x1f, 0xd6, 0x9d, 0xb6, 0xf6,
	0x5b, 0xdf, 0xba, 0x7f, 0xef, 0xde, 0x3d, 0x44, 0x77, 0x95, 0x5f, 0xe4, 0x60, 0x76, 0x07, 0xe7,
	0xb6, 0xbf, 0x63, 0x77, 0x71, 0xb1, 0x70, 0x01, 0x72, 0xe4, 0xfa, 0x52, 0xbb, 0x26, 0xb0, 0x10,
	0x9d, 0x7b, 0x7e, 0x56, 0x99, 0x85, 0x4e, 0x58, 0x6c, 0x19, 0xca, 0x98, 0x9a, 0xe1, 0x24, 0x91,
	0x4d, 0x65, 0x14, 0xf5, 0x24, 0x9e, 0x3f, 0xcd, 0xc5, 0x60, 0x9a, 0x95, 0xdf, 0x81, 0x6a, 0x38,
	0xa3, 0x64, 0x60, 0x1f, 0xaf, 0x9c, 0x61, 0x5e, 0xe7, 0xa0, 0xa4, 0x77, 0x1d, 0xd7, 0x76, 0xa4,
	0x9e, 0xc8, 0x37, 0xb4, 0x6d, 0xf1, 0xd4, 0x24, 0x73, 0x11, 0x96, 0x01, 0xa2, 0x69, 0xc7, 0x7c,
	0xc9, 0x95, 0x4f, 0x61, 0x2e, 0x41, 0xbe, 0x74, 0x48, 0x92, 0x65, 0x2e, 0xc6, 0xf2, 0x74, 0x76,
	0xfc, 0xf7, 0x79, 0x60, 0xc9, 0x35, 0xbc, 0x41, 0x7d, 0x73, 0x6d, 0xc7, 0x93, 0xfd, 0xa7, 0xe7,
	0x98, 0xb7, 0x2f, 0xc4, 0xbc, 0x3d, 0x59, 0x66, 0x38, 0x93, 0x9e, 0x69, 0x08, 0xcb, 0xf4, 0xe3,
	0x61, 0xc5, 0x5f, 0xd3, 0x59, 0x7f, 0x4d, 0x4b, 0xa2, 0x55, 0x2c, 0x1d, 0xb9, 0x0f, 0xc3, 0xad,
	0x96, 0x85, 0x72, 0xe3, 0x73, 0xa0, 0xf0, 0xe3, 0xa1, 0xc2, 0xa3, 0xe7, 0x0c, 0xd3, 0x56, 0x91,
	0x43, 0xab, 0x95, 0xfd, 0x20, 0x79, 0x15, 0xda, 0x2c, 0x32, 0xe6, 0x74, 0x6d, 0xbe, 0x43, 0xda,
	0x2c, 0xf2, 0xe5, 0x85, 0x57, 0xbd, 0x7a, 0x35, 0x49, 0x9b, 0x97, 0x7d, 0x65, 0xfe, 0xfd, 0x1c,
	0xcc, 0x0c, 0x14, 0x2f, 0xcf, 0xe0, 0x6e, 0xbf, 0x0d, 0xe3, 0xbe, 0x39, 0xc8, 0xa5, 0xba, 0x9c,
	0x95, 0x14, 0xca, 0xad, 0x62, 0x40, 0xa3, 0xec, 0xc0, 0xf9, 0xb8, 0x93, 0xc1, 0x7e, 0x44, 0x99,
	0xe6, 0xce, 0xc0, 0xf4, 0x23, 0x98, 0x89, 0x39, 0x1f, 0xe4, 0xf9, 0xe0, 0x54, 0x3c, 0x23, 0xcc,
	0x14, 0x98, 0xc4, 0x0c, 0x39, 0xb0, 0x76, 0x06, 0xc5, 0x7d, 0x5c, 0xc0, 0x9c, 0x58, 0x40, 0x7c,
	0x56, 0xd6, 0x01, 0x24, 0x0e, 0x8a, 0xba, 0x0f, 0x63, 0xf4, 0x26, 0xe5, 0x24, 0xea, 0x2e, 0x22,
	0xf8, 0x1d, 0x17, 0xd8, 0xca, 0x75, 0x98, 0xc2, 0x87, 0x47, 0x5a, 0x27, 0x22, 0x4a, 0x8f, 0x88,
	0x22, 0xe7, 0xf8, 0xf3, 0x9c, 0xe8, 0x0f, 0xa1, 0xa1, 0xb4, 0x87, 0x30, 0xb6, 0x1f, 0x91, 0xf6,
	0x56, 0x9a, 0x34, 0x9f, 0x80, 0x5e, 0xdc, 0xd8, 0xce, 0x5d, 0x30, 0xa8, 0xa9, 0x72, 0x14, 0x69,
	0xfb, 0xf2, 0xa5, 0xf8, 0xbe, 0x3c, 0x75, 0x5c, 0xd1, 0xdd, 0xf7, 0x5f, 0x4f, 0x41, 0x59, 0x4e,
	0x65, 0xd6, 0x56, 0x3b, 0xdc, 0xa4, 0xe4, 0x87, 0x6c, 0x52, 0x70, 0x0b, 0x4d, 0x5e, 0x58, 0x6e,
	0xb4, 0x69, 0x0b, 0x4d, 0x46, 0xa8, 0x8a, 0x76, 0x44, 0xd8, 0xf4, 0xc2, 0xec, 0x96, 0x10, 0xb8,
	0x40, 0xa0, 0x76, 0x76, 0x0d, 0x4a, 0x0f, 0xed, 0x36, 0xe6, 0xaa, 0x22, 0xa7, 0x9d, 0x38, 0xe9,
	0xd5, 0xcb, 0x54, 0x09, 0x32, 0x0d, 0x55, 0x82, 0x10, 0x69, 0xf5, 0x48, 0x3b, 0x0e, 0x12, 0x7d,
	0x42, 0xa2, 0x02, 0x10, 0x22, 0x09, 0x50, 0xbc, 0xac, 0x54, 0x3e, 0x55, 0x59, 0x69, 0x7c, 0x58,
	0x59, 0x29, 0xba, 0x57, 0xaf, 0x64, 0xef, 0xd5, 0xe7, 0xa1, 0xb0, 0x6a, 0x1a, 0xd2, 0x43, 0x94,
	0x4f, 0x7a, 0xf5, 0x82, 0x66, 0x1a, 0x2a, 0xb6, 0xb1, 0x25, 0x80, 0xb0, 0x04, 0x20, 0xbd, 0x03,
	0x09, 0x0d, 0x0b, 0x05, 0x6a, 0x04, 0x23, 0xbe, 0x19, 0x9d, 0x1c, 0xb6, 0x19, 0x9d, 0x87, 0xc2,
	0x86, 0xa9, 0xd3, 0x96, 0xba, 0x22, 0x04, 0x1b, 0xa6, 0xae, 0x62, 0x5b, 0xa4, 0x90, 0x11, 0x29,
	0xb8, 0xf6, 0x15, 0x32, 0xe6, 0xa1, 0xb0, 0x63, 0x1a, 0x72, 0xa7, 0x4c, 0xe4, 0x2e, 0xf6, 0x7b,
	0x87, 0x32, 0xf0, 0xc2, 0x23, 0xd3, 0x90, 0xdb, 0x61, 0x02, 0xb5, 0x11, 0xf4, 0xc8, 0x34, 0xd8,
	0x0d, 0x28, 0xef, 0x74, 0xb8, 0x6e, 0x6a, 0x2d, 0xb9, 0xff, 0xa5, 0xa5, 0x71, 0x45, 0x93, 0xea,
	0xc3, 0x70, 0x37, 0xb5, 0xd3, 0xd5, 0x75, 0x74, 0xa2, 0x5c, 0x6b, 0xd3, 0xe6, 0xb7, 0x20, 0x76,
	0x53, 0xae, 0x68, 0x6e, 0x7a, 0x5c, 0x6b, 0xab, 0x51, 0x24, 0xa2, 0x11, 0xe4, 0xb4, 0x8d, 0xbc,
	0x10, 0xee, 0xc0, 0x24, 0xfb, 0x26, 0x6d, 0x27, 0xa3, 0x48, 0x11, 0x9a, 0x5d, 0xb3, 0xe3, 0x52,
	0xb9, 0xb3, 0x8f, 0xc6, 0x33, 0x3b, 0xae, 0x1a, 0x45, 0x62, 0xf7, 0x61, 0x52, 0xbe, 0x36, 0xda,
	0xa8, 0xf4, 0x17, 0x89, 0xe8, 0xfc, 0x49, 0xaf, 0x7e, 0xce, 0x27, 0x32, 0x11, 0xa0, 0xc6, 0xd0,
	0xd8, 0x2d, 0x51, 0x93, 0xd9, 0xd3, 0xf4, 0x03, 0x2a, 0x79, 0xca, 0x6d, 0x56, 0x47, 0xb6, 0xa9,
	0x01, 0x74, 0xb0, 0x44, 0x74, 0x69, 0xd4, 0x12, 0xd1, 0x4d, 0x28, 0xa3, 0x5e, 0x21, 0x4d, 0x35,
	0x14, 0x41, 0x5a, 0x87, 0xd8, 0x3e, 0x30, 0x76, 0x4c, 0x30, 0x3f, 0xf2, 0x31, 0x41, 0x2d, 0xab,
	0x3e, 0xf4, 0x6d, 0x28, 0x89, 0x5a, 0x50, 0xf5, 0x32, 0x39, 0x98, 0x5a, 0x92, 0x83, 0x11, 0x5b,
	0x3f, 0xbf, 0x68, 0x8d, 0xcf, 0xaa, 0xfc, 0x65, 0xeb, 0x30, 0x8e, 0xc6, 0x46, 0xcb, 0xbd, 0x90,
	0xee, 0xa2, 0x10, 0x2e, 0x3a, 0x4b, 0x66, 0x4a, 0x5a, 0x10, 0x10, 0x22, 0x13, 0xb4, 0x41, 0x62,
	0x72, 0x65, 0x14, 0x26, 0x64, 0xbd, 0x82, 0x89, 0x4f, 0xc8, 0xbe, 0x0b, 0xd3, 0x11, 0xb5, 0x32,
	0xad, 0xe7, 0x76, 0xf5, 0xea, 0x10, 0x5e, 0xb3, 0x27, 0xbd, 0xfa, 0x4c, 0x54, 0x33, 0x91, 0x4a,
	0xed, 0x67, 0x13, 0x2f, 0xff, 0xd4, 0x87, 0x95, 0x7f, 0xde, 0x16, 0x1e, 0x9d, 0x1c, 0xe7, 0x72,
	0x75, 0x31, 0xac, 0x0e, 0x84, 0xae, 0x75, 0x59, 0x8d, 0xa0, 0xc4, 0x08, 0x56, 0xaa, 0x6f, 0x24,
	0x11, 0xac, 0x44, 0x08, 0x56, 0x70, 0x6d, 0x7f, 0xad, 0xdb, 0xee, 0xa0, 0xba, 0x28, 0xa1, 0xba,
	0xfc, 0xa0, 0xdb, 0xee, 0x08, 0x75, 0x91, 0x40, 0xf6, 0x26, 0x8c, 0xaf, 0x6b, 0x62, 0xc7, 0x5e,
	0xbd, 0xb6, 0x98, 0xbb, 0x35, 0x2e, 0x26, 0x4f, 0xd7, 0x2c, 0x59, 0x82, 0x0b, 0x1f, 0xd9, 0x5d,
	0x39, 0xc6, 0x6d, 0xd3, 0x3a, 0xa8, 0x5e, 0x8f, 0xc4, 0x03, 0x1a, 0x63, 0xcb, 0xb4, 0x0e, 0xd4,
	0xc8, 0x33, 0x5b, 0x80, 0x4a, 0xc3, 0x7d, 0xd2, 0x3a, 0x6e, 0x77, 0x4c, 0xbd, 0x7a, 0x03, 0x79,
	0xab, 0x61, 0x03, 0xbb, 0x05, 0xd3, 0xf2, 0x11, 0x67, 0x44, 0xed, 0xb6, 0x78, 0xf5, 0x26, 0xa5,
	0xa7, 0xfd, 0xcd, 0x83, 0x15, 0xbc, 0xaf, 0x8f, 0x5a, 0xc1, 0x1b, 0xa8, 0x1a, 0xde, 0x1a, 0xb1,
	0x6a, 0xa8, 0xfc, 0xc5, 0x18, 0x94, 0x84, 0x46, 0xa7, 0x46, 0x47, 0xe9, 0x09, 0xf3, 0x09, 0x9e,
	0x30, 0xa8, 0x26, 0x17, 0x52, 0xaa, 0xc9, 0xb7, 0x61, 0x7c, 0xa7, 0xbb, 0x17, 0xad, 0x38, 0x8b,
	0x8a, 0x6b, 0x77, 0x4f, 0x56, 0x86, 0x02, 0x70, 0x18, 0x56, 0xc7, 0x86, 0x85, 0xd5, 0x52, 0x4a,
	0x58, 0x25, 0xbf, 0x6c, 0x5b, 0x98, 0xca, 0x97, 0x49, 0x96, 0xf4, 0xcb, 0xd4, 0xa4, 0xfa, 0x30,
	0xb6, 0x00, 0xc5, 0x6d, 0x7b, 0xdf, 0x96, 0x45, 0x65, 0x51, 0x12, 0xb4, 0xf7, 0x6d, 0x95, 0x5a,
	0xfd, 0x88, 0x52, 0xc9, 0x8c, 0x28, 0x90, 0x1a, 0x51, 0x16, 0xa0, 0xa8, 0x6a, 0xd6, 0x81, 0x0c,
	0x74, 0xc4, 0xdc, 0xd1, 0xac, 0x03, 0x95, 0x5a, 0x45, 0x55, 0x79, 0xb5, 0xd3, 0x91, 0x81, 0xcd,
	0xaf, 0x2a, 0x6b, 0x9d, 0x8e, 0x2a, 0x00, 0x28, 0x1e, 0x55, 0x39, 0x12, 0xd0, 0x50, 0x8b, 0xb1,
	0x0d, 0x2d, 0x0f, 0x3d, 0xda, 0x96, 0xad, 0xcb, 0x98, 0x26, 0xb5, 0x92, 0x3c, 0xde, 0x73, 0x6c,
	0x55, 0x43, 0x04, 0x9c, 0x79, 0x7a, 0x40, 0x6e, 0xd3, 0xe1, 0xcc, 0x13, 0x1e, 0x59, 0x46, 0x00,
	0xa6, 0x00, 0xc2, 0x35, 0x47, 0x7f, 0x21, 0x62, 0xc1, 0x4c, 0x24, 0x80, 0x50, 0xb3, 0x0c, 0x05,
	0x51, 0x24, 0x4a, 0x0e, 0xec, 0x7d, 0x7b, 0xab, 0xdb, 0x12, 0x41, 0x50, 0xb2, 0xc7, 0x89, 0x6c,
	0x3e, 0xef, 0xb6, 0x5a, 0x6a, 0x00, 0xa6, 0x58, 0x73, 0x6c, 0xe9, 0x4f, 0x5b, 0x9a, 0xf7, 0xdc,
	0x76, 0xfc, 0x40, 0x28, 0x62, 0xcd, 0xb1, 0xa5, 0x37, 0x3b, 0x12, 0xa0, 0xc6, 0xd0, 0x94, 0xff,
	0xcd, 0x43, 0x91, 0x7c, 0x59, 0x9a, 0x5e, 0x06, 0xca, 0x97, 0x1f, 0x41, 0xf9, 0x0a, 0xd9, 0xca,
	0x77, 0x0d, 0x4a, 0x9b, 0x51, 0x2d, 0x25, 0xcd, 0xe1, 0x12, 0x4d, 0x82, 0x70, 0x6d, 0x57, 0x1d,
	0xae, 0xc9, 0xf2, 0xac, 0x38, 0x01, 0x75, 0xb8, 0xa6, 0x52, 0x6b, 0xa0, 0x56, 0xe5, 0x34, 0xb5,
	0x7a, 0x16, 0xa4, 0x72, 0x62, 0x5d, 0xd1, 0x88, 0x9e, 0x35, 0x36, 0x50, 0x6d, 0x1f, 0xf1, 0xf6,
	0x1e, 0x77, 0x5c, 0xa9, 0x92, 0x24, 0xbc, 0x2d, 0x9a, 0x54, 0x1f, 0x96, 0xa5, 0x98, 0xb7, 0x61,
	0x1c, 0x67, 0x8a, 0x42, 0x61, 0xe4, 0x5c, 0x03, 0x9d, 0xb8, 0x0c, 0x85, 0x3e, 0x38, 0xb6, 0x6e,
	0x13, 0x99, 0xeb, 0xa6, 0xfc, 0x73, 0x01, 0x8a, 0xe8, 0x68, 0xbf, 0x52, 0x0b, 0x80, 0xea, 0x11,
	0x5d, 0x00, 0x54, 0x1e, 0x95, 0x5a, 0x51, 0x1a, 0x76, 0x97, 0x66, 0x21, 0x52, 0x1b, 0xa7, 0xc0,
	0x21, 0x66, 0xc1, 0x07, 0x0f, 0x59, 0xab, 0xb7, 0xa0, 0xf2, 0xb4, 0xbb, 0xd7, 0x32, 0xdd, 0x17,
	0xdc, 0x89, 0x1d, 0x3d, 0xf9, 0x8d, 0x6a, 0x08, 0xc7, 0xfc, 0xf6, 0x49, 0x87, 0x3b, 0x1a, 0xa6,
	0x2f, 0xae, 0x5c, 0x1d, 0x32, 0x4b, 0x3b, 0x68, 0x55, 0x23, 0x18, 0x38, 0xd0, 0xa7, 0x7b, 0x54,
	0xcf, 0x86, 0x30, 0x77, 0xec, 0xec, 0x89, 0x72, 0xb6, 0x04, 0xf9, 0x6b, 0x3d, 0x91, 0xbc, 0xd6,
	0xc1, 0x02, 0x4e, 0x66, 0x2f, 0xe0, 0x7b, 0xa0, 0xc8, 0xdb, 0x5f, 0xd2, 0xe7, 0xa3, 0x77, 0xc0,
	0xad, 0x73, 0xac, 0x0c, 0x9c, 0xb4, 0xc7, 0xfb, 0x83, 0x1c, 0xd4, 0xc4, 0xa1, 0xc1, 0x53, 0xdb,
	0xb4, 0x3c, 0xca, 0x8f, 0x50, 0x85, 0xd6, 0x6d, 0xeb, 0xb9, 0xb9, 0xcf, 0xae, 0x40, 0x61, 0x37,
	0x28, 0xd8, 0xd0, 0x00, 0x48, 0xd5, 0x50, 0xa1, 0x77, 0x45, 0x54, 0xf8, 0xd0, 0xb1, 0xbb, 0x9d,
	0xa8, 0x5e, 0xec, 0x63, 0x83, 0x2a, 0xda, 0x29, 0x8d, 0x74, 0x4c, 0xdb, 0x31, 0xbd, 0xe3, 0xe8,
	0x69, 0x65, 0x47, 0xb6, 0xa9, 0x01, 0x54, 0xf9, 0x9f, 0x22, 0xcc, 0xf5, 0x77, 0x44, 0x76, 0xe2,
	0x57, 0x83, 0xc3, 0x3c, 0xbf, 0x27, 0xd7, 0x63, 0x87, 0x79, 0xc3, 0xee, 0x80, 0x19, 0x82, 0x03,
	0xdd, 0xce, 0xf0, 0xa3, 0xdb, 0xf5, 0xd8, 0xe5, 0x8d, 0x0c, 0x0e, 0x82, 0x8a, 0x7d, 0x03, 0x26,
	0xc5, 0xc1, 0x82, 0xa5, 0x3b, 0x9f, 0x98, 0x96, 0x1c, 0x0c, 0x85, 0x5d, 0x79, 0xf4, 0x60, 0xe9,
	0x4e, 0xf3, 0xc8, 0xb4, 0xd4, 0x18, 0x1e, 0x7b, 0x1f, 0xce, 0xd1, 0xfb, 0x06, 0xd7, 0x9d, 0x6d,
	0xdb, 0xf5, 0x77, 0x8a, 0x17, 0x4e, 0x7a, 0xf5, 0x69, 0x41, 0x68, 0x70, 0xdd, 0x69, 0xb6, 0x6c,
	0x97, 0xab, 0x71, 0x4c, 0xb6, 0x05, 0xe7, 0x77, 0xda, 0x5a, 0xab, 0x15, 0x93, 0x2b, 0x42, 0x66,
	0xf5, 0xa4, 0x57, 0x9f, 0x75, 0x11, 0xd8, 0xec, 0x93, 0x3e, 0x48, 0xc2, 0x1a, 0xc0, 0xc2, 0xc6,
	0xa0, 0x1f, 0xc2, 0x6e, 0xe6, 0x4f, 0x7a, 0xf5, 0x8b, 0x51, 0x46, 0x61, 0x6f, 0x12, 0x88, 0x70,
	0x16, 0x9e, 0xb9, 0x94, 0xbc, 0x8a, 0x65, 0x2f, 0x53, 0x7a, 0x45, 0xb3, 0xd0, 0x75, 0x45, 0x7e,
	0xdb, 0x14, 0xeb, 0x1f, 0xc3, 0x63, 0xbb, 0x30, 0x86, 0x2f, 0xa2, 0x14, 0x95, 0x72, 0x98, 0x97,
	0xae, 0x85, 0xc2, 0xca, 0x22, 0xcc, 0x05, 0x33, 0xf6, 0x4d, 0x98, 0x22, 0xf6, 0x4f, 0xba, 0x5e,
	0x8b, 0x7b, 0x8f, 0xbb, 0xfe, 0xe6, 0x95, 0xf2, 0x5b, 0xc2, 0x6c, 0xda, 0x04, 0x6a, 0x5a, 0xdd,
	0xb6, 0xda, 0x87, 0xab, 0x1c, 0xc0, 0xdc, 0x87, 0xdc, 0xeb, 0x97, 0xaa, 0xf2, 0xcf, 0xd8, 0x77,
	0x22, 0xda, 0x22, 0xf4, 0xed, 0x7e, 0xbf, 0xb6, 0x5c, 0xc7, 0xc0, 0xf5, 0x81, 0x12, 0x34, 0x29,
	0x8b, 0x99, 0xea, 0xa3, 0xd4, 0xe1, 0xca, 0xaa, 0x61, 0x24, 0xeb, 0xb7, 0xca, 0xdd, 0x8e, 0xb2,
	0x00, 0x35, 0xff, 0xbc, 0xa9, 0xbf, 0x43, 0x6e, 0x47, 0xf9, 0x87, 0x02, 0x2c, 0x24, 0xcd, 0xcf,
	0xb6, 0xe9, 0x7a, 0x0d, 0x8f, 0xb7, 0xd1, 0xd7, 0xe0, 0x7b, 0x23, 0xd1, 0x54, 0x25, 0x88, 0x5d,
	0x8f, 0x5b, 0xab, 0x48, 0x74, 0x69, 0x9a, 0x68, 0xab, 0x29, 0x4d, 0x56, 0x86, 0x98, 0xc8, 0xe1,
	0x66, 0x18, 0x62, 0x08, 0x2f, 0x00, 0xd3, 0x51, 0xb7, 0x6e, 0x5b, 0xcf, 0x9c, 0x96, 0xf4, 0xe5,
	0xe2, 0xa8, 0x5b, 0x97, 0xdb, 0x3d, 0x1f, 0x88, 0x2c, 0x3f, 0x31, 0x2d, 0xf4, 0x77, 0xae, 0x54,
	0x60, 0x62, 0x79, 0x64, 0x5a, 0xe4, 0x0c, 0x5d, 0x35, 0x00, 0x63, 0xea, 0x83, 0x9a, 0x26, 0x70,
	0x4b, 0xe1, 0xa6, 0x03, 0x55, 0x52, 0x22, 0x87, 0x08, 0x94, 0x49, 0x46, 0x0a, 0x22, 0x22, 0x93,
	0xa4, 0xea, 0x86, 0x68, 0xc7, 0x4d, 0x46, 0xa8, 0xc6, 0xb2, 0x10, 0x42, 0x9b, 0x8c, 0x88, 0xce,
	0xab, 0x11, 0x94, 0x20, 0xab, 0xab, 0x24, 0x66, 0x75, 0xe8, 0x92, 0xb9, 0x69, 0x68, 0xbb, 0x41,
	0x09, 0x44, 0xb8, 0x64, 0xba, 0x60, 0xeb, 0x99, 0x86, 0x1a, 0x80, 0x95, 0x3f, 0xcf, 0xc1, 0x7c,
	0xff, 0x92, 0xd1, 0x04, 0xd3, 0xe1, 0xb6, 0x7f, 0x7a, 0x9c, 0x4b, 0x3c, 0x3d, 0xfe, 0x1e, 0x00,
	0xa1, 0x0a, 0x9b, 0x11, 0xb5, 0xce, 0x7b, 0xa3, 0xda, 0x8c, 0xaf, 0x13, 0x32, 0x4a, 0x23, 0x0b,
	0x35, 0xc2, 0x4e, 0xf9, 0x59, 0x11, 0x66, 0xfb, 0xe9, 0x1a, 0xb8, 0xdf, 0xbb, 0x3d, 0xe0, 0x66,
	0x53, 0xee, 0x4c, 0x18, 0x91, 0xcb, 0x70, 0xbe, 0x3f, 0x4d, 0xb9, 0x0c, 0x67, 0x0c, 0xb8, 0x8c,
	0xc2, 0x88, 0x2e, 0xe3, 0x7d, 0x38, 0xf7, 0xcc, 0xe5, 0x91, 0xc5, 0x2b, 0x12, 0x21, 0x39, 0x4e,
	0x24, 0x8c, 0x2e, 0x60, 0x1c, 0x93, 0x69, 0x00, 0xbb, 0xb6, 0xa7, 0xb5, 0xc4, 0xf4, 0x8d, 0x9d,
	0x71, 0xfa, 0x48, 0x4d, 0x3c, 0xe4, 0xd3, 0x94, 0x93, 0x18, 0x32, 0x65, 0x9f, 0xc6, 0x56, 0xa8,
	0x44, 0x22, 0xee, 0x8e, 0x22, 0x22, 0x50, 0x01, 0xb9, 0xd7, 0x25, 0xf3, 0x1b, 0x58, 0x24, 0x4c,
	0xd4, 0x65, 0x40, 0xdf, 0x0d, 0x8e, 0xdb, 0x44, 0xa2, 0xee, 0x88, 0x66, 0x91, 0x45, 0x44, 0x91,
	0x12, 0xdc, 0xe1, 0xf8, 0x29, 0xdc, 0xa1, 0x0b, 0x57, 0x25, 0xb3, 0x24, 0xe5, 0x78, 0x4d, 0x6e,
	0xd1, 0x86, 0x5a, 0x82, 0x0f, 0x7e, 0x8d, 0x02, 0x8f, 0x40, 0x69, 0xb8, 0x49, 0xf2, 0x3e, 0xe4,
	0x16, 0x26, 0x6e, 0xdc, 0x78, 0x4d, 0x82, 0x9b, 0x70, 0x6d, 0xa8, 0x60, 0xb7, 0x83, 0xdb, 0xfb,
	0x8f, 0x4d, 0x7e, 0x14, 0x34, 0x46, 0x23, 0xec, 0xa1, 0xc9, 0x8f, 0x9a, 0xfb, 0x01, 0x7a, 0x1c,
	0x51, 0xf9, 0xb7, 0x1c, 0xd4, 0x05, 0xff, 0x8f, 0x2c, 0x5b, 0x3f, 0xb0, 0xbb, 0xc1, 0x0d, 0x7a,
	0x0a, 0x32, 0x14, 0x25, 0xd6, 0xc3, 0xab, 0xf0, 0xfe, 0xc0, 0x6e, 0x88, 0x02, 0xad, 0x28, 0x1c,
	0xa4, 0x27, 0x42, 0x21, 0x1d, 0xdb, 0x87, 0x71, 0xba, 0xe3, 0xe1, 0x70, 0x4b, 0xba, 0xa6, 0x77,
	0xd2, 0x15, 0x3f, 0xb5, 0x2f, 0x6b, 0x73, 0x27, 0xbd, 0x3a, 0xd3, 0x25, 0xa3, 0x3b, 0x76, 0xdb,
	0xf4, 0x78, 0xbb, 0x83, 0x19, 0xa1, 0xcf, 0x5c, 0xf9, 0x97, 0x32, 0x5c, 0x49, 0xe4, 0x82, 0xd3,
	0xf6, 0xe5, 0x8d, 0xe7, 0x1e, 0x80, 0x5f, 0x91, 0xf3, 0x3f, 0x10, 0x10, 0x96, 0x16, 0x94, 0xec,
	0xd0, 0xa1, 0x45, 0x70, 0x90, 0xc2, 0x2f, 0xbf, 0xf9, 0x5f, 0x0d, 0x08, 0x8a, 0xa0, 0x3e, 0x47,
	0x14, 0x21, 0x0e, 0x3a, 0x41, 0x9f, 0x9e, 0xdc, 0x7e, 0x31, 0x2c, 0x91, 0x86, 0x52, 0x28, 0x00,
	0xc4, 0xf0, 0x90, 0xce, 0xe7, 0x42, 0x74, 0x63, 0x21, 0x5d, 0x28, 0x4b, 0xd0, 0x45, 0xf1, 0xa2,
	0xf2, 0x68, 0xf7, 0x53, 0x4a, 0x92, 0x47, 0xfb, 0xa0, 0x18, 0x5e, 0x54, 0x5e, 0x64, 0xd7, 0xd4,
	0x27, 0x4f, 0xd0, 0x45, 0xf1, 0xd8, 0xbb, 0x70, 0xce, 0xe7, 0x33, 0x70, 0xe4, 0x10, 0x39, 0xa0,
	0x88, 0x23, 0x21, 0x95, 0xcf, 0x45, 0x50, 0x55, 0x12, 0x0f, 0x2a, 0xe2, 0x48, 0xec, 0x2e, 0x54,
	0x30, 0x5b, 0x10, 0x93, 0x0f, 0x61, 0x44, 0xa7, 0x6c, 0x42, 0xce, 0x7d, 0x88, 0x11, 0x3f, 0xf1,
	0x99, 0x18, 0x76, 0xe2, 0x13, 0xbb, 0xb2, 0x34, 0x79, 0x8a, 0x2b, 0x4b, 0xe7, 0xb2, 0xae, 0x2c,
	0xf1, 0x88, 0xc9, 0x4c, 0x91, 0xc9, 0x2c, 0x8f, 0x6c, 0x32, 0xbe, 0xb2, 0x0f, 0x37, 0x98, 0x2f,
	0x70, 0x2f, 0xf0, 0x37, 0x60, 0x42, 0x0f, 0xc5, 0xc9, 0xeb, 0xe6, 0xa3, 0x7f, 0x33, 0x41, 0xca,
	0x1f, 0x18, 0x1d, 0x7a, 0xef, 0x28, 0x3b, 0xe5, 0x8f, 0xf3, 0x7e, 0x2a, 0xe4, 0x8f, 0xed, 0xab,
	0xb6, 0xbb, 0xb3, 0xa0, 0x44, 0xe1, 0x50, 0xdc, 0x7b, 0x38, 0xa3, 0x47, 0x7b, 0xe3, 0xa4, 0x57,
	0x2f, 0x51, 0x9c, 0x75, 0xd3, 0x24, 0x4a, 0x29, 0xca, 0x1f, 0x16, 0xe0, 0x52, 0xc2, 0x8c, 0x50,
	0x1a, 0xf6, 0x55, 0x98, 0x8f, 0x56, 0xdf, 0x7c, 0x9c, 0x41, 0x5d, 0x47, 0x9f, 0x8d, 0xfe, 0x64,
	0xa7, 0x38, 0x4a, 0xb2, 0xb3, 0x05, 0x17, 0x77, 0xed, 0x35, 0xbe, 0xc1, 0x3d, 0xee, 0xb4, 0x4d,
	0x8b, 0x1b, 0x62, 0x8f, 0x23, 0xd2, 0x3d, 0x49, 0xed, 0xed, 0x19, 0xbe, 0x47, 0x70, 0xd5, 0x64,
	0x74, 0xc5, 0x83, 0x7a, 0x90, 0x81, 0x24, 0x68, 0xe7, 0x6b, 0xca, 0x06, 0x14, 0x58, 0x0c, 0xb6,
	0x83, 0x89, 0x52, 0xdd, 0x8e, 0x72, 0x03, 0xae, 0x45, 0x77, 0x84, 0x69, 0x68, 0x0e, 0x5c, 0x49,
	0x1e, 0xc0, 0x6b, 0xcc, 0xa2, 0x0e, 0xe1, 0x8d, 0x58, 0xae, 0xf8, 0xcb, 0x92, 0xfb, 0x12, 0x6e,
	0xf8, 0x49, 0xd4, 0x80, 0xc8, 0xd7, 0x9d, 0xc0, 0xed, 0xc1, 0xcd, 0x51, 0x64, 0x7f, 0xa1, 0x1c,
	0x8e, 0xc3, 0xdc, 0xc7, 0xa6, 0xc1, 0x6d, 0xdc, 0x1f, 0x6c, 0x99, 0x2d, 0x8f, 0x3b, 0x7e, 0xe9,
	0xee, 0x12, 0x94, 0x29, 0x60, 0x05, 0x37, 0x8c, 0x4a, 0xf8, 0xda, 0xc8, 0xba, 0x3e, 0x8a, 0x34,
	0xc7, 0x5c, 0x73, 0xc2, 0xab, 0x46, 0x25, 0x7c, 0x6d, 0x18, 0xca, 0x8f, 0xf3, 0x30, 0x3b, 0x20,
	0xa7, 0xd3, 0x3a, 0x66, 0xdb, 0xe1, 0xfd, 0x8e, 0x5c, 0xda, 0xfd, 0x8e, 0x3e, 0x42, 0xb4, 0x75,
	0xda, 0xce, 0x88, 0xda, 0x1f, 0xdd, 0x4c, 0x11, 0x3f, 0xec, 0x09, 0x94, 0xa8, 0x2b, 0xae, 0xbc,
	0xc4, 0x71, 0x2a, 0x76, 0x74, 0x60, 0x22, 0xc8, 0x55, 0xf9, 0x8b, 0xdd, 0xc3, 0x11, 0x88, 0x7b,
	0x74, 0x67, 0xe9, 0x1e, 0x51, 0xab, 0xe2, 0x47, 0x39, 0x86, 0x0b, 0x09, 0xc8, 0xbf, 0x8c, 0x12,
	0xb8, 0xf2, 0x7d, 0xb8, 0x94, 0xd2, 0x4f, 0xb6, 0x19, 0xbb, 0xf5, 0xfe, 0xf5, 0x11, 0x87, 0x38,
	0x70, 0xdd, 0x7d, 0x53, 0xde, 0x42, 0xde, 0xb5, 0x3b, 0xa6, 0x1e, 0x10, 0xf8, 0xda, 0xf4, 0xf5,
	0xc8, 0x18, 0x53, 0x6f, 0xe1, 0xe5, 0x1b, 0x1b, 0xca, 0x2f, 0x72, 0x70, 0x69, 0xd3, 0x4d, 0x66,
	0xf2, 0x65, 0xaa, 0xa4, 0xbc, 0x77, 0x56, 0x1c, 0x72, 0xef, 0xec, 0x2d, 0xba, 0x77, 0x26, 0x2a,
	0x48, 0x97, 0x5f, 0xf5, 0xea, 0x97, 0x92, 0x6f, 0x51, 0x8a, 0x6b, 0x67, 0x3f, 0x84, 0x8b, 0x83,
	0x5d, 0x47, 0x2d, 0x7f, 0x1b, 0x40, 0x9c, 0x6f, 0xad, 0x06, 0xc5, 0x70, 0x59, 0x13, 0x12, 0x67,
	0x60, 0x34, 0x8d, 0x11, 0x94, 0xe0, 0xae, 0x5a, 0x7e, 0xe4, 0xbb, 0x6a, 0x6f, 0x3e, 0x84, 0xa9,
	0xf8, 0xed, 0x65, 0x36, 0x01, 0xe5, 0xf5, 0x27, 0x8f, 0x77, 0x37, 0x77, 0x76, 0x67, 0xbe, 0xc6,
	0x00, 0x4a, 0x3b, 0x9b, 0xab, 0x3b, 0x4f, 0x1e, 0xcf, 0xe4, 0xd8, 0x38, 0x14, 0x77, 0x37, 0x57,
	0x1f, 0xcd, 0xe4, 0xd9, 0x05, 0x98, 0xc6, 0xa7, 0x9d, 0x66, 0xe3, 0x71, 0x53, 0x82, 0x0b, 0x2b,
	0x7f, 0xb3, 0x08, 0xe5, 0x4d, 0x21, 0x90, 0x3d, 0x06, 0xd8, 0x36, 0x0f, 0xf9, 0xaa, 0x61, 0x6c,
	0x69, 0x87, 0xec, 0x6a, 0x52, 0x47, 0xc2, 0x8b, 0xb7, 0xb5, 0xc5, 0x24, 0x78, 0xf4, 0xa2, 0xae,
	0xcf, 0x6f, 0x83, 0xb7, 0xbe, 0x1c, 0x7e, 0x9f, 0xc2, 0x64, 0xf4, 0x86, 0x1d, 0x4b, 0x54, 0xdf,
	0x84, 0x8b, 0xbe, 0xb5, 0x1b, 0xc3, 0x11, 0x71, 0xe5, 0x3e, 0x85, 0xe9, 0xbe, 0xab, 0x9d, 0xec,
	0x66, 0x62, 0x66, 0x32, 0x70, 0xa3, 0xb7, 0x76, 0x2d, 0x65, 0x70, 0xb1, 0x3b, 0xe0, 0xdf, 0x87,
	0x73, 0xb1, 0x5b, 0xb7, 0x2c, 0x31, 0x05, 0x4e, 0xba, 0x98, 0x3b, 0xea, 0x08, 0x1a, 0xf2, 0xbe,
	0x1e, 0x5b, 0x4c, 0xbb, 0xd1, 0x16, 0x70, 0xbc, 0x9a, 0x81, 0x81, 0xac, 0xbe, 0x17, 0x7c, 0x7b,
	0x4e, 0x8e, 0xe3, 0x66, 0x46, 0xb6, 0x1e, 0x31, 0xdb, 0xda, 0xf5, 0xa1, 0x78, 0xc8, 0xfc, 0x09,
	0x94, 0xe5, 0x45, 0x3e, 0xa6, 0x64, 0xde, 0xf2, 0xcb, 0x50, 0x8d, 0xd8, 0xd5, 0x41, 0x17, 0x2e,
	0x24, 0x7c, 0xcb, 0xc0, 0x96, 0x52, 0xef, 0xfd, 0x27, 0x7e, 0x3f, 0x51, 0xbb, 0x33, 0x32, 0x3e,
	0x0a, 0xfd, 0xdd, 0x1c, 0x54, 0xd3, 0xbe, 0xe2, 0x60, 0x89, 0x39, 0xfe, 0x90, 0x2f, 0x46, 0x6a,
	0xcb, 0xa7, 0x23, 0x92, 0xeb, 0x14, 0xb9, 0x21, 0x9a, 0xbc, 0x4e, 0x83, 0xf7, 0xd7, 0x93, 0xd7,
	0x69, 0xe0, 0xaa, 0xe9, 0x11, 0x5c, 0xce, 0x38, 0xf8, 0x63, 0xdf, 0x48, 0x62, 0x32, 0xfc, 0xa4,
	0x70, 0x04, 0x53, 0xff, 0x2e, 0x40, 0xe8, 0xe0, 0xd8, 0x8d, 0xec, 0xcf, 0x37, 0x32, 0x8d, 0xb0,
	0xff, 0xb3, 0x91, 0x9f, 0xe4, 0xa0, 0x96, 0xfe, 0x37, 0x05, 0xec, 0xfe, 0x69, 0xff, 0xd6, 0x40,
	0x88, 0x7e, 0xe7, 0x0c, 0xff, 0x86, 0xc0, 0xba, 0x32, 0x8a, 0x26, 0xfe, 0x29, 0x45, 0x4a, 0x4f,
	0x86, 0xfd, 0x89, 0xc5, 0x08, 0x73, 0xdb, 0x86, 0xb9, 0xe4, 0x3f, 0xdf, 0x60, 0xcb, 0xa9, 0x22,
	0xd3, 0xfe, 0xa8, 0x63, 0x04, 0x71, 0x2f, 0x61, 0x3e, 0xf5, 0x6c, 0x8a, 0xbd, 0x39, 0x4a, 0x51,
	0x5b, 0xe0, 0x26, 0x1b, 0x47, 0xe6, 0xb1, 0x17, 0x73, 0x61, 0x3e, 0xa1, 0x00, 0x9c, 0x25, 0x3b,
	0xf9, 0xcc, 0xae, 0x76, 0x8a, 0x7e, 0xb2, 0x97, 0xb0, 0x90, 0x7c, 0xd6, 0x76, 0x86, 0x31, 0x2f,
	0x65, 0x39, 0x84, 0xc1, 0x93, 0x3c, 0xe6, 0xc2, 0xe5, 0xa7, 0x0e, 0xc7, 0x6d, 0x40, 0xe2, 0x19,
	0xcc, 0x69, 0x44, 0xdf, 0x1a, 0x05, 0x97, 0xb8, 0xfe, 0x30, 0xf0, 0x12, 0x89, 0xe0, 0x95, 0x0c,
	0x2f, 0x91, 0x52, 0x9b, 0x3f, 0x85, 0x70, 0x17, 0x2e, 0xa5, 0xd4, 0xf8, 0x93, 0xbd, 0x7f, 0xfa,
	0x81, 0xc0, 0x29, 0x84, 0xfe, 0x69, 0x0e, 0xea, 0x43, 0xea, 0xed, 0xc9, 0xce, 0x71, 0xf8, 0xe9,
	0x40, 0xed, 0xc1, 0x99, 0xe8, 0xdc, 0x0e, 0x6b, 0xc3, 0xf9, 0x81, 0x2f, 0x53, 0xd8, 0x9d, 0xec,
	0x04, 0x26, 0xfe, 0x01, 0x4d, 0x8a, 0x9a, 0x27, 0x7f, 0xee, 0xf2, 0xe3, 0x1c, 0x2c, 0x64, 0x55,
	0x19, 0xd8, 0xdd, 0xe1, 0x55, 0x9d, 0xa8, 0xbe, 0xbd, 0x9b, 0x69, 0xde, 0x29, 0xf5, 0x09, 0x8c,
	0xc1, 0x0b, 0x59, 0x15, 0x96, 0xe4, 0x38, 0x3c, 0xa4, 0x26, 0x53, 0x3b, 0x5d, 0xd7, 0xd9, 0x1f,
	0xe5, 0xc2, 0x8f, 0x41, 0xbf, 0xa4, 0xd9, 0x78, 0x30, 0xcc, 0xf0, 0xd3, 0x26, 0xe4, 0x47, 0x70,
	0x35, 0xe6, 0x01, 0x06, 0x2b, 0x80, 0xa7, 0xec, 0xc9, 0x5b, 0x23, 0xa2, 0x13, 0xef, 0xdf, 0xcb,
	0xf5, 0x9d, 0xf3, 0x0d, 0xa2, 0xdc, 0x1f, 0xea, 0x0e, 0x92, 0xea, 0x3d, 0xa7, 0xeb, 0xc6, 0x8f,
	0x22, 0x07, 0x7f, 0x83, 0xd0, 0xe5, 0xd1, 0x55, 0xe2, 0x4c, 0xd2, 0xff, 0x2a, 0x17, 0x1e, 0x03,
	0xa6, 0x17, 0x73, 0xd8, 0xfb, 0x59, 0x86, 0x9e, 0x59, 0x80, 0xaa, 0x7d, 0x70, 0x56, 0x52, 0xb7,
	0xc3, 0x7e, 0x9a, 0x83, 0x85, 0xac, 0x7f, 0xc9, 0x60, 0x0f, 0x4e, 0xff, 0xbf, 0x1a, 0xc2, 0x7b,
	0xdc, 0x3f, 0xd3, 0x1f, 0x72, 0xb0, 0x7d, 0x98, 0xee, 0xab, 0x39, 0x24, 0xc7, 0xa9, 0xe4, 0xda,
	0x55, 0xb2, 0xd7, 0x4e, 0xac, 0x3f, 0xb5, 0xe4, 0x07, 0xcf, 0xf1, 0x5d, 0xfb, 0xb0, 0x9d, 0x42,
	0x62, 0x79, 0x62, 0x84, 0xbc, 0xe7, 0x07, 0x30, 0xd3, 0x5f, 0x20, 0x60, 0x89, 0x6a, 0x94, 0x52,
	0x01, 0xa9, 0xdd, 0x1e, 0x0d, 0x19, 0x47, 0xf6, 0x9b, 0x30, 0x15, 0xff, 0x7b, 0x36, 0x76, 0x3b,
	0xc3, 0xca, 0xe2, 0x7f, 0xe1, 0x36, 0x7c, 0x28, 0x6b, 0xb3, 0xff, 0xfa, 0xf9, 0xd5, 0xdc, 0xbf,
	0x7f, 0x7e, 0x35, 0xf7, 0x5f, 0x9f, 0x5f, 0xcd, 0xfd, 0xe5, 0x7f, 0x5f, 0xfd, 0xda, 0xaf, 0xe7,
	0x0f, 0x97, 0xf7, 0x4a, 0xf4, 0xd7, 0x70, 0xef, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66,
	0x8f, 0x47, 0x85, 0x6a, 0x4e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EsportsClient is the client API for Esports service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EsportsClient interface {
	//添加预约
	LiveAddFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*NoArgRequest, error)
	//删除预约
	LiveDelFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*NoArgRequest, error)
	//赛程数据 没有数据返回 -404
	LiveContests(ctx context.Context, in *LiveContestsRequest, opts ...grpc.CallOption) (*LiveContestsReply, error)
	//赛程订阅用户列表
	SubContestUsers(ctx context.Context, in *SubContestsRequest, opts ...grpc.CallOption) (*FavedUsersReply, error)
	//按时间赛程列表
	StimeContests(ctx context.Context, in *StimeContestsRequest, opts ...grpc.CallOption) (*LiveContestsReply, error)
	//游戏数据
	Games(ctx context.Context, in *GamesRequest, opts ...grpc.CallOption) (*GamesReply, error)
	//赛程列表
	ContestList(ctx context.Context, in *ContestListRequest, opts ...grpc.CallOption) (*ContestListReply, error)
	//赛程游戏
	GameMap(ctx context.Context, in *GameMapRequest, opts ...grpc.CallOption) (*GameMapReply, error)
	// 清除用户预测缓存(赛季下的预测缓存)
	ClearUserGuessCache(ctx context.Context, in *ClearUserGuessCacheRequest, opts ...grpc.CallOption) (*ClearUserGuessCacheReply, error)
	// 基于赛程id更新关联赛季的预测版本
	UpdateSeasonGuessVersion(ctx context.Context, in *UpdateSeasonGuessVersionRequest, opts ...grpc.CallOption) (*UpdateSeasonGuessVersionReply, error)
	//OTT赛程数据无缓存
	OttContests(ctx context.Context, in *OttContestsRequest, opts ...grpc.CallOption) (*OttContestsReply, error)
	//刷新ContestDataPage缓存
	RefreshContestDataPageCache(ctx context.Context, in *RefreshContestDataPageCacheRequest, opts ...grpc.CallOption) (*NoArgRequest, error)
	// 清除赛事缓存数据
	ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheReply, error)
	// 赛程组件信息
	ComponentSeasonContestList(ctx context.Context, in *ComponentSeasonContestListRequest, opts ...grpc.CallOption) (*ComponentSeasonContestListReply, error)
	// 清除赛程缓存缓存数据
	ClearComponentContestCache(ctx context.Context, in *ClearComponentContestCacheRequest, opts ...grpc.CallOption) (*NoArgRequest, error)
	// 清除赛事下的赛季列表缓存数据
	ClearMatchSeasonsCache(ctx context.Context, in *ClearMatchSeasonsCacheRequest, opts ...grpc.CallOption) (*NoArgRequest, error)
	// 积分赛-添加积分赛配置
	AddSeriesPointMatchConfig(ctx context.Context, in *SeriesPointMatchConfig, opts ...grpc.CallOption) (*AddSeriesPointMatchConfigResp, error)
	// 积分赛-查看积分赛配置
	GetSeriesPointMatchConfig(ctx context.Context, in *GetSeriesPointMatchReq, opts ...grpc.CallOption) (*SeriesPointMatchConfig, error)
	// 积分赛-修改积分赛配置
	UpdateSeriesPointMatchConfig(ctx context.Context, in *SeriesPointMatchConfig, opts ...grpc.CallOption) (*UpdateSeriesPointMatchResp, error)
	// 积分赛-积分表预览
	PreviewSeriesPointMatchInfo(ctx context.Context, in *SeriesPointMatchConfig, opts ...grpc.CallOption) (*SeriesPointMatchInfo, error)
	// 积分赛-刷新线上积分表
	RefreshSeriesPointMatchInfo(ctx context.Context, in *RefreshSeriesPointMatchInfoReq, opts ...grpc.CallOption) (*SeriesPointMatchInfo, error)
	// 积分赛-查看线上积分表
	GetSeriesPointMatchInfo(ctx context.Context, in *GetSeriesPointMatchInfoReq, opts ...grpc.CallOption) (*SeriesPointMatchInfo, error)
	// 积分赛-查看积分表生成状态
	IsSeriesPointMatchInfoGenerated(ctx context.Context, in *IsSeriesPointMatchInfoGeneratedReq, opts ...grpc.CallOption) (*IsSeriesPointMatchInfoGeneratedResp, error)
	//赛程订阅用户列表新接口
	SubContestUsersV2(ctx context.Context, in *SubContestUsersV2Request, opts ...grpc.CallOption) (*SubContestUsersV2Reply, error)
	// 淘汰赛-添加淘汰赛配置
	AddSeriesKnockoutMatchConfig(ctx context.Context, in *SeriesKnockoutMatchConfig, opts ...grpc.CallOption) (*AddSeriesKnockoutMatchConfigResp, error)
	// 淘汰赛-查看淘汰赛配置
	GetSeriesKnockoutMatchConfig(ctx context.Context, in *GetSeriesKnockoutMatchConfigReq, opts ...grpc.CallOption) (*SeriesKnockoutMatchConfig, error)
	// 淘汰赛-修改淘汰赛配置
	UpdateSeriesKnockoutMatchConfig(ctx context.Context, in *SeriesKnockoutMatchConfig, opts ...grpc.CallOption) (*UpdateSeriesKnockoutMatchConfigResp, error)
	// 淘汰赛-树状图预览
	PreviewSeriesKnockoutMatchInfo(ctx context.Context, in *SeriesKnockoutMatchConfig, opts ...grpc.CallOption) (*SeriesKnockoutMatchInfo, error)
	// 淘汰赛-刷新线上树状图
	RefreshSeriesKnockoutMatchInfo(ctx context.Context, in *RefreshSeriesKnockoutMatchInfoReq, opts ...grpc.CallOption) (*SeriesKnockoutMatchInfo, error)
	// 淘汰赛-查看线上树状图
	GetSeriesKnockoutMatchInfo(ctx context.Context, in *GetSeriesKnockoutMatchInfoReq, opts ...grpc.CallOption) (*SeriesKnockoutMatchInfo, error)
	// 淘汰赛-查看线上树状图生成状态
	IsSeriesKnockoutMatchInfoGenerated(ctx context.Context, in *IsSeriesKnockoutMatchInfoGeneratedReq, opts ...grpc.CallOption) (*IsSeriesKnockoutMatchInfoGeneratedResp, error)
	// 赛程组件吃鸡类比赛
	ComponentSeasonContestBattle(ctx context.Context, in *ComponentSeasonContestBattleRequest, opts ...grpc.CallOption) (*ComponentSeasonContestBattleReply, error)
	// 视频库联动筛选
	VideoListFilter(ctx context.Context, in *VideoListFilterRequest, opts ...grpc.CallOption) (*VideoListFilterReply, error)
	// 清除专题页视频组件缓存
	ClearTopicVideoListCache(ctx context.Context, in *ClearTopicVideoListRequest, opts ...grpc.CallOption) (*NoArgRequest, error)
	// 专题页视频组件Es获取视频ID
	EsTopicVideoList(ctx context.Context, in *EsTopicVideoListRequest, opts ...grpc.CallOption) (*EsTopicVideoListReply, error)
	// Lol大数据页刷新缓存
	RefreshLolData(ctx context.Context, in *RefreshLolDataRequest, opts ...grpc.CallOption) (*NoArgRequest, error)
}

type esportsClient struct {
	cc *grpc.ClientConn
}

func NewEsportsClient(cc *grpc.ClientConn) EsportsClient {
	return &esportsClient{cc}
}

func (c *esportsClient) LiveAddFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*NoArgRequest, error) {
	out := new(NoArgRequest)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/LiveAddFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) LiveDelFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*NoArgRequest, error) {
	out := new(NoArgRequest)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/LiveDelFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) LiveContests(ctx context.Context, in *LiveContestsRequest, opts ...grpc.CallOption) (*LiveContestsReply, error) {
	out := new(LiveContestsReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/LiveContests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) SubContestUsers(ctx context.Context, in *SubContestsRequest, opts ...grpc.CallOption) (*FavedUsersReply, error) {
	out := new(FavedUsersReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/SubContestUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) StimeContests(ctx context.Context, in *StimeContestsRequest, opts ...grpc.CallOption) (*LiveContestsReply, error) {
	out := new(LiveContestsReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/StimeContests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) Games(ctx context.Context, in *GamesRequest, opts ...grpc.CallOption) (*GamesReply, error) {
	out := new(GamesReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/Games", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) ContestList(ctx context.Context, in *ContestListRequest, opts ...grpc.CallOption) (*ContestListReply, error) {
	out := new(ContestListReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/ContestList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) GameMap(ctx context.Context, in *GameMapRequest, opts ...grpc.CallOption) (*GameMapReply, error) {
	out := new(GameMapReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/GameMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) ClearUserGuessCache(ctx context.Context, in *ClearUserGuessCacheRequest, opts ...grpc.CallOption) (*ClearUserGuessCacheReply, error) {
	out := new(ClearUserGuessCacheReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/ClearUserGuessCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) UpdateSeasonGuessVersion(ctx context.Context, in *UpdateSeasonGuessVersionRequest, opts ...grpc.CallOption) (*UpdateSeasonGuessVersionReply, error) {
	out := new(UpdateSeasonGuessVersionReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/UpdateSeasonGuessVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) OttContests(ctx context.Context, in *OttContestsRequest, opts ...grpc.CallOption) (*OttContestsReply, error) {
	out := new(OttContestsReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/OttContests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) RefreshContestDataPageCache(ctx context.Context, in *RefreshContestDataPageCacheRequest, opts ...grpc.CallOption) (*NoArgRequest, error) {
	out := new(NoArgRequest)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/RefreshContestDataPageCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) ClearCache(ctx context.Context, in *ClearCacheRequest, opts ...grpc.CallOption) (*ClearCacheReply, error) {
	out := new(ClearCacheReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/ClearCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) ComponentSeasonContestList(ctx context.Context, in *ComponentSeasonContestListRequest, opts ...grpc.CallOption) (*ComponentSeasonContestListReply, error) {
	out := new(ComponentSeasonContestListReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/ComponentSeasonContestList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) ClearComponentContestCache(ctx context.Context, in *ClearComponentContestCacheRequest, opts ...grpc.CallOption) (*NoArgRequest, error) {
	out := new(NoArgRequest)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/ClearComponentContestCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) ClearMatchSeasonsCache(ctx context.Context, in *ClearMatchSeasonsCacheRequest, opts ...grpc.CallOption) (*NoArgRequest, error) {
	out := new(NoArgRequest)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/ClearMatchSeasonsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) AddSeriesPointMatchConfig(ctx context.Context, in *SeriesPointMatchConfig, opts ...grpc.CallOption) (*AddSeriesPointMatchConfigResp, error) {
	out := new(AddSeriesPointMatchConfigResp)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/AddSeriesPointMatchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) GetSeriesPointMatchConfig(ctx context.Context, in *GetSeriesPointMatchReq, opts ...grpc.CallOption) (*SeriesPointMatchConfig, error) {
	out := new(SeriesPointMatchConfig)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/GetSeriesPointMatchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) UpdateSeriesPointMatchConfig(ctx context.Context, in *SeriesPointMatchConfig, opts ...grpc.CallOption) (*UpdateSeriesPointMatchResp, error) {
	out := new(UpdateSeriesPointMatchResp)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/UpdateSeriesPointMatchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) PreviewSeriesPointMatchInfo(ctx context.Context, in *SeriesPointMatchConfig, opts ...grpc.CallOption) (*SeriesPointMatchInfo, error) {
	out := new(SeriesPointMatchInfo)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/PreviewSeriesPointMatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) RefreshSeriesPointMatchInfo(ctx context.Context, in *RefreshSeriesPointMatchInfoReq, opts ...grpc.CallOption) (*SeriesPointMatchInfo, error) {
	out := new(SeriesPointMatchInfo)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/RefreshSeriesPointMatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) GetSeriesPointMatchInfo(ctx context.Context, in *GetSeriesPointMatchInfoReq, opts ...grpc.CallOption) (*SeriesPointMatchInfo, error) {
	out := new(SeriesPointMatchInfo)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/GetSeriesPointMatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) IsSeriesPointMatchInfoGenerated(ctx context.Context, in *IsSeriesPointMatchInfoGeneratedReq, opts ...grpc.CallOption) (*IsSeriesPointMatchInfoGeneratedResp, error) {
	out := new(IsSeriesPointMatchInfoGeneratedResp)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/IsSeriesPointMatchInfoGenerated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) SubContestUsersV2(ctx context.Context, in *SubContestUsersV2Request, opts ...grpc.CallOption) (*SubContestUsersV2Reply, error) {
	out := new(SubContestUsersV2Reply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/SubContestUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) AddSeriesKnockoutMatchConfig(ctx context.Context, in *SeriesKnockoutMatchConfig, opts ...grpc.CallOption) (*AddSeriesKnockoutMatchConfigResp, error) {
	out := new(AddSeriesKnockoutMatchConfigResp)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/AddSeriesKnockoutMatchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) GetSeriesKnockoutMatchConfig(ctx context.Context, in *GetSeriesKnockoutMatchConfigReq, opts ...grpc.CallOption) (*SeriesKnockoutMatchConfig, error) {
	out := new(SeriesKnockoutMatchConfig)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/GetSeriesKnockoutMatchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) UpdateSeriesKnockoutMatchConfig(ctx context.Context, in *SeriesKnockoutMatchConfig, opts ...grpc.CallOption) (*UpdateSeriesKnockoutMatchConfigResp, error) {
	out := new(UpdateSeriesKnockoutMatchConfigResp)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/UpdateSeriesKnockoutMatchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) PreviewSeriesKnockoutMatchInfo(ctx context.Context, in *SeriesKnockoutMatchConfig, opts ...grpc.CallOption) (*SeriesKnockoutMatchInfo, error) {
	out := new(SeriesKnockoutMatchInfo)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/PreviewSeriesKnockoutMatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) RefreshSeriesKnockoutMatchInfo(ctx context.Context, in *RefreshSeriesKnockoutMatchInfoReq, opts ...grpc.CallOption) (*SeriesKnockoutMatchInfo, error) {
	out := new(SeriesKnockoutMatchInfo)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/RefreshSeriesKnockoutMatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) GetSeriesKnockoutMatchInfo(ctx context.Context, in *GetSeriesKnockoutMatchInfoReq, opts ...grpc.CallOption) (*SeriesKnockoutMatchInfo, error) {
	out := new(SeriesKnockoutMatchInfo)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/GetSeriesKnockoutMatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) IsSeriesKnockoutMatchInfoGenerated(ctx context.Context, in *IsSeriesKnockoutMatchInfoGeneratedReq, opts ...grpc.CallOption) (*IsSeriesKnockoutMatchInfoGeneratedResp, error) {
	out := new(IsSeriesKnockoutMatchInfoGeneratedResp)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/IsSeriesKnockoutMatchInfoGenerated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) ComponentSeasonContestBattle(ctx context.Context, in *ComponentSeasonContestBattleRequest, opts ...grpc.CallOption) (*ComponentSeasonContestBattleReply, error) {
	out := new(ComponentSeasonContestBattleReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/ComponentSeasonContestBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) VideoListFilter(ctx context.Context, in *VideoListFilterRequest, opts ...grpc.CallOption) (*VideoListFilterReply, error) {
	out := new(VideoListFilterReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/VideoListFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) ClearTopicVideoListCache(ctx context.Context, in *ClearTopicVideoListRequest, opts ...grpc.CallOption) (*NoArgRequest, error) {
	out := new(NoArgRequest)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/ClearTopicVideoListCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) EsTopicVideoList(ctx context.Context, in *EsTopicVideoListRequest, opts ...grpc.CallOption) (*EsTopicVideoListReply, error) {
	out := new(EsTopicVideoListReply)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/EsTopicVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsClient) RefreshLolData(ctx context.Context, in *RefreshLolDataRequest, opts ...grpc.CallOption) (*NoArgRequest, error) {
	out := new(NoArgRequest)
	err := c.cc.Invoke(ctx, "/esports.service.v1.Esports/RefreshLolData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EsportsServer is the server API for Esports service.
type EsportsServer interface {
	//添加预约
	LiveAddFav(context.Context, *FavRequest) (*NoArgRequest, error)
	//删除预约
	LiveDelFav(context.Context, *FavRequest) (*NoArgRequest, error)
	//赛程数据 没有数据返回 -404
	LiveContests(context.Context, *LiveContestsRequest) (*LiveContestsReply, error)
	//赛程订阅用户列表
	SubContestUsers(context.Context, *SubContestsRequest) (*FavedUsersReply, error)
	//按时间赛程列表
	StimeContests(context.Context, *StimeContestsRequest) (*LiveContestsReply, error)
	//游戏数据
	Games(context.Context, *GamesRequest) (*GamesReply, error)
	//赛程列表
	ContestList(context.Context, *ContestListRequest) (*ContestListReply, error)
	//赛程游戏
	GameMap(context.Context, *GameMapRequest) (*GameMapReply, error)
	// 清除用户预测缓存(赛季下的预测缓存)
	ClearUserGuessCache(context.Context, *ClearUserGuessCacheRequest) (*ClearUserGuessCacheReply, error)
	// 基于赛程id更新关联赛季的预测版本
	UpdateSeasonGuessVersion(context.Context, *UpdateSeasonGuessVersionRequest) (*UpdateSeasonGuessVersionReply, error)
	//OTT赛程数据无缓存
	OttContests(context.Context, *OttContestsRequest) (*OttContestsReply, error)
	//刷新ContestDataPage缓存
	RefreshContestDataPageCache(context.Context, *RefreshContestDataPageCacheRequest) (*NoArgRequest, error)
	// 清除赛事缓存数据
	ClearCache(context.Context, *ClearCacheRequest) (*ClearCacheReply, error)
	// 赛程组件信息
	ComponentSeasonContestList(context.Context, *ComponentSeasonContestListRequest) (*ComponentSeasonContestListReply, error)
	// 清除赛程缓存缓存数据
	ClearComponentContestCache(context.Context, *ClearComponentContestCacheRequest) (*NoArgRequest, error)
	// 清除赛事下的赛季列表缓存数据
	ClearMatchSeasonsCache(context.Context, *ClearMatchSeasonsCacheRequest) (*NoArgRequest, error)
	// 积分赛-添加积分赛配置
	AddSeriesPointMatchConfig(context.Context, *SeriesPointMatchConfig) (*AddSeriesPointMatchConfigResp, error)
	// 积分赛-查看积分赛配置
	GetSeriesPointMatchConfig(context.Context, *GetSeriesPointMatchReq) (*SeriesPointMatchConfig, error)
	// 积分赛-修改积分赛配置
	UpdateSeriesPointMatchConfig(context.Context, *SeriesPointMatchConfig) (*UpdateSeriesPointMatchResp, error)
	// 积分赛-积分表预览
	PreviewSeriesPointMatchInfo(context.Context, *SeriesPointMatchConfig) (*SeriesPointMatchInfo, error)
	// 积分赛-刷新线上积分表
	RefreshSeriesPointMatchInfo(context.Context, *RefreshSeriesPointMatchInfoReq) (*SeriesPointMatchInfo, error)
	// 积分赛-查看线上积分表
	GetSeriesPointMatchInfo(context.Context, *GetSeriesPointMatchInfoReq) (*SeriesPointMatchInfo, error)
	// 积分赛-查看积分表生成状态
	IsSeriesPointMatchInfoGenerated(context.Context, *IsSeriesPointMatchInfoGeneratedReq) (*IsSeriesPointMatchInfoGeneratedResp, error)
	//赛程订阅用户列表新接口
	SubContestUsersV2(context.Context, *SubContestUsersV2Request) (*SubContestUsersV2Reply, error)
	// 淘汰赛-添加淘汰赛配置
	AddSeriesKnockoutMatchConfig(context.Context, *SeriesKnockoutMatchConfig) (*AddSeriesKnockoutMatchConfigResp, error)
	// 淘汰赛-查看淘汰赛配置
	GetSeriesKnockoutMatchConfig(context.Context, *GetSeriesKnockoutMatchConfigReq) (*SeriesKnockoutMatchConfig, error)
	// 淘汰赛-修改淘汰赛配置
	UpdateSeriesKnockoutMatchConfig(context.Context, *SeriesKnockoutMatchConfig) (*UpdateSeriesKnockoutMatchConfigResp, error)
	// 淘汰赛-树状图预览
	PreviewSeriesKnockoutMatchInfo(context.Context, *SeriesKnockoutMatchConfig) (*SeriesKnockoutMatchInfo, error)
	// 淘汰赛-刷新线上树状图
	RefreshSeriesKnockoutMatchInfo(context.Context, *RefreshSeriesKnockoutMatchInfoReq) (*SeriesKnockoutMatchInfo, error)
	// 淘汰赛-查看线上树状图
	GetSeriesKnockoutMatchInfo(context.Context, *GetSeriesKnockoutMatchInfoReq) (*SeriesKnockoutMatchInfo, error)
	// 淘汰赛-查看线上树状图生成状态
	IsSeriesKnockoutMatchInfoGenerated(context.Context, *IsSeriesKnockoutMatchInfoGeneratedReq) (*IsSeriesKnockoutMatchInfoGeneratedResp, error)
	// 赛程组件吃鸡类比赛
	ComponentSeasonContestBattle(context.Context, *ComponentSeasonContestBattleRequest) (*ComponentSeasonContestBattleReply, error)
	// 视频库联动筛选
	VideoListFilter(context.Context, *VideoListFilterRequest) (*VideoListFilterReply, error)
	// 清除专题页视频组件缓存
	ClearTopicVideoListCache(context.Context, *ClearTopicVideoListRequest) (*NoArgRequest, error)
	// 专题页视频组件Es获取视频ID
	EsTopicVideoList(context.Context, *EsTopicVideoListRequest) (*EsTopicVideoListReply, error)
	// Lol大数据页刷新缓存
	RefreshLolData(context.Context, *RefreshLolDataRequest) (*NoArgRequest, error)
}

// UnimplementedEsportsServer can be embedded to have forward compatible implementations.
type UnimplementedEsportsServer struct {
}

func (*UnimplementedEsportsServer) LiveAddFav(ctx context.Context, req *FavRequest) (*NoArgRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveAddFav not implemented")
}
func (*UnimplementedEsportsServer) LiveDelFav(ctx context.Context, req *FavRequest) (*NoArgRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveDelFav not implemented")
}
func (*UnimplementedEsportsServer) LiveContests(ctx context.Context, req *LiveContestsRequest) (*LiveContestsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveContests not implemented")
}
func (*UnimplementedEsportsServer) SubContestUsers(ctx context.Context, req *SubContestsRequest) (*FavedUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubContestUsers not implemented")
}
func (*UnimplementedEsportsServer) StimeContests(ctx context.Context, req *StimeContestsRequest) (*LiveContestsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StimeContests not implemented")
}
func (*UnimplementedEsportsServer) Games(ctx context.Context, req *GamesRequest) (*GamesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Games not implemented")
}
func (*UnimplementedEsportsServer) ContestList(ctx context.Context, req *ContestListRequest) (*ContestListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContestList not implemented")
}
func (*UnimplementedEsportsServer) GameMap(ctx context.Context, req *GameMapRequest) (*GameMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameMap not implemented")
}
func (*UnimplementedEsportsServer) ClearUserGuessCache(ctx context.Context, req *ClearUserGuessCacheRequest) (*ClearUserGuessCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserGuessCache not implemented")
}
func (*UnimplementedEsportsServer) UpdateSeasonGuessVersion(ctx context.Context, req *UpdateSeasonGuessVersionRequest) (*UpdateSeasonGuessVersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeasonGuessVersion not implemented")
}
func (*UnimplementedEsportsServer) OttContests(ctx context.Context, req *OttContestsRequest) (*OttContestsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OttContests not implemented")
}
func (*UnimplementedEsportsServer) RefreshContestDataPageCache(ctx context.Context, req *RefreshContestDataPageCacheRequest) (*NoArgRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshContestDataPageCache not implemented")
}
func (*UnimplementedEsportsServer) ClearCache(ctx context.Context, req *ClearCacheRequest) (*ClearCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCache not implemented")
}
func (*UnimplementedEsportsServer) ComponentSeasonContestList(ctx context.Context, req *ComponentSeasonContestListRequest) (*ComponentSeasonContestListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComponentSeasonContestList not implemented")
}
func (*UnimplementedEsportsServer) ClearComponentContestCache(ctx context.Context, req *ClearComponentContestCacheRequest) (*NoArgRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearComponentContestCache not implemented")
}
func (*UnimplementedEsportsServer) ClearMatchSeasonsCache(ctx context.Context, req *ClearMatchSeasonsCacheRequest) (*NoArgRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearMatchSeasonsCache not implemented")
}
func (*UnimplementedEsportsServer) AddSeriesPointMatchConfig(ctx context.Context, req *SeriesPointMatchConfig) (*AddSeriesPointMatchConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeriesPointMatchConfig not implemented")
}
func (*UnimplementedEsportsServer) GetSeriesPointMatchConfig(ctx context.Context, req *GetSeriesPointMatchReq) (*SeriesPointMatchConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesPointMatchConfig not implemented")
}
func (*UnimplementedEsportsServer) UpdateSeriesPointMatchConfig(ctx context.Context, req *SeriesPointMatchConfig) (*UpdateSeriesPointMatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeriesPointMatchConfig not implemented")
}
func (*UnimplementedEsportsServer) PreviewSeriesPointMatchInfo(ctx context.Context, req *SeriesPointMatchConfig) (*SeriesPointMatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewSeriesPointMatchInfo not implemented")
}
func (*UnimplementedEsportsServer) RefreshSeriesPointMatchInfo(ctx context.Context, req *RefreshSeriesPointMatchInfoReq) (*SeriesPointMatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSeriesPointMatchInfo not implemented")
}
func (*UnimplementedEsportsServer) GetSeriesPointMatchInfo(ctx context.Context, req *GetSeriesPointMatchInfoReq) (*SeriesPointMatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesPointMatchInfo not implemented")
}
func (*UnimplementedEsportsServer) IsSeriesPointMatchInfoGenerated(ctx context.Context, req *IsSeriesPointMatchInfoGeneratedReq) (*IsSeriesPointMatchInfoGeneratedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSeriesPointMatchInfoGenerated not implemented")
}
func (*UnimplementedEsportsServer) SubContestUsersV2(ctx context.Context, req *SubContestUsersV2Request) (*SubContestUsersV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubContestUsersV2 not implemented")
}
func (*UnimplementedEsportsServer) AddSeriesKnockoutMatchConfig(ctx context.Context, req *SeriesKnockoutMatchConfig) (*AddSeriesKnockoutMatchConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeriesKnockoutMatchConfig not implemented")
}
func (*UnimplementedEsportsServer) GetSeriesKnockoutMatchConfig(ctx context.Context, req *GetSeriesKnockoutMatchConfigReq) (*SeriesKnockoutMatchConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesKnockoutMatchConfig not implemented")
}
func (*UnimplementedEsportsServer) UpdateSeriesKnockoutMatchConfig(ctx context.Context, req *SeriesKnockoutMatchConfig) (*UpdateSeriesKnockoutMatchConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeriesKnockoutMatchConfig not implemented")
}
func (*UnimplementedEsportsServer) PreviewSeriesKnockoutMatchInfo(ctx context.Context, req *SeriesKnockoutMatchConfig) (*SeriesKnockoutMatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewSeriesKnockoutMatchInfo not implemented")
}
func (*UnimplementedEsportsServer) RefreshSeriesKnockoutMatchInfo(ctx context.Context, req *RefreshSeriesKnockoutMatchInfoReq) (*SeriesKnockoutMatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSeriesKnockoutMatchInfo not implemented")
}
func (*UnimplementedEsportsServer) GetSeriesKnockoutMatchInfo(ctx context.Context, req *GetSeriesKnockoutMatchInfoReq) (*SeriesKnockoutMatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeriesKnockoutMatchInfo not implemented")
}
func (*UnimplementedEsportsServer) IsSeriesKnockoutMatchInfoGenerated(ctx context.Context, req *IsSeriesKnockoutMatchInfoGeneratedReq) (*IsSeriesKnockoutMatchInfoGeneratedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSeriesKnockoutMatchInfoGenerated not implemented")
}
func (*UnimplementedEsportsServer) ComponentSeasonContestBattle(ctx context.Context, req *ComponentSeasonContestBattleRequest) (*ComponentSeasonContestBattleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComponentSeasonContestBattle not implemented")
}
func (*UnimplementedEsportsServer) VideoListFilter(ctx context.Context, req *VideoListFilterRequest) (*VideoListFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoListFilter not implemented")
}
func (*UnimplementedEsportsServer) ClearTopicVideoListCache(ctx context.Context, req *ClearTopicVideoListRequest) (*NoArgRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTopicVideoListCache not implemented")
}
func (*UnimplementedEsportsServer) EsTopicVideoList(ctx context.Context, req *EsTopicVideoListRequest) (*EsTopicVideoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EsTopicVideoList not implemented")
}
func (*UnimplementedEsportsServer) RefreshLolData(ctx context.Context, req *RefreshLolDataRequest) (*NoArgRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshLolData not implemented")
}

func RegisterEsportsServer(s *grpc.Server, srv EsportsServer) {
	s.RegisterService(&_Esports_serviceDesc, srv)
}

func _Esports_LiveAddFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).LiveAddFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/LiveAddFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).LiveAddFav(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_LiveDelFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).LiveDelFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/LiveDelFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).LiveDelFav(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_LiveContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).LiveContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/LiveContests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).LiveContests(ctx, req.(*LiveContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_SubContestUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).SubContestUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/SubContestUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).SubContestUsers(ctx, req.(*SubContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_StimeContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StimeContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).StimeContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/StimeContests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).StimeContests(ctx, req.(*StimeContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_Games_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).Games(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/Games",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).Games(ctx, req.(*GamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_ContestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).ContestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/ContestList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).ContestList(ctx, req.(*ContestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_GameMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).GameMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/GameMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).GameMap(ctx, req.(*GameMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_ClearUserGuessCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUserGuessCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).ClearUserGuessCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/ClearUserGuessCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).ClearUserGuessCache(ctx, req.(*ClearUserGuessCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_UpdateSeasonGuessVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeasonGuessVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).UpdateSeasonGuessVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/UpdateSeasonGuessVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).UpdateSeasonGuessVersion(ctx, req.(*UpdateSeasonGuessVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_OttContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OttContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).OttContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/OttContests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).OttContests(ctx, req.(*OttContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_RefreshContestDataPageCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshContestDataPageCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).RefreshContestDataPageCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/RefreshContestDataPageCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).RefreshContestDataPageCache(ctx, req.(*RefreshContestDataPageCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_ClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).ClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/ClearCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).ClearCache(ctx, req.(*ClearCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_ComponentSeasonContestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentSeasonContestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).ComponentSeasonContestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/ComponentSeasonContestList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).ComponentSeasonContestList(ctx, req.(*ComponentSeasonContestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_ClearComponentContestCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearComponentContestCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).ClearComponentContestCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/ClearComponentContestCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).ClearComponentContestCache(ctx, req.(*ClearComponentContestCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_ClearMatchSeasonsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearMatchSeasonsCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).ClearMatchSeasonsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/ClearMatchSeasonsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).ClearMatchSeasonsCache(ctx, req.(*ClearMatchSeasonsCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_AddSeriesPointMatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesPointMatchConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).AddSeriesPointMatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/AddSeriesPointMatchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).AddSeriesPointMatchConfig(ctx, req.(*SeriesPointMatchConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_GetSeriesPointMatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesPointMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).GetSeriesPointMatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/GetSeriesPointMatchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).GetSeriesPointMatchConfig(ctx, req.(*GetSeriesPointMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_UpdateSeriesPointMatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesPointMatchConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).UpdateSeriesPointMatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/UpdateSeriesPointMatchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).UpdateSeriesPointMatchConfig(ctx, req.(*SeriesPointMatchConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_PreviewSeriesPointMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesPointMatchConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).PreviewSeriesPointMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/PreviewSeriesPointMatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).PreviewSeriesPointMatchInfo(ctx, req.(*SeriesPointMatchConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_RefreshSeriesPointMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSeriesPointMatchInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).RefreshSeriesPointMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/RefreshSeriesPointMatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).RefreshSeriesPointMatchInfo(ctx, req.(*RefreshSeriesPointMatchInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_GetSeriesPointMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesPointMatchInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).GetSeriesPointMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/GetSeriesPointMatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).GetSeriesPointMatchInfo(ctx, req.(*GetSeriesPointMatchInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_IsSeriesPointMatchInfoGenerated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSeriesPointMatchInfoGeneratedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).IsSeriesPointMatchInfoGenerated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/IsSeriesPointMatchInfoGenerated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).IsSeriesPointMatchInfoGenerated(ctx, req.(*IsSeriesPointMatchInfoGeneratedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_SubContestUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubContestUsersV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).SubContestUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/SubContestUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).SubContestUsersV2(ctx, req.(*SubContestUsersV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_AddSeriesKnockoutMatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesKnockoutMatchConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).AddSeriesKnockoutMatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/AddSeriesKnockoutMatchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).AddSeriesKnockoutMatchConfig(ctx, req.(*SeriesKnockoutMatchConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_GetSeriesKnockoutMatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesKnockoutMatchConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).GetSeriesKnockoutMatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/GetSeriesKnockoutMatchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).GetSeriesKnockoutMatchConfig(ctx, req.(*GetSeriesKnockoutMatchConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_UpdateSeriesKnockoutMatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesKnockoutMatchConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).UpdateSeriesKnockoutMatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/UpdateSeriesKnockoutMatchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).UpdateSeriesKnockoutMatchConfig(ctx, req.(*SeriesKnockoutMatchConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_PreviewSeriesKnockoutMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesKnockoutMatchConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).PreviewSeriesKnockoutMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/PreviewSeriesKnockoutMatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).PreviewSeriesKnockoutMatchInfo(ctx, req.(*SeriesKnockoutMatchConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_RefreshSeriesKnockoutMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSeriesKnockoutMatchInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).RefreshSeriesKnockoutMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/RefreshSeriesKnockoutMatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).RefreshSeriesKnockoutMatchInfo(ctx, req.(*RefreshSeriesKnockoutMatchInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_GetSeriesKnockoutMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesKnockoutMatchInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).GetSeriesKnockoutMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/GetSeriesKnockoutMatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).GetSeriesKnockoutMatchInfo(ctx, req.(*GetSeriesKnockoutMatchInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_IsSeriesKnockoutMatchInfoGenerated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSeriesKnockoutMatchInfoGeneratedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).IsSeriesKnockoutMatchInfoGenerated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/IsSeriesKnockoutMatchInfoGenerated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).IsSeriesKnockoutMatchInfoGenerated(ctx, req.(*IsSeriesKnockoutMatchInfoGeneratedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_ComponentSeasonContestBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentSeasonContestBattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).ComponentSeasonContestBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/ComponentSeasonContestBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).ComponentSeasonContestBattle(ctx, req.(*ComponentSeasonContestBattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_VideoListFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoListFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).VideoListFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/VideoListFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).VideoListFilter(ctx, req.(*VideoListFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_ClearTopicVideoListCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearTopicVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).ClearTopicVideoListCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/ClearTopicVideoListCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).ClearTopicVideoListCache(ctx, req.(*ClearTopicVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_EsTopicVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EsTopicVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).EsTopicVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/EsTopicVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).EsTopicVideoList(ctx, req.(*EsTopicVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Esports_RefreshLolData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshLolDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServer).RefreshLolData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.service.v1.Esports/RefreshLolData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServer).RefreshLolData(ctx, req.(*RefreshLolDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Esports_serviceDesc = grpc.ServiceDesc{
	ServiceName: "esports.service.v1.Esports",
	HandlerType: (*EsportsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiveAddFav",
			Handler:    _Esports_LiveAddFav_Handler,
		},
		{
			MethodName: "LiveDelFav",
			Handler:    _Esports_LiveDelFav_Handler,
		},
		{
			MethodName: "LiveContests",
			Handler:    _Esports_LiveContests_Handler,
		},
		{
			MethodName: "SubContestUsers",
			Handler:    _Esports_SubContestUsers_Handler,
		},
		{
			MethodName: "StimeContests",
			Handler:    _Esports_StimeContests_Handler,
		},
		{
			MethodName: "Games",
			Handler:    _Esports_Games_Handler,
		},
		{
			MethodName: "ContestList",
			Handler:    _Esports_ContestList_Handler,
		},
		{
			MethodName: "GameMap",
			Handler:    _Esports_GameMap_Handler,
		},
		{
			MethodName: "ClearUserGuessCache",
			Handler:    _Esports_ClearUserGuessCache_Handler,
		},
		{
			MethodName: "UpdateSeasonGuessVersion",
			Handler:    _Esports_UpdateSeasonGuessVersion_Handler,
		},
		{
			MethodName: "OttContests",
			Handler:    _Esports_OttContests_Handler,
		},
		{
			MethodName: "RefreshContestDataPageCache",
			Handler:    _Esports_RefreshContestDataPageCache_Handler,
		},
		{
			MethodName: "ClearCache",
			Handler:    _Esports_ClearCache_Handler,
		},
		{
			MethodName: "ComponentSeasonContestList",
			Handler:    _Esports_ComponentSeasonContestList_Handler,
		},
		{
			MethodName: "ClearComponentContestCache",
			Handler:    _Esports_ClearComponentContestCache_Handler,
		},
		{
			MethodName: "ClearMatchSeasonsCache",
			Handler:    _Esports_ClearMatchSeasonsCache_Handler,
		},
		{
			MethodName: "AddSeriesPointMatchConfig",
			Handler:    _Esports_AddSeriesPointMatchConfig_Handler,
		},
		{
			MethodName: "GetSeriesPointMatchConfig",
			Handler:    _Esports_GetSeriesPointMatchConfig_Handler,
		},
		{
			MethodName: "UpdateSeriesPointMatchConfig",
			Handler:    _Esports_UpdateSeriesPointMatchConfig_Handler,
		},
		{
			MethodName: "PreviewSeriesPointMatchInfo",
			Handler:    _Esports_PreviewSeriesPointMatchInfo_Handler,
		},
		{
			MethodName: "RefreshSeriesPointMatchInfo",
			Handler:    _Esports_RefreshSeriesPointMatchInfo_Handler,
		},
		{
			MethodName: "GetSeriesPointMatchInfo",
			Handler:    _Esports_GetSeriesPointMatchInfo_Handler,
		},
		{
			MethodName: "IsSeriesPointMatchInfoGenerated",
			Handler:    _Esports_IsSeriesPointMatchInfoGenerated_Handler,
		},
		{
			MethodName: "SubContestUsersV2",
			Handler:    _Esports_SubContestUsersV2_Handler,
		},
		{
			MethodName: "AddSeriesKnockoutMatchConfig",
			Handler:    _Esports_AddSeriesKnockoutMatchConfig_Handler,
		},
		{
			MethodName: "GetSeriesKnockoutMatchConfig",
			Handler:    _Esports_GetSeriesKnockoutMatchConfig_Handler,
		},
		{
			MethodName: "UpdateSeriesKnockoutMatchConfig",
			Handler:    _Esports_UpdateSeriesKnockoutMatchConfig_Handler,
		},
		{
			MethodName: "PreviewSeriesKnockoutMatchInfo",
			Handler:    _Esports_PreviewSeriesKnockoutMatchInfo_Handler,
		},
		{
			MethodName: "RefreshSeriesKnockoutMatchInfo",
			Handler:    _Esports_RefreshSeriesKnockoutMatchInfo_Handler,
		},
		{
			MethodName: "GetSeriesKnockoutMatchInfo",
			Handler:    _Esports_GetSeriesKnockoutMatchInfo_Handler,
		},
		{
			MethodName: "IsSeriesKnockoutMatchInfoGenerated",
			Handler:    _Esports_IsSeriesKnockoutMatchInfoGenerated_Handler,
		},
		{
			MethodName: "ComponentSeasonContestBattle",
			Handler:    _Esports_ComponentSeasonContestBattle_Handler,
		},
		{
			MethodName: "VideoListFilter",
			Handler:    _Esports_VideoListFilter_Handler,
		},
		{
			MethodName: "ClearTopicVideoListCache",
			Handler:    _Esports_ClearTopicVideoListCache_Handler,
		},
		{
			MethodName: "EsTopicVideoList",
			Handler:    _Esports_EsTopicVideoList_Handler,
		},
		{
			MethodName: "RefreshLolData",
			Handler:    _Esports_RefreshLolData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *RefreshLolDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshLolDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshLolDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeidaSid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LeidaSid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearMatchSeasonsCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearMatchSeasonsCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearMatchSeasonsCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x10
	}
	if m.MatchID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearComponentContestCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearComponentContestCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearComponentContestCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestAway != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestAway))
		i--
		dAtA[i] = 0x28
	}
	if m.ContestHome != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestHome))
		i--
		dAtA[i] = 0x20
	}
	if m.SeriesID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesID))
		i--
		dAtA[i] = 0x18
	}
	if m.ContestID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestID))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentSeasonContestListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentSeasonContestListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentSeasonContestListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentSeasonContestListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentSeasonContestListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentSeasonContestListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ComponentContestList) > 0 {
		for k := range m.ComponentContestList {
			v := m.ComponentContestList[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContestCardComponentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestCardComponentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestCardComponentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContestCardComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestCardComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestCardComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.GuessShow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessShow))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.GameState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ContestFreeze != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestFreeze))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.ContestStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Series != nil {
		{
			size, err := m.Series.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Away != nil {
		{
			size, err := m.Away.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Home != nil {
		{
			size, err := m.Home.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.IsGuess != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsGuess))
		i--
		dAtA[i] = 0x78
	}
	if m.IsSub != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsSub))
		i--
		dAtA[i] = 0x70
	}
	if m.SeriesID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesID))
		i--
		dAtA[i] = 0x68
	}
	if m.GuessType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessType))
		i--
		dAtA[i] = 0x60
	}
	if m.SeasonID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x58
	}
	if m.MatchID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchID))
		i--
		dAtA[i] = 0x50
	}
	if m.DataType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PlayBack) > 0 {
		i -= len(m.PlayBack)
		copy(dAtA[i:], m.PlayBack)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayBack)))
		i--
		dAtA[i] = 0x42
	}
	if m.LiveRoom != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveRoom))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CollectionURL) > 0 {
		i -= len(m.CollectionURL)
		copy(dAtA[i:], m.CollectionURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CollectionURL)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentSeasonContestBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentSeasonContestBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentSeasonContestBattleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ComponentSeasonContestBattleReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComponentSeasonContestBattleReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComponentSeasonContestBattleReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ComponentContestBattle) > 0 {
		for k := range m.ComponentContestBattle {
			v := m.ComponentContestBattle[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContestBattleCardComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestBattleCardComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestBattleCardComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.GuessShow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessShow))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.GameState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameState))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ContestFreeze != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestFreeze))
		i--
		dAtA[i] = 0x78
	}
	if m.ContestStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestStatus))
		i--
		dAtA[i] = 0x70
	}
	if m.IsGuess != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsGuess))
		i--
		dAtA[i] = 0x68
	}
	if m.GuessType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessType))
		i--
		dAtA[i] = 0x60
	}
	if m.IsSub != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsSub))
		i--
		dAtA[i] = 0x58
	}
	if m.SeasonID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x50
	}
	if m.MatchID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchID))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PlayBack) > 0 {
		i -= len(m.PlayBack)
		copy(dAtA[i:], m.PlayBack)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayBack)))
		i--
		dAtA[i] = 0x42
	}
	if m.LiveRoom != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveRoom))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CollectionURL) > 0 {
		i -= len(m.CollectionURL)
		copy(dAtA[i:], m.CollectionURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CollectionURL)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContestBattleCardComponentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestBattleCardComponentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestBattleCardComponentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Team4FrontendComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team4FrontendComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team4FrontendComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RegionID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RegionID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Wins != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Wins))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContestSeriesComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestSeriesComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestSeriesComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScoreID) > 0 {
		i -= len(m.ScoreID)
		copy(dAtA[i:], m.ScoreID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ScoreID)))
		i--
		dAtA[i] = 0x32
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChildTitle) > 0 {
		i -= len(m.ChildTitle)
		copy(dAtA[i:], m.ChildTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChildTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentTitle) > 0 {
		i -= len(m.ParentTitle)
		copy(dAtA[i:], m.ParentTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParentTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSeasonGuessVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeasonGuessVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeasonGuessVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatchId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSeasonGuessVersionReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeasonGuessVersionReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeasonGuessVersionReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearUserGuessCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearUserGuessCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearUserGuessCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatchId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearUserGuessCacheReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearUserGuessCacheReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearUserGuessCacheReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CacheKeys) > 0 {
		dAtA7 := make([]byte, len(m.CacheKeys)*10)
		var j6 int
		for _, num1 := range m.CacheKeys {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintApi(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if m.CacheType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CacheType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearCacheReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearCacheReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearCacheReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FailedKeys) > 0 {
		dAtA9 := make([]byte, len(m.FailedKeys)*10)
		var j8 int
		for _, num1 := range m.FailedKeys {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintApi(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CacheKeys) > 0 {
		dAtA11 := make([]byte, len(m.CacheKeys)*10)
		var j10 int
		for _, num1 := range m.CacheKeys {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintApi(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x1a
	}
	if m.CacheType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CacheType))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavedUsersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavedUsersReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavedUsersReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.User) > 0 {
		for iNdEx := len(m.User) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.User[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModelPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Typ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x20
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NoArgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoArgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FavRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiveContestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveContestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveContestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cids) > 0 {
		dAtA14 := make([]byte, len(m.Cids)*10)
		var j13 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintApi(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OttContestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OttContestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OttContestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cids) > 0 {
		dAtA16 := make([]byte, len(m.Cids)*10)
		var j15 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintApi(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubContestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubContestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubContestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StimeContestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StimeContestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StimeContestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Roomids) > 0 {
		dAtA18 := make([]byte, len(m.Roomids)*10)
		var j17 int
		for _, num1 := range m.Roomids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintApi(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Etime) > 0 {
		i -= len(m.Etime)
		copy(dAtA[i:], m.Etime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Etime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stime) > 0 {
		i -= len(m.Stime)
		copy(dAtA[i:], m.Stime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stime)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubContestUsersV2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubContestUsersV2Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubContestUsersV2Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CursorSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CursorSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Cursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cursor))
		i--
		dAtA[i] = 0x10
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubContestUsersV2Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubContestUsersV2Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubContestUsersV2Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.User) > 0 {
		for iNdEx := len(m.User) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.User[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Cursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cursor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContestListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x58
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x50
	}
	if m.GuessType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Cids) > 0 {
		dAtA20 := make([]byte, len(m.Cids)*10)
		var j19 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintApi(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sids) > 0 {
		dAtA22 := make([]byte, len(m.Sids)*10)
		var j21 int
		for _, num1 := range m.Sids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintApi(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Etime) > 0 {
		i -= len(m.Etime)
		copy(dAtA[i:], m.Etime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Etime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Stime) > 0 {
		i -= len(m.Stime)
		copy(dAtA[i:], m.Stime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Tid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x20
	}
	if m.MatchId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchId))
		i--
		dAtA[i] = 0x18
	}
	if m.Sort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContestListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contests) > 0 {
		for iNdEx := len(m.Contests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiveContestsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveContestsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveContestsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contests) > 0 {
		for iNdEx := len(m.Contests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OttContestsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OttContestsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OttContestsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contests) > 0 {
		for iNdEx := len(m.Contests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gids) > 0 {
		dAtA25 := make([]byte, len(m.Gids)*10)
		var j24 int
		for _, num1 := range m.Gids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintApi(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GamesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GamesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Games) > 0 {
		for iNdEx := len(m.Games) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Games[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cids) > 0 {
		dAtA27 := make([]byte, len(m.Cids)*10)
		var j26 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		i -= j26
		copy(dAtA[i:], dAtA27[:j26])
		i = encodeVarintApi(dAtA, i, uint64(j26))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameMapReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMapReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameMapReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Games) > 0 {
		for k := range m.Games {
			v := m.Games[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Contest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.ContestFreeze != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestFreeze))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.OlympicShowRule != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OlympicShowRule))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.IsOlympic {
		i--
		if m.IsOlympic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if len(m.GuessLink) > 0 {
		i -= len(m.GuessLink)
		copy(dAtA[i:], m.GuessLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GuessLink)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.CanGuess {
		i--
		if m.CanGuess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if len(m.JumpURL) > 0 {
		i -= len(m.JumpURL)
		copy(dAtA[i:], m.JumpURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpURL)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.GameStage2) > 0 {
		i -= len(m.GameStage2)
		copy(dAtA[i:], m.GameStage2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage2)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.GameStage1) > 0 {
		i -= len(m.GameStage1)
		copy(dAtA[i:], m.GameStage1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage1)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.GuessShow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessShow))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.SuccessTeaminfo != nil {
		{
			size, err := m.SuccessTeaminfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.AwayTeam != nil {
		{
			size, err := m.AwayTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.HomeTeam != nil {
		{
			size, err := m.HomeTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.MatchID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.DataType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.LiveURL) > 0 {
		i -= len(m.LiveURL)
		copy(dAtA[i:], m.LiveURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LiveURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.CollectionURL) > 0 {
		i -= len(m.CollectionURL)
		copy(dAtA[i:], m.CollectionURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CollectionURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.Playback) > 0 {
		i -= len(m.Playback)
		copy(dAtA[i:], m.Playback)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Playback)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.SpecialImage) > 0 {
		i -= len(m.SpecialImage)
		copy(dAtA[i:], m.SpecialImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SpecialTips) > 0 {
		i -= len(m.SpecialTips)
		copy(dAtA[i:], m.SpecialTips)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialTips)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SpecialName) > 0 {
		i -= len(m.SpecialName)
		copy(dAtA[i:], m.SpecialName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.SuccessTeam != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SuccessTeam))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Special != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Special))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x78
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x6a
	}
	if m.GameState != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameState))
		i--
		dAtA[i] = 0x60
	}
	if m.Collection != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Collection))
		i--
		dAtA[i] = 0x58
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x50
	}
	if m.LiveRoom != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveRoom))
		i--
		dAtA[i] = 0x48
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x40
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x38
	}
	if m.AwayID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayID))
		i--
		dAtA[i] = 0x30
	}
	if m.HomeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeID))
		i--
		dAtA[i] = 0x28
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Season) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Season) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Season) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SyncPlatform != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SyncPlatform))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.LogoFull) > 0 {
		i -= len(m.LogoFull)
		copy(dAtA[i:], m.LogoFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoFull)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.SearchImage) > 0 {
		i -= len(m.SearchImage)
		copy(dAtA[i:], m.SearchImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SearchImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.FocusURL) > 0 {
		i -= len(m.FocusURL)
		copy(dAtA[i:], m.FocusURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FocusURL)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DataFocus) > 0 {
		i -= len(m.DataFocus)
		copy(dAtA[i:], m.DataFocus)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DataFocus)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsApp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsApp))
		i--
		dAtA[i] = 0x60
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogoFull) > 0 {
		i -= len(m.LogoFull)
		copy(dAtA[i:], m.LogoFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoFull)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TeamType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeamType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Members) > 0 {
		i -= len(m.Members)
		copy(dAtA[i:], m.Members)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Members)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Area) > 0 {
		i -= len(m.Area)
		copy(dAtA[i:], m.Area)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ETitle) > 0 {
		i -= len(m.ETitle)
		copy(dAtA[i:], m.ETitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ETitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LogoFull) > 0 {
		i -= len(m.LogoFull)
		copy(dAtA[i:], m.LogoFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoFull)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PbTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PbTime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Operations) > 0 {
		i -= len(m.Operations)
		copy(dAtA[i:], m.Operations)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operations)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Publisher) > 0 {
		i -= len(m.Publisher)
		copy(dAtA[i:], m.Publisher)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Publisher)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GameType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Plat) > 0 {
		i -= len(m.Plat)
		copy(dAtA[i:], m.Plat)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Plat)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ETitle) > 0 {
		i -= len(m.ETitle)
		copy(dAtA[i:], m.ETitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ETitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshContestDataPageCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshContestDataPageCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshContestDataPageCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cids) > 0 {
		dAtA34 := make([]byte, len(m.Cids)*10)
		var j33 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		i -= j33
		copy(dAtA[i:], dAtA34[:j33])
		i = encodeVarintApi(dAtA, i, uint64(j33))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeriesPointMatchTeamConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesPointMatchTeamConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesPointMatchTeamConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Priority != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Tid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeriesPointMatchConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesPointMatchConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesPointMatchConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupOutletNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupOutletNum))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.UseTeamGroup {
		i--
		if m.UseTeamGroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SmallScoreDecrLose != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SmallScoreDecrLose))
		i--
		dAtA[i] = 0x30
	}
	if m.SmallScoreIncrWin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SmallScoreIncrWin))
		i--
		dAtA[i] = 0x28
	}
	if m.ScoreDecrLose != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ScoreDecrLose))
		i--
		dAtA[i] = 0x20
	}
	if m.ScoreIncrWin != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ScoreIncrWin))
		i--
		dAtA[i] = 0x18
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeriesPointMatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeriesPointMatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeriesPointMatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddSeriesPointMatchConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSeriesPointMatchConfigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSeriesPointMatchConfigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSeriesPointMatchResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeriesPointMatchResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeriesPointMatchResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SeriesPointMatchTeamListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesPointMatchTeamListItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesPointMatchTeamListItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeidaTid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LeidaTid))
		i--
		dAtA[i] = 0x50
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x48
	}
	if m.SmallScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SmallScore))
		i--
		dAtA[i] = 0x40
	}
	if m.Score != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x38
	}
	if m.LoseTimes != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LoseTimes))
		i--
		dAtA[i] = 0x30
	}
	if m.WinTimes != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WinTimes))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TeamName) > 0 {
		i -= len(m.TeamName)
		copy(dAtA[i:], m.TeamName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TeamName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if m.TeamId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeriesPointMatchGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesPointMatchGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesPointMatchGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupTeams) > 0 {
		for iNdEx := len(m.GroupTeams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupTeams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeriesPointMatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesPointMatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesPointMatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupOutletNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupOutletNum))
		i--
		dAtA[i] = 0x40
	}
	if m.RefreshTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.GroupTeams) > 0 {
		for iNdEx := len(m.GroupTeams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupTeams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TotalTeams) > 0 {
		for iNdEx := len(m.TotalTeams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalTeams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.UseSmallScore {
		i--
		if m.UseSmallScore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UseTeamGroup {
		i--
		if m.UseTeamGroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshSeriesPointMatchInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSeriesPointMatchInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSeriesPointMatchInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeriesPointMatchInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeriesPointMatchInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeriesPointMatchInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsSeriesPointMatchInfoGeneratedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsSeriesPointMatchInfoGeneratedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsSeriesPointMatchInfoGeneratedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsSeriesPointMatchInfoGeneratedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsSeriesPointMatchInfoGeneratedResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsSeriesPointMatchInfoGeneratedResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ViewGenerated {
		i--
		if m.ViewGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	return len(dAtA) - i, nil
}

func (m *SeriesKnockoutContestConfigItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesKnockoutContestConfigItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesKnockoutContestConfigItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ContestId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeriesKnockoutContestInfoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesKnockoutContestInfoItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesKnockoutContestInfoItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestInfo != nil {
		{
			size, err := m.ContestInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ContestFreeze != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestFreeze))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x68
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x60
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x5a
	}
	if m.WinTeamID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.WinTeamID))
		i--
		dAtA[i] = 0x50
	}
	if m.AwayTeamScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayTeamScore))
		i--
		dAtA[i] = 0x48
	}
	if m.HomeTeamScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeTeamScore))
		i--
		dAtA[i] = 0x40
	}
	if len(m.AwayTeamLogo) > 0 {
		i -= len(m.AwayTeamLogo)
		copy(dAtA[i:], m.AwayTeamLogo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwayTeamLogo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HomeTeamLogo) > 0 {
		i -= len(m.HomeTeamLogo)
		copy(dAtA[i:], m.HomeTeamLogo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HomeTeamLogo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AwayTeamName) > 0 {
		i -= len(m.AwayTeamName)
		copy(dAtA[i:], m.AwayTeamName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwayTeamName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HomeTeamName) > 0 {
		i -= len(m.HomeTeamName)
		copy(dAtA[i:], m.HomeTeamName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HomeTeamName)))
		i--
		dAtA[i] = 0x22
	}
	if m.AwayTeamID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayTeamID))
		i--
		dAtA[i] = 0x18
	}
	if m.HomeTeamID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeTeamID))
		i--
		dAtA[i] = 0x10
	}
	if m.ContestId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeriesKnockoutMatchConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesKnockoutMatchConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesKnockoutMatchConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeriesKnockoutMatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesKnockoutMatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesKnockoutMatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ToBeDeterminedTeamIds) > 0 {
		dAtA37 := make([]byte, len(m.ToBeDeterminedTeamIds)*10)
		var j36 int
		for _, num1 := range m.ToBeDeterminedTeamIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		i -= j36
		copy(dAtA[i:], dAtA37[:j36])
		i = encodeVarintApi(dAtA, i, uint64(j36))
		i--
		dAtA[i] = 0x2a
	}
	if m.RefreshTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RefreshTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeriesKnockoutMatchConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeriesKnockoutMatchConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeriesKnockoutMatchConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddSeriesKnockoutMatchConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSeriesKnockoutMatchConfigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSeriesKnockoutMatchConfigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSeriesKnockoutMatchConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeriesKnockoutMatchConfigResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeriesKnockoutMatchConfigResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetSeriesKnockoutMatchInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeriesKnockoutMatchInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeriesKnockoutMatchInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshSeriesKnockoutMatchInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSeriesKnockoutMatchInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSeriesKnockoutMatchInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsSeriesKnockoutMatchInfoGeneratedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsSeriesKnockoutMatchInfoGeneratedReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsSeriesKnockoutMatchInfoGeneratedReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsSeriesKnockoutMatchInfoGeneratedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsSeriesKnockoutMatchInfoGeneratedResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsSeriesKnockoutMatchInfoGeneratedResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ViewGenerated {
		i--
		if m.ViewGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	return len(dAtA) - i, nil
}

func (m *VideoListFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoListFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoListFilterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.YearId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.YearId))
		i--
		dAtA[i] = 0x18
	}
	if m.MatchId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoListFilterReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoListFilterReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoListFilterReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Years != nil {
		{
			size, err := m.Years.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Matchs != nil {
		{
			size, err := m.Matchs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Games != nil {
		{
			size, err := m.Games.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoListFilterItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoListFilterItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoListFilterItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoListFilterItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoListFilterItemList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoListFilterItemList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClearTopicVideoListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearTopicVideoListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearTopicVideoListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EsTopicVideoListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EsTopicVideoListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EsTopicVideoListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x28
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x20
	}
	if m.YearId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.YearId))
		i--
		dAtA[i] = 0x18
	}
	if m.MatchId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EsTopicVideoListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EsTopicVideoListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EsTopicVideoListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SearchAids) > 0 {
		dAtA43 := make([]byte, len(m.SearchAids)*10)
		var j42 int
		for _, num1 := range m.SearchAids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA43[j42] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j42++
			}
			dAtA43[j42] = uint8(num)
			j42++
		}
		i -= j42
		copy(dAtA[i:], dAtA43[:j42])
		i = encodeVarintApi(dAtA, i, uint64(j42))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RefreshLolDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeidaSid != 0 {
		n += 1 + sovApi(uint64(m.LeidaSid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearMatchSeasonsCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatchID != 0 {
		n += 1 + sovApi(uint64(m.MatchID))
	}
	if m.SeasonID != 0 {
		n += 1 + sovApi(uint64(m.SeasonID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearComponentContestCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovApi(uint64(m.SeasonID))
	}
	if m.ContestID != 0 {
		n += 1 + sovApi(uint64(m.ContestID))
	}
	if m.SeriesID != 0 {
		n += 1 + sovApi(uint64(m.SeriesID))
	}
	if m.ContestHome != 0 {
		n += 1 + sovApi(uint64(m.ContestHome))
	}
	if m.ContestAway != 0 {
		n += 1 + sovApi(uint64(m.ContestAway))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentSeasonContestListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentSeasonContestListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ComponentContestList) > 0 {
		for k, v := range m.ComponentContestList {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestCardComponentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestCardComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CollectionURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LiveRoom != 0 {
		n += 1 + sovApi(uint64(m.LiveRoom))
	}
	l = len(m.PlayBack)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovApi(uint64(m.DataType))
	}
	if m.MatchID != 0 {
		n += 1 + sovApi(uint64(m.MatchID))
	}
	if m.SeasonID != 0 {
		n += 1 + sovApi(uint64(m.SeasonID))
	}
	if m.GuessType != 0 {
		n += 1 + sovApi(uint64(m.GuessType))
	}
	if m.SeriesID != 0 {
		n += 1 + sovApi(uint64(m.SeriesID))
	}
	if m.IsSub != 0 {
		n += 1 + sovApi(uint64(m.IsSub))
	}
	if m.IsGuess != 0 {
		n += 1 + sovApi(uint64(m.IsGuess))
	}
	if m.Home != nil {
		l = m.Home.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Away != nil {
		l = m.Away.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Series != nil {
		l = m.Series.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ContestStatus != 0 {
		n += 2 + sovApi(uint64(m.ContestStatus))
	}
	if m.ContestFreeze != 0 {
		n += 2 + sovApi(uint64(m.ContestFreeze))
	}
	if m.GameState != 0 {
		n += 2 + sovApi(uint64(m.GameState))
	}
	if m.GuessShow != 0 {
		n += 2 + sovApi(uint64(m.GuessShow))
	}
	if m.HomeScore != 0 {
		n += 2 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 2 + sovApi(uint64(m.AwayScore))
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentSeasonContestBattleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComponentSeasonContestBattleReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ComponentContestBattle) > 0 {
		for k, v := range m.ComponentContestBattle {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestBattleCardComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CollectionURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LiveRoom != 0 {
		n += 1 + sovApi(uint64(m.LiveRoom))
	}
	l = len(m.PlayBack)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MatchID != 0 {
		n += 1 + sovApi(uint64(m.MatchID))
	}
	if m.SeasonID != 0 {
		n += 1 + sovApi(uint64(m.SeasonID))
	}
	if m.IsSub != 0 {
		n += 1 + sovApi(uint64(m.IsSub))
	}
	if m.GuessType != 0 {
		n += 1 + sovApi(uint64(m.GuessType))
	}
	if m.IsGuess != 0 {
		n += 1 + sovApi(uint64(m.IsGuess))
	}
	if m.ContestStatus != 0 {
		n += 1 + sovApi(uint64(m.ContestStatus))
	}
	if m.ContestFreeze != 0 {
		n += 1 + sovApi(uint64(m.ContestFreeze))
	}
	if m.GameState != 0 {
		n += 2 + sovApi(uint64(m.GameState))
	}
	if m.GuessShow != 0 {
		n += 2 + sovApi(uint64(m.GuessShow))
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestBattleCardComponentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Team4FrontendComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Wins != 0 {
		n += 1 + sovApi(uint64(m.Wins))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RegionID != 0 {
		n += 1 + sovApi(uint64(m.RegionID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestSeriesComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.ParentTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ChildTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	l = len(m.ScoreID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSeasonGuessVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MatchId != 0 {
		n += 1 + sovApi(uint64(m.MatchId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSeasonGuessVersionReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearUserGuessCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.MatchId != 0 {
		n += 1 + sovApi(uint64(m.MatchId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearUserGuessCacheReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheType != 0 {
		n += 1 + sovApi(uint64(m.CacheType))
	}
	if len(m.CacheKeys) > 0 {
		l = 0
		for _, e := range m.CacheKeys {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearCacheReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.CacheType != 0 {
		n += 1 + sovApi(uint64(m.CacheType))
	}
	if len(m.CacheKeys) > 0 {
		l = 0
		for _, e := range m.CacheKeys {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.FailedKeys) > 0 {
		l = 0
		for _, e := range m.FailedKeys {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavedUsersReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.User) > 0 {
		for _, e := range m.User {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModelPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Typ != 0 {
		n += 1 + sovApi(uint64(m.Typ))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoArgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LiveContestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OttContestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubContestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StimeContestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Etime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Roomids) > 0 {
		l = 0
		for _, e := range m.Roomids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubContestUsersV2Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Cursor != 0 {
		n += 1 + sovApi(uint64(m.Cursor))
	}
	if m.CursorSize != 0 {
		n += 1 + sovApi(uint64(m.CursorSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubContestUsersV2Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cursor != 0 {
		n += 1 + sovApi(uint64(m.Cursor))
	}
	if len(m.User) > 0 {
		for _, e := range m.User {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Sort != 0 {
		n += 1 + sovApi(uint64(m.Sort))
	}
	if m.MatchId != 0 {
		n += 1 + sovApi(uint64(m.MatchId))
	}
	if m.Tid != 0 {
		n += 1 + sovApi(uint64(m.Tid))
	}
	l = len(m.Stime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Etime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Sids) > 0 {
		l = 0
		for _, e := range m.Sids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.GuessType != 0 {
		n += 1 + sovApi(uint64(m.GuessType))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Contests) > 0 {
		for _, e := range m.Contests {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LiveContestsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contests) > 0 {
		for _, e := range m.Contests {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OttContestsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contests) > 0 {
		for _, e := range m.Contests {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gids) > 0 {
		l = 0
		for _, e := range m.Gids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GamesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameMapReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for k, v := range m.Games {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Contest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.HomeID != 0 {
		n += 1 + sovApi(uint64(m.HomeID))
	}
	if m.AwayID != 0 {
		n += 1 + sovApi(uint64(m.AwayID))
	}
	if m.HomeScore != 0 {
		n += 1 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 1 + sovApi(uint64(m.AwayScore))
	}
	if m.LiveRoom != 0 {
		n += 1 + sovApi(uint64(m.LiveRoom))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Collection != 0 {
		n += 1 + sovApi(uint64(m.Collection))
	}
	if m.GameState != 0 {
		n += 1 + sovApi(uint64(m.GameState))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 2 + sovApi(uint64(m.Mid))
	}
	if m.Special != 0 {
		n += 2 + sovApi(uint64(m.Special))
	}
	if m.SuccessTeam != 0 {
		n += 2 + sovApi(uint64(m.SuccessTeam))
	}
	l = len(m.SpecialName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialTips)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Playback)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.CollectionURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LiveURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DataType != 0 {
		n += 2 + sovApi(uint64(m.DataType))
	}
	if m.MatchID != 0 {
		n += 2 + sovApi(uint64(m.MatchID))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.HomeTeam != nil {
		l = m.HomeTeam.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.AwayTeam != nil {
		l = m.AwayTeam.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SuccessTeaminfo != nil {
		l = m.SuccessTeaminfo.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.GuessShow != 0 {
		n += 2 + sovApi(uint64(m.GuessShow))
	}
	l = len(m.GameStage1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.GameStage2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.JumpURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.CanGuess {
		n += 3
	}
	l = len(m.GuessLink)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.IsOlympic {
		n += 3
	}
	if m.OlympicShowRule != 0 {
		n += 2 + sovApi(uint64(m.OlympicShowRule))
	}
	if m.ContestFreeze != 0 {
		n += 2 + sovApi(uint64(m.ContestFreeze))
	}
	if m.ContestStatus != 0 {
		n += 2 + sovApi(uint64(m.ContestStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Season) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.IsApp != 0 {
		n += 1 + sovApi(uint64(m.IsApp))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DataFocus)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FocusURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SearchImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LogoFull)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SyncPlatform != 0 {
		n += 2 + sovApi(uint64(m.SyncPlatform))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ETitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UID != 0 {
		n += 1 + sovApi(uint64(m.UID))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Members)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TeamType != 0 {
		n += 1 + sovApi(uint64(m.TeamType))
	}
	l = len(m.LogoFull)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ETitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Plat)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GameType != 0 {
		n += 1 + sovApi(uint64(m.GameType))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operations)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PbTime != 0 {
		n += 1 + sovApi(uint64(m.PbTime))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LogoFull)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshContestDataPageCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesPointMatchTeamConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovApi(uint64(m.Tid))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovApi(uint64(m.Priority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesPointMatchConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.ScoreIncrWin != 0 {
		n += 1 + sovApi(uint64(m.ScoreIncrWin))
	}
	if m.ScoreDecrLose != 0 {
		n += 1 + sovApi(uint64(m.ScoreDecrLose))
	}
	if m.SmallScoreIncrWin != 0 {
		n += 1 + sovApi(uint64(m.SmallScoreIncrWin))
	}
	if m.SmallScoreDecrLose != 0 {
		n += 1 + sovApi(uint64(m.SmallScoreDecrLose))
	}
	if m.UseTeamGroup {
		n += 2
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.GroupOutletNum != 0 {
		n += 1 + sovApi(uint64(m.GroupOutletNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeriesPointMatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddSeriesPointMatchConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSeriesPointMatchResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesPointMatchTeamListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovApi(uint64(m.TeamId))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TeamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.WinTimes != 0 {
		n += 1 + sovApi(uint64(m.WinTimes))
	}
	if m.LoseTimes != 0 {
		n += 1 + sovApi(uint64(m.LoseTimes))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.SmallScore != 0 {
		n += 1 + sovApi(uint64(m.SmallScore))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.LeidaTid != 0 {
		n += 1 + sovApi(uint64(m.LeidaTid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesPointMatchGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.GroupTeams) > 0 {
		for _, e := range m.GroupTeams {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesPointMatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.UseTeamGroup {
		n += 2
	}
	if m.UseSmallScore {
		n += 2
	}
	if len(m.TotalTeams) > 0 {
		for _, e := range m.TotalTeams {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.GroupTeams) > 0 {
		for _, e := range m.GroupTeams {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.RefreshTime != 0 {
		n += 1 + sovApi(uint64(m.RefreshTime))
	}
	if m.GroupOutletNum != 0 {
		n += 1 + sovApi(uint64(m.GroupOutletNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshSeriesPointMatchInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeriesPointMatchInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsSeriesPointMatchInfoGeneratedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsSeriesPointMatchInfoGeneratedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewGenerated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesKnockoutContestConfigItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestId != 0 {
		n += 1 + sovApi(uint64(m.ContestId))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesKnockoutContestInfoItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestId != 0 {
		n += 1 + sovApi(uint64(m.ContestId))
	}
	if m.HomeTeamID != 0 {
		n += 1 + sovApi(uint64(m.HomeTeamID))
	}
	if m.AwayTeamID != 0 {
		n += 1 + sovApi(uint64(m.AwayTeamID))
	}
	l = len(m.HomeTeamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AwayTeamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.HomeTeamLogo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AwayTeamLogo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HomeTeamScore != 0 {
		n += 1 + sovApi(uint64(m.HomeTeamScore))
	}
	if m.AwayTeamScore != 0 {
		n += 1 + sovApi(uint64(m.AwayTeamScore))
	}
	if m.WinTeamID != 0 {
		n += 1 + sovApi(uint64(m.WinTeamID))
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.ContestFreeze != 0 {
		n += 1 + sovApi(uint64(m.ContestFreeze))
	}
	if m.ContestInfo != nil {
		l = m.ContestInfo.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesKnockoutMatchConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesKnockoutMatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.RefreshTime != 0 {
		n += 1 + sovApi(uint64(m.RefreshTime))
	}
	if len(m.ToBeDeterminedTeamIds) > 0 {
		l = 0
		for _, e := range m.ToBeDeterminedTeamIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeriesKnockoutMatchConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddSeriesKnockoutMatchConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSeriesKnockoutMatchConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeriesKnockoutMatchInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshSeriesKnockoutMatchInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsSeriesKnockoutMatchInfoGeneratedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsSeriesKnockoutMatchInfoGeneratedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewGenerated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoListFilterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.MatchId != 0 {
		n += 1 + sovApi(uint64(m.MatchId))
	}
	if m.YearId != 0 {
		n += 1 + sovApi(uint64(m.YearId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoListFilterReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Games != nil {
		l = m.Games.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Matchs != nil {
		l = m.Matchs.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Years != nil {
		l = m.Years.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoListFilterItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoListFilterItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearTopicVideoListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EsTopicVideoListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.MatchId != 0 {
		n += 1 + sovApi(uint64(m.MatchId))
	}
	if m.YearId != 0 {
		n += 1 + sovApi(uint64(m.YearId))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EsTopicVideoListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SearchAids) > 0 {
		l = 0
		for _, e := range m.SearchAids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RefreshLolDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshLolDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshLolDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeidaSid", wireType)
			}
			m.LeidaSid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeidaSid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearMatchSeasonsCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearMatchSeasonsCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearMatchSeasonsCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			m.MatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearComponentContestCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearComponentContestCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearComponentContestCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestID", wireType)
			}
			m.ContestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesID", wireType)
			}
			m.SeriesID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestHome", wireType)
			}
			m.ContestHome = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestHome |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestAway", wireType)
			}
			m.ContestAway = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestAway |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentSeasonContestListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentSeasonContestListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentSeasonContestListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentSeasonContestListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentSeasonContestListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentSeasonContestListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentContestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ComponentContestList == nil {
				m.ComponentContestList = make(map[int64]*ContestCardComponentList)
			}
			var mapkey int64
			var mapvalue *ContestCardComponentList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ContestCardComponentList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ComponentContestList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestCardComponentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestCardComponentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestCardComponentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ContestCardComponent{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestCardComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestCardComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestCardComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			m.LiveRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveRoom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayBack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayBack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			m.MatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessType", wireType)
			}
			m.GuessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesID", wireType)
			}
			m.SeriesID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSub", wireType)
			}
			m.IsSub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSub |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGuess", wireType)
			}
			m.IsGuess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGuess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Home == nil {
				m.Home = &Team4FrontendComponent{}
			}
			if err := m.Home.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Away", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Away == nil {
				m.Away = &Team4FrontendComponent{}
			}
			if err := m.Away.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Series == nil {
				m.Series = &ContestSeriesComponent{}
			}
			if err := m.Series.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestStatus", wireType)
			}
			m.ContestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestFreeze", wireType)
			}
			m.ContestFreeze = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestFreeze |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameState", wireType)
			}
			m.GameState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameState |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessShow", wireType)
			}
			m.GuessShow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessShow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentSeasonContestBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentSeasonContestBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentSeasonContestBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentSeasonContestBattleReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentSeasonContestBattleReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentSeasonContestBattleReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentContestBattle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ComponentContestBattle == nil {
				m.ComponentContestBattle = make(map[int64]*ContestBattleCardComponentList)
			}
			var mapkey int64
			var mapvalue *ContestBattleCardComponentList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ContestBattleCardComponentList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ComponentContestBattle[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestBattleCardComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestBattleCardComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestBattleCardComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			m.LiveRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveRoom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayBack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayBack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			m.MatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSub", wireType)
			}
			m.IsSub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSub |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessType", wireType)
			}
			m.GuessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGuess", wireType)
			}
			m.IsGuess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGuess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestStatus", wireType)
			}
			m.ContestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestFreeze", wireType)
			}
			m.ContestFreeze = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestFreeze |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameState", wireType)
			}
			m.GameState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameState |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessShow", wireType)
			}
			m.GuessShow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessShow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestBattleCardComponentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestBattleCardComponentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestBattleCardComponentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ContestBattleCardComponent{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team4FrontendComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team4FrontendComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team4FrontendComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionID", wireType)
			}
			m.RegionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestSeriesComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestSeriesComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestSeriesComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScoreID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSeasonGuessVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeasonGuessVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeasonGuessVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSeasonGuessVersionReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeasonGuessVersionReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeasonGuessVersionReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearUserGuessCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearUserGuessCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearUserGuessCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearUserGuessCacheReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearUserGuessCacheReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearUserGuessCacheReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheType", wireType)
			}
			m.CacheType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheType |= ClearCacheType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CacheKeys = append(m.CacheKeys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CacheKeys) == 0 {
					m.CacheKeys = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CacheKeys = append(m.CacheKeys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKeys", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearCacheReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearCacheReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearCacheReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheType", wireType)
			}
			m.CacheType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheType |= ClearCacheType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CacheKeys = append(m.CacheKeys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CacheKeys) == 0 {
					m.CacheKeys = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CacheKeys = append(m.CacheKeys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKeys", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FailedKeys = append(m.FailedKeys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FailedKeys) == 0 {
					m.FailedKeys = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FailedKeys = append(m.FailedKeys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedKeys", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavedUsersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavedUsersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavedUsersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &ModelPage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User, &User{})
			if err := m.User[len(m.User)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoArgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveContestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveContestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveContestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OttContestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OttContestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OttContestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubContestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubContestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubContestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StimeContestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StimeContestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StimeContestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Etime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roomids = append(m.Roomids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roomids) == 0 {
					m.Roomids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roomids = append(m.Roomids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomids", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubContestUsersV2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubContestUsersV2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubContestUsersV2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			m.Cursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorSize", wireType)
			}
			m.CursorSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CursorSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubContestUsersV2Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubContestUsersV2Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubContestUsersV2Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			m.Cursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User, &User{})
			if err := m.User[len(m.User)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Etime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sids = append(m.Sids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sids) == 0 {
					m.Sids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sids = append(m.Sids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sids", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessType", wireType)
			}
			m.GuessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &ModelPage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contests = append(m.Contests, &Contest{})
			if err := m.Contests[len(m.Contests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveContestsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveContestsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveContestsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contests = append(m.Contests, &Contest{})
			if err := m.Contests[len(m.Contests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OttContestsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OttContestsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OttContestsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contests = append(m.Contests, &Contest{})
			if err := m.Contests[len(m.Contests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Gids = append(m.Gids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Gids) == 0 {
					m.Gids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Gids = append(m.Gids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Gids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &Game{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMapReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameMapReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameMapReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Games == nil {
				m.Games = make(map[int64]*Game)
			}
			var mapkey int64
			var mapvalue *Game
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Game{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Games[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeID", wireType)
			}
			m.HomeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayID", wireType)
			}
			m.AwayID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			m.LiveRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveRoom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			m.Collection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collection |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameState", wireType)
			}
			m.GameState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameState |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Special", wireType)
			}
			m.Special = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Special |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessTeam", wireType)
			}
			m.SuccessTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessTeam |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialTips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialTips = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			m.MatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &Season{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeTeam == nil {
				m.HomeTeam = &Team{}
			}
			if err := m.HomeTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwayTeam == nil {
				m.AwayTeam = &Team{}
			}
			if err := m.AwayTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessTeaminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SuccessTeaminfo == nil {
				m.SuccessTeaminfo = &Team{}
			}
			if err := m.SuccessTeaminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessShow", wireType)
			}
			m.GuessShow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessShow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanGuess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanGuess = bool(v != 0)
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuessLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOlympic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOlympic = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OlympicShowRule", wireType)
			}
			m.OlympicShowRule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OlympicShowRule |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestFreeze", wireType)
			}
			m.ContestFreeze = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestFreeze |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestStatus", wireType)
			}
			m.ContestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Season) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Season: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Season: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApp", wireType)
			}
			m.IsApp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsApp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFocus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataFocus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FocusURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FocusURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPlatform", wireType)
			}
			m.SyncPlatform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncPlatform |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbTime", wireType)
			}
			m.PbTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PbTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshContestDataPageCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshContestDataPageCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshContestDataPageCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesPointMatchTeamConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesPointMatchTeamConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesPointMatchTeamConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesPointMatchConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesPointMatchConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesPointMatchConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreIncrWin", wireType)
			}
			m.ScoreIncrWin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreIncrWin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreDecrLose", wireType)
			}
			m.ScoreDecrLose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreDecrLose |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallScoreIncrWin", wireType)
			}
			m.SmallScoreIncrWin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmallScoreIncrWin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallScoreDecrLose", wireType)
			}
			m.SmallScoreDecrLose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmallScoreDecrLose |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTeamGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseTeamGroup = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &SeriesPointMatchTeamConfig{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOutletNum", wireType)
			}
			m.GroupOutletNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupOutletNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeriesPointMatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeriesPointMatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeriesPointMatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSeriesPointMatchConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSeriesPointMatchConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSeriesPointMatchConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSeriesPointMatchResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeriesPointMatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeriesPointMatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesPointMatchTeamListItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesPointMatchTeamListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesPointMatchTeamListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTimes", wireType)
			}
			m.WinTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseTimes", wireType)
			}
			m.LoseTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseTimes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallScore", wireType)
			}
			m.SmallScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SmallScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeidaTid", wireType)
			}
			m.LeidaTid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeidaTid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesPointMatchGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesPointMatchGroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesPointMatchGroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupTeams = append(m.GroupTeams, &SeriesPointMatchTeamListItem{})
			if err := m.GroupTeams[len(m.GroupTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesPointMatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesPointMatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesPointMatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTeamGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseTeamGroup = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseSmallScore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseSmallScore = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalTeams = append(m.TotalTeams, &SeriesPointMatchTeamListItem{})
			if err := m.TotalTeams[len(m.TotalTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupTeams = append(m.GroupTeams, &SeriesPointMatchGroupList{})
			if err := m.GroupTeams[len(m.GroupTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOutletNum", wireType)
			}
			m.GroupOutletNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupOutletNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSeriesPointMatchInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSeriesPointMatchInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSeriesPointMatchInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeriesPointMatchInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeriesPointMatchInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeriesPointMatchInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsSeriesPointMatchInfoGeneratedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsSeriesPointMatchInfoGeneratedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsSeriesPointMatchInfoGeneratedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsSeriesPointMatchInfoGeneratedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsSeriesPointMatchInfoGeneratedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsSeriesPointMatchInfoGeneratedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesKnockoutContestConfigItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesKnockoutContestConfigItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesKnockoutContestConfigItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &SeriesKnockoutContestConfigItem{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesKnockoutContestInfoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesKnockoutContestInfoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesKnockoutContestInfoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeamID", wireType)
			}
			m.HomeTeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeTeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeamID", wireType)
			}
			m.AwayTeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayTeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeTeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwayTeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeamLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeTeamLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeamLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwayTeamLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeamScore", wireType)
			}
			m.HomeTeamScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeTeamScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeamScore", wireType)
			}
			m.AwayTeamScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayTeamScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTeamID", wireType)
			}
			m.WinTeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinTeamID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &SeriesKnockoutContestInfoItem{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestFreeze", wireType)
			}
			m.ContestFreeze = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestFreeze |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContestInfo == nil {
				m.ContestInfo = &ContestCardComponent{}
			}
			if err := m.ContestInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesKnockoutMatchConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesKnockoutMatchConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesKnockoutMatchConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &SeriesKnockoutContestConfigItem{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesKnockoutMatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesKnockoutMatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesKnockoutMatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &SeriesKnockoutContestInfoItem{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ToBeDeterminedTeamIds = append(m.ToBeDeterminedTeamIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ToBeDeterminedTeamIds) == 0 {
					m.ToBeDeterminedTeamIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ToBeDeterminedTeamIds = append(m.ToBeDeterminedTeamIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBeDeterminedTeamIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeriesKnockoutMatchConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeriesKnockoutMatchConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeriesKnockoutMatchConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSeriesKnockoutMatchConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSeriesKnockoutMatchConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSeriesKnockoutMatchConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSeriesKnockoutMatchConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeriesKnockoutMatchConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeriesKnockoutMatchConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeriesKnockoutMatchInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeriesKnockoutMatchInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeriesKnockoutMatchInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSeriesKnockoutMatchInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSeriesKnockoutMatchInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSeriesKnockoutMatchInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsSeriesKnockoutMatchInfoGeneratedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsSeriesKnockoutMatchInfoGeneratedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsSeriesKnockoutMatchInfoGeneratedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsSeriesKnockoutMatchInfoGeneratedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsSeriesKnockoutMatchInfoGeneratedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsSeriesKnockoutMatchInfoGeneratedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ViewGenerated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoListFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoListFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoListFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YearId", wireType)
			}
			m.YearId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YearId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoListFilterReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoListFilterReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoListFilterReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Games == nil {
				m.Games = &VideoListFilterItemList{}
			}
			if err := m.Games.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Matchs == nil {
				m.Matchs = &VideoListFilterItemList{}
			}
			if err := m.Matchs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Years", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Years == nil {
				m.Years = &VideoListFilterItemList{}
			}
			if err := m.Years.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoListFilterItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoListFilterItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoListFilterItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoListFilterItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoListFilterItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoListFilterItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &VideoListFilterItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearTopicVideoListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearTopicVideoListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearTopicVideoListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EsTopicVideoListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EsTopicVideoListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EsTopicVideoListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YearId", wireType)
			}
			m.YearId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YearId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EsTopicVideoListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EsTopicVideoListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EsTopicVideoListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SearchAids = append(m.SearchAids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SearchAids) == 0 {
					m.SearchAids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SearchAids = append(m.SearchAids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &ModelPage{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
