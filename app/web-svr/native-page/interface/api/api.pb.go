// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/web-svr/native-page/interface/api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_common_library_time "go-common/library/time"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NativeForbidListReq struct {
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty" validate:"min=1"`
	// 1:开启禁止上榜 2:关闭禁止上榜 其余参数:不处理
	AttrForbid           int32    `protobuf:"varint,2,opt,name=attrForbid,proto3" json:"attrForbid,omitempty" validate:"min=1,max=2"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeForbidListReq) Reset()         { *m = NativeForbidListReq{} }
func (m *NativeForbidListReq) String() string { return proto.CompactTextString(m) }
func (*NativeForbidListReq) ProtoMessage()    {}
func (*NativeForbidListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{0}
}
func (m *NativeForbidListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeForbidListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeForbidListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeForbidListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeForbidListReq.Merge(m, src)
}
func (m *NativeForbidListReq) XXX_Size() int {
	return m.Size()
}
func (m *NativeForbidListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeForbidListReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativeForbidListReq proto.InternalMessageInfo

type IsUpActUidReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUpActUidReq) Reset()         { *m = IsUpActUidReq{} }
func (m *IsUpActUidReq) String() string { return proto.CompactTextString(m) }
func (*IsUpActUidReq) ProtoMessage()    {}
func (*IsUpActUidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{1}
}
func (m *IsUpActUidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUpActUidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUpActUidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsUpActUidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUpActUidReq.Merge(m, src)
}
func (m *IsUpActUidReq) XXX_Size() int {
	return m.Size()
}
func (m *IsUpActUidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUpActUidReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsUpActUidReq proto.InternalMessageInfo

type IsUpActUidReply struct {
	//是否匹配
	Match                bool     `protobuf:"varint,1,opt,name=Match,proto3" json:"Match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsUpActUidReply) Reset()         { *m = IsUpActUidReply{} }
func (m *IsUpActUidReply) String() string { return proto.CompactTextString(m) }
func (*IsUpActUidReply) ProtoMessage()    {}
func (*IsUpActUidReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{2}
}
func (m *IsUpActUidReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsUpActUidReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsUpActUidReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsUpActUidReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsUpActUidReply.Merge(m, src)
}
func (m *IsUpActUidReply) XXX_Size() int {
	return m.Size()
}
func (m *IsUpActUidReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IsUpActUidReply.DiscardUnknown(m)
}

var xxx_messageInfo_IsUpActUidReply proto.InternalMessageInfo

type UpActNativePagesReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	Ps                   int64    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=0,max=50"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActNativePagesReq) Reset()         { *m = UpActNativePagesReq{} }
func (m *UpActNativePagesReq) String() string { return proto.CompactTextString(m) }
func (*UpActNativePagesReq) ProtoMessage()    {}
func (*UpActNativePagesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{3}
}
func (m *UpActNativePagesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePagesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePagesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePagesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePagesReq.Merge(m, src)
}
func (m *UpActNativePagesReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePagesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePagesReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePagesReq proto.InternalMessageInfo

type UpActNativePagesReply struct {
	Offset               int64               `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	HasMore              int32               `protobuf:"varint,2,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	List                 []*UpActNativePages `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpActNativePagesReply) Reset()         { *m = UpActNativePagesReply{} }
func (m *UpActNativePagesReply) String() string { return proto.CompactTextString(m) }
func (*UpActNativePagesReply) ProtoMessage()    {}
func (*UpActNativePagesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{4}
}
func (m *UpActNativePagesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePagesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePagesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePagesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePagesReply.Merge(m, src)
}
func (m *UpActNativePagesReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePagesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePagesReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePagesReply proto.InternalMessageInfo

type UpActNativePages struct {
	Base                 *NativePage `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpActNativePages) Reset()         { *m = UpActNativePages{} }
func (m *UpActNativePages) String() string { return proto.CompactTextString(m) }
func (*UpActNativePages) ProtoMessage()    {}
func (*UpActNativePages) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{5}
}
func (m *UpActNativePages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePages.Merge(m, src)
}
func (m *UpActNativePages) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePages) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePages.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePages proto.InternalMessageInfo

type UpActNativePageBindReq struct {
	// 发起人id
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	//page id
	PageID int64 `protobuf:"varint,2,opt,name=pageID,proto3" json:"pageID,omitempty" validate:"min=1"`
	// 跳转url
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActNativePageBindReq) Reset()         { *m = UpActNativePageBindReq{} }
func (m *UpActNativePageBindReq) String() string { return proto.CompactTextString(m) }
func (*UpActNativePageBindReq) ProtoMessage()    {}
func (*UpActNativePageBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{6}
}
func (m *UpActNativePageBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePageBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePageBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePageBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePageBindReq.Merge(m, src)
}
func (m *UpActNativePageBindReq) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePageBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePageBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePageBindReq proto.InternalMessageInfo

type UpActNativePageBindReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpActNativePageBindReply) Reset()         { *m = UpActNativePageBindReply{} }
func (m *UpActNativePageBindReply) String() string { return proto.CompactTextString(m) }
func (*UpActNativePageBindReply) ProtoMessage()    {}
func (*UpActNativePageBindReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{7}
}
func (m *UpActNativePageBindReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpActNativePageBindReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpActNativePageBindReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpActNativePageBindReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpActNativePageBindReply.Merge(m, src)
}
func (m *UpActNativePageBindReply) XXX_Size() int {
	return m.Size()
}
func (m *UpActNativePageBindReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpActNativePageBindReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpActNativePageBindReply proto.InternalMessageInfo

type NativePagesReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=150,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePagesReq) Reset()         { *m = NativePagesReq{} }
func (m *NativePagesReq) String() string { return proto.CompactTextString(m) }
func (*NativePagesReq) ProtoMessage()    {}
func (*NativePagesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{8}
}
func (m *NativePagesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesReq.Merge(m, src)
}
func (m *NativePagesReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesReq proto.InternalMessageInfo

type NativePageCardsReq struct {
	Pids []int64 `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=100,dive,min=1"`
	//设备：phone、ipad
	Device string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	//平台：iphone、white、ipad、android、android_i、android_G、iphone_i、ipad_i、android_tv（后面带 I 是表示海外版、android_G 安卓谷歌版）
	MobiApp string `protobuf:"bytes,3,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	//build版本号
	Build int32 `protobuf:"varint,4,opt,name=build,proto3" json:"build,omitempty"`
	//客户端设备唯一标识
	Buvid string `protobuf:"bytes,5,opt,name=buvid,proto3" json:"buvid,omitempty"`
	//平台
	Platform             string   `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePageCardsReq) Reset()         { *m = NativePageCardsReq{} }
func (m *NativePageCardsReq) String() string { return proto.CompactTextString(m) }
func (*NativePageCardsReq) ProtoMessage()    {}
func (*NativePageCardsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{9}
}
func (m *NativePageCardsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageCardsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageCardsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageCardsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageCardsReq.Merge(m, src)
}
func (m *NativePageCardsReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePageCardsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageCardsReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageCardsReq proto.InternalMessageInfo

type NativePageCardsReply struct {
	List                 map[int64]*NativePageCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *NativePageCardsReply) Reset()         { *m = NativePageCardsReply{} }
func (m *NativePageCardsReply) String() string { return proto.CompactTextString(m) }
func (*NativePageCardsReply) ProtoMessage()    {}
func (*NativePageCardsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{10}
}
func (m *NativePageCardsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageCardsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageCardsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageCardsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageCardsReply.Merge(m, src)
}
func (m *NativePageCardsReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePageCardsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageCardsReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageCardsReply proto.InternalMessageInfo

type NativePageCard struct {
	//pageid
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	//话题名
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	//类型 1:话题活动
	Type int64 `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	// 话题id
	ForeignID int64 `protobuf:"varint,4,opt,name=foreignID,proto3" json:"foreign_id"`
	//分享内容
	ShareTitle string `protobuf:"bytes,5,opt,name=shareTitle,proto3" json:"share_title"`
	//分享图片
	ShareImage string `protobuf:"bytes,6,opt,name=shareImage,proto3" json:"share_image"`
	//分享url
	ShareURL string `protobuf:"bytes,7,opt,name=shareURL,proto3" json:"share_url"`
	// h5,app跳转地址
	SkipURL string `protobuf:"bytes,8,opt,name=skipURL,proto3" json:"skip_url"`
	//发起人mid
	RelatedUid int64 `protobuf:"varint,9,opt,name=relatedUid,proto3" json:"related_uid"`
	//web跳转地址
	PcURL string `protobuf:"bytes,10,opt,name=pcURL,proto3" json:"pc_url"`
	//分享标题
	ShareCaption string `protobuf:"bytes,11,opt,name=shareCaption,proto3" json:"share_caption"`
	//状态
	State                int64    `protobuf:"varint,12,opt,name=state,proto3" json:"state"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePageCard) Reset()         { *m = NativePageCard{} }
func (m *NativePageCard) String() string { return proto.CompactTextString(m) }
func (*NativePageCard) ProtoMessage()    {}
func (*NativePageCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{11}
}
func (m *NativePageCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageCard.Merge(m, src)
}
func (m *NativePageCard) XXX_Size() int {
	return m.Size()
}
func (m *NativePageCard) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageCard.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageCard proto.InternalMessageInfo

type NativePagesReply struct {
	List                 map[int64]*NativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NativePagesReply) Reset()         { *m = NativePagesReply{} }
func (m *NativePagesReply) String() string { return proto.CompactTextString(m) }
func (*NativePagesReply) ProtoMessage()    {}
func (*NativePagesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{12}
}
func (m *NativePagesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesReply.Merge(m, src)
}
func (m *NativePagesReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesReply proto.InternalMessageInfo

type NativePagesExtReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=100,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePagesExtReq) Reset()         { *m = NativePagesExtReq{} }
func (m *NativePagesExtReq) String() string { return proto.CompactTextString(m) }
func (*NativePagesExtReq) ProtoMessage()    {}
func (*NativePagesExtReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{13}
}
func (m *NativePagesExtReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesExtReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesExtReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesExtReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesExtReq.Merge(m, src)
}
func (m *NativePagesExtReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesExtReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesExtReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesExtReq proto.InternalMessageInfo

type NativePagesExtReply struct {
	List                 map[int64]*NativePageExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NativePagesExtReply) Reset()         { *m = NativePagesExtReply{} }
func (m *NativePagesExtReply) String() string { return proto.CompactTextString(m) }
func (*NativePagesExtReply) ProtoMessage()    {}
func (*NativePagesExtReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{14}
}
func (m *NativePagesExtReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesExtReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesExtReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesExtReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesExtReply.Merge(m, src)
}
func (m *NativePagesExtReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesExtReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesExtReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesExtReply proto.InternalMessageInfo

type NativePageExt struct {
	Item                 *NativePage    `protobuf:"bytes,1,opt,name=item,proto3" json:"item"`
	DynExt               *NativePageDyn `protobuf:"bytes,2,opt,name=dynExt,proto3" json:"dyn_ext"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NativePageExt) Reset()         { *m = NativePageExt{} }
func (m *NativePageExt) String() string { return proto.CompactTextString(m) }
func (*NativePageExt) ProtoMessage()    {}
func (*NativePageExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{15}
}
func (m *NativePageExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageExt.Merge(m, src)
}
func (m *NativePageExt) XXX_Size() int {
	return m.Size()
}
func (m *NativePageExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageExt proto.InternalMessageInfo

type NativeValidPagesExtReq struct {
	ActType              int64    `protobuf:"varint,1,opt,name=actType,proto3" json:"actType,omitempty" validate:"required,min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeValidPagesExtReq) Reset()         { *m = NativeValidPagesExtReq{} }
func (m *NativeValidPagesExtReq) String() string { return proto.CompactTextString(m) }
func (*NativeValidPagesExtReq) ProtoMessage()    {}
func (*NativeValidPagesExtReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{16}
}
func (m *NativeValidPagesExtReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeValidPagesExtReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeValidPagesExtReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeValidPagesExtReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeValidPagesExtReq.Merge(m, src)
}
func (m *NativeValidPagesExtReq) XXX_Size() int {
	return m.Size()
}
func (m *NativeValidPagesExtReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeValidPagesExtReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativeValidPagesExtReq proto.InternalMessageInfo

type NativeValidPagesExtReply struct {
	List                 map[int64]*NativePageExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NativeValidPagesExtReply) Reset()         { *m = NativeValidPagesExtReply{} }
func (m *NativeValidPagesExtReply) String() string { return proto.CompactTextString(m) }
func (*NativeValidPagesExtReply) ProtoMessage()    {}
func (*NativeValidPagesExtReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{17}
}
func (m *NativeValidPagesExtReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeValidPagesExtReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeValidPagesExtReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeValidPagesExtReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeValidPagesExtReply.Merge(m, src)
}
func (m *NativeValidPagesExtReply) XXX_Size() int {
	return m.Size()
}
func (m *NativeValidPagesExtReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeValidPagesExtReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativeValidPagesExtReply proto.InternalMessageInfo

type NativePageReq struct {
	Pid                  int64    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePageReq) Reset()         { *m = NativePageReq{} }
func (m *NativePageReq) String() string { return proto.CompactTextString(m) }
func (*NativePageReq) ProtoMessage()    {}
func (*NativePageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{18}
}
func (m *NativePageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageReq.Merge(m, src)
}
func (m *NativePageReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageReq proto.InternalMessageInfo

type NativePageReply struct {
	Item                 *NativePage `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NativePageReply) Reset()         { *m = NativePageReply{} }
func (m *NativePageReply) String() string { return proto.CompactTextString(m) }
func (*NativePageReply) ProtoMessage()    {}
func (*NativePageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{19}
}
func (m *NativePageReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageReply.Merge(m, src)
}
func (m *NativePageReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageReply proto.InternalMessageInfo

type NativePagesTabReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=50,dive,min=1"`
	Category             int32    `protobuf:"varint,2,opt,name=category,proto3" json:"category,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativePagesTabReq) Reset()         { *m = NativePagesTabReq{} }
func (m *NativePagesTabReq) String() string { return proto.CompactTextString(m) }
func (*NativePagesTabReq) ProtoMessage()    {}
func (*NativePagesTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{20}
}
func (m *NativePagesTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesTabReq.Merge(m, src)
}
func (m *NativePagesTabReq) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesTabReq proto.InternalMessageInfo

type NativePagesTabReply struct {
	List                 map[int64]*PagesTab `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NativePagesTabReply) Reset()         { *m = NativePagesTabReply{} }
func (m *NativePagesTabReply) String() string { return proto.CompactTextString(m) }
func (*NativePagesTabReply) ProtoMessage()    {}
func (*NativePagesTabReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{21}
}
func (m *NativePagesTabReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePagesTabReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePagesTabReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePagesTabReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePagesTabReply.Merge(m, src)
}
func (m *NativePagesTabReply) XXX_Size() int {
	return m.Size()
}
func (m *NativePagesTabReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePagesTabReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativePagesTabReply proto.InternalMessageInfo

type PagesTab struct {
	TabID                int64    `protobuf:"varint,1,opt,name=tabID,proto3" json:"tab_id"`
	TabModuleID          int64    `protobuf:"varint,2,opt,name=tabModuleID,proto3" json:"tab_module_id"`
	PageID               int64    `protobuf:"varint,3,opt,name=pageID,proto3" json:"page_id"`
	Url                  string   `protobuf:"bytes,4,opt,name=url,proto3" json:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PagesTab) Reset()         { *m = PagesTab{} }
func (m *PagesTab) String() string { return proto.CompactTextString(m) }
func (*PagesTab) ProtoMessage()    {}
func (*PagesTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{22}
}
func (m *PagesTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PagesTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PagesTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PagesTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagesTab.Merge(m, src)
}
func (m *PagesTab) XXX_Size() int {
	return m.Size()
}
func (m *PagesTab) XXX_DiscardUnknown() {
	xxx_messageInfo_PagesTab.DiscardUnknown(m)
}

var xxx_messageInfo_PagesTab proto.InternalMessageInfo

type NatTabModulesReq struct {
	TabID                int64    `protobuf:"varint,1,opt,name=tabID,proto3" json:"tabID,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatTabModulesReq) Reset()         { *m = NatTabModulesReq{} }
func (m *NatTabModulesReq) String() string { return proto.CompactTextString(m) }
func (*NatTabModulesReq) ProtoMessage()    {}
func (*NatTabModulesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{23}
}
func (m *NatTabModulesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatTabModulesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatTabModulesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatTabModulesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatTabModulesReq.Merge(m, src)
}
func (m *NatTabModulesReq) XXX_Size() int {
	return m.Size()
}
func (m *NatTabModulesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NatTabModulesReq.DiscardUnknown(m)
}

var xxx_messageInfo_NatTabModulesReq proto.InternalMessageInfo

type NatTabModulesReply struct {
	Tab                  *NativeActTab      `protobuf:"bytes,1,opt,name=tab,proto3" json:"tab"`
	List                 []*NativeTabModule `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NatTabModulesReply) Reset()         { *m = NatTabModulesReply{} }
func (m *NatTabModulesReply) String() string { return proto.CompactTextString(m) }
func (*NatTabModulesReply) ProtoMessage()    {}
func (*NatTabModulesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{24}
}
func (m *NatTabModulesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatTabModulesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatTabModulesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatTabModulesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatTabModulesReply.Merge(m, src)
}
func (m *NatTabModulesReply) XXX_Size() int {
	return m.Size()
}
func (m *NatTabModulesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NatTabModulesReply.DiscardUnknown(m)
}

var xxx_messageInfo_NatTabModulesReply proto.InternalMessageInfo

type PageInfo struct {
	Pn                   int64    `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty"`
	Total                int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{25}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{26}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

type ModuleConfigReq struct {
	ModuleID             int64    `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty" validate:"min=1"`
	PrimaryPageID        int64    `protobuf:"varint,2,opt,name=primaryPageID,proto3" json:"primaryPageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleConfigReq) Reset()         { *m = ModuleConfigReq{} }
func (m *ModuleConfigReq) String() string { return proto.CompactTextString(m) }
func (*ModuleConfigReq) ProtoMessage()    {}
func (*ModuleConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{27}
}
func (m *ModuleConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleConfigReq.Merge(m, src)
}
func (m *ModuleConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *ModuleConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleConfigReq proto.InternalMessageInfo

type ModuleConfigReply struct {
	NativePage           *NativePage `protobuf:"bytes,1,opt,name=nativePage,proto3" json:"nativePage,omitempty"`
	Module               *Module     `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	PrimaryPage          *NativePage `protobuf:"bytes,3,opt,name=primaryPage,proto3" json:"primaryPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ModuleConfigReply) Reset()         { *m = ModuleConfigReply{} }
func (m *ModuleConfigReply) String() string { return proto.CompactTextString(m) }
func (*ModuleConfigReply) ProtoMessage()    {}
func (*ModuleConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{28}
}
func (m *ModuleConfigReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleConfigReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleConfigReply.Merge(m, src)
}
func (m *ModuleConfigReply) XXX_Size() int {
	return m.Size()
}
func (m *ModuleConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleConfigReply proto.InternalMessageInfo

type NatInfoFromForeignReq struct {
	Fids                 []int64           `protobuf:"varint,1,rep,packed,name=fids,proto3" json:"fids,omitempty" validate:"min=1,max=50,dive,min=1"`
	PageType             int64             `protobuf:"varint,2,opt,name=pageType,proto3" json:"pageType,omitempty" validate:"min=1"`
	Content              map[string]string `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NatInfoFromForeignReq) Reset()         { *m = NatInfoFromForeignReq{} }
func (m *NatInfoFromForeignReq) String() string { return proto.CompactTextString(m) }
func (*NatInfoFromForeignReq) ProtoMessage()    {}
func (*NatInfoFromForeignReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{29}
}
func (m *NatInfoFromForeignReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatInfoFromForeignReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatInfoFromForeignReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatInfoFromForeignReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatInfoFromForeignReq.Merge(m, src)
}
func (m *NatInfoFromForeignReq) XXX_Size() int {
	return m.Size()
}
func (m *NatInfoFromForeignReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NatInfoFromForeignReq.DiscardUnknown(m)
}

var xxx_messageInfo_NatInfoFromForeignReq proto.InternalMessageInfo

type NatInfoFromForeignReply struct {
	List                 map[int64]*NativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"List" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NatInfoFromForeignReply) Reset()         { *m = NatInfoFromForeignReply{} }
func (m *NatInfoFromForeignReply) String() string { return proto.CompactTextString(m) }
func (*NatInfoFromForeignReply) ProtoMessage()    {}
func (*NatInfoFromForeignReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{30}
}
func (m *NatInfoFromForeignReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatInfoFromForeignReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatInfoFromForeignReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatInfoFromForeignReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatInfoFromForeignReply.Merge(m, src)
}
func (m *NatInfoFromForeignReply) XXX_Size() int {
	return m.Size()
}
func (m *NatInfoFromForeignReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NatInfoFromForeignReply.DiscardUnknown(m)
}

var xxx_messageInfo_NatInfoFromForeignReply proto.InternalMessageInfo

type NatConfigReq struct {
	Pid                  int64    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty" validate:"min=1"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	Ps                   int64    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=0,max=50"`
	PType                int32    `protobuf:"varint,4,opt,name=pType,proto3" json:"pType,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NatConfigReq) Reset()         { *m = NatConfigReq{} }
func (m *NatConfigReq) String() string { return proto.CompactTextString(m) }
func (*NatConfigReq) ProtoMessage()    {}
func (*NatConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{31}
}
func (m *NatConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatConfigReq.Merge(m, src)
}
func (m *NatConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *NatConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NatConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_NatConfigReq proto.InternalMessageInfo

type NatConfigReply struct {
	NativePage *NativePage `protobuf:"bytes,1,opt,name=nativePage,proto3" json:"nativePage,omitempty"`
	Modules    []*Module   `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules,omitempty"`
	Page       *Page       `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	Bases      []*Module   `protobuf:"bytes,4,rep,name=bases,proto3" json:"bases,omitempty"`
	// 父页面配置信息
	FirstPage            *FirstPage `protobuf:"bytes,5,opt,name=firstPage,proto3" json:"firstPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NatConfigReply) Reset()         { *m = NatConfigReply{} }
func (m *NatConfigReply) String() string { return proto.CompactTextString(m) }
func (*NatConfigReply) ProtoMessage()    {}
func (*NatConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{32}
}
func (m *NatConfigReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NatConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NatConfigReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NatConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NatConfigReply.Merge(m, src)
}
func (m *NatConfigReply) XXX_Size() int {
	return m.Size()
}
func (m *NatConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NatConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_NatConfigReply proto.InternalMessageInfo

type FirstPage struct {
	Item *NativePage `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	//扩展信息可以为nil
	Ext                  *NativePageExtend `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FirstPage) Reset()         { *m = FirstPage{} }
func (m *FirstPage) String() string { return proto.CompactTextString(m) }
func (*FirstPage) ProtoMessage()    {}
func (*FirstPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{33}
}
func (m *FirstPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirstPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirstPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirstPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstPage.Merge(m, src)
}
func (m *FirstPage) XXX_Size() int {
	return m.Size()
}
func (m *FirstPage) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstPage.DiscardUnknown(m)
}

var xxx_messageInfo_FirstPage proto.InternalMessageInfo

type BaseConfigReq struct {
	Pid   int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty" validate:"min=1"`
	PType int32 `protobuf:"varint,2,opt,name=pType,proto3" json:"pType,omitempty" validate:"min=0"`
	// ps为负数表示获取全部，为正数表示需要获取的页面大小
	Ps                   int64    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" default:"-1" validate:"max=100"`
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty" default:"0" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseConfigReq) Reset()         { *m = BaseConfigReq{} }
func (m *BaseConfigReq) String() string { return proto.CompactTextString(m) }
func (*BaseConfigReq) ProtoMessage()    {}
func (*BaseConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{34}
}
func (m *BaseConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseConfigReq.Merge(m, src)
}
func (m *BaseConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *BaseConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_BaseConfigReq proto.InternalMessageInfo

type BaseConfigReply struct {
	NativePage  *NativePage `protobuf:"bytes,1,opt,name=nativePage,proto3" json:"nativePage,omitempty"`
	Bases       []*Module   `protobuf:"bytes,2,rep,name=bases,proto3" json:"bases,omitempty"`
	Offset      int64       `protobuf:"varint,3,opt,name=offset,proto3" json:"offset"`
	HasMore     int32       `protobuf:"varint,4,opt,name=hasMore,proto3" json:"has_more"`
	BaseModules []*Module   `protobuf:"bytes,5,rep,name=base_modules,json=baseModules,proto3" json:"base_modules,omitempty"`
	// 父页面配置信息
	FirstPage            *FirstPage `protobuf:"bytes,6,opt,name=firstPage,proto3" json:"firstPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BaseConfigReply) Reset()         { *m = BaseConfigReply{} }
func (m *BaseConfigReply) String() string { return proto.CompactTextString(m) }
func (*BaseConfigReply) ProtoMessage()    {}
func (*BaseConfigReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{35}
}
func (m *BaseConfigReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseConfigReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseConfigReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseConfigReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseConfigReply.Merge(m, src)
}
func (m *BaseConfigReply) XXX_Size() int {
	return m.Size()
}
func (m *BaseConfigReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseConfigReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaseConfigReply proto.InternalMessageInfo

type Page struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset"`
	HasMore              int32    `protobuf:"varint,2,opt,name=hasMore,proto3" json:"has_more"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{36}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

type Module struct {
	NativeModule         *NativeModule  `protobuf:"bytes,1,opt,name=nativeModule,proto3" json:"nativeModule,omitempty"`
	Click                *Click         `protobuf:"bytes,2,opt,name=click,proto3" json:"click,omitempty"`
	Act                  *Act           `protobuf:"bytes,3,opt,name=act,proto3" json:"act,omitempty"`
	VideoAct             *VideoAct      `protobuf:"bytes,4,opt,name=videoAct,proto3" json:"videoAct,omitempty"`
	Dynamic              *Dynamic       `protobuf:"bytes,5,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	Participation        *Participation `protobuf:"bytes,6,opt,name=participation,proto3" json:"participation,omitempty"`
	Recommend            *Recommend     `protobuf:"bytes,7,opt,name=recommend,proto3" json:"recommend,omitempty"`
	InlineTab            *InlineTab     `protobuf:"bytes,8,opt,name=inlineTab,proto3" json:"inlineTab,omitempty"`
	Select               *Select        `protobuf:"bytes,9,opt,name=select,proto3" json:"select,omitempty"`
	Progress             *Progress      `protobuf:"bytes,10,opt,name=progress,proto3" json:"progress,omitempty"`
	Carousel             *Carousel      `protobuf:"bytes,11,opt,name=carousel,proto3" json:"carousel,omitempty"`
	Icon                 *Icon          `protobuf:"bytes,12,opt,name=icon,proto3" json:"icon,omitempty"`
	ActPage              *ActPage       `protobuf:"bytes,13,opt,name=actPage,proto3" json:"actPage,omitempty"`
	Game                 *Game          `protobuf:"bytes,14,opt,name=game,proto3" json:"game,omitempty"`
	Reserve              *Reserve       `protobuf:"bytes,15,opt,name=reserve,proto3" json:"reserve,omitempty"`
	MatchEvent           *MatchEvent    `protobuf:"bytes,16,opt,name=matchEvent,proto3" json:"matchEvent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Module) Reset()         { *m = Module{} }
func (m *Module) String() string { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()    {}
func (*Module) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{37}
}
func (m *Module) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Module) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Module.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Module) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Module.Merge(m, src)
}
func (m *Module) XXX_Size() int {
	return m.Size()
}
func (m *Module) XXX_DiscardUnknown() {
	xxx_messageInfo_Module.DiscardUnknown(m)
}

var xxx_messageInfo_Module proto.InternalMessageInfo

type Reserve struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Reserve) Reset()         { *m = Reserve{} }
func (m *Reserve) String() string { return proto.CompactTextString(m) }
func (*Reserve) ProtoMessage()    {}
func (*Reserve) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{38}
}
func (m *Reserve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reserve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reserve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reserve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reserve.Merge(m, src)
}
func (m *Reserve) XXX_Size() int {
	return m.Size()
}
func (m *Reserve) XXX_DiscardUnknown() {
	xxx_messageInfo_Reserve.DiscardUnknown(m)
}

var xxx_messageInfo_Reserve proto.InternalMessageInfo

type MatchEvent struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MatchEvent) Reset()         { *m = MatchEvent{} }
func (m *MatchEvent) String() string { return proto.CompactTextString(m) }
func (*MatchEvent) ProtoMessage()    {}
func (*MatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{39}
}
func (m *MatchEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchEvent.Merge(m, src)
}
func (m *MatchEvent) XXX_Size() int {
	return m.Size()
}
func (m *MatchEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MatchEvent proto.InternalMessageInfo

type Game struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{40}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

type Click struct {
	Areas                []*NativeClick `protobuf:"bytes,1,rep,name=areas,proto3" json:"areas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Click) Reset()         { *m = Click{} }
func (m *Click) String() string { return proto.CompactTextString(m) }
func (*Click) ProtoMessage()    {}
func (*Click) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{41}
}
func (m *Click) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Click) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Click.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Click) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Click.Merge(m, src)
}
func (m *Click) XXX_Size() int {
	return m.Size()
}
func (m *Click) XXX_DiscardUnknown() {
	xxx_messageInfo_Click.DiscardUnknown(m)
}

var xxx_messageInfo_Click proto.InternalMessageInfo

type VideoAct struct {
	SortList             []*NativeVideoExt `protobuf:"bytes,1,rep,name=sortList,proto3" json:"sortList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *VideoAct) Reset()         { *m = VideoAct{} }
func (m *VideoAct) String() string { return proto.CompactTextString(m) }
func (*VideoAct) ProtoMessage()    {}
func (*VideoAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{42}
}
func (m *VideoAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoAct.Merge(m, src)
}
func (m *VideoAct) XXX_Size() int {
	return m.Size()
}
func (m *VideoAct) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoAct.DiscardUnknown(m)
}

var xxx_messageInfo_VideoAct proto.InternalMessageInfo

type Act struct {
	List                 []*NativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Act) Reset()         { *m = Act{} }
func (m *Act) String() string { return proto.CompactTextString(m) }
func (*Act) ProtoMessage()    {}
func (*Act) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{43}
}
func (m *Act) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Act) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Act.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Act) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Act.Merge(m, src)
}
func (m *Act) XXX_Size() int {
	return m.Size()
}
func (m *Act) XXX_DiscardUnknown() {
	xxx_messageInfo_Act.DiscardUnknown(m)
}

var xxx_messageInfo_Act proto.InternalMessageInfo

type Dynamic struct {
	SelectList           []*NativeDynamicExt `protobuf:"bytes,1,rep,name=selectList,proto3" json:"selectList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Dynamic) Reset()         { *m = Dynamic{} }
func (m *Dynamic) String() string { return proto.CompactTextString(m) }
func (*Dynamic) ProtoMessage()    {}
func (*Dynamic) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{44}
}
func (m *Dynamic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dynamic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dynamic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dynamic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dynamic.Merge(m, src)
}
func (m *Dynamic) XXX_Size() int {
	return m.Size()
}
func (m *Dynamic) XXX_DiscardUnknown() {
	xxx_messageInfo_Dynamic.DiscardUnknown(m)
}

var xxx_messageInfo_Dynamic proto.InternalMessageInfo

type Participation struct {
	List                 []*NativeParticipationExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Participation) Reset()         { *m = Participation{} }
func (m *Participation) String() string { return proto.CompactTextString(m) }
func (*Participation) ProtoMessage()    {}
func (*Participation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{45}
}
func (m *Participation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participation.Merge(m, src)
}
func (m *Participation) XXX_Size() int {
	return m.Size()
}
func (m *Participation) XXX_DiscardUnknown() {
	xxx_messageInfo_Participation.DiscardUnknown(m)
}

var xxx_messageInfo_Participation proto.InternalMessageInfo

type Recommend struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Recommend) Reset()         { *m = Recommend{} }
func (m *Recommend) String() string { return proto.CompactTextString(m) }
func (*Recommend) ProtoMessage()    {}
func (*Recommend) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{46}
}
func (m *Recommend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recommend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recommend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recommend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommend.Merge(m, src)
}
func (m *Recommend) XXX_Size() int {
	return m.Size()
}
func (m *Recommend) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommend.DiscardUnknown(m)
}

var xxx_messageInfo_Recommend proto.InternalMessageInfo

type InlineTab struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *InlineTab) Reset()         { *m = InlineTab{} }
func (m *InlineTab) String() string { return proto.CompactTextString(m) }
func (*InlineTab) ProtoMessage()    {}
func (*InlineTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{47}
}
func (m *InlineTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InlineTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InlineTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InlineTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InlineTab.Merge(m, src)
}
func (m *InlineTab) XXX_Size() int {
	return m.Size()
}
func (m *InlineTab) XXX_DiscardUnknown() {
	xxx_messageInfo_InlineTab.DiscardUnknown(m)
}

var xxx_messageInfo_InlineTab proto.InternalMessageInfo

type Select struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Select) Reset()         { *m = Select{} }
func (m *Select) String() string { return proto.CompactTextString(m) }
func (*Select) ProtoMessage()    {}
func (*Select) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{48}
}
func (m *Select) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Select) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Select.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Select) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Select.Merge(m, src)
}
func (m *Select) XXX_Size() int {
	return m.Size()
}
func (m *Select) XXX_DiscardUnknown() {
	xxx_messageInfo_Select.DiscardUnknown(m)
}

var xxx_messageInfo_Select proto.InternalMessageInfo

type Carousel struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Carousel) Reset()         { *m = Carousel{} }
func (m *Carousel) String() string { return proto.CompactTextString(m) }
func (*Carousel) ProtoMessage()    {}
func (*Carousel) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{49}
}
func (m *Carousel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Carousel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Carousel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Carousel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Carousel.Merge(m, src)
}
func (m *Carousel) XXX_Size() int {
	return m.Size()
}
func (m *Carousel) XXX_DiscardUnknown() {
	xxx_messageInfo_Carousel.DiscardUnknown(m)
}

var xxx_messageInfo_Carousel proto.InternalMessageInfo

type Icon struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Icon) Reset()         { *m = Icon{} }
func (m *Icon) String() string { return proto.CompactTextString(m) }
func (*Icon) ProtoMessage()    {}
func (*Icon) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{50}
}
func (m *Icon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Icon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Icon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Icon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Icon.Merge(m, src)
}
func (m *Icon) XXX_Size() int {
	return m.Size()
}
func (m *Icon) XXX_DiscardUnknown() {
	xxx_messageInfo_Icon.DiscardUnknown(m)
}

var xxx_messageInfo_Icon proto.InternalMessageInfo

type Progress struct {
	List                 []*NativeMixtureExt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Progress) Reset()         { *m = Progress{} }
func (m *Progress) String() string { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()    {}
func (*Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{51}
}
func (m *Progress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Progress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Progress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Progress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Progress.Merge(m, src)
}
func (m *Progress) XXX_Size() int {
	return m.Size()
}
func (m *Progress) XXX_DiscardUnknown() {
	xxx_messageInfo_Progress.DiscardUnknown(m)
}

var xxx_messageInfo_Progress proto.InternalMessageInfo

type ModuleMixExtReq struct {
	ModuleID             int64    `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty" validate:"min=1"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=100"`
	Offset               int64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	MType                int32    `protobuf:"varint,4,opt,name=mType,proto3" json:"mType,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleMixExtReq) Reset()         { *m = ModuleMixExtReq{} }
func (m *ModuleMixExtReq) String() string { return proto.CompactTextString(m) }
func (*ModuleMixExtReq) ProtoMessage()    {}
func (*ModuleMixExtReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{52}
}
func (m *ModuleMixExtReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMixExtReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMixExtReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMixExtReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMixExtReq.Merge(m, src)
}
func (m *ModuleMixExtReq) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMixExtReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMixExtReq.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMixExtReq proto.InternalMessageInfo

type ModuleMixExtReply struct {
	Total                int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List                 []*NativeMixtureExt `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	HasMore              int32               `protobuf:"varint,3,opt,name=hasMore,proto3" json:"has_more"`
	Offset               int64               `protobuf:"varint,4,opt,name=offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ModuleMixExtReply) Reset()         { *m = ModuleMixExtReply{} }
func (m *ModuleMixExtReply) String() string { return proto.CompactTextString(m) }
func (*ModuleMixExtReply) ProtoMessage()    {}
func (*ModuleMixExtReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{53}
}
func (m *ModuleMixExtReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMixExtReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMixExtReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMixExtReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMixExtReply.Merge(m, src)
}
func (m *ModuleMixExtReply) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMixExtReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMixExtReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMixExtReply proto.InternalMessageInfo

type ModuleMixExtsReq struct {
	ModuleID             int64    `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty" validate:"min=1"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty" validate:"min=1,max=150"`
	Offset               int64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModuleMixExtsReq) Reset()         { *m = ModuleMixExtsReq{} }
func (m *ModuleMixExtsReq) String() string { return proto.CompactTextString(m) }
func (*ModuleMixExtsReq) ProtoMessage()    {}
func (*ModuleMixExtsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{54}
}
func (m *ModuleMixExtsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMixExtsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMixExtsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMixExtsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMixExtsReq.Merge(m, src)
}
func (m *ModuleMixExtsReq) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMixExtsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMixExtsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMixExtsReq proto.InternalMessageInfo

type ModuleMixExtsReply struct {
	Total                int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List                 []*NativeMixtureExt `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
	HasMore              int32               `protobuf:"varint,3,opt,name=hasMore,proto3" json:"has_more"`
	Offset               int64               `protobuf:"varint,4,opt,name=offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ModuleMixExtsReply) Reset()         { *m = ModuleMixExtsReply{} }
func (m *ModuleMixExtsReply) String() string { return proto.CompactTextString(m) }
func (*ModuleMixExtsReply) ProtoMessage()    {}
func (*ModuleMixExtsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{55}
}
func (m *ModuleMixExtsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleMixExtsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleMixExtsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleMixExtsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleMixExtsReply.Merge(m, src)
}
func (m *ModuleMixExtsReply) XXX_Size() int {
	return m.Size()
}
func (m *ModuleMixExtsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleMixExtsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleMixExtsReply proto.InternalMessageInfo

type NativePage struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	Type                 int64                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	ForeignID            int64                       `protobuf:"varint,4,opt,name=ForeignID,proto3" json:"foreign_id"`
	Stime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Creator              string                      `protobuf:"bytes,6,opt,name=Creator,proto3" json:"creator"`
	Operator             string                      `protobuf:"bytes,7,opt,name=Operator,proto3" json:"operator"`
	ShareTitle           string                      `protobuf:"bytes,8,opt,name=ShareTitle,proto3" json:"share_title"`
	ShareImage           string                      `protobuf:"bytes,9,opt,name=ShareImage,proto3" json:"share_image"`
	ShareURL             string                      `protobuf:"bytes,10,opt,name=ShareURL,proto3" json:"share_url"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	State                int64                       `protobuf:"varint,13,opt,name=State,proto3" json:"state"`
	SkipURL              string                      `protobuf:"bytes,14,opt,name=SkipURL,proto3" json:"skip_url"`
	Spmid                string                      `protobuf:"bytes,15,opt,name=Spmid,proto3" json:"spmid"`
	RelatedUid           int64                       `protobuf:"varint,16,opt,name=RelatedUid,proto3" json:"related_uid"`
	Etime                go_common_library_time.Time `protobuf:"varint,17,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	ActType              int32                       `protobuf:"varint,18,opt,name=ActType,proto3" json:"act_type"`
	Hot                  int64                       `protobuf:"varint,19,opt,name=Hot,proto3" json:"hot"`
	DynamicID            int64                       `protobuf:"varint,20,opt,name=DynamicID,proto3" json:"dynamic_id"`
	Attribute            int64                       `protobuf:"varint,21,opt,name=Attribute,proto3" json:"attribute"`
	PcURL                string                      `protobuf:"bytes,22,opt,name=PcURL,proto3" json:"pc_url"`
	AnotherTitle         string                      `protobuf:"bytes,23,opt,name=AnotherTitle,proto3" json:"another_title"`
	ShareCaption         string                      `protobuf:"bytes,24,opt,name=ShareCaption,proto3" json:"share_caption"`
	BgColor              string                      `protobuf:"bytes,25,opt,name=BgColor,proto3" json:"bg_color"`
	FromType             int32                       `protobuf:"varint,26,opt,name=FromType,proto3" json:"from_type"`
	Ver                  string                      `protobuf:"bytes,27,opt,name=Ver,proto3" json:"ver"`
	ConfSet              string                      `protobuf:"bytes,28,opt,name=ConfSet,proto3" json:"conf_set"`
	ActOrigin            string                      `protobuf:"bytes,29,opt,name=ActOrigin,proto3" json:"act_origin"`
	OffReason            string                      `protobuf:"bytes,30,opt,name=OffReason,proto3" json:"off_reason"`
	FirstPid             int64                       `protobuf:"varint,31,opt,name=FirstPid,proto3" json:"first_pid"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativePage) Reset()         { *m = NativePage{} }
func (m *NativePage) String() string { return proto.CompactTextString(m) }
func (*NativePage) ProtoMessage()    {}
func (*NativePage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{56}
}
func (m *NativePage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePage.Merge(m, src)
}
func (m *NativePage) XXX_Size() int {
	return m.Size()
}
func (m *NativePage) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePage.DiscardUnknown(m)
}

var xxx_messageInfo_NativePage proto.InternalMessageInfo

// 首页tab相关配置
type ConfSet struct {
	BgType               int32    `protobuf:"varint,1,opt,name=BgType,json=bg_type,proto3" json:"bg_type"`
	TabTopColor          string   `protobuf:"bytes,2,opt,name=TabTopColor,json=tab_top_color,proto3" json:"tab_top_color"`
	TabMiddleColor       string   `protobuf:"bytes,3,opt,name=TabMiddleColor,json=tab_middle_color,proto3" json:"tab_middle_color"`
	TabBottomColor       string   `protobuf:"bytes,4,opt,name=TabBottomColor,json=tab_bottom_color,proto3" json:"tab_bottom_color"`
	FontColor            string   `protobuf:"bytes,5,opt,name=FontColor,json=font_color,proto3" json:"font_color"`
	BarType              int32    `protobuf:"varint,6,opt,name=BarType,json=bar_type,proto3" json:"bar_type"`
	BgImage1             string   `protobuf:"bytes,7,opt,name=BgImage1,json=bg_image_1,proto3" json:"bg_image_1"`
	BgImage2             string   `protobuf:"bytes,8,opt,name=BgImage2,json=bg_image_2,proto3" json:"bg_image_2"`
	DT                   int32    `protobuf:"varint,9,opt,name=DT,json=dt,proto3" json:"dt"`
	DC                   int32    `protobuf:"varint,10,opt,name=DC,json=dc,proto3" json:"dc"`
	UnLock               int32    `protobuf:"varint,11,opt,name=UnLock,json=un_lock,proto3" json:"un_lock"`
	Tip                  string   `protobuf:"bytes,12,opt,name=Tip,json=tip,proto3" json:"tip"`
	Stime                int64    `protobuf:"varint,13,opt,name=Stime,json=stime,proto3" json:"stime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfSet) Reset()         { *m = ConfSet{} }
func (m *ConfSet) String() string { return proto.CompactTextString(m) }
func (*ConfSet) ProtoMessage()    {}
func (*ConfSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{57}
}
func (m *ConfSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfSet.Merge(m, src)
}
func (m *ConfSet) XXX_Size() int {
	return m.Size()
}
func (m *ConfSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfSet.DiscardUnknown(m)
}

var xxx_messageInfo_ConfSet proto.InternalMessageInfo

type NativeModule struct {
	ID         int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Category   int64                       `protobuf:"varint,2,opt,name=Category,proto3" json:"category"`
	Fid        int64                       `protobuf:"varint,3,opt,name=Fid,proto3" json:"fid"`
	NativeID   int64                       `protobuf:"varint,4,opt,name=NativeID,proto3" json:"native_id"`
	State      int64                       `protobuf:"varint,5,opt,name=State,proto3" json:"state"`
	Rank       int64                       `protobuf:"varint,6,opt,name=Rank,proto3" json:"rank"`
	Meta       string                      `protobuf:"bytes,7,opt,name=Meta,proto3" json:"meta"`
	Width      int64                       `protobuf:"varint,8,opt,name=Width,proto3" json:"width"`
	Length     int64                       `protobuf:"varint,9,opt,name=Length,proto3" json:"length"`
	Num        int64                       `protobuf:"varint,10,opt,name=Num,proto3" json:"num"`
	Title      string                      `protobuf:"bytes,11,opt,name=Title,proto3" json:"title"`
	Ctime      go_common_library_time.Time `protobuf:"varint,12,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime      go_common_library_time.Time `protobuf:"varint,13,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	DySort     int32                       `protobuf:"varint,14,opt,name=DySort,proto3" json:"dy_sort"`
	Ukey       string                      `protobuf:"bytes,15,opt,name=Ukey,proto3" json:"ukey"`
	Attribute  int64                       `protobuf:"varint,16,opt,name=Attribute,proto3" json:"attribute"`
	BgColor    string                      `protobuf:"bytes,17,opt,name=BgColor,proto3" json:"bg_color"`
	TitleColor string                      `protobuf:"bytes,18,opt,name=TitleColor,proto3" json:"title_color"`
	MoreColor  string                      `protobuf:"bytes,19,opt,name=MoreColor,proto3" json:"more_color"`
	TName      string                      `protobuf:"bytes,20,opt,name=TName,proto3" json:"t_name"`
	CardStyle  int32                       `protobuf:"varint,21,opt,name=CardStyle,proto3" json:"card_style"`
	AvSort     int64                       `protobuf:"varint,22,opt,name=AvSort,proto3" json:"av_sort"`
	FontColor  string                      `protobuf:"bytes,23,opt,name=FontColor,proto3" json:"font_color"`
	PType      int32                       `protobuf:"varint,24,opt,name=PType,proto3" json:"p_type"`
	Caption    string                      `protobuf:"bytes,25,opt,name=Caption,proto3" json:"caption"`
	Remark     string                      `protobuf:"bytes,26,opt,name=Remark,proto3" json:"remark"`
	Bar        string                      `protobuf:"bytes,27,opt,name=Bar,proto3" json:"bar"`
	Stime      int64                       `protobuf:"varint,28,opt,name=Stime,proto3" json:"stime"`
	Etime      int64                       `protobuf:"varint,29,opt,name=Etime,proto3" json:"etime"`
	// 直播卡类型 0:隐藏卡片 1:直播间
	LiveType int32  `protobuf:"varint,30,opt,name=LiveType,proto3" json:"live_type"`
	Colors   string `protobuf:"bytes,31,opt,name=Colors,proto3" json:"Colors"`
	//组件特定分类json
	ConfSort             string   `protobuf:"bytes,32,opt,name=ConfSort,proto3" json:"conf_sort"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeModule) Reset()         { *m = NativeModule{} }
func (m *NativeModule) String() string { return proto.CompactTextString(m) }
func (*NativeModule) ProtoMessage()    {}
func (*NativeModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{58}
}
func (m *NativeModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeModule.Merge(m, src)
}
func (m *NativeModule) XXX_Size() int {
	return m.Size()
}
func (m *NativeModule) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeModule.DiscardUnknown(m)
}

var xxx_messageInfo_NativeModule proto.InternalMessageInfo

type ConfSort struct {
	//查看更多方式 0:跳转二级页面 1:浮层 2:下拉展示
	MoreSort int64 `protobuf:"varint,1,opt,name=moreSort,proto3" json:"more_sort"`
	//精确到 0:年 1:月 2: 日 3:时 4:分 5:秒
	TimeSort int64 `protobuf:"varint,2,opt,name=timeSort,proto3" json:"time_sort"`
	//时间轴节点类型 0:文本 1:时间节点
	Axis int64 `protobuf:"varint,3,opt,name=axis,proto3" json:"axis"`
	//资源小卡外接数据源类型
	RdbType int64 `protobuf:"varint,4,opt,name=rdbType,proto3" json:"rdb_type"`
	//统计类型
	StatType string `protobuf:"bytes,5,opt,name=statType,proto3" json:"stat_type"`
	//干预数值
	InterveNum int64 `protobuf:"varint,6,opt,name=interveNum,proto3" json:"interve_num"`
	//排序类型
	SortType string `protobuf:"bytes,7,opt,name=sort_type,json=sortType,proto3" json:"sort_type,omitempty"`
	//数据源类型
	SourceType string `protobuf:"bytes,8,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	//数据源id
	Sid int64 `protobuf:"varint,9,opt,name=sid,proto3" json:"sid,omitempty"`
	//数据源统计规则counter
	Counter string `protobuf:"bytes,10,opt,name=counter,proto3" json:"counter,omitempty"`
	//提示
	Hint string `protobuf:"bytes,11,opt,name=hint,proto3" json:"hint,omitempty"`
	//互斥的组件ukey
	MUkeys []string `protobuf:"bytes,12,rep,name=m_ukeys,json=mUkeys,proto3" json:"m_ukeys,omitempty"`
	//按钮类型
	BtType string `protobuf:"bytes,13,opt,name=bt_type,json=btType,proto3" json:"bt_type,omitempty"`
	//入站必刷类型
	MseeType int32 `protobuf:"varint,14,opt,name=msee_type,json=mseeType,proto3" json:"msee_type,omitempty"`
	//投票组件-完成态图片
	Image string `protobuf:"bytes,15,opt,name=image,proto3" json:"image,omitempty"`
	//文本类型
	StatementType        int64    `protobuf:"varint,16,opt,name=statement_type,json=statementType,proto3" json:"statement_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfSort) Reset()         { *m = ConfSort{} }
func (m *ConfSort) String() string { return proto.CompactTextString(m) }
func (*ConfSort) ProtoMessage()    {}
func (*ConfSort) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{59}
}
func (m *ConfSort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfSort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfSort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfSort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfSort.Merge(m, src)
}
func (m *ConfSort) XXX_Size() int {
	return m.Size()
}
func (m *ConfSort) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfSort.DiscardUnknown(m)
}

var xxx_messageInfo_ConfSort proto.InternalMessageInfo

type Colors struct {
	//文字标题字体色
	DisplayColor string `protobuf:"bytes,1,opt,name=displayColor,proto3" json:"display_color"`
	//标题背景色
	TitleBgColor string `protobuf:"bytes,2,opt,name=titleBgColor,proto3" json:"title_bg_color"`
	//选中色
	SelectColor string `protobuf:"bytes,3,opt,name=SelectColor,proto3" json:"select_color"`
	//未选中色
	NotSelectColor string `protobuf:"bytes,4,opt,name=NotSelectColor,proto3" json:"not_select_color"`
	//展开面板背景色
	PanelBgColor string `protobuf:"bytes,5,opt,name=PanelBgColor,proto3" json:"panel_bg_color"`
	//展开面板选中色
	PanelSelectColor string `protobuf:"bytes,6,opt,name=PanelSelectColor,proto3" json:"panel_select_color"`
	//展开面板未选中色
	PanelNotSelectColor string `protobuf:"bytes,7,opt,name=PanelNotSelectColor,proto3" json:"panel_not_select_color"`
	//时间轴色
	TimelineColor string `protobuf:"bytes,8,opt,name=timelineColor,proto3" json:"timeline_color"`
	//浮层标题文字色
	SupernatantColor string `protobuf:"bytes,9,opt,name=supernatantColor,proto3" json:"supernatant_color"`
	//副标题文字色-三列   推荐语文字色-单列
	SubtitleColor        string   `protobuf:"bytes,10,opt,name=subtitleColor,proto3" json:"subtitle_color"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Colors) Reset()         { *m = Colors{} }
func (m *Colors) String() string { return proto.CompactTextString(m) }
func (*Colors) ProtoMessage()    {}
func (*Colors) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{60}
}
func (m *Colors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Colors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Colors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Colors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Colors.Merge(m, src)
}
func (m *Colors) XXX_Size() int {
	return m.Size()
}
func (m *Colors) XXX_DiscardUnknown() {
	xxx_messageInfo_Colors.DiscardUnknown(m)
}

var xxx_messageInfo_Colors proto.InternalMessageInfo

type MixReason struct {
	//时间轴组件-时间控件
	Stime int64 `protobuf:"varint,1,opt,name=stime,proto3" json:"stime"`
	//时间轴组件-主标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	//时间轴组件-副标题
	SubTitle string `protobuf:"bytes,3,opt,name=subTitle,proto3" json:"sub_title"`
	//时间轴组件-描述
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc"`
	//时间轴组件-图片&&推荐用户排行榜icon
	Image string `protobuf:"bytes,5,opt,name=image,proto3" json:"image"`
	//时间轴组件-跳转连接
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url"`
	//时间轴组件-阶段名
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`
	//时间轴组件-图片宽
	Width int32 `protobuf:"varint,8,opt,name=width,proto3" json:"width"`
	//时间轴组件-图片长
	Length int32 `protobuf:"varint,9,opt,name=length,proto3" json:"length"`
	//inline-tab&筛选组件-定位类型 week:每周必卡
	Type string `protobuf:"bytes,10,opt,name=type,proto3" json:"type"`
	//inline-tab&筛选组件-定位类型 type=week：每周必看期数id
	LocationKey string `protobuf:"bytes,11,opt,name=locationKey,proto3" json:"location_key"`
	//inline-tab组件未解锁态图片
	UnI *ImageComm `protobuf:"bytes,12,opt,name=unI,proto3" json:"un_i"`
	//inline-tab组件选中态图片
	SI *ImageComm `protobuf:"bytes,13,opt,name=sI,proto3" json:"si"`
	//inline-tab组件未选中态图片
	UnSI *ImageComm `protobuf:"bytes,14,opt,name=unSI,proto3" json:"un_si"`
	//inline-tab&筛选组件 默认tab定时生效开始时间
	DStime int64 `protobuf:"varint,15,opt,name=DStime,proto3" json:"d_stime,omitempty"`
	//inline-tab&筛选组件  默认tab定时生效结束时间
	DEtime int64 `protobuf:"varint,16,opt,name=DEtime,proto3" json:"d_etime,omitempty"`
	//inline-tab&筛选组件 默认tab选择模式 0:无需处理 1:默认生效 2:定时生效
	DefType              int32    `protobuf:"varint,17,opt,name=DefType,proto3" json:"def_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MixReason) Reset()         { *m = MixReason{} }
func (m *MixReason) String() string { return proto.CompactTextString(m) }
func (*MixReason) ProtoMessage()    {}
func (*MixReason) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{61}
}
func (m *MixReason) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MixReason) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MixReason.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MixReason) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixReason.Merge(m, src)
}
func (m *MixReason) XXX_Size() int {
	return m.Size()
}
func (m *MixReason) XXX_DiscardUnknown() {
	xxx_messageInfo_MixReason.DiscardUnknown(m)
}

var xxx_messageInfo_MixReason proto.InternalMessageInfo

type ImageComm struct {
	Image                string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image"`
	Width                int32    `protobuf:"varint,2,opt,name=width,proto3" json:"width"`
	Height               int32    `protobuf:"varint,3,opt,name=height,proto3" json:"height"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageComm) Reset()         { *m = ImageComm{} }
func (m *ImageComm) String() string { return proto.CompactTextString(m) }
func (*ImageComm) ProtoMessage()    {}
func (*ImageComm) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{62}
}
func (m *ImageComm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageComm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageComm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageComm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageComm.Merge(m, src)
}
func (m *ImageComm) XXX_Size() int {
	return m.Size()
}
func (m *ImageComm) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageComm.DiscardUnknown(m)
}

var xxx_messageInfo_ImageComm proto.InternalMessageInfo

type NativeAct struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	PageID               int64                       `protobuf:"varint,4,opt,name=PageID,proto3" json:"page_id"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=Rank,proto3" json:"rank"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeAct) Reset()         { *m = NativeAct{} }
func (m *NativeAct) String() string { return proto.CompactTextString(m) }
func (*NativeAct) ProtoMessage()    {}
func (*NativeAct) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{63}
}
func (m *NativeAct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeAct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeAct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeAct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeAct.Merge(m, src)
}
func (m *NativeAct) XXX_Size() int {
	return m.Size()
}
func (m *NativeAct) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeAct.DiscardUnknown(m)
}

var xxx_messageInfo_NativeAct proto.InternalMessageInfo

type NativeClick struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	Leftx                int64                       `protobuf:"varint,4,opt,name=Leftx,proto3" json:"left_x"`
	Lefty                int64                       `protobuf:"varint,5,opt,name=Lefty,proto3" json:"left_y"`
	Width                int64                       `protobuf:"varint,6,opt,name=Width,proto3" json:"width"`
	Length               int64                       `protobuf:"varint,7,opt,name=Length,proto3" json:"length"`
	Link                 string                      `protobuf:"bytes,8,opt,name=Link,proto3" json:"link"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Type                 int64                       `protobuf:"varint,11,opt,name=Type,proto3" json:"type"`
	ForeignID            int64                       `protobuf:"varint,12,opt,name=ForeignID,proto3" json:"foreign_id"`
	UnfinishedImage      string                      `protobuf:"bytes,13,opt,name=UnfinishedImage,proto3" json:"unfinished_image"`
	FinishedImage        string                      `protobuf:"bytes,14,opt,name=FinishedImage,proto3" json:"finished_image"`
	Tip                  string                      `protobuf:"bytes,15,opt,name=Tip,proto3" json:"tip"`
	OptionalImage        string                      `protobuf:"bytes,16,opt,name=OptionalImage,proto3" json:"optional_image"`
	Ext                  string                      `protobuf:"bytes,17,opt,name=Ext,proto3" json:"ext"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeClick) Reset()         { *m = NativeClick{} }
func (m *NativeClick) String() string { return proto.CompactTextString(m) }
func (*NativeClick) ProtoMessage()    {}
func (*NativeClick) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{64}
}
func (m *NativeClick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeClick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeClick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeClick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeClick.Merge(m, src)
}
func (m *NativeClick) XXX_Size() int {
	return m.Size()
}
func (m *NativeClick) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeClick.DiscardUnknown(m)
}

var xxx_messageInfo_NativeClick proto.InternalMessageInfo

type Image struct {
	Image                string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Width                int64    `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height               int64    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Size_                int64    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{65}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

type ClickTip struct {
	TopColor   string `protobuf:"bytes,1,opt,name=top_color,json=topColor,proto3" json:"top_color,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TitleColor string `protobuf:"bytes,3,opt,name=title_color,json=titleColor,proto3" json:"title_color,omitempty"`
	// 字体大小
	FontSize int64 `protobuf:"varint,4,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
	// 字体颜色
	FontColor string `protobuf:"bytes,5,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
	// 数值
	Num int64 `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`
	// 统计类型
	StatType string `protobuf:"bytes,7,opt,name=stat_type,json=statType,proto3" json:"stat_type,omitempty"`
	// 干预数值
	InterveNum int64 `protobuf:"varint,8,opt,name=interve_num,json=interveNum,proto3" json:"interve_num,omitempty"`
	// 字体类型：normal 正常；bold 加粗
	FontType string `protobuf:"bytes,9,opt,name=font_type,json=fontType,proto3" json:"font_type,omitempty"`
	// 展示类型：num 数值；num_and_target 当前数值/目标值
	DisplayType string `protobuf:"bytes,10,opt,name=display_type,json=displayType,proto3" json:"display_type,omitempty"`
	//进度条-任务统计-活动名
	Activity string `protobuf:"bytes,11,opt,name=activity,proto3" json:"activity,omitempty"`
	//进度条-任务统计-counter名
	Counter string `protobuf:"bytes,12,opt,name=counter,proto3" json:"counter,omitempty"`
	//自定义点击组件-静态进度条数据源类型 0:用户积分统计 1:活动报名量 2:任务统计 3:抽奖数量
	PSort int32 `protobuf:"varint,13,opt,name=pSort,proto3" json:"pSort,omitempty"`
	//进度条-抽奖数据源-抽奖id
	LotteryID string `protobuf:"bytes,14,opt,name=lotteryID,proto3" json:"lotteryID,omitempty"`
	//进度条-任务统计：统计周期 单日:daily 累计：total
	StatPc string `protobuf:"bytes,15,opt,name=statPc,proto3" json:"statPc,omitempty"`
	//节点id
	NodeId int64 `protobuf:"varint,16,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	//节点组id
	GroupId int64 `protobuf:"varint,17,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	//展示模式：0 无要求 1 解锁后展示
	DisplayMode int64 `protobuf:"varint,18,opt,name=display_mode,json=displayMode,proto3" json:"display_mode,omitempty"`
	//解锁条件：0 无要求；1 时间；2 预约/积分进度
	UnlockCondition int64 `protobuf:"varint,19,opt,name=unlock_condition,json=unlockCondition,proto3" json:"unlock_condition,omitempty"`
	//时间解锁-开始时间
	Stime                int64    `protobuf:"varint,20,opt,name=stime,proto3" json:"stime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickTip) Reset()         { *m = ClickTip{} }
func (m *ClickTip) String() string { return proto.CompactTextString(m) }
func (*ClickTip) ProtoMessage()    {}
func (*ClickTip) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{66}
}
func (m *ClickTip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickTip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickTip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickTip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickTip.Merge(m, src)
}
func (m *ClickTip) XXX_Size() int {
	return m.Size()
}
func (m *ClickTip) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickTip.DiscardUnknown(m)
}

var xxx_messageInfo_ClickTip proto.InternalMessageInfo

type OptionItem struct {
	BgColor              string   `protobuf:"bytes,1,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OptionItem) Reset()         { *m = OptionItem{} }
func (m *OptionItem) String() string { return proto.CompactTextString(m) }
func (*OptionItem) ProtoMessage()    {}
func (*OptionItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{67}
}
func (m *OptionItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptionItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptionItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptionItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionItem.Merge(m, src)
}
func (m *OptionItem) XXX_Size() int {
	return m.Size()
}
func (m *OptionItem) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionItem.DiscardUnknown(m)
}

var xxx_messageInfo_OptionItem proto.InternalMessageInfo

type ClickExt struct {
	LayerImage  string   `protobuf:"bytes,1,opt,name=layer_image,json=layerImage,proto3" json:"layer_image,omitempty"`
	ButtonImage string   `protobuf:"bytes,2,opt,name=button_image,json=buttonImage,proto3" json:"button_image,omitempty"`
	ShareImage  *Image   `protobuf:"bytes,3,opt,name=share_image,json=shareImage,proto3" json:"share_image,omitempty"`
	Style       string   `protobuf:"bytes,4,opt,name=style,proto3" json:"style,omitempty"`
	Images      []*Image `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`
	//是否与悬浮按钮互通
	SynHover bool `protobuf:"varint,6,opt,name=syn_hover,json=synHover,proto3" json:"syn_hover,omitempty"`
	//点击区域ukey
	Ukey string `protobuf:"bytes,7,opt,name=ukey,proto3" json:"ukey,omitempty"`
	//节点id
	NodeId int64 `protobuf:"varint,8,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	//节点组id
	GroupId int64 `protobuf:"varint,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	//展示模式：0 无要求 1 解锁后展示
	DisplayMode int64 `protobuf:"varint,10,opt,name=display_mode,json=displayMode,proto3" json:"display_mode,omitempty"`
	//解锁条件：0 无要求；1 时间；2 预约/积分进度
	UnlockCondition int64 `protobuf:"varint,11,opt,name=unlock_condition,json=unlockCondition,proto3" json:"unlock_condition,omitempty"`
	//时间解锁-开始时间
	Stime int64 `protobuf:"varint,12,opt,name=stime,proto3" json:"stime,omitempty"`
	//数据源id
	Sid int64 `protobuf:"varint,13,opt,name=sid,proto3" json:"sid,omitempty"`
	//选项
	Items []*OptionItem `protobuf:"bytes,14,rep,name=items,proto3" json:"items,omitempty"`
	//上传类型：0 上传；1 拍摄
	UpType               int64    `protobuf:"varint,15,opt,name=up_type,json=upType,proto3" json:"up_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickExt) Reset()         { *m = ClickExt{} }
func (m *ClickExt) String() string { return proto.CompactTextString(m) }
func (*ClickExt) ProtoMessage()    {}
func (*ClickExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{68}
}
func (m *ClickExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClickExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClickExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClickExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickExt.Merge(m, src)
}
func (m *ClickExt) XXX_Size() int {
	return m.Size()
}
func (m *ClickExt) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickExt.DiscardUnknown(m)
}

var xxx_messageInfo_ClickExt proto.InternalMessageInfo

type NativeDynamicExt struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	SelectType           int64                       `protobuf:"varint,4,opt,name=SelectType,proto3" json:"select_type"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	ClassType            int64                       `protobuf:"varint,7,opt,name=ClassType,proto3" json:"class_type"`
	ClassID              int64                       `protobuf:"varint,8,opt,name=ClassID,proto3" json:"class_id"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeDynamicExt) Reset()         { *m = NativeDynamicExt{} }
func (m *NativeDynamicExt) String() string { return proto.CompactTextString(m) }
func (*NativeDynamicExt) ProtoMessage()    {}
func (*NativeDynamicExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{69}
}
func (m *NativeDynamicExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeDynamicExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeDynamicExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeDynamicExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeDynamicExt.Merge(m, src)
}
func (m *NativeDynamicExt) XXX_Size() int {
	return m.Size()
}
func (m *NativeDynamicExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeDynamicExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativeDynamicExt proto.InternalMessageInfo

type NativeVideoExt struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	SortType             int64                       `protobuf:"varint,4,opt,name=SortType,proto3" json:"sort_type"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=Rank,proto3" json:"rank"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	SortName             string                      `protobuf:"bytes,8,opt,name=SortName,proto3" json:"sort_name"`
	Category             int64                       `protobuf:"varint,9,opt,name=Category,proto3" json:"category"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeVideoExt) Reset()         { *m = NativeVideoExt{} }
func (m *NativeVideoExt) String() string { return proto.CompactTextString(m) }
func (*NativeVideoExt) ProtoMessage()    {}
func (*NativeVideoExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{70}
}
func (m *NativeVideoExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeVideoExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeVideoExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeVideoExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeVideoExt.Merge(m, src)
}
func (m *NativeVideoExt) XXX_Size() int {
	return m.Size()
}
func (m *NativeVideoExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeVideoExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativeVideoExt proto.InternalMessageInfo

type NativeMixtureExt struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	ForeignID            int64                       `protobuf:"varint,4,opt,name=ForeignID,proto3" json:"foreign_id"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=Rank,proto3" json:"rank"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	MType                int32                       `protobuf:"varint,8,opt,name=MType,proto3" json:"m_type"`
	Reason               string                      `protobuf:"bytes,9,opt,name=Reason,proto3" json:"reason"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeMixtureExt) Reset()         { *m = NativeMixtureExt{} }
func (m *NativeMixtureExt) String() string { return proto.CompactTextString(m) }
func (*NativeMixtureExt) ProtoMessage()    {}
func (*NativeMixtureExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{71}
}
func (m *NativeMixtureExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeMixtureExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeMixtureExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeMixtureExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeMixtureExt.Merge(m, src)
}
func (m *NativeMixtureExt) XXX_Size() int {
	return m.Size()
}
func (m *NativeMixtureExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeMixtureExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativeMixtureExt proto.InternalMessageInfo

type NativeParticipationExt struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=ModuleID,proto3" json:"module_id"`
	State                int64                       `protobuf:"varint,3,opt,name=State,proto3" json:"state"`
	MType                int32                       `protobuf:"varint,4,opt,name=MType,proto3" json:"m_type"`
	Image                string                      `protobuf:"bytes,5,opt,name=Image,proto3" json:"image"`
	Title                string                      `protobuf:"bytes,6,opt,name=Title,proto3" json:"title"`
	Rank                 int64                       `protobuf:"varint,7,opt,name=Rank,proto3" json:"rank"`
	ForeignID            int64                       `protobuf:"varint,8,opt,name=ForeignID,proto3" json:"foreign_id"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	UpType               int32                       `protobuf:"varint,11,opt,name=UpType,proto3" json:"up_type"`
	Ext                  string                      `protobuf:"bytes,12,opt,name=Ext,proto3" json:"ext"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeParticipationExt) Reset()         { *m = NativeParticipationExt{} }
func (m *NativeParticipationExt) String() string { return proto.CompactTextString(m) }
func (*NativeParticipationExt) ProtoMessage()    {}
func (*NativeParticipationExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{72}
}
func (m *NativeParticipationExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeParticipationExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeParticipationExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeParticipationExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeParticipationExt.Merge(m, src)
}
func (m *NativeParticipationExt) XXX_Size() int {
	return m.Size()
}
func (m *NativeParticipationExt) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeParticipationExt.DiscardUnknown(m)
}

var xxx_messageInfo_NativeParticipationExt proto.InternalMessageInfo

type NativeActTab struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	Stime                go_common_library_time.Time `protobuf:"varint,3,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time `protobuf:"varint,4,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	State                int32                       `protobuf:"varint,5,opt,name=State,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	BgType               int32                       `protobuf:"varint,8,opt,name=BgType,proto3" json:"bg_type"`
	BgImg                string                      `protobuf:"bytes,9,opt,name=BgImg,proto3" json:"bg_img"`
	BgColor              string                      `protobuf:"bytes,10,opt,name=BgColor,proto3" json:"bg_color"`
	IconType             int32                       `protobuf:"varint,11,opt,name=IconType,proto3" json:"icon_type"`
	ActiveColor          string                      `protobuf:"bytes,12,opt,name=ActiveColor,proto3" json:"active_color"`
	InactiveColor        string                      `protobuf:"bytes,13,opt,name=InactiveColor,proto3" json:"inactive_color"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeActTab) Reset()         { *m = NativeActTab{} }
func (m *NativeActTab) String() string { return proto.CompactTextString(m) }
func (*NativeActTab) ProtoMessage()    {}
func (*NativeActTab) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{73}
}
func (m *NativeActTab) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeActTab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeActTab.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeActTab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeActTab.Merge(m, src)
}
func (m *NativeActTab) XXX_Size() int {
	return m.Size()
}
func (m *NativeActTab) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeActTab.DiscardUnknown(m)
}

var xxx_messageInfo_NativeActTab proto.InternalMessageInfo

type NativeTabModule struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=Title,proto3" json:"title"`
	TabID                int64                       `protobuf:"varint,3,opt,name=TabID,proto3" json:"tab_id"`
	State                int32                       `protobuf:"varint,4,opt,name=State,proto3" json:"state"`
	Category             int32                       `protobuf:"varint,5,opt,name=Category,proto3" json:"category"`
	Pid                  int64                       `protobuf:"varint,6,opt,name=Pid,proto3" json:"pid"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	URL                  string                      `protobuf:"bytes,9,opt,name=URL,proto3" json:"url"`
	ActiveImg            string                      `protobuf:"bytes,10,opt,name=ActiveImg,proto3" json:"active_img"`
	InactiveImg          string                      `protobuf:"bytes,11,opt,name=InactiveImg,proto3" json:"inactive_img"`
	Rank                 int32                       `protobuf:"varint,12,opt,name=Rank,proto3" json:"rank"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeTabModule) Reset()         { *m = NativeTabModule{} }
func (m *NativeTabModule) String() string { return proto.CompactTextString(m) }
func (*NativeTabModule) ProtoMessage()    {}
func (*NativeTabModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{74}
}
func (m *NativeTabModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTabModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTabModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTabModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTabModule.Merge(m, src)
}
func (m *NativeTabModule) XXX_Size() int {
	return m.Size()
}
func (m *NativeTabModule) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTabModule.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTabModule proto.InternalMessageInfo

type NativeTsPage struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Ctime                go_common_library_time.Time `protobuf:"varint,4,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,5,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	State                int64                       `protobuf:"varint,6,opt,name=state,proto3" json:"state"`
	Pid                  int64                       `protobuf:"varint,8,opt,name=pid,proto3" json:"pid"`
	Title                string                      `protobuf:"bytes,9,opt,name=title,proto3" json:"title"`
	ForeignID            int64                       `protobuf:"varint,10,opt,name=foreignID,proto3" json:"foreign_id"`
	VideoDisplay         string                      `protobuf:"bytes,11,opt,name=videoDisplay,proto3" json:"video_display"`
	AuditType            string                      `protobuf:"bytes,12,opt,name=auditType,proto3" json:"audit_type"`
	AuditTime            int64                       `protobuf:"varint,13,opt,name=auditTime,proto3" json:"audit_time"`
	ShareImage           string                      `protobuf:"bytes,14,opt,name=shareImage,proto3" json:"share_image"`
	Template             string                      `protobuf:"bytes,15,opt,name=template,proto3" json:"template"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeTsPage) Reset()         { *m = NativeTsPage{} }
func (m *NativeTsPage) String() string { return proto.CompactTextString(m) }
func (*NativeTsPage) ProtoMessage()    {}
func (*NativeTsPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{75}
}
func (m *NativeTsPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTsPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTsPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTsPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTsPage.Merge(m, src)
}
func (m *NativeTsPage) XXX_Size() int {
	return m.Size()
}
func (m *NativeTsPage) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTsPage.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTsPage proto.InternalMessageInfo

type NativePageSource struct {
	// 自增id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// native页id
	PageId int64 `protobuf:"varint,2,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	// 数据源id
	Sid int64 `protobuf:"varint,3,opt,name=sid,proto3" json:"sid,omitempty"`
	// 投稿分区，以","相隔
	Partitions string `protobuf:"bytes,4,opt,name=partitions,proto3" json:"partitions,omitempty"`
	// 活动类型
	ActType int64 `protobuf:"varint,5,opt,name=act_type,json=actType,proto3" json:"act_type,omitempty"`
	// 创建时间
	Ctime go_common_library_time.Time `protobuf:"varint,6,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	// 修改时间
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativePageSource) Reset()         { *m = NativePageSource{} }
func (m *NativePageSource) String() string { return proto.CompactTextString(m) }
func (*NativePageSource) ProtoMessage()    {}
func (*NativePageSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{76}
}
func (m *NativePageSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageSource.Merge(m, src)
}
func (m *NativePageSource) XXX_Size() int {
	return m.Size()
}
func (m *NativePageSource) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageSource.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageSource proto.InternalMessageInfo

type NativeTsModule struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Category             int64                       `protobuf:"varint,2,opt,name=category,proto3" json:"category"`
	TsID                 int64                       `protobuf:"varint,3,opt,name=tsID,proto3" json:"ts_id"`
	State                int64                       `protobuf:"varint,4,opt,name=state,proto3" json:"state"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=rank,proto3" json:"rank"`
	Meta                 string                      `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta"`
	Width                int64                       `protobuf:"varint,7,opt,name=width,proto3" json:"width"`
	Length               int64                       `protobuf:"varint,8,opt,name=length,proto3" json:"length"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Remark               string                      `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark"`
	PType                int32                       `protobuf:"varint,12,opt,name=pType,proto3" json:"p_type"`
	Ukey                 string                      `protobuf:"bytes,13,opt,name=ukey,proto3" json:"ukey"`
	Num                  int64                       `protobuf:"varint,14,opt,name=num,proto3" json:"num"`
	Attribute            int64                       `protobuf:"varint,15,opt,name=attribute,proto3" json:"attribute"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeTsModule) Reset()         { *m = NativeTsModule{} }
func (m *NativeTsModule) String() string { return proto.CompactTextString(m) }
func (*NativeTsModule) ProtoMessage()    {}
func (*NativeTsModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{77}
}
func (m *NativeTsModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTsModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTsModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTsModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTsModule.Merge(m, src)
}
func (m *NativeTsModule) XXX_Size() int {
	return m.Size()
}
func (m *NativeTsModule) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTsModule.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTsModule proto.InternalMessageInfo

type NativeTsModuleResource struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ModuleID             int64                       `protobuf:"varint,2,opt,name=moduleID,proto3" json:"module_id"`
	ResourceID           int64                       `protobuf:"varint,3,opt,name=resourceID,proto3" json:"resource_id"`
	ResourceType         int64                       `protobuf:"varint,4,opt,name=resourceType,proto3" json:"resource_type"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=rank,proto3" json:"rank"`
	ResourceFrom         string                      `protobuf:"bytes,6,opt,name=resourceFrom,proto3" json:"resource_from"`
	State                int64                       `protobuf:"varint,7,opt,name=state,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Ext                  string                      `protobuf:"bytes,10,opt,name=ext,proto3" json:"ext"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeTsModuleResource) Reset()         { *m = NativeTsModuleResource{} }
func (m *NativeTsModuleResource) String() string { return proto.CompactTextString(m) }
func (*NativeTsModuleResource) ProtoMessage()    {}
func (*NativeTsModuleResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{78}
}
func (m *NativeTsModuleResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTsModuleResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTsModuleResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTsModuleResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTsModuleResource.Merge(m, src)
}
func (m *NativeTsModuleResource) XXX_Size() int {
	return m.Size()
}
func (m *NativeTsModuleResource) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTsModuleResource.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTsModuleResource proto.InternalMessageInfo

type NativePageDyn struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Pid                  int64                       `protobuf:"varint,2,opt,name=pid,proto3" json:"pid"`
	Ctime                go_common_library_time.Time `protobuf:"varint,3,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,4,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Stime                go_common_library_time.Time `protobuf:"varint,5,opt,name=stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Validity             int64                       `protobuf:"varint,6,opt,name=validity,proto3" json:"validity"`
	SquareTitle          string                      `protobuf:"bytes,7,opt,name=squareTitle,proto3" json:"square_title"`
	SmallCard            string                      `protobuf:"bytes,8,opt,name=smallCard,proto3" json:"small_card"`
	BigCard              string                      `protobuf:"bytes,9,opt,name=bigCard,proto3" json:"big_card"`
	Tids                 string                      `protobuf:"bytes,10,opt,name=tids,proto3" json:"tids"`
	Dynamic              string                      `protobuf:"bytes,11,opt,name=dynamic,proto3" json:"dynamic"`
	DynId                int64                       `protobuf:"varint,12,opt,name=dyn_id,json=dynId,proto3" json:"dyn_id"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativePageDyn) Reset()         { *m = NativePageDyn{} }
func (m *NativePageDyn) String() string { return proto.CompactTextString(m) }
func (*NativePageDyn) ProtoMessage()    {}
func (*NativePageDyn) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{79}
}
func (m *NativePageDyn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageDyn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageDyn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageDyn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageDyn.Merge(m, src)
}
func (m *NativePageDyn) XXX_Size() int {
	return m.Size()
}
func (m *NativePageDyn) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageDyn.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageDyn proto.InternalMessageInfo

type NativePageExtend struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Pid                  int64                       `protobuf:"varint,2,opt,name=pid,proto3" json:"pid"`
	Ctime                go_common_library_time.Time `protobuf:"varint,3,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,4,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	WhiteValue           string                      `protobuf:"bytes,5,opt,name=whiteValue,proto3" json:"white_value"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativePageExtend) Reset()         { *m = NativePageExtend{} }
func (m *NativePageExtend) String() string { return proto.CompactTextString(m) }
func (*NativePageExtend) ProtoMessage()    {}
func (*NativePageExtend) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{80}
}
func (m *NativePageExtend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativePageExtend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativePageExtend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativePageExtend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativePageExtend.Merge(m, src)
}
func (m *NativePageExtend) XXX_Size() int {
	return m.Size()
}
func (m *NativePageExtend) XXX_DiscardUnknown() {
	xxx_messageInfo_NativePageExtend.DiscardUnknown(m)
}

var xxx_messageInfo_NativePageExtend proto.InternalMessageInfo

type SponsorNativePagesReq struct {
	Uids                 []int64  `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty" validate:"min=1,max=500,dive,min=1"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SponsorNativePagesReq) Reset()         { *m = SponsorNativePagesReq{} }
func (m *SponsorNativePagesReq) String() string { return proto.CompactTextString(m) }
func (*SponsorNativePagesReq) ProtoMessage()    {}
func (*SponsorNativePagesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{81}
}
func (m *SponsorNativePagesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SponsorNativePagesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SponsorNativePagesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SponsorNativePagesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SponsorNativePagesReq.Merge(m, src)
}
func (m *SponsorNativePagesReq) XXX_Size() int {
	return m.Size()
}
func (m *SponsorNativePagesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SponsorNativePagesReq.DiscardUnknown(m)
}

var xxx_messageInfo_SponsorNativePagesReq proto.InternalMessageInfo

type SponsorNativePagesReply struct {
	List                 []*SponsorNativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SponsorNativePagesReply) Reset()         { *m = SponsorNativePagesReply{} }
func (m *SponsorNativePagesReply) String() string { return proto.CompactTextString(m) }
func (*SponsorNativePagesReply) ProtoMessage()    {}
func (*SponsorNativePagesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{82}
}
func (m *SponsorNativePagesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SponsorNativePagesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SponsorNativePagesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SponsorNativePagesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SponsorNativePagesReply.Merge(m, src)
}
func (m *SponsorNativePagesReply) XXX_Size() int {
	return m.Size()
}
func (m *SponsorNativePagesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SponsorNativePagesReply.DiscardUnknown(m)
}

var xxx_messageInfo_SponsorNativePagesReply proto.InternalMessageInfo

type GetNatProgressParamsReq struct {
	PageID               int64    `protobuf:"varint,1,opt,name=pageID,proto3" json:"pageID,omitempty" validate:"required,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNatProgressParamsReq) Reset()         { *m = GetNatProgressParamsReq{} }
func (m *GetNatProgressParamsReq) String() string { return proto.CompactTextString(m) }
func (*GetNatProgressParamsReq) ProtoMessage()    {}
func (*GetNatProgressParamsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{83}
}
func (m *GetNatProgressParamsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNatProgressParamsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNatProgressParamsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNatProgressParamsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNatProgressParamsReq.Merge(m, src)
}
func (m *GetNatProgressParamsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetNatProgressParamsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNatProgressParamsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetNatProgressParamsReq proto.InternalMessageInfo

type GetNatProgressParamsReply struct {
	List                 []*ProgressParam `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetNatProgressParamsReply) Reset()         { *m = GetNatProgressParamsReply{} }
func (m *GetNatProgressParamsReply) String() string { return proto.CompactTextString(m) }
func (*GetNatProgressParamsReply) ProtoMessage()    {}
func (*GetNatProgressParamsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{84}
}
func (m *GetNatProgressParamsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNatProgressParamsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNatProgressParamsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNatProgressParamsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNatProgressParamsReply.Merge(m, src)
}
func (m *GetNatProgressParamsReply) XXX_Size() int {
	return m.Size()
}
func (m *GetNatProgressParamsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNatProgressParamsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetNatProgressParamsReply proto.InternalMessageInfo

type ProgressParam struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PageID               int64    `protobuf:"varint,2,opt,name=pageID,proto3" json:"page_id"`
	Sid                  int64    `protobuf:"varint,3,opt,name=sid,proto3" json:"sid"`
	Dimension            int64    `protobuf:"varint,4,opt,name=dimension,proto3" json:"dimension"`
	RuleIDName           string   `protobuf:"bytes,5,opt,name=ruleIDName,proto3" json:"rule_id_name"`
	RuleID               int64    `protobuf:"varint,6,opt,name=ruleID,proto3" json:"rule_id"`
	RuleName             string   `protobuf:"bytes,7,opt,name=ruleName,proto3" json:"rule_name"`
	WebKey               string   `protobuf:"bytes,8,opt,name=webKey,proto3" json:"web_key"`
	Type                 string   `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`
	StatType             string   `protobuf:"bytes,10,opt,name=StatType,proto3" json:"stat_type"`
	InterveNum           int64    `protobuf:"varint,11,opt,name=InterveNum,proto3" json:"interve_num"`
	GroupID              int64    `protobuf:"varint,12,opt,name=groupID,proto3" json:"group_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProgressParam) Reset()         { *m = ProgressParam{} }
func (m *ProgressParam) String() string { return proto.CompactTextString(m) }
func (*ProgressParam) ProtoMessage()    {}
func (*ProgressParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{85}
}
func (m *ProgressParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProgressParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProgressParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProgressParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgressParam.Merge(m, src)
}
func (m *ProgressParam) XXX_Size() int {
	return m.Size()
}
func (m *ProgressParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgressParam.DiscardUnknown(m)
}

var xxx_messageInfo_ProgressParam proto.InternalMessageInfo

type SponsorNativePage struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ForeignID            int64                       `protobuf:"varint,2,opt,name=ForeignID,proto3" json:"foreign_id"`
	RelatedUid           int64                       `protobuf:"varint,3,opt,name=RelatedUid,proto3" json:"related_uid"`
	Stime                go_common_library_time.Time `protobuf:"varint,4,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SponsorNativePage) Reset()         { *m = SponsorNativePage{} }
func (m *SponsorNativePage) String() string { return proto.CompactTextString(m) }
func (*SponsorNativePage) ProtoMessage()    {}
func (*SponsorNativePage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{86}
}
func (m *SponsorNativePage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SponsorNativePage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SponsorNativePage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SponsorNativePage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SponsorNativePage.Merge(m, src)
}
func (m *SponsorNativePage) XXX_Size() int {
	return m.Size()
}
func (m *SponsorNativePage) XXX_DiscardUnknown() {
	xxx_messageInfo_SponsorNativePage.DiscardUnknown(m)
}

var xxx_messageInfo_SponsorNativePage proto.InternalMessageInfo

type ActPage struct {
	List                 []*ActPageItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ActPage) Reset()         { *m = ActPage{} }
func (m *ActPage) String() string { return proto.CompactTextString(m) }
func (*ActPage) ProtoMessage()    {}
func (*ActPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{87}
}
func (m *ActPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActPage.Merge(m, src)
}
func (m *ActPage) XXX_Size() int {
	return m.Size()
}
func (m *ActPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ActPage.DiscardUnknown(m)
}

var xxx_messageInfo_ActPage proto.InternalMessageInfo

type ActPageItem struct {
	PageID               int64    `protobuf:"varint,1,opt,name=pageID,proto3" json:"page_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActPageItem) Reset()         { *m = ActPageItem{} }
func (m *ActPageItem) String() string { return proto.CompactTextString(m) }
func (*ActPageItem) ProtoMessage()    {}
func (*ActPageItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{88}
}
func (m *ActPageItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActPageItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActPageItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActPageItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActPageItem.Merge(m, src)
}
func (m *ActPageItem) XXX_Size() int {
	return m.Size()
}
func (m *ActPageItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ActPageItem.DiscardUnknown(m)
}

var xxx_messageInfo_ActPageItem proto.InternalMessageInfo

type NativeAllPagesReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=100,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeAllPagesReq) Reset()         { *m = NativeAllPagesReq{} }
func (m *NativeAllPagesReq) String() string { return proto.CompactTextString(m) }
func (*NativeAllPagesReq) ProtoMessage()    {}
func (*NativeAllPagesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{89}
}
func (m *NativeAllPagesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeAllPagesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeAllPagesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeAllPagesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeAllPagesReq.Merge(m, src)
}
func (m *NativeAllPagesReq) XXX_Size() int {
	return m.Size()
}
func (m *NativeAllPagesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeAllPagesReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativeAllPagesReq proto.InternalMessageInfo

type NativeAllPagesReply struct {
	List                 map[int64]*NativePage `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NativeAllPagesReply) Reset()         { *m = NativeAllPagesReply{} }
func (m *NativeAllPagesReply) String() string { return proto.CompactTextString(m) }
func (*NativeAllPagesReply) ProtoMessage()    {}
func (*NativeAllPagesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{90}
}
func (m *NativeAllPagesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeAllPagesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeAllPagesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeAllPagesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeAllPagesReply.Merge(m, src)
}
func (m *NativeAllPagesReply) XXX_Size() int {
	return m.Size()
}
func (m *NativeAllPagesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeAllPagesReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativeAllPagesReply proto.InternalMessageInfo

type SpaceSyncSettingReq struct {
	// 用户mid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" validate:"min=1"`
	// 访问的页面id
	PageId               int64    `protobuf:"varint,2,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty" validate:"min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpaceSyncSettingReq) Reset()         { *m = SpaceSyncSettingReq{} }
func (m *SpaceSyncSettingReq) String() string { return proto.CompactTextString(m) }
func (*SpaceSyncSettingReq) ProtoMessage()    {}
func (*SpaceSyncSettingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{91}
}
func (m *SpaceSyncSettingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpaceSyncSettingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpaceSyncSettingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpaceSyncSettingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceSyncSettingReq.Merge(m, src)
}
func (m *SpaceSyncSettingReq) XXX_Size() int {
	return m.Size()
}
func (m *SpaceSyncSettingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceSyncSettingReq.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceSyncSettingReq proto.InternalMessageInfo

type SpaceSyncSettingReply struct {
	// 空间按钮：为空不展示；personal_page 个人空间； exclusive_page 空间专属页；
	SpaceButton          string   `protobuf:"bytes,1,opt,name=spaceButton,json=space_button,proto3" json:"space_button"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpaceSyncSettingReply) Reset()         { *m = SpaceSyncSettingReply{} }
func (m *SpaceSyncSettingReply) String() string { return proto.CompactTextString(m) }
func (*SpaceSyncSettingReply) ProtoMessage()    {}
func (*SpaceSyncSettingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{92}
}
func (m *SpaceSyncSettingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpaceSyncSettingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpaceSyncSettingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpaceSyncSettingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceSyncSettingReply.Merge(m, src)
}
func (m *SpaceSyncSettingReply) XXX_Size() int {
	return m.Size()
}
func (m *SpaceSyncSettingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceSyncSettingReply.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceSyncSettingReply proto.InternalMessageInfo

type NativeUserSpace struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Title                string                      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	PageId               int64                       `protobuf:"varint,4,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	DisplaySpace         int64                       `protobuf:"varint,5,opt,name=display_space,json=displaySpace,proto3" json:"display_space,omitempty"`
	State                string                      `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NativeUserSpace) Reset()         { *m = NativeUserSpace{} }
func (m *NativeUserSpace) String() string { return proto.CompactTextString(m) }
func (*NativeUserSpace) ProtoMessage()    {}
func (*NativeUserSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{93}
}
func (m *NativeUserSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeUserSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeUserSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeUserSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeUserSpace.Merge(m, src)
}
func (m *NativeUserSpace) XXX_Size() int {
	return m.Size()
}
func (m *NativeUserSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeUserSpace.DiscardUnknown(m)
}

var xxx_messageInfo_NativeUserSpace proto.InternalMessageInfo

type NativeAllPageCardsReq struct {
	Pids                 []int64  `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty" validate:"min=1,max=50,dive,min=1"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NativeAllPageCardsReq) Reset()         { *m = NativeAllPageCardsReq{} }
func (m *NativeAllPageCardsReq) String() string { return proto.CompactTextString(m) }
func (*NativeAllPageCardsReq) ProtoMessage()    {}
func (*NativeAllPageCardsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{94}
}
func (m *NativeAllPageCardsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeAllPageCardsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeAllPageCardsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeAllPageCardsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeAllPageCardsReq.Merge(m, src)
}
func (m *NativeAllPageCardsReq) XXX_Size() int {
	return m.Size()
}
func (m *NativeAllPageCardsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeAllPageCardsReq.DiscardUnknown(m)
}

var xxx_messageInfo_NativeAllPageCardsReq proto.InternalMessageInfo

type NativeAllPageCardsReply struct {
	List                 map[int64]*NativePageCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *NativeAllPageCardsReply) Reset()         { *m = NativeAllPageCardsReply{} }
func (m *NativeAllPageCardsReply) String() string { return proto.CompactTextString(m) }
func (*NativeAllPageCardsReply) ProtoMessage()    {}
func (*NativeAllPageCardsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{95}
}
func (m *NativeAllPageCardsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeAllPageCardsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeAllPageCardsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeAllPageCardsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeAllPageCardsReply.Merge(m, src)
}
func (m *NativeAllPageCardsReply) XXX_Size() int {
	return m.Size()
}
func (m *NativeAllPageCardsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeAllPageCardsReply.DiscardUnknown(m)
}

var xxx_messageInfo_NativeAllPageCardsReply proto.InternalMessageInfo

// NativeParticipationExt.Ext
type PartiExt struct {
	// 新话题id
	NewTid               int64    `protobuf:"varint,1,opt,name=new_tid,json=newTid,proto3" json:"new_tid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartiExt) Reset()         { *m = PartiExt{} }
func (m *PartiExt) String() string { return proto.CompactTextString(m) }
func (*PartiExt) ProtoMessage()    {}
func (*PartiExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbe4ef73615fc192, []int{96}
}
func (m *PartiExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartiExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartiExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartiExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartiExt.Merge(m, src)
}
func (m *PartiExt) XXX_Size() int {
	return m.Size()
}
func (m *PartiExt) XXX_DiscardUnknown() {
	xxx_messageInfo_PartiExt.DiscardUnknown(m)
}

var xxx_messageInfo_PartiExt proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NativeForbidListReq)(nil), "natpage.interface.service.v1.NativeForbidListReq")
	proto.RegisterType((*IsUpActUidReq)(nil), "natpage.interface.service.v1.IsUpActUidReq")
	proto.RegisterType((*IsUpActUidReply)(nil), "natpage.interface.service.v1.IsUpActUidReply")
	proto.RegisterType((*UpActNativePagesReq)(nil), "natpage.interface.service.v1.UpActNativePagesReq")
	proto.RegisterType((*UpActNativePagesReply)(nil), "natpage.interface.service.v1.UpActNativePagesReply")
	proto.RegisterType((*UpActNativePages)(nil), "natpage.interface.service.v1.UpActNativePages")
	proto.RegisterType((*UpActNativePageBindReq)(nil), "natpage.interface.service.v1.UpActNativePageBindReq")
	proto.RegisterType((*UpActNativePageBindReply)(nil), "natpage.interface.service.v1.UpActNativePageBindReply")
	proto.RegisterType((*NativePagesReq)(nil), "natpage.interface.service.v1.NativePagesReq")
	proto.RegisterType((*NativePageCardsReq)(nil), "natpage.interface.service.v1.NativePageCardsReq")
	proto.RegisterType((*NativePageCardsReply)(nil), "natpage.interface.service.v1.NativePageCardsReply")
	proto.RegisterMapType((map[int64]*NativePageCard)(nil), "natpage.interface.service.v1.NativePageCardsReply.ListEntry")
	proto.RegisterType((*NativePageCard)(nil), "natpage.interface.service.v1.NativePageCard")
	proto.RegisterType((*NativePagesReply)(nil), "natpage.interface.service.v1.NativePagesReply")
	proto.RegisterMapType((map[int64]*NativePage)(nil), "natpage.interface.service.v1.NativePagesReply.ListEntry")
	proto.RegisterType((*NativePagesExtReq)(nil), "natpage.interface.service.v1.NativePagesExtReq")
	proto.RegisterType((*NativePagesExtReply)(nil), "natpage.interface.service.v1.NativePagesExtReply")
	proto.RegisterMapType((map[int64]*NativePageExt)(nil), "natpage.interface.service.v1.NativePagesExtReply.ListEntry")
	proto.RegisterType((*NativePageExt)(nil), "natpage.interface.service.v1.NativePageExt")
	proto.RegisterType((*NativeValidPagesExtReq)(nil), "natpage.interface.service.v1.NativeValidPagesExtReq")
	proto.RegisterType((*NativeValidPagesExtReply)(nil), "natpage.interface.service.v1.NativeValidPagesExtReply")
	proto.RegisterMapType((map[int64]*NativePageExt)(nil), "natpage.interface.service.v1.NativeValidPagesExtReply.ListEntry")
	proto.RegisterType((*NativePageReq)(nil), "natpage.interface.service.v1.NativePageReq")
	proto.RegisterType((*NativePageReply)(nil), "natpage.interface.service.v1.NativePageReply")
	proto.RegisterType((*NativePagesTabReq)(nil), "natpage.interface.service.v1.NativePagesTabReq")
	proto.RegisterType((*NativePagesTabReply)(nil), "natpage.interface.service.v1.NativePagesTabReply")
	proto.RegisterMapType((map[int64]*PagesTab)(nil), "natpage.interface.service.v1.NativePagesTabReply.ListEntry")
	proto.RegisterType((*PagesTab)(nil), "natpage.interface.service.v1.PagesTab")
	proto.RegisterType((*NatTabModulesReq)(nil), "natpage.interface.service.v1.NatTabModulesReq")
	proto.RegisterType((*NatTabModulesReply)(nil), "natpage.interface.service.v1.NatTabModulesReply")
	proto.RegisterType((*PageInfo)(nil), "natpage.interface.service.v1.PageInfo")
	proto.RegisterType((*NoReply)(nil), "natpage.interface.service.v1.NoReply")
	proto.RegisterType((*ModuleConfigReq)(nil), "natpage.interface.service.v1.ModuleConfigReq")
	proto.RegisterType((*ModuleConfigReply)(nil), "natpage.interface.service.v1.ModuleConfigReply")
	proto.RegisterType((*NatInfoFromForeignReq)(nil), "natpage.interface.service.v1.NatInfoFromForeignReq")
	proto.RegisterMapType((map[string]string)(nil), "natpage.interface.service.v1.NatInfoFromForeignReq.ContentEntry")
	proto.RegisterType((*NatInfoFromForeignReply)(nil), "natpage.interface.service.v1.NatInfoFromForeignReply")
	proto.RegisterMapType((map[int64]*NativePage)(nil), "natpage.interface.service.v1.NatInfoFromForeignReply.ListEntry")
	proto.RegisterType((*NatConfigReq)(nil), "natpage.interface.service.v1.NatConfigReq")
	proto.RegisterType((*NatConfigReply)(nil), "natpage.interface.service.v1.NatConfigReply")
	proto.RegisterType((*FirstPage)(nil), "natpage.interface.service.v1.FirstPage")
	proto.RegisterType((*BaseConfigReq)(nil), "natpage.interface.service.v1.BaseConfigReq")
	proto.RegisterType((*BaseConfigReply)(nil), "natpage.interface.service.v1.BaseConfigReply")
	proto.RegisterType((*Page)(nil), "natpage.interface.service.v1.Page")
	proto.RegisterType((*Module)(nil), "natpage.interface.service.v1.Module")
	proto.RegisterType((*Reserve)(nil), "natpage.interface.service.v1.Reserve")
	proto.RegisterType((*MatchEvent)(nil), "natpage.interface.service.v1.MatchEvent")
	proto.RegisterType((*Game)(nil), "natpage.interface.service.v1.Game")
	proto.RegisterType((*Click)(nil), "natpage.interface.service.v1.Click")
	proto.RegisterType((*VideoAct)(nil), "natpage.interface.service.v1.VideoAct")
	proto.RegisterType((*Act)(nil), "natpage.interface.service.v1.Act")
	proto.RegisterType((*Dynamic)(nil), "natpage.interface.service.v1.Dynamic")
	proto.RegisterType((*Participation)(nil), "natpage.interface.service.v1.Participation")
	proto.RegisterType((*Recommend)(nil), "natpage.interface.service.v1.Recommend")
	proto.RegisterType((*InlineTab)(nil), "natpage.interface.service.v1.InlineTab")
	proto.RegisterType((*Select)(nil), "natpage.interface.service.v1.Select")
	proto.RegisterType((*Carousel)(nil), "natpage.interface.service.v1.Carousel")
	proto.RegisterType((*Icon)(nil), "natpage.interface.service.v1.Icon")
	proto.RegisterType((*Progress)(nil), "natpage.interface.service.v1.Progress")
	proto.RegisterType((*ModuleMixExtReq)(nil), "natpage.interface.service.v1.ModuleMixExtReq")
	proto.RegisterType((*ModuleMixExtReply)(nil), "natpage.interface.service.v1.ModuleMixExtReply")
	proto.RegisterType((*ModuleMixExtsReq)(nil), "natpage.interface.service.v1.ModuleMixExtsReq")
	proto.RegisterType((*ModuleMixExtsReply)(nil), "natpage.interface.service.v1.ModuleMixExtsReply")
	proto.RegisterType((*NativePage)(nil), "natpage.interface.service.v1.NativePage")
	proto.RegisterType((*ConfSet)(nil), "natpage.interface.service.v1.ConfSet")
	proto.RegisterType((*NativeModule)(nil), "natpage.interface.service.v1.NativeModule")
	proto.RegisterType((*ConfSort)(nil), "natpage.interface.service.v1.ConfSort")
	proto.RegisterType((*Colors)(nil), "natpage.interface.service.v1.Colors")
	proto.RegisterType((*MixReason)(nil), "natpage.interface.service.v1.MixReason")
	proto.RegisterType((*ImageComm)(nil), "natpage.interface.service.v1.ImageComm")
	proto.RegisterType((*NativeAct)(nil), "natpage.interface.service.v1.NativeAct")
	proto.RegisterType((*NativeClick)(nil), "natpage.interface.service.v1.NativeClick")
	proto.RegisterType((*Image)(nil), "natpage.interface.service.v1.Image")
	proto.RegisterType((*ClickTip)(nil), "natpage.interface.service.v1.ClickTip")
	proto.RegisterType((*OptionItem)(nil), "natpage.interface.service.v1.OptionItem")
	proto.RegisterType((*ClickExt)(nil), "natpage.interface.service.v1.ClickExt")
	proto.RegisterType((*NativeDynamicExt)(nil), "natpage.interface.service.v1.NativeDynamicExt")
	proto.RegisterType((*NativeVideoExt)(nil), "natpage.interface.service.v1.NativeVideoExt")
	proto.RegisterType((*NativeMixtureExt)(nil), "natpage.interface.service.v1.NativeMixtureExt")
	proto.RegisterType((*NativeParticipationExt)(nil), "natpage.interface.service.v1.NativeParticipationExt")
	proto.RegisterType((*NativeActTab)(nil), "natpage.interface.service.v1.NativeActTab")
	proto.RegisterType((*NativeTabModule)(nil), "natpage.interface.service.v1.NativeTabModule")
	proto.RegisterType((*NativeTsPage)(nil), "natpage.interface.service.v1.NativeTsPage")
	proto.RegisterType((*NativePageSource)(nil), "natpage.interface.service.v1.NativePageSource")
	proto.RegisterType((*NativeTsModule)(nil), "natpage.interface.service.v1.NativeTsModule")
	proto.RegisterType((*NativeTsModuleResource)(nil), "natpage.interface.service.v1.NativeTsModuleResource")
	proto.RegisterType((*NativePageDyn)(nil), "natpage.interface.service.v1.NativePageDyn")
	proto.RegisterType((*NativePageExtend)(nil), "natpage.interface.service.v1.NativePageExtend")
	proto.RegisterType((*SponsorNativePagesReq)(nil), "natpage.interface.service.v1.SponsorNativePagesReq")
	proto.RegisterType((*SponsorNativePagesReply)(nil), "natpage.interface.service.v1.SponsorNativePagesReply")
	proto.RegisterType((*GetNatProgressParamsReq)(nil), "natpage.interface.service.v1.GetNatProgressParamsReq")
	proto.RegisterType((*GetNatProgressParamsReply)(nil), "natpage.interface.service.v1.GetNatProgressParamsReply")
	proto.RegisterType((*ProgressParam)(nil), "natpage.interface.service.v1.ProgressParam")
	proto.RegisterType((*SponsorNativePage)(nil), "natpage.interface.service.v1.SponsorNativePage")
	proto.RegisterType((*ActPage)(nil), "natpage.interface.service.v1.ActPage")
	proto.RegisterType((*ActPageItem)(nil), "natpage.interface.service.v1.ActPageItem")
	proto.RegisterType((*NativeAllPagesReq)(nil), "natpage.interface.service.v1.NativeAllPagesReq")
	proto.RegisterType((*NativeAllPagesReply)(nil), "natpage.interface.service.v1.NativeAllPagesReply")
	proto.RegisterMapType((map[int64]*NativePage)(nil), "natpage.interface.service.v1.NativeAllPagesReply.ListEntry")
	proto.RegisterType((*SpaceSyncSettingReq)(nil), "natpage.interface.service.v1.SpaceSyncSettingReq")
	proto.RegisterType((*SpaceSyncSettingReply)(nil), "natpage.interface.service.v1.SpaceSyncSettingReply")
	proto.RegisterType((*NativeUserSpace)(nil), "natpage.interface.service.v1.NativeUserSpace")
	proto.RegisterType((*NativeAllPageCardsReq)(nil), "natpage.interface.service.v1.NativeAllPageCardsReq")
	proto.RegisterType((*NativeAllPageCardsReply)(nil), "natpage.interface.service.v1.NativeAllPageCardsReply")
	proto.RegisterMapType((map[int64]*NativePageCard)(nil), "natpage.interface.service.v1.NativeAllPageCardsReply.ListEntry")
	proto.RegisterType((*PartiExt)(nil), "natpage.interface.service.v1.PartiExt")
}

func init() {
	proto.RegisterFile("go-gateway/app/web-svr/native-page/interface/api/api.proto", fileDescriptor_bbe4ef73615fc192)
}

var fileDescriptor_bbe4ef73615fc192 = []byte{
	// 6901 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7d, 0x5b, 0x6c, 0x1c, 0xc9,
	0x75, 0xa8, 0xe7, 0x3d, 0x73, 0x48, 0x4a, 0x54, 0xaf, 0x56, 0x1a, 0x71, 0xb5, 0x1a, 0x6d, 0xcb,
	0xbb, 0x2b, 0x79, 0x29, 0x52, 0x0f, 0xcb, 0xbb, 0x57, 0x5e, 0x6b, 0xcd, 0x87, 0xe4, 0xa5, 0x4d,
	0x6a, 0xe9, 0x22, 0xb5, 0x17, 0x36, 0x70, 0xef, 0xa0, 0x67, 0xba, 0x67, 0xd8, 0xd0, 0x4c, 0xf7,
	0xa8, 0xbb, 0x87, 0xe2, 0x18, 0xf7, 0xc3, 0x17, 0x01, 0x82, 0x00, 0x4e, 0x7e, 0xf2, 0x65, 0x20,
	0xc8, 0xeb, 0x2f, 0x01, 0xf2, 0x11, 0xe4, 0x3f, 0xf0, 0x47, 0xfc, 0x61, 0xe4, 0x85, 0xc4, 0x89,
	0x03, 0x04, 0x41, 0x18, 0xc7, 0x41, 0x10, 0x80, 0x48, 0x80, 0x40, 0x41, 0xf2, 0x11, 0x20, 0x40,
	0x70, 0x4e, 0x55, 0x75, 0x55, 0xcf, 0x83, 0x33, 0x43, 0xca, 0xbb, 0xf1, 0x87, 0xa8, 0xee, 0xaa,
	0x73, 0x4e, 0xbd, 0x4e, 0x9d, 0x57, 0x9d, 0xae, 0x81, 0xfb, 0x4d, 0xff, 0x66, 0xd3, 0x8a, 0x9c,
	0xe7, 0x56, 0x6f, 0xd9, 0xea, 0x74, 0x96, 0x9f, 0x3b, 0xb5, 0x9b, 0xe1, 0x7e, 0xb0, 0xec, 0x59,
	0x91, 0xbb, 0xef, 0xdc, 0xec, 0x58, 0x4d, 0x67, 0xd9, 0xf5, 0x22, 0x27, 0x68, 0x58, 0x75, 0x67,
	0xd9, 0xea, 0xb8, 0xf8, 0x6f, 0xa9, 0x13, 0xf8, 0x91, 0x6f, 0x5c, 0xf6, 0xac, 0x08, 0x01, 0x96,
	0x62, 0x80, 0xa5, 0xd0, 0x09, 0xf6, 0xdd, 0xba, 0xb3, 0xb4, 0x7f, 0x7b, 0xe1, 0x66, 0xd3, 0x8d,
	0xf6, 0xba, 0xb5, 0xa5, 0xba, 0xdf, 0x5e, 0x6e, 0xfa, 0x4d, 0x7f, 0x99, 0x90, 0x6a, 0xdd, 0x06,
	0xbd, 0xd1, 0x0b, 0x3d, 0x71, 0x62, 0x66, 0x0f, 0x5e, 0x79, 0x4c, 0x6d, 0x3e, 0xf2, 0x83, 0x9a,
	0x6b, 0x6f, 0xba, 0x61, 0xc4, 0x9c, 0x67, 0xc6, 0x5b, 0x90, 0xe9, 0xb8, 0x76, 0x39, 0x75, 0x35,
	0x75, 0x3d, 0xb3, 0x7a, 0xfe, 0xc5, 0x61, 0x65, 0x7e, 0xdf, 0x6a, 0xb9, 0xb6, 0x15, 0x39, 0xf7,
	0xcd, 0xb6, 0xeb, 0x7d, 0xe9, 0xb6, 0xc9, 0x10, 0xc0, 0xb8, 0x0f, 0x60, 0x45, 0x51, 0xc0, 0x91,
	0xcb, 0xe9, 0xab, 0xa9, 0xeb, 0xb9, 0xd5, 0x85, 0x17, 0x87, 0x95, 0x0b, 0x7d, 0xe0, 0x8b, 0x6d,
	0xeb, 0xe0, 0x4b, 0x77, 0x4c, 0xa6, 0x41, 0x9b, 0xef, 0xc2, 0xdc, 0x46, 0xf8, 0xa4, 0xb3, 0x52,
	0x8f, 0x9e, 0xb8, 0xb6, 0x68, 0xb4, 0x3d, 0xae, 0xd1, 0xb6, 0x6b, 0x9b, 0x6f, 0xc3, 0x59, 0x1d,
	0xb1, 0xd3, 0xea, 0x19, 0xe7, 0x21, 0xb7, 0x65, 0x45, 0xf5, 0x3d, 0x42, 0x2e, 0x32, 0xfe, 0x62,
	0x7e, 0x37, 0x05, 0xaf, 0x10, 0x1c, 0x1f, 0xe2, 0xb6, 0xd5, 0x74, 0xc2, 0x29, 0x1a, 0x32, 0x16,
	0x21, 0xef, 0x37, 0x1a, 0xa1, 0x13, 0xd1, 0xc8, 0x86, 0x82, 0xde, 0x32, 0x99, 0x80, 0x31, 0xde,
	0x81, 0x74, 0x27, 0x2c, 0x67, 0x08, 0xf2, 0xb5, 0x17, 0x87, 0x95, 0x8b, 0x7d, 0x90, 0x34, 0x07,
	0xf7, 0x6e, 0x99, 0x2c, 0xdd, 0x09, 0xcd, 0x5f, 0x4a, 0xc1, 0xab, 0x83, 0x5d, 0xc3, 0xa1, 0x5c,
	0x88, 0x1b, 0xa5, 0xfe, 0xc5, 0xe4, 0xcb, 0x50, 0xd8, 0xb3, 0xc2, 0x2d, 0x3f, 0x70, 0xf8, 0x3c,
	0x33, 0xf9, 0x6a, 0xac, 0x42, 0xb6, 0xe5, 0x86, 0x51, 0x39, 0x73, 0x35, 0x73, 0x7d, 0xe6, 0xce,
	0xd2, 0xd2, 0x71, 0xfc, 0xb1, 0x34, 0xd0, 0x28, 0xe1, 0x9a, 0xdb, 0x30, 0xdf, 0x5f, 0x63, 0xbc,
	0x0f, 0xd9, 0x9a, 0x15, 0x3a, 0xd4, 0x8f, 0x99, 0x3b, 0xd7, 0x8f, 0xa7, 0xab, 0x10, 0x19, 0x61,
	0x99, 0xdf, 0x4e, 0xc1, 0x85, 0x3e, 0x92, 0xab, 0xae, 0x67, 0x4f, 0x39, 0xff, 0xd8, 0xe0, 0xc6,
	0xfa, 0xe8, 0xf9, 0xbf, 0x6d, 0x32, 0x01, 0x63, 0xcc, 0x43, 0xa6, 0x1b, 0xb4, 0x68, 0x01, 0x4a,
	0x0c, 0x1f, 0xcd, 0x05, 0x28, 0x0f, 0xed, 0x41, 0xa7, 0xd5, 0x33, 0xb7, 0xe0, 0x4c, 0x1f, 0x57,
	0x7c, 0x11, 0xb2, 0x1d, 0xd7, 0x0e, 0xcb, 0xa9, 0xab, 0x99, 0xeb, 0x99, 0xd5, 0xb7, 0x5f, 0x1c,
	0x56, 0xae, 0x0d, 0xe3, 0xe2, 0xdb, 0xf7, 0x6e, 0x2d, 0xda, 0xee, 0xbe, 0xb3, 0x28, 0x9a, 0x27,
	0x24, 0xf3, 0x8f, 0x53, 0x60, 0x28, 0x7a, 0x6b, 0x56, 0x60, 0x4f, 0x45, 0xf3, 0xd6, 0x10, 0x9a,
	0xc8, 0x09, 0xb6, 0x83, 0xf3, 0x4b, 0xc3, 0x2f, 0x31, 0xf1, 0x66, 0x5c, 0x82, 0x62, 0xdb, 0xaf,
	0xb9, 0x55, 0xab, 0xd3, 0x11, 0xa3, 0x2d, 0xe0, 0xfb, 0x4a, 0xa7, 0x83, 0xfb, 0xa0, 0xd6, 0x75,
	0x5b, 0x76, 0x39, 0x4b, 0x2c, 0xc2, 0x5f, 0x78, 0xe9, 0xbe, 0x6b, 0x97, 0x73, 0x04, 0xcd, 0x5f,
	0x8c, 0x05, 0x28, 0x76, 0x5a, 0x56, 0xd4, 0xf0, 0x83, 0x76, 0x39, 0x4f, 0x15, 0xf1, 0xbb, 0xf9,
	0xd7, 0x29, 0x38, 0x3f, 0x30, 0x1c, 0xe4, 0xce, 0x6f, 0x0a, 0x5e, 0x4b, 0x11, 0xaf, 0xbd, 0x3f,
	0x29, 0x4f, 0x28, 0x0a, 0x4b, 0x28, 0x62, 0x1e, 0x7a, 0x51, 0xd0, 0x5b, 0x2d, 0x1e, 0x1d, 0x56,
	0x88, 0x1a, 0xe7, 0xc1, 0x05, 0x07, 0x4a, 0x71, 0x25, 0xae, 0xe6, 0x53, 0xa7, 0x27, 0xf6, 0x00,
	0x3e, 0x1a, 0xab, 0x90, 0xdb, 0xb7, 0x5a, 0x5d, 0x3e, 0x1b, 0x33, 0x77, 0x16, 0xa7, 0x69, 0x9b,
	0x71, 0xd4, 0xfb, 0xe9, 0xf7, 0x52, 0xe6, 0xbf, 0x67, 0xf4, 0xa5, 0xc7, 0x5a, 0xe3, 0x02, 0xa4,
	0x63, 0x7e, 0xcc, 0x1f, 0x1d, 0x56, 0xd2, 0xae, 0xcd, 0xd2, 0xae, 0x6d, 0x54, 0x20, 0x17, 0xb9,
	0x51, 0x4b, 0x2c, 0xc0, 0x6a, 0xe9, 0xe8, 0xb0, 0xc2, 0x0b, 0x18, 0xff, 0xcf, 0xb8, 0x0c, 0xd9,
	0xa8, 0xd7, 0x71, 0xc4, 0xae, 0xa7, 0x01, 0xe1, 0x3b, 0xa3, 0xbf, 0xc6, 0x22, 0x94, 0x1a, 0x7e,
	0xe0, 0xb8, 0x4d, 0x6f, 0x63, 0x9d, 0x56, 0x24, 0xb3, 0x7a, 0xe6, 0xe8, 0xb0, 0x02, 0xa2, 0xb0,
	0xea, 0xda, 0x4c, 0x01, 0x18, 0xcb, 0x00, 0xe1, 0x9e, 0x15, 0x38, 0xbb, 0xd4, 0x22, 0x2d, 0xd5,
	0xea, 0xd9, 0xa3, 0xc3, 0xca, 0x0c, 0x95, 0x56, 0x79, 0xbb, 0x1a, 0x48, 0x8c, 0xb0, 0xd1, 0xb6,
	0x9a, 0x0e, 0x5f, 0x42, 0x1d, 0xc1, 0xc5, 0x62, 0xa6, 0x81, 0x18, 0x37, 0xa0, 0x48, 0x6f, 0x4f,
	0xd8, 0x66, 0xb9, 0x40, 0xe0, 0x73, 0x47, 0x87, 0x95, 0x12, 0x07, 0xef, 0x06, 0x2d, 0x16, 0x57,
	0x1b, 0x6f, 0x41, 0x21, 0x7c, 0xea, 0x76, 0x10, 0xb2, 0x48, 0x90, 0xb3, 0x47, 0x87, 0x95, 0x22,
	0x16, 0x11, 0xa0, 0xac, 0xc4, 0x3e, 0x04, 0x4e, 0xcb, 0x8a, 0x1c, 0xfb, 0x89, 0x6b, 0x97, 0x4b,
	0x34, 0x46, 0xea, 0x83, 0x28, 0xad, 0x76, 0x5d, 0x9b, 0x69, 0x20, 0xc6, 0x55, 0xc8, 0x75, 0xea,
	0x48, 0x16, 0x88, 0x2c, 0x1c, 0x1d, 0x56, 0xf2, 0x9d, 0x3a, 0x11, 0xe5, 0x15, 0xc6, 0x3d, 0x98,
	0xa5, 0x6e, 0xac, 0x59, 0x9d, 0xc8, 0xf5, 0xbd, 0xf2, 0x0c, 0x01, 0x9e, 0x3b, 0x3a, 0xac, 0xcc,
	0xf1, 0x9e, 0xd6, 0x79, 0x05, 0x4b, 0x80, 0xe1, 0x5a, 0x85, 0x91, 0x15, 0x39, 0xe5, 0x59, 0xea,
	0x04, 0xad, 0x15, 0x15, 0x30, 0xfe, 0x9f, 0xf9, 0x27, 0x29, 0x98, 0x1f, 0x90, 0xb6, 0x1f, 0x27,
	0xf8, 0xf9, 0xbd, 0x49, 0x79, 0x6a, 0x2c, 0x2f, 0x5b, 0xc7, 0xf3, 0xf2, 0x83, 0x24, 0x2f, 0x4f,
	0x2e, 0x5b, 0x35, 0x3e, 0xde, 0x86, 0x73, 0x5a, 0x87, 0x1e, 0x1e, 0x44, 0xa7, 0x15, 0x38, 0xe6,
	0x5f, 0xa5, 0xa4, 0x35, 0xa0, 0x48, 0xe2, 0x24, 0x7d, 0x23, 0x31, 0x49, 0x5f, 0x9c, 0x78, 0x92,
	0x24, 0x81, 0x63, 0xe6, 0xc9, 0x3e, 0x7e, 0x9e, 0x56, 0x92, 0xf3, 0xf4, 0xce, 0xa4, 0x4d, 0x63,
	0xcb, 0xda, 0x54, 0xfd, 0x76, 0x0a, 0xe6, 0x12, 0x95, 0xc6, 0x23, 0xc8, 0xba, 0x91, 0xd3, 0x9e,
	0x56, 0xb7, 0xf1, 0xfe, 0x23, 0x26, 0xa3, 0xbf, 0xc6, 0x36, 0xe4, 0xed, 0x9e, 0xf7, 0xf0, 0x20,
	0x9a, 0xb6, 0x87, 0xeb, 0x3d, 0x6f, 0x75, 0xe6, 0xe8, 0xb0, 0x52, 0xb0, 0x7b, 0x5e, 0xd5, 0x39,
	0x88, 0x98, 0xa0, 0x63, 0x7e, 0x1d, 0x2e, 0x70, 0xa8, 0x8f, 0x71, 0xdd, 0xf4, 0xb5, 0x7d, 0x17,
	0x0a, 0x56, 0x3d, 0xda, 0x45, 0x79, 0xc3, 0x45, 0xd5, 0xeb, 0x2f, 0x0e, 0x2b, 0x97, 0xd4, 0xf2,
	0x06, 0xce, 0xb3, 0xae, 0x1b, 0x38, 0xf6, 0xa2, 0x30, 0x4c, 0x24, 0xb4, 0xf9, 0xe3, 0x14, 0x94,
	0x87, 0xd2, 0xc4, 0xc5, 0xfd, 0xbf, 0x89, 0xc5, 0xfd, 0xf2, 0x24, 0xfd, 0x1f, 0xa4, 0xf2, 0xa9,
	0xaf, 0xf0, 0xbb, 0xfa, 0x02, 0x4f, 0x61, 0xc1, 0x9a, 0x1f, 0xc1, 0x59, 0x1d, 0x11, 0x67, 0xe4,
	0xfd, 0x93, 0xf1, 0x06, 0xe7, 0x08, 0xf3, 0xff, 0xa7, 0x12, 0xfb, 0x72, 0xd7, 0xaa, 0x61, 0x77,
	0xee, 0x27, 0xf6, 0xe5, 0x5b, 0x2f, 0x0e, 0x2b, 0xe6, 0xb0, 0x7d, 0x39, 0xcc, 0xb6, 0x30, 0x6e,
	0x41, 0xb1, 0x6e, 0x45, 0x4e, 0xd3, 0x0f, 0x7a, 0xc2, 0xc4, 0x1e, 0x3e, 0x9e, 0x18, 0xca, 0xfc,
	0xf3, 0xe4, 0x46, 0xa6, 0x3e, 0x9c, 0x66, 0x23, 0x4b, 0x02, 0xc7, 0x2c, 0x73, 0xf5, 0xf8, 0x65,
	0x7e, 0x3f, 0xb9, 0xcc, 0x6f, 0x1d, 0xdf, 0x74, 0xdc, 0xa8, 0xb6, 0xc2, 0xbf, 0x99, 0x82, 0xa2,
	0x2c, 0x47, 0x2d, 0x12, 0x59, 0xb5, 0x8d, 0x75, 0xb1, 0xbe, 0xa4, 0x45, 0x22, 0xab, 0x86, 0x1a,
	0x95, 0x57, 0x18, 0x77, 0x61, 0x26, 0xb2, 0x6a, 0x5b, 0xbe, 0xdd, 0x6d, 0x29, 0x03, 0x92, 0x94,
	0x08, 0xc2, 0xb5, 0xa9, 0x1c, 0xc1, 0x75, 0x28, 0xe3, 0x5a, 0x6c, 0x70, 0x72, 0x85, 0x4e, 0x1b,
	0x14, 0x4b, 0x10, 0x52, 0xda, 0x99, 0x97, 0xb8, 0x9d, 0x99, 0x25, 0xb5, 0x54, 0x38, 0x3a, 0xac,
	0xe0, 0x2b, 0x37, 0x38, 0x1f, 0x90, 0x86, 0xd9, 0x95, 0x14, 0xc9, 0x04, 0xfc, 0x5c, 0xb2, 0xab,
	0xc3, 0x97, 0x8e, 0x83, 0x98, 0xbf, 0xc5, 0xad, 0x48, 0x9d, 0x00, 0x2e, 0xdb, 0x43, 0xc8, 0x44,
	0x56, 0x4d, 0xf0, 0xe3, 0xe7, 0x26, 0x59, 0xb5, 0x95, 0x3a, 0x12, 0xe1, 0xbd, 0x8b, 0xac, 0x1a,
	0xc3, 0x3f, 0xc6, 0xd7, 0xc4, 0xea, 0xa7, 0x69, 0xf5, 0x6f, 0x4e, 0x42, 0x27, 0xee, 0x49, 0xff,
	0x7a, 0x9b, 0x5f, 0xe6, 0xab, 0xb1, 0xe1, 0x35, 0x7c, 0xe3, 0x0c, 0xa4, 0x3b, 0x9e, 0x58, 0xed,
	0x74, 0xc7, 0xa3, 0xf7, 0x90, 0x4f, 0x39, 0x3a, 0x3b, 0x68, 0x7f, 0x46, 0x7e, 0x64, 0x71, 0xdb,
	0x3c, 0xc3, 0xf8, 0x8b, 0x59, 0x82, 0xc2, 0x63, 0x9f, 0x1b, 0xe3, 0x2e, 0x9c, 0xe5, 0xcd, 0xac,
	0xf9, 0x5e, 0xc3, 0x6d, 0xe2, 0xb4, 0xdd, 0x42, 0x23, 0x57, 0x2c, 0xde, 0x71, 0x33, 0x17, 0x43,
	0x19, 0x9f, 0x85, 0xb9, 0x4e, 0xe0, 0xb6, 0xad, 0xa0, 0xb7, 0xad, 0x39, 0x0d, 0x2c, 0x59, 0x68,
	0xfe, 0x53, 0x0a, 0xce, 0x25, 0xdb, 0xc2, 0x19, 0xfe, 0x10, 0xc0, 0x8b, 0xd9, 0x7d, 0xea, 0x8d,
	0xaf, 0xe1, 0x1a, 0xef, 0x43, 0x9e, 0xf7, 0x48, 0x70, 0xfa, 0x67, 0x8f, 0xa7, 0xc2, 0xbb, 0xc2,
	0x04, 0x8e, 0xf1, 0x55, 0x98, 0xd1, 0xba, 0x4b, 0xf3, 0x35, 0x4d, 0x47, 0x74, 0x64, 0xf3, 0x57,
	0xd3, 0xf0, 0xea, 0x63, 0x2b, 0xc2, 0x15, 0x7a, 0x14, 0xf8, 0xed, 0x47, 0xdc, 0xd0, 0x14, 0xc2,
	0xa8, 0x71, 0x02, 0x61, 0xd4, 0x10, 0xc2, 0x08, 0xbb, 0x42, 0x5a, 0xe8, 0x38, 0xaf, 0x2c, 0x86,
	0x32, 0xbe, 0x09, 0x85, 0xba, 0xef, 0x45, 0x8e, 0x27, 0x3d, 0xd4, 0xf1, 0x3a, 0x66, 0xb0, 0xcf,
	0x4b, 0x6b, 0x9c, 0x04, 0xc9, 0x17, 0x26, 0x09, 0x2e, 0xdc, 0x87, 0x59, 0xbd, 0x42, 0x17, 0x3c,
	0x25, 0x2e, 0x78, 0xce, 0xeb, 0x82, 0xa7, 0xa4, 0x0b, 0x94, 0xbf, 0x49, 0xc1, 0xc5, 0x61, 0x6d,
	0x21, 0x3f, 0xfc, 0x9f, 0x84, 0xa0, 0xfc, 0x60, 0xfa, 0x0e, 0x0f, 0x11, 0x96, 0x9b, 0x9f, 0xa8,
	0x75, 0xf8, 0xfb, 0x29, 0x98, 0x7d, 0x6c, 0x45, 0x6a, 0x43, 0x4d, 0x1a, 0xd2, 0xf9, 0xe9, 0x05,
	0x3d, 0x50, 0x14, 0x76, 0x88, 0x71, 0xb2, 0xa3, 0xb4, 0xd8, 0x2d, 0x93, 0x71, 0x10, 0xf3, 0x47,
	0x69, 0xf2, 0xd2, 0x7e, 0x3a, 0x9b, 0xf4, 0x01, 0x14, 0xf8, 0x86, 0x0b, 0x85, 0x30, 0x9c, 0x6c,
	0x97, 0x4a, 0x24, 0xe3, 0x0b, 0x90, 0xed, 0xa8, 0xfd, 0x69, 0x8e, 0x57, 0x66, 0x8c, 0xe0, 0x8d,
	0xfb, 0x90, 0xab, 0x59, 0xa1, 0x13, 0x96, 0xb3, 0x53, 0xb4, 0xca, 0x51, 0x8c, 0x87, 0x50, 0x6a,
	0xb8, 0x41, 0x18, 0xd1, 0xe0, 0x73, 0xd4, 0xf0, 0xdb, 0xc7, 0xe3, 0x3f, 0x92, 0xe0, 0x4c, 0x61,
	0x9a, 0xdf, 0x49, 0x41, 0x29, 0xae, 0x38, 0x9d, 0xa9, 0x63, 0x7c, 0x19, 0x32, 0x4e, 0x6c, 0xf9,
	0x2e, 0x4d, 0x61, 0xb9, 0x39, 0x9e, 0xcd, 0x10, 0xd5, 0xfc, 0x61, 0x0a, 0xe6, 0x56, 0xad, 0xd0,
	0x99, 0x9e, 0x4d, 0x63, 0x5e, 0x4a, 0x8f, 0xe5, 0x25, 0xe3, 0xae, 0xc6, 0xa4, 0xd7, 0x5e, 0x1c,
	0x56, 0x2a, 0xb6, 0xd3, 0xb0, 0xba, 0xad, 0xe8, 0xbe, 0x79, 0xf3, 0xb6, 0x79, 0x55, 0xc3, 0xe2,
	0x9e, 0x11, 0x67, 0xd6, 0xf7, 0xe2, 0x7d, 0xc0, 0x3d, 0xf7, 0xab, 0x2f, 0x0e, 0x2b, 0x97, 0x63,
	0xc4, 0x5b, 0x09, 0xbc, 0xc4, 0x9e, 0x30, 0xff, 0x2d, 0x0d, 0x67, 0xf5, 0x41, 0xbd, 0x5c, 0xde,
	0x8d, 0x79, 0x28, 0x3d, 0x3d, 0x0f, 0x99, 0xf1, 0x98, 0x32, 0xca, 0x6e, 0xe2, 0x25, 0xf1, 0x8e,
	0x7e, 0x4b, 0xc5, 0x19, 0xf9, 0x36, 0x25, 0xcf, 0x7f, 0xcf, 0x0a, 0xab, 0x6d, 0x3f, 0x70, 0x54,
	0xd4, 0xf1, 0x2b, 0x30, 0x8b, 0x44, 0xab, 0x72, 0x23, 0xe5, 0xa6, 0xe8, 0xce, 0x0c, 0x62, 0x0a,
	0x13, 0x27, 0xc9, 0xd8, 0xf9, 0x13, 0x33, 0x36, 0x83, 0x2c, 0xcd, 0x8f, 0x99, 0x8c, 0x9f, 0x8e,
	0x1b, 0x63, 0xfa, 0x98, 0x31, 0x9a, 0xbf, 0x5b, 0x84, 0x3c, 0xef, 0xa6, 0xf1, 0x18, 0x66, 0xf9,
	0x22, 0xf0, 0xf7, 0x69, 0x8c, 0x31, 0x31, 0xe8, 0x04, 0xbe, 0xf1, 0xbf, 0x20, 0x57, 0x6f, 0xb9,
	0xf5, 0xa7, 0x62, 0xf7, 0x5c, 0x3b, 0x9e, 0xd0, 0x1a, 0x82, 0x32, 0x8e, 0x61, 0xdc, 0x85, 0x8c,
	0x55, 0x8f, 0x84, 0xf0, 0x79, 0xe3, 0x78, 0xc4, 0x95, 0x7a, 0xc4, 0x10, 0xda, 0x58, 0x85, 0xe2,
	0xbe, 0x6b, 0x3b, 0xfe, 0x4a, 0x9d, 0x33, 0xf4, 0x58, 0x1b, 0xfc, 0x63, 0x01, 0xcd, 0x62, 0x3c,
	0xe3, 0x03, 0x40, 0x6f, 0xd5, 0x6a, 0xbb, 0x75, 0x21, 0x80, 0xde, 0x3c, 0x9e, 0xc4, 0x3a, 0x07,
	0x66, 0x12, 0xcb, 0xf8, 0x3a, 0xcc, 0x75, 0xac, 0x20, 0x72, 0xeb, 0x6e, 0xc7, 0xa2, 0xd8, 0x4e,
	0x7e, 0x12, 0xa7, 0x6f, 0x5b, 0x47, 0x61, 0x49, 0x0a, 0xc8, 0x3d, 0x81, 0x53, 0xf7, 0xdb, 0x6d,
	0xc7, 0xb3, 0x29, 0xa8, 0x35, 0x96, 0x7b, 0x98, 0x04, 0x67, 0x0a, 0x13, 0xc9, 0xb8, 0x5e, 0xcb,
	0xf5, 0xd0, 0xe2, 0xa5, 0x88, 0xd7, 0x58, 0x32, 0x1b, 0x12, 0x9c, 0x29, 0x4c, 0xb4, 0xfe, 0x42,
	0xa7, 0xe5, 0xd4, 0x23, 0x0a, 0x85, 0x8d, 0xdd, 0x0e, 0x3b, 0x04, 0xcb, 0x04, 0x0e, 0xae, 0x51,
	0x27, 0xf0, 0x9b, 0x81, 0x13, 0x86, 0x14, 0x1e, 0x1b, 0xef, 0x27, 0x09, 0x68, 0x16, 0xe3, 0x21,
	0x8d, 0xba, 0x15, 0xf8, 0xdd, 0xd0, 0x69, 0x51, 0xe4, 0x6c, 0x2c, 0x8d, 0x35, 0x01, 0xcd, 0x62,
	0x3c, 0x54, 0x6f, 0x6e, 0xdd, 0xf7, 0x28, 0x92, 0x36, 0x56, 0xbd, 0x6d, 0xd4, 0x7d, 0x8f, 0x11,
	0x3c, 0xf2, 0x87, 0x55, 0xe7, 0xfb, 0x78, 0x6e, 0x12, 0xfe, 0x58, 0xe1, 0xc0, 0x4c, 0x62, 0x61,
	0xc3, 0x4d, 0xab, 0xed, 0x94, 0xcf, 0x4c, 0xd2, 0xf0, 0x57, 0xac, 0xb6, 0xc3, 0x08, 0x1e, 0x1b,
	0x0e, 0x1c, 0xac, 0x72, 0xca, 0x67, 0x27, 0x69, 0x98, 0x71, 0x60, 0x26, 0xb1, 0x50, 0x3c, 0xb7,
	0xad, 0xa8, 0xbe, 0xf7, 0x70, 0x1f, 0xcd, 0xd4, 0xf9, 0x49, 0xc4, 0xf3, 0x56, 0x0c, 0xcf, 0x34,
	0x5c, 0x73, 0x0b, 0x0a, 0x82, 0x7a, 0x7c, 0x2e, 0x93, 0x9a, 0xe4, 0x5c, 0x46, 0x88, 0x0a, 0xf7,
	0x20, 0xea, 0x06, 0x14, 0xdc, 0x90, 0xe7, 0x32, 0xa0, 0x1a, 0x7a, 0x29, 0x14, 0xbf, 0x0a, 0x59,
	0x9c, 0xb9, 0x97, 0x42, 0xeb, 0x43, 0xc8, 0x91, 0x64, 0x32, 0x3e, 0x80, 0x9c, 0x15, 0x38, 0x56,
	0x28, 0xa8, 0xdd, 0x98, 0x84, 0x9a, 0x90, 0x69, 0x84, 0x67, 0xee, 0x42, 0x51, 0x0a, 0x1c, 0xe3,
	0x43, 0x28, 0x86, 0x7e, 0x10, 0x6d, 0xaa, 0xde, 0x4d, 0x14, 0xeb, 0x27, 0x7c, 0xec, 0x5b, 0x8c,
	0x6d, 0xae, 0x41, 0x06, 0x09, 0xbe, 0x9f, 0x18, 0xea, 0x14, 0x56, 0x0e, 0x0d, 0xf2, 0x1b, 0x50,
	0x10, 0x82, 0xcc, 0x78, 0x0c, 0xc0, 0xb7, 0xea, 0xe6, 0x94, 0x33, 0x27, 0x08, 0x60, 0xef, 0x34,
	0x0a, 0xe6, 0x37, 0x60, 0x2e, 0x21, 0xdc, 0x8c, 0x0f, 0x13, 0x3d, 0xfd, 0xfc, 0x64, 0x3d, 0xd5,
	0x08, 0xa8, 0xa5, 0xf9, 0x08, 0x4a, 0xb1, 0xa0, 0x7b, 0x29, 0x6b, 0xfd, 0x11, 0x94, 0x62, 0x91,
	0xf7, 0x52, 0x08, 0x6e, 0x42, 0x7e, 0x47, 0xca, 0xbd, 0xd3, 0x53, 0x7b, 0x0c, 0x45, 0x29, 0xc9,
	0x5e, 0xd6, 0x36, 0x41, 0xc9, 0xf6, 0xb2, 0xfa, 0xb6, 0xad, 0xe4, 0xf3, 0xe9, 0xe9, 0xfd, 0x51,
	0x4a, 0xc6, 0x4b, 0xb6, 0xdc, 0x03, 0x11, 0x1c, 0x9e, 0x3e, 0x5e, 0xb2, 0xa8, 0xa2, 0x34, 0xab,
	0x97, 0x5f, 0x1c, 0x56, 0xca, 0x23, 0x0e, 0x0a, 0xb8, 0x39, 0xbc, 0xd8, 0x67, 0x3a, 0x1e, 0xef,
	0x16, 0x7e, 0x0e, 0x72, 0xed, 0xf1, 0x9e, 0x1e, 0x81, 0x98, 0x7f, 0x10, 0x47, 0x64, 0xe4, 0x68,
	0xc4, 0x89, 0x3e, 0x8f, 0x19, 0xa5, 0xb4, 0x98, 0x91, 0xb1, 0x99, 0x08, 0x61, 0x4d, 0x39, 0x7b,
	0xfd, 0x31, 0x2c, 0xdd, 0x0c, 0xcc, 0x1c, 0x67, 0xea, 0x9a, 0x7d, 0xae, 0xc0, 0x10, 0x93, 0xd2,
	0xfc, 0x8d, 0x14, 0xcc, 0xeb, 0xa3, 0x08, 0x7f, 0x9a, 0x8b, 0x72, 0xef, 0x24, 0x8b, 0x62, 0x7e,
	0x3f, 0x05, 0x46, 0x5f, 0x17, 0x7f, 0x16, 0x67, 0xfa, 0x47, 0x00, 0xa0, 0x84, 0xb4, 0x71, 0x01,
	0xd2, 0xf1, 0xec, 0xc6, 0x67, 0xb7, 0x1b, 0xeb, 0x46, 0x05, 0x72, 0xbb, 0x23, 0xce, 0x6e, 0x77,
	0xe5, 0xd9, 0xed, 0xee, 0xd0, 0xb3, 0xdb, 0x5d, 0x71, 0x76, 0xfb, 0x68, 0xdc, 0xd9, 0x6d, 0x0c,
	0x60, 0x3c, 0x80, 0xdc, 0x4e, 0xe4, 0xb6, 0xb9, 0x63, 0x9e, 0x59, 0xbd, 0xce, 0x0f, 0x1f, 0xdd,
	0xb6, 0xf3, 0x9f, 0x87, 0x95, 0xd7, 0x9a, 0xfe, 0x4d, 0x14, 0xc4, 0xbe, 0xb7, 0xdc, 0x72, 0x6b,
	0x81, 0x15, 0xf4, 0x96, 0xb1, 0x66, 0x69, 0xd7, 0x6d, 0x3b, 0x8c, 0xa3, 0x19, 0x6f, 0x42, 0x61,
	0x2d, 0x70, 0xac, 0xc8, 0x0f, 0xc4, 0x39, 0x2e, 0x45, 0x9e, 0xeb, 0xbc, 0x88, 0xc9, 0x3a, 0xe3,
	0x3a, 0x14, 0x3f, 0xea, 0x38, 0x01, 0xc1, 0x15, 0xd4, 0xb1, 0xac, 0x2f, 0xca, 0x58, 0x5c, 0x6b,
	0x2c, 0x03, 0xec, 0xa8, 0xc3, 0xe4, 0xe2, 0x88, 0xc3, 0xe4, 0x9d, 0xc4, 0x61, 0xf2, 0x8e, 0x3a,
	0x4c, 0x2e, 0x8d, 0x38, 0x4c, 0xde, 0x49, 0x1c, 0x26, 0xef, 0xc8, 0xc3, 0x64, 0x18, 0x7a, 0x98,
	0x2c, 0xab, 0x71, 0x76, 0xd6, 0x68, 0x76, 0x66, 0xd4, 0xec, 0xd4, 0x27, 0x9a, 0x1d, 0x42, 0x43,
	0xfc, 0x2d, 0xc2, 0x9f, 0x55, 0xf8, 0xed, 0x89, 0xf0, 0x09, 0x0d, 0x59, 0x61, 0x87, 0x8e, 0x86,
	0xe7, 0x06, 0x8e, 0x86, 0xa9, 0x1c, 0xd9, 0x73, 0x47, 0x9c, 0x76, 0x9f, 0x19, 0x76, 0xda, 0x2d,
	0x2a, 0x89, 0x50, 0xa7, 0xed, 0xda, 0x64, 0x65, 0x0a, 0x9e, 0x0a, 0xb1, 0x80, 0xf1, 0x72, 0x9c,
	0x45, 0xa6, 0x8e, 0xc3, 0xe7, 0x47, 0x1c, 0x87, 0x2b, 0x10, 0x1c, 0xda, 0x43, 0x1a, 0xda, 0x39,
	0x35, 0x34, 0x67, 0xa2, 0xa1, 0x11, 0x1a, 0xf6, 0x7c, 0x45, 0x9c, 0x09, 0x1a, 0x6a, 0x63, 0x59,
	0xf5, 0xa8, 0x4a, 0xbc, 0x2c, 0x2b, 0x8d, 0x4b, 0x90, 0xf9, 0xd0, 0x8f, 0xca, 0xaf, 0x50, 0x2b,
	0x74, 0x2c, 0xb0, 0xe7, 0x47, 0x0c, 0xcb, 0x90, 0xd3, 0x85, 0x79, 0xb2, 0xb1, 0x5e, 0x3e, 0xaf,
	0x38, 0x5d, 0x38, 0x6d, 0xc4, 0xe9, 0x31, 0x80, 0xf1, 0x0e, 0x94, 0x56, 0xa2, 0x28, 0x70, 0x6b,
	0xdd, 0xc8, 0x29, 0xbf, 0x4a, 0xd0, 0xb4, 0xee, 0x96, 0x2c, 0x64, 0xaa, 0xde, 0xb8, 0x0a, 0xb9,
	0x6d, 0x3a, 0xec, 0xbf, 0x30, 0x78, 0xd8, 0xbf, 0x2d, 0x0f, 0xfb, 0x57, 0x3c, 0x3f, 0xda, 0x73,
	0x02, 0xce, 0xa9, 0x17, 0xd5, 0x61, 0xbf, 0xc5, 0xcb, 0x05, 0xaf, 0x26, 0xc0, 0x10, 0x6d, 0x47,
	0xcf, 0x11, 0x28, 0x8f, 0xcc, 0x11, 0xd0, 0xc1, 0x70, 0xb6, 0x56, 0x9b, 0x6b, 0x7e, 0xcb, 0x0f,
	0xca, 0x97, 0xd4, 0x3a, 0xd7, 0x9a, 0xd5, 0x3a, 0x96, 0x31, 0x59, 0x89, 0xbc, 0xfd, 0x28, 0xf0,
	0xb9, 0x06, 0x5b, 0xa0, 0x69, 0xa5, 0x31, 0x36, 0x02, 0xbf, 0xcd, 0xe7, 0x35, 0xae, 0xc6, 0x89,
	0xfd, 0xd8, 0x09, 0xca, 0xaf, 0xa9, 0xd3, 0xa0, 0x7d, 0x27, 0x60, 0x58, 0x86, 0xad, 0xad, 0xf9,
	0x5e, 0x63, 0xc7, 0x89, 0xca, 0x97, 0x55, 0x6b, 0x75, 0xdf, 0x6b, 0x54, 0x51, 0x9e, 0xc9, 0x4a,
	0x5c, 0x80, 0x95, 0x7a, 0xf4, 0x51, 0xe0, 0x36, 0x5d, 0xaf, 0xfc, 0x3a, 0x41, 0xd2, 0x02, 0xe0,
	0x2a, 0xfa, 0x54, 0xca, 0x14, 0x00, 0x42, 0x7f, 0xd4, 0x68, 0x30, 0xc7, 0x0a, 0x7d, 0xaf, 0x7c,
	0x45, 0x41, 0xfb, 0x8d, 0x46, 0x35, 0xa0, 0x52, 0xa6, 0x00, 0x68, 0x24, 0x14, 0x22, 0x71, 0xed,
	0x72, 0x45, 0xad, 0x16, 0x85, 0x4d, 0xaa, 0x1d, 0xd7, 0x66, 0x71, 0xb5, 0xf9, 0x3b, 0xd9, 0xb8,
	0xbf, 0xc6, 0x67, 0x21, 0xbf, 0xda, 0x8c, 0x4f, 0x9a, 0x73, 0x5c, 0x1c, 0xd5, 0x9a, 0x82, 0xa9,
	0xc4, 0x83, 0x71, 0x0f, 0x66, 0x76, 0xad, 0xda, 0xae, 0xdf, 0xe1, 0x53, 0x9a, 0x56, 0x8b, 0x10,
	0x59, 0xb5, 0x6a, 0xe4, 0x77, 0xc4, 0xbc, 0x26, 0x5f, 0x8d, 0x07, 0x70, 0x66, 0xd7, 0xaa, 0x6d,
	0xb9, 0xb6, 0xdd, 0x72, 0x38, 0x26, 0x65, 0x31, 0xad, 0x9e, 0x3f, 0x3a, 0xac, 0xcc, 0xd3, 0xe9,
	0x1c, 0x55, 0x09, 0xe4, 0x81, 0x12, 0x81, 0xbf, 0xea, 0x47, 0x91, 0xdf, 0xe6, 0xf8, 0xd9, 0x24,
	0x7e, 0x8d, 0xaa, 0x74, 0x7c, 0xbd, 0xc4, 0xb8, 0x89, 0xa2, 0xdd, 0x8b, 0x38, 0x6a, 0x4e, 0xcd,
	0x60, 0xc3, 0xf7, 0x22, 0x81, 0xa4, 0x3d, 0x1b, 0x6f, 0x43, 0x61, 0xd5, 0x0a, 0x68, 0x32, 0xf2,
	0x6a, 0x8b, 0xd5, 0xac, 0x40, 0xb0, 0x82, 0x7c, 0x32, 0x16, 0xa1, 0xb8, 0xda, 0x24, 0xe1, 0x78,
	0x5b, 0x48, 0x67, 0x22, 0x5b, 0x6b, 0x72, 0xe9, 0x59, 0xbd, 0xcd, 0xb4, 0x67, 0x0d, 0xfa, 0x8e,
	0x90, 0xcf, 0x49, 0xe8, 0x3b, 0x1a, 0xf4, 0x1d, 0xd4, 0x72, 0xeb, 0xbb, 0x24, 0x96, 0x73, 0x5c,
	0xcb, 0xd9, 0x11, 0x4b, 0xdb, 0x11, 0x95, 0xaf, 0x91, 0xfc, 0x95, 0xe5, 0x75, 0x96, 0xb6, 0xeb,
	0xb8, 0x80, 0x4f, 0xbc, 0x4d, 0xbf, 0xfe, 0x94, 0x64, 0xae, 0x58, 0xc0, 0xae, 0x57, 0x6d, 0xf9,
	0xf5, 0xa7, 0x4c, 0x3e, 0x20, 0xf3, 0xee, 0xba, 0x1d, 0x12, 0xab, 0x82, 0x79, 0x23, 0xb7, 0xc3,
	0xf0, 0x0f, 0x97, 0x99, 0x28, 0x98, 0x12, 0x32, 0x93, 0x24, 0x0f, 0xfd, 0x67, 0xfe, 0xb0, 0x44,
	0x07, 0x0c, 0x2a, 0xa2, 0x35, 0x4a, 0x11, 0x5f, 0x47, 0xcb, 0x5c, 0x3b, 0xbe, 0xce, 0x88, 0x7d,
	0x20, 0xca, 0x58, 0x5c, 0x8b, 0xdd, 0x79, 0xe4, 0xda, 0x42, 0x21, 0x53, 0x77, 0x1a, 0xae, 0xcd,
	0xb0, 0x0c, 0xf9, 0x98, 0x37, 0x16, 0x6b, 0x63, 0xe2, 0x63, 0x1e, 0x52, 0x43, 0x11, 0x15, 0x57,
	0x2b, 0x69, 0x9f, 0x1b, 0x21, 0xed, 0x2f, 0x43, 0x96, 0x59, 0xde, 0x53, 0x5a, 0x4d, 0xa1, 0xf8,
	0x03, 0xcb, 0x7b, 0xca, 0xa8, 0x14, 0x6b, 0xb7, 0x9c, 0xc8, 0x12, 0x2b, 0x48, 0xb5, 0x6d, 0x27,
	0xb2, 0x18, 0x95, 0x22, 0xf1, 0xff, 0xed, 0xda, 0xd1, 0x1e, 0x2d, 0x99, 0x20, 0xfe, 0x1c, 0x0b,
	0x18, 0x2f, 0x47, 0x0b, 0x66, 0xd3, 0xf1, 0x9a, 0xd1, 0x9e, 0x48, 0x86, 0x22, 0x99, 0xd7, 0xa2,
	0x12, 0x26, 0x6a, 0x70, 0x9c, 0x8f, 0xbb, 0x6d, 0x5a, 0x35, 0x31, 0x4e, 0xaf, 0xdb, 0x66, 0x58,
	0xa6, 0xac, 0x96, 0x99, 0x11, 0x56, 0x4b, 0xac, 0x4b, 0x67, 0x4f, 0xa9, 0x4b, 0xe7, 0x4e, 0xa6,
	0x4b, 0xaf, 0x41, 0x7e, 0xbd, 0xb7, 0xe3, 0x07, 0x11, 0x69, 0xca, 0x9c, 0xcc, 0x61, 0xa9, 0xa2,
	0xcf, 0xcd, 0x44, 0x15, 0xce, 0xe1, 0x93, 0xa7, 0x4e, 0x4f, 0xa8, 0x49, 0x9a, 0xc3, 0xee, 0x53,
	0xa7, 0xc7, 0xa8, 0x34, 0xa9, 0x42, 0xe6, 0xc7, 0xa8, 0x10, 0x4d, 0x64, 0x9f, 0x3b, 0x4e, 0x64,
	0x2f, 0x03, 0xd0, 0x04, 0x71, 0x50, 0x43, 0xd9, 0x2f, 0x34, 0x7b, 0x72, 0x5b, 0x2b, 0x10, 0x94,
	0xa3, 0x68, 0x72, 0x72, 0xf8, 0x57, 0xd4, 0x06, 0x44, 0x83, 0x54, 0x80, 0x2b, 0x00, 0xd4, 0x64,
	0xbb, 0x8f, 0xad, 0xb6, 0x43, 0x0a, 0x52, 0x68, 0xb2, 0xa8, 0xea, 0x59, 0x38, 0x31, 0x54, 0x81,
	0xf4, 0xd6, 0xac, 0xc0, 0xde, 0x89, 0x7a, 0x2d, 0xae, 0x18, 0x73, 0x9c, 0x5e, 0xdd, 0x0a, 0xec,
	0x6a, 0x88, 0xa5, 0x4c, 0x01, 0xe0, 0x34, 0xae, 0xec, 0xd3, 0x34, 0x5e, 0x50, 0x99, 0x06, 0xd6,
	0xbe, 0x98, 0x46, 0x5e, 0xc5, 0x6d, 0x50, 0x29, 0xa8, 0x2e, 0x0e, 0x15, 0x54, 0x0a, 0x80, 0x94,
	0x2d, 0x49, 0xa9, 0x32, 0x35, 0xce, 0x95, 0x2d, 0x97, 0x51, 0xbc, 0x82, 0xac, 0x4c, 0xa1, 0x30,
	0x2f, 0x69, 0x56, 0xa6, 0x50, 0x95, 0xb2, 0x0e, 0x59, 0x98, 0x39, 0x6d, 0x2b, 0x78, 0x4a, 0xba,
	0x4f, 0x0c, 0x36, 0xa0, 0x12, 0x26, 0x6a, 0x90, 0x85, 0x57, 0xad, 0x84, 0xda, 0xab, 0x59, 0x01,
	0xc3, 0x32, 0x25, 0x39, 0x2e, 0x0f, 0x48, 0x8e, 0x1d, 0x69, 0x8e, 0x71, 0x9b, 0xe7, 0x75, 0x05,
	0xe0, 0x44, 0x9a, 0x51, 0x73, 0x03, 0x8a, 0x9b, 0xee, 0x3e, 0x3f, 0x63, 0xbe, 0xa2, 0xd4, 0x6f,
	0x0b, 0xb7, 0x3a, 0x97, 0xb9, 0xb2, 0x1a, 0xfb, 0x4a, 0xa3, 0x0f, 0x49, 0xbb, 0x89, 0xbe, 0xf2,
	0x12, 0x26, 0xfe, 0x47, 0x72, 0xa4, 0xd7, 0x70, 0xb6, 0xaf, 0x2a, 0x4b, 0x95, 0x2b, 0x62, 0x9c,
	0xef, 0xb8, 0xda, 0xfc, 0xc5, 0xac, 0x82, 0x45, 0x3c, 0x64, 0x06, 0xc2, 0x4b, 0x29, 0x36, 0x25,
	0x06, 0xe1, 0x78, 0xb2, 0x1a, 0x41, 0xb1, 0xe7, 0x04, 0x9a, 0x56, 0xa0, 0x58, 0x26, 0x40, 0x65,
	0x35, 0xee, 0x0d, 0xeb, 0xc0, 0x0d, 0x75, 0xb7, 0x03, 0xdf, 0x19, 0xfd, 0x45, 0x76, 0x0f, 0xec,
	0x5a, 0xec, 0x3a, 0x0b, 0x59, 0x19, 0xd8, 0x35, 0xa1, 0x7a, 0x45, 0x25, 0xa5, 0x72, 0x46, 0x16,
	0x37, 0xfc, 0x72, 0x9a, 0xf5, 0x1d, 0x59, 0xc2, 0xf2, 0x8b, 0xab, 0x71, 0x67, 0x90, 0xd3, 0xb6,
	0xef, 0xa0, 0xd0, 0xc9, 0x2b, 0x9b, 0x54, 0x94, 0x56, 0x51, 0xf8, 0x68, 0x20, 0xc6, 0x6b, 0x50,
	0xc2, 0x3e, 0x13, 0x1d, 0x2e, 0x06, 0x79, 0x48, 0x8d, 0xa8, 0x55, 0x60, 0x26, 0xf4, 0xbb, 0x41,
	0x9d, 0xaf, 0x04, 0xd7, 0x5c, 0x0c, 0x78, 0x11, 0x01, 0xcc, 0x43, 0x26, 0x94, 0xa9, 0xa0, 0x0c,
	0x1f, 0x8d, 0x32, 0x14, 0xea, 0x7e, 0x17, 0xe9, 0x73, 0x47, 0x81, 0xc9, 0x57, 0xc3, 0x80, 0xec,
	0x9e, 0xeb, 0x45, 0x5c, 0xd8, 0x31, 0x7a, 0x36, 0x2e, 0x42, 0xa1, 0x5d, 0x45, 0x69, 0x11, 0x96,
	0x67, 0xaf, 0x66, 0xae, 0x97, 0x58, 0xbe, 0x8d, 0x52, 0x23, 0xc4, 0x8a, 0x9a, 0xe8, 0xd4, 0x1c,
	0xcf, 0x87, 0xae, 0xf1, 0x2e, 0xbd, 0x06, 0xa5, 0x76, 0xe8, 0x88, 0x0e, 0x91, 0x54, 0x62, 0x45,
	0x2c, 0xa0, 0xca, 0xf3, 0x90, 0x23, 0x1d, 0xca, 0x65, 0x11, 0xe3, 0x2f, 0xc6, 0x9b, 0x70, 0x86,
	0x54, 0x42, 0xdb, 0xf1, 0x04, 0xc9, 0x79, 0x9e, 0x2c, 0x12, 0x97, 0x52, 0x68, 0xe2, 0x28, 0x2b,
	0xd9, 0x0b, 0x2d, 0x4e, 0xdb, 0x0d, 0x3b, 0x2d, 0xab, 0xc7, 0xb7, 0x63, 0x4a, 0x19, 0x3b, 0xa2,
	0x5c, 0xec, 0xc8, 0x04, 0x98, 0xf1, 0x05, 0x98, 0x25, 0x01, 0x24, 0x65, 0x18, 0xb7, 0x91, 0x8c,
	0xa3, 0xc3, 0xca, 0x19, 0x2e, 0x98, 0x62, 0x49, 0x96, 0x80, 0x33, 0xee, 0xc0, 0x0c, 0x0f, 0x8e,
	0xe9, 0x06, 0xd2, 0xfc, 0xd1, 0x61, 0x65, 0x96, 0x87, 0x0f, 0x05, 0x92, 0x0e, 0x64, 0xbc, 0x0f,
	0x67, 0x1e, 0xfb, 0x91, 0x8e, 0xa6, 0xd9, 0x45, 0x9e, 0x1f, 0x55, 0x13, 0xa8, 0x7d, 0xb0, 0xd8,
	0xd3, 0x6d, 0xcb, 0x73, 0x5a, 0xb2, 0xa7, 0x39, 0xd5, 0xd3, 0x0e, 0x96, 0x6b, 0x3d, 0xd5, 0xe1,
	0x8c, 0x55, 0x98, 0xa7, 0x77, 0xbd, 0x5d, 0xee, 0xc3, 0x5e, 0x38, 0x3a, 0xac, 0x18, 0x1c, 0x37,
	0xd1, 0xf2, 0x00, 0xbc, 0xb1, 0x09, 0xaf, 0x50, 0x59, 0x5f, 0xf7, 0xb9, 0x0a, 0x5e, 0x38, 0x3a,
	0xac, 0x5c, 0xe0, 0x64, 0x06, 0x06, 0x31, 0x0c, 0xcd, 0x78, 0x0f, 0xe6, 0x70, 0xb7, 0xb5, 0x5c,
	0x4f, 0x48, 0xf7, 0xa2, 0x3e, 0xe9, 0xbc, 0x22, 0xb6, 0x4c, 0x75, 0x40, 0x63, 0x05, 0xe6, 0xc3,
	0x6e, 0xc7, 0x09, 0x3c, 0x2b, 0xb2, 0xa4, 0xdc, 0xe5, 0xae, 0xf0, 0xab, 0x47, 0x87, 0x95, 0x73,
	0x5a, 0x9d, 0x1c, 0x4a, 0x3f, 0x38, 0x36, 0x1e, 0x76, 0x6b, 0x91, 0x52, 0x45, 0xa0, 0x1a, 0x97,
	0x15, 0xb2, 0xf1, 0x04, 0xa0, 0xf9, 0x8f, 0x39, 0x28, 0x6d, 0xb9, 0x07, 0xc2, 0x70, 0xa7, 0x74,
	0x66, 0x14, 0x92, 0xa9, 0xe1, 0xf6, 0xd7, 0xf8, 0xdc, 0x74, 0x14, 0x11, 0xdd, 0x1a, 0xb7, 0x26,
	0x32, 0x9a, 0x88, 0xe8, 0xd6, 0x84, 0x4b, 0x15, 0x57, 0xa3, 0x4c, 0xb2, 0x9d, 0xb0, 0x2e, 0xf8,
	0x85, 0x64, 0x12, 0xbe, 0x33, 0xfa, 0x8b, 0x2d, 0xf1, 0x2d, 0x94, 0x53, 0x2d, 0xf1, 0x78, 0x80,
	0xd8, 0x4d, 0x22, 0x23, 0x2e, 0x3f, 0x98, 0x11, 0x87, 0x94, 0x51, 0x49, 0xea, 0xd6, 0x14, 0x29,
	0x4d, 0xfa, 0x8b, 0x94, 0x9f, 0xc7, 0xd6, 0x54, 0x2e, 0x61, 0x4d, 0x3d, 0x97, 0xd6, 0x54, 0x4b,
	0x59, 0x53, 0xb9, 0xa4, 0x35, 0xc5, 0xff, 0x8f, 0x73, 0xf0, 0x41, 0x35, 0xa1, 0xe5, 0xe0, 0xdf,
	0x81, 0x99, 0x96, 0x5f, 0xa7, 0xe0, 0xf8, 0xd7, 0x9c, 0x9e, 0x30, 0xab, 0x68, 0x23, 0xc9, 0xe2,
	0x2a, 0x5a, 0x26, 0x3a, 0x90, 0xb1, 0x06, 0x99, 0xae, 0xb7, 0x21, 0x8e, 0xbf, 0xc6, 0x1d, 0x03,
	0xe2, 0x0c, 0xac, 0xf9, 0xed, 0xb6, 0x30, 0x73, 0xbc, 0xaa, 0xcb, 0x10, 0xdb, 0xf8, 0x00, 0xd2,
	0xe1, 0x86, 0x38, 0x07, 0x9b, 0x98, 0x06, 0xd9, 0xcd, 0xa1, 0xcb, 0xd2, 0xe1, 0x86, 0xf1, 0x08,
	0xb2, 0x5d, 0x6f, 0x67, 0x43, 0x1c, 0x86, 0x4d, 0x4c, 0x82, 0x26, 0xb1, 0xeb, 0x55, 0x43, 0x97,
	0x11, 0xbe, 0x71, 0x13, 0xf2, 0xeb, 0x5c, 0x21, 0x9f, 0x25, 0x56, 0x22, 0x56, 0x46, 0x93, 0xc4,
	0x6d, 0x3b, 0x8b, 0x7e, 0xdb, 0x8d, 0x9c, 0x76, 0x27, 0xea, 0x31, 0x01, 0x44, 0xe0, 0x5c, 0x3d,
	0xcf, 0xeb, 0xe0, 0xce, 0x00, 0x38, 0xd7, 0xd5, 0xb7, 0xa0, 0xb0, 0xee, 0x34, 0x48, 0x0f, 0x9d,
	0xa3, 0x25, 0xa2, 0x5d, 0x6f, 0x3b, 0x0d, 0x12, 0xab, 0x1a, 0x82, 0x04, 0x33, 0x9f, 0x41, 0x29,
	0xee, 0xad, 0xe2, 0xad, 0xd4, 0x08, 0xde, 0x8a, 0x59, 0x24, 0x3d, 0x9a, 0x45, 0xf6, 0x1c, 0xb7,
	0xb9, 0x17, 0x89, 0xc8, 0x22, 0xb1, 0x08, 0x2f, 0x61, 0xe2, 0x7f, 0xf3, 0xf7, 0xd2, 0x50, 0x8a,
	0x13, 0x23, 0x47, 0x3a, 0x2a, 0x37, 0xa0, 0xd8, 0x97, 0x2f, 0x2a, 0xf4, 0xbd, 0xcc, 0x15, 0x8d,
	0xab, 0x95, 0x8f, 0x91, 0x19, 0xe1, 0x63, 0x5c, 0x83, 0xbc, 0xc8, 0x42, 0xcc, 0x0e, 0xc9, 0x24,
	0xe5, 0x55, 0xb1, 0x23, 0x92, 0x1b, 0xea, 0x88, 0xc4, 0x96, 0x7e, 0xf1, 0x94, 0x96, 0x7e, 0xe9,
	0x44, 0x96, 0xbe, 0xf9, 0xa7, 0x39, 0x98, 0xd1, 0x4e, 0xea, 0x3e, 0x91, 0x69, 0xbb, 0x0a, 0xb9,
	0x4d, 0xa7, 0x11, 0x1d, 0xe8, 0xe1, 0xdf, 0x96, 0xd3, 0x88, 0xaa, 0x07, 0x8c, 0x57, 0x48, 0x88,
	0x9e, 0x98, 0x34, 0x05, 0xd1, 0xe3, 0x10, 0x3d, 0xe5, 0xa2, 0xe5, 0xc7, 0xba, 0x68, 0x85, 0x91,
	0x2e, 0xda, 0x65, 0xc8, 0x6e, 0xba, 0xde, 0x53, 0xa1, 0x3a, 0x44, 0x38, 0x1b, 0x97, 0x06, 0x4b,
	0xd5, 0xd2, 0x94, 0x4e, 0xb9, 0x34, 0x70, 0x32, 0x27, 0x4c, 0x86, 0xae, 0x67, 0xc6, 0x87, 0xae,
	0x67, 0xc7, 0x87, 0xae, 0xcf, 0x3e, 0xf1, 0x1a, 0xae, 0xe7, 0x86, 0x7b, 0x8e, 0xcd, 0xa3, 0xbf,
	0x73, 0xca, 0x6c, 0xe8, 0xc6, 0x55, 0x22, 0x04, 0xdc, 0x0f, 0x8c, 0x0a, 0xef, 0x51, 0x02, 0xfb,
	0x8c, 0x52, 0x78, 0x7d, 0xb8, 0x49, 0x40, 0x19, 0x7d, 0x38, 0xdb, 0x17, 0x7d, 0xd8, 0x75, 0x3b,
	0x48, 0xf4, 0x23, 0x72, 0x46, 0xac, 0x16, 0x27, 0x3a, 0xaf, 0x88, 0xfa, 0xa2, 0x42, 0x12, 0x4d,
	0x00, 0x22, 0xd1, 0x87, 0x07, 0x91, 0xf0, 0x15, 0x89, 0xa8, 0x73, 0x10, 0x31, 0x2c, 0x33, 0xab,
	0x90, 0xe3, 0x30, 0xe7, 0x13, 0x42, 0x47, 0x4a, 0x9a, 0xf3, 0xba, 0xa4, 0xc9, 0x48, 0xf1, 0x72,
	0x21, 0x21, 0x5e, 0x32, 0x52, 0xa4, 0xa0, 0xe9, 0x1a, 0xba, 0xdf, 0x12, 0x56, 0x3a, 0xa3, 0x67,
	0xf3, 0xfb, 0xe8, 0x3d, 0xe0, 0x5e, 0xc1, 0x21, 0xbc, 0x06, 0xa5, 0x38, 0xe4, 0x25, 0x1a, 0x2a,
	0x46, 0x22, 0x54, 0x46, 0x67, 0x2e, 0x4a, 0x79, 0x4b, 0x8d, 0x5d, 0x01, 0xdd, 0x5b, 0x15, 0xdf,
	0xf6, 0x81, 0x32, 0x11, 0x90, 0x26, 0xf9, 0x7e, 0x5a, 0xcb, 0x45, 0x2c, 0xd8, 0x71, 0xbf, 0xe5,
	0x18, 0xaf, 0x83, 0xe6, 0x18, 0x8a, 0x4f, 0xfd, 0x08, 0x9c, 0xe3, 0xce, 0x43, 0xc6, 0x93, 0xf6,
	0x3f, 0xc3, 0x47, 0xb2, 0xf3, 0xa5, 0xbf, 0x10, 0xdb, 0xf9, 0xd2, 0x6b, 0xa8, 0x80, 0xee, 0x1f,
	0x70, 0x19, 0xd4, 0xef, 0x25, 0x50, 0x73, 0x84, 0x5d, 0xe2, 0xd8, 0x58, 0x40, 0xd8, 0x6f, 0xc4,
	0xd6, 0x72, 0x55, 0xe9, 0x66, 0x36, 0x23, 0xca, 0x08, 0x64, 0x01, 0x8a, 0x56, 0x3d, 0x72, 0xf7,
	0xdd, 0x48, 0x68, 0x65, 0x16, 0xbf, 0xeb, 0x1e, 0xc3, 0x6c, 0xd2, 0x63, 0x38, 0x0f, 0xb9, 0x0e,
	0x79, 0x59, 0x73, 0xfc, 0x03, 0xc7, 0x8e, 0xf0, 0xa9, 0x4a, 0x2d, 0x3f, 0x8a, 0x9c, 0xa0, 0xb7,
	0xb1, 0xce, 0xf9, 0x8f, 0xa9, 0x02, 0x5c, 0x42, 0x1c, 0xd6, 0x76, 0x5d, 0xf8, 0x00, 0xe2, 0x0d,
	0x1d, 0x0a, 0xcf, 0xb7, 0x51, 0x44, 0x09, 0xeb, 0x3f, 0x8f, 0xaf, 0x1b, 0xb6, 0x71, 0x09, 0x8a,
	0xcd, 0xc0, 0xef, 0x76, 0xb0, 0x86, 0xe2, 0xf2, 0xac, 0x40, 0xef, 0x1b, 0xb6, 0x3e, 0xb0, 0xb6,
	0x6f, 0xf3, 0xa0, 0x7b, 0x26, 0x1e, 0xd8, 0x96, 0x6f, 0xa3, 0xdd, 0x35, 0xdf, 0xf5, 0x5a, 0x7e,
	0xfd, 0x69, 0xb5, 0xee, 0x7b, 0xb6, 0x4b, 0xee, 0x36, 0xc5, 0xdd, 0xd9, 0x59, 0x5e, 0xbe, 0x26,
	0x8b, 0x71, 0x34, 0xdc, 0xc8, 0x3b, 0xcf, 0x59, 0x8e, 0x47, 0xd6, 0xde, 0x06, 0xe0, 0x3c, 0xbd,
	0x11, 0x39, 0x6d, 0xec, 0x8c, 0xb4, 0xbc, 0x05, 0x1b, 0x15, 0x6a, 0xdc, 0xf4, 0x36, 0x7f, 0x45,
	0xf2, 0xdb, 0xc3, 0x83, 0x08, 0x17, 0xac, 0x65, 0xf5, 0x9c, 0xa0, 0xaa, 0xb3, 0x36, 0x50, 0x11,
	0xe7, 0xfa, 0x37, 0x60, 0xb6, 0xd6, 0x8d, 0x22, 0xdf, 0x13, 0x10, 0x9c, 0xf5, 0x66, 0x78, 0x19,
	0x07, 0x59, 0x07, 0xfd, 0xb8, 0x47, 0x64, 0x98, 0x5d, 0x9b, 0xc0, 0xf2, 0x48, 0x7c, 0x66, 0x48,
	0xa3, 0xea, 0xb5, 0x38, 0x87, 0x96, 0x18, 0x7f, 0x31, 0xbe, 0x08, 0x79, 0xa2, 0x2a, 0x33, 0x05,
	0x27, 0x22, 0x2b, 0x50, 0x88, 0x55, 0x7b, 0x5e, 0x75, 0xcf, 0xdf, 0x77, 0xb8, 0x77, 0x51, 0x64,
	0xc5, 0xb0, 0xe7, 0x7d, 0x88, 0xef, 0xb8, 0x15, 0xd1, 0x5f, 0x14, 0x2c, 0x4c, 0xcf, 0xfa, 0xda,
	0x16, 0x47, 0xae, 0x6d, 0xe9, 0xf8, 0xb5, 0x85, 0xc9, 0xd6, 0x76, 0x66, 0xcc, 0xda, 0xce, 0x6a,
	0x6b, 0x2b, 0xbd, 0xe3, 0x39, 0xe5, 0x1d, 0x3f, 0x80, 0x1c, 0x9a, 0x48, 0x61, 0xf9, 0xcc, 0x24,
	0xd9, 0x29, 0x8a, 0x31, 0x18, 0x47, 0xc3, 0x91, 0x76, 0x79, 0x98, 0x87, 0xdb, 0x77, 0x2c, 0xdf,
	0xe5, 0x19, 0xd4, 0xff, 0x95, 0x96, 0xdf, 0x3b, 0xaa, 0xec, 0x93, 0x4f, 0x44, 0x89, 0x2f, 0x03,
	0x70, 0x77, 0x4c, 0x0b, 0x63, 0xf0, 0xa3, 0x44, 0xee, 0xba, 0x91, 0xaa, 0xd2, 0x40, 0x94, 0x3a,
	0xcd, 0x9d, 0x52, 0x9d, 0xe6, 0x4f, 0xa6, 0x4e, 0x17, 0xa1, 0xb4, 0xd6, 0xb2, 0xc2, 0x70, 0x57,
	0x0a, 0x42, 0xa1, 0x30, 0xeb, 0x58, 0xc8, 0xbb, 0xab, 0x00, 0xe8, 0x58, 0x07, 0x5f, 0x36, 0xd6,
	0x85, 0x65, 0xc6, 0xc3, 0xd9, 0x04, 0xeb, 0xda, 0x4c, 0x56, 0x9a, 0xbf, 0x1c, 0x7f, 0x67, 0x2c,
	0x33, 0x93, 0x3e, 0x91, 0xd9, 0xbf, 0x01, 0xc5, 0x1d, 0x11, 0xac, 0xd1, 0x23, 0xe5, 0x71, 0x44,
	0x87, 0xc5, 0xd5, 0x93, 0xda, 0x9f, 0xf9, 0x53, 0xae, 0x4a, 0xe1, 0x64, 0xab, 0x22, 0x06, 0x42,
	0x51, 0xd7, 0xa2, 0xe6, 0xbf, 0xe2, 0x40, 0xc8, 0x87, 0x8c, 0xab, 0x13, 0x47, 0x0c, 0xa5, 0xe3,
	0x8e, 0x18, 0xcc, 0x5f, 0xc8, 0xc8, 0x4d, 0xa1, 0xb2, 0x15, 0x3e, 0x91, 0x65, 0x99, 0x2e, 0x9f,
	0xe0, 0x7f, 0xf6, 0xca, 0x5c, 0x85, 0xdc, 0xd6, 0xae, 0x8c, 0xfe, 0x09, 0x8f, 0x4b, 0x1c, 0x8c,
	0xf2, 0x0a, 0x1e, 0x42, 0xa6, 0x13, 0xca, 0x92, 0x1e, 0x42, 0xa6, 0xd3, 0x49, 0x51, 0x63, 0xfe,
	0x73, 0x46, 0x7e, 0xe9, 0xda, 0x9f, 0xc2, 0xf6, 0x49, 0xb9, 0x1a, 0x5b, 0x5a, 0x8a, 0xd2, 0x90,
	0x41, 0x54, 0x84, 0xbd, 0x38, 0x24, 0xee, 0xb1, 0x21, 0x7d, 0x53, 0x1e, 0x5e, 0xc9, 0x8f, 0x4e,
	0x31, 0xa1, 0x65, 0x2c, 0x0c, 0x5d, 0xc6, 0x04, 0x4b, 0x14, 0x27, 0x48, 0x31, 0xf9, 0x54, 0x7d,
	0x8e, 0x6b, 0x90, 0x7f, 0xd2, 0x89, 0xbd, 0x0e, 0x79, 0xa2, 0x28, 0x0e, 0x18, 0x44, 0x95, 0xb4,
	0xbe, 0x67, 0x87, 0x58, 0xdf, 0xff, 0x9a, 0x95, 0xe7, 0x85, 0xfc, 0xe3, 0xc4, 0x93, 0x27, 0xee,
	0xc4, 0xc9, 0x36, 0x99, 0x93, 0x25, 0xdb, 0xc4, 0x39, 0x17, 0xd9, 0x93, 0xe5, 0x5c, 0x24, 0x0e,
	0x18, 0x73, 0x43, 0x58, 0xeb, 0xd3, 0xde, 0x9f, 0xd7, 0xe2, 0xd3, 0xfb, 0xe2, 0xe0, 0xe9, 0xbd,
	0xa8, 0x42, 0xfe, 0x5f, 0x6d, 0x6e, 0xb4, 0x9b, 0xfa, 0x0e, 0xa5, 0x03, 0xe7, 0x26, 0xe3, 0x15,
	0xfa, 0xd1, 0x1b, 0x8c, 0xc9, 0x96, 0xd8, 0xa8, 0xfb, 0x9e, 0xc6, 0x1b, 0xb4, 0x2b, 0xdd, 0xba,
	0xef, 0x09, 0x8d, 0x23, 0xab, 0x8d, 0x3b, 0x30, 0xb3, 0x52, 0xa7, 0x90, 0x02, 0x91, 0x9d, 0x55,
	0xd1, 0x38, 0xb2, 0xfd, 0x65, 0x64, 0x54, 0x07, 0x42, 0x5f, 0x70, 0xc3, 0xb3, 0x34, 0xac, 0x39,
	0xe5, 0x0b, 0xba, 0x5e, 0x02, 0x2f, 0x09, 0x68, 0xfe, 0x4b, 0x46, 0x7e, 0xdc, 0x1d, 0x7f, 0xc7,
	0x7a, 0x72, 0xae, 0xbb, 0x0a, 0xb9, 0x5d, 0xfa, 0x8e, 0x37, 0x33, 0xf8, 0xc9, 0x31, 0x55, 0x28,
	0xbe, 0xc8, 0x8e, 0xe0, 0x0b, 0x5d, 0x4d, 0xe5, 0x54, 0x2a, 0xc1, 0xf0, 0x93, 0xf0, 0x6d, 0xd7,
	0x16, 0xfc, 0x43, 0xfb, 0xa8, 0xe3, 0xda, 0x0c, 0xcb, 0x14, 0x73, 0x15, 0x4e, 0xc9, 0x5c, 0xc5,
	0x93, 0x31, 0xd7, 0x25, 0xc8, 0x3c, 0x61, 0x9b, 0x82, 0x6b, 0x54, 0xb0, 0xf7, 0x09, 0xdb, 0x14,
	0x89, 0x2c, 0xee, 0xbe, 0x83, 0x6c, 0x05, 0x89, 0x44, 0x16, 0x3a, 0xa5, 0x6f, 0x37, 0x99, 0x02,
	0x40, 0x5e, 0x90, 0xcb, 0x85, 0xf0, 0x5a, 0x64, 0x36, 0x5e, 0x55, 0xc4, 0xd0, 0x81, 0x62, 0x81,
	0x3a, 0x4b, 0xb3, 0xd7, 0x27, 0x50, 0xcd, 0x5f, 0x8f, 0x45, 0xcc, 0x6e, 0x28, 0x73, 0x03, 0x87,
	0xde, 0xeb, 0xf2, 0x00, 0xf8, 0x94, 0xe9, 0x12, 0x60, 0xb2, 0x39, 0xac, 0xcb, 0x39, 0x6c, 0xf7,
	0x1b, 0xac, 0x93, 0xcd, 0x61, 0x5b, 0x4a, 0x10, 0x7e, 0x57, 0x49, 0x7e, 0xf8, 0x5d, 0x25, 0x38,
	0xc9, 0x1d, 0xe9, 0xba, 0x68, 0xeb, 0xdf, 0xd1, 0xef, 0xa4, 0x29, 0x8d, 0x88, 0xfb, 0x27, 0x6e,
	0x9d, 0x81, 0x71, 0xb7, 0xce, 0xdc, 0x83, 0x59, 0xfa, 0xbe, 0x67, 0x9d, 0x7b, 0x39, 0xfa, 0x6d,
	0x2b, 0x54, 0x5e, 0x15, 0xee, 0x0f, 0x4b, 0x80, 0x61, 0x23, 0x56, 0xd7, 0x76, 0xb9, 0x99, 0x39,
	0xab, 0x2d, 0x35, 0x16, 0x0a, 0x93, 0x39, 0x06, 0x50, 0xd0, 0x2a, 0xf1, 0x40, 0x87, 0xc6, 0x99,
	0x51, 0x00, 0x7d, 0xf7, 0xda, 0x9c, 0x19, 0x7f, 0xaf, 0xcd, 0x75, 0x28, 0x46, 0x4e, 0xbb, 0xd3,
	0xc2, 0x19, 0x3d, 0xab, 0x24, 0x95, 0x2c, 0x63, 0xf1, 0x93, 0xf9, 0x1f, 0x89, 0x3b, 0x60, 0x76,
	0xe8, 0xd4, 0xd2, 0x38, 0xa3, 0xb8, 0x84, 0xb8, 0xe3, 0x22, 0xc8, 0x48, 0xad, 0x08, 0x05, 0xf1,
	0x2f, 0xff, 0x6d, 0xe9, 0xbc, 0x65, 0x94, 0xf3, 0x76, 0x05, 0x80, 0x3e, 0x47, 0x42, 0xc3, 0x25,
	0x14, 0xfe, 0xae, 0x56, 0x82, 0xde, 0xa6, 0xcc, 0xc5, 0xe3, 0xbc, 0x12, 0x5f, 0xca, 0x61, 0xdc,
	0x93, 0x3c, 0xc8, 0x79, 0xa0, 0x32, 0x21, 0xeb, 0xdd, 0x93, 0xac, 0x57, 0x98, 0x10, 0x8d, 0xa0,
	0xcd, 0xef, 0x65, 0xa5, 0x33, 0xb2, 0x1b, 0x2a, 0x49, 0x38, 0x74, 0x73, 0x5c, 0xef, 0xbb, 0x6e,
	0x62, 0xc0, 0x98, 0x96, 0x4f, 0xc6, 0xeb, 0x90, 0x8d, 0xc2, 0x58, 0x22, 0x72, 0x4e, 0x24, 0x1f,
	0x88, 0x8a, 0x15, 0x97, 0x67, 0x47, 0x70, 0xf9, 0x65, 0xa0, 0xdd, 0x3b, 0x68, 0xe5, 0x06, 0x22,
	0x11, 0xa7, 0xed, 0x44, 0x96, 0x30, 0xae, 0xb4, 0x44, 0x9c, 0xb6, 0x48, 0xc4, 0xe1, 0xd1, 0xba,
	0xc2, 0x40, 0x94, 0xb7, 0xff, 0xe8, 0xa8, 0x38, 0x18, 0xe5, 0x15, 0x47, 0x47, 0xb1, 0x1c, 0x28,
	0x9d, 0x52, 0x0e, 0xc0, 0xc9, 0xe4, 0x80, 0x09, 0x22, 0xaf, 0x42, 0x6c, 0xbb, 0x44, 0xa6, 0x05,
	0xff, 0x9f, 0x2e, 0x4c, 0x8a, 0x77, 0x59, 0x5f, 0x5a, 0x47, 0x47, 0xba, 0x71, 0x14, 0xff, 0x98,
	0xeb, 0xcf, 0xb6, 0xa1, 0x48, 0xc8, 0x25, 0x1e, 0xf7, 0x3b, 0xd3, 0x97, 0x6c, 0xe4, 0x75, 0xdb,
	0xc6, 0x3b, 0xa0, 0x72, 0x6e, 0xc4, 0xe1, 0x50, 0x7f, 0x22, 0x4e, 0xfc, 0x68, 0xfe, 0x65, 0x6c,
	0xae, 0x4b, 0x0e, 0x62, 0x0e, 0x3f, 0xf6, 0x1f, 0xc9, 0x49, 0x37, 0xb4, 0xf4, 0xf7, 0xe1, 0xe6,
	0x7a, 0x9c, 0xf7, 0x4e, 0xf7, 0x48, 0x71, 0x72, 0x31, 0x43, 0x89, 0xc4, 0x59, 0x91, 0x6e, 0xc0,
	0xef, 0x91, 0x92, 0x20, 0x28, 0xb7, 0xe4, 0x9b, 0xe6, 0xea, 0x92, 0xdc, 0x8a, 0x51, 0x68, 0x92,
	0x12, 0x60, 0x63, 0x58, 0x4e, 0x23, 0xfa, 0x28, 0xf0, 0xc5, 0xb5, 0x68, 0x7d, 0x44, 0x1b, 0x81,
	0xdf, 0x66, 0x09, 0x30, 0xc5, 0xe8, 0x85, 0x11, 0x8c, 0x1e, 0xf3, 0x59, 0xf1, 0x94, 0x7c, 0x56,
	0x3a, 0x19, 0x9f, 0x5d, 0xe2, 0x1f, 0x6a, 0x43, 0x9f, 0x59, 0xee, 0x1c, 0x44, 0xe6, 0xaf, 0x65,
	0xf5, 0x9b, 0x73, 0xd6, 0x7b, 0xde, 0xc8, 0xd5, 0x14, 0x3a, 0x29, 0x3d, 0x44, 0x27, 0xc5, 0xe3,
	0xcb, 0x9c, 0x72, 0x7c, 0xd9, 0x93, 0x8d, 0xef, 0x81, 0x8c, 0xb5, 0x4d, 0x9d, 0x7e, 0xcf, 0xa3,
	0x72, 0xd7, 0xa1, 0x48, 0x5f, 0x4d, 0xb8, 0x51, 0x4f, 0x88, 0x63, 0x12, 0x79, 0xb2, 0x8c, 0xc5,
	0x4f, 0x68, 0xb4, 0x84, 0xcf, 0xba, 0x71, 0x62, 0x7d, 0x41, 0xcb, 0xcb, 0xa0, 0x62, 0x71, 0xb4,
	0xae, 0x03, 0xa1, 0xf6, 0x0b, 0xdb, 0x56, 0xab, 0xb5, 0x66, 0x05, 0xb6, 0x9e, 0xea, 0x49, 0x85,
	0xd5, 0xba, 0x15, 0xd8, 0x4c, 0x01, 0xa0, 0xd5, 0x5d, 0x73, 0x9b, 0x04, 0x5b, 0xd2, 0xac, 0x6e,
	0xb7, 0xc9, 0x21, 0x65, 0x25, 0x1d, 0x7b, 0xbb, 0x76, 0x98, 0x38, 0xf6, 0x76, 0xed, 0x90, 0xd1,
	0x5f, 0xe3, 0x4d, 0xf5, 0xa9, 0xee, 0x8c, 0x4a, 0xf5, 0xb2, 0xfb, 0x3f, 0xc8, 0x7d, 0x83, 0xae,
	0xaf, 0x42, 0x4d, 0x37, 0xab, 0x84, 0x24, 0x2f, 0x61, 0x39, 0xbb, 0xe7, 0x6d, 0xd8, 0x7d, 0x2a,
	0x93, 0x7f, 0xbc, 0xff, 0xb3, 0xc8, 0x23, 0xcb, 0x00, 0xcf, 0xf7, 0xdc, 0xc8, 0xf9, 0x98, 0x6e,
	0xd6, 0xd0, 0xae, 0xd7, 0xa3, 0xd2, 0x2a, 0xdd, 0x9c, 0xc1, 0x34, 0x10, 0xf3, 0xff, 0xc1, 0xab,
	0x3b, 0x1d, 0xdf, 0x0b, 0xfd, 0x60, 0xf0, 0xa2, 0xc8, 0xee, 0x04, 0x77, 0xac, 0xdd, 0xeb, 0xbf,
	0x63, 0x0d, 0x91, 0xe4, 0xdd, 0x97, 0xe9, 0x71, 0x97, 0x9c, 0xee, 0xc1, 0xc5, 0x61, 0xad, 0x77,
	0x5a, 0x3d, 0x63, 0x2b, 0xf1, 0x09, 0xd9, 0xf2, 0x98, 0x4f, 0x8c, 0xfb, 0x89, 0x0c, 0xdc, 0xe4,
	0xb3, 0x0d, 0x17, 0xbf, 0xe2, 0x44, 0x8f, 0xad, 0x48, 0x7e, 0xa3, 0xb6, 0x6d, 0x05, 0x56, 0x9b,
	0x46, 0x7a, 0x2f, 0xbe, 0x0f, 0x69, 0xfc, 0x85, 0x63, 0xea, 0x26, 0x4e, 0xb3, 0x01, 0x97, 0x86,
	0x53, 0xc4, 0xde, 0x6f, 0x24, 0x7a, 0xff, 0xce, 0x64, 0x1f, 0x38, 0x13, 0x81, 0x81, 0x9e, 0xff,
	0x6d, 0x06, 0xe6, 0x12, 0x10, 0x23, 0xf9, 0xf2, 0x5a, 0xdf, 0x4d, 0xa2, 0xa3, 0x2e, 0x76, 0x0a,
	0x93, 0xe9, 0xc7, 0x21, 0x32, 0x2f, 0xda, 0x79, 0xef, 0x40, 0xc9, 0x76, 0xdb, 0x8e, 0x17, 0xba,
	0xbe, 0xa7, 0x47, 0x55, 0xe3, 0x42, 0xa6, 0x1e, 0x8d, 0x5b, 0x00, 0x01, 0x69, 0x35, 0x0a, 0x5d,
	0xe6, 0x94, 0x88, 0x08, 0xb8, 0xda, 0xe3, 0xd1, 0x4b, 0x0d, 0x06, 0xbb, 0xc7, 0xdf, 0x84, 0xf4,
	0xa1, 0xee, 0x09, 0x68, 0x26, 0xaa, 0x50, 0x9b, 0xe2, 0xd3, 0x63, 0x95, 0x4e, 0x43, 0x5d, 0x20,
	0x30, 0x1e, 0x0f, 0x95, 0xd5, 0x48, 0xef, 0xb9, 0x53, 0xfb, 0x9a, 0xd3, 0x13, 0xe2, 0x86, 0xe8,
	0x3d, 0x77, 0x6a, 0x94, 0xea, 0x22, 0xaa, 0xe2, 0xbc, 0x99, 0xd2, 0xd0, 0xbc, 0x99, 0x1b, 0x50,
	0xdc, 0x91, 0x09, 0x86, 0x30, 0x34, 0xc1, 0x70, 0x47, 0x4b, 0x30, 0xdc, 0x50, 0x09, 0x86, 0x33,
	0x23, 0x12, 0x0c, 0x15, 0x08, 0x8a, 0x38, 0x7e, 0xe6, 0x22, 0x8f, 0xa7, 0x49, 0xc4, 0xc9, 0x63,
	0x19, 0x79, 0x20, 0xb3, 0x6e, 0xfe, 0x61, 0x0a, 0xce, 0x0d, 0xf0, 0xef, 0x48, 0x0f, 0x3e, 0x11,
	0x4e, 0x4b, 0x8f, 0x0b, 0xa7, 0x25, 0xbf, 0xd4, 0xc9, 0x4c, 0xf4, 0xa5, 0xce, 0x4e, 0xbf, 0xfc,
	0x99, 0x22, 0xea, 0x64, 0x7e, 0x48, 0x5f, 0xea, 0xd0, 0x08, 0xbe, 0x94, 0xd8, 0x02, 0x37, 0x26,
	0xfa, 0x48, 0x9e, 0x8e, 0x7c, 0x38, 0xdb, 0xf3, 0x20, 0x8a, 0x2c, 0xd4, 0x78, 0x3b, 0x35, 0x92,
	0xb7, 0xd5, 0x65, 0x91, 0x2b, 0xad, 0xd6, 0xd4, 0x37, 0xde, 0x0e, 0xbd, 0x2c, 0xf2, 0x2f, 0xe2,
	0x3b, 0xe6, 0x14, 0xc9, 0x13, 0xde, 0x31, 0x97, 0x20, 0xf0, 0xe9, 0x5e, 0xaa, 0xd9, 0x82, 0x57,
	0x76, 0x3a, 0x56, 0xdd, 0xd9, 0xe9, 0x79, 0xf5, 0x1d, 0x27, 0x8a, 0x5c, 0xaf, 0x39, 0xcd, 0x8d,
	0xc5, 0x37, 0xfb, 0x5c, 0xc7, 0x63, 0xaf, 0x2c, 0xb6, 0xcd, 0x4d, 0x54, 0x31, 0xfd, 0xad, 0xe1,
	0x24, 0xde, 0x85, 0x99, 0x10, 0x2b, 0x56, 0xe9, 0x70, 0x56, 0x24, 0x47, 0x71, 0x33, 0x03, 0x8b,
	0xab, 0xfc, 0xd0, 0x96, 0x25, 0xde, 0xcc, 0xef, 0xa4, 0x65, 0xb8, 0xeb, 0x49, 0xe8, 0x04, 0x44,
	0x78, 0xc0, 0xb7, 0x9d, 0xd7, 0xd4, 0x0f, 0xef, 0x72, 0x9c, 0x8a, 0x90, 0xd1, 0x53, 0x11, 0x34,
	0x1f, 0x38, 0x9b, 0xf0, 0x81, 0xaf, 0x41, 0x9c, 0xef, 0x4a, 0x8d, 0x0b, 0xb7, 0x56, 0x9e, 0x9c,
	0xf2, 0x56, 0xcf, 0xeb, 0xf1, 0x8d, 0x92, 0xb4, 0x82, 0x63, 0x8f, 0xb7, 0x70, 0x32, 0x8f, 0xb7,
	0x38, 0x95, 0xc7, 0xbb, 0x43, 0xb7, 0x9f, 0x29, 0xee, 0x8a, 0xef, 0x64, 0x3e, 0xc5, 0x55, 0x8c,
	0xe6, 0xdf, 0xf1, 0x3b, 0xc3, 0x06, 0xa8, 0x9e, 0xe4, 0xce, 0xb0, 0x61, 0x44, 0x3e, 0xfd, 0xdb,
	0x91, 0xaf, 0x41, 0x91, 0x8e, 0x63, 0x1e, 0x1e, 0x50, 0x2a, 0xb6, 0xe7, 0x3c, 0xaf, 0x46, 0x31,
	0x07, 0xe5, 0x3d, 0xe7, 0xf9, 0xae, 0x6b, 0xdf, 0xf9, 0xde, 0x79, 0xc8, 0x3f, 0xb6, 0x48, 0x96,
	0x39, 0x94, 0x59, 0xc7, 0xaf, 0x3a, 0x32, 0xc6, 0x5f, 0x87, 0x13, 0x5f, 0xf4, 0xb4, 0xb0, 0x38,
	0x31, 0x2c, 0x4e, 0xee, 0x1e, 0x80, 0xba, 0x52, 0xc9, 0x18, 0x63, 0x35, 0x24, 0x6e, 0x94, 0x5a,
	0xb8, 0x39, 0x39, 0x30, 0xb6, 0xf4, 0x6d, 0x7e, 0x07, 0x63, 0xdf, 0x8d, 0x6e, 0xc6, 0xdd, 0x13,
	0x5c, 0x5a, 0xb7, 0x70, 0xef, 0x44, 0x17, 0xc7, 0x19, 0x1e, 0xcc, 0xea, 0x57, 0x14, 0x1a, 0x37,
	0x27, 0xb9, 0x54, 0x49, 0x0d, 0x78, 0x79, 0x1a, 0xf0, 0x44, 0x7b, 0xfc, 0xbb, 0xf0, 0xc9, 0xda,
	0x8b, 0xaf, 0x1e, 0x98, 0xac, 0x3d, 0xfd, 0xdb, 0xfe, 0x67, 0x30, 0x97, 0xf8, 0x0e, 0xdd, 0x58,
	0x9a, 0x9c, 0x02, 0x6e, 0xe1, 0x85, 0x5b, 0x53, 0xc1, 0x63, 0x93, 0x4f, 0x65, 0x2e, 0x23, 0xbf,
	0xda, 0x7e, 0x71, 0x8a, 0x8b, 0x9e, 0x9f, 0x2d, 0x2c, 0x4d, 0x77, 0x2d, 0xb4, 0x11, 0xc9, 0x58,
	0x9b, 0x54, 0x6c, 0xc6, 0xf2, 0x74, 0x6a, 0xf0, 0xd9, 0xc2, 0xed, 0xa9, 0xf5, 0xa6, 0xf1, 0x5c,
	0xbf, 0xc9, 0x96, 0x44, 0x8a, 0x71, 0x6b, 0xca, 0xfb, 0xd9, 0x9f, 0x2d, 0xdc, 0x99, 0xfe, 0x46,
	0x77, 0x35, 0x5c, 0x79, 0x25, 0xf0, 0x64, 0xc3, 0xd5, 0xae, 0x36, 0x9e, 0x6c, 0xb8, 0xc9, 0x7b,
	0x8b, 0x7f, 0x2e, 0xb6, 0x3f, 0x12, 0xd7, 0x11, 0x1b, 0x9f, 0x3f, 0xc1, 0x0d, 0xc6, 0xcf, 0x16,
	0xbe, 0x70, 0xb2, 0x7b, 0x8f, 0x51, 0x2e, 0x69, 0xa6, 0xe9, 0xc4, 0xb7, 0x17, 0x4f, 0x20, 0x97,
	0xfa, 0x6f, 0x25, 0x7e, 0x46, 0x71, 0x1a, 0x75, 0x35, 0xac, 0x31, 0x9e, 0x2b, 0x13, 0x17, 0xd1,
	0x2e, 0xdc, 0x9a, 0x0a, 0x7e, 0x70, 0x61, 0x77, 0xad, 0xda, 0x14, 0x0b, 0xcb, 0xef, 0x3d, 0x9e,
	0x62, 0x61, 0xe3, 0x4b, 0x8a, 0xf7, 0x00, 0xd4, 0xcf, 0x7b, 0x8c, 0x9b, 0xd2, 0xc4, 0x2f, 0x88,
	0x8c, 0x9b, 0xd2, 0xfe, 0x5f, 0x0d, 0xf9, 0xd6, 0x90, 0x1f, 0xbd, 0xb8, 0x3d, 0xe5, 0xcf, 0x67,
	0x38, 0xcf, 0x16, 0xee, 0x4e, 0x8b, 0x22, 0xd9, 0x77, 0xc8, 0x8f, 0x53, 0x8c, 0x63, 0xdf, 0xe1,
	0xbf, 0xa8, 0x31, 0x8e, 0x7d, 0x47, 0xfd, 0x0a, 0x06, 0x29, 0xbb, 0xc1, 0x30, 0xc3, 0x38, 0x65,
	0x37, 0x34, 0x2c, 0x32, 0x4e, 0xd9, 0x8d, 0x8a, 0x66, 0xfc, 0x7c, 0x0a, 0xce, 0x0f, 0x8b, 0x16,
	0x18, 0x63, 0xe8, 0x8d, 0x88, 0x59, 0x2c, 0xbc, 0x7b, 0x12, 0x34, 0xec, 0x48, 0x4b, 0xc6, 0xb9,
	0xd4, 0x4f, 0xe1, 0x18, 0x13, 0xb1, 0x6f, 0xe2, 0xa7, 0x73, 0x16, 0xc6, 0x5c, 0x3d, 0x26, 0xae,
	0x3c, 0x46, 0xde, 0xeb, 0x37, 0xfd, 0xc7, 0xb5, 0x36, 0xc4, 0x31, 0x59, 0xb8, 0x3b, 0x2d, 0x8a,
	0x66, 0xe2, 0xf4, 0x19, 0xa0, 0x13, 0x98, 0x38, 0x83, 0xd6, 0xf4, 0x04, 0x26, 0xce, 0x30, 0x3b,
	0x77, 0xf5, 0xd2, 0x0f, 0xfe, 0xfe, 0xca, 0x67, 0x7e, 0xf0, 0x93, 0x2b, 0xa9, 0x3f, 0xfb, 0xc9,
	0x95, 0xd4, 0x8f, 0x7f, 0x72, 0x25, 0xf5, 0xdd, 0x7f, 0xb8, 0xf2, 0x99, 0x6f, 0x66, 0xac, 0x8e,
	0x5b, 0xcb, 0xd3, 0x2f, 0x13, 0xdd, 0xfd, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0xa3, 0x28,
	0xe2, 0x24, 0x69, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NaPageClient is the client API for NaPage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NaPageClient interface {
	// native 活动页面配置信息
	NatConfig(ctx context.Context, in *NatConfigReq, opts ...grpc.CallOption) (*NatConfigReply, error)
	// native 活动基础页面配置信息
	BaseConfig(ctx context.Context, in *BaseConfigReq, opts ...grpc.CallOption) (*BaseConfigReply, error)
	// 根据fid和type查询话题信息
	NatInfoFromForeign(ctx context.Context, in *NatInfoFromForeignReq, opts ...grpc.CallOption) (*NatInfoFromForeignReply, error)
	// 根据module_id查询配置信息
	ModuleConfig(ctx context.Context, in *ModuleConfigReq, opts ...grpc.CallOption) (*ModuleConfigReply, error)
	// 根据module_id获取配置的id信息
	ModuleMixExt(ctx context.Context, in *ModuleMixExtReq, opts ...grpc.CallOption) (*ModuleMixExtReply, error)
	// 根据module_id获取所有配置的id信息
	ModuleMixExts(ctx context.Context, in *ModuleMixExtsReq, opts ...grpc.CallOption) (*ModuleMixExtsReply, error)
	// 批量获取话题活动信息接口-仅仅返回有效状态
	NativePages(ctx context.Context, in *NativePagesReq, opts ...grpc.CallOption) (*NativePagesReply, error)
	// 批量获取话题活动信息接口-返回所有状态
	NativeAllPages(ctx context.Context, in *NativeAllPagesReq, opts ...grpc.CallOption) (*NativeAllPagesReply, error)
	// 批量获取话题活动卡-处理跳转地址
	NativePageCards(ctx context.Context, in *NativePageCardsReq, opts ...grpc.CallOption) (*NativePageCardsReply, error)
	// 批量获取话题活动信息接口&动态广场页配置信息-仅仅返回有效状态
	NativePagesExt(ctx context.Context, in *NativePagesExtReq, opts ...grpc.CallOption) (*NativePagesExtReply, error)
	// 获取榜单有效期内的话题列表&动态广场页配置信息
	NativeValidPagesExt(ctx context.Context, in *NativeValidPagesExtReq, opts ...grpc.CallOption) (*NativeValidPagesExtReply, error)
	// 获取单个活动信息-所有状态都返回
	NativePage(ctx context.Context, in *NativePageReq, opts ...grpc.CallOption) (*NativePageReply, error)
	// 话题活动聚合tab
	NatTabModules(ctx context.Context, in *NatTabModulesReq, opts ...grpc.CallOption) (*NatTabModulesReply, error)
	// 根据话题id获取话题跳转地址--供动态测使用
	NativePagesTab(ctx context.Context, in *NativePagesTabReq, opts ...grpc.CallOption) (*NativePagesTabReply, error)
	// up主发起活动白名单接口
	IsUpActUid(ctx context.Context, in *IsUpActUidReq, opts ...grpc.CallOption) (*IsUpActUidReply, error)
	// up主发起活动列表接口
	UpActNativePages(ctx context.Context, in *UpActNativePagesReq, opts ...grpc.CallOption) (*UpActNativePagesReply, error)
	// up主发起活动-进审核态
	UpActNativePageBind(ctx context.Context, in *UpActNativePageBindReq, opts ...grpc.CallOption) (*UpActNativePageBindReply, error)
	// 获取发起人的有效活动列表
	SponsorNativePages(ctx context.Context, in *SponsorNativePagesReq, opts ...grpc.CallOption) (*SponsorNativePagesReply, error)
	// 获取page下所有的进度组件
	GetNatProgressParams(ctx context.Context, in *GetNatProgressParamsReq, opts ...grpc.CallOption) (*GetNatProgressParamsReply, error)
	// 话题活动上榜&下榜-编辑接口
	NativeForbidList(ctx context.Context, in *NativeForbidListReq, opts ...grpc.CallOption) (*NoReply, error)
	// 同步至up主空间的设置
	SpaceSyncSetting(ctx context.Context, in *SpaceSyncSettingReq, opts ...grpc.CallOption) (*SpaceSyncSettingReply, error)
	// 批量获取所有状态的话题活动卡-处理跳转地址
	NativeAllPageCards(ctx context.Context, in *NativeAllPageCardsReq, opts ...grpc.CallOption) (*NativeAllPageCardsReply, error)
}

type naPageClient struct {
	cc *grpc.ClientConn
}

func NewNaPageClient(cc *grpc.ClientConn) NaPageClient {
	return &naPageClient{cc}
}

func (c *naPageClient) NatConfig(ctx context.Context, in *NatConfigReq, opts ...grpc.CallOption) (*NatConfigReply, error) {
	out := new(NatConfigReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NatConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) BaseConfig(ctx context.Context, in *BaseConfigReq, opts ...grpc.CallOption) (*BaseConfigReply, error) {
	out := new(BaseConfigReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/BaseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NatInfoFromForeign(ctx context.Context, in *NatInfoFromForeignReq, opts ...grpc.CallOption) (*NatInfoFromForeignReply, error) {
	out := new(NatInfoFromForeignReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NatInfoFromForeign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) ModuleConfig(ctx context.Context, in *ModuleConfigReq, opts ...grpc.CallOption) (*ModuleConfigReply, error) {
	out := new(ModuleConfigReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/ModuleConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) ModuleMixExt(ctx context.Context, in *ModuleMixExtReq, opts ...grpc.CallOption) (*ModuleMixExtReply, error) {
	out := new(ModuleMixExtReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/ModuleMixExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) ModuleMixExts(ctx context.Context, in *ModuleMixExtsReq, opts ...grpc.CallOption) (*ModuleMixExtsReply, error) {
	out := new(ModuleMixExtsReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/ModuleMixExts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativePages(ctx context.Context, in *NativePagesReq, opts ...grpc.CallOption) (*NativePagesReply, error) {
	out := new(NativePagesReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativePages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativeAllPages(ctx context.Context, in *NativeAllPagesReq, opts ...grpc.CallOption) (*NativeAllPagesReply, error) {
	out := new(NativeAllPagesReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativeAllPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativePageCards(ctx context.Context, in *NativePageCardsReq, opts ...grpc.CallOption) (*NativePageCardsReply, error) {
	out := new(NativePageCardsReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativePageCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativePagesExt(ctx context.Context, in *NativePagesExtReq, opts ...grpc.CallOption) (*NativePagesExtReply, error) {
	out := new(NativePagesExtReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativePagesExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativeValidPagesExt(ctx context.Context, in *NativeValidPagesExtReq, opts ...grpc.CallOption) (*NativeValidPagesExtReply, error) {
	out := new(NativeValidPagesExtReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativeValidPagesExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativePage(ctx context.Context, in *NativePageReq, opts ...grpc.CallOption) (*NativePageReply, error) {
	out := new(NativePageReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NatTabModules(ctx context.Context, in *NatTabModulesReq, opts ...grpc.CallOption) (*NatTabModulesReply, error) {
	out := new(NatTabModulesReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NatTabModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativePagesTab(ctx context.Context, in *NativePagesTabReq, opts ...grpc.CallOption) (*NativePagesTabReply, error) {
	out := new(NativePagesTabReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativePagesTab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) IsUpActUid(ctx context.Context, in *IsUpActUidReq, opts ...grpc.CallOption) (*IsUpActUidReply, error) {
	out := new(IsUpActUidReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/IsUpActUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) UpActNativePages(ctx context.Context, in *UpActNativePagesReq, opts ...grpc.CallOption) (*UpActNativePagesReply, error) {
	out := new(UpActNativePagesReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/UpActNativePages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) UpActNativePageBind(ctx context.Context, in *UpActNativePageBindReq, opts ...grpc.CallOption) (*UpActNativePageBindReply, error) {
	out := new(UpActNativePageBindReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/UpActNativePageBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) SponsorNativePages(ctx context.Context, in *SponsorNativePagesReq, opts ...grpc.CallOption) (*SponsorNativePagesReply, error) {
	out := new(SponsorNativePagesReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/SponsorNativePages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) GetNatProgressParams(ctx context.Context, in *GetNatProgressParamsReq, opts ...grpc.CallOption) (*GetNatProgressParamsReply, error) {
	out := new(GetNatProgressParamsReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/GetNatProgressParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativeForbidList(ctx context.Context, in *NativeForbidListReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativeForbidList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) SpaceSyncSetting(ctx context.Context, in *SpaceSyncSettingReq, opts ...grpc.CallOption) (*SpaceSyncSettingReply, error) {
	out := new(SpaceSyncSettingReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/SpaceSyncSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naPageClient) NativeAllPageCards(ctx context.Context, in *NativeAllPageCardsReq, opts ...grpc.CallOption) (*NativeAllPageCardsReply, error) {
	out := new(NativeAllPageCardsReply)
	err := c.cc.Invoke(ctx, "/natpage.interface.service.v1.NaPage/NativeAllPageCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NaPageServer is the server API for NaPage service.
type NaPageServer interface {
	// native 活动页面配置信息
	NatConfig(context.Context, *NatConfigReq) (*NatConfigReply, error)
	// native 活动基础页面配置信息
	BaseConfig(context.Context, *BaseConfigReq) (*BaseConfigReply, error)
	// 根据fid和type查询话题信息
	NatInfoFromForeign(context.Context, *NatInfoFromForeignReq) (*NatInfoFromForeignReply, error)
	// 根据module_id查询配置信息
	ModuleConfig(context.Context, *ModuleConfigReq) (*ModuleConfigReply, error)
	// 根据module_id获取配置的id信息
	ModuleMixExt(context.Context, *ModuleMixExtReq) (*ModuleMixExtReply, error)
	// 根据module_id获取所有配置的id信息
	ModuleMixExts(context.Context, *ModuleMixExtsReq) (*ModuleMixExtsReply, error)
	// 批量获取话题活动信息接口-仅仅返回有效状态
	NativePages(context.Context, *NativePagesReq) (*NativePagesReply, error)
	// 批量获取话题活动信息接口-返回所有状态
	NativeAllPages(context.Context, *NativeAllPagesReq) (*NativeAllPagesReply, error)
	// 批量获取话题活动卡-处理跳转地址
	NativePageCards(context.Context, *NativePageCardsReq) (*NativePageCardsReply, error)
	// 批量获取话题活动信息接口&动态广场页配置信息-仅仅返回有效状态
	NativePagesExt(context.Context, *NativePagesExtReq) (*NativePagesExtReply, error)
	// 获取榜单有效期内的话题列表&动态广场页配置信息
	NativeValidPagesExt(context.Context, *NativeValidPagesExtReq) (*NativeValidPagesExtReply, error)
	// 获取单个活动信息-所有状态都返回
	NativePage(context.Context, *NativePageReq) (*NativePageReply, error)
	// 话题活动聚合tab
	NatTabModules(context.Context, *NatTabModulesReq) (*NatTabModulesReply, error)
	// 根据话题id获取话题跳转地址--供动态测使用
	NativePagesTab(context.Context, *NativePagesTabReq) (*NativePagesTabReply, error)
	// up主发起活动白名单接口
	IsUpActUid(context.Context, *IsUpActUidReq) (*IsUpActUidReply, error)
	// up主发起活动列表接口
	UpActNativePages(context.Context, *UpActNativePagesReq) (*UpActNativePagesReply, error)
	// up主发起活动-进审核态
	UpActNativePageBind(context.Context, *UpActNativePageBindReq) (*UpActNativePageBindReply, error)
	// 获取发起人的有效活动列表
	SponsorNativePages(context.Context, *SponsorNativePagesReq) (*SponsorNativePagesReply, error)
	// 获取page下所有的进度组件
	GetNatProgressParams(context.Context, *GetNatProgressParamsReq) (*GetNatProgressParamsReply, error)
	// 话题活动上榜&下榜-编辑接口
	NativeForbidList(context.Context, *NativeForbidListReq) (*NoReply, error)
	// 同步至up主空间的设置
	SpaceSyncSetting(context.Context, *SpaceSyncSettingReq) (*SpaceSyncSettingReply, error)
	// 批量获取所有状态的话题活动卡-处理跳转地址
	NativeAllPageCards(context.Context, *NativeAllPageCardsReq) (*NativeAllPageCardsReply, error)
}

// UnimplementedNaPageServer can be embedded to have forward compatible implementations.
type UnimplementedNaPageServer struct {
}

func (*UnimplementedNaPageServer) NatConfig(ctx context.Context, req *NatConfigReq) (*NatConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NatConfig not implemented")
}
func (*UnimplementedNaPageServer) BaseConfig(ctx context.Context, req *BaseConfigReq) (*BaseConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseConfig not implemented")
}
func (*UnimplementedNaPageServer) NatInfoFromForeign(ctx context.Context, req *NatInfoFromForeignReq) (*NatInfoFromForeignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NatInfoFromForeign not implemented")
}
func (*UnimplementedNaPageServer) ModuleConfig(ctx context.Context, req *ModuleConfigReq) (*ModuleConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleConfig not implemented")
}
func (*UnimplementedNaPageServer) ModuleMixExt(ctx context.Context, req *ModuleMixExtReq) (*ModuleMixExtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMixExt not implemented")
}
func (*UnimplementedNaPageServer) ModuleMixExts(ctx context.Context, req *ModuleMixExtsReq) (*ModuleMixExtsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMixExts not implemented")
}
func (*UnimplementedNaPageServer) NativePages(ctx context.Context, req *NativePagesReq) (*NativePagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePages not implemented")
}
func (*UnimplementedNaPageServer) NativeAllPages(ctx context.Context, req *NativeAllPagesReq) (*NativeAllPagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeAllPages not implemented")
}
func (*UnimplementedNaPageServer) NativePageCards(ctx context.Context, req *NativePageCardsReq) (*NativePageCardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePageCards not implemented")
}
func (*UnimplementedNaPageServer) NativePagesExt(ctx context.Context, req *NativePagesExtReq) (*NativePagesExtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePagesExt not implemented")
}
func (*UnimplementedNaPageServer) NativeValidPagesExt(ctx context.Context, req *NativeValidPagesExtReq) (*NativeValidPagesExtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeValidPagesExt not implemented")
}
func (*UnimplementedNaPageServer) NativePage(ctx context.Context, req *NativePageReq) (*NativePageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePage not implemented")
}
func (*UnimplementedNaPageServer) NatTabModules(ctx context.Context, req *NatTabModulesReq) (*NatTabModulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NatTabModules not implemented")
}
func (*UnimplementedNaPageServer) NativePagesTab(ctx context.Context, req *NativePagesTabReq) (*NativePagesTabReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativePagesTab not implemented")
}
func (*UnimplementedNaPageServer) IsUpActUid(ctx context.Context, req *IsUpActUidReq) (*IsUpActUidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUpActUid not implemented")
}
func (*UnimplementedNaPageServer) UpActNativePages(ctx context.Context, req *UpActNativePagesReq) (*UpActNativePagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActNativePages not implemented")
}
func (*UnimplementedNaPageServer) UpActNativePageBind(ctx context.Context, req *UpActNativePageBindReq) (*UpActNativePageBindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpActNativePageBind not implemented")
}
func (*UnimplementedNaPageServer) SponsorNativePages(ctx context.Context, req *SponsorNativePagesReq) (*SponsorNativePagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SponsorNativePages not implemented")
}
func (*UnimplementedNaPageServer) GetNatProgressParams(ctx context.Context, req *GetNatProgressParamsReq) (*GetNatProgressParamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNatProgressParams not implemented")
}
func (*UnimplementedNaPageServer) NativeForbidList(ctx context.Context, req *NativeForbidListReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeForbidList not implemented")
}
func (*UnimplementedNaPageServer) SpaceSyncSetting(ctx context.Context, req *SpaceSyncSettingReq) (*SpaceSyncSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceSyncSetting not implemented")
}
func (*UnimplementedNaPageServer) NativeAllPageCards(ctx context.Context, req *NativeAllPageCardsReq) (*NativeAllPageCardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeAllPageCards not implemented")
}

func RegisterNaPageServer(s *grpc.Server, srv NaPageServer) {
	s.RegisterService(&_NaPage_serviceDesc, srv)
}

func _NaPage_NatConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NatConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NatConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NatConfig(ctx, req.(*NatConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_BaseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).BaseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/BaseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).BaseConfig(ctx, req.(*BaseConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NatInfoFromForeign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatInfoFromForeignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NatInfoFromForeign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NatInfoFromForeign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NatInfoFromForeign(ctx, req.(*NatInfoFromForeignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_ModuleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).ModuleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/ModuleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).ModuleConfig(ctx, req.(*ModuleConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_ModuleMixExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleMixExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).ModuleMixExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/ModuleMixExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).ModuleMixExt(ctx, req.(*ModuleMixExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_ModuleMixExts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleMixExtsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).ModuleMixExts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/ModuleMixExts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).ModuleMixExts(ctx, req.(*ModuleMixExtsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativePages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativePages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativePages(ctx, req.(*NativePagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativeAllPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativeAllPagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativeAllPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativeAllPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativeAllPages(ctx, req.(*NativeAllPagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativePageCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePageCardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativePageCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativePageCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativePageCards(ctx, req.(*NativePageCardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativePagesExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePagesExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativePagesExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativePagesExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativePagesExt(ctx, req.(*NativePagesExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativeValidPagesExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativeValidPagesExtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativeValidPagesExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativeValidPagesExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativeValidPagesExt(ctx, req.(*NativeValidPagesExtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativePage(ctx, req.(*NativePageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NatTabModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatTabModulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NatTabModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NatTabModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NatTabModules(ctx, req.(*NatTabModulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativePagesTab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativePagesTabReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativePagesTab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativePagesTab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativePagesTab(ctx, req.(*NativePagesTabReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_IsUpActUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUpActUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).IsUpActUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/IsUpActUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).IsUpActUid(ctx, req.(*IsUpActUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_UpActNativePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActNativePagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).UpActNativePages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/UpActNativePages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).UpActNativePages(ctx, req.(*UpActNativePagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_UpActNativePageBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpActNativePageBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).UpActNativePageBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/UpActNativePageBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).UpActNativePageBind(ctx, req.(*UpActNativePageBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_SponsorNativePages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SponsorNativePagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).SponsorNativePages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/SponsorNativePages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).SponsorNativePages(ctx, req.(*SponsorNativePagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_GetNatProgressParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNatProgressParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).GetNatProgressParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/GetNatProgressParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).GetNatProgressParams(ctx, req.(*GetNatProgressParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativeForbidList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativeForbidListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativeForbidList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativeForbidList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativeForbidList(ctx, req.(*NativeForbidListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_SpaceSyncSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceSyncSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).SpaceSyncSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/SpaceSyncSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).SpaceSyncSetting(ctx, req.(*SpaceSyncSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaPage_NativeAllPageCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NativeAllPageCardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaPageServer).NativeAllPageCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natpage.interface.service.v1.NaPage/NativeAllPageCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaPageServer).NativeAllPageCards(ctx, req.(*NativeAllPageCardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NaPage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "natpage.interface.service.v1.NaPage",
	HandlerType: (*NaPageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NatConfig",
			Handler:    _NaPage_NatConfig_Handler,
		},
		{
			MethodName: "BaseConfig",
			Handler:    _NaPage_BaseConfig_Handler,
		},
		{
			MethodName: "NatInfoFromForeign",
			Handler:    _NaPage_NatInfoFromForeign_Handler,
		},
		{
			MethodName: "ModuleConfig",
			Handler:    _NaPage_ModuleConfig_Handler,
		},
		{
			MethodName: "ModuleMixExt",
			Handler:    _NaPage_ModuleMixExt_Handler,
		},
		{
			MethodName: "ModuleMixExts",
			Handler:    _NaPage_ModuleMixExts_Handler,
		},
		{
			MethodName: "NativePages",
			Handler:    _NaPage_NativePages_Handler,
		},
		{
			MethodName: "NativeAllPages",
			Handler:    _NaPage_NativeAllPages_Handler,
		},
		{
			MethodName: "NativePageCards",
			Handler:    _NaPage_NativePageCards_Handler,
		},
		{
			MethodName: "NativePagesExt",
			Handler:    _NaPage_NativePagesExt_Handler,
		},
		{
			MethodName: "NativeValidPagesExt",
			Handler:    _NaPage_NativeValidPagesExt_Handler,
		},
		{
			MethodName: "NativePage",
			Handler:    _NaPage_NativePage_Handler,
		},
		{
			MethodName: "NatTabModules",
			Handler:    _NaPage_NatTabModules_Handler,
		},
		{
			MethodName: "NativePagesTab",
			Handler:    _NaPage_NativePagesTab_Handler,
		},
		{
			MethodName: "IsUpActUid",
			Handler:    _NaPage_IsUpActUid_Handler,
		},
		{
			MethodName: "UpActNativePages",
			Handler:    _NaPage_UpActNativePages_Handler,
		},
		{
			MethodName: "UpActNativePageBind",
			Handler:    _NaPage_UpActNativePageBind_Handler,
		},
		{
			MethodName: "SponsorNativePages",
			Handler:    _NaPage_SponsorNativePages_Handler,
		},
		{
			MethodName: "GetNatProgressParams",
			Handler:    _NaPage_GetNatProgressParams_Handler,
		},
		{
			MethodName: "NativeForbidList",
			Handler:    _NaPage_NativeForbidList_Handler,
		},
		{
			MethodName: "SpaceSyncSetting",
			Handler:    _NaPage_SpaceSyncSetting_Handler,
		},
		{
			MethodName: "NativeAllPageCards",
			Handler:    _NaPage_NativeAllPageCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/web-svr/native-page/interface/api/api.proto",
}

func (m *NativeForbidListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeForbidListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeForbidListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AttrForbid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AttrForbid))
		i--
		dAtA[i] = 0x10
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsUpActUidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUpActUidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsUpActUidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IsUpActUidReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsUpActUidReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsUpActUidReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Match {
		i--
		if m.Match {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePagesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePagesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePagesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePagesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePagesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePagesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePageBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePageBindReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePageBindReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpActNativePageBindReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActNativePageBindReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpActNativePageBindReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pids) > 0 {
		dAtA3 := make([]byte, len(m.Pids)*10)
		var j2 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintApi(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePageCardsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageCardsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageCardsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pids) > 0 {
		dAtA5 := make([]byte, len(m.Pids)*10)
		var j4 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintApi(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePageCardsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageCardsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageCardsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NativePageCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ShareCaption) > 0 {
		i -= len(m.ShareCaption)
		copy(dAtA[i:], m.ShareCaption)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareCaption)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PcURL) > 0 {
		i -= len(m.PcURL)
		copy(dAtA[i:], m.PcURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PcURL)))
		i--
		dAtA[i] = 0x52
	}
	if m.RelatedUid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RelatedUid))
		i--
		dAtA[i] = 0x48
	}
	if len(m.SkipURL) > 0 {
		i -= len(m.SkipURL)
		copy(dAtA[i:], m.SkipURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SkipURL)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ShareURL) > 0 {
		i -= len(m.ShareURL)
		copy(dAtA[i:], m.ShareURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareURL)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ShareImage) > 0 {
		i -= len(m.ShareImage)
		copy(dAtA[i:], m.ShareImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareImage)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ShareTitle) > 0 {
		i -= len(m.ShareTitle)
		copy(dAtA[i:], m.ShareTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesExtReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesExtReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesExtReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pids) > 0 {
		dAtA9 := make([]byte, len(m.Pids)*10)
		var j8 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintApi(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesExtReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesExtReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesExtReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NativePageExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DynExt != nil {
		{
			size, err := m.DynExt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeValidPagesExtReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeValidPagesExtReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeValidPagesExtReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeValidPagesExtReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeValidPagesExtReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeValidPagesExtReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NativePageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesTabReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesTabReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pids) > 0 {
		dAtA16 := make([]byte, len(m.Pids)*10)
		var j15 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintApi(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativePagesTabReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePagesTabReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePagesTabReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PagesTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PagesTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PagesTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x22
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x18
	}
	if m.TabModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.TabID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NatTabModulesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatTabModulesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatTabModulesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TabID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NatTabModulesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatTabModulesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatTabModulesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tab != nil {
		{
			size, err := m.Tab.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ModuleConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PrimaryPageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PrimaryPageID))
		i--
		dAtA[i] = 0x10
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleConfigReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleConfigReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PrimaryPage != nil {
		{
			size, err := m.PrimaryPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Module != nil {
		{
			size, err := m.Module.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NativePage != nil {
		{
			size, err := m.NativePage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NatInfoFromForeignReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatInfoFromForeignReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatInfoFromForeignReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		for k := range m.Content {
			v := m.Content[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PageType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Fids) > 0 {
		dAtA23 := make([]byte, len(m.Fids)*10)
		var j22 int
		for _, num1 := range m.Fids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintApi(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NatInfoFromForeignReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatInfoFromForeignReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatInfoFromForeignReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NatConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PType))
		i--
		dAtA[i] = 0x20
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NatConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatConfigReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NatConfigReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirstPage != nil {
		{
			size, err := m.FirstPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bases) > 0 {
		for iNdEx := len(m.Bases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NativePage != nil {
		{
			size, err := m.NativePage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FirstPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirstPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ext != nil {
		{
			size, err := m.Ext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseConfigReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseConfigReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.PType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PType))
		i--
		dAtA[i] = 0x10
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaseConfigReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseConfigReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseConfigReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirstPage != nil {
		{
			size, err := m.FirstPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.BaseModules) > 0 {
		for iNdEx := len(m.BaseModules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseModules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bases) > 0 {
		for iNdEx := len(m.Bases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NativePage != nil {
		{
			size, err := m.NativePage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Page) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatchEvent != nil {
		{
			size, err := m.MatchEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Reserve != nil {
		{
			size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Game != nil {
		{
			size, err := m.Game.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ActPage != nil {
		{
			size, err := m.ActPage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Icon != nil {
		{
			size, err := m.Icon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Carousel != nil {
		{
			size, err := m.Carousel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Progress != nil {
		{
			size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Select != nil {
		{
			size, err := m.Select.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.InlineTab != nil {
		{
			size, err := m.InlineTab.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Recommend != nil {
		{
			size, err := m.Recommend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Participation != nil {
		{
			size, err := m.Participation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Dynamic != nil {
		{
			size, err := m.Dynamic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.VideoAct != nil {
		{
			size, err := m.VideoAct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Act != nil {
		{
			size, err := m.Act.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Click != nil {
		{
			size, err := m.Click.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NativeModule != nil {
		{
			size, err := m.NativeModule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Reserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reserve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reserve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Click) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Click) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Click) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Areas) > 0 {
		for iNdEx := len(m.Areas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Areas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VideoAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SortList) > 0 {
		for iNdEx := len(m.SortList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SortList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Act) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Act) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Act) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Dynamic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dynamic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dynamic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SelectList) > 0 {
		for iNdEx := len(m.SelectList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SelectList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Participation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Participation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Recommend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recommend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recommend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InlineTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InlineTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InlineTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Select) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Select) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Select) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Carousel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Carousel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Carousel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Icon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Icon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Icon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Progress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Progress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Progress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMixExtReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMixExtReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMixExtReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MType))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMixExtReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMixExtReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMixExtReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMixExtsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMixExtsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMixExtsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleMixExtsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleMixExtsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleMixExtsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.HasMore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FirstPid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FirstPid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if len(m.OffReason) > 0 {
		i -= len(m.OffReason)
		copy(dAtA[i:], m.OffReason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OffReason)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.ActOrigin) > 0 {
		i -= len(m.ActOrigin)
		copy(dAtA[i:], m.ActOrigin)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActOrigin)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.ConfSet) > 0 {
		i -= len(m.ConfSet)
		copy(dAtA[i:], m.ConfSet)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConfSet)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.FromType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FromType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.ShareCaption) > 0 {
		i -= len(m.ShareCaption)
		copy(dAtA[i:], m.ShareCaption)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareCaption)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.AnotherTitle) > 0 {
		i -= len(m.AnotherTitle)
		copy(dAtA[i:], m.AnotherTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AnotherTitle)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.PcURL) > 0 {
		i -= len(m.PcURL)
		copy(dAtA[i:], m.PcURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PcURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.DynamicID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DynamicID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Hot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Hot))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ActType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.RelatedUid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RelatedUid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Spmid) > 0 {
		i -= len(m.Spmid)
		copy(dAtA[i:], m.Spmid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Spmid)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SkipURL) > 0 {
		i -= len(m.SkipURL)
		copy(dAtA[i:], m.SkipURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SkipURL)))
		i--
		dAtA[i] = 0x72
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x68
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x60
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ShareURL) > 0 {
		i -= len(m.ShareURL)
		copy(dAtA[i:], m.ShareURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareURL)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ShareImage) > 0 {
		i -= len(m.ShareImage)
		copy(dAtA[i:], m.ShareImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareImage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ShareTitle) > 0 {
		i -= len(m.ShareTitle)
		copy(dAtA[i:], m.ShareTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareTitle)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Tip) > 0 {
		i -= len(m.Tip)
		copy(dAtA[i:], m.Tip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tip)))
		i--
		dAtA[i] = 0x62
	}
	if m.UnLock != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UnLock))
		i--
		dAtA[i] = 0x58
	}
	if m.DC != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DC))
		i--
		dAtA[i] = 0x50
	}
	if m.DT != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DT))
		i--
		dAtA[i] = 0x48
	}
	if len(m.BgImage2) > 0 {
		i -= len(m.BgImage2)
		copy(dAtA[i:], m.BgImage2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImage2)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BgImage1) > 0 {
		i -= len(m.BgImage1)
		copy(dAtA[i:], m.BgImage1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImage1)))
		i--
		dAtA[i] = 0x3a
	}
	if m.BarType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BarType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FontColor) > 0 {
		i -= len(m.FontColor)
		copy(dAtA[i:], m.FontColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FontColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TabBottomColor) > 0 {
		i -= len(m.TabBottomColor)
		copy(dAtA[i:], m.TabBottomColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabBottomColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TabMiddleColor) > 0 {
		i -= len(m.TabMiddleColor)
		copy(dAtA[i:], m.TabMiddleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabMiddleColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TabTopColor) > 0 {
		i -= len(m.TabTopColor)
		copy(dAtA[i:], m.TabTopColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabTopColor)))
		i--
		dAtA[i] = 0x12
	}
	if m.BgType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConfSort) > 0 {
		i -= len(m.ConfSort)
		copy(dAtA[i:], m.ConfSort)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ConfSort)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.Colors) > 0 {
		i -= len(m.Colors)
		copy(dAtA[i:], m.Colors)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Colors)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.LiveType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.Bar) > 0 {
		i -= len(m.Bar)
		copy(dAtA[i:], m.Bar)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Bar)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Caption) > 0 {
		i -= len(m.Caption)
		copy(dAtA[i:], m.Caption)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Caption)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.PType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.FontColor) > 0 {
		i -= len(m.FontColor)
		copy(dAtA[i:], m.FontColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FontColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.AvSort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AvSort))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CardStyle != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CardStyle))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.TName) > 0 {
		i -= len(m.TName)
		copy(dAtA[i:], m.TName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.MoreColor) > 0 {
		i -= len(m.MoreColor)
		copy(dAtA[i:], m.MoreColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MoreColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TitleColor) > 0 {
		i -= len(m.TitleColor)
		copy(dAtA[i:], m.TitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Ukey) > 0 {
		i -= len(m.Ukey)
		copy(dAtA[i:], m.Ukey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ukey)))
		i--
		dAtA[i] = 0x7a
	}
	if m.DySort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DySort))
		i--
		dAtA[i] = 0x70
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x68
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x50
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x48
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.NativeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NativeID))
		i--
		dAtA[i] = 0x20
	}
	if m.Fid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
		i--
		dAtA[i] = 0x18
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfSort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfSort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfSort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatementType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StatementType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x7a
	}
	if m.MseeType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MseeType))
		i--
		dAtA[i] = 0x70
	}
	if len(m.BtType) > 0 {
		i -= len(m.BtType)
		copy(dAtA[i:], m.BtType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BtType)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MUkeys) > 0 {
		for iNdEx := len(m.MUkeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MUkeys[iNdEx])
			copy(dAtA[i:], m.MUkeys[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.MUkeys[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Hint) > 0 {
		i -= len(m.Hint)
		copy(dAtA[i:], m.Hint)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Hint)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Counter) > 0 {
		i -= len(m.Counter)
		copy(dAtA[i:], m.Counter)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Counter)))
		i--
		dAtA[i] = 0x52
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x48
	}
	if len(m.SourceType) > 0 {
		i -= len(m.SourceType)
		copy(dAtA[i:], m.SourceType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SourceType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SortType) > 0 {
		i -= len(m.SortType)
		copy(dAtA[i:], m.SortType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SortType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.InterveNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InterveNum))
		i--
		dAtA[i] = 0x30
	}
	if len(m.StatType) > 0 {
		i -= len(m.StatType)
		copy(dAtA[i:], m.StatType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StatType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RdbType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RdbType))
		i--
		dAtA[i] = 0x20
	}
	if m.Axis != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Axis))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeSort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TimeSort))
		i--
		dAtA[i] = 0x10
	}
	if m.MoreSort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MoreSort))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Colors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Colors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Colors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubtitleColor) > 0 {
		i -= len(m.SubtitleColor)
		copy(dAtA[i:], m.SubtitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubtitleColor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SupernatantColor) > 0 {
		i -= len(m.SupernatantColor)
		copy(dAtA[i:], m.SupernatantColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SupernatantColor)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TimelineColor) > 0 {
		i -= len(m.TimelineColor)
		copy(dAtA[i:], m.TimelineColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TimelineColor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PanelNotSelectColor) > 0 {
		i -= len(m.PanelNotSelectColor)
		copy(dAtA[i:], m.PanelNotSelectColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelNotSelectColor)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PanelSelectColor) > 0 {
		i -= len(m.PanelSelectColor)
		copy(dAtA[i:], m.PanelSelectColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelSelectColor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PanelBgColor) > 0 {
		i -= len(m.PanelBgColor)
		copy(dAtA[i:], m.PanelBgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PanelBgColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NotSelectColor) > 0 {
		i -= len(m.NotSelectColor)
		copy(dAtA[i:], m.NotSelectColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NotSelectColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SelectColor) > 0 {
		i -= len(m.SelectColor)
		copy(dAtA[i:], m.SelectColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SelectColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TitleBgColor) > 0 {
		i -= len(m.TitleBgColor)
		copy(dAtA[i:], m.TitleBgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleBgColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisplayColor) > 0 {
		i -= len(m.DisplayColor)
		copy(dAtA[i:], m.DisplayColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisplayColor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MixReason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MixReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MixReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DefType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DefType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DEtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DEtime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DStime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DStime))
		i--
		dAtA[i] = 0x78
	}
	if m.UnSI != nil {
		{
			size, err := m.UnSI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.SI != nil {
		{
			size, err := m.SI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.UnI != nil {
		{
			size, err := m.UnI.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.LocationKey) > 0 {
		i -= len(m.LocationKey)
		copy(dAtA[i:], m.LocationKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LocationKey)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x52
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x48
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ImageComm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageComm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageComm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeAct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeAct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeAct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x48
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x40
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeClick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeClick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeClick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.OptionalImage) > 0 {
		i -= len(m.OptionalImage)
		copy(dAtA[i:], m.OptionalImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OptionalImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Tip) > 0 {
		i -= len(m.Tip)
		copy(dAtA[i:], m.Tip)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tip)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.FinishedImage) > 0 {
		i -= len(m.FinishedImage)
		copy(dAtA[i:], m.FinishedImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FinishedImage)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.UnfinishedImage) > 0 {
		i -= len(m.UnfinishedImage)
		copy(dAtA[i:], m.UnfinishedImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UnfinishedImage)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x60
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x58
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x42
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x38
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x30
	}
	if m.Lefty != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Lefty))
		i--
		dAtA[i] = 0x28
	}
	if m.Leftx != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Leftx))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClickTip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickTip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickTip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.UnlockCondition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UnlockCondition))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.DisplayMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DisplayMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.NodeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.StatPc) > 0 {
		i -= len(m.StatPc)
		copy(dAtA[i:], m.StatPc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StatPc)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.LotteryID) > 0 {
		i -= len(m.LotteryID)
		copy(dAtA[i:], m.LotteryID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LotteryID)))
		i--
		dAtA[i] = 0x72
	}
	if m.PSort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PSort))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Counter) > 0 {
		i -= len(m.Counter)
		copy(dAtA[i:], m.Counter)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Counter)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Activity) > 0 {
		i -= len(m.Activity)
		copy(dAtA[i:], m.Activity)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Activity)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DisplayType) > 0 {
		i -= len(m.DisplayType)
		copy(dAtA[i:], m.DisplayType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisplayType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FontType) > 0 {
		i -= len(m.FontType)
		copy(dAtA[i:], m.FontType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FontType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.InterveNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InterveNum))
		i--
		dAtA[i] = 0x40
	}
	if len(m.StatType) > 0 {
		i -= len(m.StatType)
		copy(dAtA[i:], m.StatType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StatType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FontColor) > 0 {
		i -= len(m.FontColor)
		copy(dAtA[i:], m.FontColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FontColor)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FontSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FontSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TitleColor) > 0 {
		i -= len(m.TitleColor)
		copy(dAtA[i:], m.TitleColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TitleColor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopColor) > 0 {
		i -= len(m.TopColor)
		copy(dAtA[i:], m.TopColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TopColor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OptionItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptionItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClickExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClickExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClickExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpType))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x68
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x60
	}
	if m.UnlockCondition != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UnlockCondition))
		i--
		dAtA[i] = 0x58
	}
	if m.DisplayMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DisplayMode))
		i--
		dAtA[i] = 0x50
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x48
	}
	if m.NodeId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Ukey) > 0 {
		i -= len(m.Ukey)
		copy(dAtA[i:], m.Ukey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ukey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SynHover {
		i--
		if m.SynHover {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Style) > 0 {
		i -= len(m.Style)
		copy(dAtA[i:], m.Style)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Style)))
		i--
		dAtA[i] = 0x22
	}
	if m.ShareImage != nil {
		{
			size, err := m.ShareImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ButtonImage) > 0 {
		i -= len(m.ButtonImage)
		copy(dAtA[i:], m.ButtonImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ButtonImage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LayerImage) > 0 {
		i -= len(m.LayerImage)
		copy(dAtA[i:], m.LayerImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LayerImage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeDynamicExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeDynamicExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeDynamicExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClassID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ClassID))
		i--
		dAtA[i] = 0x40
	}
	if m.ClassType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ClassType))
		i--
		dAtA[i] = 0x38
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x30
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.SelectType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SelectType))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeVideoExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeVideoExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeVideoExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x48
	}
	if len(m.SortName) > 0 {
		i -= len(m.SortName)
		copy(dAtA[i:], m.SortName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SortName)))
		i--
		dAtA[i] = 0x42
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.SortType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SortType))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeMixtureExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeMixtureExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeMixtureExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x4a
	}
	if m.MType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MType))
		i--
		dAtA[i] = 0x40
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeParticipationExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeParticipationExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeParticipationExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x62
	}
	if m.UpType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpType))
		i--
		dAtA[i] = 0x58
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x40
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MType))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeActTab) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeActTab) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeActTab) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InactiveColor) > 0 {
		i -= len(m.InactiveColor)
		copy(dAtA[i:], m.InactiveColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InactiveColor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ActiveColor) > 0 {
		i -= len(m.ActiveColor)
		copy(dAtA[i:], m.ActiveColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActiveColor)))
		i--
		dAtA[i] = 0x62
	}
	if m.IconType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IconType))
		i--
		dAtA[i] = 0x58
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BgImg) > 0 {
		i -= len(m.BgImg)
		copy(dAtA[i:], m.BgImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImg)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BgType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BgType))
		i--
		dAtA[i] = 0x40
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTabModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTabModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTabModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x60
	}
	if len(m.InactiveImg) > 0 {
		i -= len(m.InactiveImg)
		copy(dAtA[i:], m.InactiveImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InactiveImg)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ActiveImg) > 0 {
		i -= len(m.ActiveImg)
		copy(dAtA[i:], m.ActiveImg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ActiveImg)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x40
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x38
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x30
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.TabID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TabID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTsPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTsPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTsPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Template) > 0 {
		i -= len(m.Template)
		copy(dAtA[i:], m.Template)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Template)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ShareImage) > 0 {
		i -= len(m.ShareImage)
		copy(dAtA[i:], m.ShareImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShareImage)))
		i--
		dAtA[i] = 0x72
	}
	if m.AuditTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AuditTime))
		i--
		dAtA[i] = 0x68
	}
	if len(m.AuditType) > 0 {
		i -= len(m.AuditType)
		copy(dAtA[i:], m.AuditType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuditType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.VideoDisplay) > 0 {
		i -= len(m.VideoDisplay)
		copy(dAtA[i:], m.VideoDisplay)
		i = encodeVarintApi(dAtA, i, uint64(len(m.VideoDisplay)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x40
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x28
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePageSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.ActType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Partitions) > 0 {
		i -= len(m.Partitions)
		copy(dAtA[i:], m.Partitions)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Partitions)))
		i--
		dAtA[i] = 0x22
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x18
	}
	if m.PageId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTsModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTsModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTsModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attribute != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x78
	}
	if m.Num != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Ukey) > 0 {
		i -= len(m.Ukey)
		copy(dAtA[i:], m.Ukey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ukey)))
		i--
		dAtA[i] = 0x6a
	}
	if m.PType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x40
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.TsID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TsID))
		i--
		dAtA[i] = 0x18
	}
	if m.Category != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTsModuleResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTsModuleResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTsModuleResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x52
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x48
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x40
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ResourceFrom) > 0 {
		i -= len(m.ResourceFrom)
		copy(dAtA[i:], m.ResourceFrom)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ResourceFrom)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x28
	}
	if m.ResourceType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResourceType))
		i--
		dAtA[i] = 0x20
	}
	if m.ResourceID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResourceID))
		i--
		dAtA[i] = 0x18
	}
	if m.ModuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePageDyn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageDyn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageDyn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DynId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DynId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Dynamic) > 0 {
		i -= len(m.Dynamic)
		copy(dAtA[i:], m.Dynamic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dynamic)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Tids) > 0 {
		i -= len(m.Tids)
		copy(dAtA[i:], m.Tids)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tids)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BigCard) > 0 {
		i -= len(m.BigCard)
		copy(dAtA[i:], m.BigCard)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BigCard)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SmallCard) > 0 {
		i -= len(m.SmallCard)
		copy(dAtA[i:], m.SmallCard)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SmallCard)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SquareTitle) > 0 {
		i -= len(m.SquareTitle)
		copy(dAtA[i:], m.SquareTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SquareTitle)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Validity != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Validity))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x20
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x18
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativePageExtend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativePageExtend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativePageExtend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WhiteValue) > 0 {
		i -= len(m.WhiteValue)
		copy(dAtA[i:], m.WhiteValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WhiteValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x20
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x18
	}
	if m.Pid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SponsorNativePagesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SponsorNativePagesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SponsorNativePagesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Uids) > 0 {
		dAtA53 := make([]byte, len(m.Uids)*10)
		var j52 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA53[j52] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j52++
			}
			dAtA53[j52] = uint8(num)
			j52++
		}
		i -= j52
		copy(dAtA[i:], dAtA53[:j52])
		i = encodeVarintApi(dAtA, i, uint64(j52))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SponsorNativePagesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SponsorNativePagesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SponsorNativePagesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNatProgressParamsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNatProgressParamsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNatProgressParamsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNatProgressParamsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNatProgressParamsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNatProgressParamsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProgressParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgressParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProgressParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x60
	}
	if m.InterveNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.InterveNum))
		i--
		dAtA[i] = 0x58
	}
	if len(m.StatType) > 0 {
		i -= len(m.StatType)
		copy(dAtA[i:], m.StatType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.StatType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.WebKey) > 0 {
		i -= len(m.WebKey)
		copy(dAtA[i:], m.WebKey)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.RuleID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RuleID))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RuleIDName) > 0 {
		i -= len(m.RuleIDName)
		copy(dAtA[i:], m.RuleIDName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RuleIDName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Dimension != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Dimension))
		i--
		dAtA[i] = 0x20
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x18
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SponsorNativePage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SponsorNativePage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SponsorNativePage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x20
	}
	if m.RelatedUid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RelatedUid))
		i--
		dAtA[i] = 0x18
	}
	if m.ForeignID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActPageItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActPageItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActPageItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeAllPagesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeAllPagesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeAllPagesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pids) > 0 {
		dAtA55 := make([]byte, len(m.Pids)*10)
		var j54 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA55[j54] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j54++
			}
			dAtA55[j54] = uint8(num)
			j54++
		}
		i -= j54
		copy(dAtA[i:], dAtA55[:j54])
		i = encodeVarintApi(dAtA, i, uint64(j54))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeAllPagesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeAllPagesReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeAllPagesReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpaceSyncSettingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceSyncSettingReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpaceSyncSettingReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageId))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpaceSyncSettingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceSyncSettingReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpaceSyncSettingReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpaceButton) > 0 {
		i -= len(m.SpaceButton)
		copy(dAtA[i:], m.SpaceButton)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpaceButton)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeUserSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeUserSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeUserSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x40
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintApi(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x32
	}
	if m.DisplaySpace != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DisplaySpace))
		i--
		dAtA[i] = 0x28
	}
	if m.PageId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeAllPageCardsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeAllPageCardsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeAllPageCardsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pids) > 0 {
		dAtA58 := make([]byte, len(m.Pids)*10)
		var j57 int
		for _, num1 := range m.Pids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		i -= j57
		copy(dAtA[i:], dAtA58[:j57])
		i = encodeVarintApi(dAtA, i, uint64(j57))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeAllPageCardsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeAllPageCardsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeAllPageCardsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PartiExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartiExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartiExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewTid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NewTid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NativeForbidListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.AttrForbid != 0 {
		n += 1 + sovApi(uint64(m.AttrForbid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsUpActUidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsUpActUidReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePagesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePagesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePageBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpActNativePageBindReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageCardsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageCardsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	l = len(m.ShareTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SkipURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RelatedUid != 0 {
		n += 1 + sovApi(uint64(m.RelatedUid))
	}
	l = len(m.PcURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareCaption)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesExtReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesExtReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DynExt != nil {
		l = m.DynExt.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeValidPagesExtReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActType != 0 {
		n += 1 + sovApi(uint64(m.ActType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeValidPagesExtReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePagesTabReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PagesTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabID != 0 {
		n += 1 + sovApi(uint64(m.TabID))
	}
	if m.TabModuleID != 0 {
		n += 1 + sovApi(uint64(m.TabModuleID))
	}
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatTabModulesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TabID != 0 {
		n += 1 + sovApi(uint64(m.TabID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatTabModulesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tab != nil {
		l = m.Tab.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.PrimaryPageID != 0 {
		n += 1 + sovApi(uint64(m.PrimaryPageID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleConfigReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NativePage != nil {
		l = m.NativePage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Module != nil {
		l = m.Module.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PrimaryPage != nil {
		l = m.PrimaryPage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatInfoFromForeignReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fids) > 0 {
		l = 0
		for _, e := range m.Fids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.PageType != 0 {
		n += 1 + sovApi(uint64(m.PageType))
	}
	if len(m.Content) > 0 {
		for k, v := range m.Content {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatInfoFromForeignReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.PType != 0 {
		n += 1 + sovApi(uint64(m.PType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NatConfigReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NativePage != nil {
		l = m.NativePage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Bases) > 0 {
		for _, e := range m.Bases {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.FirstPage != nil {
		l = m.FirstPage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirstPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.PType != 0 {
		n += 1 + sovApi(uint64(m.PType))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseConfigReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NativePage != nil {
		l = m.NativePage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Bases) > 0 {
		for _, e := range m.Bases {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if len(m.BaseModules) > 0 {
		for _, e := range m.BaseModules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.FirstPage != nil {
		l = m.FirstPage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Module) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NativeModule != nil {
		l = m.NativeModule.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Click != nil {
		l = m.Click.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Act != nil {
		l = m.Act.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VideoAct != nil {
		l = m.VideoAct.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Dynamic != nil {
		l = m.Dynamic.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Participation != nil {
		l = m.Participation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Recommend != nil {
		l = m.Recommend.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.InlineTab != nil {
		l = m.InlineTab.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Carousel != nil {
		l = m.Carousel.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Icon != nil {
		l = m.Icon.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ActPage != nil {
		l = m.ActPage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Game != nil {
		l = m.Game.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Reserve != nil {
		l = m.Reserve.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MatchEvent != nil {
		l = m.MatchEvent.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Reserve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Click) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Areas) > 0 {
		for _, e := range m.Areas {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SortList) > 0 {
		for _, e := range m.SortList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Act) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dynamic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SelectList) > 0 {
		for _, e := range m.SelectList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Participation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Recommend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InlineTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Carousel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Icon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Progress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleMixExtReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.MType != 0 {
		n += 1 + sovApi(uint64(m.MType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleMixExtReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleMixExtsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleMixExtsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.HasMore != 0 {
		n += 1 + sovApi(uint64(m.HasMore))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShareURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	l = len(m.SkipURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Spmid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RelatedUid != 0 {
		n += 2 + sovApi(uint64(m.RelatedUid))
	}
	if m.Etime != 0 {
		n += 2 + sovApi(uint64(m.Etime))
	}
	if m.ActType != 0 {
		n += 2 + sovApi(uint64(m.ActType))
	}
	if m.Hot != 0 {
		n += 2 + sovApi(uint64(m.Hot))
	}
	if m.DynamicID != 0 {
		n += 2 + sovApi(uint64(m.DynamicID))
	}
	if m.Attribute != 0 {
		n += 2 + sovApi(uint64(m.Attribute))
	}
	l = len(m.PcURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.AnotherTitle)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ShareCaption)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.FromType != 0 {
		n += 2 + sovApi(uint64(m.FromType))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ConfSet)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ActOrigin)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.OffReason)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.FirstPid != 0 {
		n += 2 + sovApi(uint64(m.FirstPid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BgType != 0 {
		n += 1 + sovApi(uint64(m.BgType))
	}
	l = len(m.TabTopColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TabMiddleColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TabBottomColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BarType != 0 {
		n += 1 + sovApi(uint64(m.BarType))
	}
	l = len(m.BgImage1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgImage2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DT != 0 {
		n += 1 + sovApi(uint64(m.DT))
	}
	if m.DC != 0 {
		n += 1 + sovApi(uint64(m.DC))
	}
	if m.UnLock != 0 {
		n += 1 + sovApi(uint64(m.UnLock))
	}
	l = len(m.Tip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.NativeID != 0 {
		n += 1 + sovApi(uint64(m.NativeID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.DySort != 0 {
		n += 1 + sovApi(uint64(m.DySort))
	}
	l = len(m.Ukey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Attribute != 0 {
		n += 2 + sovApi(uint64(m.Attribute))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.TitleColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.MoreColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.TName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.CardStyle != 0 {
		n += 2 + sovApi(uint64(m.CardStyle))
	}
	if m.AvSort != 0 {
		n += 2 + sovApi(uint64(m.AvSort))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.PType != 0 {
		n += 2 + sovApi(uint64(m.PType))
	}
	l = len(m.Caption)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Bar)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 2 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 2 + sovApi(uint64(m.Etime))
	}
	if m.LiveType != 0 {
		n += 2 + sovApi(uint64(m.LiveType))
	}
	l = len(m.Colors)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.ConfSort)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfSort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MoreSort != 0 {
		n += 1 + sovApi(uint64(m.MoreSort))
	}
	if m.TimeSort != 0 {
		n += 1 + sovApi(uint64(m.TimeSort))
	}
	if m.Axis != 0 {
		n += 1 + sovApi(uint64(m.Axis))
	}
	if m.RdbType != 0 {
		n += 1 + sovApi(uint64(m.RdbType))
	}
	l = len(m.StatType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.InterveNum != 0 {
		n += 1 + sovApi(uint64(m.InterveNum))
	}
	l = len(m.SortType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SourceType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Counter)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Hint)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.MUkeys) > 0 {
		for _, s := range m.MUkeys {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.BtType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MseeType != 0 {
		n += 1 + sovApi(uint64(m.MseeType))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StatementType != 0 {
		n += 2 + sovApi(uint64(m.StatementType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Colors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TitleBgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SelectColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NotSelectColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PanelBgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PanelSelectColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PanelNotSelectColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TimelineColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SupernatantColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubtitleColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MixReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LocationKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UnI != nil {
		l = m.UnI.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SI != nil {
		l = m.SI.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UnSI != nil {
		l = m.UnSI.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DStime != 0 {
		n += 1 + sovApi(uint64(m.DStime))
	}
	if m.DEtime != 0 {
		n += 2 + sovApi(uint64(m.DEtime))
	}
	if m.DefType != 0 {
		n += 2 + sovApi(uint64(m.DefType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageComm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeAct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeClick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Leftx != 0 {
		n += 1 + sovApi(uint64(m.Leftx))
	}
	if m.Lefty != 0 {
		n += 1 + sovApi(uint64(m.Lefty))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	l = len(m.UnfinishedImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FinishedImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OptionalImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClickTip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TitleColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FontSize != 0 {
		n += 1 + sovApi(uint64(m.FontSize))
	}
	l = len(m.FontColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	l = len(m.StatType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.InterveNum != 0 {
		n += 1 + sovApi(uint64(m.InterveNum))
	}
	l = len(m.FontType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DisplayType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Activity)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Counter)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PSort != 0 {
		n += 1 + sovApi(uint64(m.PSort))
	}
	l = len(m.LotteryID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.StatPc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NodeId != 0 {
		n += 2 + sovApi(uint64(m.NodeId))
	}
	if m.GroupId != 0 {
		n += 2 + sovApi(uint64(m.GroupId))
	}
	if m.DisplayMode != 0 {
		n += 2 + sovApi(uint64(m.DisplayMode))
	}
	if m.UnlockCondition != 0 {
		n += 2 + sovApi(uint64(m.UnlockCondition))
	}
	if m.Stime != 0 {
		n += 2 + sovApi(uint64(m.Stime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OptionItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClickExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LayerImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ButtonImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShareImage != nil {
		l = m.ShareImage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Style)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.SynHover {
		n += 2
	}
	l = len(m.Ukey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NodeId != 0 {
		n += 1 + sovApi(uint64(m.NodeId))
	}
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	if m.DisplayMode != 0 {
		n += 1 + sovApi(uint64(m.DisplayMode))
	}
	if m.UnlockCondition != 0 {
		n += 1 + sovApi(uint64(m.UnlockCondition))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.UpType != 0 {
		n += 1 + sovApi(uint64(m.UpType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeDynamicExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.SelectType != 0 {
		n += 1 + sovApi(uint64(m.SelectType))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.ClassType != 0 {
		n += 1 + sovApi(uint64(m.ClassType))
	}
	if m.ClassID != 0 {
		n += 1 + sovApi(uint64(m.ClassID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeVideoExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.SortType != 0 {
		n += 1 + sovApi(uint64(m.SortType))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.SortName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeMixtureExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.MType != 0 {
		n += 1 + sovApi(uint64(m.MType))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeParticipationExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.MType != 0 {
		n += 1 + sovApi(uint64(m.MType))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.UpType != 0 {
		n += 1 + sovApi(uint64(m.UpType))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeActTab) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.BgType != 0 {
		n += 1 + sovApi(uint64(m.BgType))
	}
	l = len(m.BgImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IconType != 0 {
		n += 1 + sovApi(uint64(m.IconType))
	}
	l = len(m.ActiveColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InactiveColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeTabModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TabID != 0 {
		n += 1 + sovApi(uint64(m.TabID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ActiveImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InactiveImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeTsPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	l = len(m.VideoDisplay)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AuditType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AuditTime != 0 {
		n += 1 + sovApi(uint64(m.AuditTime))
	}
	l = len(m.ShareImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Template)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.PageId != 0 {
		n += 1 + sovApi(uint64(m.PageId))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	l = len(m.Partitions)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ActType != 0 {
		n += 1 + sovApi(uint64(m.ActType))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeTsModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Category != 0 {
		n += 1 + sovApi(uint64(m.Category))
	}
	if m.TsID != 0 {
		n += 1 + sovApi(uint64(m.TsID))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PType != 0 {
		n += 1 + sovApi(uint64(m.PType))
	}
	l = len(m.Ukey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeTsModuleResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.ModuleID != 0 {
		n += 1 + sovApi(uint64(m.ModuleID))
	}
	if m.ResourceID != 0 {
		n += 1 + sovApi(uint64(m.ResourceID))
	}
	if m.ResourceType != 0 {
		n += 1 + sovApi(uint64(m.ResourceType))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	l = len(m.ResourceFrom)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageDyn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Validity != 0 {
		n += 1 + sovApi(uint64(m.Validity))
	}
	l = len(m.SquareTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SmallCard)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BigCard)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tids)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dynamic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DynId != 0 {
		n += 1 + sovApi(uint64(m.DynId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativePageExtend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	l = len(m.WhiteValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SponsorNativePagesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SponsorNativePagesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNatProgressParamsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNatProgressParamsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProgressParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Dimension != 0 {
		n += 1 + sovApi(uint64(m.Dimension))
	}
	l = len(m.RuleIDName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RuleID != 0 {
		n += 1 + sovApi(uint64(m.RuleID))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WebKey)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.StatType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.InterveNum != 0 {
		n += 1 + sovApi(uint64(m.InterveNum))
	}
	if m.GroupID != 0 {
		n += 1 + sovApi(uint64(m.GroupID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SponsorNativePage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.ForeignID != 0 {
		n += 1 + sovApi(uint64(m.ForeignID))
	}
	if m.RelatedUid != 0 {
		n += 1 + sovApi(uint64(m.RelatedUid))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActPageItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageID != 0 {
		n += 1 + sovApi(uint64(m.PageID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeAllPagesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeAllPagesReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpaceSyncSettingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.PageId != 0 {
		n += 1 + sovApi(uint64(m.PageId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpaceSyncSettingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpaceButton)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeUserSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PageId != 0 {
		n += 1 + sovApi(uint64(m.PageId))
	}
	if m.DisplaySpace != 0 {
		n += 1 + sovApi(uint64(m.DisplaySpace))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeAllPageCardsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pids) > 0 {
		l = 0
		for _, e := range m.Pids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NativeAllPageCardsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartiExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewTid != 0 {
		n += 1 + sovApi(uint64(m.NewTid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NativeForbidListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeForbidListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeForbidListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrForbid", wireType)
			}
			m.AttrForbid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttrForbid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUpActUidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUpActUidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUpActUidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsUpActUidReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsUpActUidReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsUpActUidReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Match = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePagesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePagesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePagesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePagesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePagesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePagesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &UpActNativePages{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &NativePage{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePageBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePageBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePageBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActNativePageBindReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActNativePageBindReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActNativePageBindReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageCardsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageCardsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageCardsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageCardsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageCardsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageCardsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePageCard)
			}
			var mapkey int64
			var mapvalue *NativePageCard
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePageCard{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedUid", wireType)
			}
			m.RelatedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatedUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PcURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCaption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCaption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePage)
			}
			var mapkey int64
			var mapvalue *NativePage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesExtReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesExtReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesExtReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesExtReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesExtReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesExtReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePageExt)
			}
			var mapkey int64
			var mapvalue *NativePageExt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePageExt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NativePage{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynExt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynExt == nil {
				m.DynExt = &NativePageDyn{}
			}
			if err := m.DynExt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeValidPagesExtReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeValidPagesExtReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeValidPagesExtReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			m.ActType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeValidPagesExtReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeValidPagesExtReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeValidPagesExtReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePageExt)
			}
			var mapkey int64
			var mapvalue *NativePageExt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePageExt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NativePage{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePagesTabReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePagesTabReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePagesTabReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*PagesTab)
			}
			var mapkey int64
			var mapvalue *PagesTab
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PagesTab{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PagesTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PagesTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PagesTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabID", wireType)
			}
			m.TabID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabModuleID", wireType)
			}
			m.TabModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatTabModulesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatTabModulesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatTabModulesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabID", wireType)
			}
			m.TabID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatTabModulesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatTabModulesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatTabModulesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tab == nil {
				m.Tab = &NativeActTab{}
			}
			if err := m.Tab.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeTabModule{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryPageID", wireType)
			}
			m.PrimaryPageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryPageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativePage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativePage == nil {
				m.NativePage = &NativePage{}
			}
			if err := m.NativePage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Module == nil {
				m.Module = &Module{}
			}
			if err := m.Module.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrimaryPage == nil {
				m.PrimaryPage = &NativePage{}
			}
			if err := m.PrimaryPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatInfoFromForeignReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatInfoFromForeignReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatInfoFromForeignReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Fids = append(m.Fids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Fids) == 0 {
					m.Fids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Fids = append(m.Fids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageType", wireType)
			}
			m.PageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Content[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatInfoFromForeignReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatInfoFromForeignReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatInfoFromForeignReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePage)
			}
			var mapkey int64
			var mapvalue *NativePage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PType", wireType)
			}
			m.PType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativePage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativePage == nil {
				m.NativePage = &NativePage{}
			}
			if err := m.NativePage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &Module{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bases = append(m.Bases, &Module{})
			if err := m.Bases[len(m.Bases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstPage == nil {
				m.FirstPage = &FirstPage{}
			}
			if err := m.FirstPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirstPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NativePage{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &NativePageExtend{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PType", wireType)
			}
			m.PType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseConfigReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseConfigReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseConfigReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativePage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativePage == nil {
				m.NativePage = &NativePage{}
			}
			if err := m.NativePage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bases = append(m.Bases, &Module{})
			if err := m.Bases[len(m.Bases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseModules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseModules = append(m.BaseModules, &Module{})
			if err := m.BaseModules[len(m.BaseModules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstPage == nil {
				m.FirstPage = &FirstPage{}
			}
			if err := m.FirstPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeModule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativeModule == nil {
				m.NativeModule = &NativeModule{}
			}
			if err := m.NativeModule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Click", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Click == nil {
				m.Click = &Click{}
			}
			if err := m.Click.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Act", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Act == nil {
				m.Act = &Act{}
			}
			if err := m.Act.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoAct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoAct == nil {
				m.VideoAct = &VideoAct{}
			}
			if err := m.VideoAct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dynamic == nil {
				m.Dynamic = &Dynamic{}
			}
			if err := m.Dynamic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participation == nil {
				m.Participation = &Participation{}
			}
			if err := m.Participation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recommend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recommend == nil {
				m.Recommend = &Recommend{}
			}
			if err := m.Recommend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InlineTab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InlineTab == nil {
				m.InlineTab = &InlineTab{}
			}
			if err := m.InlineTab.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Select == nil {
				m.Select = &Select{}
			}
			if err := m.Select.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &Progress{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carousel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Carousel == nil {
				m.Carousel = &Carousel{}
			}
			if err := m.Carousel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icon == nil {
				m.Icon = &Icon{}
			}
			if err := m.Icon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActPage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActPage == nil {
				m.ActPage = &ActPage{}
			}
			if err := m.ActPage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Game == nil {
				m.Game = &Game{}
			}
			if err := m.Game.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reserve == nil {
				m.Reserve = &Reserve{}
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchEvent == nil {
				m.MatchEvent = &MatchEvent{}
			}
			if err := m.MatchEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Click) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Click: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Click: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Areas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Areas = append(m.Areas, &NativeClick{})
			if err := m.Areas[len(m.Areas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortList = append(m.SortList, &NativeVideoExt{})
			if err := m.SortList[len(m.SortList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Act) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Act: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Act: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativePage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dynamic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dynamic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dynamic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectList = append(m.SelectList, &NativeDynamicExt{})
			if err := m.SelectList[len(m.SelectList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Participation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeParticipationExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recommend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recommend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recommend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InlineTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InlineTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InlineTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Select) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Select: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Select: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Carousel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Carousel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Carousel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Icon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Icon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Icon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Progress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Progress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Progress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMixExtReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMixExtReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMixExtReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMixExtReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMixExtReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMixExtReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMixExtsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMixExtsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMixExtsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleMixExtsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleMixExtsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleMixExtsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &NativeMixtureExt{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spmid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spmid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedUid", wireType)
			}
			m.RelatedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatedUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			m.ActType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hot", wireType)
			}
			m.Hot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hot |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicID", wireType)
			}
			m.DynamicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DynamicID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PcURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnotherTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnotherTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCaption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareCaption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			m.FromType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPid", wireType)
			}
			m.FirstPid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgType", wireType)
			}
			m.BgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabTopColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabTopColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabMiddleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabMiddleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabBottomColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabBottomColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarType", wireType)
			}
			m.BarType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImage1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImage1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImage2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImage2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DT", wireType)
			}
			m.DT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DT |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DC", wireType)
			}
			m.DC = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DC |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnLock", wireType)
			}
			m.UnLock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnLock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeID", wireType)
			}
			m.NativeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DySort", wireType)
			}
			m.DySort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DySort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ukey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ukey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardStyle", wireType)
			}
			m.CardStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvSort", wireType)
			}
			m.AvSort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvSort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PType", wireType)
			}
			m.PType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveType", wireType)
			}
			m.LiveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colors = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfSort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfSort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfSort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfSort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfSort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreSort", wireType)
			}
			m.MoreSort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoreSort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSort", wireType)
			}
			m.TimeSort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Axis", wireType)
			}
			m.Axis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Axis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdbType", wireType)
			}
			m.RdbType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdbType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterveNum", wireType)
			}
			m.InterveNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterveNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MUkeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MUkeys = append(m.MUkeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MseeType", wireType)
			}
			m.MseeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MseeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatementType", wireType)
			}
			m.StatementType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatementType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Colors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Colors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Colors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleBgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleBgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotSelectColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotSelectColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelBgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelBgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelSelectColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelSelectColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanelNotSelectColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PanelNotSelectColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimelineColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimelineColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupernatantColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupernatantColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubtitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MixReason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MixReason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MixReason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnI == nil {
				m.UnI = &ImageComm{}
			}
			if err := m.UnI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SI == nil {
				m.SI = &ImageComm{}
			}
			if err := m.SI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnSI", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnSI == nil {
				m.UnSI = &ImageComm{}
			}
			if err := m.UnSI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DStime", wireType)
			}
			m.DStime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DStime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DEtime", wireType)
			}
			m.DEtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DEtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefType", wireType)
			}
			m.DefType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageComm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageComm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageComm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeAct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeAct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeAct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeClick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeClick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeClick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leftx", wireType)
			}
			m.Leftx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leftx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lefty", wireType)
			}
			m.Lefty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lefty |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnfinishedImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnfinishedImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinishedImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionalImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickTip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickTip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickTip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontSize", wireType)
			}
			m.FontSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FontSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterveNum", wireType)
			}
			m.InterveNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterveNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FontType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSort", wireType)
			}
			m.PSort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PSort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatPc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayMode", wireType)
			}
			m.DisplayMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayMode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockCondition", wireType)
			}
			m.UnlockCondition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockCondition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptionItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClickExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClickExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClickExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayerImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LayerImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareImage == nil {
				m.ShareImage = &Image{}
			}
			if err := m.ShareImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Style = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &Image{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynHover", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SynHover = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ukey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ukey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayMode", wireType)
			}
			m.DisplayMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayMode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockCondition", wireType)
			}
			m.UnlockCondition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockCondition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &OptionItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpType", wireType)
			}
			m.UpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeDynamicExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeDynamicExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeDynamicExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectType", wireType)
			}
			m.SelectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassType", wireType)
			}
			m.ClassType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			m.ClassID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeVideoExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeVideoExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeVideoExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortType", wireType)
			}
			m.SortType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeMixtureExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeMixtureExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeMixtureExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeParticipationExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeParticipationExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeParticipationExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpType", wireType)
			}
			m.UpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeActTab) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeActTab: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeActTab: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgType", wireType)
			}
			m.BgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconType", wireType)
			}
			m.IconType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IconType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InactiveColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTabModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTabModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTabModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabID", wireType)
			}
			m.TabID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InactiveImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTsPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTsPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTsPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoDisplay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoDisplay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditTime", wireType)
			}
			m.AuditTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuditTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageId", wireType)
			}
			m.PageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActType", wireType)
			}
			m.ActType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTsModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTsModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTsModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsID", wireType)
			}
			m.TsID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PType", wireType)
			}
			m.PType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ukey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ukey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTsModuleResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTsModuleResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTsModuleResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceID", wireType)
			}
			m.ResourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			m.ResourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageDyn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageDyn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageDyn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquareTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SquareTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmallCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigCard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigCard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tids = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dynamic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynId", wireType)
			}
			m.DynId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DynId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativePageExtend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativePageExtend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativePageExtend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SponsorNativePagesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SponsorNativePagesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SponsorNativePagesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SponsorNativePagesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SponsorNativePagesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SponsorNativePagesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SponsorNativePage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNatProgressParamsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNatProgressParamsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNatProgressParamsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNatProgressParamsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNatProgressParamsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNatProgressParamsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ProgressParam{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgressParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgressParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgressParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			m.Dimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dimension |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleIDName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleIDName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleID", wireType)
			}
			m.RuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterveNum", wireType)
			}
			m.InterveNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterveNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SponsorNativePage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SponsorNativePage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SponsorNativePage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedUid", wireType)
			}
			m.RelatedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelatedUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ActPageItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActPageItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActPageItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActPageItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageID", wireType)
			}
			m.PageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeAllPagesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeAllPagesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeAllPagesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeAllPagesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeAllPagesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeAllPagesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePage)
			}
			var mapkey int64
			var mapvalue *NativePage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceSyncSettingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceSyncSettingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceSyncSettingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageId", wireType)
			}
			m.PageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceSyncSettingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceSyncSettingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceSyncSettingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceButton", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceButton = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeUserSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeUserSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeUserSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageId", wireType)
			}
			m.PageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplaySpace", wireType)
			}
			m.DisplaySpace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplaySpace |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeAllPageCardsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeAllPageCardsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeAllPageCardsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pids = append(m.Pids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pids) == 0 {
					m.Pids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pids = append(m.Pids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeAllPageCardsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeAllPageCardsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeAllPageCardsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*NativePageCard)
			}
			var mapkey int64
			var mapvalue *NativePageCard
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NativePageCard{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartiExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartiExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartiExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTid", wireType)
			}
			m.NewTid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
