// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logid_008274.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BusinessMessage struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	LogTime              int64    `protobuf:"varint,2,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"`
	OpType               int32    `protobuf:"varint,3,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BusinessMessage) Reset()         { *m = BusinessMessage{} }
func (m *BusinessMessage) String() string { return proto.CompactTextString(m) }
func (*BusinessMessage) ProtoMessage()    {}
func (*BusinessMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_37374e0337929f87, []int{0}
}
func (m *BusinessMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BusinessMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BusinessMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BusinessMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessMessage.Merge(m, src)
}
func (m *BusinessMessage) XXX_Size() int {
	return m.Size()
}
func (m *BusinessMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessMessage proto.InternalMessageInfo

func (m *BusinessMessage) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BusinessMessage) GetLogTime() int64 {
	if m != nil {
		return m.LogTime
	}
	return 0
}

func (m *BusinessMessage) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func init() {
	proto.RegisterType((*BusinessMessage)(nil), "BusinessMessage")
}

func init() { proto.RegisterFile("logid_008274.proto", fileDescriptor_37374e0337929f87) }

var fileDescriptor_37374e0337929f87 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xc9, 0x4f, 0xcf,
	0x4c, 0x89, 0x37, 0x30, 0xb0, 0x30, 0x32, 0x37, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x0a,
	0xe7, 0xe2, 0x77, 0x2a, 0x2d, 0xce, 0xcc, 0x4b, 0x2d, 0x2e, 0xf6, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x4f, 0x15, 0x12, 0xe0, 0x62, 0xce, 0xcd, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x02,
	0x31, 0x85, 0x24, 0xb9, 0x38, 0x72, 0xf2, 0xd3, 0xe3, 0x4b, 0x32, 0x73, 0x53, 0x25, 0x98, 0xc0,
	0xc2, 0xec, 0x39, 0xf9, 0xe9, 0x21, 0x99, 0xb9, 0xa9, 0x42, 0xe2, 0x5c, 0xec, 0xf9, 0x05, 0xf1,
	0x25, 0x95, 0x05, 0xa9, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x6c, 0xf9, 0x05, 0x21, 0x95,
	0x05, 0xa9, 0x4e, 0xb6, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c,
	0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x5c, 0x92, 0xc9, 0xf9, 0xb9, 0x7a, 0x49, 0x99, 0x39, 0x99, 0x20,
	0xac, 0x97, 0x93, 0x98, 0x97, 0x9c, 0x5a, 0x04, 0x71, 0x85, 0x13, 0xb7, 0x0f, 0xc8, 0x65, 0x10,
	0x87, 0x45, 0x31, 0x27, 0x16, 0x64, 0x26, 0xb1, 0x81, 0x25, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xf6, 0x89, 0x7a, 0xd1, 0xb4, 0x00, 0x00, 0x00,
}

func (m *BusinessMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BusinessMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BusinessMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OpType != 0 {
		i = encodeVarintLogid_008274(dAtA, i, uint64(m.OpType))
		i--
		dAtA[i] = 0x18
	}
	if m.LogTime != 0 {
		i = encodeVarintLogid_008274(dAtA, i, uint64(m.LogTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintLogid_008274(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogid_008274(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogid_008274(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BusinessMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovLogid_008274(uint64(m.Mid))
	}
	if m.LogTime != 0 {
		n += 1 + sovLogid_008274(uint64(m.LogTime))
	}
	if m.OpType != 0 {
		n += 1 + sovLogid_008274(uint64(m.OpType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLogid_008274(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogid_008274(x uint64) (n int) {
	return sovLogid_008274(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BusinessMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogid_008274
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BusinessMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BusinessMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogid_008274
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogTime", wireType)
			}
			m.LogTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogid_008274
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogid_008274
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogid_008274(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogid_008274
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogid_008274
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogid_008274(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogid_008274
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogid_008274
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogid_008274
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogid_008274
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogid_008274
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogid_008274
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogid_008274        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogid_008274          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogid_008274 = fmt.Errorf("proto: unexpected end of group")
)
