// Code generated by kratos tool btsgen. DO NOT EDIT.

/*
  Package currency is a generated cache proxy package.
  It is generated from:
  type _bts interface {
		// get currency data by id.
		// cache
		Currency(c context.Context, id int64) (*currency.Currency, error)
		// get a foreign business currency id data.
		// cache
		Relation(c context.Context, businessID int64, foreignID int64) (*currency.CurrencyRelation, error)
		// get user currency.
		// cache
		CurrencyUser(c context.Context, mid int64, id int64) (*currency.CurrencyUser, error)
	}
*/

package currency

import (
	"context"

	"go-common/library/cache"
	"go-gateway/app/web-svr/activity/interface/model/currency"
)

var _ _bts

// Currency get currency data by id.
func (d *Dao) Currency(c context.Context, id int64) (res *currency.Currency, err error) {
	addCache := true
	res, err = d.CacheCurrency(c, id)
	if err != nil {
		addCache = false
		err = nil
	}
	if res != nil {
		cache.MetricHits.Inc("bts:Currency")
		return
	}
	cache.MetricMisses.Inc("bts:Currency")
	res, err = d.RawCurrency(c, id)
	if err != nil {
		return
	}
	miss := res
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheCurrency(c, id, miss)
	})
	return
}

// Relation get a foreign business currency id data.
func (d *Dao) Relation(c context.Context, businessID int64, foreignID int64) (res *currency.CurrencyRelation, err error) {
	addCache := true
	res, err = d.CacheRelation(c, businessID, foreignID)
	if err != nil {
		addCache = false
		err = nil
	}
	if res != nil {
		cache.MetricHits.Inc("bts:Relation")
		return
	}
	cache.MetricMisses.Inc("bts:Relation")
	res, err = d.RawRelation(c, businessID, foreignID)
	if err != nil {
		return
	}
	miss := res
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheRelation(c, businessID, miss, foreignID)
	})
	return
}

// CurrencyUser get user currency.
func (d *Dao) CurrencyUser(c context.Context, mid int64, id int64) (res *currency.CurrencyUser, err error) {
	addCache := true
	res, err = d.CacheCurrencyUser(c, mid, id)
	if err != nil {
		addCache = false
		err = nil
	}
	if res != nil {
		cache.MetricHits.Inc("bts:CurrencyUser")
		return
	}
	cache.MetricMisses.Inc("bts:CurrencyUser")
	res, err = d.RawCurrencyUser(c, mid, id)
	if err != nil {
		return
	}
	miss := res
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheCurrencyUser(c, mid, miss, id)
	})
	return
}
