// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "go-common/app/tool/protobuf/pkg/extensions/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ItemReq struct {
	ItemUuid             string   `protobuf:"bytes,1,opt,name=item_uuid,json=itemUuid,proto3" json:"item_uuid,omitempty" form:"item_uuid" validate:"required"`
	TypeName             string   `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty" form:"type_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ItemReq) Reset()         { *m = ItemReq{} }
func (m *ItemReq) String() string { return proto.CompactTextString(m) }
func (*ItemReq) ProtoMessage()    {}
func (*ItemReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *ItemReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemReq.Merge(m, src)
}
func (m *ItemReq) XXX_Size() int {
	return m.Size()
}
func (m *ItemReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemReq.DiscardUnknown(m)
}

var xxx_messageInfo_ItemReq proto.InternalMessageInfo

type StructedItem struct {
	Item                 map[string]*FieldValue `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StructedItem) Reset()         { *m = StructedItem{} }
func (m *StructedItem) String() string { return proto.CompactTextString(m) }
func (*StructedItem) ProtoMessage()    {}
func (*StructedItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *StructedItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructedItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StructedItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StructedItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructedItem.Merge(m, src)
}
func (m *StructedItem) XXX_Size() int {
	return m.Size()
}
func (m *StructedItem) XXX_DiscardUnknown() {
	xxx_messageInfo_StructedItem.DiscardUnknown(m)
}

var xxx_messageInfo_StructedItem proto.InternalMessageInfo

type ItemReply struct {
	// Types that are valid to be assigned to Item:
	//	*ItemReply_ValueStruct
	//	*ItemReply_ValueRaw
	Item                 isItemReply_Item `protobuf_oneof:"item"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ItemReply) Reset()         { *m = ItemReply{} }
func (m *ItemReply) String() string { return proto.CompactTextString(m) }
func (*ItemReply) ProtoMessage()    {}
func (*ItemReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *ItemReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemReply.Merge(m, src)
}
func (m *ItemReply) XXX_Size() int {
	return m.Size()
}
func (m *ItemReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemReply.DiscardUnknown(m)
}

var xxx_messageInfo_ItemReply proto.InternalMessageInfo

type isItemReply_Item interface {
	isItemReply_Item()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ItemReply_ValueStruct struct {
	ValueStruct *StructedItem `protobuf:"bytes,1,opt,name=value_struct,json=valueStruct,proto3,oneof"`
}
type ItemReply_ValueRaw struct {
	ValueRaw *FieldValue `protobuf:"bytes,2,opt,name=value_raw,json=valueRaw,proto3,oneof"`
}

func (*ItemReply_ValueStruct) isItemReply_Item() {}
func (*ItemReply_ValueRaw) isItemReply_Item()    {}

func (m *ItemReply) GetItem() isItemReply_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ItemReply) GetValueStruct() *StructedItem {
	if x, ok := m.GetItem().(*ItemReply_ValueStruct); ok {
		return x.ValueStruct
	}
	return nil
}

func (m *ItemReply) GetValueRaw() *FieldValue {
	if x, ok := m.GetItem().(*ItemReply_ValueRaw); ok {
		return x.ValueRaw
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ItemReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ItemReply_OneofMarshaler, _ItemReply_OneofUnmarshaler, _ItemReply_OneofSizer, []interface{}{
		(*ItemReply_ValueStruct)(nil),
		(*ItemReply_ValueRaw)(nil),
	}
}

func _ItemReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ItemReply)
	// item
	switch x := m.Item.(type) {
	case *ItemReply_ValueStruct:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueStruct); err != nil {
			return err
		}
	case *ItemReply_ValueRaw:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueRaw); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ItemReply.Item has unexpected type %T", x)
	}
	return nil
}

func _ItemReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ItemReply)
	switch tag {
	case 1: // item.value_struct
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StructedItem)
		err := b.DecodeMessage(msg)
		m.Item = &ItemReply_ValueStruct{msg}
		return true, err
	case 2: // item.value_raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldValue)
		err := b.DecodeMessage(msg)
		m.Item = &ItemReply_ValueRaw{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ItemReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ItemReply)
	// item
	switch x := m.Item.(type) {
	case *ItemReply_ValueStruct:
		s := proto.Size(x.ValueStruct)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ItemReply_ValueRaw:
		s := proto.Size(x.ValueRaw)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StringList struct {
	List                 []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringList) Reset()         { *m = StringList{} }
func (m *StringList) String() string { return proto.CompactTextString(m) }
func (*StringList) ProtoMessage()    {}
func (*StringList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *StringList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringList.Merge(m, src)
}
func (m *StringList) XXX_Size() int {
	return m.Size()
}
func (m *StringList) XXX_DiscardUnknown() {
	xxx_messageInfo_StringList.DiscardUnknown(m)
}

var xxx_messageInfo_StringList proto.InternalMessageInfo

type IntList struct {
	List                 []int64  `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntList) Reset()         { *m = IntList{} }
func (m *IntList) String() string { return proto.CompactTextString(m) }
func (*IntList) ProtoMessage()    {}
func (*IntList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *IntList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntList.Merge(m, src)
}
func (m *IntList) XXX_Size() int {
	return m.Size()
}
func (m *IntList) XXX_DiscardUnknown() {
	xxx_messageInfo_IntList.DiscardUnknown(m)
}

var xxx_messageInfo_IntList proto.InternalMessageInfo

type BoolList struct {
	List                 []bool   `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolList) Reset()         { *m = BoolList{} }
func (m *BoolList) String() string { return proto.CompactTextString(m) }
func (*BoolList) ProtoMessage()    {}
func (*BoolList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *BoolList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BoolList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BoolList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BoolList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolList.Merge(m, src)
}
func (m *BoolList) XXX_Size() int {
	return m.Size()
}
func (m *BoolList) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolList.DiscardUnknown(m)
}

var xxx_messageInfo_BoolList proto.InternalMessageInfo

type ItemList struct {
	List                 []*ItemReply `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ItemList) Reset()         { *m = ItemList{} }
func (m *ItemList) String() string { return proto.CompactTextString(m) }
func (*ItemList) ProtoMessage()    {}
func (*ItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemList.Merge(m, src)
}
func (m *ItemList) XXX_Size() int {
	return m.Size()
}
func (m *ItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemList.DiscardUnknown(m)
}

var xxx_messageInfo_ItemList proto.InternalMessageInfo

type FieldValue struct {
	// Types that are valid to be assigned to Value:
	//	*FieldValue_ValueString
	//	*FieldValue_ValueInt
	//	*FieldValue_ValueBool
	//	*FieldValue_ValueItem
	//	*FieldValue_ValueStringList
	//	*FieldValue_ValueBoolList
	//	*FieldValue_ValueIntList
	//	*FieldValue_ValueItemList
	Value                isFieldValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FieldValue) Reset()         { *m = FieldValue{} }
func (m *FieldValue) String() string { return proto.CompactTextString(m) }
func (*FieldValue) ProtoMessage()    {}
func (*FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *FieldValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValue.Merge(m, src)
}
func (m *FieldValue) XXX_Size() int {
	return m.Size()
}
func (m *FieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValue proto.InternalMessageInfo

type isFieldValue_Value interface {
	isFieldValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldValue_ValueString struct {
	ValueString string `protobuf:"bytes,1,opt,name=value_string,json=valueString,proto3,oneof"`
}
type FieldValue_ValueInt struct {
	ValueInt int64 `protobuf:"varint,2,opt,name=value_int,json=valueInt,proto3,oneof"`
}
type FieldValue_ValueBool struct {
	ValueBool bool `protobuf:"varint,3,opt,name=value_bool,json=valueBool,proto3,oneof"`
}
type FieldValue_ValueItem struct {
	ValueItem *ItemReply `protobuf:"bytes,4,opt,name=value_item,json=valueItem,proto3,oneof"`
}
type FieldValue_ValueStringList struct {
	ValueStringList *StringList `protobuf:"bytes,5,opt,name=value_string_list,json=valueStringList,proto3,oneof"`
}
type FieldValue_ValueBoolList struct {
	ValueBoolList *BoolList `protobuf:"bytes,6,opt,name=value_bool_list,json=valueBoolList,proto3,oneof"`
}
type FieldValue_ValueIntList struct {
	ValueIntList *IntList `protobuf:"bytes,7,opt,name=value_int_list,json=valueIntList,proto3,oneof"`
}
type FieldValue_ValueItemList struct {
	ValueItemList *ItemList `protobuf:"bytes,8,opt,name=value_item_list,json=valueItemList,proto3,oneof"`
}

func (*FieldValue_ValueString) isFieldValue_Value()     {}
func (*FieldValue_ValueInt) isFieldValue_Value()        {}
func (*FieldValue_ValueBool) isFieldValue_Value()       {}
func (*FieldValue_ValueItem) isFieldValue_Value()       {}
func (*FieldValue_ValueStringList) isFieldValue_Value() {}
func (*FieldValue_ValueBoolList) isFieldValue_Value()   {}
func (*FieldValue_ValueIntList) isFieldValue_Value()    {}
func (*FieldValue_ValueItemList) isFieldValue_Value()   {}

func (m *FieldValue) GetValue() isFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldValue) GetValueString() string {
	if x, ok := m.GetValue().(*FieldValue_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (m *FieldValue) GetValueInt() int64 {
	if x, ok := m.GetValue().(*FieldValue_ValueInt); ok {
		return x.ValueInt
	}
	return 0
}

func (m *FieldValue) GetValueBool() bool {
	if x, ok := m.GetValue().(*FieldValue_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (m *FieldValue) GetValueItem() *ItemReply {
	if x, ok := m.GetValue().(*FieldValue_ValueItem); ok {
		return x.ValueItem
	}
	return nil
}

func (m *FieldValue) GetValueStringList() *StringList {
	if x, ok := m.GetValue().(*FieldValue_ValueStringList); ok {
		return x.ValueStringList
	}
	return nil
}

func (m *FieldValue) GetValueBoolList() *BoolList {
	if x, ok := m.GetValue().(*FieldValue_ValueBoolList); ok {
		return x.ValueBoolList
	}
	return nil
}

func (m *FieldValue) GetValueIntList() *IntList {
	if x, ok := m.GetValue().(*FieldValue_ValueIntList); ok {
		return x.ValueIntList
	}
	return nil
}

func (m *FieldValue) GetValueItemList() *ItemList {
	if x, ok := m.GetValue().(*FieldValue_ValueItemList); ok {
		return x.ValueItemList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FieldValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FieldValue_OneofMarshaler, _FieldValue_OneofUnmarshaler, _FieldValue_OneofSizer, []interface{}{
		(*FieldValue_ValueString)(nil),
		(*FieldValue_ValueInt)(nil),
		(*FieldValue_ValueBool)(nil),
		(*FieldValue_ValueItem)(nil),
		(*FieldValue_ValueStringList)(nil),
		(*FieldValue_ValueBoolList)(nil),
		(*FieldValue_ValueIntList)(nil),
		(*FieldValue_ValueItemList)(nil),
	}
}

func _FieldValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FieldValue)
	// value
	switch x := m.Value.(type) {
	case *FieldValue_ValueString:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ValueString)
	case *FieldValue_ValueInt:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ValueInt))
	case *FieldValue_ValueBool:
		t := uint64(0)
		if x.ValueBool {
			t = 1
		}
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *FieldValue_ValueItem:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueItem); err != nil {
			return err
		}
	case *FieldValue_ValueStringList:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueStringList); err != nil {
			return err
		}
	case *FieldValue_ValueBoolList:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueBoolList); err != nil {
			return err
		}
	case *FieldValue_ValueIntList:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueIntList); err != nil {
			return err
		}
	case *FieldValue_ValueItemList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueItemList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FieldValue.Value has unexpected type %T", x)
	}
	return nil
}

func _FieldValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FieldValue)
	switch tag {
	case 1: // value.value_string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &FieldValue_ValueString{x}
		return true, err
	case 2: // value.value_int
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_ValueInt{int64(x)}
		return true, err
	case 3: // value.value_bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_ValueBool{x != 0}
		return true, err
	case 4: // value.value_item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ItemReply)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValue_ValueItem{msg}
		return true, err
	case 5: // value.value_string_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringList)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValue_ValueStringList{msg}
		return true, err
	case 6: // value.value_bool_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BoolList)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValue_ValueBoolList{msg}
		return true, err
	case 7: // value.value_int_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IntList)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValue_ValueIntList{msg}
		return true, err
	case 8: // value.value_item_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ItemList)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValue_ValueItemList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FieldValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FieldValue)
	// value
	switch x := m.Value.(type) {
	case *FieldValue_ValueString:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ValueString)))
		n += len(x.ValueString)
	case *FieldValue_ValueInt:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.ValueInt))
	case *FieldValue_ValueBool:
		n += 1 // tag and wire
		n += 1
	case *FieldValue_ValueItem:
		s := proto.Size(x.ValueItem)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldValue_ValueStringList:
		s := proto.Size(x.ValueStringList)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldValue_ValueBoolList:
		s := proto.Size(x.ValueBoolList)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldValue_ValueIntList:
		s := proto.Size(x.ValueIntList)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldValue_ValueItemList:
		s := proto.Size(x.ValueItemList)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ItemReq)(nil), "datasource.service.v1.ItemReq")
	proto.RegisterType((*StructedItem)(nil), "datasource.service.v1.StructedItem")
	proto.RegisterMapType((map[string]*FieldValue)(nil), "datasource.service.v1.StructedItem.ItemEntry")
	proto.RegisterType((*ItemReply)(nil), "datasource.service.v1.ItemReply")
	proto.RegisterType((*StringList)(nil), "datasource.service.v1.StringList")
	proto.RegisterType((*IntList)(nil), "datasource.service.v1.IntList")
	proto.RegisterType((*BoolList)(nil), "datasource.service.v1.BoolList")
	proto.RegisterType((*ItemList)(nil), "datasource.service.v1.ItemList")
	proto.RegisterType((*FieldValue)(nil), "datasource.service.v1.FieldValue")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0xb5, 0x71, 0x20, 0xf6, 0x4d, 0xde, 0x83, 0x37, 0x02, 0x29, 0xca, 0x2b, 0x4e, 0x6a, 0xba,
	0xc8, 0xa6, 0x89, 0x48, 0x2b, 0xb5, 0x62, 0x05, 0x51, 0xa1, 0x8e, 0x54, 0x51, 0x69, 0x50, 0xab,
	0x8a, 0x4d, 0x34, 0xe0, 0xc1, 0x1a, 0xd5, 0xf1, 0x18, 0x67, 0x1c, 0x94, 0x75, 0x3f, 0xa4, 0x5f,
	0xd0, 0xff, 0x60, 0xd9, 0x2f, 0x40, 0x2d, 0xeb, 0xae, 0xf8, 0x82, 0xca, 0x77, 0x12, 0x93, 0x8a,
	0x06, 0xd8, 0x44, 0x37, 0x73, 0xee, 0x3d, 0x3e, 0xe7, 0xdc, 0xb1, 0xc1, 0x61, 0x89, 0x68, 0x27,
	0xa9, 0x54, 0x92, 0x6c, 0x04, 0x4c, 0xb1, 0x91, 0xcc, 0xd2, 0x53, 0xde, 0x1e, 0xf1, 0x74, 0x2c,
	0x4e, 0x79, 0x7b, 0xbc, 0x5d, 0x5f, 0x0f, 0x65, 0x28, 0xb1, 0xa3, 0x93, 0x57, 0xba, 0xb9, 0xfe,
	0x7f, 0x28, 0x65, 0x18, 0xf1, 0x0e, 0xfe, 0x3b, 0xc9, 0xce, 0x3a, 0x7c, 0x98, 0xa8, 0xc9, 0x14,
	0x7c, 0x32, 0x05, 0x59, 0x22, 0x3a, 0x2c, 0x8e, 0xa5, 0x62, 0x4a, 0xc8, 0x78, 0xa4, 0x51, 0xef,
	0x8b, 0x09, 0xe5, 0xbe, 0xe2, 0x43, 0xca, 0xcf, 0xc9, 0x3e, 0x38, 0x42, 0xf1, 0xe1, 0x20, 0xcb,
	0x44, 0x50, 0x33, 0x9b, 0x66, 0xcb, 0xe9, 0xb5, 0x6e, 0xae, 0x1a, 0xcf, 0xce, 0x64, 0x3a, 0xdc,
	0xf1, 0x0a, 0xc8, 0x6b, 0x8e, 0x59, 0x24, 0x02, 0xa6, 0xf8, 0x8e, 0x97, 0xf2, 0xf3, 0x4c, 0xa4,
	0x3c, 0xf0, 0xa8, 0x9d, 0xe3, 0x1f, 0x32, 0x11, 0x90, 0x6d, 0x70, 0xd4, 0x24, 0xe1, 0x83, 0x98,
	0x0d, 0x79, 0x6d, 0x09, 0x69, 0xd6, 0x6f, 0xae, 0x1a, 0x6b, 0x9a, 0xa6, 0x80, 0x3c, 0x6a, 0xe7,
	0xf5, 0x61, 0x5e, 0x7e, 0x33, 0xa1, 0x7a, 0xa4, 0xd2, 0xec, 0x54, 0xf1, 0x20, 0x57, 0x43, 0xf6,
	0xa0, 0x94, 0xf3, 0xd5, 0xcc, 0xa6, 0xd5, 0xaa, 0x74, 0x9f, 0xb7, 0xff, 0x9a, 0x46, 0x7b, 0x7e,
	0xa4, 0x9d, 0xff, 0xec, 0xc7, 0x2a, 0x9d, 0x50, 0x1c, 0xad, 0x1f, 0x83, 0x53, 0x1c, 0x91, 0x35,
	0xb0, 0x3e, 0xf3, 0x89, 0x36, 0x45, 0xf3, 0x92, 0xbc, 0x82, 0xe5, 0x31, 0x8b, 0x32, 0xad, 0xb0,
	0xd2, 0x7d, 0xba, 0xe0, 0x11, 0x07, 0x82, 0x47, 0xc1, 0xc7, 0xbc, 0x91, 0xea, 0xfe, 0x9d, 0xa5,
	0xd7, 0xa6, 0xf7, 0xd5, 0xd4, 0xe4, 0x94, 0x27, 0xd1, 0x84, 0xf8, 0x50, 0x45, 0x68, 0x30, 0x42,
	0x3d, 0xf8, 0x94, 0x4a, 0x77, 0xeb, 0x11, 0xa2, 0x7d, 0x83, 0x56, 0x70, 0x54, 0x1f, 0x92, 0x5d,
	0x70, 0x34, 0x53, 0xca, 0x2e, 0x1e, 0x2d, 0xcc, 0x37, 0xa8, 0x8d, 0x53, 0x94, 0x5d, 0xf4, 0x56,
	0x74, 0x70, 0x5e, 0x13, 0xe0, 0x48, 0xa5, 0x22, 0x0e, 0xdf, 0x89, 0x91, 0x22, 0x04, 0x4a, 0x91,
	0x18, 0x29, 0x8c, 0xd3, 0xa1, 0x58, 0x7b, 0x9b, 0x50, 0xee, 0xc7, 0xea, 0x0e, 0x6c, 0x4d, 0x61,
	0x17, 0xec, 0x9e, 0x94, 0xd1, 0x1d, 0xdc, 0x9e, 0xe2, 0xbb, 0x60, 0xe7, 0x0e, 0x10, 0x7f, 0x39,
	0x87, 0x57, 0xba, 0xcd, 0x05, 0x8a, 0x8b, 0xc0, 0xa6, 0x0c, 0xbf, 0x2c, 0x80, 0x5b, 0x17, 0x64,
	0x6b, 0x2e, 0x45, 0x11, 0x87, 0x7a, 0x57, 0xf3, 0x01, 0x89, 0x38, 0x24, 0x9b, 0xb3, 0x80, 0x44,
	0xac, 0x30, 0x20, 0xab, 0x70, 0xdf, 0x8f, 0x15, 0x69, 0x00, 0x68, 0xf8, 0x44, 0xca, 0xa8, 0x66,
	0x35, 0xcd, 0x96, 0xed, 0x1b, 0x54, 0x8f, 0xe4, 0x6e, 0xc8, 0xde, 0xac, 0x01, 0x6f, 0x57, 0x09,
	0x13, 0x7e, 0x50, 0x6f, 0x41, 0x81, 0x57, 0xf3, 0x3d, 0xfc, 0x37, 0xaf, 0x73, 0x80, 0xce, 0x97,
	0xef, 0xdd, 0xd5, 0xed, 0x26, 0x7c, 0x83, 0xae, 0xce, 0xf9, 0xc1, 0xf4, 0xfa, 0xb0, 0x7a, 0x2b,
	0x5a, 0xd3, 0xad, 0x20, 0x5d, 0x63, 0x01, 0xdd, 0x6c, 0x2f, 0xbe, 0x41, 0xff, 0x29, 0xac, 0x21,
	0xd5, 0x01, 0xfc, 0x5b, 0xc4, 0xa3, 0x99, 0xca, 0xc8, 0xe4, 0x2e, 0xb2, 0xa8, 0x2f, 0x80, 0x6f,
	0xd0, 0xea, 0x2c, 0xc3, 0x3f, 0x25, 0xe1, 0x4b, 0x8f, 0x44, 0xf6, 0xbd, 0x92, 0x66, 0x57, 0xa1,
	0x90, 0x34, 0x3b, 0xe8, 0x95, 0xa7, 0xef, 0x59, 0xf7, 0x13, 0x54, 0xdf, 0x30, 0xc5, 0x8e, 0x70,
	0xf6, 0xf0, 0x2d, 0xf1, 0xa1, 0x84, 0x79, 0xba, 0xf7, 0xc6, 0x7f, 0x5e, 0x7f, 0x70, 0x3d, 0xbd,
	0x8d, 0xcb, 0x9f, 0xae, 0x71, 0x79, 0xed, 0x9a, 0xdf, 0xaf, 0x5d, 0xf3, 0xc7, 0xb5, 0x6b, 0x1e,
	0x5b, 0x2c, 0x11, 0x27, 0x2b, 0xf8, 0x85, 0x7b, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xea, 0xb7,
	0x86, 0x30, 0x56, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataSourceNGClient is the client API for DataSourceNG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataSourceNGClient interface {
	Item(ctx context.Context, in *ItemReq, opts ...grpc.CallOption) (*ItemReply, error)
}

type dataSourceNGClient struct {
	cc *grpc.ClientConn
}

func NewDataSourceNGClient(cc *grpc.ClientConn) DataSourceNGClient {
	return &dataSourceNGClient{cc}
}

func (c *dataSourceNGClient) Item(ctx context.Context, in *ItemReq, opts ...grpc.CallOption) (*ItemReply, error) {
	out := new(ItemReply)
	err := c.cc.Invoke(ctx, "/datasource.service.v1.DataSourceNG/Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourceNGServer is the server API for DataSourceNG service.
type DataSourceNGServer interface {
	Item(context.Context, *ItemReq) (*ItemReply, error)
}

func RegisterDataSourceNGServer(s *grpc.Server, srv DataSourceNGServer) {
	s.RegisterService(&_DataSourceNG_serviceDesc, srv)
}

func _DataSourceNG_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourceNGServer).Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datasource.service.v1.DataSourceNG/Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourceNGServer).Item(ctx, req.(*ItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataSourceNG_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datasource.service.v1.DataSourceNG",
	HandlerType: (*DataSourceNGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Item",
			Handler:    _DataSourceNG_Item_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ItemReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ItemUuid)))
		i += copy(dAtA[i:], m.ItemUuid)
	}
	if len(m.TypeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TypeName)))
		i += copy(dAtA[i:], m.TypeName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StructedItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructedItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for k := range m.Item {
			dAtA[i] = 0xa
			i++
			v := m.Item[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ItemReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		nn2, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ItemReply_ValueStruct) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValueStruct != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ValueStruct.Size()))
		n3, err := m.ValueStruct.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ItemReply_ValueRaw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValueRaw != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ValueRaw.Size()))
		n4, err := m.ValueRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *StringList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IntList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		dAtA6 := make([]byte, len(m.List)*10)
		var j5 int
		for _, num1 := range m.List {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoolList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.List)))
		for _, b := range m.List {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FieldValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn7, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FieldValue_ValueString) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(len(m.ValueString)))
	i += copy(dAtA[i:], m.ValueString)
	return i, nil
}
func (m *FieldValue_ValueInt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.ValueInt))
	return i, nil
}
func (m *FieldValue_ValueBool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	if m.ValueBool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *FieldValue_ValueItem) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValueItem != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ValueItem.Size()))
		n8, err := m.ValueItem.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *FieldValue_ValueStringList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValueStringList != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ValueStringList.Size()))
		n9, err := m.ValueStringList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *FieldValue_ValueBoolList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValueBoolList != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ValueBoolList.Size()))
		n10, err := m.ValueBoolList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *FieldValue_ValueIntList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValueIntList != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ValueIntList.Size()))
		n11, err := m.ValueIntList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *FieldValue_ValueItemList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ValueItemList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ValueItemList.Size()))
		n12, err := m.ValueItemList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ItemReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ItemUuid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StructedItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for k, v := range m.Item {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		n += m.Item.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemReply_ValueStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueStruct != nil {
		l = m.ValueStruct.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *ItemReply_ValueRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueRaw != nil {
		l = m.ValueRaw.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *StringList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IntList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		l = 0
		for _, e := range m.List {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		n += 1 + sovApi(uint64(len(m.List))) + len(m.List)*1
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldValue_ValueString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValueString)
	n += 1 + l + sovApi(uint64(l))
	return n
}
func (m *FieldValue_ValueInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovApi(uint64(m.ValueInt))
	return n
}
func (m *FieldValue_ValueBool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *FieldValue_ValueItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueItem != nil {
		l = m.ValueItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FieldValue_ValueStringList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueStringList != nil {
		l = m.ValueStringList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FieldValue_ValueBoolList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueBoolList != nil {
		l = m.ValueBoolList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FieldValue_ValueIntList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueIntList != nil {
		l = m.ValueIntList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}
func (m *FieldValue_ValueItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueItemList != nil {
		l = m.ValueItemList.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ItemReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructedItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructedItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructedItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = make(map[string]*FieldValue)
			}
			var mapkey string
			var mapvalue *FieldValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FieldValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Item[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueStruct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StructedItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ItemReply_ValueStruct{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ItemReply_ValueRaw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ItemReply{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &FieldValue_ValueString{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueInt", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_ValueInt{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueBool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &FieldValue_ValueBool{b}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ItemReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueItem{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueStringList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueStringList{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueBoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BoolList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueBoolList{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueIntList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IntList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueIntList{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ItemList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_ValueItemList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
