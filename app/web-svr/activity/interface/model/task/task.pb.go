// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: task.proto

package task

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Task struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	BusinessID           int64                       `protobuf:"varint,3,opt,name=BusinessID,proto3" json:"business_id"`
	ForeignID            int64                       `protobuf:"varint,4,opt,name=ForeignID,proto3" json:"foreign_id"`
	Rank                 int64                       `protobuf:"varint,5,opt,name=Rank,proto3" json:"rank"`
	FinishCount          int64                       `protobuf:"varint,6,opt,name=FinishCount,proto3" json:"finish_count"`
	Attribute            int64                       `protobuf:"varint,7,opt,name=Attribute,proto3" json:"attribute"`
	CycleDuration        int64                       `protobuf:"varint,8,opt,name=CycleDuration,proto3" json:"cycle_duration"`
	Stime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time `protobuf:"varint,10,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	AwardType            int64                       `protobuf:"varint,11,opt,name=AwardType,proto3" json:"award_type"`
	AwardID              int64                       `protobuf:"varint,12,opt,name=AwardID,proto3" json:"award_id"`
	AwardCount           int64                       `protobuf:"varint,13,opt,name=AwardCount,proto3" json:"award_count"`
	PreTask              string                      `protobuf:"bytes,14,opt,name=PreTask,proto3" json:"pre_task"`
	Level                int64                       `protobuf:"varint,15,opt,name=Level,proto3" json:"level"`
	AwardExpire          int64                       `protobuf:"varint,16,opt,name=AwardExpire,proto3" json:"award_expire"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_cb004ee28fbe7de6, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(dst, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetBusinessID() int64 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *Task) GetForeignID() int64 {
	if m != nil {
		return m.ForeignID
	}
	return 0
}

func (m *Task) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Task) GetFinishCount() int64 {
	if m != nil {
		return m.FinishCount
	}
	return 0
}

func (m *Task) GetAttribute() int64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *Task) GetCycleDuration() int64 {
	if m != nil {
		return m.CycleDuration
	}
	return 0
}

func (m *Task) GetStime() go_common_library_time.Time {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *Task) GetEtime() go_common_library_time.Time {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *Task) GetAwardType() int64 {
	if m != nil {
		return m.AwardType
	}
	return 0
}

func (m *Task) GetAwardID() int64 {
	if m != nil {
		return m.AwardID
	}
	return 0
}

func (m *Task) GetAwardCount() int64 {
	if m != nil {
		return m.AwardCount
	}
	return 0
}

func (m *Task) GetPreTask() string {
	if m != nil {
		return m.PreTask
	}
	return ""
}

func (m *Task) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Task) GetAwardExpire() int64 {
	if m != nil {
		return m.AwardExpire
	}
	return 0
}

type UserTask struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"-"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	BusinessID           int64                       `protobuf:"varint,3,opt,name=BusinessID,proto3" json:"business_id"`
	ForeignID            int64                       `protobuf:"varint,4,opt,name=ForeignID,proto3" json:"foreign_id"`
	TaskID               int64                       `protobuf:"varint,5,opt,name=TaskID,proto3" json:"task_id"`
	Round                int64                       `protobuf:"varint,6,opt,name=Round,proto3" json:"round"`
	Count                int64                       `protobuf:"varint,7,opt,name=Count,proto3" json:"count"`
	Finish               int64                       `protobuf:"varint,8,opt,name=Finish,proto3" json:"finish"`
	Award                int64                       `protobuf:"varint,9,opt,name=Award,proto3" json:"award"`
	Ctime                go_common_library_time.Time `protobuf:"varint,10,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,11,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	RoundCount           int64                       `protobuf:"varint,12,opt,name=RoundCount,proto3" json:"round_count"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserTask) Reset()         { *m = UserTask{} }
func (m *UserTask) String() string { return proto.CompactTextString(m) }
func (*UserTask) ProtoMessage()    {}
func (*UserTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_cb004ee28fbe7de6, []int{1}
}
func (m *UserTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTask.Merge(dst, src)
}
func (m *UserTask) XXX_Size() int {
	return m.Size()
}
func (m *UserTask) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTask.DiscardUnknown(m)
}

var xxx_messageInfo_UserTask proto.InternalMessageInfo

func (m *UserTask) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserTask) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserTask) GetBusinessID() int64 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *UserTask) GetForeignID() int64 {
	if m != nil {
		return m.ForeignID
	}
	return 0
}

func (m *UserTask) GetTaskID() int64 {
	if m != nil {
		return m.TaskID
	}
	return 0
}

func (m *UserTask) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *UserTask) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *UserTask) GetFinish() int64 {
	if m != nil {
		return m.Finish
	}
	return 0
}

func (m *UserTask) GetAward() int64 {
	if m != nil {
		return m.Award
	}
	return 0
}

func (m *UserTask) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *UserTask) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *UserTask) GetRoundCount() int64 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

type UserTaskLog struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	BusinessID           int64                       `protobuf:"varint,3,opt,name=BusinessID,proto3" json:"business_id"`
	ForeignID            int64                       `protobuf:"varint,4,opt,name=ForeignID,proto3" json:"foreign_id"`
	TaskID               int64                       `protobuf:"varint,5,opt,name=TaskID,proto3" json:"task_id"`
	Round                int64                       `protobuf:"varint,6,opt,name=Round,proto3" json:"round"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserTaskLog) Reset()         { *m = UserTaskLog{} }
func (m *UserTaskLog) String() string { return proto.CompactTextString(m) }
func (*UserTaskLog) ProtoMessage()    {}
func (*UserTaskLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_task_cb004ee28fbe7de6, []int{2}
}
func (m *UserTaskLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTaskLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTaskLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserTaskLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTaskLog.Merge(dst, src)
}
func (m *UserTaskLog) XXX_Size() int {
	return m.Size()
}
func (m *UserTaskLog) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTaskLog.DiscardUnknown(m)
}

var xxx_messageInfo_UserTaskLog proto.InternalMessageInfo

func (m *UserTaskLog) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserTaskLog) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserTaskLog) GetBusinessID() int64 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *UserTaskLog) GetForeignID() int64 {
	if m != nil {
		return m.ForeignID
	}
	return 0
}

func (m *UserTaskLog) GetTaskID() int64 {
	if m != nil {
		return m.TaskID
	}
	return 0
}

func (m *UserTaskLog) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *UserTaskLog) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func init() {
	proto.RegisterType((*Task)(nil), "activity.service.Task")
	proto.RegisterType((*UserTask)(nil), "activity.service.UserTask")
	proto.RegisterType((*UserTaskLog)(nil), "activity.service.UserTaskLog")
}
func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.BusinessID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ForeignID))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Rank))
	}
	if m.FinishCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.FinishCount))
	}
	if m.Attribute != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Attribute))
	}
	if m.CycleDuration != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CycleDuration))
	}
	if m.Stime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Stime))
	}
	if m.Etime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Etime))
	}
	if m.AwardType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AwardType))
	}
	if m.AwardID != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AwardID))
	}
	if m.AwardCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AwardCount))
	}
	if len(m.PreTask) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.PreTask)))
		i += copy(dAtA[i:], m.PreTask)
	}
	if m.Level != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Level))
	}
	if m.AwardExpire != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AwardExpire))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Mid))
	}
	if m.BusinessID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ForeignID))
	}
	if m.TaskID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TaskID))
	}
	if m.Round != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Round))
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Count))
	}
	if m.Finish != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Finish))
	}
	if m.Award != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Award))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Mtime))
	}
	if m.RoundCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.RoundCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserTaskLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTaskLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Mid))
	}
	if m.BusinessID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ForeignID))
	}
	if m.TaskID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TaskID))
	}
	if m.Round != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Round))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTask(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.BusinessID != 0 {
		n += 1 + sovTask(uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		n += 1 + sovTask(uint64(m.ForeignID))
	}
	if m.Rank != 0 {
		n += 1 + sovTask(uint64(m.Rank))
	}
	if m.FinishCount != 0 {
		n += 1 + sovTask(uint64(m.FinishCount))
	}
	if m.Attribute != 0 {
		n += 1 + sovTask(uint64(m.Attribute))
	}
	if m.CycleDuration != 0 {
		n += 1 + sovTask(uint64(m.CycleDuration))
	}
	if m.Stime != 0 {
		n += 1 + sovTask(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovTask(uint64(m.Etime))
	}
	if m.AwardType != 0 {
		n += 1 + sovTask(uint64(m.AwardType))
	}
	if m.AwardID != 0 {
		n += 1 + sovTask(uint64(m.AwardID))
	}
	if m.AwardCount != 0 {
		n += 1 + sovTask(uint64(m.AwardCount))
	}
	l = len(m.PreTask)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovTask(uint64(m.Level))
	}
	if m.AwardExpire != 0 {
		n += 2 + sovTask(uint64(m.AwardExpire))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTask(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovTask(uint64(m.Mid))
	}
	if m.BusinessID != 0 {
		n += 1 + sovTask(uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		n += 1 + sovTask(uint64(m.ForeignID))
	}
	if m.TaskID != 0 {
		n += 1 + sovTask(uint64(m.TaskID))
	}
	if m.Round != 0 {
		n += 1 + sovTask(uint64(m.Round))
	}
	if m.Count != 0 {
		n += 1 + sovTask(uint64(m.Count))
	}
	if m.Finish != 0 {
		n += 1 + sovTask(uint64(m.Finish))
	}
	if m.Award != 0 {
		n += 1 + sovTask(uint64(m.Award))
	}
	if m.Ctime != 0 {
		n += 1 + sovTask(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovTask(uint64(m.Mtime))
	}
	if m.RoundCount != 0 {
		n += 1 + sovTask(uint64(m.RoundCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTaskLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTask(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovTask(uint64(m.Mid))
	}
	if m.BusinessID != 0 {
		n += 1 + sovTask(uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		n += 1 + sovTask(uint64(m.ForeignID))
	}
	if m.TaskID != 0 {
		n += 1 + sovTask(uint64(m.TaskID))
	}
	if m.Round != 0 {
		n += 1 + sovTask(uint64(m.Round))
	}
	if m.Ctime != 0 {
		n += 1 + sovTask(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishCount", wireType)
			}
			m.FinishCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CycleDuration", wireType)
			}
			m.CycleDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CycleDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardType", wireType)
			}
			m.AwardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardID", wireType)
			}
			m.AwardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardCount", wireType)
			}
			m.AwardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreTask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreTask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardExpire", wireType)
			}
			m.AwardExpire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardExpire |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			m.TaskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finish", wireType)
			}
			m.Finish = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Finish |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Award", wireType)
			}
			m.Award = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Award |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundCount", wireType)
			}
			m.RoundCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTaskLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTaskLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTaskLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			m.TaskID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("task.proto", fileDescriptor_task_cb004ee28fbe7de6) }

var fileDescriptor_task_cb004ee28fbe7de6 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x4d, 0x6b, 0xdb, 0x4a,
	0x14, 0x45, 0xfe, 0xf6, 0xd8, 0xf9, 0x60, 0xe0, 0x3d, 0xe6, 0xbd, 0x96, 0x4c, 0x70, 0xa1, 0x04,
	0xda, 0xd8, 0xd0, 0x6e, 0xba, 0x2a, 0xc4, 0x56, 0x02, 0x86, 0xa4, 0x94, 0x69, 0xba, 0xe9, 0xc6,
	0xc8, 0xd2, 0xc4, 0x19, 0x6c, 0x49, 0x66, 0x24, 0xa5, 0xf5, 0x0f, 0xea, 0x7f, 0xe9, 0xb2, 0xcb,
	0xae, 0x86, 0x92, 0xa5, 0x7e, 0x41, 0xe9, 0xaa, 0xdc, 0x3b, 0x52, 0xe5, 0x16, 0x0a, 0xa1, 0xd0,
	0x45, 0x77, 0xd2, 0xb9, 0xe7, 0xdc, 0xf1, 0x9c, 0x73, 0x6c, 0x13, 0x92, 0x7a, 0xc9, 0x72, 0xb8,
	0xd6, 0x71, 0x1a, 0xd3, 0x7d, 0xcf, 0x4f, 0xd5, 0x8d, 0x4a, 0x37, 0xc3, 0x44, 0xea, 0x1b, 0xe5,
	0xcb, 0xff, 0x8f, 0x17, 0x2a, 0xbd, 0xce, 0xe6, 0x43, 0x3f, 0x0e, 0x47, 0x8b, 0x78, 0x11, 0x8f,
	0x90, 0x38, 0xcf, 0xae, 0xf0, 0x0d, 0x5f, 0xf0, 0xc9, 0x2e, 0x18, 0x7c, 0x6a, 0x92, 0xc6, 0xa5,
	0x97, 0x2c, 0xe9, 0xbf, 0xa4, 0x36, 0x75, 0x99, 0x73, 0xe8, 0x1c, 0xd5, 0xc7, 0xad, 0xdc, 0xf0,
	0x9a, 0x0a, 0x44, 0x6d, 0xea, 0xd2, 0xfb, 0xa4, 0xf1, 0xc2, 0x0b, 0x25, 0xab, 0x1d, 0x3a, 0x47,
	0xdd, 0x71, 0x27, 0x37, 0xbc, 0x11, 0x79, 0xa1, 0x14, 0x88, 0xd2, 0x11, 0x21, 0xe3, 0x2c, 0x51,
	0x91, 0x4c, 0x92, 0xa9, 0xcb, 0xea, 0xa8, 0xde, 0xcb, 0x0d, 0xef, 0xcd, 0x0b, 0x74, 0xa6, 0x02,
	0xb1, 0x45, 0xa1, 0x8f, 0x49, 0xf7, 0x2c, 0xd6, 0x52, 0x2d, 0xa2, 0xa9, 0xcb, 0x1a, 0xc8, 0xdf,
	0xcd, 0x0d, 0x27, 0x57, 0x16, 0x04, 0x7a, 0x45, 0x80, 0xc3, 0x85, 0x17, 0x2d, 0x59, 0x13, 0x89,
	0x78, 0xb8, 0xf6, 0xa2, 0xa5, 0x40, 0x94, 0x3e, 0x21, 0xbd, 0x33, 0x15, 0xa9, 0xe4, 0x7a, 0x12,
	0x67, 0x51, 0xca, 0x5a, 0x48, 0xda, 0xcf, 0x0d, 0xef, 0x5f, 0x21, 0x3c, 0xf3, 0x01, 0x17, 0xdb,
	0x24, 0xfa, 0x88, 0x74, 0x4f, 0xd2, 0x54, 0xab, 0x79, 0x96, 0x4a, 0xd6, 0x46, 0xc5, 0x4e, 0x6e,
	0x78, 0xd7, 0x2b, 0x41, 0x51, 0xcd, 0xe9, 0x33, 0xb2, 0x33, 0xd9, 0xf8, 0x2b, 0xe9, 0x66, 0xda,
	0x4b, 0x55, 0x1c, 0xb1, 0x0e, 0x0a, 0x68, 0x6e, 0xf8, 0xae, 0x0f, 0x83, 0x59, 0x50, 0x4c, 0xc4,
	0x8f, 0x44, 0xfa, 0x9c, 0x34, 0x5f, 0xa5, 0x2a, 0x94, 0xac, 0x8b, 0x8a, 0xa3, 0xdc, 0xf0, 0x66,
	0x02, 0xc0, 0x57, 0xc3, 0xef, 0x2d, 0xe2, 0x63, 0x3f, 0x0e, 0xc3, 0x38, 0x1a, 0xad, 0xd4, 0x5c,
	0x7b, 0x7a, 0x33, 0x82, 0xc9, 0xf0, 0x52, 0x85, 0x52, 0x58, 0x19, 0xe8, 0x4f, 0x51, 0x4f, 0x2a,
	0xbd, 0xbc, 0x93, 0x1e, 0x65, 0x60, 0xf3, 0xc9, 0x5b, 0x4f, 0x07, 0x97, 0x9b, 0xb5, 0x64, 0xbd,
	0xca, 0x66, 0x0f, 0xc0, 0x59, 0xba, 0x59, 0xc3, 0x3d, 0x4b, 0x02, 0x7d, 0x48, 0xda, 0xf8, 0x32,
	0x75, 0x59, 0x1f, 0xb9, 0xfd, 0xdc, 0xf0, 0x8e, 0xe5, 0xaa, 0x40, 0x94, 0x43, 0x48, 0x1b, 0x1f,
	0xad, 0xdf, 0x3b, 0x55, 0xda, 0x96, 0x6a, 0xed, 0xde, 0xa2, 0xc0, 0xe2, 0x97, 0x5a, 0x42, 0xbf,
	0xd8, 0x2e, 0xf6, 0x07, 0x17, 0xaf, 0xb5, 0x9c, 0x41, 0x87, 0x45, 0x39, 0xa4, 0x9c, 0x34, 0xcf,
	0xe5, 0x8d, 0x5c, 0xb1, 0x3d, 0xdc, 0xd9, 0x85, 0xeb, 0xae, 0x00, 0x10, 0x16, 0x87, 0xa8, 0x71,
	0xed, 0xe9, 0xbb, 0xb5, 0xd2, 0x92, 0xed, 0x57, 0x51, 0xdb, 0xa3, 0x25, 0xe2, 0x62, 0x9b, 0x34,
	0xf8, 0x52, 0x27, 0x9d, 0xd7, 0x89, 0xd4, 0x78, 0xc2, 0x3f, 0x5b, 0xf5, 0x6e, 0xe6, 0x86, 0x3b,
	0xc7, 0xd8, 0xee, 0xff, 0x48, 0xfd, 0x42, 0x05, 0x58, 0xee, 0xfa, 0xb8, 0x9d, 0x1b, 0x5e, 0x0f,
	0x55, 0x20, 0x00, 0xfb, 0xd3, 0xd5, 0x7e, 0x40, 0x5a, 0xf0, 0xc1, 0xa6, 0x6e, 0x51, 0xee, 0x5e,
	0x6e, 0x78, 0x1b, 0x5c, 0x01, 0x5e, 0x31, 0x02, 0x5f, 0x44, 0x9c, 0x45, 0x41, 0xd1, 0x6d, 0xf4,
	0x45, 0x03, 0x20, 0x2c, 0x0e, 0x04, 0x1b, 0x46, 0xbb, 0x22, 0xd8, 0x18, 0x2c, 0x4e, 0x07, 0xa4,
	0x65, 0xeb, 0x5f, 0x74, 0x97, 0xe4, 0x86, 0xb7, 0xec, 0xd7, 0x43, 0x14, 0x13, 0x58, 0x82, 0xbe,
	0x15, 0x65, 0xc5, 0x25, 0x68, 0xab, 0xb0, 0x38, 0xb4, 0x71, 0xf2, 0x73, 0x1b, 0xfd, 0x3b, 0xb5,
	0x71, 0x52, 0xb6, 0xf9, 0x02, 0xf5, 0xbd, 0x4a, 0x1f, 0xde, 0x49, 0x8f, 0x32, 0x88, 0x02, 0xaf,
	0x6b, 0xaf, 0xda, 0xaf, 0xa2, 0x40, 0x2f, 0xca, 0xde, 0x55, 0x94, 0xc1, 0xfb, 0x1a, 0xe9, 0x95,
	0xd1, 0x9f, 0xc7, 0x8b, 0x5f, 0xfe, 0xb8, 0xfd, 0xed, 0xf1, 0x7f, 0x0f, 0xa6, 0xfd, 0x5b, 0xc1,
	0x8c, 0xe9, 0x87, 0xdb, 0x03, 0xe7, 0xe3, 0xed, 0x81, 0xf3, 0xf9, 0xf6, 0xc0, 0x79, 0xd3, 0x80,
	0xf3, 0xe7, 0x2d, 0xfc, 0x63, 0x78, 0xfa, 0x2d, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xb6, 0x93, 0x0a,
	0x67, 0x06, 0x00, 0x00,
}
