// Code generated by kratos tool redisgen. DO NOT EDIT.

/*
  Package binlog is a generated redis cache package.
  It is generated from:
  type _redis interface {
		// redis: -key=whiteListByMidKey -expire=d.cfg.WhiteListByMidExpire -check_null_code=$!=nil&&$.ID==-1 -null_expire=d.cfg.WhiteListByMidNullExpire
		AddCacheWhiteListByMid(c context.Context, mid int64, data *model.WhiteList) error
		// redis: -key=whiteListByMidKey
		DelCacheWhiteListByMid(c context.Context, mid int64) error
		// redis: -key=userSpaceByMidKey
		DelCacheUserSpaceByMid(c context.Context, mid int64) error
	}
*/

package binlog

import (
	"context"
	"encoding/json"

	"go-common/library/cache/redis"
	"go-common/library/log"

	"go-gateway/app/web-svr/native-page/job/internal/model"
)

var _ _redis

// AddCacheWhiteListByMid Set data to redis
func (d *Dao) AddCacheWhiteListByMid(c context.Context, id int64, val *model.WhiteList) (err error) {
	if val == nil {
		return
	}
	key := whiteListByMidKey(id)
	var bs []byte
	bs, err = json.Marshal(val)
	if err != nil {
		log.Errorc(c, "d.AddCacheWhiteListByMid(get key: %v) err: %+v", key, err)
		return
	}
	expire := d.cfg.WhiteListByMidExpire
	if val != nil && val.ID == -1 {
		expire = d.cfg.WhiteListByMidNullExpire
	}
	if _, err = d.redis.Do(c, "set", key, bs, "EX", expire); err != nil {
		log.Errorc(c, "d.AddCacheWhiteListByMid(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// DelCacheWhiteListByMid delete data from redis
func (d *Dao) DelCacheWhiteListByMid(c context.Context, id int64) (err error) {
	key := whiteListByMidKey(id)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheWhiteListByMid(get key: %v) err: %+v", key, err)
		return
	}
	return
}

// DelCacheUserSpaceByMid delete data from redis
func (d *Dao) DelCacheUserSpaceByMid(c context.Context, id int64) (err error) {
	key := userSpaceByMidKey(id)
	if _, err = d.redis.Do(c, "del", key); err != nil {
		if err == redis.ErrNil {
			err = nil
			return
		}
		log.Errorc(c, "d.DelCacheUserSpaceByMid(get key: %v) err: %+v", key, err)
		return
	}
	return
}
