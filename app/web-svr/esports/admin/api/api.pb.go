// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreatePosterReq struct {
	// 配置人员
	CreatedBy string `protobuf:"bytes,1,opt,name=createdBy,json=created_by,proto3" json:"created_by"`
	// 海报背景
	BgImage string `protobuf:"bytes,4,opt,name=bgImage,json=bg_image,proto3" json:"bg_image"`
	// 关联赛事id
	ContestID int64 `protobuf:"varint,5,opt,name=contestID,json=contest_id,proto3" json:"contest_id"`
	// 展现顺位
	Order                int32    `protobuf:"varint,6,opt,name=order,json=position_order,proto3" json:"position_order"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePosterReq) Reset()         { *m = CreatePosterReq{} }
func (m *CreatePosterReq) String() string { return proto.CompactTextString(m) }
func (*CreatePosterReq) ProtoMessage()    {}
func (*CreatePosterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CreatePosterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePosterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePosterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePosterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePosterReq.Merge(m, src)
}
func (m *CreatePosterReq) XXX_Size() int {
	return m.Size()
}
func (m *CreatePosterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePosterReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePosterReq proto.InternalMessageInfo

type EditPosterReq struct {
	// 配置人员
	CreatedBy string `protobuf:"bytes,1,opt,name=createdBy,json=created_by,proto3" json:"created_by"`
	// 海报背景
	BgImage string `protobuf:"bytes,4,opt,name=bgImage,json=bg_image,proto3" json:"bg_image"`
	// 关联赛事id
	ContestID int64 `protobuf:"varint,5,opt,name=contestID,json=contest_id,proto3" json:"contest_id"`
	// 展现顺位
	Order int32 `protobuf:"varint,6,opt,name=order,json=position_order,proto3" json:"position_order"`
	// 海报ID
	Id                   int64    `protobuf:"varint,7,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditPosterReq) Reset()         { *m = EditPosterReq{} }
func (m *EditPosterReq) String() string { return proto.CompactTextString(m) }
func (*EditPosterReq) ProtoMessage()    {}
func (*EditPosterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *EditPosterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditPosterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditPosterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditPosterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditPosterReq.Merge(m, src)
}
func (m *EditPosterReq) XXX_Size() int {
	return m.Size()
}
func (m *EditPosterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EditPosterReq.DiscardUnknown(m)
}

var xxx_messageInfo_EditPosterReq proto.InternalMessageInfo

type CenterPosterReq struct {
	// 海报id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 定位状态
	IsCenteral           int32    `protobuf:"varint,2,opt,name=isCenteral,json=is_centeral,proto3" json:"is_centeral"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CenterPosterReq) Reset()         { *m = CenterPosterReq{} }
func (m *CenterPosterReq) String() string { return proto.CompactTextString(m) }
func (*CenterPosterReq) ProtoMessage()    {}
func (*CenterPosterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *CenterPosterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CenterPosterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CenterPosterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CenterPosterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CenterPosterReq.Merge(m, src)
}
func (m *CenterPosterReq) XXX_Size() int {
	return m.Size()
}
func (m *CenterPosterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CenterPosterReq.DiscardUnknown(m)
}

var xxx_messageInfo_CenterPosterReq proto.InternalMessageInfo

type TogglePosterReq struct {
	// 海报id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 在线状态
	OnlineStatus         int32    `protobuf:"varint,2,opt,name=onlineStatus,json=online_status,proto3" json:"online_status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TogglePosterReq) Reset()         { *m = TogglePosterReq{} }
func (m *TogglePosterReq) String() string { return proto.CompactTextString(m) }
func (*TogglePosterReq) ProtoMessage()    {}
func (*TogglePosterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *TogglePosterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TogglePosterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TogglePosterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TogglePosterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TogglePosterReq.Merge(m, src)
}
func (m *TogglePosterReq) XXX_Size() int {
	return m.Size()
}
func (m *TogglePosterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TogglePosterReq.DiscardUnknown(m)
}

var xxx_messageInfo_TogglePosterReq proto.InternalMessageInfo

type DeletePosterReq struct {
	// 海报id
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePosterReq) Reset()         { *m = DeletePosterReq{} }
func (m *DeletePosterReq) String() string { return proto.CompactTextString(m) }
func (*DeletePosterReq) ProtoMessage()    {}
func (*DeletePosterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *DeletePosterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePosterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePosterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePosterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePosterReq.Merge(m, src)
}
func (m *DeletePosterReq) XXX_Size() int {
	return m.Size()
}
func (m *DeletePosterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePosterReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePosterReq proto.InternalMessageInfo

type GetPosterListReq struct {
	PageNum              int32    `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty" form:"pn"`
	PageSize             int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty" form:"ps"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPosterListReq) Reset()         { *m = GetPosterListReq{} }
func (m *GetPosterListReq) String() string { return proto.CompactTextString(m) }
func (*GetPosterListReq) ProtoMessage()    {}
func (*GetPosterListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GetPosterListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPosterListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPosterListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPosterListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPosterListReq.Merge(m, src)
}
func (m *GetPosterListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPosterListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPosterListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPosterListReq proto.InternalMessageInfo

type GetPosterListRep struct {
	Page                 *PosterPager `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	Items                []*Poster    `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetPosterListRep) Reset()         { *m = GetPosterListRep{} }
func (m *GetPosterListRep) String() string { return proto.CompactTextString(m) }
func (*GetPosterListRep) ProtoMessage()    {}
func (*GetPosterListRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *GetPosterListRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPosterListRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPosterListRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPosterListRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPosterListRep.Merge(m, src)
}
func (m *GetPosterListRep) XXX_Size() int {
	return m.Size()
}
func (m *GetPosterListRep) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPosterListRep.DiscardUnknown(m)
}

var xxx_messageInfo_GetPosterListRep proto.InternalMessageInfo

// 分页结果
type PosterPager struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	PageNum              int32    `protobuf:"varint,2,opt,name=pageNum,proto3" json:"num"`
	PageSize             int32    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PosterPager) Reset()         { *m = PosterPager{} }
func (m *PosterPager) String() string { return proto.CompactTextString(m) }
func (*PosterPager) ProtoMessage()    {}
func (*PosterPager) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *PosterPager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PosterPager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PosterPager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PosterPager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PosterPager.Merge(m, src)
}
func (m *PosterPager) XXX_Size() int {
	return m.Size()
}
func (m *PosterPager) XXX_DiscardUnknown() {
	xxx_messageInfo_PosterPager.DiscardUnknown(m)
}

var xxx_messageInfo_PosterPager proto.InternalMessageInfo

type GetEffectivePosterListRep struct {
	Items                []*EffectivePoster `protobuf:"bytes,1,rep,name=items,proto3" json:"items"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetEffectivePosterListRep) Reset()         { *m = GetEffectivePosterListRep{} }
func (m *GetEffectivePosterListRep) String() string { return proto.CompactTextString(m) }
func (*GetEffectivePosterListRep) ProtoMessage()    {}
func (*GetEffectivePosterListRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *GetEffectivePosterListRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEffectivePosterListRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEffectivePosterListRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEffectivePosterListRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEffectivePosterListRep.Merge(m, src)
}
func (m *GetEffectivePosterListRep) XXX_Size() int {
	return m.Size()
}
func (m *GetEffectivePosterListRep) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEffectivePosterListRep.DiscardUnknown(m)
}

var xxx_messageInfo_GetEffectivePosterListRep proto.InternalMessageInfo

type Poster struct {
	// 海报ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 海报背景
	BgImage string `protobuf:"bytes,4,opt,name=bgImage,json=bg_image,proto3" json:"bg_image"`
	// 关联赛事id
	ContestID int64 `protobuf:"varint,5,opt,name=contestID,json=contest_id,proto3" json:"contest_id"`
	// 是否起效
	OnlineStatus int32 `protobuf:"varint,6,opt,name=OnlineStatus,json=online_status,proto3" json:"online_status"`
	// 是否被定位
	IsCenteral int32 `protobuf:"varint,7,opt,name=IsCenteral,json=is_centeral,proto3" json:"is_centeral"`
	// 展现顺位
	Order int32 `protobuf:"varint,8,opt,name=order,json=position_order,proto3" json:"position_order"`
	// 配置人员
	CreatedBy string `protobuf:"bytes,9,opt,name=createdBy,json=created_by,proto3" json:"created_by"`
	// 创建时间
	Ctime                int64    `protobuf:"varint,10,opt,name=ctime,proto3" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Poster) Reset()         { *m = Poster{} }
func (m *Poster) String() string { return proto.CompactTextString(m) }
func (*Poster) ProtoMessage()    {}
func (*Poster) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *Poster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Poster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Poster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Poster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poster.Merge(m, src)
}
func (m *Poster) XXX_Size() int {
	return m.Size()
}
func (m *Poster) XXX_DiscardUnknown() {
	xxx_messageInfo_Poster.DiscardUnknown(m)
}

var xxx_messageInfo_Poster proto.InternalMessageInfo

type EffectivePoster struct {
	// 海报ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 海报背景
	BgImage string `protobuf:"bytes,4,opt,name=bgImage,json=bg_image,proto3" json:"bg_image"`
	// 关联赛事id
	ContestID int64 `protobuf:"varint,5,opt,name=contestID,json=contest_id,proto3" json:"contest_id"`
	// 是否被定位
	IsCenteral int32 `protobuf:"varint,6,opt,name=IsCenteral,json=is_centeral,proto3" json:"is_centeral"`
	// 展现顺位
	Order int32 `protobuf:"varint,7,opt,name=order,json=position_order,proto3" json:"position_order"`
	// 创建时间
	Ctime                int64    `protobuf:"varint,8,opt,name=ctime,proto3" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EffectivePoster) Reset()         { *m = EffectivePoster{} }
func (m *EffectivePoster) String() string { return proto.CompactTextString(m) }
func (*EffectivePoster) ProtoMessage()    {}
func (*EffectivePoster) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *EffectivePoster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectivePoster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectivePoster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectivePoster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectivePoster.Merge(m, src)
}
func (m *EffectivePoster) XXX_Size() int {
	return m.Size()
}
func (m *EffectivePoster) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectivePoster.DiscardUnknown(m)
}

var xxx_messageInfo_EffectivePoster proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreatePosterReq)(nil), "esports.admin.v1.CreatePosterReq")
	proto.RegisterType((*EditPosterReq)(nil), "esports.admin.v1.EditPosterReq")
	proto.RegisterType((*CenterPosterReq)(nil), "esports.admin.v1.CenterPosterReq")
	proto.RegisterType((*TogglePosterReq)(nil), "esports.admin.v1.TogglePosterReq")
	proto.RegisterType((*DeletePosterReq)(nil), "esports.admin.v1.DeletePosterReq")
	proto.RegisterType((*GetPosterListReq)(nil), "esports.admin.v1.GetPosterListReq")
	proto.RegisterType((*GetPosterListRep)(nil), "esports.admin.v1.GetPosterListRep")
	proto.RegisterType((*PosterPager)(nil), "esports.admin.v1.PosterPager")
	proto.RegisterType((*GetEffectivePosterListRep)(nil), "esports.admin.v1.GetEffectivePosterListRep")
	proto.RegisterType((*Poster)(nil), "esports.admin.v1.Poster")
	proto.RegisterType((*EffectivePoster)(nil), "esports.admin.v1.EffectivePoster")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0x6f, 0x6b, 0xd3, 0x40,
	0x18, 0x37, 0xed, 0xfa, 0xef, 0x69, 0xbb, 0xce, 0x03, 0x47, 0xac, 0xd8, 0x6c, 0x41, 0x58, 0x87,
	0x2c, 0x73, 0x13, 0x06, 0xea, 0x2b, 0xb3, 0x95, 0x51, 0x10, 0x1d, 0x99, 0x20, 0x28, 0x52, 0xd2,
	0xe6, 0x1a, 0x0f, 0x9a, 0x5c, 0x4c, 0xae, 0x93, 0xed, 0x0b, 0x08, 0x7e, 0x23, 0xbf, 0xc1, 0xc0,
	0x37, 0x7e, 0x82, 0xe0, 0x06, 0xbe, 0xc9, 0x4b, 0x3f, 0x81, 0xe4, 0xd2, 0x2d, 0x69, 0x96, 0xae,
	0xf3, 0x85, 0xbe, 0xf0, 0x4d, 0x73, 0xf7, 0xdc, 0xef, 0x7e, 0x77, 0xcf, 0xaf, 0xf7, 0xfc, 0x1e,
	0xa8, 0xe8, 0x0e, 0x51, 0x1c, 0x97, 0x32, 0x8a, 0x96, 0xb0, 0xe7, 0x50, 0x97, 0x79, 0x8a, 0x6e,
	0x58, 0xc4, 0x56, 0x8e, 0xb6, 0x9a, 0x1b, 0x26, 0x61, 0x1f, 0xc6, 0x7d, 0x65, 0x40, 0xad, 0x4d,
	0x93, 0x9a, 0x74, 0x93, 0x03, 0xfb, 0xe3, 0x21, 0x9f, 0xf1, 0x09, 0x1f, 0x45, 0x04, 0xcd, 0x7b,
	0x26, 0xa5, 0xe6, 0x08, 0xc7, 0x28, 0x6c, 0x39, 0xec, 0x38, 0x5a, 0x94, 0xbf, 0x09, 0xd0, 0xd8,
	0x75, 0xb1, 0xce, 0xf0, 0x01, 0xf5, 0x18, 0x76, 0x35, 0xfc, 0x11, 0x6d, 0x40, 0x65, 0xc0, 0x43,
	0x86, 0x7a, 0x2c, 0x0a, 0x2b, 0x42, 0xbb, 0xa2, 0x2e, 0x06, 0xbe, 0x04, 0x93, 0x60, 0xaf, 0x7f,
	0xac, 0x25, 0xc6, 0x68, 0x0d, 0x4a, 0x7d, 0xb3, 0x6b, 0xe9, 0x26, 0x16, 0x17, 0x38, 0xb8, 0x16,
	0xf8, 0x52, 0xb9, 0x6f, 0xf6, 0x48, 0x18, 0xd3, 0x2e, 0x47, 0x9c, 0x97, 0xda, 0x0c, 0x7b, 0xac,
	0xbb, 0x27, 0x16, 0x56, 0x84, 0x76, 0x7e, 0xc2, 0x1b, 0x05, 0x7b, 0xc4, 0xd0, 0x12, 0x63, 0xb4,
	0x05, 0x05, 0xea, 0x1a, 0xd8, 0x15, 0x8b, 0x2b, 0x42, 0xbb, 0xa0, 0xa2, 0xc0, 0x97, 0x16, 0x1d,
	0xea, 0x11, 0x46, 0xa8, 0xdd, 0xe3, 0x2b, 0x5a, 0x6a, 0x2e, 0x9f, 0x09, 0x50, 0xef, 0x18, 0x84,
	0xfd, 0x07, 0xb9, 0xa0, 0x65, 0xc8, 0x11, 0x43, 0x2c, 0x71, 0xea, 0x62, 0xe0, 0x4b, 0x39, 0x62,
	0x68, 0x39, 0x62, 0xc8, 0xef, 0xa0, 0xb1, 0x8b, 0x6d, 0x86, 0xdd, 0x38, 0xc9, 0x08, 0x2a, 0xa4,
	0xa1, 0xe8, 0x11, 0x00, 0xf1, 0x22, 0xb0, 0x3e, 0x12, 0x73, 0xfc, 0xe8, 0x46, 0xe0, 0x4b, 0x55,
	0xe2, 0xf5, 0x06, 0x93, 0xb0, 0x96, 0x9c, 0xc8, 0x3a, 0x34, 0x5e, 0x53, 0xd3, 0x1c, 0xe1, 0xf9,
	0xe4, 0x3b, 0x50, 0xa3, 0xf6, 0x88, 0xd8, 0xf8, 0x90, 0xe9, 0x6c, 0xec, 0x4d, 0xe8, 0x6f, 0x07,
	0xbe, 0x54, 0x8f, 0xe2, 0x3d, 0x8f, 0x2f, 0x68, 0xd3, 0x53, 0x79, 0x1d, 0x1a, 0x7b, 0x78, 0x84,
	0xd9, 0xfc, 0x23, 0xe4, 0x21, 0x2c, 0xed, 0xe3, 0xc9, 0x9f, 0xf9, 0x82, 0x78, 0x2c, 0xc4, 0xae,
	0x41, 0xc9, 0xd1, 0x4d, 0xfc, 0x72, 0x6c, 0xf1, 0x0d, 0x05, 0xb5, 0xfe, 0xcb, 0x97, 0x2a, 0x43,
	0xea, 0x5a, 0x4f, 0x65, 0xc7, 0x96, 0xb5, 0x8b, 0x55, 0xb4, 0x0e, 0xe5, 0x70, 0x78, 0x48, 0x4e,
	0xf0, 0xe4, 0x6e, 0x49, 0xa4, 0x27, 0x6b, 0x97, 0xcb, 0xf2, 0x17, 0xe1, 0xca, 0x41, 0x0e, 0x7a,
	0x06, 0x0b, 0x21, 0x80, 0x9f, 0x52, 0xdd, 0xbe, 0xaf, 0xa4, 0xcb, 0x50, 0x89, 0xe0, 0x07, 0xba,
	0x89, 0x5d, 0xb5, 0x1c, 0xf8, 0x12, 0x87, 0x6b, 0xfc, 0x17, 0x3d, 0x81, 0x02, 0x61, 0xd8, 0x0a,
	0x55, 0xc9, 0xb7, 0xab, 0xdb, 0xe2, 0xac, 0xdd, 0x6a, 0x25, 0xf0, 0xa5, 0x08, 0xaa, 0x45, 0x1f,
	0xf9, 0x13, 0x54, 0x13, 0xcc, 0x48, 0x82, 0x02, 0xa3, 0x4c, 0x1f, 0x4d, 0xb2, 0xe5, 0x78, 0x1e,
	0xd0, 0xa2, 0x0f, 0x5a, 0x8d, 0x05, 0x89, 0xd2, 0x2c, 0x05, 0xbe, 0x94, 0xb7, 0xc7, 0x56, 0x2c,
	0xc5, 0x83, 0x84, 0x14, 0x79, 0x8e, 0xe1, 0xf7, 0xf5, 0xc8, 0x09, 0x4e, 0xa8, 0xd0, 0x83, 0xbb,
	0xfb, 0x98, 0x75, 0x86, 0x43, 0x3c, 0x60, 0xe4, 0x08, 0x4f, 0xab, 0xa1, 0x5e, 0x24, 0x24, 0xf0,
	0x84, 0x56, 0xaf, 0x26, 0x94, 0xda, 0x98, 0x91, 0xd9, 0xcf, 0x1c, 0x14, 0xa3, 0xc5, 0x99, 0x8f,
	0xea, 0x6f, 0xd5, 0xdf, 0x0e, 0xd4, 0x5e, 0x25, 0x1f, 0x6b, 0xf1, 0x66, 0x8f, 0x35, 0xac, 0xa0,
	0x6e, 0x5c, 0x41, 0xa5, 0xf9, 0x15, 0x14, 0x57, 0x7a, 0xf9, 0xc6, 0x95, 0x3e, 0xe5, 0x51, 0x95,
	0xb9, 0x1e, 0x25, 0x41, 0x61, 0xc0, 0x88, 0x85, 0x45, 0xe0, 0x69, 0x73, 0x9d, 0x79, 0x40, 0x8b,
	0x3e, 0xf2, 0xe7, 0x1c, 0x34, 0x52, 0xff, 0xc6, 0x3f, 0x17, 0x7c, 0x5a, 0xb8, 0xe2, 0x9f, 0x08,
	0x57, 0xba, 0xb1, 0x70, 0x97, 0x4a, 0x94, 0xb3, 0x95, 0xd8, 0xfe, 0xba, 0x00, 0xb5, 0xce, 0x21,
	0x7f, 0xa8, 0xcf, 0xc3, 0x77, 0x8a, 0xba, 0x50, 0x4b, 0x76, 0x3b, 0x94, 0xf1, 0x8e, 0x53, 0xdd,
	0xb0, 0xb9, 0xac, 0x44, 0xfd, 0x53, 0xb9, 0xe8, 0x9f, 0x4a, 0x27, 0xec, 0x9f, 0xa8, 0x03, 0x10,
	0xb7, 0x1a, 0x24, 0x65, 0x14, 0x44, 0xb2, 0x11, 0xcd, 0xa4, 0x09, 0x6f, 0x94, 0xb0, 0xf3, 0xcc,
	0x1b, 0x4d, 0xdb, 0xfd, 0x75, 0x54, 0x49, 0xf3, 0xce, 0xa2, 0x4a, 0x99, 0xfb, 0x75, 0x54, 0x49,
	0x93, 0xce, 0xa2, 0x4a, 0x99, 0xf8, 0x4c, 0xaa, 0x37, 0x50, 0x9f, 0xf2, 0x56, 0x24, 0x5f, 0xe5,
	0x4a, 0xbb, 0x7c, 0x73, 0x3e, 0xc6, 0x41, 0xef, 0x61, 0x39, 0xdb, 0xaf, 0xd0, 0x8c, 0xab, 0x34,
	0x1f, 0x66, 0xb2, 0x66, 0x3b, 0x9e, 0x7a, 0xe7, 0xf4, 0xac, 0x75, 0xeb, 0xf4, 0xbc, 0x25, 0x7c,
	0x3f, 0x6f, 0x09, 0x3f, 0xce, 0x5b, 0xc2, 0xdb, 0xbc, 0xee, 0x90, 0x7e, 0x91, 0x73, 0x3e, 0xfe,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x93, 0x94, 0xdf, 0xa2, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ESportsAdminClient is the client API for ESportsAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ESportsAdminClient interface {
	// 播放器内跳转链接
	CreatePoster(ctx context.Context, in *CreatePosterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	EditPoster(ctx context.Context, in *EditPosterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	CenterPoster(ctx context.Context, in *CenterPosterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	TogglePoster(ctx context.Context, in *TogglePosterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeletePoster(ctx context.Context, in *DeletePosterReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPosterList(ctx context.Context, in *GetPosterListReq, opts ...grpc.CallOption) (*GetPosterListRep, error)
	GetEffectivePosterList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetEffectivePosterListRep, error)
}

type eSportsAdminClient struct {
	cc *grpc.ClientConn
}

func NewESportsAdminClient(cc *grpc.ClientConn) ESportsAdminClient {
	return &eSportsAdminClient{cc}
}

func (c *eSportsAdminClient) CreatePoster(ctx context.Context, in *CreatePosterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/esports.admin.v1.ESportsAdmin/CreatePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eSportsAdminClient) EditPoster(ctx context.Context, in *EditPosterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/esports.admin.v1.ESportsAdmin/EditPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eSportsAdminClient) CenterPoster(ctx context.Context, in *CenterPosterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/esports.admin.v1.ESportsAdmin/CenterPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eSportsAdminClient) TogglePoster(ctx context.Context, in *TogglePosterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/esports.admin.v1.ESportsAdmin/TogglePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eSportsAdminClient) DeletePoster(ctx context.Context, in *DeletePosterReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/esports.admin.v1.ESportsAdmin/DeletePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eSportsAdminClient) GetPosterList(ctx context.Context, in *GetPosterListReq, opts ...grpc.CallOption) (*GetPosterListRep, error) {
	out := new(GetPosterListRep)
	err := c.cc.Invoke(ctx, "/esports.admin.v1.ESportsAdmin/GetPosterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eSportsAdminClient) GetEffectivePosterList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetEffectivePosterListRep, error) {
	out := new(GetEffectivePosterListRep)
	err := c.cc.Invoke(ctx, "/esports.admin.v1.ESportsAdmin/GetEffectivePosterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ESportsAdminServer is the server API for ESportsAdmin service.
type ESportsAdminServer interface {
	// 播放器内跳转链接
	CreatePoster(context.Context, *CreatePosterReq) (*empty.Empty, error)
	EditPoster(context.Context, *EditPosterReq) (*empty.Empty, error)
	CenterPoster(context.Context, *CenterPosterReq) (*empty.Empty, error)
	TogglePoster(context.Context, *TogglePosterReq) (*empty.Empty, error)
	DeletePoster(context.Context, *DeletePosterReq) (*empty.Empty, error)
	GetPosterList(context.Context, *GetPosterListReq) (*GetPosterListRep, error)
	GetEffectivePosterList(context.Context, *empty.Empty) (*GetEffectivePosterListRep, error)
}

// UnimplementedESportsAdminServer can be embedded to have forward compatible implementations.
type UnimplementedESportsAdminServer struct {
}

func (*UnimplementedESportsAdminServer) CreatePoster(ctx context.Context, req *CreatePosterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoster not implemented")
}
func (*UnimplementedESportsAdminServer) EditPoster(ctx context.Context, req *EditPosterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPoster not implemented")
}
func (*UnimplementedESportsAdminServer) CenterPoster(ctx context.Context, req *CenterPosterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CenterPoster not implemented")
}
func (*UnimplementedESportsAdminServer) TogglePoster(ctx context.Context, req *TogglePosterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TogglePoster not implemented")
}
func (*UnimplementedESportsAdminServer) DeletePoster(ctx context.Context, req *DeletePosterReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoster not implemented")
}
func (*UnimplementedESportsAdminServer) GetPosterList(ctx context.Context, req *GetPosterListReq) (*GetPosterListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosterList not implemented")
}
func (*UnimplementedESportsAdminServer) GetEffectivePosterList(ctx context.Context, req *empty.Empty) (*GetEffectivePosterListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectivePosterList not implemented")
}

func RegisterESportsAdminServer(s *grpc.Server, srv ESportsAdminServer) {
	s.RegisterService(&_ESportsAdmin_serviceDesc, srv)
}

func _ESportsAdmin_CreatePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESportsAdminServer).CreatePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.admin.v1.ESportsAdmin/CreatePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESportsAdminServer).CreatePoster(ctx, req.(*CreatePosterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ESportsAdmin_EditPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPosterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESportsAdminServer).EditPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.admin.v1.ESportsAdmin/EditPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESportsAdminServer).EditPoster(ctx, req.(*EditPosterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ESportsAdmin_CenterPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CenterPosterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESportsAdminServer).CenterPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.admin.v1.ESportsAdmin/CenterPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESportsAdminServer).CenterPoster(ctx, req.(*CenterPosterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ESportsAdmin_TogglePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TogglePosterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESportsAdminServer).TogglePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.admin.v1.ESportsAdmin/TogglePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESportsAdminServer).TogglePoster(ctx, req.(*TogglePosterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ESportsAdmin_DeletePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESportsAdminServer).DeletePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.admin.v1.ESportsAdmin/DeletePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESportsAdminServer).DeletePoster(ctx, req.(*DeletePosterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ESportsAdmin_GetPosterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPosterListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESportsAdminServer).GetPosterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.admin.v1.ESportsAdmin/GetPosterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESportsAdminServer).GetPosterList(ctx, req.(*GetPosterListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ESportsAdmin_GetEffectivePosterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ESportsAdminServer).GetEffectivePosterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/esports.admin.v1.ESportsAdmin/GetEffectivePosterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ESportsAdminServer).GetEffectivePosterList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ESportsAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "esports.admin.v1.ESportsAdmin",
	HandlerType: (*ESportsAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoster",
			Handler:    _ESportsAdmin_CreatePoster_Handler,
		},
		{
			MethodName: "EditPoster",
			Handler:    _ESportsAdmin_EditPoster_Handler,
		},
		{
			MethodName: "CenterPoster",
			Handler:    _ESportsAdmin_CenterPoster_Handler,
		},
		{
			MethodName: "TogglePoster",
			Handler:    _ESportsAdmin_TogglePoster_Handler,
		},
		{
			MethodName: "DeletePoster",
			Handler:    _ESportsAdmin_DeletePoster_Handler,
		},
		{
			MethodName: "GetPosterList",
			Handler:    _ESportsAdmin_GetPosterList_Handler,
		},
		{
			MethodName: "GetEffectivePosterList",
			Handler:    _ESportsAdmin_GetEffectivePosterList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *CreatePosterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePosterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePosterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x30
	}
	if m.ContestID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BgImage) > 0 {
		i -= len(m.BgImage)
		copy(dAtA[i:], m.BgImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EditPosterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditPosterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditPosterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x38
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x30
	}
	if m.ContestID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BgImage) > 0 {
		i -= len(m.BgImage)
		copy(dAtA[i:], m.BgImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CenterPosterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CenterPosterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CenterPosterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsCenteral != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsCenteral))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TogglePosterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TogglePosterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TogglePosterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OnlineStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OnlineStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeletePosterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePosterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePosterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPosterListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPosterListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPosterListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.PageNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPosterListRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPosterListRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPosterListRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PosterPager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PosterPager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PosterPager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x18
	}
	if m.PageNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetEffectivePosterListRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEffectivePosterListRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEffectivePosterListRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Poster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Poster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Poster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x40
	}
	if m.IsCenteral != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsCenteral))
		i--
		dAtA[i] = 0x38
	}
	if m.OnlineStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OnlineStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.ContestID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BgImage) > 0 {
		i -= len(m.BgImage)
		copy(dAtA[i:], m.BgImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImage)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EffectivePoster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectivePoster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectivePoster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x40
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x38
	}
	if m.IsCenteral != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsCenteral))
		i--
		dAtA[i] = 0x30
	}
	if m.ContestID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BgImage) > 0 {
		i -= len(m.BgImage)
		copy(dAtA[i:], m.BgImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgImage)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreatePosterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ContestID != 0 {
		n += 1 + sovApi(uint64(m.ContestID))
	}
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EditPosterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ContestID != 0 {
		n += 1 + sovApi(uint64(m.ContestID))
	}
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CenterPosterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.IsCenteral != 0 {
		n += 1 + sovApi(uint64(m.IsCenteral))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TogglePosterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.OnlineStatus != 0 {
		n += 1 + sovApi(uint64(m.OnlineStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePosterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPosterListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageNum != 0 {
		n += 1 + sovApi(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPosterListRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PosterPager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.PageNum != 0 {
		n += 1 + sovApi(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEffectivePosterListRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Poster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.BgImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ContestID != 0 {
		n += 1 + sovApi(uint64(m.ContestID))
	}
	if m.OnlineStatus != 0 {
		n += 1 + sovApi(uint64(m.OnlineStatus))
	}
	if m.IsCenteral != 0 {
		n += 1 + sovApi(uint64(m.IsCenteral))
	}
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EffectivePoster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.BgImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ContestID != 0 {
		n += 1 + sovApi(uint64(m.ContestID))
	}
	if m.IsCenteral != 0 {
		n += 1 + sovApi(uint64(m.IsCenteral))
	}
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreatePosterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePosterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePosterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestID", wireType)
			}
			m.ContestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditPosterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditPosterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditPosterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestID", wireType)
			}
			m.ContestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CenterPosterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CenterPosterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CenterPosterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCenteral", wireType)
			}
			m.IsCenteral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCenteral |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TogglePosterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TogglePosterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TogglePosterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineStatus", wireType)
			}
			m.OnlineStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePosterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePosterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePosterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPosterListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPosterListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPosterListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPosterListRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPosterListRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPosterListRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PosterPager{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Poster{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PosterPager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PosterPager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PosterPager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEffectivePosterListRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEffectivePosterListRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEffectivePosterListRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &EffectivePoster{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Poster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Poster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Poster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestID", wireType)
			}
			m.ContestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineStatus", wireType)
			}
			m.OnlineStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCenteral", wireType)
			}
			m.IsCenteral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCenteral |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectivePoster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectivePoster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectivePoster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestID", wireType)
			}
			m.ContestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCenteral", wireType)
			}
			m.IsCenteral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCenteral |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
