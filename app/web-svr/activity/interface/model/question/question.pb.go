// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: question.proto

package question

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_common_library_time "go-common/library/time"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Base struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	BusinessID           int64                       `protobuf:"varint,2,opt,name=BusinessID,proto3" json:"business_id"`
	ForeignID            int64                       `protobuf:"varint,3,opt,name=ForeignID,proto3" json:"foreign_id"`
	Count                int64                       `protobuf:"varint,4,opt,name=Count,proto3" json:"count"`
	OneTs                int64                       `protobuf:"varint,5,opt,name=OneTs,proto3" json:"one_ts"`
	RetryTs              int64                       `protobuf:"varint,6,opt,name=RetryTs,proto3" json:"retry_ts"`
	Stime                go_common_library_time.Time `protobuf:"varint,7,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	Name                 string                      `protobuf:"bytes,9,opt,name=Name,proto3" json:"name"`
	Separator            string                      `protobuf:"bytes,10,opt,name=Separator,proto3" json:"separator"`
	DistributeType       int64                       `protobuf:"varint,11,opt,name=DistributeType,proto3" json:"distribute_type"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Base) Reset()         { *m = Base{} }
func (m *Base) String() string { return proto.CompactTextString(m) }
func (*Base) ProtoMessage()    {}
func (*Base) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d310e1b23c85d7, []int{0}
}
func (m *Base) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Base) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Base.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Base) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Base.Merge(m, src)
}
func (m *Base) XXX_Size() int {
	return m.Size()
}
func (m *Base) XXX_DiscardUnknown() {
	xxx_messageInfo_Base.DiscardUnknown(m)
}

var xxx_messageInfo_Base proto.InternalMessageInfo

func (m *Base) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Base) GetBusinessID() int64 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *Base) GetForeignID() int64 {
	if m != nil {
		return m.ForeignID
	}
	return 0
}

func (m *Base) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Base) GetOneTs() int64 {
	if m != nil {
		return m.OneTs
	}
	return 0
}

func (m *Base) GetRetryTs() int64 {
	if m != nil {
		return m.RetryTs
	}
	return 0
}

func (m *Base) GetStime() go_common_library_time.Time {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *Base) GetEtime() go_common_library_time.Time {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *Base) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Base) GetSeparator() string {
	if m != nil {
		return m.Separator
	}
	return ""
}

func (m *Base) GetDistributeType() int64 {
	if m != nil {
		return m.DistributeType
	}
	return 0
}

type Detail struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	BaseID               int64    `protobuf:"varint,2,opt,name=BaseID,proto3" json:"base_id"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"name"`
	RightAnswer          string   `protobuf:"bytes,4,opt,name=RightAnswer,proto3" json:"right_answer"`
	WrongAnswer          string   `protobuf:"bytes,5,opt,name=WrongAnswer,proto3" json:"wrong_answer"`
	Attribute            int64    `protobuf:"varint,6,opt,name=Attribute,proto3" json:"attribute"`
	Pic                  string   `protobuf:"bytes,7,opt,name=Pic,proto3" json:"pic"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Detail) Reset()         { *m = Detail{} }
func (m *Detail) String() string { return proto.CompactTextString(m) }
func (*Detail) ProtoMessage()    {}
func (*Detail) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d310e1b23c85d7, []int{1}
}
func (m *Detail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Detail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Detail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Detail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Detail.Merge(m, src)
}
func (m *Detail) XXX_Size() int {
	return m.Size()
}
func (m *Detail) XXX_DiscardUnknown() {
	xxx_messageInfo_Detail.DiscardUnknown(m)
}

var xxx_messageInfo_Detail proto.InternalMessageInfo

func (m *Detail) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Detail) GetBaseID() int64 {
	if m != nil {
		return m.BaseID
	}
	return 0
}

func (m *Detail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Detail) GetRightAnswer() string {
	if m != nil {
		return m.RightAnswer
	}
	return ""
}

func (m *Detail) GetWrongAnswer() string {
	if m != nil {
		return m.WrongAnswer
	}
	return ""
}

func (m *Detail) GetAttribute() int64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *Detail) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

type UserAnswerLog struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	BaseID               int64                       `protobuf:"varint,3,opt,name=BaseID,proto3" json:"base_id"`
	DetailID             int64                       `protobuf:"varint,4,opt,name=DetailID,proto3" json:"detail_id"`
	PoolID               int64                       `protobuf:"varint,5,opt,name=PoolID,proto3" json:"pool_id"`
	Answer               string                      `protobuf:"bytes,6,opt,name=Answer,proto3" json:"answer"`
	IsRight              int64                       `protobuf:"varint,7,opt,name=IsRight,proto3" json:"is_right"`
	Index                int64                       `protobuf:"varint,8,opt,name=Index,proto3" json:"index"`
	QuestionTime         go_common_library_time.Time `protobuf:"varint,9,opt,name=QuestionTime,proto3,casttype=go-common/library/time.Time" json:"question_time"`
	AnswerTime           go_common_library_time.Time `protobuf:"varint,10,opt,name=AnswerTime,proto3,casttype=go-common/library/time.Time" json:"answer_time"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserAnswerLog) Reset()         { *m = UserAnswerLog{} }
func (m *UserAnswerLog) String() string { return proto.CompactTextString(m) }
func (*UserAnswerLog) ProtoMessage()    {}
func (*UserAnswerLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d310e1b23c85d7, []int{2}
}
func (m *UserAnswerLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAnswerLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAnswerLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAnswerLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAnswerLog.Merge(m, src)
}
func (m *UserAnswerLog) XXX_Size() int {
	return m.Size()
}
func (m *UserAnswerLog) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAnswerLog.DiscardUnknown(m)
}

var xxx_messageInfo_UserAnswerLog proto.InternalMessageInfo

func (m *UserAnswerLog) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserAnswerLog) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserAnswerLog) GetBaseID() int64 {
	if m != nil {
		return m.BaseID
	}
	return 0
}

func (m *UserAnswerLog) GetDetailID() int64 {
	if m != nil {
		return m.DetailID
	}
	return 0
}

func (m *UserAnswerLog) GetPoolID() int64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *UserAnswerLog) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func (m *UserAnswerLog) GetIsRight() int64 {
	if m != nil {
		return m.IsRight
	}
	return 0
}

func (m *UserAnswerLog) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *UserAnswerLog) GetQuestionTime() go_common_library_time.Time {
	if m != nil {
		return m.QuestionTime
	}
	return 0
}

func (m *UserAnswerLog) GetAnswerTime() go_common_library_time.Time {
	if m != nil {
		return m.AnswerTime
	}
	return 0
}

func (m *UserAnswerLog) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *UserAnswerLog) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type UserAnswerRecord struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	BaseID               int64                       `protobuf:"varint,3,opt,name=BaseID,proto3" json:"base_id"`
	PoolID               int64                       `protobuf:"varint,4,opt,name=PoolID,proto3" json:"pool_id"`
	PoolCount            int64                       `protobuf:"varint,5,opt,name=PoolCount,proto3" json:"pool_count"`
	AnswerCount          int64                       `protobuf:"varint,6,opt,name=AnswerCount,proto3" json:"answer_count"`
	RightCount           int64                       `protobuf:"varint,7,opt,name=RightCount,proto3" json:"right_count"`
	State                int64                       `protobuf:"varint,8,opt,name=State,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserAnswerRecord) Reset()         { *m = UserAnswerRecord{} }
func (m *UserAnswerRecord) String() string { return proto.CompactTextString(m) }
func (*UserAnswerRecord) ProtoMessage()    {}
func (*UserAnswerRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_64d310e1b23c85d7, []int{3}
}
func (m *UserAnswerRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAnswerRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAnswerRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAnswerRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAnswerRecord.Merge(m, src)
}
func (m *UserAnswerRecord) XXX_Size() int {
	return m.Size()
}
func (m *UserAnswerRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAnswerRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UserAnswerRecord proto.InternalMessageInfo

func (m *UserAnswerRecord) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserAnswerRecord) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserAnswerRecord) GetBaseID() int64 {
	if m != nil {
		return m.BaseID
	}
	return 0
}

func (m *UserAnswerRecord) GetPoolID() int64 {
	if m != nil {
		return m.PoolID
	}
	return 0
}

func (m *UserAnswerRecord) GetPoolCount() int64 {
	if m != nil {
		return m.PoolCount
	}
	return 0
}

func (m *UserAnswerRecord) GetAnswerCount() int64 {
	if m != nil {
		return m.AnswerCount
	}
	return 0
}

func (m *UserAnswerRecord) GetRightCount() int64 {
	if m != nil {
		return m.RightCount
	}
	return 0
}

func (m *UserAnswerRecord) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UserAnswerRecord) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *UserAnswerRecord) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func init() {
	proto.RegisterType((*Base)(nil), "activity.service.Base")
	proto.RegisterType((*Detail)(nil), "activity.service.Detail")
	proto.RegisterType((*UserAnswerLog)(nil), "activity.service.UserAnswerLog")
	proto.RegisterType((*UserAnswerRecord)(nil), "activity.service.UserAnswerRecord")
}

func init() { proto.RegisterFile("question.proto", fileDescriptor_64d310e1b23c85d7) }

var fileDescriptor_64d310e1b23c85d7 = []byte{
	// 803 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x12, 0xc7, 0x4e, 0x3c, 0x49, 0x7f, 0xe4, 0x4f, 0x42, 0x6e, 0x41, 0x71, 0x15, 0x24,
	0x54, 0x44, 0x9b, 0x20, 0x58, 0x22, 0x21, 0xd5, 0x0d, 0x48, 0x91, 0x68, 0x29, 0xd3, 0x20, 0x24,
	0x36, 0x91, 0x63, 0x4f, 0xdd, 0x91, 0x6a, 0x4f, 0xf0, 0x4c, 0x5a, 0xf2, 0x1c, 0x6c, 0x78, 0x1f,
	0x36, 0x88, 0x15, 0x4f, 0x60, 0xa1, 0xb2, 0xf3, 0x8a, 0x35, 0x2b, 0x34, 0x77, 0x9c, 0xd8, 0x20,
	0x22, 0x45, 0x20, 0x76, 0xf1, 0xb9, 0xe7, 0xdc, 0x78, 0xee, 0x3d, 0x67, 0x8c, 0xd6, 0xdf, 0x4c,
	0x09, 0x17, 0x94, 0xc5, 0xdd, 0x49, 0xc2, 0x04, 0xb3, 0x36, 0x3d, 0x5f, 0xd0, 0x4b, 0x2a, 0x66,
	0x5d, 0x4e, 0x92, 0x4b, 0xea, 0x93, 0xed, 0xfd, 0x90, 0x8a, 0xf3, 0xe9, 0xb8, 0xeb, 0xb3, 0xa8,
	0x17, 0xb2, 0x90, 0xf5, 0x80, 0x38, 0x9e, 0x9e, 0xc1, 0x13, 0x3c, 0xc0, 0x2f, 0xd5, 0xa0, 0xf3,
	0x4d, 0x43, 0x35, 0xd7, 0xe3, 0xc4, 0xba, 0x81, 0xaa, 0x83, 0xbe, 0x5d, 0xd9, 0xa9, 0xec, 0x6a,
	0xae, 0x91, 0xa5, 0x4e, 0x95, 0x06, 0xb8, 0x3a, 0xe8, 0x5b, 0x3d, 0x84, 0xdc, 0x29, 0xa7, 0x31,
	0xe1, 0x7c, 0xd0, 0xb7, 0xab, 0x50, 0xdf, 0xc8, 0x52, 0xa7, 0x39, 0xce, 0xd1, 0x11, 0x0d, 0x70,
	0x89, 0x62, 0xed, 0x21, 0xf3, 0x29, 0x4b, 0x08, 0x0d, 0xe3, 0x41, 0xdf, 0xd6, 0x80, 0xbf, 0x9e,
	0xa5, 0x0e, 0x3a, 0x53, 0xa0, 0xa4, 0x17, 0x04, 0xcb, 0x41, 0xfa, 0x21, 0x9b, 0xc6, 0xc2, 0xae,
	0x01, 0xd3, 0xcc, 0x52, 0x47, 0xf7, 0x25, 0x80, 0x15, 0x6e, 0xed, 0x20, 0xfd, 0x79, 0x4c, 0x86,
	0xdc, 0xd6, 0x81, 0x80, 0xb2, 0xd4, 0x31, 0x58, 0x4c, 0x46, 0x82, 0x63, 0x55, 0xb0, 0xee, 0xa0,
	0x3a, 0x26, 0x22, 0x99, 0x0d, 0xb9, 0x6d, 0x00, 0xa7, 0x95, 0xa5, 0x4e, 0x23, 0x91, 0x90, 0x64,
	0xcd, 0x8b, 0xd6, 0x63, 0xa4, 0x9f, 0x0a, 0x1a, 0x11, 0xbb, 0x0e, 0xac, 0x5d, 0xf9, 0x57, 0x5c,
	0x02, 0xdf, 0x53, 0xe7, 0x66, 0xc8, 0xf6, 0x7d, 0x16, 0x45, 0x2c, 0xee, 0x5d, 0xd0, 0x71, 0xe2,
	0x25, 0xb3, 0x9e, 0xac, 0x74, 0x87, 0x34, 0x22, 0x58, 0xc9, 0xa4, 0xfe, 0x09, 0xe8, 0x1b, 0x85,
	0x9e, 0xac, 0xa4, 0x07, 0x99, 0x75, 0x0b, 0xd5, 0x8e, 0xbd, 0x88, 0xd8, 0xe6, 0x4e, 0x65, 0xd7,
	0x74, 0x1b, 0x59, 0xea, 0xd4, 0x62, 0x2f, 0x22, 0x18, 0x50, 0xeb, 0x1e, 0x32, 0x4f, 0xc9, 0xc4,
	0x4b, 0x3c, 0xc1, 0x12, 0x1b, 0x01, 0x65, 0x2d, 0x4b, 0x1d, 0x93, 0xcf, 0x41, 0x5c, 0xd4, 0xad,
	0x47, 0x68, 0xbd, 0x4f, 0xb9, 0x48, 0xe8, 0x78, 0x2a, 0xc8, 0x70, 0x36, 0x21, 0x76, 0x13, 0xde,
	0xe9, 0xff, 0x2c, 0x75, 0x36, 0x82, 0x45, 0x65, 0x24, 0x66, 0x13, 0x82, 0x7f, 0xa1, 0x76, 0xde,
	0x55, 0x91, 0xd1, 0x27, 0xc2, 0xa3, 0x17, 0x4b, 0x97, 0x7e, 0x1b, 0x19, 0xd2, 0x14, 0x8b, 0x85,
	0x37, 0xb3, 0xd4, 0xa9, 0x8f, 0x3d, 0x4e, 0xe4, 0xf6, 0xf2, 0xd2, 0xe2, 0x3c, 0xda, 0x6f, 0xcf,
	0xf3, 0x00, 0x35, 0x31, 0x0d, 0xcf, 0xc5, 0x41, 0xcc, 0xaf, 0x48, 0x02, 0xeb, 0x35, 0xdd, 0xcd,
	0x2c, 0x75, 0x5a, 0x89, 0x84, 0x47, 0x1e, 0xe0, 0xb8, 0x4c, 0x92, 0x9a, 0x57, 0x09, 0x8b, 0xc3,
	0x5c, 0xa3, 0x17, 0x9a, 0x2b, 0x09, 0x2f, 0x34, 0x25, 0x92, 0x9c, 0xdb, 0x81, 0xc8, 0x8f, 0x97,
	0xef, 0x1f, 0xe6, 0xe6, 0xcd, 0x41, 0x5c, 0xd4, 0xad, 0x2d, 0xa4, 0x9d, 0x50, 0x1f, 0x0c, 0x60,
	0xba, 0xf5, 0x2c, 0x75, 0xb4, 0x09, 0xf5, 0xb1, 0xc4, 0x3a, 0x9f, 0x6a, 0x68, 0xed, 0x25, 0x27,
	0x89, 0x6a, 0xfb, 0x8c, 0x85, 0x4b, 0x87, 0xb3, 0x85, 0xb4, 0x23, 0x1a, 0xe4, 0x93, 0x81, 0x26,
	0x11, 0x0d, 0xb0, 0xc4, 0x4a, 0x73, 0xd3, 0x96, 0xcf, 0xed, 0x2e, 0x6a, 0xa8, 0xf1, 0x0f, 0xfa,
	0xb9, 0xeb, 0xe1, 0x85, 0x03, 0xc0, 0x24, 0x71, 0x51, 0x96, 0xfd, 0x4e, 0x18, 0x93, 0x44, 0xbd,
	0xe8, 0x37, 0x61, 0x0c, 0x68, 0x79, 0xc9, 0xea, 0x20, 0x23, 0x1f, 0x98, 0x01, 0xe7, 0x82, 0x88,
	0xe4, 0xa3, 0xca, 0x2b, 0x32, 0x23, 0x03, 0x0e, 0xa3, 0xce, 0xdd, 0x0f, 0x19, 0xa1, 0x7c, 0x04,
	0xcb, 0xc0, 0xf3, 0xa2, 0x8c, 0xe3, 0x20, 0x0e, 0xc8, 0xdb, 0xdc, 0xe3, 0x10, 0x47, 0x2a, 0x01,
	0xac, 0x70, 0x6b, 0x88, 0x5a, 0x2f, 0xf2, 0x2b, 0x48, 0x7a, 0x1b, 0xcc, 0xac, 0xb9, 0xf7, 0xb3,
	0xd4, 0x59, 0x9b, 0x5f, 0x4d, 0xa3, 0x55, 0x32, 0xf1, 0x53, 0x17, 0xeb, 0x18, 0x21, 0xf5, 0xa2,
	0xd0, 0x13, 0x41, 0xcf, 0xae, 0xbc, 0x64, 0xd4, 0x31, 0x56, 0xea, 0x58, 0xea, 0x20, 0xa3, 0x7a,
	0x08, 0x51, 0x6d, 0x16, 0x51, 0xf5, 0x57, 0x8a, 0xea, 0xe1, 0x3c, 0xea, 0x47, 0xa0, 0x6f, 0x15,
	0xfa, 0x68, 0x25, 0x3d, 0xc8, 0x3a, 0x1f, 0x34, 0xb4, 0x59, 0x98, 0x09, 0x13, 0x9f, 0x25, 0xc1,
	0x3f, 0xf3, 0x53, 0x61, 0x92, 0xda, 0x72, 0x93, 0xec, 0x21, 0x53, 0xfe, 0x52, 0x77, 0xad, 0x5e,
	0xdc, 0xca, 0xc0, 0x53, 0x17, 0x6e, 0x41, 0x90, 0x41, 0x54, 0xaf, 0xae, 0xf8, 0x2a, 0x56, 0x10,
	0xc4, 0x7c, 0x21, 0x4a, 0x51, 0x26, 0xc9, 0x0f, 0x05, 0x78, 0x48, 0x49, 0xea, 0xc5, 0x87, 0x42,
	0xe5, 0x5d, 0x29, 0x4a, 0x14, 0xe9, 0xb5, 0x53, 0xe1, 0x09, 0x52, 0xf6, 0x1a, 0x97, 0x00, 0x56,
	0x78, 0xb1, 0x45, 0xf3, 0x2f, 0xb7, 0x88, 0xfe, 0x68, 0x8b, 0xee, 0xf6, 0xc7, 0xeb, 0x76, 0xe5,
	0xf3, 0x75, 0xbb, 0xf2, 0xe5, 0xba, 0x5d, 0x79, 0xff, 0xb5, 0xfd, 0xdf, 0xeb, 0xc6, 0xdc, 0xe3,
	0x63, 0x03, 0x3e, 0x9f, 0x0f, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x35, 0x5d, 0xef, 0x2b, 0x91,
	0x07, 0x00, 0x00,
}

func (m *Base) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Base) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Base) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DistributeType != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.DistributeType))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Separator) > 0 {
		i -= len(m.Separator)
		copy(dAtA[i:], m.Separator)
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Separator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Etime != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x40
	}
	if m.Stime != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x38
	}
	if m.RetryTs != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.RetryTs))
		i--
		dAtA[i] = 0x30
	}
	if m.OneTs != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.OneTs))
		i--
		dAtA[i] = 0x28
	}
	if m.Count != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.ForeignID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.ForeignID))
		i--
		dAtA[i] = 0x18
	}
	if m.BusinessID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.BusinessID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Detail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Detail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Detail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Attribute != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x30
	}
	if len(m.WrongAnswer) > 0 {
		i -= len(m.WrongAnswer)
		copy(dAtA[i:], m.WrongAnswer)
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.WrongAnswer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RightAnswer) > 0 {
		i -= len(m.RightAnswer)
		copy(dAtA[i:], m.RightAnswer)
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.RightAnswer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.BaseID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAnswerLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAnswerLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAnswerLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x60
	}
	if m.Ctime != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if m.AnswerTime != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.AnswerTime))
		i--
		dAtA[i] = 0x50
	}
	if m.QuestionTime != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.QuestionTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Index != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x40
	}
	if m.IsRight != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.IsRight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Answer) > 0 {
		i -= len(m.Answer)
		copy(dAtA[i:], m.Answer)
		i = encodeVarintQuestion(dAtA, i, uint64(len(m.Answer)))
		i--
		dAtA[i] = 0x32
	}
	if m.PoolID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x28
	}
	if m.DetailID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.DetailID))
		i--
		dAtA[i] = 0x20
	}
	if m.BaseID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.BaseID))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAnswerRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAnswerRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAnswerRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.State != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.RightCount != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.RightCount))
		i--
		dAtA[i] = 0x38
	}
	if m.AnswerCount != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.AnswerCount))
		i--
		dAtA[i] = 0x30
	}
	if m.PoolCount != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.PoolCount))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x20
	}
	if m.BaseID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.BaseID))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintQuestion(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuestion(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuestion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Base) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovQuestion(uint64(m.ID))
	}
	if m.BusinessID != 0 {
		n += 1 + sovQuestion(uint64(m.BusinessID))
	}
	if m.ForeignID != 0 {
		n += 1 + sovQuestion(uint64(m.ForeignID))
	}
	if m.Count != 0 {
		n += 1 + sovQuestion(uint64(m.Count))
	}
	if m.OneTs != 0 {
		n += 1 + sovQuestion(uint64(m.OneTs))
	}
	if m.RetryTs != 0 {
		n += 1 + sovQuestion(uint64(m.RetryTs))
	}
	if m.Stime != 0 {
		n += 1 + sovQuestion(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovQuestion(uint64(m.Etime))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.Separator)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.DistributeType != 0 {
		n += 1 + sovQuestion(uint64(m.DistributeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Detail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovQuestion(uint64(m.ID))
	}
	if m.BaseID != 0 {
		n += 1 + sovQuestion(uint64(m.BaseID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.RightAnswer)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	l = len(m.WrongAnswer)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.Attribute != 0 {
		n += 1 + sovQuestion(uint64(m.Attribute))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserAnswerLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovQuestion(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovQuestion(uint64(m.Mid))
	}
	if m.BaseID != 0 {
		n += 1 + sovQuestion(uint64(m.BaseID))
	}
	if m.DetailID != 0 {
		n += 1 + sovQuestion(uint64(m.DetailID))
	}
	if m.PoolID != 0 {
		n += 1 + sovQuestion(uint64(m.PoolID))
	}
	l = len(m.Answer)
	if l > 0 {
		n += 1 + l + sovQuestion(uint64(l))
	}
	if m.IsRight != 0 {
		n += 1 + sovQuestion(uint64(m.IsRight))
	}
	if m.Index != 0 {
		n += 1 + sovQuestion(uint64(m.Index))
	}
	if m.QuestionTime != 0 {
		n += 1 + sovQuestion(uint64(m.QuestionTime))
	}
	if m.AnswerTime != 0 {
		n += 1 + sovQuestion(uint64(m.AnswerTime))
	}
	if m.Ctime != 0 {
		n += 1 + sovQuestion(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovQuestion(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserAnswerRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovQuestion(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovQuestion(uint64(m.Mid))
	}
	if m.BaseID != 0 {
		n += 1 + sovQuestion(uint64(m.BaseID))
	}
	if m.PoolID != 0 {
		n += 1 + sovQuestion(uint64(m.PoolID))
	}
	if m.PoolCount != 0 {
		n += 1 + sovQuestion(uint64(m.PoolCount))
	}
	if m.AnswerCount != 0 {
		n += 1 + sovQuestion(uint64(m.AnswerCount))
	}
	if m.RightCount != 0 {
		n += 1 + sovQuestion(uint64(m.RightCount))
	}
	if m.State != 0 {
		n += 1 + sovQuestion(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovQuestion(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovQuestion(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovQuestion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuestion(x uint64) (n int) {
	return sovQuestion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Base) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Base: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Base: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignID", wireType)
			}
			m.ForeignID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForeignID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneTs", wireType)
			}
			m.OneTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OneTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryTs", wireType)
			}
			m.RetryTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Separator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Separator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeType", wireType)
			}
			m.DistributeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributeType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Detail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseID", wireType)
			}
			m.BaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightAnswer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrongAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WrongAnswer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAnswerLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAnswerLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAnswerLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseID", wireType)
			}
			m.BaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailID", wireType)
			}
			m.DetailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DetailID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuestion
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuestion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRight", wireType)
			}
			m.IsRight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionTime", wireType)
			}
			m.QuestionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestionTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswerTime", wireType)
			}
			m.AnswerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnswerTime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAnswerRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAnswerRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAnswerRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseID", wireType)
			}
			m.BaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCount", wireType)
			}
			m.PoolCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswerCount", wireType)
			}
			m.AnswerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnswerCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightCount", wireType)
			}
			m.RightCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RightCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuestion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuestion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuestion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuestion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuestion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuestion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuestion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuestion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuestion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuestion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuestion = fmt.Errorf("proto: unexpected end of group")
)
