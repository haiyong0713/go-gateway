// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/app-search/api/v1/api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DefaultWordsReq 默认搜索词请求参数
type DefaultWordsReq struct {
	// 请求来源 0: 搜索发现页 1: 首页
	From int64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	// 用户登陆加载信息
	LoginEvent int64 `protobuf:"varint,2,opt,name=login_event,json=loginEvent,proto3" json:"login_event,omitempty"`
	// 青少年模式 teenagers_mode=1 开启青少年模式
	TeenagersMode int32 `protobuf:"varint,3,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	// 课程模式 lessons_mode=1 开启课程模式
	LessonsMode int32 `protobuf:"varint,4,opt,name=lessons_mode,json=lessonsMode,proto3" json:"lessons_mode,omitempty"`
	// 当前首页tab类型：天马-tm; 直播-live; 热门-hot; 追番-bangumi; 影视-movie; 其他-others
	Tab string `protobuf:"bytes,5,opt,name=tab,proto3" json:"tab,omitempty"`
	// 页面事件id
	EventId string `protobuf:"bytes,6,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// 上一次访问播放页的avid
	Avid string `protobuf:"bytes,7,opt,name=avid,proto3" json:"avid,omitempty"`
	// 上一次搜索query
	Query string `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	// session刷新次数，从0开始
	An int64 `protobuf:"varint,9,opt,name=an,proto3" json:"an,omitempty"`
	// 是否首页下拉刷新请求，1-是
	IsFresh              int64    `protobuf:"varint,10,opt,name=is_fresh,json=isFresh,proto3" json:"is_fresh,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefaultWordsReq) Reset()         { *m = DefaultWordsReq{} }
func (m *DefaultWordsReq) String() string { return proto.CompactTextString(m) }
func (*DefaultWordsReq) ProtoMessage()    {}
func (*DefaultWordsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc8482d43541cdf, []int{0}
}
func (m *DefaultWordsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultWordsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefaultWordsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefaultWordsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultWordsReq.Merge(m, src)
}
func (m *DefaultWordsReq) XXX_Size() int {
	return m.Size()
}
func (m *DefaultWordsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultWordsReq.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultWordsReq proto.InternalMessageInfo

func (m *DefaultWordsReq) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *DefaultWordsReq) GetLoginEvent() int64 {
	if m != nil {
		return m.LoginEvent
	}
	return 0
}

func (m *DefaultWordsReq) GetTeenagersMode() int32 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

func (m *DefaultWordsReq) GetLessonsMode() int32 {
	if m != nil {
		return m.LessonsMode
	}
	return 0
}

func (m *DefaultWordsReq) GetTab() string {
	if m != nil {
		return m.Tab
	}
	return ""
}

func (m *DefaultWordsReq) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *DefaultWordsReq) GetAvid() string {
	if m != nil {
		return m.Avid
	}
	return ""
}

func (m *DefaultWordsReq) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DefaultWordsReq) GetAn() int64 {
	if m != nil {
		return m.An
	}
	return 0
}

func (m *DefaultWordsReq) GetIsFresh() int64 {
	if m != nil {
		return m.IsFresh
	}
	return 0
}

// DefaultWordsReply 默认搜索词返回
type DefaultWordsReply struct {
	// 搜索trackid
	Trackid string `protobuf:"bytes,1,opt,name=trackid,proto3" json:"trackid,omitempty"`
	// 搜索参数
	Param string `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	// 展示词条
	Show string `protobuf:"bytes,3,opt,name=show,proto3" json:"show,omitempty"`
	// 原词条
	Word string `protobuf:"bytes,4,opt,name=word,proto3" json:"word,omitempty"`
	// 是否展示在首页,0-不展示，1-展示
	ShowFront int64 `protobuf:"varint,5,opt,name=show_front,json=showFront,proto3" json:"show_front,omitempty"`
	// 实验信息
	ExpStr string `protobuf:"bytes,6,opt,name=exp_str,json=expStr,proto3" json:"exp_str,omitempty"`
	// 特定跳转goto
	Goto string `protobuf:"bytes,7,opt,name=goto,proto3" json:"goto,omitempty"`
	// 特定跳转value
	Value string `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	// 特定跳转uri
	Uri                  string   `protobuf:"bytes,9,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefaultWordsReply) Reset()         { *m = DefaultWordsReply{} }
func (m *DefaultWordsReply) String() string { return proto.CompactTextString(m) }
func (*DefaultWordsReply) ProtoMessage()    {}
func (*DefaultWordsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc8482d43541cdf, []int{1}
}
func (m *DefaultWordsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultWordsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefaultWordsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefaultWordsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultWordsReply.Merge(m, src)
}
func (m *DefaultWordsReply) XXX_Size() int {
	return m.Size()
}
func (m *DefaultWordsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultWordsReply.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultWordsReply proto.InternalMessageInfo

func (m *DefaultWordsReply) GetTrackid() string {
	if m != nil {
		return m.Trackid
	}
	return ""
}

func (m *DefaultWordsReply) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *DefaultWordsReply) GetShow() string {
	if m != nil {
		return m.Show
	}
	return ""
}

func (m *DefaultWordsReply) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *DefaultWordsReply) GetShowFront() int64 {
	if m != nil {
		return m.ShowFront
	}
	return 0
}

func (m *DefaultWordsReply) GetExpStr() string {
	if m != nil {
		return m.ExpStr
	}
	return ""
}

func (m *DefaultWordsReply) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *DefaultWordsReply) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *DefaultWordsReply) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// SuggestionResult3Req 搜索联想词请求参数
type SuggestionResult3Req struct {
	// 关键词
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 0不显示 1 显示 （语法高亮）
	Highlight int32 `protobuf:"varint,2,opt,name=highlight,proto3" json:"highlight,omitempty"`
	// 青少年模式 teenagers_mode=1 开启青少年模式
	TeenagersMode        int32    `protobuf:"varint,3,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuggestionResult3Req) Reset()         { *m = SuggestionResult3Req{} }
func (m *SuggestionResult3Req) String() string { return proto.CompactTextString(m) }
func (*SuggestionResult3Req) ProtoMessage()    {}
func (*SuggestionResult3Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc8482d43541cdf, []int{2}
}
func (m *SuggestionResult3Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestionResult3Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuggestionResult3Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuggestionResult3Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestionResult3Req.Merge(m, src)
}
func (m *SuggestionResult3Req) XXX_Size() int {
	return m.Size()
}
func (m *SuggestionResult3Req) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestionResult3Req.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestionResult3Req proto.InternalMessageInfo

func (m *SuggestionResult3Req) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SuggestionResult3Req) GetHighlight() int32 {
	if m != nil {
		return m.Highlight
	}
	return 0
}

func (m *SuggestionResult3Req) GetTeenagersMode() int32 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

// SuggestionResult3Reply 搜索联想词返回结果
type SuggestionResult3Reply struct {
	// 上报的trackid 搜索调用栈追踪标识
	Trackid string `protobuf:"bytes,1,opt,name=trackid,proto3" json:"trackid,omitempty"`
	// 联想词列表
	List []*ResultItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	// 搜索的abtest 实验信息
	ExpStr               string   `protobuf:"bytes,3,opt,name=exp_str,json=expStr,proto3" json:"exp_str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuggestionResult3Reply) Reset()         { *m = SuggestionResult3Reply{} }
func (m *SuggestionResult3Reply) String() string { return proto.CompactTextString(m) }
func (*SuggestionResult3Reply) ProtoMessage()    {}
func (*SuggestionResult3Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc8482d43541cdf, []int{3}
}
func (m *SuggestionResult3Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestionResult3Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuggestionResult3Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuggestionResult3Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestionResult3Reply.Merge(m, src)
}
func (m *SuggestionResult3Reply) XXX_Size() int {
	return m.Size()
}
func (m *SuggestionResult3Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestionResult3Reply.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestionResult3Reply proto.InternalMessageInfo

func (m *SuggestionResult3Reply) GetTrackid() string {
	if m != nil {
		return m.Trackid
	}
	return ""
}

func (m *SuggestionResult3Reply) GetList() []*ResultItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SuggestionResult3Reply) GetExpStr() string {
	if m != nil {
		return m.ExpStr
	}
	return ""
}

// ResultItem 联想词列表
type ResultItem struct {
	// 数据来源
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 实际搜索用的关键字
	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	//
	Position int32 `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	// 词条对应图片
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	// 图片尺寸，最大两位小数
	CoverSize float64 `protobuf:"fixed64,6,opt,name=cover_size,json=coverSize,proto3" json:"cover_size,omitempty"`
	// 展示用，sug词类型
	SugType string `protobuf:"bytes,7,opt,name=sug_type,json=sugType,proto3" json:"sug_type,omitempty"`
	// 词条大类型
	TermType int32 `protobuf:"varint,8,opt,name=term_type,json=termType,proto3" json:"term_type,omitempty"`
	// 跳转类型
	Goto string `protobuf:"bytes,9,opt,name=goto,proto3" json:"goto,omitempty"`
	// 跳转uri
	Uri string `protobuf:"bytes,10,opt,name=uri,proto3" json:"uri,omitempty"`
	// 认证信息
	OfficialVerify *OfficialVerify `protobuf:"bytes,11,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify,omitempty"`
	// 跳转参数
	Param string `protobuf:"bytes,12,opt,name=param,proto3" json:"param,omitempty"`
	// up主mid
	Mid int64 `protobuf:"varint,13,opt,name=mid,proto3" json:"mid,omitempty"`
	// 粉丝数
	Fans int32 `protobuf:"varint,14,opt,name=fans,proto3" json:"fans,omitempty"`
	// up主等级
	Level int32 `protobuf:"varint,15,opt,name=level,proto3" json:"level,omitempty"`
	// up主稿件数
	Archives int32 `protobuf:"varint,16,opt,name=archives,proto3" json:"archives,omitempty"`
	// 投稿时间
	Ptime int64 `protobuf:"varint,17,opt,name=ptime,proto3" json:"ptime,omitempty"`
	// 番剧 season类型名称
	SeasonTypeName string `protobuf:"bytes,18,opt,name=season_type_name,json=seasonTypeName,proto3" json:"season_type_name,omitempty"`
	// 番剧 地区
	Area string `protobuf:"bytes,19,opt,name=area,proto3" json:"area,omitempty"`
	// 作品风格 比如：搞笑/战斗/日常/声控/漫画改
	Style string `protobuf:"bytes,20,opt,name=style,proto3" json:"style,omitempty"`
	// 描述信息
	Label string `protobuf:"bytes,21,opt,name=label,proto3" json:"label,omitempty"`
	// 评分
	Rating float64 `protobuf:"fixed64,22,opt,name=rating,proto3" json:"rating,omitempty"`
	// 投票数
	Vote int32 `protobuf:"varint,23,opt,name=vote,proto3" json:"vote,omitempty"`
	// 角标
	Badges []*ReasonStyle `protobuf:"bytes,24,rep,name=badges,proto3" json:"badges,omitempty"`
	// goto=pgc，styles会拼接：投稿时间+番剧类型+地区，例如：2033-11-11|国创|中国大陆
	Styles string `protobuf:"bytes,25,opt,name=styles,proto3" json:"styles,omitempty"`
	// module_id 上报参数
	ModuleId int64 `protobuf:"varint,26,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// live_link 直播透传 link 用字段
	LiveLink string `protobuf:"bytes,27,opt,name=live_link,json=liveLink,proto3" json:"live_link,omitempty"`
	// face_nft_new 1 nft头像 0 非nft头像
	FaceNftNew int32 `protobuf:"varint,28,opt,name=face_nft_new,json=faceNftNew,proto3" json:"face_nft_new,omitempty"`
	// nft_face_icon nft标资源
	NftFaceIcon *NftFaceIcon `protobuf:"bytes,29,opt,name=nft_face_icon,json=nftFaceIcon,proto3" json:"nft_face_icon,omitempty"`
	// is_senior_member 1 硬核会员 0 非硬核会员
	IsSeniorMember       int32    `protobuf:"varint,30,opt,name=is_senior_member,json=isSeniorMember,proto3" json:"is_senior_member,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultItem) Reset()         { *m = ResultItem{} }
func (m *ResultItem) String() string { return proto.CompactTextString(m) }
func (*ResultItem) ProtoMessage()    {}
func (*ResultItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc8482d43541cdf, []int{4}
}
func (m *ResultItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultItem.Merge(m, src)
}
func (m *ResultItem) XXX_Size() int {
	return m.Size()
}
func (m *ResultItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultItem.DiscardUnknown(m)
}

var xxx_messageInfo_ResultItem proto.InternalMessageInfo

func (m *ResultItem) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ResultItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ResultItem) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *ResultItem) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *ResultItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *ResultItem) GetCoverSize() float64 {
	if m != nil {
		return m.CoverSize
	}
	return 0
}

func (m *ResultItem) GetSugType() string {
	if m != nil {
		return m.SugType
	}
	return ""
}

func (m *ResultItem) GetTermType() int32 {
	if m != nil {
		return m.TermType
	}
	return 0
}

func (m *ResultItem) GetGoto() string {
	if m != nil {
		return m.Goto
	}
	return ""
}

func (m *ResultItem) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ResultItem) GetOfficialVerify() *OfficialVerify {
	if m != nil {
		return m.OfficialVerify
	}
	return nil
}

func (m *ResultItem) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

func (m *ResultItem) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ResultItem) GetFans() int32 {
	if m != nil {
		return m.Fans
	}
	return 0
}

func (m *ResultItem) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ResultItem) GetArchives() int32 {
	if m != nil {
		return m.Archives
	}
	return 0
}

func (m *ResultItem) GetPtime() int64 {
	if m != nil {
		return m.Ptime
	}
	return 0
}

func (m *ResultItem) GetSeasonTypeName() string {
	if m != nil {
		return m.SeasonTypeName
	}
	return ""
}

func (m *ResultItem) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *ResultItem) GetStyle() string {
	if m != nil {
		return m.Style
	}
	return ""
}

func (m *ResultItem) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ResultItem) GetRating() float64 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *ResultItem) GetVote() int32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

func (m *ResultItem) GetBadges() []*ReasonStyle {
	if m != nil {
		return m.Badges
	}
	return nil
}

func (m *ResultItem) GetStyles() string {
	if m != nil {
		return m.Styles
	}
	return ""
}

func (m *ResultItem) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *ResultItem) GetLiveLink() string {
	if m != nil {
		return m.LiveLink
	}
	return ""
}

func (m *ResultItem) GetFaceNftNew() int32 {
	if m != nil {
		return m.FaceNftNew
	}
	return 0
}

func (m *ResultItem) GetNftFaceIcon() *NftFaceIcon {
	if m != nil {
		return m.NftFaceIcon
	}
	return nil
}

func (m *ResultItem) GetIsSeniorMember() int32 {
	if m != nil {
		return m.IsSeniorMember
	}
	return 0
}

// NftFaceIcon nft标资源
type NftFaceIcon struct {
	// nft所属区域 0 默认 1 大陆 2 港澳台
	RegionType int32 `protobuf:"varint,1,opt,name=region_type,json=regionType,proto3" json:"region_type,omitempty"`
	// 角标链接
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	// 展示状态 0:默认 1:放大20% 2:原图大小
	ShowStatus           int32    `protobuf:"varint,3,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NftFaceIcon) Reset()         { *m = NftFaceIcon{} }
func (m *NftFaceIcon) String() string { return proto.CompactTextString(m) }
func (*NftFaceIcon) ProtoMessage()    {}
func (*NftFaceIcon) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc8482d43541cdf, []int{5}
}
func (m *NftFaceIcon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftFaceIcon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftFaceIcon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftFaceIcon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftFaceIcon.Merge(m, src)
}
func (m *NftFaceIcon) XXX_Size() int {
	return m.Size()
}
func (m *NftFaceIcon) XXX_DiscardUnknown() {
	xxx_messageInfo_NftFaceIcon.DiscardUnknown(m)
}

var xxx_messageInfo_NftFaceIcon proto.InternalMessageInfo

func (m *NftFaceIcon) GetRegionType() int32 {
	if m != nil {
		return m.RegionType
	}
	return 0
}

func (m *NftFaceIcon) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *NftFaceIcon) GetShowStatus() int32 {
	if m != nil {
		return m.ShowStatus
	}
	return 0
}

// OfficialVerify 认证信息
type OfficialVerify struct {
	// 0：个人；1：官方；127：未认证
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 认证描述
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialVerify) Reset()         { *m = OfficialVerify{} }
func (m *OfficialVerify) String() string { return proto.CompactTextString(m) }
func (*OfficialVerify) ProtoMessage()    {}
func (*OfficialVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc8482d43541cdf, []int{6}
}
func (m *OfficialVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfficialVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialVerify.Merge(m, src)
}
func (m *OfficialVerify) XXX_Size() int {
	return m.Size()
}
func (m *OfficialVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialVerify.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialVerify proto.InternalMessageInfo

func (m *OfficialVerify) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OfficialVerify) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// ReasonStyle 角标
type ReasonStyle struct {
	// 角标文案
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 文案日间色值
	TextColor string `protobuf:"bytes,2,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	// 文案夜间色值
	TextColorNight string `protobuf:"bytes,3,opt,name=text_color_night,json=textColorNight,proto3" json:"text_color_night,omitempty"`
	// 背景日间色值
	BgColor string `protobuf:"bytes,4,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	// 背景夜间色值
	BgColorNight string `protobuf:"bytes,5,opt,name=bg_color_night,json=bgColorNight,proto3" json:"bg_color_night,omitempty"`
	// 边框日间色值
	BorderColor string `protobuf:"bytes,6,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`
	// 边框夜间色值
	BorderColorNight string `protobuf:"bytes,7,opt,name=border_color_night,json=borderColorNight,proto3" json:"border_color_night,omitempty"`
	// 角标样式：1为填充模式；2位镂空模式
	BgStyle              int32    `protobuf:"varint,8,opt,name=bg_style,json=bgStyle,proto3" json:"bg_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReasonStyle) Reset()         { *m = ReasonStyle{} }
func (m *ReasonStyle) String() string { return proto.CompactTextString(m) }
func (*ReasonStyle) ProtoMessage()    {}
func (*ReasonStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccc8482d43541cdf, []int{7}
}
func (m *ReasonStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReasonStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReasonStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReasonStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReasonStyle.Merge(m, src)
}
func (m *ReasonStyle) XXX_Size() int {
	return m.Size()
}
func (m *ReasonStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReasonStyle.DiscardUnknown(m)
}

var xxx_messageInfo_ReasonStyle proto.InternalMessageInfo

func (m *ReasonStyle) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ReasonStyle) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *ReasonStyle) GetTextColorNight() string {
	if m != nil {
		return m.TextColorNight
	}
	return ""
}

func (m *ReasonStyle) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *ReasonStyle) GetBgColorNight() string {
	if m != nil {
		return m.BgColorNight
	}
	return ""
}

func (m *ReasonStyle) GetBorderColor() string {
	if m != nil {
		return m.BorderColor
	}
	return ""
}

func (m *ReasonStyle) GetBorderColorNight() string {
	if m != nil {
		return m.BorderColorNight
	}
	return ""
}

func (m *ReasonStyle) GetBgStyle() int32 {
	if m != nil {
		return m.BgStyle
	}
	return 0
}

func init() {
	proto.RegisterType((*DefaultWordsReq)(nil), "bilibili.app.interface.v1.DefaultWordsReq")
	proto.RegisterType((*DefaultWordsReply)(nil), "bilibili.app.interface.v1.DefaultWordsReply")
	proto.RegisterType((*SuggestionResult3Req)(nil), "bilibili.app.interface.v1.SuggestionResult3Req")
	proto.RegisterType((*SuggestionResult3Reply)(nil), "bilibili.app.interface.v1.SuggestionResult3Reply")
	proto.RegisterType((*ResultItem)(nil), "bilibili.app.interface.v1.ResultItem")
	proto.RegisterType((*NftFaceIcon)(nil), "bilibili.app.interface.v1.NftFaceIcon")
	proto.RegisterType((*OfficialVerify)(nil), "bilibili.app.interface.v1.OfficialVerify")
	proto.RegisterType((*ReasonStyle)(nil), "bilibili.app.interface.v1.ReasonStyle")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/app-search/api/v1/api.proto", fileDescriptor_ccc8482d43541cdf)
}

var fileDescriptor_ccc8482d43541cdf = []byte{
	// 1178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdf, 0x6e, 0x1b, 0x45,
	0x17, 0xff, 0x36, 0x6e, 0x62, 0xef, 0x38, 0x75, 0xd3, 0xf9, 0xd2, 0x76, 0x92, 0xb6, 0x21, 0x35,
	0x14, 0x05, 0xd4, 0x3a, 0x4a, 0x7a, 0x03, 0x37, 0x48, 0x14, 0xa8, 0x14, 0x44, 0x43, 0xb5, 0xae,
	0x8a, 0xc4, 0xcd, 0x6a, 0xbc, 0x7b, 0xbc, 0x1e, 0x65, 0x77, 0x67, 0x3b, 0x33, 0xde, 0xc4, 0x7d,
	0x00, 0x1e, 0x80, 0x9b, 0x72, 0xcd, 0xd3, 0x70, 0xc9, 0x1b, 0x80, 0xc2, 0x8b, 0xa0, 0x73, 0x66,
	0x9d, 0x38, 0xa8, 0x58, 0xe5, 0xc2, 0xf2, 0x39, 0xbf, 0x99, 0x39, 0x7f, 0x7e, 0xe7, 0xcc, 0x99,
	0x65, 0x87, 0x99, 0x7e, 0x9c, 0x49, 0x07, 0xa7, 0x72, 0xb6, 0x2f, 0xab, 0x0a, 0x7f, 0x8f, 0x6d,
	0x6d, 0xfc, 0x3f, 0x48, 0x93, 0x4c, 0xf6, 0x65, 0xa5, 0xf6, 0xeb, 0x03, 0xfc, 0x1b, 0x54, 0x46,
	0x3b, 0xcd, 0xb7, 0x46, 0x2a, 0x57, 0xf8, 0x1b, 0xc8, 0xaa, 0x1a, 0xa8, 0xd2, 0x81, 0x19, 0xcb,
	0x04, 0x06, 0xf5, 0x41, 0xff, 0xe7, 0x15, 0x76, 0xe3, 0x6b, 0x18, 0xcb, 0x69, 0xee, 0x7e, 0xd0,
	0x26, 0xb5, 0x11, 0xbc, 0xe6, 0x9c, 0x5d, 0x1b, 0x1b, 0x5d, 0x88, 0x60, 0x37, 0xd8, 0x6b, 0x45,
	0x24, 0xf3, 0x0f, 0x58, 0x37, 0xd7, 0x99, 0x2a, 0x63, 0xa8, 0xa1, 0x74, 0x62, 0x85, 0x96, 0x18,
	0x41, 0xdf, 0x20, 0xc2, 0x1f, 0xb2, 0x9e, 0x03, 0x28, 0x65, 0x06, 0xc6, 0xc6, 0x85, 0x4e, 0x41,
	0xb4, 0x76, 0x83, 0xbd, 0xd5, 0xe8, 0xfa, 0x05, 0xfa, 0x5c, 0xa7, 0xc0, 0x1f, 0xb0, 0xf5, 0x1c,
	0xac, 0xd5, 0x65, 0xb3, 0xe9, 0x1a, 0x6d, 0xea, 0x36, 0x18, 0x6d, 0xd9, 0x60, 0x2d, 0x27, 0x47,
	0x62, 0x75, 0x37, 0xd8, 0x0b, 0x23, 0x14, 0xf9, 0x16, 0xeb, 0x90, 0xdb, 0x58, 0xa5, 0x62, 0x8d,
	0xe0, 0x36, 0xe9, 0x47, 0x29, 0xc6, 0x2a, 0x6b, 0x95, 0x8a, 0x36, 0xc1, 0x24, 0xf3, 0x4d, 0xb6,
	0xfa, 0x7a, 0x0a, 0x66, 0x26, 0x3a, 0x04, 0x7a, 0x85, 0xf7, 0xd8, 0x8a, 0x2c, 0x45, 0x48, 0x81,
	0xaf, 0xc8, 0x12, 0x8d, 0x2a, 0x1b, 0x8f, 0x0d, 0xd8, 0x89, 0x60, 0x84, 0xb6, 0x95, 0x7d, 0x86,
	0x6a, 0xff, 0x8f, 0x80, 0xdd, 0xbc, 0x4a, 0x4a, 0x95, 0xcf, 0xb8, 0x60, 0x6d, 0x67, 0x64, 0x72,
	0xa2, 0x52, 0x62, 0x26, 0x8c, 0xe6, 0x2a, 0x3a, 0xac, 0xa4, 0x91, 0x05, 0xd1, 0x12, 0x46, 0x5e,
	0xc1, 0xd0, 0xec, 0x44, 0x9f, 0x12, 0x0f, 0x61, 0x44, 0x32, 0x62, 0xa7, 0xda, 0xa4, 0x94, 0x76,
	0x18, 0x91, 0xcc, 0xef, 0x33, 0x86, 0x6b, 0xf1, 0xd8, 0xe8, 0xd2, 0x51, 0xda, 0xad, 0x28, 0x44,
	0xe4, 0x19, 0x02, 0xfc, 0x0e, 0x6b, 0xc3, 0x59, 0x15, 0x5b, 0x67, 0x9a, 0xdc, 0xd7, 0xe0, 0xac,
	0x1a, 0x3a, 0x83, 0xb6, 0x32, 0xed, 0xf4, 0x3c, 0x75, 0x94, 0x31, 0x92, 0x5a, 0xe6, 0x53, 0x98,
	0xa7, 0x4e, 0x0a, 0x32, 0x3a, 0x35, 0x8a, 0x72, 0x0f, 0x23, 0x14, 0xfb, 0x53, 0xb6, 0x39, 0x9c,
	0x66, 0x19, 0x58, 0xa7, 0x74, 0x19, 0x81, 0x9d, 0xe6, 0xee, 0x09, 0x96, 0x5e, 0xb0, 0xf6, 0x09,
	0xcc, 0x28, 0xc4, 0x26, 0xc7, 0x46, 0xe5, 0xf7, 0x58, 0x38, 0x51, 0xd9, 0x24, 0x57, 0xd9, 0xc4,
	0x97, 0x7f, 0x35, 0xba, 0x04, 0xde, 0xb3, 0xfa, 0xfd, 0x9f, 0x02, 0x76, 0xfb, 0x1d, 0x7e, 0x97,
	0xb3, 0xfb, 0x39, 0xbb, 0x96, 0x2b, 0x8b, 0x4e, 0x5b, 0x7b, 0xdd, 0xc3, 0x87, 0x83, 0x7f, 0x6d,
	0xe6, 0x81, 0x37, 0x78, 0xe4, 0xa0, 0x88, 0xe8, 0xc8, 0x22, 0x77, 0xad, 0x45, 0xee, 0xfa, 0x6f,
	0xdb, 0x8c, 0x5d, 0xee, 0xbe, 0xd2, 0xf1, 0x61, 0xd3, 0xf1, 0x9b, 0x6c, 0xd5, 0x29, 0x97, 0xc3,
	0xbc, 0xa8, 0xa4, 0x2c, 0x12, 0xd4, 0xba, 0x4a, 0xd0, 0x36, 0xeb, 0x54, 0xda, 0x2a, 0x4c, 0xac,
	0xe9, 0xea, 0x0b, 0x1d, 0x6d, 0x25, 0xba, 0x06, 0xd3, 0x34, 0xb5, 0x57, 0xb0, 0xf0, 0x24, 0xc4,
	0x56, 0xbd, 0x01, 0x2a, 0x6e, 0x10, 0x85, 0x84, 0x0c, 0xd5, 0x1b, 0xc0, 0x06, 0xb5, 0xd3, 0x2c,
	0x76, 0xb3, 0x0a, 0x9a, 0x1a, 0xb7, 0xed, 0x34, 0x7b, 0x39, 0xab, 0x80, 0xdf, 0x65, 0xa1, 0x03,
	0x53, 0xf8, 0xb5, 0x8e, 0x77, 0x86, 0x00, 0x2d, 0xce, 0xfb, 0x22, 0x5c, 0xe8, 0x8b, 0xa6, 0x03,
	0xd8, 0x45, 0x07, 0xf0, 0x88, 0xdd, 0xd0, 0xe3, 0xb1, 0x4a, 0x94, 0xcc, 0xe3, 0x1a, 0x8c, 0x1a,
	0xcf, 0x44, 0x77, 0x37, 0xd8, 0xeb, 0x1e, 0x7e, 0xb2, 0x84, 0xe0, 0xef, 0x9b, 0x13, 0xaf, 0xe8,
	0x40, 0xd4, 0xd3, 0x57, 0xf4, 0xcb, 0x7b, 0xb0, 0xbe, 0x78, 0x0f, 0x36, 0x58, 0xab, 0x50, 0xa9,
	0xb8, 0x4e, 0x8d, 0x8d, 0x22, 0xd1, 0x2d, 0x4b, 0x2b, 0x7a, 0x14, 0x39, 0xc9, 0x78, 0x36, 0x87,
	0x1a, 0x72, 0x71, 0x83, 0x40, 0xaf, 0x20, 0xa9, 0x38, 0xd2, 0x54, 0x0d, 0x56, 0x6c, 0xf8, 0x3c,
	0xe7, 0x3a, 0x79, 0x73, 0xaa, 0x00, 0x71, 0x93, 0x2c, 0x7b, 0x85, 0xef, 0xb1, 0x0d, 0x0b, 0xd2,
	0xea, 0x92, 0xc8, 0x89, 0x4b, 0x59, 0x80, 0xe0, 0x14, 0x4e, 0xcf, 0xe3, 0xc8, 0xd1, 0xb1, 0x2c,
	0x88, 0x27, 0x69, 0x40, 0x8a, 0xff, 0x37, 0xa3, 0xc3, 0x80, 0x44, 0x9b, 0xd6, 0xcd, 0x72, 0x10,
	0x9b, 0x3e, 0x03, 0x52, 0x28, 0x36, 0x39, 0x82, 0x5c, 0xdc, 0xf2, 0x28, 0x29, 0xfc, 0x36, 0x5b,
	0x33, 0xd2, 0xa9, 0x32, 0x13, 0xb7, 0xa9, 0x74, 0x8d, 0x86, 0x76, 0x6b, 0xed, 0x40, 0xdc, 0xf1,
	0xd9, 0xa1, 0xcc, 0xbf, 0x60, 0x6b, 0x23, 0x99, 0x66, 0x60, 0x85, 0xa0, 0x2e, 0xfe, 0x78, 0x69,
	0x17, 0x63, 0x98, 0x43, 0xf4, 0x1c, 0x35, 0xa7, 0xd0, 0x17, 0x85, 0x62, 0xc5, 0x96, 0xef, 0x63,
	0xaf, 0x61, 0x23, 0x14, 0x3a, 0x9d, 0xe6, 0x80, 0xa3, 0x71, 0x9b, 0x78, 0xe8, 0x78, 0xe0, 0x28,
	0xc5, 0xc5, 0x5c, 0xd5, 0x10, 0xe7, 0xaa, 0x3c, 0x11, 0x77, 0xe9, 0x5c, 0x07, 0x81, 0xef, 0x54,
	0x79, 0xc2, 0x77, 0xd9, 0x3a, 0x3a, 0x8c, 0xcb, 0xb1, 0x8b, 0x4b, 0x38, 0x15, 0xf7, 0x28, 0x5a,
	0x86, 0xd8, 0xf1, 0xd8, 0x1d, 0xc3, 0x29, 0xff, 0x96, 0x5d, 0xc7, 0x45, 0xda, 0xa5, 0x12, 0x5d,
	0x8a, 0xfb, 0xd4, 0x1f, 0xcb, 0x42, 0x3f, 0x1e, 0xbb, 0x67, 0x32, 0x81, 0xa3, 0x44, 0x97, 0x51,
	0xb7, 0xbc, 0x54, 0xb0, 0x2a, 0xca, 0xc6, 0x16, 0x4a, 0xa5, 0x4d, 0x5c, 0x40, 0x31, 0x02, 0x23,
	0x76, 0xc8, 0x63, 0x4f, 0xd9, 0x21, 0xc1, 0xcf, 0x09, 0xed, 0x27, 0xac, 0xbb, 0x60, 0x05, 0xdf,
	0x1d, 0x03, 0x99, 0x6a, 0xca, 0x49, 0x17, 0x74, 0x35, 0x62, 0x1e, 0x9a, 0x77, 0x3b, 0x05, 0xe7,
	0x6f, 0x29, 0xc9, 0x78, 0x88, 0x26, 0xaa, 0x75, 0xd2, 0x4d, 0x6d, 0x33, 0x8a, 0x68, 0xc8, 0x0e,
	0x09, 0xe9, 0x7f, 0xc6, 0x7a, 0x57, 0x5b, 0x19, 0xcd, 0x2c, 0x38, 0x20, 0x19, 0xb1, 0x14, 0x6c,
	0x32, 0x37, 0x8d, 0x72, 0xff, 0xed, 0x0a, 0xeb, 0x2e, 0x14, 0x88, 0xce, 0xc1, 0x99, 0x9b, 0x4f,
	0x0e, 0x94, 0xf1, 0x5e, 0xe3, 0x7f, 0x9c, 0xe8, 0x5c, 0x9b, 0xe6, 0x74, 0x88, 0xc8, 0x57, 0x08,
	0x20, 0x17, 0x97, 0xcb, 0x71, 0x49, 0x03, 0xd5, 0xcf, 0x92, 0xde, 0xc5, 0xa6, 0x63, 0x9a, 0xaa,
	0x5b, 0xac, 0x33, 0xca, 0x1a, 0x33, 0xfe, 0xc5, 0x68, 0x8f, 0x32, 0x6f, 0xe4, 0x23, 0xd6, 0x9b,
	0x2f, 0x35, 0x26, 0xfc, 0x68, 0x59, 0x6f, 0x36, 0x78, 0x03, 0x0f, 0xd8, 0xfa, 0x48, 0x9b, 0x14,
	0x4c, 0x63, 0xc4, 0x3f, 0x20, 0x5d, 0x8f, 0x79, 0x43, 0x8f, 0x18, 0x5f, 0xdc, 0xd2, 0x18, 0xf3,
	0xf3, 0x66, 0x63, 0x61, 0xe3, 0x62, 0x44, 0xfe, 0x8a, 0xf8, 0xb9, 0xd3, 0x1e, 0x65, 0xc4, 0xc4,
	0xe1, 0x79, 0xc0, 0xd6, 0x86, 0xf4, 0x01, 0xc2, 0x4b, 0xd6, 0x69, 0xa6, 0xfc, 0x13, 0xbe, 0xbf,
	0xa4, 0x5d, 0xde, 0xf5, 0x04, 0x6d, 0x1f, 0xfc, 0xb7, 0x03, 0xf8, 0x76, 0x4c, 0xd8, 0xfa, 0xe2,
	0x73, 0xcd, 0x3f, 0x5d, 0x62, 0xe2, 0x1f, 0x1f, 0x3b, 0xdb, 0x8f, 0xde, 0x7b, 0x6f, 0x95, 0xcf,
	0x9e, 0xbe, 0xfc, 0xed, 0x7c, 0x27, 0xf8, 0xfd, 0x7c, 0x27, 0xf8, 0xf3, 0x7c, 0x27, 0xf8, 0xe5,
	0xaf, 0x9d, 0xff, 0xb1, 0x0f, 0x13, 0x5d, 0x5c, 0x9a, 0xc8, 0x4c, 0x95, 0x5c, 0xb5, 0x63, 0x07,
	0xf5, 0xc1, 0x8b, 0xe0, 0xc7, 0x96, 0xac, 0xd4, 0xaf, 0x2b, 0xb7, 0x9e, 0x7e, 0xf9, 0xe2, 0xe8,
	0x68, 0xbe, 0xf4, 0xea, 0xc0, 0xf3, 0x35, 0x5a, 0xa3, 0xcf, 0xb4, 0x27, 0x7f, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x29, 0x91, 0x41, 0x71, 0xdc, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchClient interface {
	// 搜索联想词
	Suggest3(ctx context.Context, in *SuggestionResult3Req, opts ...grpc.CallOption) (*SuggestionResult3Reply, error)
	// 默认搜索词
	DefaultWords(ctx context.Context, in *DefaultWordsReq, opts ...grpc.CallOption) (*DefaultWordsReply, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) Suggest3(ctx context.Context, in *SuggestionResult3Req, opts ...grpc.CallOption) (*SuggestionResult3Reply, error) {
	out := new(SuggestionResult3Reply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Search/Suggest3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) DefaultWords(ctx context.Context, in *DefaultWordsReq, opts ...grpc.CallOption) (*DefaultWordsReply, error) {
	out := new(DefaultWordsReply)
	err := c.cc.Invoke(ctx, "/bilibili.app.interface.v1.Search/DefaultWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
type SearchServer interface {
	// 搜索联想词
	Suggest3(context.Context, *SuggestionResult3Req) (*SuggestionResult3Reply, error)
	// 默认搜索词
	DefaultWords(context.Context, *DefaultWordsReq) (*DefaultWordsReply, error)
}

// UnimplementedSearchServer can be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (*UnimplementedSearchServer) Suggest3(ctx context.Context, req *SuggestionResult3Req) (*SuggestionResult3Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest3 not implemented")
}
func (*UnimplementedSearchServer) DefaultWords(ctx context.Context, req *DefaultWordsReq) (*DefaultWordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultWords not implemented")
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_Suggest3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestionResult3Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Suggest3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Search/Suggest3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Suggest3(ctx, req.(*SuggestionResult3Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_DefaultWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultWordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).DefaultWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bilibili.app.interface.v1.Search/DefaultWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).DefaultWords(ctx, req.(*DefaultWordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bilibili.app.interface.v1.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Suggest3",
			Handler:    _Search_Suggest3_Handler,
		},
		{
			MethodName: "DefaultWords",
			Handler:    _Search_DefaultWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/app-search/api/v1/api.proto",
}

func (m *DefaultWordsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultWordsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultWordsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFresh != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsFresh))
		i--
		dAtA[i] = 0x50
	}
	if m.An != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.An))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Avid) > 0 {
		i -= len(m.Avid)
		copy(dAtA[i:], m.Avid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Avid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tab) > 0 {
		i -= len(m.Tab)
		copy(dAtA[i:], m.Tab)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tab)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LessonsMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LessonsMode))
		i--
		dAtA[i] = 0x20
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x18
	}
	if m.LoginEvent != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LoginEvent))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefaultWordsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultWordsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultWordsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExpStr) > 0 {
		i -= len(m.ExpStr)
		copy(dAtA[i:], m.ExpStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExpStr)))
		i--
		dAtA[i] = 0x32
	}
	if m.ShowFront != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShowFront))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Word) > 0 {
		i -= len(m.Word)
		copy(dAtA[i:], m.Word)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Word)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Show) > 0 {
		i -= len(m.Show)
		copy(dAtA[i:], m.Show)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Show)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Trackid) > 0 {
		i -= len(m.Trackid)
		copy(dAtA[i:], m.Trackid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Trackid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuggestionResult3Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestionResult3Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestionResult3Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x18
	}
	if m.Highlight != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Highlight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuggestionResult3Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestionResult3Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestionResult3Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExpStr) > 0 {
		i -= len(m.ExpStr)
		copy(dAtA[i:], m.ExpStr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExpStr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Trackid) > 0 {
		i -= len(m.Trackid)
		copy(dAtA[i:], m.Trackid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Trackid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResultItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSeniorMember != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsSeniorMember))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.NftFaceIcon != nil {
		{
			size, err := m.NftFaceIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.FaceNftNew != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FaceNftNew))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.LiveLink) > 0 {
		i -= len(m.LiveLink)
		copy(dAtA[i:], m.LiveLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LiveLink)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.ModuleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.Styles) > 0 {
		i -= len(m.Styles)
		copy(dAtA[i:], m.Styles)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Styles)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Badges) > 0 {
		for iNdEx := len(m.Badges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Badges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.Vote != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Rating != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Rating))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb1
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Style) > 0 {
		i -= len(m.Style)
		copy(dAtA[i:], m.Style)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Style)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Area) > 0 {
		i -= len(m.Area)
		copy(dAtA[i:], m.Area)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.SeasonTypeName) > 0 {
		i -= len(m.SeasonTypeName)
		copy(dAtA[i:], m.SeasonTypeName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SeasonTypeName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Ptime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ptime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Archives != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Archives))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Level != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x78
	}
	if m.Fans != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fans))
		i--
		dAtA[i] = 0x70
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0x62
	}
	if m.OfficialVerify != nil {
		{
			size, err := m.OfficialVerify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Goto) > 0 {
		i -= len(m.Goto)
		copy(dAtA[i:], m.Goto)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Goto)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TermType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TermType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SugType) > 0 {
		i -= len(m.SugType)
		copy(dAtA[i:], m.SugType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SugType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CoverSize != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CoverSize))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Position != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftFaceIcon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftFaceIcon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftFaceIcon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ShowStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x12
	}
	if m.RegionType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RegionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OfficialVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfficialVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReasonStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReasonStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReasonStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BgStyle != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BgStyle))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BorderColorNight) > 0 {
		i -= len(m.BorderColorNight)
		copy(dAtA[i:], m.BorderColorNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BorderColorNight)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BorderColor) > 0 {
		i -= len(m.BorderColor)
		copy(dAtA[i:], m.BorderColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BorderColor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BgColorNight) > 0 {
		i -= len(m.BgColorNight)
		copy(dAtA[i:], m.BgColorNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColorNight)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TextColorNight) > 0 {
		i -= len(m.TextColorNight)
		copy(dAtA[i:], m.TextColorNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TextColorNight)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DefaultWordsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.LoginEvent != 0 {
		n += 1 + sovApi(uint64(m.LoginEvent))
	}
	if m.TeenagersMode != 0 {
		n += 1 + sovApi(uint64(m.TeenagersMode))
	}
	if m.LessonsMode != 0 {
		n += 1 + sovApi(uint64(m.LessonsMode))
	}
	l = len(m.Tab)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Avid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.An != 0 {
		n += 1 + sovApi(uint64(m.An))
	}
	if m.IsFresh != 0 {
		n += 1 + sovApi(uint64(m.IsFresh))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefaultWordsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trackid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Show)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Word)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShowFront != 0 {
		n += 1 + sovApi(uint64(m.ShowFront))
	}
	l = len(m.ExpStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SuggestionResult3Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Highlight != 0 {
		n += 1 + sovApi(uint64(m.Highlight))
	}
	if m.TeenagersMode != 0 {
		n += 1 + sovApi(uint64(m.TeenagersMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SuggestionResult3Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trackid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.ExpStr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResultItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovApi(uint64(m.Position))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CoverSize != 0 {
		n += 9
	}
	l = len(m.SugType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TermType != 0 {
		n += 1 + sovApi(uint64(m.TermType))
	}
	l = len(m.Goto)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OfficialVerify != nil {
		l = m.OfficialVerify.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Fans != 0 {
		n += 1 + sovApi(uint64(m.Fans))
	}
	if m.Level != 0 {
		n += 1 + sovApi(uint64(m.Level))
	}
	if m.Archives != 0 {
		n += 2 + sovApi(uint64(m.Archives))
	}
	if m.Ptime != 0 {
		n += 2 + sovApi(uint64(m.Ptime))
	}
	l = len(m.SeasonTypeName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Area)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Style)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Rating != 0 {
		n += 10
	}
	if m.Vote != 0 {
		n += 2 + sovApi(uint64(m.Vote))
	}
	if len(m.Badges) > 0 {
		for _, e := range m.Badges {
			l = e.Size()
			n += 2 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Styles)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ModuleId != 0 {
		n += 2 + sovApi(uint64(m.ModuleId))
	}
	l = len(m.LiveLink)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.FaceNftNew != 0 {
		n += 2 + sovApi(uint64(m.FaceNftNew))
	}
	if m.NftFaceIcon != nil {
		l = m.NftFaceIcon.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.IsSeniorMember != 0 {
		n += 2 + sovApi(uint64(m.IsSeniorMember))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NftFaceIcon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionType != 0 {
		n += 1 + sovApi(uint64(m.RegionType))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShowStatus != 0 {
		n += 1 + sovApi(uint64(m.ShowStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReasonStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TextColorNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BgColorNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BorderColor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BorderColorNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BgStyle != 0 {
		n += 1 + sovApi(uint64(m.BgStyle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DefaultWordsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultWordsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultWordsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginEvent", wireType)
			}
			m.LoginEvent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginEvent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonsMode", wireType)
			}
			m.LessonsMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LessonsMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tab = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field An", wireType)
			}
			m.An = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.An |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFresh", wireType)
			}
			m.IsFresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFresh |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultWordsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultWordsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultWordsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trackid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trackid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Show = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Word", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Word = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowFront", wireType)
			}
			m.ShowFront = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowFront |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestionResult3Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestionResult3Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestionResult3Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highlight", wireType)
			}
			m.Highlight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Highlight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestionResult3Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestionResult3Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestionResult3Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trackid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trackid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ResultItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverSize", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CoverSize = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SugType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SugType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermType", wireType)
			}
			m.TermType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OfficialVerify == nil {
				m.OfficialVerify = &OfficialVerify{}
			}
			if err := m.OfficialVerify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			m.Fans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fans |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			m.Archives = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Archives |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptime", wireType)
			}
			m.Ptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Style = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Rating = float64(math.Float64frombits(v))
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badges = append(m.Badges, &ReasonStyle{})
			if err := m.Badges[len(m.Badges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Styles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Styles = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceNftNew", wireType)
			}
			m.FaceNftNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaceNftNew |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftFaceIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftFaceIcon == nil {
				m.NftFaceIcon = &NftFaceIcon{}
			}
			if err := m.NftFaceIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSeniorMember", wireType)
			}
			m.IsSeniorMember = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSeniorMember |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftFaceIcon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftFaceIcon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftFaceIcon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionType", wireType)
			}
			m.RegionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowStatus", wireType)
			}
			m.ShowStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReasonStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReasonStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReasonStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColorNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColorNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgStyle", wireType)
			}
			m.BgStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
