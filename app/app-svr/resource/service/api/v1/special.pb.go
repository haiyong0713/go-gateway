// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: special.proto

// use {app_id}.{version} as package name

package v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SpecialCard struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Cover                string   `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	SingleCover          string   `protobuf:"bytes,5,opt,name=single_cover,json=singleCover,proto3" json:"single_cover,omitempty"`
	GifCover             string   `protobuf:"bytes,6,opt,name=gif_cover,json=gifCover,proto3" json:"gif_cover,omitempty"`
	BgCover              string   `protobuf:"bytes,7,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	Reason               string   `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	TabUri               string   `protobuf:"bytes,9,opt,name=tab_uri,json=tabUri,proto3" json:"tab_uri,omitempty"`
	ReType               int32    `protobuf:"varint,10,opt,name=re_type,json=reType,proto3" json:"re_type,omitempty"`
	ReValue              string   `protobuf:"bytes,11,opt,name=re_value,json=reValue,proto3" json:"re_value,omitempty"`
	Badge                string   `protobuf:"bytes,12,opt,name=badge,proto3" json:"badge,omitempty"`
	Size_                string   `protobuf:"bytes,13,opt,name=size,proto3" json:"size,omitempty"`
	PowerPicSun          string   `protobuf:"bytes,14,opt,name=power_pic_sun,json=powerPicSun,proto3" json:"power_pic_sun,omitempty"`
	PowerPicNight        string   `protobuf:"bytes,15,opt,name=power_pic_night,json=powerPicNight,proto3" json:"power_pic_night,omitempty"`
	PowerPicWidth        float64  `protobuf:"fixed64,16,opt,name=power_pic_width,json=powerPicWidth,proto3" json:"power_pic_width,omitempty"`
	PowerPicHeight       float64  `protobuf:"fixed64,17,opt,name=power_pic_height,json=powerPicHeight,proto3" json:"power_pic_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecialCard) Reset()         { *m = SpecialCard{} }
func (m *SpecialCard) String() string { return proto.CompactTextString(m) }
func (*SpecialCard) ProtoMessage()    {}
func (*SpecialCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_10e884b0e0e88d96, []int{0}
}
func (m *SpecialCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialCard.Merge(m, src)
}
func (m *SpecialCard) XXX_Size() int {
	return m.Size()
}
func (m *SpecialCard) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialCard.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialCard proto.InternalMessageInfo

func (m *SpecialCard) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SpecialCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SpecialCard) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *SpecialCard) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *SpecialCard) GetSingleCover() string {
	if m != nil {
		return m.SingleCover
	}
	return ""
}

func (m *SpecialCard) GetGifCover() string {
	if m != nil {
		return m.GifCover
	}
	return ""
}

func (m *SpecialCard) GetBgCover() string {
	if m != nil {
		return m.BgCover
	}
	return ""
}

func (m *SpecialCard) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *SpecialCard) GetTabUri() string {
	if m != nil {
		return m.TabUri
	}
	return ""
}

func (m *SpecialCard) GetReType() int32 {
	if m != nil {
		return m.ReType
	}
	return 0
}

func (m *SpecialCard) GetReValue() string {
	if m != nil {
		return m.ReValue
	}
	return ""
}

func (m *SpecialCard) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *SpecialCard) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func (m *SpecialCard) GetPowerPicSun() string {
	if m != nil {
		return m.PowerPicSun
	}
	return ""
}

func (m *SpecialCard) GetPowerPicNight() string {
	if m != nil {
		return m.PowerPicNight
	}
	return ""
}

func (m *SpecialCard) GetPowerPicWidth() float64 {
	if m != nil {
		return m.PowerPicWidth
	}
	return 0
}

func (m *SpecialCard) GetPowerPicHeight() float64 {
	if m != nil {
		return m.PowerPicHeight
	}
	return 0
}

type SpecialCardReply struct {
	List                 []*SpecialCard `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SpecialCardReply) Reset()         { *m = SpecialCardReply{} }
func (m *SpecialCardReply) String() string { return proto.CompactTextString(m) }
func (*SpecialCardReply) ProtoMessage()    {}
func (*SpecialCardReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10e884b0e0e88d96, []int{1}
}
func (m *SpecialCardReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialCardReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialCardReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialCardReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialCardReply.Merge(m, src)
}
func (m *SpecialCardReply) XXX_Size() int {
	return m.Size()
}
func (m *SpecialCardReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialCardReply.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialCardReply proto.InternalMessageInfo

func (m *SpecialCardReply) GetList() []*SpecialCard {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*SpecialCard)(nil), "resource.service.v1.SpecialCard")
	proto.RegisterType((*SpecialCardReply)(nil), "resource.service.v1.SpecialCardReply")
}

func init() { proto.RegisterFile("special.proto", fileDescriptor_10e884b0e0e88d96) }

var fileDescriptor_10e884b0e0e88d96 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x8a, 0xd4, 0x40,
	0x14, 0x86, 0xa9, 0xbe, 0xf7, 0xe9, 0x49, 0x4f, 0x2c, 0x45, 0x4b, 0x84, 0x26, 0xf6, 0x42, 0xb2,
	0x0a, 0x8c, 0xfa, 0x04, 0xce, 0x66, 0x56, 0x22, 0x3d, 0x5e, 0xc0, 0x4d, 0xc8, 0xe5, 0x4c, 0xfa,
	0x40, 0x48, 0x42, 0x55, 0x25, 0x43, 0xfb, 0x84, 0x2e, 0x7d, 0x04, 0x69, 0xf0, 0x3d, 0xa4, 0x4e,
	0xf5, 0xd0, 0x23, 0xb8, 0xab, 0xf3, 0x7f, 0x5f, 0xa5, 0xf8, 0xc9, 0x81, 0xc0, 0x74, 0x58, 0x50,
	0x56, 0x27, 0x9d, 0x6e, 0x6d, 0x2b, 0x9f, 0x6a, 0x34, 0x6d, 0xaf, 0x0b, 0x4c, 0x0c, 0xea, 0x81,
	0x0a, 0x4c, 0x86, 0xab, 0xed, 0x9f, 0x31, 0xac, 0x6e, 0xbd, 0x76, 0x9d, 0xe9, 0x52, 0xae, 0x61,
	0x44, 0xa5, 0x12, 0x91, 0x88, 0xc7, 0xbb, 0x11, 0x95, 0xf2, 0x19, 0x4c, 0x2d, 0xd9, 0x1a, 0xd5,
	0x28, 0x12, 0xf1, 0x72, 0xe7, 0x07, 0x29, 0x61, 0x52, 0xa2, 0x29, 0xd4, 0x98, 0x43, 0x3e, 0x3b,
	0xb3, 0x68, 0x07, 0xd4, 0x6a, 0xe2, 0x4d, 0x1e, 0xe4, 0x6b, 0xb8, 0x30, 0xd4, 0x54, 0x35, 0xa6,
	0x1e, 0x4e, 0x19, 0xae, 0x7c, 0x76, 0xcd, 0xca, 0x2b, 0x58, 0x56, 0x74, 0x77, 0xe2, 0x33, 0xe6,
	0x8b, 0x8a, 0xee, 0x3c, 0x7c, 0x09, 0x8b, 0xbc, 0x3a, 0xb1, 0x39, 0xb3, 0x79, 0x5e, 0x79, 0xf4,
	0x1c, 0x66, 0x1a, 0x33, 0xd3, 0x36, 0x6a, 0xc1, 0xe0, 0x34, 0xc9, 0x17, 0x30, 0xb7, 0x59, 0x9e,
	0xf6, 0x9a, 0xd4, 0xd2, 0x03, 0x9b, 0xe5, 0x5f, 0x34, 0x39, 0xa0, 0x31, 0xb5, 0x87, 0x0e, 0x15,
	0x44, 0x22, 0x9e, 0xba, 0x1b, 0x9f, 0x0f, 0x1d, 0xba, 0x47, 0x34, 0xa6, 0x43, 0x56, 0xf7, 0xa8,
	0x56, 0xfe, 0x11, 0x8d, 0x5f, 0xdd, 0xe8, 0x5a, 0xe5, 0x59, 0x59, 0xa1, 0xba, 0xf0, 0xad, 0x78,
	0x70, 0xfd, 0x0d, 0xfd, 0x40, 0x15, 0xf8, 0xfe, 0xee, 0x2c, 0xb7, 0x10, 0x74, 0xed, 0x3d, 0xea,
	0xb4, 0xa3, 0x22, 0x35, 0x7d, 0xa3, 0xd6, 0xbe, 0x2a, 0x87, 0x9f, 0xa8, 0xb8, 0xed, 0x1b, 0xf9,
	0x06, 0x2e, 0xcf, 0x4e, 0x43, 0xd5, 0xde, 0xaa, 0x4b, 0xb6, 0x82, 0x07, 0xeb, 0xa3, 0x0b, 0xff,
	0xf5, 0xee, 0xa9, 0xb4, 0x7b, 0x15, 0x46, 0x22, 0x16, 0x67, 0xef, 0x9b, 0x0b, 0x65, 0x0c, 0xe1,
	0xd9, 0xdb, 0x23, 0x7f, 0xf0, 0x09, 0x8b, 0xeb, 0x07, 0xf1, 0x86, 0xd3, 0xed, 0x0d, 0x84, 0x8f,
	0x7e, 0xf3, 0x0e, 0xbb, 0xfa, 0x20, 0xdf, 0xc3, 0xa4, 0x26, 0x63, 0x95, 0x88, 0xc6, 0xf1, 0xea,
	0x6d, 0x94, 0xfc, 0x67, 0x3f, 0x92, 0xc7, 0x97, 0xd8, 0xfe, 0x10, 0xfe, 0x3c, 0x6e, 0xc4, 0xaf,
	0xe3, 0x46, 0xfc, 0x3e, 0x6e, 0xc4, 0xf7, 0xd1, 0x70, 0x95, 0xcf, 0x78, 0xbf, 0xde, 0xfd, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x80, 0xce, 0xaa, 0x24, 0x70, 0x02, 0x00, 0x00,
}

func (m *SpecialCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PowerPicHeight != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PowerPicHeight))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x89
	}
	if m.PowerPicWidth != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PowerPicWidth))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x81
	}
	if len(m.PowerPicNight) > 0 {
		i -= len(m.PowerPicNight)
		copy(dAtA[i:], m.PowerPicNight)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.PowerPicNight)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PowerPicSun) > 0 {
		i -= len(m.PowerPicSun)
		copy(dAtA[i:], m.PowerPicSun)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.PowerPicSun)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Size_) > 0 {
		i -= len(m.Size_)
		copy(dAtA[i:], m.Size_)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.Size_)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ReValue) > 0 {
		i -= len(m.ReValue)
		copy(dAtA[i:], m.ReValue)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.ReValue)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ReType != 0 {
		i = encodeVarintSpecial(dAtA, i, uint64(m.ReType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TabUri) > 0 {
		i -= len(m.TabUri)
		copy(dAtA[i:], m.TabUri)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.TabUri)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BgCover) > 0 {
		i -= len(m.BgCover)
		copy(dAtA[i:], m.BgCover)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.BgCover)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GifCover) > 0 {
		i -= len(m.GifCover)
		copy(dAtA[i:], m.GifCover)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.GifCover)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SingleCover) > 0 {
		i -= len(m.SingleCover)
		copy(dAtA[i:], m.SingleCover)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.SingleCover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSpecial(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSpecial(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialCardReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialCardReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpecial(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpecial(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpecial(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpecialCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSpecial(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.SingleCover)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.GifCover)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.BgCover)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.TabUri)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	if m.ReType != 0 {
		n += 1 + sovSpecial(uint64(m.ReType))
	}
	l = len(m.ReValue)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.PowerPicSun)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	l = len(m.PowerPicNight)
	if l > 0 {
		n += 1 + l + sovSpecial(uint64(l))
	}
	if m.PowerPicWidth != 0 {
		n += 10
	}
	if m.PowerPicHeight != 0 {
		n += 10
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialCardReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSpecial(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpecial(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpecial(x uint64) (n int) {
	return sovSpecial(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpecialCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SingleCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GifCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GifCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReType", wireType)
			}
			m.ReType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicSun", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPicSun = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPicNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicWidth", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PowerPicWidth = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicHeight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PowerPicHeight = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSpecial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecial
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpecial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecial
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecial
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SpecialCard{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecial
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpecial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpecial(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpecial
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecial
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpecial
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpecial
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpecial
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpecial        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpecial          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpecial = fmt.Errorf("proto: unexpected end of group")
)
