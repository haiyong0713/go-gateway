// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContestStatusEnum int32

const (
	// 初始化状态，一般不会有，有则表示未开始
	ContestStatusEnum_Init ContestStatusEnum = 0
	// 未开始
	ContestStatusEnum_Waiting ContestStatusEnum = 1
	// 2进行中
	ContestStatusEnum_Ing ContestStatusEnum = 2
	// 3已结束
	ContestStatusEnum_Over ContestStatusEnum = 3
)

var ContestStatusEnum_name = map[int32]string{
	0: "Init",
	1: "Waiting",
	2: "Ing",
	3: "Over",
}

var ContestStatusEnum_value = map[string]int32{
	"Init":    0,
	"Waiting": 1,
	"Ing":     2,
	"Over":    3,
}

func (x ContestStatusEnum) String() string {
	return proto.EnumName(ContestStatusEnum_name, int32(x))
}

func (ContestStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type ContestFrozenEnum int32

const (
	// 未冻结，可展示，
	ContestFrozenEnum_False ContestFrozenEnum = 0
	// 被冻结，不可展示，被冻结赛程的信息一般不被返回
	ContestFrozenEnum_True ContestFrozenEnum = 1
)

var ContestFrozenEnum_name = map[int32]string{
	0: "False",
	1: "True",
}

var ContestFrozenEnum_value = map[string]int32{
	"False": 0,
	"True":  1,
}

func (x ContestFrozenEnum) String() string {
	return proto.EnumName(ContestFrozenEnum_name, int32(x))
}

func (ContestFrozenEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type GuessStatusEnum int32

const (
	// 竞猜可参与时未竞猜
	GuessStatusEnum_HasGuessNoGuessed GuessStatusEnum = 0
	// 竞猜可参与时已竞猜
	GuessStatusEnum_HasGuessGuessed GuessStatusEnum = 1
	// 当前竞猜不可参与，之前未参与
	GuessStatusEnum_HasGuessOverNoGuessed GuessStatusEnum = 2
	// 当前竞猜不可参与，之前已参与
	GuessStatusEnum_HasGuessOverGuessed GuessStatusEnum = 3
	// 无竞猜，不可参与&无需参与
	GuessStatusEnum_HasNoGuess GuessStatusEnum = 4
)

var GuessStatusEnum_name = map[int32]string{
	0: "HasGuessNoGuessed",
	1: "HasGuessGuessed",
	2: "HasGuessOverNoGuessed",
	3: "HasGuessOverGuessed",
	4: "HasNoGuess",
}

var GuessStatusEnum_value = map[string]int32{
	"HasGuessNoGuessed":     0,
	"HasGuessGuessed":       1,
	"HasGuessOverNoGuessed": 2,
	"HasGuessOverGuessed":   3,
	"HasNoGuess":            4,
}

func (x GuessStatusEnum) String() string {
	return proto.EnumName(GuessStatusEnum_name, int32(x))
}

func (GuessStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

type SubscribedStatusEnum int32

const (
	// 可订阅时未订阅
	SubscribedStatusEnum_CanSubNoSub SubscribedStatusEnum = 0
	// 可订阅时已订阅
	SubscribedStatusEnum_CanSubSubed SubscribedStatusEnum = 1
	// 当前不可订阅，之前未参与
	SubscribedStatusEnum_CanSubOverNoSub SubscribedStatusEnum = 2
	// 当前不可订阅，之前已参与
	SubscribedStatusEnum_CanSubOverSubed SubscribedStatusEnum = 3
	// 不可订阅，无需订阅
	SubscribedStatusEnum_CanNotSub SubscribedStatusEnum = 4
)

var SubscribedStatusEnum_name = map[int32]string{
	0: "CanSubNoSub",
	1: "CanSubSubed",
	2: "CanSubOverNoSub",
	3: "CanSubOverSubed",
	4: "CanNotSub",
}

var SubscribedStatusEnum_value = map[string]int32{
	"CanSubNoSub":     0,
	"CanSubSubed":     1,
	"CanSubOverNoSub": 2,
	"CanSubOverSubed": 3,
	"CanNotSub":       4,
}

func (x SubscribedStatusEnum) String() string {
	return proto.EnumName(SubscribedStatusEnum_name, int32(x))
}

func (SubscribedStatusEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

type GetTeamsRequest struct {
	// 获取特定战队的信息单次数量不可超100
	TeamIds              []int64  `protobuf:"varint,1,rep,packed,name=teamIds,proto3" json:"teamIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTeamsRequest) Reset()         { *m = GetTeamsRequest{} }
func (m *GetTeamsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTeamsRequest) ProtoMessage()    {}
func (*GetTeamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *GetTeamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamsRequest.Merge(m, src)
}
func (m *GetTeamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamsRequest proto.InternalMessageInfo

func (m *GetTeamsRequest) GetTeamIds() []int64 {
	if m != nil {
		return m.TeamIds
	}
	return nil
}

type TeamsResponse struct {
	Teams                []*TeamDetail `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TeamsResponse) Reset()         { *m = TeamsResponse{} }
func (m *TeamsResponse) String() string { return proto.CompactTextString(m) }
func (*TeamsResponse) ProtoMessage()    {}
func (*TeamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *TeamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamsResponse.Merge(m, src)
}
func (m *TeamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeamsResponse proto.InternalMessageInfo

func (m *TeamsResponse) GetTeams() []*TeamDetail {
	if m != nil {
		return m.Teams
	}
	return nil
}

// 游戏请求参数
type GetGamesRequest struct {
	// 是否获取指定的游戏信息，否则获取全部
	GameIds              []int64  `protobuf:"varint,1,rep,packed,name=gameIds,proto3" json:"gameIds,omitempty"`
	Cursor               int64    `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	CursorSize           int64    `protobuf:"varint,3,opt,name=cursorSize,proto3" json:"cursorSize,omitempty" validate:"min=1,max=500"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGamesRequest) Reset()         { *m = GetGamesRequest{} }
func (m *GetGamesRequest) String() string { return proto.CompactTextString(m) }
func (*GetGamesRequest) ProtoMessage()    {}
func (*GetGamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GetGamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGamesRequest.Merge(m, src)
}
func (m *GetGamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetGamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGamesRequest proto.InternalMessageInfo

func (m *GetGamesRequest) GetGameIds() []int64 {
	if m != nil {
		return m.GameIds
	}
	return nil
}

func (m *GetGamesRequest) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *GetGamesRequest) GetCursorSize() int64 {
	if m != nil {
		return m.CursorSize
	}
	return 0
}

// 游戏数据
type GameDetail struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//中文全称
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//游戏简称
	SubTitle string `protobuf:"bytes,3,opt,name=subTitle,proto3" json:"subTitle,omitempty"`
	//英文全称
	ETitle string `protobuf:"bytes,4,opt,name=eTitle,proto3" json:"eTitle,omitempty"`
	//平台
	Plat int64 `protobuf:"varint,5,opt,name=plat,proto3" json:"plat,omitempty"`
	//游戏类型
	GameType int64 `protobuf:"varint,6,opt,name=gameType,proto3" json:"gameType,omitempty"`
	//游戏 logo
	Logo string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	//发行商
	Publisher string `protobuf:"bytes,8,opt,name=publisher,proto3" json:"publisher,omitempty"`
	//运行商
	Operations string `protobuf:"bytes,9,opt,name=operations,proto3" json:"operations,omitempty"`
	//发布时间
	PbTime int64 `protobuf:"varint,10,opt,name=pbTime,proto3" json:"pbTime,omitempty"`
	//备注
	Dic string `protobuf:"bytes,11,opt,name=dic,proto3" json:"dic,omitempty"`
	//LOGO全
	LogoFull string `protobuf:"bytes,12,opt,name=logoFull,proto3" json:"logoFull,omitempty"`
	// 排序
	Rank                 int64    `protobuf:"varint,13,opt,name=rank,proto3" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameDetail) Reset()         { *m = GameDetail{} }
func (m *GameDetail) String() string { return proto.CompactTextString(m) }
func (*GameDetail) ProtoMessage()    {}
func (*GameDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GameDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameDetail.Merge(m, src)
}
func (m *GameDetail) XXX_Size() int {
	return m.Size()
}
func (m *GameDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_GameDetail.DiscardUnknown(m)
}

var xxx_messageInfo_GameDetail proto.InternalMessageInfo

func (m *GameDetail) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GameDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GameDetail) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *GameDetail) GetETitle() string {
	if m != nil {
		return m.ETitle
	}
	return ""
}

func (m *GameDetail) GetPlat() int64 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *GameDetail) GetGameType() int64 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *GameDetail) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *GameDetail) GetPublisher() string {
	if m != nil {
		return m.Publisher
	}
	return ""
}

func (m *GameDetail) GetOperations() string {
	if m != nil {
		return m.Operations
	}
	return ""
}

func (m *GameDetail) GetPbTime() int64 {
	if m != nil {
		return m.PbTime
	}
	return 0
}

func (m *GameDetail) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *GameDetail) GetLogoFull() string {
	if m != nil {
		return m.LogoFull
	}
	return ""
}

func (m *GameDetail) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

// 游戏列表返回，cursor返回为0或games列表为空时无需翻页
type GamesResponse struct {
	Games                []*GameDetail `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	Cursor               int64         `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GamesResponse) Reset()         { *m = GamesResponse{} }
func (m *GamesResponse) String() string { return proto.CompactTextString(m) }
func (*GamesResponse) ProtoMessage()    {}
func (*GamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamesResponse.Merge(m, src)
}
func (m *GamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GamesResponse proto.InternalMessageInfo

func (m *GamesResponse) GetGames() []*GameDetail {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *GamesResponse) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

// 赛程订阅用户列表
type ContestSubscribers struct {
	Cursor               int64    `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	User                 []*User  `protobuf:"bytes,2,rep,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContestSubscribers) Reset()         { *m = ContestSubscribers{} }
func (m *ContestSubscribers) String() string { return proto.CompactTextString(m) }
func (*ContestSubscribers) ProtoMessage()    {}
func (*ContestSubscribers) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *ContestSubscribers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestSubscribers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestSubscribers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestSubscribers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestSubscribers.Merge(m, src)
}
func (m *ContestSubscribers) XXX_Size() int {
	return m.Size()
}
func (m *ContestSubscribers) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestSubscribers.DiscardUnknown(m)
}

var xxx_messageInfo_ContestSubscribers proto.InternalMessageInfo

func (m *ContestSubscribers) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *ContestSubscribers) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Oid                  int64    `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Typ                  int32    `protobuf:"varint,4,opt,name=typ,proto3" json:"typ,omitempty"`
	State                int32    `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	Ctime                int64    `protobuf:"varint,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime                int64    `protobuf:"varint,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *User) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *User) GetTyp() int32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *User) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *User) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *User) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type GetSubscribersRequest struct {
	Cid                  int64    `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty" validate:"required"`
	Cursor               int64    `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	CursorSize           int32    `protobuf:"varint,3,opt,name=cursorSize,proto3" json:"cursorSize,omitempty" validate:"min=1,max=500"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubscribersRequest) Reset()         { *m = GetSubscribersRequest{} }
func (m *GetSubscribersRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscribersRequest) ProtoMessage()    {}
func (*GetSubscribersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *GetSubscribersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscribersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscribersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscribersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscribersRequest.Merge(m, src)
}
func (m *GetSubscribersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscribersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscribersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscribersRequest proto.InternalMessageInfo

func (m *GetSubscribersRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *GetSubscribersRequest) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *GetSubscribersRequest) GetCursorSize() int32 {
	if m != nil {
		return m.CursorSize
	}
	return 0
}

// 收藏请求参数
type FavRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Cid                  int64    `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FavRequest) Reset()         { *m = FavRequest{} }
func (m *FavRequest) String() string { return proto.CompactTextString(m) }
func (*FavRequest) ProtoMessage()    {}
func (*FavRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *FavRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FavRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FavRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FavRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavRequest.Merge(m, src)
}
func (m *FavRequest) XXX_Size() int {
	return m.Size()
}
func (m *FavRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FavRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FavRequest proto.InternalMessageInfo

func (m *FavRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FavRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// 赛程请求参数
type GetContestRequest struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Cid                  int64    `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetContestRequest) Reset()         { *m = GetContestRequest{} }
func (m *GetContestRequest) String() string { return proto.CompactTextString(m) }
func (*GetContestRequest) ProtoMessage()    {}
func (*GetContestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *GetContestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContestRequest.Merge(m, src)
}
func (m *GetContestRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetContestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetContestRequest proto.InternalMessageInfo

func (m *GetContestRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GetContestRequest) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// 多赛程请求参数
type GetContestsRequest struct {
	Mid  int64   `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Cids []int64 `protobuf:"varint,2,rep,packed,name=cids,proto3" json:"cids,omitempty" validate:"required"`
	// 是否需要返回无效赛程，无效赛程定义为：被冻结的赛程
	NeedInvalid          bool     `protobuf:"varint,3,opt,name=needInvalid,proto3" json:"needInvalid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetContestsRequest) Reset()         { *m = GetContestsRequest{} }
func (m *GetContestsRequest) String() string { return proto.CompactTextString(m) }
func (*GetContestsRequest) ProtoMessage()    {}
func (*GetContestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *GetContestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContestsRequest.Merge(m, src)
}
func (m *GetContestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetContestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetContestsRequest proto.InternalMessageInfo

func (m *GetContestsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GetContestsRequest) GetCids() []int64 {
	if m != nil {
		return m.Cids
	}
	return nil
}

func (m *GetContestsRequest) GetNeedInvalid() bool {
	if m != nil {
		return m.NeedInvalid
	}
	return false
}

// 赛程请求返回
type ContestsResponse struct {
	Contests             []*ContestDetail `protobuf:"bytes,1,rep,name=contests,proto3" json:"contests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ContestsResponse) Reset()         { *m = ContestsResponse{} }
func (m *ContestsResponse) String() string { return proto.CompactTextString(m) }
func (*ContestsResponse) ProtoMessage()    {}
func (*ContestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *ContestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestsResponse.Merge(m, src)
}
func (m *ContestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ContestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ContestsResponse proto.InternalMessageInfo

func (m *ContestsResponse) GetContests() []*ContestDetail {
	if m != nil {
		return m.Contests
	}
	return nil
}

// 开始时间赛程请求参数
type GetTimeContestsRequest struct {
	Stime string `protobuf:"bytes,1,opt,name=stime,proto3" json:"stime,omitempty"`
	Etime string `protobuf:"bytes,2,opt,name=etime,proto3" json:"etime,omitempty"`
	// 过滤赛程绑定的直播间列表
	RoomIds []int64 `protobuf:"varint,3,rep,packed,name=roomIds,proto3" json:"roomIds,omitempty"`
	// mid 获取用户对赛程的用户态信息，例如：订阅、竞猜信息
	Mid int64 `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty"`
	// 过滤游戏id
	GameId int64 `protobuf:"varint,5,opt,name=gameId,proto3" json:"gameId,omitempty"`
	// 过滤战队id
	TeamId int64 `protobuf:"varint,6,opt,name=teamId,proto3" json:"teamId,omitempty"`
	// 过滤渠道列表，渠道对应信息见：
	Channel []int64 `protobuf:"varint,7,rep,packed,name=channel,proto3" json:"channel,omitempty"`
	// 分页获取游标，返回0则无需再翻页
	Cursor int64 `protobuf:"varint,8,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// 分页获取时的页量
	CursorSize int32 `protobuf:"varint,9,opt,name=cursorSize,proto3" json:"cursorSize,omitempty" validate:"min=0,max=100"`
	// 按照时间排序的方式， 0正序，1倒序
	TimeSort int32 `protobuf:"varint,10,opt,name=timeSort,proto3" json:"timeSort,omitempty"`
	// 是否需要返回无效赛程，无效赛程定义为：被冻结的赛程
	NeedInvalid bool `protobuf:"varint,11,opt,name=needInvalid,proto3" json:"needInvalid,omitempty"`
	// 赛事id
	MatchId              int64    `protobuf:"varint,12,opt,name=matchId,proto3" json:"matchId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTimeContestsRequest) Reset()         { *m = GetTimeContestsRequest{} }
func (m *GetTimeContestsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTimeContestsRequest) ProtoMessage()    {}
func (*GetTimeContestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *GetTimeContestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTimeContestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTimeContestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTimeContestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTimeContestsRequest.Merge(m, src)
}
func (m *GetTimeContestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTimeContestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTimeContestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTimeContestsRequest proto.InternalMessageInfo

func (m *GetTimeContestsRequest) GetStime() string {
	if m != nil {
		return m.Stime
	}
	return ""
}

func (m *GetTimeContestsRequest) GetEtime() string {
	if m != nil {
		return m.Etime
	}
	return ""
}

func (m *GetTimeContestsRequest) GetRoomIds() []int64 {
	if m != nil {
		return m.RoomIds
	}
	return nil
}

func (m *GetTimeContestsRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GetTimeContestsRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GetTimeContestsRequest) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *GetTimeContestsRequest) GetChannel() []int64 {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *GetTimeContestsRequest) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *GetTimeContestsRequest) GetCursorSize() int32 {
	if m != nil {
		return m.CursorSize
	}
	return 0
}

func (m *GetTimeContestsRequest) GetTimeSort() int32 {
	if m != nil {
		return m.TimeSort
	}
	return 0
}

func (m *GetTimeContestsRequest) GetNeedInvalid() bool {
	if m != nil {
		return m.NeedInvalid
	}
	return false
}

func (m *GetTimeContestsRequest) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

// 翻页式返回赛程
type GetTimeContestsResponse struct {
	Contests             []*ContestDetail `protobuf:"bytes,1,rep,name=contests,proto3" json:"contests,omitempty"`
	Cursor               int64            `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Cache                bool             `protobuf:"varint,3,opt,name=cache,proto3" json:"cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetTimeContestsResponse) Reset()         { *m = GetTimeContestsResponse{} }
func (m *GetTimeContestsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTimeContestsResponse) ProtoMessage()    {}
func (*GetTimeContestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *GetTimeContestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTimeContestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTimeContestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTimeContestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTimeContestsResponse.Merge(m, src)
}
func (m *GetTimeContestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTimeContestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTimeContestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTimeContestsResponse proto.InternalMessageInfo

func (m *GetTimeContestsResponse) GetContests() []*ContestDetail {
	if m != nil {
		return m.Contests
	}
	return nil
}

func (m *GetTimeContestsResponse) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

func (m *GetTimeContestsResponse) GetCache() bool {
	if m != nil {
		return m.Cache
	}
	return false
}

// 赛程的相关详情， 请求传入用户mid时会多返回用户态相关信息，例如竞猜(IsGuessed)、订阅(isSubscribed)
type ContestDetail struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//比赛阶段文本信息
	GameStage string `protobuf:"bytes,2,opt,name=gameStage,proto3" json:"gameStage,omitempty"`
	//比赛开始时间
	Stime int64 `protobuf:"varint,3,opt,name=stime,proto3" json:"stime,omitempty"`
	//比赛结束时间
	Etime int64 `protobuf:"varint,4,opt,name=etime,proto3" json:"etime,omitempty"`
	//主场队伍id
	HomeID int64 `protobuf:"varint,5,opt,name=homeID,proto3" json:"homeID,omitempty"`
	//客场队伍id
	AwayID int64 `protobuf:"varint,6,opt,name=awayID,proto3" json:"awayID,omitempty"`
	//主场分数
	HomeScore int64 `protobuf:"varint,7,opt,name=homeScore,proto3" json:"homeScore,omitempty"`
	//客场分数
	AwayScore int64 `protobuf:"varint,8,opt,name=awayScore,proto3" json:"awayScore,omitempty"`
	//主场战队信息
	HomeTeam *TeamDetail `protobuf:"bytes,9,opt,name=homeTeam,proto3" json:"homeTeam,omitempty"`
	//客场战队信息
	AwayTeam *TeamDetail `protobuf:"bytes,10,opt,name=awayTeam,proto3" json:"awayTeam,omitempty"`
	//赛季id
	Sid int64 `protobuf:"varint,11,opt,name=sid,proto3" json:"sid,omitempty"`
	//赛季
	Season *SeasonDetail `protobuf:"bytes,12,opt,name=season,proto3" json:"season,omitempty"`
	//赛事id
	Mid int64 `protobuf:"varint,13,opt,name=mid,proto3" json:"mid,omitempty"`
	// 赛程关联的阶段id
	SeriesId int64 `protobuf:"varint,14,opt,name=seriesId,proto3" json:"seriesId,omitempty"`
	// 赛程关联的阶段信息
	Series *SeriesDetail `protobuf:"bytes,15,opt,name=series,proto3" json:"series,omitempty"`
	//直播房间号
	LiveRoom int64 `protobuf:"varint,16,opt,name=liveRoom,proto3" json:"liveRoom,omitempty"`
	//回播房间号
	Aid int64 `protobuf:"varint,17,opt,name=aid,proto3" json:"aid,omitempty"`
	//集锦房间号
	Collection int64 `protobuf:"varint,18,opt,name=collection,proto3" json:"collection,omitempty"`
	// 赛程描述
	Dic string `protobuf:"bytes,19,opt,name=dic,proto3" json:"dic,omitempty"`
	//赛程类型：0普通1特殊
	Special int64 `protobuf:"varint,20,opt,name=special,proto3" json:"special,omitempty"`
	//特殊赛程的胜利战队无主客队仅有胜利队伍
	SuccessTeam int64 `protobuf:"varint,21,opt,name=successTeam,proto3" json:"successTeam,omitempty"`
	//特殊赛程胜利队信息
	SuccessTeamInfo *TeamDetail `protobuf:"bytes,22,opt,name=successTeamInfo,proto3" json:"successTeamInfo,omitempty"`
	//特殊赛程，赛程名称
	SpecialName string `protobuf:"bytes,23,opt,name=specialName,proto3" json:"specialName,omitempty"`
	//特殊赛程，胜利文案
	SpecialTips string `protobuf:"bytes,24,opt,name=specialTips,proto3" json:"specialTips,omitempty"`
	//特殊赛程，赛程图片
	SpecialImage string `protobuf:"bytes,25,opt,name=specialImage,proto3" json:"specialImage,omitempty"`
	//回播房间号url
	Playback string `protobuf:"bytes,26,opt,name=playback,proto3" json:"playback,omitempty"`
	//集锦房间号url
	CollectionURL string `protobuf:"bytes,27,opt,name=collectionURL,proto3" json:"collectionURL,omitempty"`
	//集锦房间号url
	LiveURL string `protobuf:"bytes,28,opt,name=liveURL,proto3" json:"liveURL,omitempty"`
	//比赛数据页类型 0：无 1：LOL 2:DATA2
	DataType int64 `protobuf:"varint,29,opt,name=dataType,proto3" json:"dataType,omitempty"`
	//雷达数据match_id
	MatchID int64 `protobuf:"varint,30,opt,name=matchID,proto3" json:"matchID,omitempty"`
	//比赛阶段1
	GameStage1 string `protobuf:"bytes,31,opt,name=gameStage1,proto3" json:"gameStage1,omitempty"`
	//比赛阶段2
	GameStage2 string `protobuf:"bytes,32,opt,name=gameStage2,proto3" json:"gameStage2,omitempty"`
	//跳转地址
	JumpURL   string `protobuf:"bytes,33,opt,name=jumpURL,proto3" json:"jumpURL,omitempty"`
	GuessLink string `protobuf:"bytes,34,opt,name=guessLink,proto3" json:"guessLink,omitempty"`
	// 赛程的冻结状态，1冻结不展示，0未冻结 可展示
	ContestFrozen ContestFrozenEnum `protobuf:"varint,35,opt,name=contestFrozen,proto3,enum=operational.esportsservice.v1.ContestFrozenEnum" json:"contestFrozen,omitempty"`
	// 比赛状态，枚举：1未开始，2进行中，3已结束
	ContestStatus ContestStatusEnum `protobuf:"varint,36,opt,name=contestStatus,proto3,enum=operational.esportsservice.v1.ContestStatusEnum" json:"contestStatus,omitempty"`
	// 用户态信息，是否已参与该赛程的竞猜枚举：0 可参与竞猜未竞猜，1可参与竞猜已竞猜，2不可参与未竞猜，3不可参与已竞猜，4赛程无绑定竞猜
	IsGuessed GuessStatusEnum `protobuf:"varint,37,opt,name=isGuessed,proto3,enum=operational.esportsservice.v1.GuessStatusEnum" json:"isGuessed,omitempty"`
	// 用户态信息，是否已订阅过该赛程，枚举：0 可订阅时未订阅，1可订阅时已订阅，2不可订阅时未订阅，3不可订阅时已订阅，4赛程无需订阅
	IsSubscribed SubscribedStatusEnum `protobuf:"varint,38,opt,name=isSubscribed,proto3,enum=operational.esportsservice.v1.SubscribedStatusEnum" json:"isSubscribed,omitempty"`
	// 赛程绑定的游戏
	GameId int64 `protobuf:"varint,39,opt,name=gameId,proto3" json:"gameId,omitempty"`
	// 游戏详情
	Game                 *GameDetail `protobuf:"bytes,40,opt,name=game,proto3" json:"game,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ContestDetail) Reset()         { *m = ContestDetail{} }
func (m *ContestDetail) String() string { return proto.CompactTextString(m) }
func (*ContestDetail) ProtoMessage()    {}
func (*ContestDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *ContestDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestDetail.Merge(m, src)
}
func (m *ContestDetail) XXX_Size() int {
	return m.Size()
}
func (m *ContestDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ContestDetail proto.InternalMessageInfo

func (m *ContestDetail) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContestDetail) GetGameStage() string {
	if m != nil {
		return m.GameStage
	}
	return ""
}

func (m *ContestDetail) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *ContestDetail) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *ContestDetail) GetHomeID() int64 {
	if m != nil {
		return m.HomeID
	}
	return 0
}

func (m *ContestDetail) GetAwayID() int64 {
	if m != nil {
		return m.AwayID
	}
	return 0
}

func (m *ContestDetail) GetHomeScore() int64 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *ContestDetail) GetAwayScore() int64 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *ContestDetail) GetHomeTeam() *TeamDetail {
	if m != nil {
		return m.HomeTeam
	}
	return nil
}

func (m *ContestDetail) GetAwayTeam() *TeamDetail {
	if m != nil {
		return m.AwayTeam
	}
	return nil
}

func (m *ContestDetail) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *ContestDetail) GetSeason() *SeasonDetail {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *ContestDetail) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ContestDetail) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *ContestDetail) GetSeries() *SeriesDetail {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *ContestDetail) GetLiveRoom() int64 {
	if m != nil {
		return m.LiveRoom
	}
	return 0
}

func (m *ContestDetail) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ContestDetail) GetCollection() int64 {
	if m != nil {
		return m.Collection
	}
	return 0
}

func (m *ContestDetail) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *ContestDetail) GetSpecial() int64 {
	if m != nil {
		return m.Special
	}
	return 0
}

func (m *ContestDetail) GetSuccessTeam() int64 {
	if m != nil {
		return m.SuccessTeam
	}
	return 0
}

func (m *ContestDetail) GetSuccessTeamInfo() *TeamDetail {
	if m != nil {
		return m.SuccessTeamInfo
	}
	return nil
}

func (m *ContestDetail) GetSpecialName() string {
	if m != nil {
		return m.SpecialName
	}
	return ""
}

func (m *ContestDetail) GetSpecialTips() string {
	if m != nil {
		return m.SpecialTips
	}
	return ""
}

func (m *ContestDetail) GetSpecialImage() string {
	if m != nil {
		return m.SpecialImage
	}
	return ""
}

func (m *ContestDetail) GetPlayback() string {
	if m != nil {
		return m.Playback
	}
	return ""
}

func (m *ContestDetail) GetCollectionURL() string {
	if m != nil {
		return m.CollectionURL
	}
	return ""
}

func (m *ContestDetail) GetLiveURL() string {
	if m != nil {
		return m.LiveURL
	}
	return ""
}

func (m *ContestDetail) GetDataType() int64 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *ContestDetail) GetMatchID() int64 {
	if m != nil {
		return m.MatchID
	}
	return 0
}

func (m *ContestDetail) GetGameStage1() string {
	if m != nil {
		return m.GameStage1
	}
	return ""
}

func (m *ContestDetail) GetGameStage2() string {
	if m != nil {
		return m.GameStage2
	}
	return ""
}

func (m *ContestDetail) GetJumpURL() string {
	if m != nil {
		return m.JumpURL
	}
	return ""
}

func (m *ContestDetail) GetGuessLink() string {
	if m != nil {
		return m.GuessLink
	}
	return ""
}

func (m *ContestDetail) GetContestFrozen() ContestFrozenEnum {
	if m != nil {
		return m.ContestFrozen
	}
	return ContestFrozenEnum_False
}

func (m *ContestDetail) GetContestStatus() ContestStatusEnum {
	if m != nil {
		return m.ContestStatus
	}
	return ContestStatusEnum_Init
}

func (m *ContestDetail) GetIsGuessed() GuessStatusEnum {
	if m != nil {
		return m.IsGuessed
	}
	return GuessStatusEnum_HasGuessNoGuessed
}

func (m *ContestDetail) GetIsSubscribed() SubscribedStatusEnum {
	if m != nil {
		return m.IsSubscribed
	}
	return SubscribedStatusEnum_CanSubNoSub
}

func (m *ContestDetail) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *ContestDetail) GetGame() *GameDetail {
	if m != nil {
		return m.Game
	}
	return nil
}

// 阶段数据
type SeriesDetail struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ParentTitle          string   `protobuf:"bytes,2,opt,name=parentTitle,proto3" json:"parentTitle,omitempty"`
	ChildTitle           string   `protobuf:"bytes,3,opt,name=childTitle,proto3" json:"childTitle,omitempty"`
	StartTime            int64    `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              int64    `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	ScoreId              string   `protobuf:"bytes,6,opt,name=scoreId,proto3" json:"scoreId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeriesDetail) Reset()         { *m = SeriesDetail{} }
func (m *SeriesDetail) String() string { return proto.CompactTextString(m) }
func (*SeriesDetail) ProtoMessage()    {}
func (*SeriesDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *SeriesDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesDetail.Merge(m, src)
}
func (m *SeriesDetail) XXX_Size() int {
	return m.Size()
}
func (m *SeriesDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesDetail.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesDetail proto.InternalMessageInfo

func (m *SeriesDetail) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeriesDetail) GetParentTitle() string {
	if m != nil {
		return m.ParentTitle
	}
	return ""
}

func (m *SeriesDetail) GetChildTitle() string {
	if m != nil {
		return m.ChildTitle
	}
	return ""
}

func (m *SeriesDetail) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SeriesDetail) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SeriesDetail) GetScoreId() string {
	if m != nil {
		return m.ScoreId
	}
	return ""
}

// 赛季数据
type SeasonDetail struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//赛事id
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	//简称
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	//全称
	SubTitle string `protobuf:"bytes,4,opt,name=subTitle,proto3" json:"subTitle,omitempty"`
	//开始时间
	Stime int64 `protobuf:"varint,5,opt,name=stime,proto3" json:"stime,omitempty"`
	//结束时间
	Etime int64 `protobuf:"varint,6,opt,name=etime,proto3" json:"etime,omitempty"`
	//主办方
	Sponsor string `protobuf:"bytes,7,opt,name=sponsor,proto3" json:"sponsor,omitempty"`
	// logo
	Logo string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`
	//备注
	Dic string `protobuf:"bytes,9,opt,name=dic,proto3" json:"dic,omitempty"`
	// 0 启用  1 冻结
	Status int64 `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	// 权重
	Rank int64 `protobuf:"varint,11,opt,name=rank,proto3" json:"rank,omitempty"`
	//是否在移动端展示: 0否1是
	IsApp int64 `protobuf:"varint,12,opt,name=isApp,proto3" json:"isApp,omitempty"`
	//赛季URL
	URL string `protobuf:"bytes,13,opt,name=URL,proto3" json:"URL,omitempty"`
	//比赛数据页焦点图
	DataFocus string `protobuf:"bytes,14,opt,name=dataFocus,proto3" json:"dataFocus,omitempty"`
	//比赛数据页焦点图url
	FocusURL string `protobuf:"bytes,15,opt,name=focusURL,proto3" json:"focusURL,omitempty"`
	//搜索赛程卡标题底图
	SearchImage string `protobuf:"bytes,16,opt,name=searchImage,proto3" json:"searchImage,omitempty"`
	// LOGO全
	LogoFull string `protobuf:"bytes,17,opt,name=logoFull,proto3" json:"logoFull,omitempty"`
	//同步平台
	SyncPlatform int64 `protobuf:"varint,18,opt,name=syncPlatform,proto3" json:"syncPlatform,omitempty"`
	// 赛季可同步渠道方，对syncPlatform的扩展，1.tv 2.直播; 为空时则表示其他方不可同步
	Channel              []int64  `protobuf:"varint,19,rep,packed,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonDetail) Reset()         { *m = SeasonDetail{} }
func (m *SeasonDetail) String() string { return proto.CompactTextString(m) }
func (*SeasonDetail) ProtoMessage()    {}
func (*SeasonDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *SeasonDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonDetail.Merge(m, src)
}
func (m *SeasonDetail) XXX_Size() int {
	return m.Size()
}
func (m *SeasonDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonDetail.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonDetail proto.InternalMessageInfo

func (m *SeasonDetail) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonDetail) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SeasonDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SeasonDetail) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *SeasonDetail) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *SeasonDetail) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *SeasonDetail) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *SeasonDetail) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *SeasonDetail) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *SeasonDetail) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SeasonDetail) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *SeasonDetail) GetIsApp() int64 {
	if m != nil {
		return m.IsApp
	}
	return 0
}

func (m *SeasonDetail) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *SeasonDetail) GetDataFocus() string {
	if m != nil {
		return m.DataFocus
	}
	return ""
}

func (m *SeasonDetail) GetFocusURL() string {
	if m != nil {
		return m.FocusURL
	}
	return ""
}

func (m *SeasonDetail) GetSearchImage() string {
	if m != nil {
		return m.SearchImage
	}
	return ""
}

func (m *SeasonDetail) GetLogoFull() string {
	if m != nil {
		return m.LogoFull
	}
	return ""
}

func (m *SeasonDetail) GetSyncPlatform() int64 {
	if m != nil {
		return m.SyncPlatform
	}
	return 0
}

func (m *SeasonDetail) GetChannel() []int64 {
	if m != nil {
		return m.Channel
	}
	return nil
}

// 战队数据
type TeamDetail struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//简称
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//全称
	SubTitle string `protobuf:"bytes,3,opt,name=subTitle,proto3" json:"subTitle,omitempty"`
	//英文全称
	ETitle string `protobuf:"bytes,4,opt,name=eTitle,proto3" json:"eTitle,omitempty"`
	//地区
	Area string `protobuf:"bytes,5,opt,name=area,proto3" json:"area,omitempty"`
	//英文全称
	Logo string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	//地区
	Uid int64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	//成员
	Members string `protobuf:"bytes,8,opt,name=members,proto3" json:"members,omitempty"`
	//备注
	Dic string `protobuf:"bytes,9,opt,name=dic,proto3" json:"dic,omitempty"`
	//战队类型
	TeamType int64 `protobuf:"varint,10,opt,name=teamType,proto3" json:"teamType,omitempty"`
	// LOGO全
	LogoFull             string   `protobuf:"bytes,11,opt,name=logoFull,proto3" json:"logoFull,omitempty"`
	RegionId             int64    `protobuf:"varint,12,opt,name=regionId,proto3" json:"regionId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamDetail) Reset()         { *m = TeamDetail{} }
func (m *TeamDetail) String() string { return proto.CompactTextString(m) }
func (*TeamDetail) ProtoMessage()    {}
func (*TeamDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *TeamDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamDetail.Merge(m, src)
}
func (m *TeamDetail) XXX_Size() int {
	return m.Size()
}
func (m *TeamDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamDetail.DiscardUnknown(m)
}

var xxx_messageInfo_TeamDetail proto.InternalMessageInfo

func (m *TeamDetail) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TeamDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TeamDetail) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *TeamDetail) GetETitle() string {
	if m != nil {
		return m.ETitle
	}
	return ""
}

func (m *TeamDetail) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *TeamDetail) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *TeamDetail) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TeamDetail) GetMembers() string {
	if m != nil {
		return m.Members
	}
	return ""
}

func (m *TeamDetail) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *TeamDetail) GetTeamType() int64 {
	if m != nil {
		return m.TeamType
	}
	return 0
}

func (m *TeamDetail) GetLogoFull() string {
	if m != nil {
		return m.LogoFull
	}
	return ""
}

func (m *TeamDetail) GetRegionId() int64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

type ContestInfo struct {
	Contest              *ContestDetail `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ContestInfo) Reset()         { *m = ContestInfo{} }
func (m *ContestInfo) String() string { return proto.CompactTextString(m) }
func (*ContestInfo) ProtoMessage()    {}
func (*ContestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *ContestInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestInfo.Merge(m, src)
}
func (m *ContestInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContestInfo proto.InternalMessageInfo

func (m *ContestInfo) GetContest() *ContestDetail {
	if m != nil {
		return m.Contest
	}
	return nil
}

type ContestModelInfo struct {
	// 赛程id
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 比赛阶段
	GameStage string `protobuf:"bytes,2,opt,name=gameStage,proto3" json:"game_stage"`
	// 比赛开始时间
	Stime int64 `protobuf:"varint,3,opt,name=stime,proto3" json:"stime"`
	// 比赛结束时间
	Etime int64 `protobuf:"varint,4,opt,name=etime,proto3" json:"etime"`
	// 主场队伍id
	HomeID int64 `protobuf:"varint,5,opt,name=homeID,proto3" json:"home_id"`
	// 客场队伍id
	AwayID int64 `protobuf:"varint,6,opt,name=awayID,proto3" json:"away_id"`
	// 主场分数
	HomeScore int64 `protobuf:"varint,7,opt,name=homeScore,proto3" json:"home_score"`
	// 客场分数
	AwayScore int64 `protobuf:"varint,8,opt,name=awayScore,proto3" json:"away_score"`
	// 直播房间号
	LiveRoom int64 `protobuf:"varint,9,opt,name=liveRoom,proto3" json:"live_room"`
	// 回播房间号
	Aid int64 `protobuf:"varint,10,opt,name=aid,proto3" json:"aid"`
	// 集锦房间号
	Collection int64 `protobuf:"varint,11,opt,name=collection,proto3" json:"collection"`
	// 赛程描述， 但是不清楚为啥之前描述用dic命名？
	Dic string `protobuf:"bytes,12,opt,name=dic,proto3" json:"dic"`
	// 0 启用 1 冻结
	Status int64 `protobuf:"varint,13,opt,name=status,proto3" json:"status"`
	// 季度id
	Sid int64 `protobuf:"varint,14,opt,name=sid,proto3" json:"sid"`
	// 赛事id
	Mid int64 `protobuf:"varint,15,opt,name=mid,proto3" json:"mid"`
	// 赛程类型：0普通1特殊
	Special int64 `protobuf:"varint,16,opt,name=special,proto3" json:"special"`
	// 胜利战队
	SuccessTeam int64 `protobuf:"varint,17,opt,name=successTeam,proto3" json:"success_team"`
	// 赛程名称
	SpecialName string `protobuf:"bytes,18,opt,name=specialName,proto3" json:"special_name"`
	// 胜利文案
	SpecialTips string `protobuf:"bytes,19,opt,name=specialTips,proto3" json:"special_tips"`
	// 赛程图片
	SpecialImage string `protobuf:"bytes,20,opt,name=specialImage,proto3" json:"special_image"`
	// 回播房间号url
	Playback string `protobuf:"bytes,21,opt,name=playback,proto3" json:"playback"`
	// 集锦房间号url
	CollectionURL string `protobuf:"bytes,22,opt,name=collectionURL,proto3" json:"collection_url"`
	// 集锦房间号url
	LiveURL string `protobuf:"bytes,23,opt,name=liveURL,proto3" json:"live_url"`
	// 比赛数据页类型 0：无 1：LOL 2:DATA2
	DataType int64 `protobuf:"varint,24,opt,name=dataType,proto3" json:"data_type"`
	// 雷达数据match_id
	MatchID   int64 `protobuf:"varint,25,opt,name=matchID,proto3" json:"match_id"`
	GuessType int64 `protobuf:"varint,26,opt,name=guessType,proto3" json:"guess_type"`
	// 是否有竞猜
	GuessShow int64 `protobuf:"varint,27,opt,name=guessShow,proto3" json:"guess_show"`
	// 比赛阶段1
	GameStage1 string `protobuf:"bytes,28,opt,name=gameStage1,proto3" json:"game_stage1"`
	// 比赛阶段2
	GameStage2 string `protobuf:"bytes,29,opt,name=gameStage2,proto3" json:"game_stage2"`
	// 阶段id
	SeriesId   int64 `protobuf:"varint,30,opt,name=seriesId,proto3" json:"series_id"`
	PushSwitch int64 `protobuf:"varint,31,opt,name=pushSwitch,proto3" json:"push_switch"`
	ActivePush int64 `protobuf:"varint,32,opt,name=activePush,proto3" json:"active_push"`
	// 比赛状态，枚举：1未开始，2进行中，3已结束
	ContestStatus        int64    `protobuf:"varint,33,opt,name=contestStatus,proto3" json:"contest_status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContestModelInfo) Reset()         { *m = ContestModelInfo{} }
func (m *ContestModelInfo) String() string { return proto.CompactTextString(m) }
func (*ContestModelInfo) ProtoMessage()    {}
func (*ContestModelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *ContestModelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestModelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestModelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestModelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestModelInfo.Merge(m, src)
}
func (m *ContestModelInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContestModelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestModelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContestModelInfo proto.InternalMessageInfo

func (m *ContestModelInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContestModelInfo) GetGameStage() string {
	if m != nil {
		return m.GameStage
	}
	return ""
}

func (m *ContestModelInfo) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *ContestModelInfo) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *ContestModelInfo) GetHomeID() int64 {
	if m != nil {
		return m.HomeID
	}
	return 0
}

func (m *ContestModelInfo) GetAwayID() int64 {
	if m != nil {
		return m.AwayID
	}
	return 0
}

func (m *ContestModelInfo) GetHomeScore() int64 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *ContestModelInfo) GetAwayScore() int64 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *ContestModelInfo) GetLiveRoom() int64 {
	if m != nil {
		return m.LiveRoom
	}
	return 0
}

func (m *ContestModelInfo) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ContestModelInfo) GetCollection() int64 {
	if m != nil {
		return m.Collection
	}
	return 0
}

func (m *ContestModelInfo) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *ContestModelInfo) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ContestModelInfo) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *ContestModelInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ContestModelInfo) GetSpecial() int64 {
	if m != nil {
		return m.Special
	}
	return 0
}

func (m *ContestModelInfo) GetSuccessTeam() int64 {
	if m != nil {
		return m.SuccessTeam
	}
	return 0
}

func (m *ContestModelInfo) GetSpecialName() string {
	if m != nil {
		return m.SpecialName
	}
	return ""
}

func (m *ContestModelInfo) GetSpecialTips() string {
	if m != nil {
		return m.SpecialTips
	}
	return ""
}

func (m *ContestModelInfo) GetSpecialImage() string {
	if m != nil {
		return m.SpecialImage
	}
	return ""
}

func (m *ContestModelInfo) GetPlayback() string {
	if m != nil {
		return m.Playback
	}
	return ""
}

func (m *ContestModelInfo) GetCollectionURL() string {
	if m != nil {
		return m.CollectionURL
	}
	return ""
}

func (m *ContestModelInfo) GetLiveURL() string {
	if m != nil {
		return m.LiveURL
	}
	return ""
}

func (m *ContestModelInfo) GetDataType() int64 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *ContestModelInfo) GetMatchID() int64 {
	if m != nil {
		return m.MatchID
	}
	return 0
}

func (m *ContestModelInfo) GetGuessType() int64 {
	if m != nil {
		return m.GuessType
	}
	return 0
}

func (m *ContestModelInfo) GetGuessShow() int64 {
	if m != nil {
		return m.GuessShow
	}
	return 0
}

func (m *ContestModelInfo) GetGameStage1() string {
	if m != nil {
		return m.GameStage1
	}
	return ""
}

func (m *ContestModelInfo) GetGameStage2() string {
	if m != nil {
		return m.GameStage2
	}
	return ""
}

func (m *ContestModelInfo) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *ContestModelInfo) GetPushSwitch() int64 {
	if m != nil {
		return m.PushSwitch
	}
	return 0
}

func (m *ContestModelInfo) GetActivePush() int64 {
	if m != nil {
		return m.ActivePush
	}
	return 0
}

func (m *ContestModelInfo) GetContestStatus() int64 {
	if m != nil {
		return m.ContestStatus
	}
	return 0
}

type RefreshContestStatusInfoReq struct {
	ContestId            int64    `protobuf:"varint,1,opt,name=contestId,proto3" json:"contest_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshContestStatusInfoReq) Reset()         { *m = RefreshContestStatusInfoReq{} }
func (m *RefreshContestStatusInfoReq) String() string { return proto.CompactTextString(m) }
func (*RefreshContestStatusInfoReq) ProtoMessage()    {}
func (*RefreshContestStatusInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *RefreshContestStatusInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshContestStatusInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshContestStatusInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshContestStatusInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshContestStatusInfoReq.Merge(m, src)
}
func (m *RefreshContestStatusInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshContestStatusInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshContestStatusInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshContestStatusInfoReq proto.InternalMessageInfo

func (m *RefreshContestStatusInfoReq) GetContestId() int64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

type GetContestModelReq struct {
	ContestId            int64    `protobuf:"varint,1,opt,name=contestId,proto3" json:"contest_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetContestModelReq) Reset()         { *m = GetContestModelReq{} }
func (m *GetContestModelReq) String() string { return proto.CompactTextString(m) }
func (*GetContestModelReq) ProtoMessage()    {}
func (*GetContestModelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *GetContestModelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContestModelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContestModelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContestModelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContestModelReq.Merge(m, src)
}
func (m *GetContestModelReq) XXX_Size() int {
	return m.Size()
}
func (m *GetContestModelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContestModelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetContestModelReq proto.InternalMessageInfo

func (m *GetContestModelReq) GetContestId() int64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

type SaveContestReq struct {
	Contest              *ContestModel       `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest"`
	GameIds              []int64             `protobuf:"varint,2,rep,packed,name=gameIds,proto3" json:"game_ids"`
	TeamIds              []int64             `protobuf:"varint,3,rep,packed,name=teamIds,proto3" json:"team_ids"`
	ContestData          []*ContestDataModel `protobuf:"bytes,4,rep,name=contestData,proto3" json:"contest_data"`
	AdId                 int64               `protobuf:"varint,5,opt,name=adId,proto3" json:"external_id"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SaveContestReq) Reset()         { *m = SaveContestReq{} }
func (m *SaveContestReq) String() string { return proto.CompactTextString(m) }
func (*SaveContestReq) ProtoMessage()    {}
func (*SaveContestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *SaveContestReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveContestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveContestReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveContestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveContestReq.Merge(m, src)
}
func (m *SaveContestReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveContestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveContestReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveContestReq proto.InternalMessageInfo

func (m *SaveContestReq) GetContest() *ContestModel {
	if m != nil {
		return m.Contest
	}
	return nil
}

func (m *SaveContestReq) GetGameIds() []int64 {
	if m != nil {
		return m.GameIds
	}
	return nil
}

func (m *SaveContestReq) GetTeamIds() []int64 {
	if m != nil {
		return m.TeamIds
	}
	return nil
}

func (m *SaveContestReq) GetContestData() []*ContestDataModel {
	if m != nil {
		return m.ContestData
	}
	return nil
}

func (m *SaveContestReq) GetAdId() int64 {
	if m != nil {
		return m.AdId
	}
	return 0
}

type SaveContestByOpenAPiReq struct {
	Contest              *ContestModel `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest"`
	GameIds              []int64       `protobuf:"varint,2,rep,packed,name=gameIds,proto3" json:"game_ids"`
	TeamIds              []int64       `protobuf:"varint,3,rep,packed,name=teamIds,proto3" json:"team_ids"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SaveContestByOpenAPiReq) Reset()         { *m = SaveContestByOpenAPiReq{} }
func (m *SaveContestByOpenAPiReq) String() string { return proto.CompactTextString(m) }
func (*SaveContestByOpenAPiReq) ProtoMessage()    {}
func (*SaveContestByOpenAPiReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *SaveContestByOpenAPiReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveContestByOpenAPiReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveContestByOpenAPiReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveContestByOpenAPiReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveContestByOpenAPiReq.Merge(m, src)
}
func (m *SaveContestByOpenAPiReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveContestByOpenAPiReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveContestByOpenAPiReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveContestByOpenAPiReq proto.InternalMessageInfo

func (m *SaveContestByOpenAPiReq) GetContest() *ContestModel {
	if m != nil {
		return m.Contest
	}
	return nil
}

func (m *SaveContestByOpenAPiReq) GetGameIds() []int64 {
	if m != nil {
		return m.GameIds
	}
	return nil
}

func (m *SaveContestByOpenAPiReq) GetTeamIds() []int64 {
	if m != nil {
		return m.TeamIds
	}
	return nil
}

type ContestDataModel struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 赛程id
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid"`
	// 每BO局的url
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url"`
	// 每BO局对应的三方id
	PointData int64 `protobuf:"varint,4,opt,name=pointData,proto3" json:"point_data"`
	// 每BO局对应的Av号
	AvCid                int64    `protobuf:"varint,5,opt,name=avCid,proto3" json:"av_cid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContestDataModel) Reset()         { *m = ContestDataModel{} }
func (m *ContestDataModel) String() string { return proto.CompactTextString(m) }
func (*ContestDataModel) ProtoMessage()    {}
func (*ContestDataModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}
func (m *ContestDataModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestDataModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestDataModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestDataModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestDataModel.Merge(m, src)
}
func (m *ContestDataModel) XXX_Size() int {
	return m.Size()
}
func (m *ContestDataModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestDataModel.DiscardUnknown(m)
}

var xxx_messageInfo_ContestDataModel proto.InternalMessageInfo

func (m *ContestDataModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContestDataModel) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ContestDataModel) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ContestDataModel) GetPointData() int64 {
	if m != nil {
		return m.PointData
	}
	return 0
}

func (m *ContestDataModel) GetAvCid() int64 {
	if m != nil {
		return m.AvCid
	}
	return 0
}

type ContestModel struct {
	// 赛程id
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 比赛阶段
	GameStage string `protobuf:"bytes,2,opt,name=gameStage,proto3" json:"game_stage"`
	// 比赛开始时间
	Stime int64 `protobuf:"varint,3,opt,name=stime,proto3" json:"stime"`
	// 比赛结束时间
	Etime int64 `protobuf:"varint,4,opt,name=etime,proto3" json:"etime"`
	// 主场队伍id
	HomeID int64 `protobuf:"varint,5,opt,name=homeID,proto3" json:"home_id"`
	// 客场队伍id
	AwayID int64 `protobuf:"varint,6,opt,name=awayID,proto3" json:"away_id"`
	// 主场分数
	HomeScore int64 `protobuf:"varint,7,opt,name=homeScore,proto3" json:"home_score"`
	// 客场分数
	AwayScore int64 `protobuf:"varint,8,opt,name=awayScore,proto3" json:"away_score"`
	// 直播房间号
	LiveRoom int64 `protobuf:"varint,9,opt,name=liveRoom,proto3" json:"live_room"`
	// 回播房间号
	Aid int64 `protobuf:"varint,10,opt,name=aid,proto3" json:"aid"`
	// 集锦房间号
	Collection int64 `protobuf:"varint,11,opt,name=collection,proto3" json:"collection"`
	// 赛程描述， 但是不清楚为啥之前描述用dic命名？
	Dic string `protobuf:"bytes,12,opt,name=dic,proto3" json:"dic"`
	// 0 启用 1 冻结
	Status int64 `protobuf:"varint,13,opt,name=status,proto3" json:"status"`
	// 季度id
	Sid int64 `protobuf:"varint,14,opt,name=sid,proto3" json:"sid"`
	// 赛事id
	Mid int64 `protobuf:"varint,15,opt,name=mid,proto3" json:"mid"`
	// 赛程类型：0普通1特殊
	Special int64 `protobuf:"varint,16,opt,name=special,proto3" json:"special"`
	// 胜利战队
	SuccessTeam int64 `protobuf:"varint,17,opt,name=successTeam,proto3" json:"success_team"`
	// 赛程名称
	SpecialName string `protobuf:"bytes,18,opt,name=specialName,proto3" json:"special_name"`
	// 胜利文案
	SpecialTips string `protobuf:"bytes,19,opt,name=specialTips,proto3" json:"special_tips"`
	// 赛程图片
	SpecialImage string `protobuf:"bytes,20,opt,name=specialImage,proto3" json:"special_image"`
	// 回播房间号url
	Playback string `protobuf:"bytes,21,opt,name=playback,proto3" json:"playback"`
	// 集锦房间号url
	CollectionURL string `protobuf:"bytes,22,opt,name=collectionURL,proto3" json:"collection_url"`
	// 集锦房间号url
	LiveURL string `protobuf:"bytes,23,opt,name=liveURL,proto3" json:"live_url"`
	// 比赛数据页类型 0：无 1：LOL 2:DATA2
	DataType int64 `protobuf:"varint,24,opt,name=dataType,proto3" json:"data_type"`
	// 雷达数据match_id
	MatchID int64 `protobuf:"varint,25,opt,name=matchID,proto3" json:"match_id"`
	// 是否有竞猜
	GuessType int64 `protobuf:"varint,26,opt,name=guessType,proto3" json:"guess_type"`
	// 比赛阶段1
	GameStage1 string `protobuf:"bytes,27,opt,name=gameStage1,proto3" json:"game_stage1"`
	// 比赛阶段2
	GameStage2 string `protobuf:"bytes,28,opt,name=gameStage2,proto3" json:"game_stage2"`
	// 阶段id
	SeriesId   int64 `protobuf:"varint,29,opt,name=seriesId,proto3" json:"series_id"`
	PushSwitch int64 `protobuf:"varint,30,opt,name=pushSwitch,proto3" json:"push_switch"`
	ActivePush int64 `protobuf:"varint,31,opt,name=activePush,proto3" json:"active_push"`
	// 比赛状态，枚举：1未开始，2进行中，3已结束
	ContestStatus int64 `protobuf:"varint,32,opt,name=contestStatus,proto3" json:"contest_status"`
	// 三方赛程id
	ExternalID           int64    `protobuf:"varint,33,opt,name=externalID,proto3" json:"external_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContestModel) Reset()         { *m = ContestModel{} }
func (m *ContestModel) String() string { return proto.CompactTextString(m) }
func (*ContestModel) ProtoMessage()    {}
func (*ContestModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}
func (m *ContestModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContestModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContestModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContestModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContestModel.Merge(m, src)
}
func (m *ContestModel) XXX_Size() int {
	return m.Size()
}
func (m *ContestModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ContestModel.DiscardUnknown(m)
}

var xxx_messageInfo_ContestModel proto.InternalMessageInfo

func (m *ContestModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ContestModel) GetGameStage() string {
	if m != nil {
		return m.GameStage
	}
	return ""
}

func (m *ContestModel) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *ContestModel) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *ContestModel) GetHomeID() int64 {
	if m != nil {
		return m.HomeID
	}
	return 0
}

func (m *ContestModel) GetAwayID() int64 {
	if m != nil {
		return m.AwayID
	}
	return 0
}

func (m *ContestModel) GetHomeScore() int64 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *ContestModel) GetAwayScore() int64 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *ContestModel) GetLiveRoom() int64 {
	if m != nil {
		return m.LiveRoom
	}
	return 0
}

func (m *ContestModel) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ContestModel) GetCollection() int64 {
	if m != nil {
		return m.Collection
	}
	return 0
}

func (m *ContestModel) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *ContestModel) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ContestModel) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *ContestModel) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ContestModel) GetSpecial() int64 {
	if m != nil {
		return m.Special
	}
	return 0
}

func (m *ContestModel) GetSuccessTeam() int64 {
	if m != nil {
		return m.SuccessTeam
	}
	return 0
}

func (m *ContestModel) GetSpecialName() string {
	if m != nil {
		return m.SpecialName
	}
	return ""
}

func (m *ContestModel) GetSpecialTips() string {
	if m != nil {
		return m.SpecialTips
	}
	return ""
}

func (m *ContestModel) GetSpecialImage() string {
	if m != nil {
		return m.SpecialImage
	}
	return ""
}

func (m *ContestModel) GetPlayback() string {
	if m != nil {
		return m.Playback
	}
	return ""
}

func (m *ContestModel) GetCollectionURL() string {
	if m != nil {
		return m.CollectionURL
	}
	return ""
}

func (m *ContestModel) GetLiveURL() string {
	if m != nil {
		return m.LiveURL
	}
	return ""
}

func (m *ContestModel) GetDataType() int64 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *ContestModel) GetMatchID() int64 {
	if m != nil {
		return m.MatchID
	}
	return 0
}

func (m *ContestModel) GetGuessType() int64 {
	if m != nil {
		return m.GuessType
	}
	return 0
}

func (m *ContestModel) GetGameStage1() string {
	if m != nil {
		return m.GameStage1
	}
	return ""
}

func (m *ContestModel) GetGameStage2() string {
	if m != nil {
		return m.GameStage2
	}
	return ""
}

func (m *ContestModel) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *ContestModel) GetPushSwitch() int64 {
	if m != nil {
		return m.PushSwitch
	}
	return 0
}

func (m *ContestModel) GetActivePush() int64 {
	if m != nil {
		return m.ActivePush
	}
	return 0
}

func (m *ContestModel) GetContestStatus() int64 {
	if m != nil {
		return m.ContestStatus
	}
	return 0
}

func (m *ContestModel) GetExternalID() int64 {
	if m != nil {
		return m.ExternalID
	}
	return 0
}

type GetSeasonModelReq struct {
	SeasonId             int64    `protobuf:"varint,1,opt,name=seasonId,proto3" json:"season_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSeasonModelReq) Reset()         { *m = GetSeasonModelReq{} }
func (m *GetSeasonModelReq) String() string { return proto.CompactTextString(m) }
func (*GetSeasonModelReq) ProtoMessage()    {}
func (*GetSeasonModelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}
func (m *GetSeasonModelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeasonModelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeasonModelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeasonModelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeasonModelReq.Merge(m, src)
}
func (m *GetSeasonModelReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSeasonModelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeasonModelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeasonModelReq proto.InternalMessageInfo

func (m *GetSeasonModelReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type SeasonModel struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 赛事id
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	// 简称
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	// 全称
	SubTitle string `protobuf:"bytes,4,opt,name=subTitle,proto3" json:"sub_title"`
	// 开始时间
	Stime int64 `protobuf:"varint,5,opt,name=stime,proto3" json:"stime"`
	// 结束时间
	Etime int64 `protobuf:"varint,6,opt,name=etime,proto3" json:"etime"`
	// 主办方
	Sponsor string `protobuf:"bytes,7,opt,name=sponsor,proto3" json:"sponsor"`
	// logo
	Logo string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo"`
	// 备注
	Dic string `protobuf:"bytes,9,opt,name=dic,proto3" json:"dic"`
	// 0 启用  1 冻结
	Status int64 `protobuf:"varint,10,opt,name=status,proto3" json:"status"`
	// 0 启用  1 冻结
	Rank int64 `protobuf:"varint,11,opt,name=rank,proto3" json:"rank"`
	// 是否在移动端展示: 0否1是
	IsApp int64 `protobuf:"varint,12,opt,name=isApp,proto3" json:"is_app"`
	// 赛季URL
	URL string `protobuf:"bytes,13,opt,name=URL,proto3" json:"url"`
	// 比赛数据页焦点图
	DataFocus string `protobuf:"bytes,14,opt,name=dataFocus,proto3" json:"data_focus"`
	//比赛数据页焦点图url
	FocusURL string `protobuf:"bytes,15,opt,name=focusURL,proto3" json:"focus_url"`
	// 禁止类型
	ForbidIndex int64 `protobuf:"varint,16,opt,name=forbidIndex,proto3" json:"forbid_index"`
	// 三方赛季id
	LeidaSid int64 `protobuf:"varint,17,opt,name=leidaSid,proto3" json:"leida_sid"`
	// 赛季类型：0系列赛，1常规赛
	SerieType int64 `protobuf:"varint,18,opt,name=serieType,proto3" json:"serie_type"`
	// 搜索赛程卡标题底图
	SearchImage string `protobuf:"bytes,19,opt,name=searchImage,proto3" json:"search_image"`
	// 同步平台
	SyncPlatform int64 `protobuf:"varint,20,opt,name=syncPlatform,proto3" json:"sync_platform"`
	// 竞猜版本
	GuessVersion int64 `protobuf:"varint,21,opt,name=guessVersion,proto3" json:"guess_version"`
	// 赛季对战类型：0常规对阵，1大逃杀类
	SeasonType           int64    `protobuf:"varint,22,opt,name=seasonType,proto3" json:"season_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeasonModel) Reset()         { *m = SeasonModel{} }
func (m *SeasonModel) String() string { return proto.CompactTextString(m) }
func (*SeasonModel) ProtoMessage()    {}
func (*SeasonModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}
func (m *SeasonModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonModel.Merge(m, src)
}
func (m *SeasonModel) XXX_Size() int {
	return m.Size()
}
func (m *SeasonModel) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonModel.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonModel proto.InternalMessageInfo

func (m *SeasonModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonModel) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SeasonModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SeasonModel) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *SeasonModel) GetStime() int64 {
	if m != nil {
		return m.Stime
	}
	return 0
}

func (m *SeasonModel) GetEtime() int64 {
	if m != nil {
		return m.Etime
	}
	return 0
}

func (m *SeasonModel) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *SeasonModel) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *SeasonModel) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *SeasonModel) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SeasonModel) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *SeasonModel) GetIsApp() int64 {
	if m != nil {
		return m.IsApp
	}
	return 0
}

func (m *SeasonModel) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *SeasonModel) GetDataFocus() string {
	if m != nil {
		return m.DataFocus
	}
	return ""
}

func (m *SeasonModel) GetFocusURL() string {
	if m != nil {
		return m.FocusURL
	}
	return ""
}

func (m *SeasonModel) GetForbidIndex() int64 {
	if m != nil {
		return m.ForbidIndex
	}
	return 0
}

func (m *SeasonModel) GetLeidaSid() int64 {
	if m != nil {
		return m.LeidaSid
	}
	return 0
}

func (m *SeasonModel) GetSerieType() int64 {
	if m != nil {
		return m.SerieType
	}
	return 0
}

func (m *SeasonModel) GetSearchImage() string {
	if m != nil {
		return m.SearchImage
	}
	return ""
}

func (m *SeasonModel) GetSyncPlatform() int64 {
	if m != nil {
		return m.SyncPlatform
	}
	return 0
}

func (m *SeasonModel) GetGuessVersion() int64 {
	if m != nil {
		return m.GuessVersion
	}
	return 0
}

func (m *SeasonModel) GetSeasonType() int64 {
	if m != nil {
		return m.SeasonType
	}
	return 0
}

type GetTeamModelReq struct {
	TeamId               int64    `protobuf:"varint,1,opt,name=teamId,proto3" json:"team_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTeamModelReq) Reset()         { *m = GetTeamModelReq{} }
func (m *GetTeamModelReq) String() string { return proto.CompactTextString(m) }
func (*GetTeamModelReq) ProtoMessage()    {}
func (*GetTeamModelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}
func (m *GetTeamModelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamModelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamModelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamModelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamModelReq.Merge(m, src)
}
func (m *GetTeamModelReq) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamModelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamModelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamModelReq proto.InternalMessageInfo

func (m *GetTeamModelReq) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

type TeamModel struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 简称
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 全称
	SubTitle string `protobuf:"bytes,3,opt,name=subTitle,proto3" json:"sub_title"`
	// 英文全称
	ETitle string `protobuf:"bytes,4,opt,name=eTitle,proto3" json:"e_title"`
	// 地区
	Area string `protobuf:"bytes,5,opt,name=area,proto3" json:"area"`
	// 英文全称
	Logo string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo"`
	// 地区
	Uid int64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid"`
	// 成员
	Members string `protobuf:"bytes,8,opt,name=members,proto3" json:"members"`
	// 备注
	Dic string `protobuf:"bytes,9,opt,name=dic,proto3" json:"dic"`
	// 战队视频url
	VideoUrl string `protobuf:"bytes,10,opt,name=videoUrl,proto3" json:"video_url"`
	// 战队简介
	Profile string `protobuf:"bytes,11,opt,name=profile,proto3" json:"profile"`
	// 三方战队id
	LeidaTId int64 `protobuf:"varint,12,opt,name=leidaTId,proto3" json:"leida_tid"`
	// 评论id
	ReplyId int64 `protobuf:"varint,13,opt,name=replyId,proto3" json:"reply_id"`
	// 战队类型
	TeamType int64 `protobuf:"varint,14,opt,name=teamType,proto3" json:"team_type"`
	// 战队地区
	RegionId int64 `protobuf:"varint,15,opt,name=regionId,proto3" json:"region_id"`
	// 战队头图
	PictureUrl           string   `protobuf:"bytes,16,opt,name=pictureUrl,proto3" json:"picture_url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamModel) Reset()         { *m = TeamModel{} }
func (m *TeamModel) String() string { return proto.CompactTextString(m) }
func (*TeamModel) ProtoMessage()    {}
func (*TeamModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}
func (m *TeamModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamModel.Merge(m, src)
}
func (m *TeamModel) XXX_Size() int {
	return m.Size()
}
func (m *TeamModel) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamModel.DiscardUnknown(m)
}

var xxx_messageInfo_TeamModel proto.InternalMessageInfo

func (m *TeamModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TeamModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TeamModel) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *TeamModel) GetETitle() string {
	if m != nil {
		return m.ETitle
	}
	return ""
}

func (m *TeamModel) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *TeamModel) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *TeamModel) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TeamModel) GetMembers() string {
	if m != nil {
		return m.Members
	}
	return ""
}

func (m *TeamModel) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *TeamModel) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *TeamModel) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *TeamModel) GetLeidaTId() int64 {
	if m != nil {
		return m.LeidaTId
	}
	return 0
}

func (m *TeamModel) GetReplyId() int64 {
	if m != nil {
		return m.ReplyId
	}
	return 0
}

func (m *TeamModel) GetTeamType() int64 {
	if m != nil {
		return m.TeamType
	}
	return 0
}

func (m *TeamModel) GetRegionId() int64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *TeamModel) GetPictureUrl() string {
	if m != nil {
		return m.PictureUrl
	}
	return ""
}

type MatchModel struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 赛事简称
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 赛事全称
	SubTitle string `protobuf:"bytes,3,opt,name=subTitle,proto3" json:"sub_title"`
	// 创建年份
	CYear string `protobuf:"bytes,4,opt,name=cYear,proto3" json:"c_year"`
	// 主办方
	Sponsor string `protobuf:"bytes,5,opt,name=sponsor,proto3" json:"sponsor"`
	// logo
	Logo string `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo"`
	// 备注
	Dic string `protobuf:"bytes,7,opt,name=dic,proto3" json:"dic"`
	// 状态
	Status int64 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// 排序
	Rank                 int64    `protobuf:"varint,9,opt,name=rank,proto3" json:"rank"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchModel) Reset()         { *m = MatchModel{} }
func (m *MatchModel) String() string { return proto.CompactTextString(m) }
func (*MatchModel) ProtoMessage()    {}
func (*MatchModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}
func (m *MatchModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchModel.Merge(m, src)
}
func (m *MatchModel) XXX_Size() int {
	return m.Size()
}
func (m *MatchModel) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchModel.DiscardUnknown(m)
}

var xxx_messageInfo_MatchModel proto.InternalMessageInfo

func (m *MatchModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MatchModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MatchModel) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *MatchModel) GetCYear() string {
	if m != nil {
		return m.CYear
	}
	return ""
}

func (m *MatchModel) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

func (m *MatchModel) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *MatchModel) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *MatchModel) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MatchModel) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type GameModel struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 赛事简称
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 赛事全称
	SubTitle string `protobuf:"bytes,3,opt,name=subTitle,proto3" json:"sub_title"`
	// 英文全名
	ETitle string `protobuf:"bytes,4,opt,name=eTitle,proto3" json:"e_title"`
	// 平台
	Plat int64 `protobuf:"varint,5,opt,name=plat,proto3" json:"plat"`
	// 游戏类型
	Type int64 `protobuf:"varint,6,opt,name=type,proto3" json:"type"`
	// logo
	Logo string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo"`
	// 发行商
	Publisher string `protobuf:"bytes,8,opt,name=publisher,proto3" json:"publisher"`
	// 运行商
	Operations string `protobuf:"bytes,9,opt,name=operations,proto3" json:"operations"`
	// 运行商
	PbTime int64 `protobuf:"varint,10,opt,name=pbTime,proto3" json:"pb_time"`
	// 备注
	Dic string `protobuf:"bytes,11,opt,name=dic,proto3" json:"dic"`
	// 状态
	Status int64 `protobuf:"varint,12,opt,name=status,proto3" json:"status"`
	// 排序
	Rank                 int64    `protobuf:"varint,13,opt,name=rank,proto3" json:"rank"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameModel) Reset()         { *m = GameModel{} }
func (m *GameModel) String() string { return proto.CompactTextString(m) }
func (*GameModel) ProtoMessage()    {}
func (*GameModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}
func (m *GameModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameModel.Merge(m, src)
}
func (m *GameModel) XXX_Size() int {
	return m.Size()
}
func (m *GameModel) XXX_DiscardUnknown() {
	xxx_messageInfo_GameModel.DiscardUnknown(m)
}

var xxx_messageInfo_GameModel proto.InternalMessageInfo

func (m *GameModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GameModel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GameModel) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

func (m *GameModel) GetETitle() string {
	if m != nil {
		return m.ETitle
	}
	return ""
}

func (m *GameModel) GetPlat() int64 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *GameModel) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GameModel) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *GameModel) GetPublisher() string {
	if m != nil {
		return m.Publisher
	}
	return ""
}

func (m *GameModel) GetOperations() string {
	if m != nil {
		return m.Operations
	}
	return ""
}

func (m *GameModel) GetPbTime() int64 {
	if m != nil {
		return m.PbTime
	}
	return 0
}

func (m *GameModel) GetDic() string {
	if m != nil {
		return m.Dic
	}
	return ""
}

func (m *GameModel) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GameModel) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type GidMapModel struct {
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	// 游戏id
	Gid int64 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid"`
	// 对象id
	Oid int64 `protobuf:"varint,3,opt,name=oid,proto3" json:"oid"`
	// 对象类型
	Type                 int64    `protobuf:"varint,4,opt,name=type,proto3" json:"type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GidMapModel) Reset()         { *m = GidMapModel{} }
func (m *GidMapModel) String() string { return proto.CompactTextString(m) }
func (*GidMapModel) ProtoMessage()    {}
func (*GidMapModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}
func (m *GidMapModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GidMapModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GidMapModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GidMapModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GidMapModel.Merge(m, src)
}
func (m *GidMapModel) XXX_Size() int {
	return m.Size()
}
func (m *GidMapModel) XXX_DiscardUnknown() {
	xxx_messageInfo_GidMapModel.DiscardUnknown(m)
}

var xxx_messageInfo_GidMapModel proto.InternalMessageInfo

func (m *GidMapModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GidMapModel) GetGid() int64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *GidMapModel) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *GidMapModel) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ClearSeasonContestCacheReq struct {
	SeasonId             int64    `protobuf:"varint,1,opt,name=seasonId,proto3" json:"season_id"`
	ContestId            int64    `protobuf:"varint,2,opt,name=contestId,proto3" json:"contest_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearSeasonContestCacheReq) Reset()         { *m = ClearSeasonContestCacheReq{} }
func (m *ClearSeasonContestCacheReq) String() string { return proto.CompactTextString(m) }
func (*ClearSeasonContestCacheReq) ProtoMessage()    {}
func (*ClearSeasonContestCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}
func (m *ClearSeasonContestCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearSeasonContestCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearSeasonContestCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearSeasonContestCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearSeasonContestCacheReq.Merge(m, src)
}
func (m *ClearSeasonContestCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *ClearSeasonContestCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearSeasonContestCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearSeasonContestCacheReq proto.InternalMessageInfo

func (m *ClearSeasonContestCacheReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *ClearSeasonContestCacheReq) GetContestId() int64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

type RebuildContestCacheReq struct {
	ContestId            int64    `protobuf:"varint,1,opt,name=contestId,proto3" json:"contest_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RebuildContestCacheReq) Reset()         { *m = RebuildContestCacheReq{} }
func (m *RebuildContestCacheReq) String() string { return proto.CompactTextString(m) }
func (*RebuildContestCacheReq) ProtoMessage()    {}
func (*RebuildContestCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}
func (m *RebuildContestCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RebuildContestCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RebuildContestCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RebuildContestCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebuildContestCacheReq.Merge(m, src)
}
func (m *RebuildContestCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *RebuildContestCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RebuildContestCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_RebuildContestCacheReq proto.InternalMessageInfo

func (m *RebuildContestCacheReq) GetContestId() int64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

type SeasonContests struct {
	Contests             []*ContestDetail `protobuf:"bytes,1,rep,name=contests,proto3" json:"contests"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SeasonContests) Reset()         { *m = SeasonContests{} }
func (m *SeasonContests) String() string { return proto.CompactTextString(m) }
func (*SeasonContests) ProtoMessage()    {}
func (*SeasonContests) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}
func (m *SeasonContests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonContests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonContests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonContests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonContests.Merge(m, src)
}
func (m *SeasonContests) XXX_Size() int {
	return m.Size()
}
func (m *SeasonContests) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonContests.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonContests proto.InternalMessageInfo

func (m *SeasonContests) GetContests() []*ContestDetail {
	if m != nil {
		return m.Contests
	}
	return nil
}

type GetSeasonContestsReq struct {
	SeasonId             int64    `protobuf:"varint,1,opt,name=seasonId,proto3" json:"season_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSeasonContestsReq) Reset()         { *m = GetSeasonContestsReq{} }
func (m *GetSeasonContestsReq) String() string { return proto.CompactTextString(m) }
func (*GetSeasonContestsReq) ProtoMessage()    {}
func (*GetSeasonContestsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}
func (m *GetSeasonContestsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeasonContestsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeasonContestsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeasonContestsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeasonContestsReq.Merge(m, src)
}
func (m *GetSeasonContestsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSeasonContestsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeasonContestsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeasonContestsReq proto.InternalMessageInfo

func (m *GetSeasonContestsReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type ClearTeamCacheReq struct {
	TeamId               int64    `protobuf:"varint,1,opt,name=teamId,proto3" json:"team_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearTeamCacheReq) Reset()         { *m = ClearTeamCacheReq{} }
func (m *ClearTeamCacheReq) String() string { return proto.CompactTextString(m) }
func (*ClearTeamCacheReq) ProtoMessage()    {}
func (*ClearTeamCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}
func (m *ClearTeamCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearTeamCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearTeamCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearTeamCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearTeamCacheReq.Merge(m, src)
}
func (m *ClearTeamCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *ClearTeamCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearTeamCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearTeamCacheReq proto.InternalMessageInfo

func (m *ClearTeamCacheReq) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

type ClearSeasonCacheReq struct {
	SeasonId             int64    `protobuf:"varint,1,opt,name=seasonId,proto3" json:"season_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearSeasonCacheReq) Reset()         { *m = ClearSeasonCacheReq{} }
func (m *ClearSeasonCacheReq) String() string { return proto.CompactTextString(m) }
func (*ClearSeasonCacheReq) ProtoMessage()    {}
func (*ClearSeasonCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}
func (m *ClearSeasonCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearSeasonCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearSeasonCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearSeasonCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearSeasonCacheReq.Merge(m, src)
}
func (m *ClearSeasonCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *ClearSeasonCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearSeasonCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearSeasonCacheReq proto.InternalMessageInfo

func (m *ClearSeasonCacheReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type ActiveSeasonsResponse struct {
	Seasons              []*SeasonModel `protobuf:"bytes,1,rep,name=seasons,proto3" json:"seasons"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ActiveSeasonsResponse) Reset()         { *m = ActiveSeasonsResponse{} }
func (m *ActiveSeasonsResponse) String() string { return proto.CompactTextString(m) }
func (*ActiveSeasonsResponse) ProtoMessage()    {}
func (*ActiveSeasonsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}
func (m *ActiveSeasonsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveSeasonsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveSeasonsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveSeasonsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveSeasonsResponse.Merge(m, src)
}
func (m *ActiveSeasonsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ActiveSeasonsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveSeasonsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveSeasonsResponse proto.InternalMessageInfo

func (m *ActiveSeasonsResponse) GetSeasons() []*SeasonModel {
	if m != nil {
		return m.Seasons
	}
	return nil
}

type RefreshSeasonContestIdsReq struct {
	SeasonId             int64    `protobuf:"varint,1,opt,name=seasonId,proto3" json:"season_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSeasonContestIdsReq) Reset()         { *m = RefreshSeasonContestIdsReq{} }
func (m *RefreshSeasonContestIdsReq) String() string { return proto.CompactTextString(m) }
func (*RefreshSeasonContestIdsReq) ProtoMessage()    {}
func (*RefreshSeasonContestIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}
func (m *RefreshSeasonContestIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSeasonContestIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSeasonContestIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSeasonContestIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSeasonContestIdsReq.Merge(m, src)
}
func (m *RefreshSeasonContestIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSeasonContestIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSeasonContestIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSeasonContestIdsReq proto.InternalMessageInfo

func (m *RefreshSeasonContestIdsReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type RefreshSeasonContestIdsResponse struct {
	ContestIds           []int64  `protobuf:"varint,1,rep,packed,name=contestIds,proto3" json:"contest_ids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSeasonContestIdsResponse) Reset()         { *m = RefreshSeasonContestIdsResponse{} }
func (m *RefreshSeasonContestIdsResponse) String() string { return proto.CompactTextString(m) }
func (*RefreshSeasonContestIdsResponse) ProtoMessage()    {}
func (*RefreshSeasonContestIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}
func (m *RefreshSeasonContestIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSeasonContestIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSeasonContestIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSeasonContestIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSeasonContestIdsResponse.Merge(m, src)
}
func (m *RefreshSeasonContestIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSeasonContestIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSeasonContestIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSeasonContestIdsResponse proto.InternalMessageInfo

func (m *RefreshSeasonContestIdsResponse) GetContestIds() []int64 {
	if m != nil {
		return m.ContestIds
	}
	return nil
}

type RefreshContestCacheReq struct {
	ContestId            int64    `protobuf:"varint,1,opt,name=contestId,proto3" json:"contest_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshContestCacheReq) Reset()         { *m = RefreshContestCacheReq{} }
func (m *RefreshContestCacheReq) String() string { return proto.CompactTextString(m) }
func (*RefreshContestCacheReq) ProtoMessage()    {}
func (*RefreshContestCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}
func (m *RefreshContestCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshContestCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshContestCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshContestCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshContestCacheReq.Merge(m, src)
}
func (m *RefreshContestCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshContestCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshContestCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshContestCacheReq proto.InternalMessageInfo

func (m *RefreshContestCacheReq) GetContestId() int64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

type RefreshTeamCacheReq struct {
	TeamId               int64    `protobuf:"varint,1,opt,name=teamId,proto3" json:"team_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshTeamCacheReq) Reset()         { *m = RefreshTeamCacheReq{} }
func (m *RefreshTeamCacheReq) String() string { return proto.CompactTextString(m) }
func (*RefreshTeamCacheReq) ProtoMessage()    {}
func (*RefreshTeamCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}
func (m *RefreshTeamCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshTeamCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshTeamCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshTeamCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshTeamCacheReq.Merge(m, src)
}
func (m *RefreshTeamCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshTeamCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshTeamCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshTeamCacheReq proto.InternalMessageInfo

func (m *RefreshTeamCacheReq) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

type RefreshSeriesCacheReq struct {
	SeriesId             int64    `protobuf:"varint,1,opt,name=seriesId,proto3" json:"series_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshSeriesCacheReq) Reset()         { *m = RefreshSeriesCacheReq{} }
func (m *RefreshSeriesCacheReq) String() string { return proto.CompactTextString(m) }
func (*RefreshSeriesCacheReq) ProtoMessage()    {}
func (*RefreshSeriesCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{44}
}
func (m *RefreshSeriesCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshSeriesCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshSeriesCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshSeriesCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshSeriesCacheReq.Merge(m, src)
}
func (m *RefreshSeriesCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshSeriesCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshSeriesCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshSeriesCacheReq proto.InternalMessageInfo

func (m *RefreshSeriesCacheReq) GetSeriesId() int64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

type GetSeasonSeriesReq struct {
	SeasonId             int64    `protobuf:"varint,1,opt,name=seasonId,proto3" json:"season_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSeasonSeriesReq) Reset()         { *m = GetSeasonSeriesReq{} }
func (m *GetSeasonSeriesReq) String() string { return proto.CompactTextString(m) }
func (*GetSeasonSeriesReq) ProtoMessage()    {}
func (*GetSeasonSeriesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{45}
}
func (m *GetSeasonSeriesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeasonSeriesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeasonSeriesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeasonSeriesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeasonSeriesReq.Merge(m, src)
}
func (m *GetSeasonSeriesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSeasonSeriesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeasonSeriesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeasonSeriesReq proto.InternalMessageInfo

func (m *GetSeasonSeriesReq) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

type GetSeasonSeriesResponse struct {
	Series               []*SeriesModel `protobuf:"bytes,1,rep,name=series,proto3" json:"series"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetSeasonSeriesResponse) Reset()         { *m = GetSeasonSeriesResponse{} }
func (m *GetSeasonSeriesResponse) String() string { return proto.CompactTextString(m) }
func (*GetSeasonSeriesResponse) ProtoMessage()    {}
func (*GetSeasonSeriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46}
}
func (m *GetSeasonSeriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeasonSeriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeasonSeriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeasonSeriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeasonSeriesResponse.Merge(m, src)
}
func (m *GetSeasonSeriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSeasonSeriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeasonSeriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeasonSeriesResponse proto.InternalMessageInfo

func (m *GetSeasonSeriesResponse) GetSeries() []*SeriesModel {
	if m != nil {
		return m.Series
	}
	return nil
}

type SeriesModel struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	ParentTitle          string   `protobuf:"bytes,2,opt,name=parentTitle,proto3" json:"parent_title"`
	ChildTitle           string   `protobuf:"bytes,3,opt,name=childTitle,proto3" json:"child_title"`
	StartTime            int64    `protobuf:"varint,4,opt,name=startTime,proto3" json:"start_time"`
	EndTime              int64    `protobuf:"varint,5,opt,name=endTime,proto3" json:"end_time"`
	ScoreId              string   `protobuf:"bytes,6,opt,name=scoreId,proto3" json:"score_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeriesModel) Reset()         { *m = SeriesModel{} }
func (m *SeriesModel) String() string { return proto.CompactTextString(m) }
func (*SeriesModel) ProtoMessage()    {}
func (*SeriesModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{47}
}
func (m *SeriesModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeriesModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeriesModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeriesModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeriesModel.Merge(m, src)
}
func (m *SeriesModel) XXX_Size() int {
	return m.Size()
}
func (m *SeriesModel) XXX_DiscardUnknown() {
	xxx_messageInfo_SeriesModel.DiscardUnknown(m)
}

var xxx_messageInfo_SeriesModel proto.InternalMessageInfo

func (m *SeriesModel) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeriesModel) GetParentTitle() string {
	if m != nil {
		return m.ParentTitle
	}
	return ""
}

func (m *SeriesModel) GetChildTitle() string {
	if m != nil {
		return m.ChildTitle
	}
	return ""
}

func (m *SeriesModel) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SeriesModel) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SeriesModel) GetScoreId() string {
	if m != nil {
		return m.ScoreId
	}
	return ""
}

type GetContestGameReq struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"contest_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetContestGameReq) Reset()         { *m = GetContestGameReq{} }
func (m *GetContestGameReq) String() string { return proto.CompactTextString(m) }
func (*GetContestGameReq) ProtoMessage()    {}
func (*GetContestGameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48}
}
func (m *GetContestGameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContestGameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContestGameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContestGameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContestGameReq.Merge(m, src)
}
func (m *GetContestGameReq) XXX_Size() int {
	return m.Size()
}
func (m *GetContestGameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContestGameReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetContestGameReq proto.InternalMessageInfo

func (m *GetContestGameReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetContestGameResponse struct {
	Game                 *GameModel `protobuf:"bytes,1,opt,name=game,proto3" json:"game"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetContestGameResponse) Reset()         { *m = GetContestGameResponse{} }
func (m *GetContestGameResponse) String() string { return proto.CompactTextString(m) }
func (*GetContestGameResponse) ProtoMessage()    {}
func (*GetContestGameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{49}
}
func (m *GetContestGameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContestGameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContestGameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContestGameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContestGameResponse.Merge(m, src)
}
func (m *GetContestGameResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetContestGameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContestGameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetContestGameResponse proto.InternalMessageInfo

func (m *GetContestGameResponse) GetGame() *GameModel {
	if m != nil {
		return m.Game
	}
	return nil
}

type GetContestInfoListBySeasonReq struct {
	SeasonID             int64    `protobuf:"varint,1,opt,name=seasonID,proto3" json:"season_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetContestInfoListBySeasonReq) Reset()         { *m = GetContestInfoListBySeasonReq{} }
func (m *GetContestInfoListBySeasonReq) String() string { return proto.CompactTextString(m) }
func (*GetContestInfoListBySeasonReq) ProtoMessage()    {}
func (*GetContestInfoListBySeasonReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50}
}
func (m *GetContestInfoListBySeasonReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContestInfoListBySeasonReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContestInfoListBySeasonReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContestInfoListBySeasonReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContestInfoListBySeasonReq.Merge(m, src)
}
func (m *GetContestInfoListBySeasonReq) XXX_Size() int {
	return m.Size()
}
func (m *GetContestInfoListBySeasonReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContestInfoListBySeasonReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetContestInfoListBySeasonReq proto.InternalMessageInfo

func (m *GetContestInfoListBySeasonReq) GetSeasonID() int64 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

type GetContestInfoListBySeasonResponse struct {
	ComponentContestList map[int64]*SeasonContests `protobuf:"bytes,1,rep,name=componentContestList,proto3" json:"-" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetContestInfoListBySeasonResponse) Reset()         { *m = GetContestInfoListBySeasonResponse{} }
func (m *GetContestInfoListBySeasonResponse) String() string { return proto.CompactTextString(m) }
func (*GetContestInfoListBySeasonResponse) ProtoMessage()    {}
func (*GetContestInfoListBySeasonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{51}
}
func (m *GetContestInfoListBySeasonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetContestInfoListBySeasonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetContestInfoListBySeasonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetContestInfoListBySeasonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContestInfoListBySeasonResponse.Merge(m, src)
}
func (m *GetContestInfoListBySeasonResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetContestInfoListBySeasonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContestInfoListBySeasonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetContestInfoListBySeasonResponse proto.InternalMessageInfo

func (m *GetContestInfoListBySeasonResponse) GetComponentContestList() map[int64]*SeasonContests {
	if m != nil {
		return m.ComponentContestList
	}
	return nil
}

type GetReplyWallModelReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReplyWallModelReq) Reset()         { *m = GetReplyWallModelReq{} }
func (m *GetReplyWallModelReq) String() string { return proto.CompactTextString(m) }
func (*GetReplyWallModelReq) ProtoMessage()    {}
func (*GetReplyWallModelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{52}
}
func (m *GetReplyWallModelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReplyWallModelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReplyWallModelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReplyWallModelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplyWallModelReq.Merge(m, src)
}
func (m *GetReplyWallModelReq) XXX_Size() int {
	return m.Size()
}
func (m *GetReplyWallModelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplyWallModelReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplyWallModelReq proto.InternalMessageInfo

type GetReplyWallListReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReplyWallListReq) Reset()         { *m = GetReplyWallListReq{} }
func (m *GetReplyWallListReq) String() string { return proto.CompactTextString(m) }
func (*GetReplyWallListReq) ProtoMessage()    {}
func (*GetReplyWallListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{53}
}
func (m *GetReplyWallListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReplyWallListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReplyWallListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReplyWallListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplyWallListReq.Merge(m, src)
}
func (m *GetReplyWallListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetReplyWallListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplyWallListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplyWallListReq proto.InternalMessageInfo

func (m *GetReplyWallListReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type GetReplyWallListResponse struct {
	Contest              *ContestDetail   `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest"`
	ReplyList            []*ReplyWallInfo `protobuf:"bytes,2,rep,name=replyList,proto3" json:"reply_list"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetReplyWallListResponse) Reset()         { *m = GetReplyWallListResponse{} }
func (m *GetReplyWallListResponse) String() string { return proto.CompactTextString(m) }
func (*GetReplyWallListResponse) ProtoMessage()    {}
func (*GetReplyWallListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{54}
}
func (m *GetReplyWallListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReplyWallListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReplyWallListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReplyWallListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplyWallListResponse.Merge(m, src)
}
func (m *GetReplyWallListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReplyWallListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplyWallListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplyWallListResponse proto.InternalMessageInfo

func (m *GetReplyWallListResponse) GetContest() *ContestDetail {
	if m != nil {
		return m.Contest
	}
	return nil
}

func (m *GetReplyWallListResponse) GetReplyList() []*ReplyWallInfo {
	if m != nil {
		return m.ReplyList
	}
	return nil
}

type ReplyWallInfo struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Face                 string   `protobuf:"bytes,3,opt,name=face,proto3" json:"face"`
	Sign                 string   `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign"`
	ReplyDetails         string   `protobuf:"bytes,5,opt,name=replyDetails,proto3" json:"reply_details"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyWallInfo) Reset()         { *m = ReplyWallInfo{} }
func (m *ReplyWallInfo) String() string { return proto.CompactTextString(m) }
func (*ReplyWallInfo) ProtoMessage()    {}
func (*ReplyWallInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{55}
}
func (m *ReplyWallInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyWallInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyWallInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyWallInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyWallInfo.Merge(m, src)
}
func (m *ReplyWallInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReplyWallInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyWallInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyWallInfo proto.InternalMessageInfo

func (m *ReplyWallInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ReplyWallInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReplyWallInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *ReplyWallInfo) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *ReplyWallInfo) GetReplyDetails() string {
	if m != nil {
		return m.ReplyDetails
	}
	return ""
}

type SaveReplyWallModel struct {
	ContestID            int64             `protobuf:"varint,1,opt,name=contestID,proto3" json:"contest_id" form:"contest_id" validate:"min=1"`
	ReplyList            []*ReplyWallModel `protobuf:"bytes,2,rep,name=replyList,proto3" json:"reply_list" form:"reply_list" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SaveReplyWallModel) Reset()         { *m = SaveReplyWallModel{} }
func (m *SaveReplyWallModel) String() string { return proto.CompactTextString(m) }
func (*SaveReplyWallModel) ProtoMessage()    {}
func (*SaveReplyWallModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{56}
}
func (m *SaveReplyWallModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveReplyWallModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveReplyWallModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveReplyWallModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveReplyWallModel.Merge(m, src)
}
func (m *SaveReplyWallModel) XXX_Size() int {
	return m.Size()
}
func (m *SaveReplyWallModel) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveReplyWallModel.DiscardUnknown(m)
}

var xxx_messageInfo_SaveReplyWallModel proto.InternalMessageInfo

func (m *SaveReplyWallModel) GetContestID() int64 {
	if m != nil {
		return m.ContestID
	}
	return 0
}

func (m *SaveReplyWallModel) GetReplyList() []*ReplyWallModel {
	if m != nil {
		return m.ReplyList
	}
	return nil
}

type ReplyWallModel struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	ReplyDetails         string   `protobuf:"bytes,2,opt,name=replyDetails,proto3" json:"reply_details"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyWallModel) Reset()         { *m = ReplyWallModel{} }
func (m *ReplyWallModel) String() string { return proto.CompactTextString(m) }
func (*ReplyWallModel) ProtoMessage()    {}
func (*ReplyWallModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{57}
}
func (m *ReplyWallModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyWallModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyWallModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyWallModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyWallModel.Merge(m, src)
}
func (m *ReplyWallModel) XXX_Size() int {
	return m.Size()
}
func (m *ReplyWallModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyWallModel.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyWallModel proto.InternalMessageInfo

func (m *ReplyWallModel) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ReplyWallModel) GetReplyDetails() string {
	if m != nil {
		return m.ReplyDetails
	}
	return ""
}

type GetSeasonByTimeReq struct {
	BeginTime            int64    `protobuf:"varint,1,opt,name=beginTime,proto3" json:"beginTime,omitempty"`
	EndTime              int64    `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSeasonByTimeReq) Reset()         { *m = GetSeasonByTimeReq{} }
func (m *GetSeasonByTimeReq) String() string { return proto.CompactTextString(m) }
func (*GetSeasonByTimeReq) ProtoMessage()    {}
func (*GetSeasonByTimeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{58}
}
func (m *GetSeasonByTimeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeasonByTimeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeasonByTimeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeasonByTimeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeasonByTimeReq.Merge(m, src)
}
func (m *GetSeasonByTimeReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSeasonByTimeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeasonByTimeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeasonByTimeReq proto.InternalMessageInfo

func (m *GetSeasonByTimeReq) GetBeginTime() int64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *GetSeasonByTimeReq) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type GetSeasonByTimeResponse struct {
	Seasons              []*SeasonDetail `protobuf:"bytes,1,rep,name=seasons,proto3" json:"seasons,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetSeasonByTimeResponse) Reset()         { *m = GetSeasonByTimeResponse{} }
func (m *GetSeasonByTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GetSeasonByTimeResponse) ProtoMessage()    {}
func (*GetSeasonByTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{59}
}
func (m *GetSeasonByTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSeasonByTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSeasonByTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSeasonByTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSeasonByTimeResponse.Merge(m, src)
}
func (m *GetSeasonByTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSeasonByTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSeasonByTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSeasonByTimeResponse proto.InternalMessageInfo

func (m *GetSeasonByTimeResponse) GetSeasons() []*SeasonDetail {
	if m != nil {
		return m.Seasons
	}
	return nil
}

// NoArgReq
type NoArgsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoArgsRequest) Reset()         { *m = NoArgsRequest{} }
func (m *NoArgsRequest) String() string { return proto.CompactTextString(m) }
func (*NoArgsRequest) ProtoMessage()    {}
func (*NoArgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{60}
}
func (m *NoArgsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoArgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoArgsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoArgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoArgsRequest.Merge(m, src)
}
func (m *NoArgsRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoArgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoArgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoArgsRequest proto.InternalMessageInfo

// NoArgsResponse
type NoArgsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoArgsResponse) Reset()         { *m = NoArgsResponse{} }
func (m *NoArgsResponse) String() string { return proto.CompactTextString(m) }
func (*NoArgsResponse) ProtoMessage()    {}
func (*NoArgsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{61}
}
func (m *NoArgsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoArgsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoArgsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoArgsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoArgsResponse.Merge(m, src)
}
func (m *NoArgsResponse) XXX_Size() int {
	return m.Size()
}
func (m *NoArgsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NoArgsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NoArgsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("operational.esportsservice.v1.ContestStatusEnum", ContestStatusEnum_name, ContestStatusEnum_value)
	proto.RegisterEnum("operational.esportsservice.v1.ContestFrozenEnum", ContestFrozenEnum_name, ContestFrozenEnum_value)
	proto.RegisterEnum("operational.esportsservice.v1.GuessStatusEnum", GuessStatusEnum_name, GuessStatusEnum_value)
	proto.RegisterEnum("operational.esportsservice.v1.SubscribedStatusEnum", SubscribedStatusEnum_name, SubscribedStatusEnum_value)
	proto.RegisterType((*GetTeamsRequest)(nil), "operational.esportsservice.v1.GetTeamsRequest")
	proto.RegisterType((*TeamsResponse)(nil), "operational.esportsservice.v1.TeamsResponse")
	proto.RegisterType((*GetGamesRequest)(nil), "operational.esportsservice.v1.GetGamesRequest")
	proto.RegisterType((*GameDetail)(nil), "operational.esportsservice.v1.GameDetail")
	proto.RegisterType((*GamesResponse)(nil), "operational.esportsservice.v1.GamesResponse")
	proto.RegisterType((*ContestSubscribers)(nil), "operational.esportsservice.v1.ContestSubscribers")
	proto.RegisterType((*User)(nil), "operational.esportsservice.v1.User")
	proto.RegisterType((*GetSubscribersRequest)(nil), "operational.esportsservice.v1.GetSubscribersRequest")
	proto.RegisterType((*FavRequest)(nil), "operational.esportsservice.v1.FavRequest")
	proto.RegisterType((*GetContestRequest)(nil), "operational.esportsservice.v1.GetContestRequest")
	proto.RegisterType((*GetContestsRequest)(nil), "operational.esportsservice.v1.GetContestsRequest")
	proto.RegisterType((*ContestsResponse)(nil), "operational.esportsservice.v1.ContestsResponse")
	proto.RegisterType((*GetTimeContestsRequest)(nil), "operational.esportsservice.v1.GetTimeContestsRequest")
	proto.RegisterType((*GetTimeContestsResponse)(nil), "operational.esportsservice.v1.GetTimeContestsResponse")
	proto.RegisterType((*ContestDetail)(nil), "operational.esportsservice.v1.ContestDetail")
	proto.RegisterType((*SeriesDetail)(nil), "operational.esportsservice.v1.SeriesDetail")
	proto.RegisterType((*SeasonDetail)(nil), "operational.esportsservice.v1.SeasonDetail")
	proto.RegisterType((*TeamDetail)(nil), "operational.esportsservice.v1.TeamDetail")
	proto.RegisterType((*ContestInfo)(nil), "operational.esportsservice.v1.ContestInfo")
	proto.RegisterType((*ContestModelInfo)(nil), "operational.esportsservice.v1.ContestModelInfo")
	proto.RegisterType((*RefreshContestStatusInfoReq)(nil), "operational.esportsservice.v1.RefreshContestStatusInfoReq")
	proto.RegisterType((*GetContestModelReq)(nil), "operational.esportsservice.v1.GetContestModelReq")
	proto.RegisterType((*SaveContestReq)(nil), "operational.esportsservice.v1.SaveContestReq")
	proto.RegisterType((*SaveContestByOpenAPiReq)(nil), "operational.esportsservice.v1.SaveContestByOpenAPiReq")
	proto.RegisterType((*ContestDataModel)(nil), "operational.esportsservice.v1.ContestDataModel")
	proto.RegisterType((*ContestModel)(nil), "operational.esportsservice.v1.ContestModel")
	proto.RegisterType((*GetSeasonModelReq)(nil), "operational.esportsservice.v1.GetSeasonModelReq")
	proto.RegisterType((*SeasonModel)(nil), "operational.esportsservice.v1.SeasonModel")
	proto.RegisterType((*GetTeamModelReq)(nil), "operational.esportsservice.v1.GetTeamModelReq")
	proto.RegisterType((*TeamModel)(nil), "operational.esportsservice.v1.TeamModel")
	proto.RegisterType((*MatchModel)(nil), "operational.esportsservice.v1.MatchModel")
	proto.RegisterType((*GameModel)(nil), "operational.esportsservice.v1.GameModel")
	proto.RegisterType((*GidMapModel)(nil), "operational.esportsservice.v1.GidMapModel")
	proto.RegisterType((*ClearSeasonContestCacheReq)(nil), "operational.esportsservice.v1.ClearSeasonContestCacheReq")
	proto.RegisterType((*RebuildContestCacheReq)(nil), "operational.esportsservice.v1.RebuildContestCacheReq")
	proto.RegisterType((*SeasonContests)(nil), "operational.esportsservice.v1.SeasonContests")
	proto.RegisterType((*GetSeasonContestsReq)(nil), "operational.esportsservice.v1.GetSeasonContestsReq")
	proto.RegisterType((*ClearTeamCacheReq)(nil), "operational.esportsservice.v1.ClearTeamCacheReq")
	proto.RegisterType((*ClearSeasonCacheReq)(nil), "operational.esportsservice.v1.ClearSeasonCacheReq")
	proto.RegisterType((*ActiveSeasonsResponse)(nil), "operational.esportsservice.v1.ActiveSeasonsResponse")
	proto.RegisterType((*RefreshSeasonContestIdsReq)(nil), "operational.esportsservice.v1.RefreshSeasonContestIdsReq")
	proto.RegisterType((*RefreshSeasonContestIdsResponse)(nil), "operational.esportsservice.v1.RefreshSeasonContestIdsResponse")
	proto.RegisterType((*RefreshContestCacheReq)(nil), "operational.esportsservice.v1.RefreshContestCacheReq")
	proto.RegisterType((*RefreshTeamCacheReq)(nil), "operational.esportsservice.v1.RefreshTeamCacheReq")
	proto.RegisterType((*RefreshSeriesCacheReq)(nil), "operational.esportsservice.v1.RefreshSeriesCacheReq")
	proto.RegisterType((*GetSeasonSeriesReq)(nil), "operational.esportsservice.v1.GetSeasonSeriesReq")
	proto.RegisterType((*GetSeasonSeriesResponse)(nil), "operational.esportsservice.v1.GetSeasonSeriesResponse")
	proto.RegisterType((*SeriesModel)(nil), "operational.esportsservice.v1.SeriesModel")
	proto.RegisterType((*GetContestGameReq)(nil), "operational.esportsservice.v1.GetContestGameReq")
	proto.RegisterType((*GetContestGameResponse)(nil), "operational.esportsservice.v1.GetContestGameResponse")
	proto.RegisterType((*GetContestInfoListBySeasonReq)(nil), "operational.esportsservice.v1.GetContestInfoListBySeasonReq")
	proto.RegisterType((*GetContestInfoListBySeasonResponse)(nil), "operational.esportsservice.v1.GetContestInfoListBySeasonResponse")
	proto.RegisterMapType((map[int64]*SeasonContests)(nil), "operational.esportsservice.v1.GetContestInfoListBySeasonResponse.ComponentContestListEntry")
	proto.RegisterType((*GetReplyWallModelReq)(nil), "operational.esportsservice.v1.GetReplyWallModelReq")
	proto.RegisterType((*GetReplyWallListReq)(nil), "operational.esportsservice.v1.GetReplyWallListReq")
	proto.RegisterType((*GetReplyWallListResponse)(nil), "operational.esportsservice.v1.GetReplyWallListResponse")
	proto.RegisterType((*ReplyWallInfo)(nil), "operational.esportsservice.v1.ReplyWallInfo")
	proto.RegisterType((*SaveReplyWallModel)(nil), "operational.esportsservice.v1.SaveReplyWallModel")
	proto.RegisterType((*ReplyWallModel)(nil), "operational.esportsservice.v1.ReplyWallModel")
	proto.RegisterType((*GetSeasonByTimeReq)(nil), "operational.esportsservice.v1.GetSeasonByTimeReq")
	proto.RegisterType((*GetSeasonByTimeResponse)(nil), "operational.esportsservice.v1.GetSeasonByTimeResponse")
	proto.RegisterType((*NoArgsRequest)(nil), "operational.esportsservice.v1.NoArgsRequest")
	proto.RegisterType((*NoArgsResponse)(nil), "operational.esportsservice.v1.NoArgsResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 4507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xdd, 0x6f, 0x1c, 0x59,
	0x56, 0x4f, 0x77, 0xfb, 0xab, 0x6f, 0xfb, 0xa3, 0x53, 0x4e, 0x9c, 0x72, 0x8f, 0x93, 0xf6, 0x56,
	0x76, 0xb2, 0x71, 0xe2, 0x71, 0x12, 0xcf, 0x66, 0x67, 0x88, 0x76, 0x76, 0x89, 0xe3, 0x38, 0xd3,
	0x90, 0xc9, 0x86, 0xb2, 0x67, 0x46, 0x2c, 0x48, 0xde, 0x72, 0xd5, 0xb5, 0xbb, 0x36, 0xdd, 0x55,
	0xed, 0xaa, 0x6a, 0x67, 0x3c, 0x20, 0xc1, 0x22, 0x90, 0x96, 0x17, 0x24, 0x5e, 0xd0, 0xf2, 0x80,
	0xc4, 0x9f, 0x80, 0x10, 0x48, 0x48, 0x88, 0x7d, 0xe0, 0x09, 0x09, 0x21, 0xf1, 0x08, 0x2f, 0x16,
	0x1a, 0x24, 0x84, 0xfc, 0x82, 0x34, 0x7f, 0x01, 0x3a, 0xe7, 0xdc, 0xaa, 0x7b, 0x6f, 0x7f, 0xb8,
	0xab, 0x27, 0xb0, 0x02, 0x69, 0x5e, 0x9c, 0xba, 0xe7, 0x9e, 0x7b, 0xee, 0xad, 0x7b, 0xce, 0x3d,
	0xe7, 0x77, 0x4f, 0x9d, 0x0e, 0x2b, 0x3b, 0x1d, 0x7f, 0xa3, 0x13, 0x85, 0x49, 0x68, 0x5c, 0x0f,
	0x3b, 0x3c, 0x72, 0x12, 0x3f, 0x0c, 0x9c, 0xd6, 0x06, 0x8f, 0x3b, 0x61, 0x94, 0xc4, 0x31, 0x8f,
	0x4e, 0x7c, 0x97, 0x6f, 0x9c, 0x3c, 0xa8, 0xbd, 0x73, 0xe4, 0x27, 0xcd, 0xee, 0xc1, 0x86, 0x1b,
	0xb6, 0xef, 0x1d, 0x85, 0x47, 0xe1, 0x3d, 0x1c, 0x75, 0xd0, 0x3d, 0xc4, 0x16, 0x36, 0xf0, 0x89,
	0xa4, 0x59, 0x77, 0xd9, 0xc2, 0x33, 0x9e, 0xec, 0x71, 0xa7, 0x1d, 0xdb, 0xfc, 0xb8, 0xcb, 0xe3,
	0xc4, 0x30, 0xd9, 0x74, 0xc2, 0x9d, 0x76, 0xc3, 0x8b, 0xcd, 0xc2, 0x6a, 0xe9, 0x76, 0xc9, 0x4e,
	0x9b, 0xd6, 0x4b, 0x36, 0x27, 0x38, 0xe3, 0x4e, 0x18, 0xc4, 0xdc, 0xf8, 0x3e, 0x9b, 0x84, 0x3e,
	0x62, 0xac, 0x6c, 0xae, 0x6d, 0x5c, 0xb8, 0xb6, 0x0d, 0x18, 0xbc, 0xcd, 0x13, 0xc7, 0x6f, 0xd9,
	0x34, 0xce, 0xfa, 0x49, 0x01, 0xe7, 0x7f, 0xe6, 0xb4, 0xb9, 0x3a, 0xff, 0x91, 0xd3, 0xe6, 0xca,
	0xfc, 0xa2, 0x69, 0x2c, 0xb1, 0x29, 0xb7, 0x1b, 0xc5, 0x61, 0x64, 0x16, 0x57, 0x0b, 0xb7, 0x4b,
	0xb6, 0x68, 0x19, 0xdf, 0x65, 0x8c, 0x9e, 0x76, 0xfd, 0xcf, 0xb9, 0x59, 0x82, 0xbe, 0xad, 0x95,
	0x2f, 0xcf, 0xea, 0xe6, 0x89, 0xd3, 0xf2, 0x3d, 0x27, 0xe1, 0x8f, 0xac, 0xb6, 0x1f, 0x7c, 0xf0,
	0x60, 0xbd, 0xed, 0x7c, 0xf6, 0xc1, 0xc3, 0xfb, 0xf7, 0x2d, 0x5b, 0xe1, 0xb7, 0xfe, 0xbe, 0xc8,
	0x18, 0x2c, 0x80, 0x56, 0x66, 0xcc, 0xb3, 0x62, 0x63, 0xdb, 0x2c, 0xe0, 0x04, 0xc5, 0xc6, 0xb6,
	0x71, 0x85, 0x4d, 0x26, 0x7e, 0xd2, 0xe2, 0x38, 0x67, 0xd9, 0xa6, 0x86, 0x51, 0x63, 0x33, 0x71,
	0xf7, 0x60, 0x0f, 0x3b, 0x4a, 0xd8, 0x91, 0xb5, 0x61, 0x99, 0x9c, 0x7a, 0x26, 0xb0, 0x47, 0xb4,
	0x0c, 0x83, 0x4d, 0x74, 0x5a, 0x4e, 0x62, 0x4e, 0xa2, 0x6c, 0x7c, 0x06, 0x39, 0xf0, 0x76, 0x7b,
	0xa7, 0x1d, 0x6e, 0x4e, 0x21, 0x3d, 0x6b, 0x03, 0x7f, 0x2b, 0x3c, 0x0a, 0xcd, 0x69, 0x94, 0x82,
	0xcf, 0xc6, 0x0a, 0x2b, 0x77, 0xba, 0x07, 0x2d, 0x3f, 0x6e, 0xf2, 0xc8, 0x9c, 0xc1, 0x0e, 0x49,
	0x30, 0x6e, 0x30, 0x96, 0x69, 0x20, 0x36, 0xcb, 0xd8, 0xad, 0x50, 0x60, 0x65, 0x9d, 0x83, 0x3d,
	0xbf, 0xcd, 0x4d, 0x46, 0x1b, 0x48, 0x2d, 0xa3, 0xca, 0x4a, 0x9e, 0xef, 0x9a, 0x15, 0x1c, 0x00,
	0x8f, 0xb0, 0x2e, 0x98, 0x6f, 0xa7, 0xdb, 0x6a, 0x99, 0xb3, 0xf4, 0x7e, 0x69, 0x1b, 0xd6, 0x15,
	0x39, 0xc1, 0x2b, 0x73, 0x8e, 0xde, 0x03, 0x9e, 0xad, 0x26, 0x9b, 0x13, 0x4a, 0x94, 0xa6, 0x01,
	0x2f, 0x92, 0xd7, 0x34, 0xa4, 0x02, 0x6c, 0x1a, 0x37, 0x4c, 0xd9, 0x16, 0x67, 0xc6, 0x93, 0x30,
	0x48, 0x78, 0x9c, 0xec, 0x76, 0x0f, 0x62, 0x37, 0xf2, 0x0f, 0x78, 0xa4, 0x72, 0x17, 0x34, 0xd3,
	0x78, 0x8f, 0x4d, 0x74, 0x63, 0x0e, 0x32, 0x60, 0x15, 0x37, 0x47, 0xac, 0xe2, 0xe3, 0x98, 0x47,
	0x36, 0x0e, 0xb0, 0xfe, 0xa8, 0xc0, 0x26, 0xa0, 0x09, 0xf6, 0xe0, 0x7b, 0xa9, 0x3d, 0xf8, 0x1e,
	0xec, 0x55, 0xe8, 0x7b, 0x62, 0x51, 0xf0, 0x08, 0x94, 0xb6, 0xef, 0x91, 0xdd, 0xd9, 0xf0, 0x08,
	0x94, 0xe4, 0xb4, 0x83, 0xea, 0x9f, 0xb4, 0xe1, 0x11, 0xac, 0x28, 0x4e, 0x9c, 0x84, 0xa3, 0xf2,
	0x27, 0x6d, 0x6a, 0x00, 0xd5, 0x4d, 0x40, 0x1d, 0xa4, 0x7a, 0x6a, 0x00, 0xb5, 0x8d, 0xd4, 0x69,
	0xa2, 0x62, 0xc3, 0xfa, 0x59, 0x81, 0x5d, 0x7d, 0xc6, 0xd5, 0x97, 0x4e, 0x0f, 0xcc, 0x1a, 0x2b,
	0xb9, 0xe9, 0x12, 0xb7, 0xae, 0x7d, 0x79, 0x56, 0x5f, 0x94, 0x76, 0x1f, 0xf1, 0xe3, 0xae, 0x1f,
	0x71, 0xcf, 0xb2, 0x81, 0x67, 0x8c, 0x13, 0x34, 0x39, 0xc6, 0x09, 0xba, 0xcf, 0xd8, 0x8e, 0x73,
	0x92, 0x2e, 0x47, 0x6c, 0x47, 0x41, 0xdb, 0x0e, 0x57, 0x6e, 0x99, 0xeb, 0x7b, 0xd6, 0x4b, 0x76,
	0xf9, 0x19, 0x4f, 0x84, 0x1e, 0x87, 0x0f, 0x5c, 0x53, 0x06, 0x5e, 0xfc, 0x66, 0x56, 0x97, 0x19,
	0x52, 0x62, 0x3c, 0x5c, 0xe4, 0x5d, 0x36, 0xe1, 0xfa, 0x5e, 0x8c, 0x06, 0x71, 0x81, 0x4c, 0x64,
	0x32, 0x56, 0x59, 0x25, 0xe0, 0xdc, 0x6b, 0x04, 0xc8, 0x82, 0xfb, 0x32, 0x63, 0xab, 0x24, 0xeb,
	0x37, 0x59, 0x55, 0xce, 0x29, 0x4c, 0xff, 0x43, 0x36, 0xe3, 0x0a, 0x9a, 0xb0, 0xfe, 0xf5, 0x11,
	0x76, 0x27, 0x44, 0x88, 0x03, 0x90, 0x8d, 0xb6, 0xfe, 0xb3, 0xc8, 0x96, 0xc0, 0x3d, 0xfb, 0x6d,
	0xde, 0xfb, 0x66, 0x68, 0x50, 0x60, 0x24, 0x05, 0x72, 0x4b, 0x71, 0x6a, 0x3a, 0x1c, 0xa9, 0xc2,
	0x59, 0x61, 0x03, 0x3c, 0x6a, 0x14, 0x86, 0xe8, 0xd1, 0x4b, 0xe4, 0x51, 0x45, 0x33, 0xdd, 0x9f,
	0x09, 0xb9, 0x3f, 0x4b, 0x6c, 0x8a, 0xdc, 0xad, 0x70, 0x53, 0xa2, 0x05, 0x74, 0x0a, 0x03, 0xc2,
	0x56, 0x45, 0x0b, 0x64, 0xbb, 0x4d, 0x27, 0x08, 0x78, 0xcb, 0x9c, 0x26, 0xd9, 0xa2, 0xa9, 0xd8,
	0xda, 0xcc, 0x05, 0xb6, 0x56, 0x1e, 0x66, 0x6b, 0xf7, 0xd1, 0xd6, 0x1e, 0xf4, 0xd8, 0x1a, 0x38,
	0x26, 0x78, 0xa7, 0xdd, 0x30, 0x4a, 0xd0, 0x89, 0x4d, 0xda, 0x59, 0xbb, 0x57, 0x5d, 0x95, 0x3e,
	0x75, 0xc1, 0x6a, 0xdb, 0x4e, 0xe2, 0x36, 0x1b, 0x1e, 0x7a, 0xb5, 0x92, 0x9d, 0x36, 0xad, 0x3f,
	0x2e, 0xb0, 0x6b, 0x7d, 0x5b, 0xfd, 0x3f, 0xad, 0xd0, 0xa1, 0xe7, 0x0f, 0x1c, 0x81, 0xe3, 0x36,
	0xb9, 0x30, 0x31, 0x6a, 0x58, 0x3f, 0x9f, 0x65, 0x73, 0x9a, 0xa4, 0xbe, 0xe0, 0xb4, 0xc2, 0xca,
	0xa0, 0x9f, 0xdd, 0xc4, 0x39, 0x4a, 0x75, 0x2e, 0x09, 0xd2, 0x46, 0xc8, 0x35, 0xf5, 0xda, 0x08,
	0x69, 0x5d, 0xd8, 0xc8, 0x12, 0x9b, 0x6a, 0x86, 0x6d, 0xde, 0xd8, 0x4e, 0xf5, 0x4e, 0x2d, 0xa0,
	0x3b, 0xaf, 0x9d, 0xd3, 0xc6, 0x76, 0xaa, 0x77, 0x6a, 0xc1, 0xcc, 0xc0, 0xb1, 0xeb, 0x86, 0x51,
	0xea, 0xa8, 0x24, 0x01, 0x7a, 0x81, 0x8f, 0x7a, 0x49, 0xfd, 0x92, 0x60, 0x3c, 0x65, 0x33, 0xc0,
	0x0a, 0x70, 0x00, 0xf5, 0x3f, 0x16, 0x72, 0xc8, 0x86, 0x82, 0x18, 0x90, 0x89, 0x62, 0xd8, 0xd8,
	0x62, 0xd2, 0xa1, 0x70, 0x06, 0x62, 0x61, 0x2d, 0x25, 0x1b, 0x1e, 0x8d, 0x27, 0x6c, 0x2a, 0xe6,
	0x4e, 0x1c, 0x06, 0x68, 0x24, 0x95, 0xcd, 0xbb, 0x23, 0xc4, 0xee, 0x22, 0xb3, 0x10, 0x2c, 0x86,
	0xa6, 0x47, 0x6b, 0x4e, 0x1e, 0x2d, 0xc0, 0x0c, 0x3c, 0xf2, 0x79, 0xdc, 0xf0, 0xcc, 0x79, 0x8a,
	0xf5, 0x69, 0x9b, 0xa6, 0x84, 0x67, 0x73, 0x21, 0xe7, 0x94, 0xc0, 0x2c, 0xa7, 0x84, 0x16, 0x06,
	0x6d, 0xff, 0x84, 0xdb, 0x61, 0xd8, 0x36, 0xab, 0x34, 0x41, 0xda, 0x86, 0xe5, 0x38, 0xbe, 0x67,
	0x5e, 0xa6, 0xe5, 0x38, 0xbe, 0x07, 0x60, 0xc1, 0x0d, 0x5b, 0x2d, 0xee, 0xc2, 0x24, 0xa6, 0x81,
	0x1d, 0x0a, 0x25, 0x05, 0x05, 0x8b, 0x12, 0x14, 0x98, 0x6c, 0x3a, 0xee, 0x70, 0xd7, 0x77, 0x5a,
	0xe6, 0x15, 0x3a, 0x3d, 0xa2, 0x09, 0x27, 0x2f, 0xee, 0xba, 0x2e, 0x8f, 0x63, 0xd4, 0xc6, 0x55,
	0xec, 0x55, 0x49, 0xc6, 0x2e, 0x5b, 0x50, 0x9a, 0x8d, 0xe0, 0x30, 0x34, 0x97, 0xc6, 0xd5, 0x59,
	0xaf, 0x04, 0x9c, 0x96, 0x56, 0xf0, 0xc2, 0x69, 0x73, 0xf3, 0x1a, 0x2e, 0x55, 0x25, 0x29, 0x1c,
	0x7b, 0x7e, 0x27, 0x36, 0x4d, 0x8d, 0x03, 0x48, 0x86, 0xc5, 0x66, 0x45, 0xb3, 0xd1, 0x86, 0x53,
	0xb4, 0x8c, 0x2c, 0x1a, 0x0d, 0x36, 0xb6, 0xd3, 0x72, 0x4e, 0x0f, 0x1c, 0xf7, 0x95, 0x59, 0x23,
	0x34, 0x94, 0xb6, 0x8d, 0x6f, 0xb2, 0x39, 0xb9, 0x69, 0x1f, 0xdb, 0xcf, 0xcd, 0xb7, 0x90, 0x41,
	0x27, 0xc2, 0xd6, 0x81, 0x2a, 0xa0, 0x7f, 0x05, 0xfb, 0xd3, 0x26, 0xc8, 0xf6, 0x9c, 0xc4, 0x41,
	0x04, 0x78, 0x9d, 0x94, 0x96, 0xb6, 0xa5, 0xbb, 0xda, 0x36, 0x6f, 0xa8, 0xee, 0x6a, 0x1b, 0x94,
	0x97, 0x9d, 0xf3, 0x07, 0x66, 0x9d, 0x90, 0x9e, 0xa4, 0x68, 0xfd, 0x9b, 0xe6, 0x6a, 0x4f, 0xff,
	0x26, 0x48, 0xfe, 0x71, 0xb7, 0xdd, 0x81, 0xf5, 0x7c, 0x83, 0xd6, 0x23, 0x9a, 0xe8, 0x52, 0xba,
	0x3c, 0x8e, 0x9f, 0xfb, 0xc1, 0x2b, 0xd3, 0x12, 0x2e, 0x25, 0x25, 0x18, 0x9f, 0xc0, 0xdb, 0xa2,
	0x47, 0xda, 0x89, 0xc2, 0xcf, 0x79, 0x60, 0xde, 0x5c, 0x2d, 0xdc, 0x9e, 0xdf, 0xbc, 0x9f, 0xcf,
	0x1f, 0xd2, 0x98, 0xa7, 0x41, 0xb7, 0x6d, 0xeb, 0x62, 0x14, 0xb9, 0xbb, 0x89, 0x93, 0x74, 0x63,
	0xf3, 0x9b, 0xe3, 0xc8, 0xa5, 0x31, 0x9a, 0x5c, 0x22, 0x19, 0xcf, 0x59, 0xd9, 0x8f, 0x9f, 0xc1,
	0xf2, 0xb9, 0x67, 0xbe, 0x8d, 0x32, 0x37, 0x46, 0x41, 0x51, 0xe0, 0x56, 0x24, 0x4a, 0x01, 0xc6,
	0xa7, 0x6c, 0xd6, 0x8f, 0x33, 0x04, 0xe6, 0x99, 0xb7, 0x50, 0xe0, 0xbb, 0xa3, 0xce, 0x6a, 0x36,
	0x40, 0x91, 0xaa, 0x09, 0x52, 0xa2, 0xee, 0xb7, 0xb4, 0xa8, 0xfb, 0x01, 0x9b, 0x80, 0x27, 0xf3,
	0x76, 0xae, 0xa3, 0xa2, 0x80, 0x68, 0x1c, 0x66, 0xfd, 0x65, 0x81, 0xcd, 0xaa, 0x9e, 0xa2, 0x2f,
	0x7e, 0xac, 0xb2, 0x4a, 0xc7, 0x89, 0x78, 0x90, 0xec, 0x29, 0x57, 0x1c, 0x95, 0x84, 0x5e, 0xa2,
	0xe9, 0xb7, 0x3c, 0xf5, 0xaa, 0xa3, 0x50, 0xc0, 0x5c, 0xe2, 0xc4, 0x89, 0x30, 0x70, 0x8a, 0x88,
	0x22, 0x09, 0x60, 0x66, 0x3c, 0xf0, 0xb0, 0x8f, 0xc2, 0x4a, 0xda, 0x44, 0x5f, 0x02, 0xc1, 0x40,
	0x00, 0x8a, 0xb2, 0x9d, 0x36, 0xad, 0x7f, 0x29, 0xc1, 0xa2, 0xa5, 0x47, 0xed, 0x5b, 0xb4, 0xf0,
	0xac, 0x45, 0xe9, 0x59, 0xb3, 0x3b, 0x5a, 0x69, 0xd8, 0x1d, 0x6d, 0xa2, 0xe7, 0x8e, 0x96, 0x85,
	0xc6, 0xc9, 0x81, 0xa1, 0x71, 0x4a, 0x0d, 0x8d, 0xe8, 0xf6, 0xc2, 0x00, 0xa2, 0xf6, 0xb4, 0x58,
	0x2a, 0x35, 0xb3, 0x1b, 0xda, 0x8c, 0x72, 0x43, 0x13, 0x6e, 0xb3, 0x2c, 0xdd, 0xe6, 0x12, 0x9b,
	0x8a, 0xc9, 0xa8, 0xc5, 0xad, 0x8b, 0x5a, 0xd9, 0x3d, 0xaa, 0x22, 0xef, 0x51, 0xb0, 0x02, 0x3f,
	0x7e, 0xdc, 0xe9, 0x08, 0x78, 0x42, 0x0d, 0x90, 0x09, 0x27, 0x75, 0x8e, 0x64, 0x8a, 0x53, 0x0a,
	0x5e, 0x62, 0x27, 0x74, 0xbb, 0x31, 0x06, 0x93, 0xb2, 0x2d, 0x09, 0xf0, 0xe6, 0x87, 0xf0, 0x00,
	0x83, 0x16, 0xe8, 0xcd, 0xd3, 0x36, 0x7a, 0x44, 0xee, 0x44, 0x6e, 0x93, 0xdc, 0x5d, 0x55, 0x78,
	0x44, 0x49, 0xd2, 0xee, 0x7e, 0x97, 0x7b, 0xee, 0x7e, 0xe0, 0x2d, 0x4f, 0x03, 0xf7, 0x65, 0xcb,
	0x49, 0x0e, 0xc3, 0xa8, 0x2d, 0xc2, 0x86, 0x46, 0x53, 0x21, 0xe1, 0xa2, 0x06, 0x09, 0xad, 0x3f,
	0x2f, 0x32, 0x26, 0xfd, 0xf9, 0xff, 0xee, 0x55, 0xdb, 0x89, 0xb8, 0x83, 0xda, 0x2d, 0xdb, 0xf8,
	0x3c, 0xf0, 0x3a, 0x5d, 0x65, 0xa5, 0xae, 0x9f, 0x42, 0x5a, 0x78, 0x44, 0x97, 0xcb, 0xdb, 0x70,
	0xbd, 0x12, 0x5a, 0x4d, 0x9b, 0x03, 0x14, 0x0b, 0x58, 0x94, 0x3b, 0x6d, 0x74, 0xdd, 0xa4, 0xda,
	0xac, 0xad, 0x6d, 0x62, 0xa5, 0x67, 0x13, 0x6b, 0x6c, 0x26, 0xe2, 0x47, 0x7e, 0x18, 0x64, 0x30,
	0x34, 0x6b, 0x5b, 0x1f, 0xb3, 0x8a, 0x70, 0x6a, 0x18, 0xe1, 0x76, 0xd8, 0xb4, 0x70, 0x68, 0xb8,
	0x4f, 0xe3, 0x22, 0xcf, 0x74, 0xb0, 0xf5, 0x87, 0x95, 0xec, 0xa2, 0xf2, 0x51, 0xe8, 0xf1, 0x16,
	0x0a, 0x5f, 0x92, 0xfb, 0xbf, 0x35, 0x75, 0x7e, 0x56, 0x2f, 0xfa, 0x1e, 0xea, 0x61, 0xbd, 0x0f,
	0x55, 0x6e, 0xcd, 0x9f, 0x9f, 0xd5, 0x31, 0x7e, 0xec, 0xc7, 0x40, 0x55, 0x51, 0x66, 0x5d, 0x43,
	0x99, 0x5b, 0xe5, 0xf3, 0xb3, 0x3a, 0x11, 0xd2, 0x53, 0x55, 0xd7, 0x00, 0x27, 0x31, 0x70, 0x62,
	0xa0, 0x03, 0x76, 0x53, 0xc7, 0x9e, 0x5b, 0x95, 0xf3, 0xb3, 0xfa, 0x34, 0x50, 0xf6, 0x7d, 0x2f,
	0x03, 0xa2, 0x37, 0x75, 0x20, 0x4a, 0x4c, 0x40, 0x41, 0x26, 0x81, 0x4a, 0xd7, 0xfb, 0x50, 0x29,
	0xad, 0x1c, 0x85, 0xa1, 0x83, 0x51, 0x51, 0xea, 0x7a, 0x1f, 0x4a, 0x25, 0x6e, 0x94, 0x2a, 0xb8,
	0x25, 0x6a, 0x5d, 0x53, 0xd0, 0x55, 0x19, 0x99, 0xe7, 0xce, 0xcf, 0xea, 0x65, 0xa0, 0xed, 0xc3,
	0x7d, 0x4a, 0x01, 0x5b, 0xcb, 0x04, 0xb6, 0xd0, 0x26, 0xb6, 0xa6, 0xcf, 0xcf, 0xea, 0xd0, 0x24,
	0xd4, 0xb5, 0xa1, 0xa1, 0xae, 0x8a, 0x9c, 0x54, 0x52, 0x35, 0x14, 0xb6, 0x4c, 0x56, 0x87, 0x39,
	0x18, 0x12, 0xe5, 0xf9, 0x2e, 0x99, 0x9f, 0x95, 0xf9, 0x15, 0x04, 0x99, 0x5b, 0xec, 0xfc, 0xac,
	0x2e, 0x28, 0x99, 0x8f, 0x59, 0x26, 0x70, 0x3b, 0x2f, 0x57, 0x12, 0xc3, 0x4a, 0x00, 0xe5, 0x2e,
	0x93, 0x1b, 0x5d, 0x90, 0x5d, 0x6d, 0xe8, 0x02, 0x7f, 0xfa, 0xb6, 0x04, 0x7a, 0x55, 0xb9, 0xd9,
	0x82, 0x24, 0x51, 0xdf, 0xa6, 0x8e, 0xfa, 0x10, 0x5b, 0x6e, 0x55, 0xcf, 0xcf, 0xea, 0xb3, 0x82,
	0xbc, 0x0f, 0xc7, 0x41, 0xc7, 0x81, 0x9b, 0x3a, 0x64, 0x33, 0xf0, 0xbd, 0x68, 0x0c, 0x91, 0xf7,
	0x03, 0xa7, 0xcd, 0x75, 0x10, 0xb7, 0xa9, 0x83, 0xb8, 0xc5, 0xfe, 0x31, 0x89, 0xdf, 0x89, 0x75,
	0x58, 0xf7, 0xb0, 0x07, 0xd6, 0x5d, 0xc1, 0x41, 0x97, 0xcf, 0xcf, 0xea, 0x73, 0xe9, 0x20, 0x1f,
	0x3a, 0x7a, 0x90, 0xde, 0x6d, 0x05, 0xe9, 0x5d, 0xc5, 0x21, 0xb3, 0xe7, 0x67, 0xf5, 0x8c, 0xa6,
	0xe0, 0xbe, 0xf7, 0x7b, 0x71, 0xdf, 0x12, 0xb2, 0x1b, 0xe7, 0x67, 0xf5, 0x79, 0xd9, 0xb1, 0xdf,
	0x8d, 0x5a, 0xbd, 0x58, 0xf0, 0x96, 0xc4, 0x82, 0xd7, 0xe4, 0x14, 0x68, 0x47, 0xc0, 0x9d, 0x21,
	0xc3, 0x35, 0x05, 0x19, 0x9a, 0xd2, 0xe0, 0x80, 0xb6, 0x9f, 0x9c, 0x76, 0xb8, 0x02, 0x14, 0x6f,
	0x49, 0xa0, 0xb8, 0x8c, 0x9c, 0x28, 0x12, 0x49, 0x70, 0x3c, 0x32, 0xd8, 0xb8, 0x2e, 0xc0, 0x1d,
	0xca, 0xac, 0x49, 0xe3, 0x43, 0x22, 0x09, 0x95, 0x0c, 0x19, 0xf7, 0x6e, 0x33, 0x7c, 0x8d, 0xb0,
	0x56, 0xe3, 0x8e, 0x9b, 0xe1, 0x6b, 0x5b, 0x32, 0x18, 0xf7, 0x34, 0x48, 0x8a, 0x28, 0x77, 0x6b,
	0xe1, 0xfc, 0xac, 0x5e, 0x91, 0x6e, 0xe3, 0x81, 0x86, 0x51, 0xef, 0x69, 0x18, 0xf5, 0xfa, 0xa0,
	0x01, 0x9b, 0x1a, 0x68, 0x5d, 0x53, 0x2e, 0x50, 0x37, 0xe4, 0x86, 0x10, 0x0d, 0xde, 0x53, 0xde,
	0xa7, 0xee, 0x31, 0xd6, 0xe9, 0xc6, 0xcd, 0xdd, 0xd7, 0x7e, 0xe2, 0x36, 0x11, 0x1f, 0x97, 0x48,
	0x36, 0x50, 0xf7, 0x63, 0x24, 0xdb, 0x0a, 0x0b, 0x0c, 0x70, 0xdc, 0xc4, 0x3f, 0xe1, 0x2f, 0xbb,
	0x71, 0x13, 0x01, 0xb3, 0x18, 0x40, 0xd4, 0x7d, 0x60, 0xb5, 0x15, 0x16, 0xd2, 0xbf, 0x8a, 0x58,
	0xbf, 0x81, 0x63, 0x84, 0xfe, 0xb1, 0x63, 0x5f, 0x1c, 0x46, 0x9d, 0xd1, 0xfa, 0x55, 0xf6, 0x96,
	0xcd, 0x0f, 0x23, 0x1e, 0x37, 0x35, 0xf8, 0x0a, 0x2e, 0xd9, 0xe6, 0xc7, 0xb0, 0xeb, 0x82, 0xbf,
	0x91, 0x26, 0xf5, 0x84, 0x83, 0x20, 0xa1, 0xbe, 0x67, 0x4b, 0x06, 0x6b, 0x4b, 0xcd, 0x7b, 0xa1,
	0x6b, 0x1f, 0x5f, 0xc6, 0xcf, 0x8b, 0x6c, 0x7e, 0xd7, 0x39, 0xe1, 0x32, 0x1f, 0x67, 0xd8, 0xbd,
	0x71, 0xe7, 0x6e, 0xbe, 0xb8, 0x83, 0x2b, 0x20, 0x77, 0x21, 0xc6, 0x67, 0x31, 0x08, 0x8c, 0x34,
	0x4d, 0xec, 0x53, 0xf6, 0x0d, 0x8d, 0x14, 0x95, 0xed, 0x7b, 0xb1, 0x4c, 0xf3, 0xdf, 0x92, 0x1f,
	0x20, 0x4a, 0x92, 0x0f, 0x48, 0xc4, 0x27, 0x3a, 0x0d, 0x97, 0x55, 0x84, 0xe8, 0x6d, 0x27, 0x71,
	0xcc, 0x09, 0xcc, 0xcc, 0xdc, 0xcb, 0x19, 0x1f, 0x9d, 0xc4, 0xa1, 0xb5, 0xa2, 0x1f, 0x49, 0xf7,
	0x05, 0x0e, 0x94, 0xad, 0x4a, 0x35, 0x6e, 0xb2, 0x09, 0xc7, 0x4b, 0xb3, 0x61, 0x64, 0x11, 0xfc,
	0xb3, 0x84, 0x47, 0x01, 0x38, 0x10, 0xcf, 0xc6, 0x4e, 0xeb, 0xef, 0x0a, 0xec, 0x9a, 0xb2, 0x81,
	0x5b, 0xa7, 0x3f, 0xe8, 0xf0, 0xe0, 0xf1, 0x4b, 0xff, 0xff, 0xc9, 0x4e, 0x5a, 0x7f, 0x51, 0xc8,
	0xd0, 0x41, 0xb6, 0x31, 0x43, 0xd1, 0xc1, 0xb2, 0x9a, 0x94, 0xc5, 0xb8, 0xe1, 0x42, 0xdc, 0x70,
	0x29, 0xa4, 0x74, 0xa3, 0x16, 0xa1, 0x34, 0xea, 0x02, 0x87, 0x06, 0x7f, 0xc0, 0x22, 0x3b, 0xa1,
	0x1f, 0xa4, 0xaa, 0xca, 0x2c, 0x12, 0x89, 0xb4, 0xef, 0x92, 0xc1, 0x58, 0x65, 0x93, 0xce, 0xc9,
	0x13, 0x3f, 0xdd, 0x76, 0x8c, 0x6c, 0xce, 0xc9, 0x3e, 0x4c, 0x44, 0x1d, 0xd6, 0x4f, 0x2b, 0x6c,
	0x56, 0xdd, 0xa9, 0xaf, 0xc1, 0xcc, 0xd7, 0x60, 0xe6, 0x6b, 0x30, 0xf3, 0x35, 0x98, 0x19, 0x0a,
	0x66, 0x74, 0x78, 0xf2, 0xd6, 0xb8, 0xf0, 0x64, 0x65, 0x3c, 0x78, 0x72, 0x7d, 0x1c, 0x78, 0x72,
	0x63, 0x5c, 0x78, 0x52, 0xff, 0x0a, 0xf0, 0x64, 0x35, 0x27, 0x3c, 0x81, 0xa9, 0xd2, 0x08, 0xd7,
	0xd8, 0x16, 0xa8, 0xa6, 0x2f, 0xee, 0x29, 0x2c, 0xd6, 0xf7, 0xf0, 0x63, 0x1e, 0xa5, 0x6c, 0x32,
	0x04, 0x82, 0x9b, 0x01, 0x94, 0x0c, 0x80, 0x88, 0xcd, 0x00, 0x9a, 0xd8, 0x0c, 0xea, 0xb6, 0xfe,
	0x63, 0x8a, 0x55, 0x94, 0xd1, 0x17, 0x05, 0x9e, 0xb6, 0x1e, 0x78, 0xb2, 0x33, 0x5e, 0xd7, 0x12,
	0x40, 0xe4, 0x95, 0x91, 0x90, 0x26, 0x11, 0xd6, 0x7a, 0x73, 0x41, 0x62, 0x39, 0xdd, 0x83, 0x7d,
	0xe2, 0x93, 0x39, 0x85, 0xba, 0x96, 0x1a, 0xba, 0x28, 0x04, 0x4c, 0x0d, 0x09, 0x01, 0x6f, 0xf7,
	0x24, 0x8c, 0x52, 0x8f, 0x83, 0x24, 0x99, 0x3d, 0x5a, 0x51, 0xb3, 0x47, 0x5b, 0x33, 0xe7, 0x67,
	0x75, 0x6c, 0x8b, 0xd4, 0xc4, 0xb2, 0x92, 0x6e, 0x18, 0xea, 0x2b, 0xd9, 0x50, 0x5f, 0xb9, 0xa2,
	0x26, 0x97, 0x48, 0x38, 0xb4, 0x45, 0x9a, 0x69, 0x55, 0x4b, 0x33, 0x91, 0x00, 0x3f, 0xde, 0x77,
	0x3a, 0x9d, 0x34, 0xe5, 0xb4, 0xac, 0xa4, 0x9c, 0x94, 0x50, 0x0e, 0x47, 0x79, 0xbd, 0x2f, 0xf7,
	0x44, 0xe7, 0x0e, 0xcf, 0x32, 0xe6, 0x99, 0xd4, 0x5c, 0xd4, 0x5a, 0x6f, 0x2e, 0x8a, 0x76, 0x1e,
	0x69, 0xe8, 0x22, 0x64, 0x6a, 0x6a, 0x93, 0x55, 0x0e, 0xc3, 0xe8, 0xc0, 0xf7, 0x1a, 0x81, 0xc7,
	0x3f, 0x13, 0xde, 0x1a, 0x5d, 0x23, 0x91, 0xf7, 0x7d, 0xa0, 0xdb, 0x2a, 0x13, 0x06, 0x32, 0xee,
	0x7b, 0xce, 0x6e, 0xfa, 0x71, 0x43, 0x04, 0x32, 0xa0, 0xed, 0x43, 0x78, 0xc8, 0xba, 0x61, 0xdd,
	0x78, 0x00, 0xd1, 0x5f, 0x18, 0xd2, 0x5f, 0x20, 0x51, 0xf8, 0x8b, 0x8c, 0x01, 0xfd, 0xb4, 0x92,
	0x27, 0x53, 0xfd, 0x34, 0x92, 0x85, 0xc7, 0xd5, 0x32, 0x67, 0x0f, 0x7b, 0xb2, 0x63, 0xf8, 0x95,
	0x44, 0xf8, 0xe9, 0xd3, 0xc0, 0xdd, 0xef, 0x88, 0x8e, 0x9e, 0x84, 0xd9, 0x43, 0x36, 0x8b, 0x7e,
	0xea, 0x13, 0x1e, 0xc5, 0x10, 0x48, 0xaf, 0xca, 0x61, 0xe4, 0xcb, 0x4e, 0xa8, 0xc3, 0xd6, 0xd8,
	0xe0, 0xa0, 0xd2, 0x19, 0xc2, 0x17, 0x5a, 0x92, 0x07, 0x55, 0x1c, 0x32, 0x7c, 0x23, 0x85, 0xc5,
	0xfa, 0x4e, 0x56, 0xec, 0x93, 0x1d, 0xd3, 0x9b, 0xd9, 0x67, 0xdd, 0x82, 0x8c, 0x8d, 0x02, 0x20,
	0xa6, 0xdf, 0x78, 0xad, 0x7f, 0x9d, 0x60, 0xe5, 0x6c, 0xd4, 0xd0, 0xe3, 0x59, 0xd7, 0xb2, 0x77,
	0x23, 0xce, 0x60, 0xe9, 0xe2, 0x33, 0x78, 0x53, 0xcf, 0xeb, 0xd1, 0xb2, 0xb8, 0x60, 0x4b, 0x93,
	0x7c, 0x2b, 0x6a, 0x92, 0x8f, 0x4c, 0x1c, 0xda, 0x22, 0xdd, 0xb7, 0xa2, 0xa6, 0xfb, 0x06, 0x9d,
	0xae, 0x2c, 0xf1, 0x27, 0xcc, 0x1b, 0x7c, 0x49, 0x97, 0xf0, 0x82, 0x96, 0x01, 0xa4, 0xc9, 0x05,
	0x49, 0xa6, 0x03, 0x2f, 0x38, 0x9f, 0x6b, 0x6c, 0xe6, 0xc4, 0xf7, 0x78, 0xf8, 0x71, 0xd4, 0xc2,
	0x13, 0x2a, 0x5e, 0x14, 0x69, 0x64, 0xf2, 0x69, 0x37, 0x4c, 0xd6, 0x89, 0xc2, 0x43, 0xbf, 0xc5,
	0x29, 0x4b, 0x48, 0x93, 0x09, 0x92, 0x9d, 0x3e, 0x64, 0x56, 0xbe, 0x97, 0x66, 0x0c, 0x55, 0x2b,
	0x4f, 0x32, 0x2b, 0xdf, 0x6b, 0x78, 0x10, 0x3d, 0x23, 0xde, 0x69, 0x9d, 0x36, 0xc4, 0xb7, 0x47,
	0x8a, 0x9e, 0x48, 0xc2, 0xe8, 0x29, 0x3a, 0x41, 0x64, 0x96, 0xbc, 0x9c, 0x97, 0x22, 0x51, 0xf7,
	0x14, 0x90, 0xb3, 0x5c, 0xe6, 0x9a, 0x92, 0xaf, 0x5c, 0x90, 0xac, 0x44, 0x43, 0x5f, 0x9e, 0x76,
	0x63, 0x60, 0xf3, 0xdd, 0xa4, 0x1b, 0x71, 0x78, 0xf9, 0xaa, 0x0c, 0x9a, 0x82, 0x8a, 0xaf, 0xaf,
	0xb0, 0x58, 0x7f, 0x55, 0x64, 0xec, 0x23, 0x08, 0xe8, 0xbf, 0x38, 0xe3, 0x5a, 0x65, 0x93, 0xee,
	0xaf, 0x73, 0x27, 0x12, 0xb6, 0x85, 0xce, 0xcf, 0xdd, 0x3f, 0xe5, 0x4e, 0x64, 0x53, 0x87, 0xea,
	0xc0, 0x27, 0x73, 0x38, 0xf0, 0xa9, 0x8b, 0x1c, 0xf8, 0xf4, 0x85, 0x0e, 0x7c, 0x66, 0xa4, 0x03,
	0x2f, 0x0f, 0x72, 0xe0, 0xd6, 0x3f, 0x95, 0x58, 0xf9, 0x99, 0xd3, 0xe6, 0xff, 0xf7, 0x8e, 0xa4,
	0x2c, 0x71, 0xa3, 0x45, 0x43, 0x5b, 0x14, 0xbb, 0xad, 0xb0, 0x89, 0x24, 0x2b, 0x74, 0xa3, 0x5e,
	0xb4, 0x34, 0xfc, 0x3b, 0xe2, 0xc0, 0xde, 0xed, 0x2b, 0x7c, 0xa3, 0xa5, 0x66, 0x44, 0xb5, 0x0e,
	0x6e, 0xa3, 0xbf, 0x0e, 0x8e, 0x5c, 0xbd, 0xa4, 0x6a, 0x75, 0x71, 0x37, 0xf5, 0xba, 0x38, 0x71,
	0x08, 0x61, 0x0f, 0xda, 0x3c, 0x2b, 0x92, 0x5b, 0x56, 0x8a, 0xe4, 0x86, 0xea, 0x73, 0x76, 0xa4,
	0x3e, 0xe7, 0x06, 0xea, 0xf3, 0x94, 0x55, 0x9e, 0xf9, 0xde, 0x47, 0x4e, 0x67, 0x24, 0x04, 0x3a,
	0xd2, 0x21, 0xd0, 0x11, 0xb8, 0xad, 0x23, 0xba, 0x01, 0x85, 0x69, 0x15, 0x1a, 0x75, 0x85, 0xd0,
	0x15, 0xfa, 0x5e, 0xb6, 0xef, 0x13, 0x83, 0xf6, 0xdd, 0xea, 0xb2, 0xda, 0x93, 0x16, 0x77, 0x22,
	0x82, 0x60, 0xe2, 0x4e, 0xfd, 0xc4, 0x71, 0x9b, 0x7c, 0x3c, 0x1c, 0xa7, 0x27, 0x9d, 0x8a, 0xa3,
	0x92, 0x4e, 0x3b, 0x6c, 0xc9, 0xe6, 0x07, 0x5d, 0xbf, 0xe5, 0xf5, 0x4e, 0x39, 0x5e, 0xf2, 0xaa,
	0xc9, 0xe6, 0xb5, 0x95, 0xc7, 0xc6, 0x27, 0x6f, 0x56, 0xae, 0x43, 0x0e, 0x33, 0x95, 0xa0, 0x54,
	0x63, 0x3d, 0x66, 0x57, 0x32, 0x9c, 0xab, 0x94, 0x63, 0x8d, 0x03, 0x75, 0xdf, 0x67, 0x97, 0x71,
	0xaf, 0x21, 0x9a, 0x66, 0xef, 0x9b, 0x2b, 0x06, 0xff, 0x32, 0x5b, 0x54, 0xb5, 0x34, 0xbe, 0x7a,
	0xac, 0x1f, 0xb3, 0xab, 0x8f, 0xf1, 0x7e, 0x40, 0x22, 0x64, 0x79, 0xd3, 0xaf, 0xb1, 0x69, 0x62,
	0x4a, 0xb7, 0xeb, 0x4e, 0xae, 0x7a, 0x17, 0x25, 0x41, 0x25, 0x86, 0xdb, 0xe9, 0x83, 0xf5, 0x8c,
	0xd5, 0x44, 0x8a, 0x53, 0xdb, 0xae, 0x86, 0x37, 0xee, 0x86, 0xd9, 0xac, 0x3e, 0x54, 0x90, 0x58,
	0xfe, 0x3d, 0xc6, 0x32, 0x6b, 0x10, 0x25, 0xc3, 0x14, 0x72, 0xa4, 0xbd, 0xc4, 0xb6, 0xc2, 0x42,
	0x96, 0xa7, 0xe6, 0x5f, 0xbf, 0xa2, 0xe5, 0x3d, 0x62, 0x8b, 0x42, 0xce, 0xf8, 0xea, 0xdc, 0x62,
	0x57, 0xb3, 0xf7, 0x82, 0x3b, 0xa1, 0xae, 0x50, 0x71, 0x89, 0x2c, 0x5c, 0x78, 0x89, 0xb4, 0xbe,
	0x8f, 0xa9, 0x5f, 0xda, 0x17, 0x92, 0x32, 0xe6, 0xe6, 0xfa, 0x58, 0xf2, 0xa6, 0x0b, 0x10, 0x9b,
	0xfa, 0x22, 0xab, 0x47, 0xca, 0x6b, 0x12, 0xc0, 0x4c, 0x26, 0x41, 0xde, 0x8f, 0xe4, 0x89, 0x7f,
	0xad, 0x9f, 0x16, 0xe1, 0x8e, 0x97, 0xf1, 0x0c, 0x75, 0x70, 0x9b, 0x03, 0x0a, 0x12, 0x08, 0x75,
	0x13, 0x59, 0xc4, 0x1b, 0xad, 0x44, 0xe1, 0x5e, 0x7f, 0x89, 0x82, 0x30, 0x00, 0xa0, 0x8a, 0x11,
	0x6a, 0xcd, 0xc2, 0x7a, 0x5f, 0xcd, 0x82, 0xb8, 0x08, 0x00, 0x91, 0x9c, 0xbe, 0x52, 0xc3, 0x70,
	0xab, 0xa7, 0x86, 0x81, 0xfc, 0x03, 0x0f, 0x3c, 0xe2, 0xcc, 0x2a, 0x1a, 0x6e, 0xf5, 0x54, 0x34,
	0x10, 0x1f, 0x92, 0x10, 0x78, 0xa5, 0xf5, 0x0d, 0xef, 0xaa, 0xb5, 0xaf, 0x10, 0xc3, 0x41, 0x6b,
	0x37, 0x94, 0xfd, 0xe8, 0x35, 0xb9, 0x62, 0x63, 0xdb, 0xfa, 0x11, 0x16, 0x82, 0x6a, 0x83, 0x84,
	0xa6, 0x76, 0x44, 0x89, 0x08, 0x25, 0x97, 0x6f, 0xe7, 0x28, 0x11, 0x21, 0x2d, 0x61, 0x18, 0x80,
	0x91, 0xa2, 0x56, 0xe4, 0x57, 0xd8, 0x75, 0x39, 0x43, 0x23, 0x38, 0x0c, 0x9f, 0xfb, 0x71, 0xb2,
	0x75, 0x4a, 0xd6, 0xa1, 0x1b, 0xd6, 0xf6, 0xc5, 0x86, 0xb5, 0x6d, 0xfd, 0x75, 0x91, 0x59, 0x17,
	0x09, 0x13, 0x4b, 0xff, 0x93, 0x02, 0xbb, 0xe2, 0x86, 0xed, 0x4e, 0x18, 0xf0, 0x20, 0x65, 0x06,
	0x46, 0x61, 0x73, 0xbf, 0x31, 0xea, 0x5d, 0x46, 0xce, 0xb0, 0xf1, 0x64, 0x80, 0xf4, 0xa7, 0x41,
	0x12, 0x9d, 0x6e, 0x4d, 0x9e, 0x9f, 0xd5, 0x0b, 0xef, 0xd8, 0x03, 0xe7, 0xaf, 0x9d, 0xb0, 0xe5,
	0xa1, 0x23, 0x8d, 0x2a, 0x2b, 0xbd, 0xe2, 0xa7, 0x69, 0x4d, 0xf1, 0x2b, 0x7e, 0x6a, 0x3c, 0x61,
	0x93, 0x27, 0x4e, 0xab, 0x4b, 0xe6, 0x5a, 0xd9, 0x7c, 0x27, 0x97, 0xfb, 0xcc, 0x22, 0x08, 0x8d,
	0x7d, 0x54, 0x7c, 0xbf, 0x60, 0x2d, 0x61, 0x84, 0xb1, 0x01, 0xa1, 0x7f, 0xea, 0xb4, 0x5a, 0xe9,
	0x2d, 0xcd, 0xfa, 0x16, 0x5b, 0x54, 0xe9, 0xb0, 0x16, 0xd0, 0x48, 0x5f, 0x75, 0xb3, 0xf5, 0x8f,
	0x05, 0x66, 0xf6, 0x73, 0x8a, 0xed, 0xde, 0x7d, 0xa3, 0x5a, 0x82, 0x21, 0x9f, 0x22, 0x7e, 0xc8,
	0xca, 0x78, 0xa3, 0x40, 0xbd, 0x15, 0x73, 0x45, 0xdb, 0x6c, 0x75, 0xa0, 0x36, 0xb2, 0x76, 0xba,
	0x9e, 0xb4, 0x60, 0xb5, 0x52, 0x9c, 0xf5, 0xb7, 0x05, 0x36, 0xa7, 0x31, 0xa7, 0x29, 0xa0, 0xc2,
	0x80, 0x14, 0xd0, 0x0a, 0x9b, 0x08, 0x9c, 0xb4, 0xf2, 0x99, 0xac, 0x1b, 0x93, 0xaf, 0xf8, 0x17,
	0x7a, 0x0f, 0x1d, 0x37, 0xf5, 0x0e, 0xd8, 0x0b, 0x6d, 0x1b, 0xff, 0x42, 0x6f, 0xec, 0x1f, 0x05,
	0x02, 0xd9, 0x62, 0x2f, 0xb4, 0x6d, 0xfc, 0x0b, 0xd7, 0x73, 0x5c, 0x13, 0xed, 0x43, 0x2c, 0xae,
	0x04, 0x78, 0x3d, 0xa7, 0x75, 0x7b, 0xd4, 0x61, 0x6b, 0x6c, 0xd6, 0x7f, 0x15, 0x98, 0xb1, 0xeb,
	0x9c, 0x70, 0x5d, 0x9d, 0x86, 0x2d, 0x63, 0x4c, 0x7a, 0x8e, 0xbe, 0xad, 0x1f, 0xf8, 0x2f, 0xcf,
	0xea, 0xd6, 0x61, 0x18, 0xb5, 0x1f, 0x59, 0x92, 0x66, 0xad, 0xf6, 0x54, 0xe2, 0x5b, 0x32, 0x12,
	0x6d, 0x1b, 0xbf, 0x5f, 0xe8, 0xd7, 0xc2, 0x3b, 0x79, 0xb5, 0x40, 0xee, 0xe0, 0x3d, 0x5d, 0x0d,
	0x5f, 0x9e, 0xd5, 0xdf, 0xa6, 0x35, 0x48, 0x9a, 0xba, 0x06, 0x59, 0x29, 0xaf, 0xe8, 0xeb, 0x80,
	0xcd, 0xf7, 0xbc, 0xec, 0x05, 0xfa, 0xea, 0xdd, 0xd5, 0x62, 0xbe, 0x5d, 0x7d, 0xae, 0x04, 0xbd,
	0xad, 0x53, 0x70, 0xbc, 0x70, 0x12, 0x56, 0x58, 0xf9, 0x80, 0x1f, 0xf9, 0xc1, 0x5e, 0x5a, 0x11,
	0x5f, 0xb2, 0x25, 0x41, 0xad, 0x42, 0x2b, 0x6a, 0x55, 0x68, 0xd6, 0x8f, 0x94, 0x08, 0x98, 0x4a,
	0x13, 0xa7, 0xe5, 0x69, 0x2f, 0x2a, 0x1a, 0xab, 0x0a, 0x38, 0x43, 0x42, 0x0b, 0x6c, 0xee, 0x45,
	0xf8, 0x38, 0x3a, 0x4a, 0x0b, 0xf7, 0xad, 0x2a, 0x9b, 0x4f, 0x09, 0x34, 0xd3, 0x9d, 0x0f, 0xd8,
	0xe5, 0xbe, 0x3a, 0x46, 0x63, 0x86, 0x4d, 0x34, 0x02, 0x3f, 0xa9, 0x5e, 0x32, 0x2a, 0x6c, 0xfa,
	0x53, 0xc7, 0x4f, 0xfc, 0xe0, 0xa8, 0x5a, 0x30, 0xa6, 0x59, 0xa9, 0x11, 0x1c, 0x55, 0x8b, 0xd0,
	0xff, 0x83, 0x13, 0x1e, 0x55, 0x4b, 0x77, 0x6e, 0x67, 0xc3, 0x65, 0x79, 0xa5, 0x51, 0x66, 0x93,
	0x3b, 0x4e, 0x2b, 0xe6, 0xd5, 0x4b, 0xc0, 0xb9, 0x17, 0x75, 0x79, 0xb5, 0x70, 0x07, 0x7f, 0x6d,
	0xa5, 0x57, 0x37, 0x1a, 0x57, 0xd9, 0xe5, 0x0f, 0x1d, 0x2a, 0x70, 0x7c, 0x11, 0x8a, 0x3a, 0xc7,
	0xea, 0x25, 0x63, 0x91, 0x2d, 0xa4, 0xe4, 0x94, 0x58, 0x30, 0x96, 0xd9, 0xd5, 0x94, 0x08, 0x73,
	0x4b, 0xfe, 0xa2, 0x71, 0x8d, 0x2d, 0xaa, 0x5d, 0x69, 0x47, 0xc9, 0x98, 0x67, 0xec, 0x43, 0x27,
	0x15, 0x5d, 0x9d, 0xb8, 0x73, 0xcc, 0xae, 0x0c, 0xaa, 0x87, 0x34, 0x16, 0x58, 0xe5, 0x89, 0x13,
	0xec, 0x76, 0x0f, 0x5e, 0x84, 0xbb, 0xdd, 0x83, 0xea, 0x25, 0x49, 0xd8, 0xed, 0x1e, 0xe0, 0xec,
	0x8b, 0x6c, 0x81, 0x08, 0x34, 0x37, 0x70, 0x15, 0x75, 0x22, 0x71, 0x96, 0x8c, 0x39, 0x56, 0x7e,
	0xe2, 0x04, 0x2f, 0xc2, 0x04, 0x78, 0x26, 0x36, 0xff, 0x66, 0x85, 0xcd, 0x3f, 0x25, 0x75, 0xed,
	0x92, 0xba, 0x8c, 0x80, 0xcd, 0xeb, 0xd1, 0xc3, 0xb8, 0x9f, 0x3b, 0xd8, 0x08, 0x45, 0xd6, 0xee,
	0xe4, 0xf3, 0x9e, 0x28, 0xfd, 0xf7, 0x0a, 0x6a, 0xd0, 0x8f, 0xc9, 0xd4, 0x8c, 0x87, 0xa3, 0xe7,
	0x1c, 0xf0, 0xd3, 0x8f, 0xda, 0x77, 0xc6, 0x1d, 0x26, 0x2c, 0xfa, 0x98, 0x55, 0x94, 0x35, 0x18,
	0x0f, 0x72, 0xbf, 0x71, 0x36, 0x73, 0xce, 0x8f, 0xeb, 0x72, 0x4a, 0x9f, 0xcd, 0x3d, 0xf6, 0xd2,
	0x0b, 0xde, 0x8e, 0x73, 0x62, 0x8c, 0x2a, 0x61, 0x95, 0xbf, 0x23, 0xaa, 0x8d, 0x72, 0x60, 0xfa,
	0x29, 0x82, 0xa9, 0xb6, 0x79, 0xeb, 0x17, 0x32, 0xd5, 0xef, 0xd2, 0x4f, 0xb1, 0x06, 0xfc, 0x0c,
	0xed, 0xdb, 0xa3, 0xf7, 0xb4, 0xff, 0x07, 0x5c, 0xb5, 0x07, 0x39, 0xab, 0x9c, 0x95, 0x89, 0x9a,
	0x6c, 0x26, 0xfd, 0xdd, 0xa4, 0xb1, 0x31, 0x7a, 0x52, 0xf5, 0x07, 0x96, 0xb5, 0xf5, 0x1c, 0x18,
	0x51, 0xbe, 0x2c, 0xcd, 0x84, 0xbf, 0xfb, 0xcc, 0x33, 0x93, 0xfa, 0x53, 0xd2, 0x91, 0x33, 0xe9,
	0xbf, 0x26, 0x7d, 0xc5, 0x2a, 0x4a, 0x11, 0x85, 0x31, 0x12, 0x46, 0x69, 0x15, 0x2b, 0xe3, 0xea,
	0xf0, 0x18, 0x73, 0xe1, 0x5a, 0x05, 0x41, 0xfe, 0x03, 0x91, 0x02, 0xb3, 0xda, 0x38, 0xb5, 0x1c,
	0xc2, 0xe9, 0xa8, 0x5f, 0xba, 0x72, 0x38, 0x1d, 0xfd, 0xb3, 0x5a, 0x6d, 0x8c, 0xab, 0xb9, 0xd1,
	0xc1, 0x57, 0xd4, 0x4a, 0xa9, 0xc7, 0x9f, 0x70, 0x9c, 0xa8, 0x67, 0xfc, 0xb6, 0x32, 0xa3, 0xf0,
	0x71, 0x0f, 0xf2, 0xce, 0x98, 0x05, 0xf3, 0x3c, 0xfe, 0x6d, 0x60, 0xc4, 0x6e, 0xb2, 0x59, 0xf5,
	0xf3, 0x46, 0x5e, 0x6b, 0xcd, 0x5e, 0xf5, 0x76, 0x0e, 0x6b, 0x25, 0xc9, 0xc7, 0x6c, 0x5e, 0x4f,
	0xe3, 0x8c, 0xdc, 0xd8, 0xbe, 0xac, 0xcf, 0xb8, 0xf6, 0xfa, 0x07, 0x05, 0x66, 0x0e, 0xab, 0x1a,
	0x33, 0x1e, 0x8d, 0xc4, 0x7a, 0x43, 0xcb, 0xcd, 0xc6, 0x5d, 0xc7, 0x6b, 0xe5, 0x63, 0x6f, 0x16,
	0x4a, 0xde, 0xcd, 0xab, 0x31, 0x25, 0xa0, 0xd4, 0xc6, 0xbb, 0x26, 0x19, 0x7f, 0x56, 0x60, 0xb5,
	0xe1, 0x37, 0x3e, 0xe3, 0xbb, 0x6f, 0x70, 0x59, 0x3c, 0xae, 0x3d, 0x7e, 0xe3, 0xab, 0xa6, 0xf1,
	0x93, 0x82, 0x92, 0x1e, 0x54, 0x53, 0x1d, 0xb9, 0x4f, 0x40, 0x96, 0xc3, 0xc9, 0x7f, 0x02, 0x7a,
	0xb2, 0x36, 0xc7, 0x78, 0x4f, 0x54, 0xb2, 0x04, 0xb9, 0xdd, 0x8c, 0x9e, 0x8e, 0xa8, 0xe5, 0x4e,
	0x23, 0x18, 0x31, 0xbe, 0xb5, 0x32, 0x3c, 0xbf, 0xa7, 0xe9, 0x99, 0x33, 0xff, 0xaf, 0x5b, 0x8c,
	0xcf, 0xd9, 0x15, 0x61, 0xd2, 0x5a, 0x46, 0xd3, 0x58, 0xcf, 0x69, 0xcb, 0x14, 0x9d, 0x46, 0x05,
	0xeb, 0xc1, 0xd9, 0xd2, 0x3f, 0x2d, 0xb0, 0x95, 0x21, 0x29, 0x49, 0x72, 0x05, 0xbf, 0x94, 0xef,
	0x30, 0x0e, 0x48, 0x8c, 0xd6, 0xbe, 0xf7, 0x55, 0x87, 0x8a, 0xb5, 0xfd, 0x56, 0x96, 0x91, 0x54,
	0x33, 0x9b, 0x23, 0x71, 0xe6, 0xe0, 0x6c, 0xe8, 0xb8, 0x9e, 0xa1, 0xcb, 0xaa, 0xbd, 0xe9, 0x50,
	0x63, 0x33, 0xdf, 0xcc, 0x6f, 0xe2, 0x18, 0x4f, 0x99, 0xd1, 0x9f, 0x49, 0x1d, 0x09, 0xc4, 0x06,
	0x26, 0x5f, 0xc7, 0x9d, 0x3a, 0xcc, 0xde, 0x18, 0x6c, 0x93, 0x26, 0x1e, 0xcf, 0x04, 0xc7, 0x9c,
	0xf0, 0x77, 0x58, 0xb5, 0x37, 0xbb, 0x33, 0x72, 0x8b, 0x07, 0x24, 0x8e, 0x6a, 0xef, 0x8d, 0x3d,
	0x26, 0x33, 0xb0, 0xcb, 0x7d, 0x09, 0xaa, 0x3c, 0xde, 0xbf, 0x2f, 0xa5, 0x35, 0x12, 0xf3, 0x0e,
	0xc8, 0x9c, 0x1c, 0xb3, 0x39, 0x8d, 0x6a, 0x8c, 0x2f, 0x63, 0xcc, 0x0d, 0xdf, 0xba, 0xf2, 0x0f,
	0x5f, 0xdc, 0x28, 0xfc, 0xf3, 0x17, 0x37, 0x0a, 0xff, 0xf6, 0xc5, 0x8d, 0xc2, 0xcf, 0xfe, 0xfd,
	0xc6, 0xa5, 0x1f, 0x16, 0x4f, 0x1e, 0x1c, 0x4c, 0xe1, 0xff, 0x9d, 0xf2, 0xee, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xff, 0x54, 0xd8, 0xd1, 0x96, 0x45, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EsportsServiceClient is the client API for EsportsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EsportsServiceClient interface {
	// 外部调用
	// 获取单赛程详情，赛程无效时报错
	GetContestInfo(ctx context.Context, in *GetContestRequest, opts ...grpc.CallOption) (*ContestInfo, error)
	// 按时间赛程列表
	GetContestsByTime(ctx context.Context, in *GetTimeContestsRequest, opts ...grpc.CallOption) (*GetTimeContestsResponse, error)
	// 赛程数据，会过滤掉无效赛程，最大100
	GetContests(ctx context.Context, in *GetContestsRequest, opts ...grpc.CallOption) (*ContestsResponse, error)
	// 添加预约
	AddContestFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*NoArgsResponse, error)
	// 删除预约
	DelContestFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*NoArgsResponse, error)
	// 赛程订阅用户列表新接口
	GetContestSubscribers(ctx context.Context, in *GetSubscribersRequest, opts ...grpc.CallOption) (*ContestSubscribers, error)
	// 获取赛事下的所有游戏
	GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GamesResponse, error)
	// 获取战队详情，会过滤掉无效赛程
	GetTeams(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (*TeamsResponse, error)
	// internal 赛事内部调用
	// 添加赛程
	SaveContest(ctx context.Context, in *SaveContestReq, opts ...grpc.CallOption) (*NoArgsResponse, error)
	// 获取赛程
	GetContestModel(ctx context.Context, in *GetContestModelReq, opts ...grpc.CallOption) (*ContestModel, error)
	// 获取赛季信息
	GetSeasonModel(ctx context.Context, in *GetSeasonModelReq, opts ...grpc.CallOption) (*SeasonModel, error)
	GetSeasonDetail(ctx context.Context, in *GetSeasonModelReq, opts ...grpc.CallOption) (*SeasonDetail, error)
	GetSeasonByTime(ctx context.Context, in *GetSeasonByTimeReq, opts ...grpc.CallOption) (*GetSeasonByTimeResponse, error)
	// 获取战队信息
	GetTeamModel(ctx context.Context, in *GetTeamModelReq, opts ...grpc.CallOption) (*TeamModel, error)
	ClearTeamCache(ctx context.Context, in *ClearTeamCacheReq, opts ...grpc.CallOption) (*NoArgsResponse, error)
	// 更新赛程状态赛程
	RefreshContestStatusInfo(ctx context.Context, in *RefreshContestStatusInfoReq, opts ...grpc.CallOption) (*NoArgsResponse, error)
	GetSeasonContests(ctx context.Context, in *GetSeasonContestsReq, opts ...grpc.CallOption) (*SeasonContests, error)
	// 组件获取赛季下所有赛程
	GetContestInfoListBySeason(ctx context.Context, in *GetContestInfoListBySeasonReq, opts ...grpc.CallOption) (*GetContestInfoListBySeasonResponse, error)
	GetSeasonSeriesModel(ctx context.Context, in *GetSeasonSeriesReq, opts ...grpc.CallOption) (*GetSeasonSeriesResponse, error)
	GetContestGameModel(ctx context.Context, in *GetContestGameReq, opts ...grpc.CallOption) (*GameModel, error)
	GetContestGameDetail(ctx context.Context, in *GetContestGameReq, opts ...grpc.CallOption) (*GameDetail, error)
	// 重构缓存系列
	// 重建活跃的赛季，读db，设置缓存
	RefreshActiveSeasons(ctx context.Context, in *NoArgsRequest, opts ...grpc.CallOption) (*ActiveSeasonsResponse, error)
	RefreshSeasonContestIdsCache(ctx context.Context, in *RefreshSeasonContestIdsReq, opts ...grpc.CallOption) (*RefreshSeasonContestIdsResponse, error)
	RefreshContestCache(ctx context.Context, in *RefreshContestCacheReq, opts ...grpc.CallOption) (*NoArgsResponse, error)
	RefreshTeamCache(ctx context.Context, in *RefreshTeamCacheReq, opts ...grpc.CallOption) (*NoArgsResponse, error)
	RefreshSeriesCache(ctx context.Context, in *RefreshSeriesCacheReq, opts ...grpc.CallOption) (*NoArgsResponse, error)
	RefreshGameCache(ctx context.Context, in *NoArgsRequest, opts ...grpc.CallOption) (*NoArgsResponse, error)
	// 评论墙
	GetReplyWallList(ctx context.Context, in *GetReplyWallListReq, opts ...grpc.CallOption) (*GetReplyWallListResponse, error)
	GetReplyWallModel(ctx context.Context, in *GetReplyWallModelReq, opts ...grpc.CallOption) (*SaveReplyWallModel, error)
	SaveReplyWall(ctx context.Context, in *SaveReplyWallModel, opts ...grpc.CallOption) (*NoArgsResponse, error)
}

type esportsServiceClient struct {
	cc *grpc.ClientConn
}

func NewEsportsServiceClient(cc *grpc.ClientConn) EsportsServiceClient {
	return &esportsServiceClient{cc}
}

func (c *esportsServiceClient) GetContestInfo(ctx context.Context, in *GetContestRequest, opts ...grpc.CallOption) (*ContestInfo, error) {
	out := new(ContestInfo)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetContestInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetContestsByTime(ctx context.Context, in *GetTimeContestsRequest, opts ...grpc.CallOption) (*GetTimeContestsResponse, error) {
	out := new(GetTimeContestsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetContestsByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetContests(ctx context.Context, in *GetContestsRequest, opts ...grpc.CallOption) (*ContestsResponse, error) {
	out := new(ContestsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetContests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) AddContestFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/AddContestFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) DelContestFav(ctx context.Context, in *FavRequest, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/DelContestFav", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetContestSubscribers(ctx context.Context, in *GetSubscribersRequest, opts ...grpc.CallOption) (*ContestSubscribers, error) {
	out := new(ContestSubscribers)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetContestSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GamesResponse, error) {
	out := new(GamesResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetTeams(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (*TeamsResponse, error) {
	out := new(TeamsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) SaveContest(ctx context.Context, in *SaveContestReq, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/SaveContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetContestModel(ctx context.Context, in *GetContestModelReq, opts ...grpc.CallOption) (*ContestModel, error) {
	out := new(ContestModel)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetContestModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetSeasonModel(ctx context.Context, in *GetSeasonModelReq, opts ...grpc.CallOption) (*SeasonModel, error) {
	out := new(SeasonModel)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetSeasonModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetSeasonDetail(ctx context.Context, in *GetSeasonModelReq, opts ...grpc.CallOption) (*SeasonDetail, error) {
	out := new(SeasonDetail)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetSeasonDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetSeasonByTime(ctx context.Context, in *GetSeasonByTimeReq, opts ...grpc.CallOption) (*GetSeasonByTimeResponse, error) {
	out := new(GetSeasonByTimeResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetSeasonByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetTeamModel(ctx context.Context, in *GetTeamModelReq, opts ...grpc.CallOption) (*TeamModel, error) {
	out := new(TeamModel)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetTeamModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) ClearTeamCache(ctx context.Context, in *ClearTeamCacheReq, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/ClearTeamCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) RefreshContestStatusInfo(ctx context.Context, in *RefreshContestStatusInfoReq, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/RefreshContestStatusInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetSeasonContests(ctx context.Context, in *GetSeasonContestsReq, opts ...grpc.CallOption) (*SeasonContests, error) {
	out := new(SeasonContests)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetSeasonContests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetContestInfoListBySeason(ctx context.Context, in *GetContestInfoListBySeasonReq, opts ...grpc.CallOption) (*GetContestInfoListBySeasonResponse, error) {
	out := new(GetContestInfoListBySeasonResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetContestInfoListBySeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetSeasonSeriesModel(ctx context.Context, in *GetSeasonSeriesReq, opts ...grpc.CallOption) (*GetSeasonSeriesResponse, error) {
	out := new(GetSeasonSeriesResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetSeasonSeriesModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetContestGameModel(ctx context.Context, in *GetContestGameReq, opts ...grpc.CallOption) (*GameModel, error) {
	out := new(GameModel)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetContestGameModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetContestGameDetail(ctx context.Context, in *GetContestGameReq, opts ...grpc.CallOption) (*GameDetail, error) {
	out := new(GameDetail)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetContestGameDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) RefreshActiveSeasons(ctx context.Context, in *NoArgsRequest, opts ...grpc.CallOption) (*ActiveSeasonsResponse, error) {
	out := new(ActiveSeasonsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/RefreshActiveSeasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) RefreshSeasonContestIdsCache(ctx context.Context, in *RefreshSeasonContestIdsReq, opts ...grpc.CallOption) (*RefreshSeasonContestIdsResponse, error) {
	out := new(RefreshSeasonContestIdsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/RefreshSeasonContestIdsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) RefreshContestCache(ctx context.Context, in *RefreshContestCacheReq, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/RefreshContestCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) RefreshTeamCache(ctx context.Context, in *RefreshTeamCacheReq, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/RefreshTeamCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) RefreshSeriesCache(ctx context.Context, in *RefreshSeriesCacheReq, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/RefreshSeriesCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) RefreshGameCache(ctx context.Context, in *NoArgsRequest, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/RefreshGameCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetReplyWallList(ctx context.Context, in *GetReplyWallListReq, opts ...grpc.CallOption) (*GetReplyWallListResponse, error) {
	out := new(GetReplyWallListResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetReplyWallList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) GetReplyWallModel(ctx context.Context, in *GetReplyWallModelReq, opts ...grpc.CallOption) (*SaveReplyWallModel, error) {
	out := new(SaveReplyWallModel)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/GetReplyWallModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esportsServiceClient) SaveReplyWall(ctx context.Context, in *SaveReplyWallModel, opts ...grpc.CallOption) (*NoArgsResponse, error) {
	out := new(NoArgsResponse)
	err := c.cc.Invoke(ctx, "/operational.esportsservice.v1.EsportsService/SaveReplyWall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EsportsServiceServer is the server API for EsportsService service.
type EsportsServiceServer interface {
	// 外部调用
	// 获取单赛程详情，赛程无效时报错
	GetContestInfo(context.Context, *GetContestRequest) (*ContestInfo, error)
	// 按时间赛程列表
	GetContestsByTime(context.Context, *GetTimeContestsRequest) (*GetTimeContestsResponse, error)
	// 赛程数据，会过滤掉无效赛程，最大100
	GetContests(context.Context, *GetContestsRequest) (*ContestsResponse, error)
	// 添加预约
	AddContestFav(context.Context, *FavRequest) (*NoArgsResponse, error)
	// 删除预约
	DelContestFav(context.Context, *FavRequest) (*NoArgsResponse, error)
	// 赛程订阅用户列表新接口
	GetContestSubscribers(context.Context, *GetSubscribersRequest) (*ContestSubscribers, error)
	// 获取赛事下的所有游戏
	GetGames(context.Context, *GetGamesRequest) (*GamesResponse, error)
	// 获取战队详情，会过滤掉无效赛程
	GetTeams(context.Context, *GetTeamsRequest) (*TeamsResponse, error)
	// internal 赛事内部调用
	// 添加赛程
	SaveContest(context.Context, *SaveContestReq) (*NoArgsResponse, error)
	// 获取赛程
	GetContestModel(context.Context, *GetContestModelReq) (*ContestModel, error)
	// 获取赛季信息
	GetSeasonModel(context.Context, *GetSeasonModelReq) (*SeasonModel, error)
	GetSeasonDetail(context.Context, *GetSeasonModelReq) (*SeasonDetail, error)
	GetSeasonByTime(context.Context, *GetSeasonByTimeReq) (*GetSeasonByTimeResponse, error)
	// 获取战队信息
	GetTeamModel(context.Context, *GetTeamModelReq) (*TeamModel, error)
	ClearTeamCache(context.Context, *ClearTeamCacheReq) (*NoArgsResponse, error)
	// 更新赛程状态赛程
	RefreshContestStatusInfo(context.Context, *RefreshContestStatusInfoReq) (*NoArgsResponse, error)
	GetSeasonContests(context.Context, *GetSeasonContestsReq) (*SeasonContests, error)
	// 组件获取赛季下所有赛程
	GetContestInfoListBySeason(context.Context, *GetContestInfoListBySeasonReq) (*GetContestInfoListBySeasonResponse, error)
	GetSeasonSeriesModel(context.Context, *GetSeasonSeriesReq) (*GetSeasonSeriesResponse, error)
	GetContestGameModel(context.Context, *GetContestGameReq) (*GameModel, error)
	GetContestGameDetail(context.Context, *GetContestGameReq) (*GameDetail, error)
	// 重构缓存系列
	// 重建活跃的赛季，读db，设置缓存
	RefreshActiveSeasons(context.Context, *NoArgsRequest) (*ActiveSeasonsResponse, error)
	RefreshSeasonContestIdsCache(context.Context, *RefreshSeasonContestIdsReq) (*RefreshSeasonContestIdsResponse, error)
	RefreshContestCache(context.Context, *RefreshContestCacheReq) (*NoArgsResponse, error)
	RefreshTeamCache(context.Context, *RefreshTeamCacheReq) (*NoArgsResponse, error)
	RefreshSeriesCache(context.Context, *RefreshSeriesCacheReq) (*NoArgsResponse, error)
	RefreshGameCache(context.Context, *NoArgsRequest) (*NoArgsResponse, error)
	// 评论墙
	GetReplyWallList(context.Context, *GetReplyWallListReq) (*GetReplyWallListResponse, error)
	GetReplyWallModel(context.Context, *GetReplyWallModelReq) (*SaveReplyWallModel, error)
	SaveReplyWall(context.Context, *SaveReplyWallModel) (*NoArgsResponse, error)
}

// UnimplementedEsportsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEsportsServiceServer struct {
}

func (*UnimplementedEsportsServiceServer) GetContestInfo(ctx context.Context, req *GetContestRequest) (*ContestInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestInfo not implemented")
}
func (*UnimplementedEsportsServiceServer) GetContestsByTime(ctx context.Context, req *GetTimeContestsRequest) (*GetTimeContestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestsByTime not implemented")
}
func (*UnimplementedEsportsServiceServer) GetContests(ctx context.Context, req *GetContestsRequest) (*ContestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContests not implemented")
}
func (*UnimplementedEsportsServiceServer) AddContestFav(ctx context.Context, req *FavRequest) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContestFav not implemented")
}
func (*UnimplementedEsportsServiceServer) DelContestFav(ctx context.Context, req *FavRequest) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelContestFav not implemented")
}
func (*UnimplementedEsportsServiceServer) GetContestSubscribers(ctx context.Context, req *GetSubscribersRequest) (*ContestSubscribers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestSubscribers not implemented")
}
func (*UnimplementedEsportsServiceServer) GetGames(ctx context.Context, req *GetGamesRequest) (*GamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (*UnimplementedEsportsServiceServer) GetTeams(ctx context.Context, req *GetTeamsRequest) (*TeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (*UnimplementedEsportsServiceServer) SaveContest(ctx context.Context, req *SaveContestReq) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveContest not implemented")
}
func (*UnimplementedEsportsServiceServer) GetContestModel(ctx context.Context, req *GetContestModelReq) (*ContestModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestModel not implemented")
}
func (*UnimplementedEsportsServiceServer) GetSeasonModel(ctx context.Context, req *GetSeasonModelReq) (*SeasonModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonModel not implemented")
}
func (*UnimplementedEsportsServiceServer) GetSeasonDetail(ctx context.Context, req *GetSeasonModelReq) (*SeasonDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonDetail not implemented")
}
func (*UnimplementedEsportsServiceServer) GetSeasonByTime(ctx context.Context, req *GetSeasonByTimeReq) (*GetSeasonByTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonByTime not implemented")
}
func (*UnimplementedEsportsServiceServer) GetTeamModel(ctx context.Context, req *GetTeamModelReq) (*TeamModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamModel not implemented")
}
func (*UnimplementedEsportsServiceServer) ClearTeamCache(ctx context.Context, req *ClearTeamCacheReq) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTeamCache not implemented")
}
func (*UnimplementedEsportsServiceServer) RefreshContestStatusInfo(ctx context.Context, req *RefreshContestStatusInfoReq) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshContestStatusInfo not implemented")
}
func (*UnimplementedEsportsServiceServer) GetSeasonContests(ctx context.Context, req *GetSeasonContestsReq) (*SeasonContests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonContests not implemented")
}
func (*UnimplementedEsportsServiceServer) GetContestInfoListBySeason(ctx context.Context, req *GetContestInfoListBySeasonReq) (*GetContestInfoListBySeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestInfoListBySeason not implemented")
}
func (*UnimplementedEsportsServiceServer) GetSeasonSeriesModel(ctx context.Context, req *GetSeasonSeriesReq) (*GetSeasonSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeasonSeriesModel not implemented")
}
func (*UnimplementedEsportsServiceServer) GetContestGameModel(ctx context.Context, req *GetContestGameReq) (*GameModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestGameModel not implemented")
}
func (*UnimplementedEsportsServiceServer) GetContestGameDetail(ctx context.Context, req *GetContestGameReq) (*GameDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestGameDetail not implemented")
}
func (*UnimplementedEsportsServiceServer) RefreshActiveSeasons(ctx context.Context, req *NoArgsRequest) (*ActiveSeasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshActiveSeasons not implemented")
}
func (*UnimplementedEsportsServiceServer) RefreshSeasonContestIdsCache(ctx context.Context, req *RefreshSeasonContestIdsReq) (*RefreshSeasonContestIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSeasonContestIdsCache not implemented")
}
func (*UnimplementedEsportsServiceServer) RefreshContestCache(ctx context.Context, req *RefreshContestCacheReq) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshContestCache not implemented")
}
func (*UnimplementedEsportsServiceServer) RefreshTeamCache(ctx context.Context, req *RefreshTeamCacheReq) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTeamCache not implemented")
}
func (*UnimplementedEsportsServiceServer) RefreshSeriesCache(ctx context.Context, req *RefreshSeriesCacheReq) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSeriesCache not implemented")
}
func (*UnimplementedEsportsServiceServer) RefreshGameCache(ctx context.Context, req *NoArgsRequest) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshGameCache not implemented")
}
func (*UnimplementedEsportsServiceServer) GetReplyWallList(ctx context.Context, req *GetReplyWallListReq) (*GetReplyWallListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyWallList not implemented")
}
func (*UnimplementedEsportsServiceServer) GetReplyWallModel(ctx context.Context, req *GetReplyWallModelReq) (*SaveReplyWallModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyWallModel not implemented")
}
func (*UnimplementedEsportsServiceServer) SaveReplyWall(ctx context.Context, req *SaveReplyWallModel) (*NoArgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveReplyWall not implemented")
}

func RegisterEsportsServiceServer(s *grpc.Server, srv EsportsServiceServer) {
	s.RegisterService(&_EsportsService_serviceDesc, srv)
}

func _EsportsService_GetContestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetContestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetContestInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetContestInfo(ctx, req.(*GetContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetContestsByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetContestsByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetContestsByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetContestsByTime(ctx, req.(*GetTimeContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetContests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetContests(ctx, req.(*GetContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_AddContestFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).AddContestFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/AddContestFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).AddContestFav(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_DelContestFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).DelContestFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/DelContestFav",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).DelContestFav(ctx, req.(*FavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetContestSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetContestSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetContestSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetContestSubscribers(ctx, req.(*GetSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetGames(ctx, req.(*GetGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetTeams(ctx, req.(*GetTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_SaveContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveContestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).SaveContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/SaveContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).SaveContest(ctx, req.(*SaveContestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetContestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetContestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetContestModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetContestModel(ctx, req.(*GetContestModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetSeasonModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetSeasonModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetSeasonModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetSeasonModel(ctx, req.(*GetSeasonModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetSeasonDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetSeasonDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetSeasonDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetSeasonDetail(ctx, req.(*GetSeasonModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetSeasonByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonByTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetSeasonByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetSeasonByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetSeasonByTime(ctx, req.(*GetSeasonByTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetTeamModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetTeamModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetTeamModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetTeamModel(ctx, req.(*GetTeamModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_ClearTeamCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearTeamCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).ClearTeamCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/ClearTeamCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).ClearTeamCache(ctx, req.(*ClearTeamCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_RefreshContestStatusInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshContestStatusInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).RefreshContestStatusInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/RefreshContestStatusInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).RefreshContestStatusInfo(ctx, req.(*RefreshContestStatusInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetSeasonContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonContestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetSeasonContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetSeasonContests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetSeasonContests(ctx, req.(*GetSeasonContestsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetContestInfoListBySeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestInfoListBySeasonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetContestInfoListBySeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetContestInfoListBySeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetContestInfoListBySeason(ctx, req.(*GetContestInfoListBySeasonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetSeasonSeriesModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonSeriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetSeasonSeriesModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetSeasonSeriesModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetSeasonSeriesModel(ctx, req.(*GetSeasonSeriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetContestGameModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetContestGameModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetContestGameModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetContestGameModel(ctx, req.(*GetContestGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetContestGameDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetContestGameDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetContestGameDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetContestGameDetail(ctx, req.(*GetContestGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_RefreshActiveSeasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).RefreshActiveSeasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/RefreshActiveSeasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).RefreshActiveSeasons(ctx, req.(*NoArgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_RefreshSeasonContestIdsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSeasonContestIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).RefreshSeasonContestIdsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/RefreshSeasonContestIdsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).RefreshSeasonContestIdsCache(ctx, req.(*RefreshSeasonContestIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_RefreshContestCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshContestCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).RefreshContestCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/RefreshContestCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).RefreshContestCache(ctx, req.(*RefreshContestCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_RefreshTeamCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTeamCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).RefreshTeamCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/RefreshTeamCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).RefreshTeamCache(ctx, req.(*RefreshTeamCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_RefreshSeriesCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSeriesCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).RefreshSeriesCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/RefreshSeriesCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).RefreshSeriesCache(ctx, req.(*RefreshSeriesCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_RefreshGameCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).RefreshGameCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/RefreshGameCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).RefreshGameCache(ctx, req.(*NoArgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetReplyWallList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyWallListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetReplyWallList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetReplyWallList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetReplyWallList(ctx, req.(*GetReplyWallListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_GetReplyWallModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyWallModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).GetReplyWallModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/GetReplyWallModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).GetReplyWallModel(ctx, req.(*GetReplyWallModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsportsService_SaveReplyWall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveReplyWallModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsportsServiceServer).SaveReplyWall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operational.esportsservice.v1.EsportsService/SaveReplyWall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsportsServiceServer).SaveReplyWall(ctx, req.(*SaveReplyWallModel))
	}
	return interceptor(ctx, in, info, handler)
}

var _EsportsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "operational.esportsservice.v1.EsportsService",
	HandlerType: (*EsportsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContestInfo",
			Handler:    _EsportsService_GetContestInfo_Handler,
		},
		{
			MethodName: "GetContestsByTime",
			Handler:    _EsportsService_GetContestsByTime_Handler,
		},
		{
			MethodName: "GetContests",
			Handler:    _EsportsService_GetContests_Handler,
		},
		{
			MethodName: "AddContestFav",
			Handler:    _EsportsService_AddContestFav_Handler,
		},
		{
			MethodName: "DelContestFav",
			Handler:    _EsportsService_DelContestFav_Handler,
		},
		{
			MethodName: "GetContestSubscribers",
			Handler:    _EsportsService_GetContestSubscribers_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _EsportsService_GetGames_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _EsportsService_GetTeams_Handler,
		},
		{
			MethodName: "SaveContest",
			Handler:    _EsportsService_SaveContest_Handler,
		},
		{
			MethodName: "GetContestModel",
			Handler:    _EsportsService_GetContestModel_Handler,
		},
		{
			MethodName: "GetSeasonModel",
			Handler:    _EsportsService_GetSeasonModel_Handler,
		},
		{
			MethodName: "GetSeasonDetail",
			Handler:    _EsportsService_GetSeasonDetail_Handler,
		},
		{
			MethodName: "GetSeasonByTime",
			Handler:    _EsportsService_GetSeasonByTime_Handler,
		},
		{
			MethodName: "GetTeamModel",
			Handler:    _EsportsService_GetTeamModel_Handler,
		},
		{
			MethodName: "ClearTeamCache",
			Handler:    _EsportsService_ClearTeamCache_Handler,
		},
		{
			MethodName: "RefreshContestStatusInfo",
			Handler:    _EsportsService_RefreshContestStatusInfo_Handler,
		},
		{
			MethodName: "GetSeasonContests",
			Handler:    _EsportsService_GetSeasonContests_Handler,
		},
		{
			MethodName: "GetContestInfoListBySeason",
			Handler:    _EsportsService_GetContestInfoListBySeason_Handler,
		},
		{
			MethodName: "GetSeasonSeriesModel",
			Handler:    _EsportsService_GetSeasonSeriesModel_Handler,
		},
		{
			MethodName: "GetContestGameModel",
			Handler:    _EsportsService_GetContestGameModel_Handler,
		},
		{
			MethodName: "GetContestGameDetail",
			Handler:    _EsportsService_GetContestGameDetail_Handler,
		},
		{
			MethodName: "RefreshActiveSeasons",
			Handler:    _EsportsService_RefreshActiveSeasons_Handler,
		},
		{
			MethodName: "RefreshSeasonContestIdsCache",
			Handler:    _EsportsService_RefreshSeasonContestIdsCache_Handler,
		},
		{
			MethodName: "RefreshContestCache",
			Handler:    _EsportsService_RefreshContestCache_Handler,
		},
		{
			MethodName: "RefreshTeamCache",
			Handler:    _EsportsService_RefreshTeamCache_Handler,
		},
		{
			MethodName: "RefreshSeriesCache",
			Handler:    _EsportsService_RefreshSeriesCache_Handler,
		},
		{
			MethodName: "RefreshGameCache",
			Handler:    _EsportsService_RefreshGameCache_Handler,
		},
		{
			MethodName: "GetReplyWallList",
			Handler:    _EsportsService_GetReplyWallList_Handler,
		},
		{
			MethodName: "GetReplyWallModel",
			Handler:    _EsportsService_GetReplyWallModel_Handler,
		},
		{
			MethodName: "SaveReplyWall",
			Handler:    _EsportsService_SaveReplyWall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *GetTeamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeamIds) > 0 {
		dAtA2 := make([]byte, len(m.TeamIds)*10)
		var j1 int
		for _, num1 := range m.TeamIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetGamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CursorSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CursorSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Cursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cursor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GameIds) > 0 {
		dAtA4 := make([]byte, len(m.GameIds)*10)
		var j3 int
		for _, num1 := range m.GameIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x68
	}
	if len(m.LogoFull) > 0 {
		i -= len(m.LogoFull)
		copy(dAtA[i:], m.LogoFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoFull)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PbTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PbTime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Operations) > 0 {
		i -= len(m.Operations)
		copy(dAtA[i:], m.Operations)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operations)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Publisher) > 0 {
		i -= len(m.Publisher)
		copy(dAtA[i:], m.Publisher)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Publisher)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GameType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameType))
		i--
		dAtA[i] = 0x30
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ETitle) > 0 {
		i -= len(m.ETitle)
		copy(dAtA[i:], m.ETitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ETitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cursor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Games) > 0 {
		for iNdEx := len(m.Games) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Games[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContestSubscribers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestSubscribers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestSubscribers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.User) > 0 {
		for iNdEx := len(m.User) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.User[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Cursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cursor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.Typ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Typ))
		i--
		dAtA[i] = 0x20
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscribersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscribersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscribersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CursorSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CursorSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Cursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cursor))
		i--
		dAtA[i] = 0x10
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FavRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FavRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FavRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetContestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetContestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NeedInvalid {
		i--
		if m.NeedInvalid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cids) > 0 {
		dAtA6 := make([]byte, len(m.Cids)*10)
		var j5 int
		for _, num1 := range m.Cids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contests) > 0 {
		for iNdEx := len(m.Contests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTimeContestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTimeContestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTimeContestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatchId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchId))
		i--
		dAtA[i] = 0x60
	}
	if m.NeedInvalid {
		i--
		if m.NeedInvalid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.TimeSort != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TimeSort))
		i--
		dAtA[i] = 0x50
	}
	if m.CursorSize != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CursorSize))
		i--
		dAtA[i] = 0x48
	}
	if m.Cursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cursor))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Channel) > 0 {
		dAtA8 := make([]byte, len(m.Channel)*10)
		var j7 int
		for _, num1 := range m.Channel {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintApi(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x3a
	}
	if m.TeamId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x30
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x28
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RoomIds) > 0 {
		dAtA10 := make([]byte, len(m.RoomIds)*10)
		var j9 int
		for _, num1 := range m.RoomIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintApi(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Etime) > 0 {
		i -= len(m.Etime)
		copy(dAtA[i:], m.Etime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Etime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stime) > 0 {
		i -= len(m.Stime)
		copy(dAtA[i:], m.Stime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stime)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTimeContestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTimeContestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTimeContestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Cache {
		i--
		if m.Cache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Cursor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cursor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Contests) > 0 {
		for iNdEx := len(m.Contests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContestDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Game != nil {
		{
			size, err := m.Game.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.GameId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.IsSubscribed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsSubscribed))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.IsGuessed != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsGuessed))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.ContestStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.ContestFrozen != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestFrozen))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if len(m.GuessLink) > 0 {
		i -= len(m.GuessLink)
		copy(dAtA[i:], m.GuessLink)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GuessLink)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.JumpURL) > 0 {
		i -= len(m.JumpURL)
		copy(dAtA[i:], m.JumpURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpURL)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.GameStage2) > 0 {
		i -= len(m.GameStage2)
		copy(dAtA[i:], m.GameStage2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage2)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.GameStage1) > 0 {
		i -= len(m.GameStage1)
		copy(dAtA[i:], m.GameStage1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage1)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.MatchID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.DataType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.LiveURL) > 0 {
		i -= len(m.LiveURL)
		copy(dAtA[i:], m.LiveURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LiveURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.CollectionURL) > 0 {
		i -= len(m.CollectionURL)
		copy(dAtA[i:], m.CollectionURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CollectionURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.Playback) > 0 {
		i -= len(m.Playback)
		copy(dAtA[i:], m.Playback)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Playback)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.SpecialImage) > 0 {
		i -= len(m.SpecialImage)
		copy(dAtA[i:], m.SpecialImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.SpecialTips) > 0 {
		i -= len(m.SpecialTips)
		copy(dAtA[i:], m.SpecialTips)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialTips)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.SpecialName) > 0 {
		i -= len(m.SpecialName)
		copy(dAtA[i:], m.SpecialName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.SuccessTeamInfo != nil {
		{
			size, err := m.SuccessTeamInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.SuccessTeam != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SuccessTeam))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Special != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Special))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Collection != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Collection))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.LiveRoom != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveRoom))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Series != nil {
		{
			size, err := m.Series.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x70
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x68
	}
	if m.Season != nil {
		{
			size, err := m.Season.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x58
	}
	if m.AwayTeam != nil {
		{
			size, err := m.AwayTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.HomeTeam != nil {
		{
			size, err := m.HomeTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x40
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x38
	}
	if m.AwayID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayID))
		i--
		dAtA[i] = 0x30
	}
	if m.HomeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeID))
		i--
		dAtA[i] = 0x28
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeriesDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScoreId) > 0 {
		i -= len(m.ScoreId)
		copy(dAtA[i:], m.ScoreId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ScoreId)))
		i--
		dAtA[i] = 0x32
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChildTitle) > 0 {
		i -= len(m.ChildTitle)
		copy(dAtA[i:], m.ChildTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChildTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentTitle) > 0 {
		i -= len(m.ParentTitle)
		copy(dAtA[i:], m.ParentTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParentTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Channel) > 0 {
		dAtA18 := make([]byte, len(m.Channel)*10)
		var j17 int
		for _, num1 := range m.Channel {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintApi(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.SyncPlatform != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SyncPlatform))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.LogoFull) > 0 {
		i -= len(m.LogoFull)
		copy(dAtA[i:], m.LogoFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoFull)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.SearchImage) > 0 {
		i -= len(m.SearchImage)
		copy(dAtA[i:], m.SearchImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SearchImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.FocusURL) > 0 {
		i -= len(m.FocusURL)
		copy(dAtA[i:], m.FocusURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FocusURL)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DataFocus) > 0 {
		i -= len(m.DataFocus)
		copy(dAtA[i:], m.DataFocus)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DataFocus)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsApp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsApp))
		i--
		dAtA[i] = 0x60
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RegionId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RegionId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.LogoFull) > 0 {
		i -= len(m.LogoFull)
		copy(dAtA[i:], m.LogoFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoFull)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TeamType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeamType))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Members) > 0 {
		i -= len(m.Members)
		copy(dAtA[i:], m.Members)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Members)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Area) > 0 {
		i -= len(m.Area)
		copy(dAtA[i:], m.Area)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ETitle) > 0 {
		i -= len(m.ETitle)
		copy(dAtA[i:], m.ETitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ETitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContestInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Contest != nil {
		{
			size, err := m.Contest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContestModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestModelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestModelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.ActivePush != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivePush))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.PushSwitch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PushSwitch))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.GameStage2) > 0 {
		i -= len(m.GameStage2)
		copy(dAtA[i:], m.GameStage2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.GameStage1) > 0 {
		i -= len(m.GameStage1)
		copy(dAtA[i:], m.GameStage1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage1)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.GuessShow != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessShow))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.GuessType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.MatchID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.DataType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.LiveURL) > 0 {
		i -= len(m.LiveURL)
		copy(dAtA[i:], m.LiveURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LiveURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.CollectionURL) > 0 {
		i -= len(m.CollectionURL)
		copy(dAtA[i:], m.CollectionURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CollectionURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Playback) > 0 {
		i -= len(m.Playback)
		copy(dAtA[i:], m.Playback)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Playback)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SpecialImage) > 0 {
		i -= len(m.SpecialImage)
		copy(dAtA[i:], m.SpecialImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SpecialTips) > 0 {
		i -= len(m.SpecialTips)
		copy(dAtA[i:], m.SpecialTips)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialTips)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.SpecialName) > 0 {
		i -= len(m.SpecialName)
		copy(dAtA[i:], m.SpecialName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.SuccessTeam != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SuccessTeam))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Special != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Special))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x78
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x70
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x62
	}
	if m.Collection != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Collection))
		i--
		dAtA[i] = 0x58
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x50
	}
	if m.LiveRoom != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveRoom))
		i--
		dAtA[i] = 0x48
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x40
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x38
	}
	if m.AwayID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayID))
		i--
		dAtA[i] = 0x30
	}
	if m.HomeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeID))
		i--
		dAtA[i] = 0x28
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshContestStatusInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshContestStatusInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshContestStatusInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetContestModelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContestModelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContestModelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveContestReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveContestReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveContestReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AdId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContestData) > 0 {
		for iNdEx := len(m.ContestData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContestData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TeamIds) > 0 {
		dAtA21 := make([]byte, len(m.TeamIds)*10)
		var j20 int
		for _, num1 := range m.TeamIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		i -= j20
		copy(dAtA[i:], dAtA21[:j20])
		i = encodeVarintApi(dAtA, i, uint64(j20))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameIds) > 0 {
		dAtA23 := make([]byte, len(m.GameIds)*10)
		var j22 int
		for _, num1 := range m.GameIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintApi(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x12
	}
	if m.Contest != nil {
		{
			size, err := m.Contest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveContestByOpenAPiReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveContestByOpenAPiReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveContestByOpenAPiReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TeamIds) > 0 {
		dAtA26 := make([]byte, len(m.TeamIds)*10)
		var j25 int
		for _, num1 := range m.TeamIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		i -= j25
		copy(dAtA[i:], dAtA26[:j25])
		i = encodeVarintApi(dAtA, i, uint64(j25))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GameIds) > 0 {
		dAtA28 := make([]byte, len(m.GameIds)*10)
		var j27 int
		for _, num1 := range m.GameIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintApi(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0x12
	}
	if m.Contest != nil {
		{
			size, err := m.Contest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContestDataModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestDataModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestDataModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AvCid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AvCid))
		i--
		dAtA[i] = 0x28
	}
	if m.PointData != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PointData))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContestModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContestModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContestModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExternalID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ExternalID))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.ContestStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestStatus))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.ActivePush != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ActivePush))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.PushSwitch != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PushSwitch))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.GameStage2) > 0 {
		i -= len(m.GameStage2)
		copy(dAtA[i:], m.GameStage2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.GameStage1) > 0 {
		i -= len(m.GameStage1)
		copy(dAtA[i:], m.GameStage1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage1)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.GuessType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.MatchID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.MatchID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.DataType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.LiveURL) > 0 {
		i -= len(m.LiveURL)
		copy(dAtA[i:], m.LiveURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LiveURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.CollectionURL) > 0 {
		i -= len(m.CollectionURL)
		copy(dAtA[i:], m.CollectionURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CollectionURL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Playback) > 0 {
		i -= len(m.Playback)
		copy(dAtA[i:], m.Playback)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Playback)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SpecialImage) > 0 {
		i -= len(m.SpecialImage)
		copy(dAtA[i:], m.SpecialImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SpecialTips) > 0 {
		i -= len(m.SpecialTips)
		copy(dAtA[i:], m.SpecialTips)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialTips)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.SpecialName) > 0 {
		i -= len(m.SpecialName)
		copy(dAtA[i:], m.SpecialName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SpecialName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.SuccessTeam != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SuccessTeam))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Special != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Special))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x78
	}
	if m.Sid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Sid))
		i--
		dAtA[i] = 0x70
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x62
	}
	if m.Collection != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Collection))
		i--
		dAtA[i] = 0x58
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x50
	}
	if m.LiveRoom != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LiveRoom))
		i--
		dAtA[i] = 0x48
	}
	if m.AwayScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayScore))
		i--
		dAtA[i] = 0x40
	}
	if m.HomeScore != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeScore))
		i--
		dAtA[i] = 0x38
	}
	if m.AwayID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AwayID))
		i--
		dAtA[i] = 0x30
	}
	if m.HomeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.HomeID))
		i--
		dAtA[i] = 0x28
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x20
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GameStage) > 0 {
		i -= len(m.GameStage)
		copy(dAtA[i:], m.GameStage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GameStage)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeasonModelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeasonModelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeasonModelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.GuessVersion != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GuessVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.SyncPlatform != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SyncPlatform))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.SearchImage) > 0 {
		i -= len(m.SearchImage)
		copy(dAtA[i:], m.SearchImage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SearchImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.SerieType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SerieType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.LeidaSid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LeidaSid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ForbidIndex != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForbidIndex))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.FocusURL) > 0 {
		i -= len(m.FocusURL)
		copy(dAtA[i:], m.FocusURL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FocusURL)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DataFocus) > 0 {
		i -= len(m.DataFocus)
		copy(dAtA[i:], m.DataFocus)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DataFocus)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintApi(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsApp != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsApp))
		i--
		dAtA[i] = 0x60
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Etime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Etime))
		i--
		dAtA[i] = 0x30
	}
	if m.Stime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Stime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamModelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamModelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamModelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeamId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PictureUrl) > 0 {
		i -= len(m.PictureUrl)
		copy(dAtA[i:], m.PictureUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PictureUrl)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.RegionId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RegionId))
		i--
		dAtA[i] = 0x78
	}
	if m.TeamType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeamType))
		i--
		dAtA[i] = 0x70
	}
	if m.ReplyId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReplyId))
		i--
		dAtA[i] = 0x68
	}
	if m.LeidaTId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LeidaTId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Profile) > 0 {
		i -= len(m.Profile)
		copy(dAtA[i:], m.Profile)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Profile)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.VideoUrl) > 0 {
		i -= len(m.VideoUrl)
		copy(dAtA[i:], m.VideoUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.VideoUrl)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Members) > 0 {
		i -= len(m.Members)
		copy(dAtA[i:], m.Members)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Members)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Uid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Area) > 0 {
		i -= len(m.Area)
		copy(dAtA[i:], m.Area)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Area)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ETitle) > 0 {
		i -= len(m.ETitle)
		copy(dAtA[i:], m.ETitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ETitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MatchModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x48
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CYear) > 0 {
		i -= len(m.CYear)
		copy(dAtA[i:], m.CYear)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CYear)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rank != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x68
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Dic) > 0 {
		i -= len(m.Dic)
		copy(dAtA[i:], m.Dic)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Dic)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PbTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.PbTime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Operations) > 0 {
		i -= len(m.Operations)
		copy(dAtA[i:], m.Operations)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Operations)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Publisher) > 0 {
		i -= len(m.Publisher)
		copy(dAtA[i:], m.Publisher)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Publisher)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Plat != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Plat))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ETitle) > 0 {
		i -= len(m.ETitle)
		copy(dAtA[i:], m.ETitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ETitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubTitle) > 0 {
		i -= len(m.SubTitle)
		copy(dAtA[i:], m.SubTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SubTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GidMapModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GidMapModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GidMapModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Oid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
		i--
		dAtA[i] = 0x18
	}
	if m.Gid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Gid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearSeasonContestCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearSeasonContestCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearSeasonContestCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RebuildContestCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RebuildContestCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RebuildContestCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonContests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonContests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonContests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contests) > 0 {
		for iNdEx := len(m.Contests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetSeasonContestsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeasonContestsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeasonContestsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearTeamCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearTeamCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearTeamCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeamId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearSeasonCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearSeasonCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearSeasonCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActiveSeasonsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveSeasonsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveSeasonsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RefreshSeasonContestIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSeasonContestIdsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSeasonContestIdsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshSeasonContestIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSeasonContestIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSeasonContestIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContestIds) > 0 {
		dAtA31 := make([]byte, len(m.ContestIds)*10)
		var j30 int
		for _, num1 := range m.ContestIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		i -= j30
		copy(dAtA[i:], dAtA31[:j30])
		i = encodeVarintApi(dAtA, i, uint64(j30))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RefreshContestCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshContestCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshContestCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ContestId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshTeamCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshTeamCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshTeamCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeamId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshSeriesCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshSeriesCacheReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshSeriesCacheReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeriesId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeriesId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeasonSeriesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeasonSeriesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeasonSeriesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeasonSeriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeasonSeriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeasonSeriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Series) > 0 {
		for iNdEx := len(m.Series) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Series[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeriesModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeriesModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeriesModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ScoreId) > 0 {
		i -= len(m.ScoreId)
		copy(dAtA[i:], m.ScoreId)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ScoreId)))
		i--
		dAtA[i] = 0x32
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChildTitle) > 0 {
		i -= len(m.ChildTitle)
		copy(dAtA[i:], m.ChildTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChildTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentTitle) > 0 {
		i -= len(m.ParentTitle)
		copy(dAtA[i:], m.ParentTitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParentTitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetContestGameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContestGameReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContestGameReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetContestGameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContestGameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContestGameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Game != nil {
		{
			size, err := m.Game.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetContestInfoListBySeasonReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContestInfoListBySeasonReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContestInfoListBySeasonReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SeasonID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetContestInfoListBySeasonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetContestInfoListBySeasonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetContestInfoListBySeasonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ComponentContestList) > 0 {
		for k := range m.ComponentContestList {
			v := m.ComponentContestList[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetReplyWallModelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReplyWallModelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReplyWallModelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetReplyWallListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReplyWallListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReplyWallListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReplyWallListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReplyWallListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReplyWallListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReplyList) > 0 {
		for iNdEx := len(m.ReplyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Contest != nil {
		{
			size, err := m.Contest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplyWallInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyWallInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyWallInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReplyDetails) > 0 {
		i -= len(m.ReplyDetails)
		copy(dAtA[i:], m.ReplyDetails)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReplyDetails)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveReplyWallModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveReplyWallModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveReplyWallModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReplyList) > 0 {
		for iNdEx := len(m.ReplyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ContestID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ContestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplyWallModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyWallModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplyWallModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ReplyDetails) > 0 {
		i -= len(m.ReplyDetails)
		copy(dAtA[i:], m.ReplyDetails)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReplyDetails)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeasonByTimeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeasonByTimeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeasonByTimeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.BeginTime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BeginTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSeasonByTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSeasonByTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSeasonByTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Seasons) > 0 {
		for iNdEx := len(m.Seasons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seasons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoArgsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoArgsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *NoArgsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoArgsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetTeamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TeamIds) > 0 {
		l = 0
		for _, e := range m.TeamIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetGamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GameIds) > 0 {
		l = 0
		for _, e := range m.GameIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Cursor != 0 {
		n += 1 + sovApi(uint64(m.Cursor))
	}
	if m.CursorSize != 0 {
		n += 1 + sovApi(uint64(m.CursorSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ETitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.GameType != 0 {
		n += 1 + sovApi(uint64(m.GameType))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operations)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PbTime != 0 {
		n += 1 + sovApi(uint64(m.PbTime))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LogoFull)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Cursor != 0 {
		n += 1 + sovApi(uint64(m.Cursor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestSubscribers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cursor != 0 {
		n += 1 + sovApi(uint64(m.Cursor))
	}
	if len(m.User) > 0 {
		for _, e := range m.User {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Typ != 0 {
		n += 1 + sovApi(uint64(m.Typ))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSubscribersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Cursor != 0 {
		n += 1 + sovApi(uint64(m.Cursor))
	}
	if m.CursorSize != 0 {
		n += 1 + sovApi(uint64(m.CursorSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FavRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Cids) > 0 {
		l = 0
		for _, e := range m.Cids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.NeedInvalid {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contests) > 0 {
		for _, e := range m.Contests {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTimeContestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Stime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Etime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.RoomIds) > 0 {
		l = 0
		for _, e := range m.RoomIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.GameId != 0 {
		n += 1 + sovApi(uint64(m.GameId))
	}
	if m.TeamId != 0 {
		n += 1 + sovApi(uint64(m.TeamId))
	}
	if len(m.Channel) > 0 {
		l = 0
		for _, e := range m.Channel {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Cursor != 0 {
		n += 1 + sovApi(uint64(m.Cursor))
	}
	if m.CursorSize != 0 {
		n += 1 + sovApi(uint64(m.CursorSize))
	}
	if m.TimeSort != 0 {
		n += 1 + sovApi(uint64(m.TimeSort))
	}
	if m.NeedInvalid {
		n += 2
	}
	if m.MatchId != 0 {
		n += 1 + sovApi(uint64(m.MatchId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTimeContestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contests) > 0 {
		for _, e := range m.Contests {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Cursor != 0 {
		n += 1 + sovApi(uint64(m.Cursor))
	}
	if m.Cache {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.HomeID != 0 {
		n += 1 + sovApi(uint64(m.HomeID))
	}
	if m.AwayID != 0 {
		n += 1 + sovApi(uint64(m.AwayID))
	}
	if m.HomeScore != 0 {
		n += 1 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 1 + sovApi(uint64(m.AwayScore))
	}
	if m.HomeTeam != nil {
		l = m.HomeTeam.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AwayTeam != nil {
		l = m.AwayTeam.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.Series != nil {
		l = m.Series.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LiveRoom != 0 {
		n += 2 + sovApi(uint64(m.LiveRoom))
	}
	if m.Aid != 0 {
		n += 2 + sovApi(uint64(m.Aid))
	}
	if m.Collection != 0 {
		n += 2 + sovApi(uint64(m.Collection))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Special != 0 {
		n += 2 + sovApi(uint64(m.Special))
	}
	if m.SuccessTeam != 0 {
		n += 2 + sovApi(uint64(m.SuccessTeam))
	}
	if m.SuccessTeamInfo != nil {
		l = m.SuccessTeamInfo.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialTips)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Playback)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.CollectionURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LiveURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DataType != 0 {
		n += 2 + sovApi(uint64(m.DataType))
	}
	if m.MatchID != 0 {
		n += 2 + sovApi(uint64(m.MatchID))
	}
	l = len(m.GameStage1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.GameStage2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.JumpURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.GuessLink)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ContestFrozen != 0 {
		n += 2 + sovApi(uint64(m.ContestFrozen))
	}
	if m.ContestStatus != 0 {
		n += 2 + sovApi(uint64(m.ContestStatus))
	}
	if m.IsGuessed != 0 {
		n += 2 + sovApi(uint64(m.IsGuessed))
	}
	if m.IsSubscribed != 0 {
		n += 2 + sovApi(uint64(m.IsSubscribed))
	}
	if m.GameId != 0 {
		n += 2 + sovApi(uint64(m.GameId))
	}
	if m.Game != nil {
		l = m.Game.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.ParentTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ChildTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	l = len(m.ScoreId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.IsApp != 0 {
		n += 1 + sovApi(uint64(m.IsApp))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DataFocus)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FocusURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SearchImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LogoFull)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SyncPlatform != 0 {
		n += 2 + sovApi(uint64(m.SyncPlatform))
	}
	if len(m.Channel) > 0 {
		l = 0
		for _, e := range m.Channel {
			l += sovApi(uint64(e))
		}
		n += 2 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ETitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Members)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TeamType != 0 {
		n += 1 + sovApi(uint64(m.TeamType))
	}
	l = len(m.LogoFull)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RegionId != 0 {
		n += 1 + sovApi(uint64(m.RegionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contest != nil {
		l = m.Contest.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestModelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.HomeID != 0 {
		n += 1 + sovApi(uint64(m.HomeID))
	}
	if m.AwayID != 0 {
		n += 1 + sovApi(uint64(m.AwayID))
	}
	if m.HomeScore != 0 {
		n += 1 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 1 + sovApi(uint64(m.AwayScore))
	}
	if m.LiveRoom != 0 {
		n += 1 + sovApi(uint64(m.LiveRoom))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Collection != 0 {
		n += 1 + sovApi(uint64(m.Collection))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Special != 0 {
		n += 2 + sovApi(uint64(m.Special))
	}
	if m.SuccessTeam != 0 {
		n += 2 + sovApi(uint64(m.SuccessTeam))
	}
	l = len(m.SpecialName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialTips)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Playback)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.CollectionURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LiveURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DataType != 0 {
		n += 2 + sovApi(uint64(m.DataType))
	}
	if m.MatchID != 0 {
		n += 2 + sovApi(uint64(m.MatchID))
	}
	if m.GuessType != 0 {
		n += 2 + sovApi(uint64(m.GuessType))
	}
	if m.GuessShow != 0 {
		n += 2 + sovApi(uint64(m.GuessShow))
	}
	l = len(m.GameStage1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.GameStage2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SeriesId != 0 {
		n += 2 + sovApi(uint64(m.SeriesId))
	}
	if m.PushSwitch != 0 {
		n += 2 + sovApi(uint64(m.PushSwitch))
	}
	if m.ActivePush != 0 {
		n += 2 + sovApi(uint64(m.ActivePush))
	}
	if m.ContestStatus != 0 {
		n += 2 + sovApi(uint64(m.ContestStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshContestStatusInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestId != 0 {
		n += 1 + sovApi(uint64(m.ContestId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContestModelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestId != 0 {
		n += 1 + sovApi(uint64(m.ContestId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveContestReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contest != nil {
		l = m.Contest.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.GameIds) > 0 {
		l = 0
		for _, e := range m.GameIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.TeamIds) > 0 {
		l = 0
		for _, e := range m.TeamIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.ContestData) > 0 {
		for _, e := range m.ContestData {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.AdId != 0 {
		n += 1 + sovApi(uint64(m.AdId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveContestByOpenAPiReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contest != nil {
		l = m.Contest.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.GameIds) > 0 {
		l = 0
		for _, e := range m.GameIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.TeamIds) > 0 {
		l = 0
		for _, e := range m.TeamIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestDataModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PointData != 0 {
		n += 1 + sovApi(uint64(m.PointData))
	}
	if m.AvCid != 0 {
		n += 1 + sovApi(uint64(m.AvCid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContestModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.GameStage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	if m.HomeID != 0 {
		n += 1 + sovApi(uint64(m.HomeID))
	}
	if m.AwayID != 0 {
		n += 1 + sovApi(uint64(m.AwayID))
	}
	if m.HomeScore != 0 {
		n += 1 + sovApi(uint64(m.HomeScore))
	}
	if m.AwayScore != 0 {
		n += 1 + sovApi(uint64(m.AwayScore))
	}
	if m.LiveRoom != 0 {
		n += 1 + sovApi(uint64(m.LiveRoom))
	}
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Collection != 0 {
		n += 1 + sovApi(uint64(m.Collection))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Sid != 0 {
		n += 1 + sovApi(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Special != 0 {
		n += 2 + sovApi(uint64(m.Special))
	}
	if m.SuccessTeam != 0 {
		n += 2 + sovApi(uint64(m.SuccessTeam))
	}
	l = len(m.SpecialName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialTips)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.SpecialImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Playback)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.CollectionURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.LiveURL)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DataType != 0 {
		n += 2 + sovApi(uint64(m.DataType))
	}
	if m.MatchID != 0 {
		n += 2 + sovApi(uint64(m.MatchID))
	}
	if m.GuessType != 0 {
		n += 2 + sovApi(uint64(m.GuessType))
	}
	l = len(m.GameStage1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.GameStage2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SeriesId != 0 {
		n += 2 + sovApi(uint64(m.SeriesId))
	}
	if m.PushSwitch != 0 {
		n += 2 + sovApi(uint64(m.PushSwitch))
	}
	if m.ActivePush != 0 {
		n += 2 + sovApi(uint64(m.ActivePush))
	}
	if m.ContestStatus != 0 {
		n += 2 + sovApi(uint64(m.ContestStatus))
	}
	if m.ExternalID != 0 {
		n += 2 + sovApi(uint64(m.ExternalID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeasonModelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Stime != 0 {
		n += 1 + sovApi(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovApi(uint64(m.Etime))
	}
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.IsApp != 0 {
		n += 1 + sovApi(uint64(m.IsApp))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DataFocus)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FocusURL)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ForbidIndex != 0 {
		n += 2 + sovApi(uint64(m.ForbidIndex))
	}
	if m.LeidaSid != 0 {
		n += 2 + sovApi(uint64(m.LeidaSid))
	}
	if m.SerieType != 0 {
		n += 2 + sovApi(uint64(m.SerieType))
	}
	l = len(m.SearchImage)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SyncPlatform != 0 {
		n += 2 + sovApi(uint64(m.SyncPlatform))
	}
	if m.GuessVersion != 0 {
		n += 2 + sovApi(uint64(m.GuessVersion))
	}
	if m.SeasonType != 0 {
		n += 2 + sovApi(uint64(m.SeasonType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTeamModelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovApi(uint64(m.TeamId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ETitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Members)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.VideoUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Profile)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LeidaTId != 0 {
		n += 1 + sovApi(uint64(m.LeidaTId))
	}
	if m.ReplyId != 0 {
		n += 1 + sovApi(uint64(m.ReplyId))
	}
	if m.TeamType != 0 {
		n += 1 + sovApi(uint64(m.TeamType))
	}
	if m.RegionId != 0 {
		n += 1 + sovApi(uint64(m.RegionId))
	}
	l = len(m.PictureUrl)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CYear)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ETitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Plat != 0 {
		n += 1 + sovApi(uint64(m.Plat))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Publisher)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Operations)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PbTime != 0 {
		n += 1 + sovApi(uint64(m.PbTime))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Rank != 0 {
		n += 1 + sovApi(uint64(m.Rank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GidMapModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Gid != 0 {
		n += 1 + sovApi(uint64(m.Gid))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearSeasonContestCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.ContestId != 0 {
		n += 1 + sovApi(uint64(m.ContestId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RebuildContestCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestId != 0 {
		n += 1 + sovApi(uint64(m.ContestId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeasonContests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contests) > 0 {
		for _, e := range m.Contests {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeasonContestsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearTeamCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovApi(uint64(m.TeamId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearSeasonCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveSeasonsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshSeasonContestIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshSeasonContestIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContestIds) > 0 {
		l = 0
		for _, e := range m.ContestIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshContestCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestId != 0 {
		n += 1 + sovApi(uint64(m.ContestId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshTeamCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovApi(uint64(m.TeamId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshSeriesCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeriesId != 0 {
		n += 1 + sovApi(uint64(m.SeriesId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeasonSeriesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonId != 0 {
		n += 1 + sovApi(uint64(m.SeasonId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeasonSeriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Series) > 0 {
		for _, e := range m.Series {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SeriesModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.ParentTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ChildTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	l = len(m.ScoreId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContestGameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContestGameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game != nil {
		l = m.Game.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContestInfoListBySeasonReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovApi(uint64(m.SeasonID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetContestInfoListBySeasonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ComponentContestList) > 0 {
		for k, v := range m.ComponentContestList {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReplyWallModelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReplyWallListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReplyWallListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contest != nil {
		l = m.Contest.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ReplyList) > 0 {
		for _, e := range m.ReplyList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyWallInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ReplyDetails)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveReplyWallModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContestID != 0 {
		n += 1 + sovApi(uint64(m.ContestID))
	}
	if len(m.ReplyList) > 0 {
		for _, e := range m.ReplyList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplyWallModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.ReplyDetails)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeasonByTimeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeginTime != 0 {
		n += 1 + sovApi(uint64(m.BeginTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSeasonByTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Seasons) > 0 {
		for _, e := range m.Seasons {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoArgsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoArgsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTeamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamIds = append(m.TeamIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TeamIds) == 0 {
					m.TeamIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamIds = append(m.TeamIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &TeamDetail{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GameIds = append(m.GameIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GameIds) == 0 {
					m.GameIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GameIds = append(m.GameIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GameIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			m.Cursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorSize", wireType)
			}
			m.CursorSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CursorSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbTime", wireType)
			}
			m.PbTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PbTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &GameDetail{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			m.Cursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestSubscribers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestSubscribers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestSubscribers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			m.Cursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User, &User{})
			if err := m.User[len(m.User)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscribersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscribersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscribersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			m.Cursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorSize", wireType)
			}
			m.CursorSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CursorSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FavRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FavRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FavRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cids = append(m.Cids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cids) == 0 {
					m.Cids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cids = append(m.Cids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cids", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedInvalid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedInvalid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contests = append(m.Contests, &ContestDetail{})
			if err := m.Contests[len(m.Contests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTimeContestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTimeContestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTimeContestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Etime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomIds = append(m.RoomIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomIds) == 0 {
					m.RoomIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomIds = append(m.RoomIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channel = append(m.Channel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Channel) == 0 {
					m.Channel = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channel = append(m.Channel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			m.Cursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorSize", wireType)
			}
			m.CursorSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CursorSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSort", wireType)
			}
			m.TimeSort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedInvalid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedInvalid = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTimeContestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTimeContestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTimeContestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contests = append(m.Contests, &ContestDetail{})
			if err := m.Contests[len(m.Contests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			m.Cursor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cursor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeID", wireType)
			}
			m.HomeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayID", wireType)
			}
			m.AwayID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeTeam == nil {
				m.HomeTeam = &TeamDetail{}
			}
			if err := m.HomeTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwayTeam == nil {
				m.AwayTeam = &TeamDetail{}
			}
			if err := m.AwayTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &SeasonDetail{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Series == nil {
				m.Series = &SeriesDetail{}
			}
			if err := m.Series.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			m.LiveRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveRoom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			m.Collection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collection |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Special", wireType)
			}
			m.Special = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Special |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessTeam", wireType)
			}
			m.SuccessTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessTeam |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessTeamInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SuccessTeamInfo == nil {
				m.SuccessTeamInfo = &TeamDetail{}
			}
			if err := m.SuccessTeamInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialTips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialTips = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			m.MatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuessLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestFrozen", wireType)
			}
			m.ContestFrozen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestFrozen |= ContestFrozenEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestStatus", wireType)
			}
			m.ContestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestStatus |= ContestStatusEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGuessed", wireType)
			}
			m.IsGuessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGuessed |= GuessStatusEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSubscribed", wireType)
			}
			m.IsSubscribed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSubscribed |= SubscribedStatusEnum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Game == nil {
				m.Game = &GameDetail{}
			}
			if err := m.Game.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApp", wireType)
			}
			m.IsApp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsApp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFocus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataFocus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FocusURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FocusURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPlatform", wireType)
			}
			m.SyncPlatform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncPlatform |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channel = append(m.Channel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Channel) == 0 {
					m.Channel = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channel = append(m.Channel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contest == nil {
				m.Contest = &ContestDetail{}
			}
			if err := m.Contest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestModelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestModelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeID", wireType)
			}
			m.HomeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayID", wireType)
			}
			m.AwayID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			m.LiveRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveRoom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			m.Collection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collection |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Special", wireType)
			}
			m.Special = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Special |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessTeam", wireType)
			}
			m.SuccessTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessTeam |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialTips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialTips = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			m.MatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessType", wireType)
			}
			m.GuessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessShow", wireType)
			}
			m.GuessShow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessShow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushSwitch", wireType)
			}
			m.PushSwitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushSwitch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePush", wireType)
			}
			m.ActivePush = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivePush |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestStatus", wireType)
			}
			m.ContestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshContestStatusInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshContestStatusInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshContestStatusInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContestModelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContestModelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContestModelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveContestReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveContestReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveContestReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contest == nil {
				m.Contest = &ContestModel{}
			}
			if err := m.Contest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GameIds = append(m.GameIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GameIds) == 0 {
					m.GameIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GameIds = append(m.GameIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GameIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamIds = append(m.TeamIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TeamIds) == 0 {
					m.TeamIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamIds = append(m.TeamIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIds", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContestData = append(m.ContestData, &ContestDataModel{})
			if err := m.ContestData[len(m.ContestData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdId", wireType)
			}
			m.AdId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveContestByOpenAPiReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveContestByOpenAPiReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveContestByOpenAPiReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contest == nil {
				m.Contest = &ContestModel{}
			}
			if err := m.Contest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GameIds = append(m.GameIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GameIds) == 0 {
					m.GameIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GameIds = append(m.GameIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GameIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamIds = append(m.TeamIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TeamIds) == 0 {
					m.TeamIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamIds = append(m.TeamIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestDataModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestDataModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestDataModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointData", wireType)
			}
			m.PointData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointData |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvCid", wireType)
			}
			m.AvCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContestModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContestModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContestModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeID", wireType)
			}
			m.HomeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayID", wireType)
			}
			m.AwayID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			m.LiveRoom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveRoom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			m.Collection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collection |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Special", wireType)
			}
			m.Special = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Special |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessTeam", wireType)
			}
			m.SuccessTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessTeam |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialTips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialTips = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			m.MatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessType", wireType)
			}
			m.GuessType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStage2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameStage2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushSwitch", wireType)
			}
			m.PushSwitch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushSwitch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivePush", wireType)
			}
			m.ActivePush = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivePush |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestStatus", wireType)
			}
			m.ContestStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			m.ExternalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeasonModelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeasonModelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeasonModelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApp", wireType)
			}
			m.IsApp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsApp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFocus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataFocus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FocusURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FocusURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForbidIndex", wireType)
			}
			m.ForbidIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForbidIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeidaSid", wireType)
			}
			m.LeidaSid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeidaSid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerieType", wireType)
			}
			m.SerieType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerieType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPlatform", wireType)
			}
			m.SyncPlatform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncPlatform |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuessVersion", wireType)
			}
			m.GuessVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuessVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonType", wireType)
			}
			m.SeasonType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamModelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamModelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamModelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeidaTId", wireType)
			}
			m.LeidaTId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeidaTId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyId", wireType)
			}
			m.ReplyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamType", wireType)
			}
			m.TeamType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CYear", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CYear = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publisher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PbTime", wireType)
			}
			m.PbTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PbTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GidMapModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GidMapModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GidMapModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearSeasonContestCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearSeasonContestCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearSeasonContestCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RebuildContestCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RebuildContestCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RebuildContestCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonContests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonContests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonContests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contests = append(m.Contests, &ContestDetail{})
			if err := m.Contests[len(m.Contests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeasonContestsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeasonContestsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeasonContestsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearTeamCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearTeamCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearTeamCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearSeasonCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearSeasonCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearSeasonCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveSeasonsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveSeasonsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveSeasonsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &SeasonModel{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSeasonContestIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSeasonContestIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSeasonContestIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSeasonContestIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSeasonContestIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSeasonContestIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ContestIds = append(m.ContestIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ContestIds) == 0 {
					m.ContestIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ContestIds = append(m.ContestIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshContestCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshContestCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshContestCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestId", wireType)
			}
			m.ContestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshTeamCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshTeamCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshTeamCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshSeriesCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshSeriesCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshSeriesCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesId", wireType)
			}
			m.SeriesId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeriesId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeasonSeriesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeasonSeriesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeasonSeriesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeasonSeriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeasonSeriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeasonSeriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = append(m.Series, &SeriesModel{})
			if err := m.Series[len(m.Series)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeriesModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeriesModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeriesModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContestGameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContestGameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContestGameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContestGameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContestGameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContestGameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Game == nil {
				m.Game = &GameModel{}
			}
			if err := m.Game.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContestInfoListBySeasonReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContestInfoListBySeasonReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContestInfoListBySeasonReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetContestInfoListBySeasonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetContestInfoListBySeasonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetContestInfoListBySeasonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentContestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ComponentContestList == nil {
				m.ComponentContestList = make(map[int64]*SeasonContests)
			}
			var mapkey int64
			var mapvalue *SeasonContests
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SeasonContests{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ComponentContestList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReplyWallModelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReplyWallModelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReplyWallModelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReplyWallListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReplyWallListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReplyWallListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReplyWallListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReplyWallListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReplyWallListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contest == nil {
				m.Contest = &ContestDetail{}
			}
			if err := m.Contest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyList = append(m.ReplyList, &ReplyWallInfo{})
			if err := m.ReplyList[len(m.ReplyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyWallInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyWallInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyWallInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveReplyWallModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveReplyWallModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveReplyWallModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContestID", wireType)
			}
			m.ContestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyList = append(m.ReplyList, &ReplyWallModel{})
			if err := m.ReplyList[len(m.ReplyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyWallModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyWallModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyWallModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeasonByTimeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeasonByTimeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeasonByTimeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTime", wireType)
			}
			m.BeginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSeasonByTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSeasonByTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSeasonByTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seasons = append(m.Seasons, &SeasonDetail{})
			if err := m.Seasons[len(m.Seasons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoArgsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoArgsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
