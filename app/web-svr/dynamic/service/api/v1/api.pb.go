// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/web-svr/dynamic/service/api/v1/api.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	api "go-gateway/app/app-svr/archive/service/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegionArcs3Reply struct {
	Arcs                 []*api.Arc `protobuf:"bytes,1,rep,name=arcs,proto3" json:"arcs,omitempty"`
	Count                int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RegionArcs3Reply) Reset()         { *m = RegionArcs3Reply{} }
func (m *RegionArcs3Reply) String() string { return proto.CompactTextString(m) }
func (*RegionArcs3Reply) ProtoMessage()    {}
func (*RegionArcs3Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{0}
}
func (m *RegionArcs3Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionArcs3Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionArcs3Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionArcs3Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionArcs3Reply.Merge(m, src)
}
func (m *RegionArcs3Reply) XXX_Size() int {
	return m.Size()
}
func (m *RegionArcs3Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionArcs3Reply.DiscardUnknown(m)
}

var xxx_messageInfo_RegionArcs3Reply proto.InternalMessageInfo

func (m *RegionArcs3Reply) GetArcs() []*api.Arc {
	if m != nil {
		return m.Arcs
	}
	return nil
}

func (m *RegionArcs3Reply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RegionArcs3Req struct {
	Rid                  int64    `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty" form:"rid" validate:"required"`
	Pn                   int64    `protobuf:"varint,3,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" validate:"min=1,required"`
	Ps                   int64    `protobuf:"varint,4,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" validate:"min=1,required"`
	Business             string   `protobuf:"bytes,5,opt,name=business,proto3" json:"business,omitempty" form:"business"`
	IsFilter             bool     `protobuf:"varint,6,opt,name=isFilter,proto3" json:"isFilter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionArcs3Req) Reset()         { *m = RegionArcs3Req{} }
func (m *RegionArcs3Req) String() string { return proto.CompactTextString(m) }
func (*RegionArcs3Req) ProtoMessage()    {}
func (*RegionArcs3Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{1}
}
func (m *RegionArcs3Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionArcs3Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionArcs3Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionArcs3Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionArcs3Req.Merge(m, src)
}
func (m *RegionArcs3Req) XXX_Size() int {
	return m.Size()
}
func (m *RegionArcs3Req) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionArcs3Req.DiscardUnknown(m)
}

var xxx_messageInfo_RegionArcs3Req proto.InternalMessageInfo

func (m *RegionArcs3Req) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RegionArcs3Req) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *RegionArcs3Req) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *RegionArcs3Req) GetBusiness() string {
	if m != nil {
		return m.Business
	}
	return ""
}

func (m *RegionArcs3Req) GetIsFilter() bool {
	if m != nil {
		return m.IsFilter
	}
	return false
}

type RegionTagArcs3Reply struct {
	Arcs                 []*api.Arc `protobuf:"bytes,1,rep,name=arcs,proto3" json:"arcs,omitempty"`
	Count                int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RegionTagArcs3Reply) Reset()         { *m = RegionTagArcs3Reply{} }
func (m *RegionTagArcs3Reply) String() string { return proto.CompactTextString(m) }
func (*RegionTagArcs3Reply) ProtoMessage()    {}
func (*RegionTagArcs3Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{2}
}
func (m *RegionTagArcs3Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionTagArcs3Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionTagArcs3Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionTagArcs3Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionTagArcs3Reply.Merge(m, src)
}
func (m *RegionTagArcs3Reply) XXX_Size() int {
	return m.Size()
}
func (m *RegionTagArcs3Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionTagArcs3Reply.DiscardUnknown(m)
}

var xxx_messageInfo_RegionTagArcs3Reply proto.InternalMessageInfo

func (m *RegionTagArcs3Reply) GetArcs() []*api.Arc {
	if m != nil {
		return m.Arcs
	}
	return nil
}

func (m *RegionTagArcs3Reply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RegionTagArcs3Req struct {
	Rid                  int64    `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty" form:"rid" validate:"required"`
	TagId                int64    `protobuf:"varint,3,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty" form:"tag_id" validate:"required"`
	Pn                   int64    `protobuf:"varint,4,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" validate:"min=1,required"`
	Ps                   int64    `protobuf:"varint,5,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" validate:"min=1,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionTagArcs3Req) Reset()         { *m = RegionTagArcs3Req{} }
func (m *RegionTagArcs3Req) String() string { return proto.CompactTextString(m) }
func (*RegionTagArcs3Req) ProtoMessage()    {}
func (*RegionTagArcs3Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{3}
}
func (m *RegionTagArcs3Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionTagArcs3Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionTagArcs3Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionTagArcs3Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionTagArcs3Req.Merge(m, src)
}
func (m *RegionTagArcs3Req) XXX_Size() int {
	return m.Size()
}
func (m *RegionTagArcs3Req) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionTagArcs3Req.DiscardUnknown(m)
}

var xxx_messageInfo_RegionTagArcs3Req proto.InternalMessageInfo

func (m *RegionTagArcs3Req) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RegionTagArcs3Req) GetTagId() int64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *RegionTagArcs3Req) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *RegionTagArcs3Req) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type RegionTotalReply struct {
	Res                  map[string]int64 `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RegionTotalReply) Reset()         { *m = RegionTotalReply{} }
func (m *RegionTotalReply) String() string { return proto.CompactTextString(m) }
func (*RegionTotalReply) ProtoMessage()    {}
func (*RegionTotalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{4}
}
func (m *RegionTotalReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionTotalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionTotalReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionTotalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionTotalReply.Merge(m, src)
}
func (m *RegionTotalReply) XXX_Size() int {
	return m.Size()
}
func (m *RegionTotalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionTotalReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegionTotalReply proto.InternalMessageInfo

func (m *RegionTotalReply) GetRes() map[string]int64 {
	if m != nil {
		return m.Res
	}
	return nil
}

type NoArgRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoArgRequest) Reset()         { *m = NoArgRequest{} }
func (m *NoArgRequest) String() string { return proto.CompactTextString(m) }
func (*NoArgRequest) ProtoMessage()    {}
func (*NoArgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{5}
}
func (m *NoArgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoArgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoArgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoArgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoArgRequest.Merge(m, src)
}
func (m *NoArgRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoArgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoArgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoArgRequest proto.InternalMessageInfo

type Arcs struct {
	Arcs                 []*api.Arc `protobuf:"bytes,1,rep,name=arcs,proto3" json:"arcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Arcs) Reset()         { *m = Arcs{} }
func (m *Arcs) String() string { return proto.CompactTextString(m) }
func (*Arcs) ProtoMessage()    {}
func (*Arcs) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{6}
}
func (m *Arcs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arcs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arcs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arcs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arcs.Merge(m, src)
}
func (m *Arcs) XXX_Size() int {
	return m.Size()
}
func (m *Arcs) XXX_DiscardUnknown() {
	xxx_messageInfo_Arcs.DiscardUnknown(m)
}

var xxx_messageInfo_Arcs proto.InternalMessageInfo

func (m *Arcs) GetArcs() []*api.Arc {
	if m != nil {
		return m.Arcs
	}
	return nil
}

type RegAllReq struct {
	Rid                  int64    `protobuf:"varint,1,opt,name=rid,proto3" json:"rid,omitempty" form:"rid" validate:"required"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty" form:"type"`
	Pn                   int64    `protobuf:"varint,3,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" validate:"min=1,required"`
	Ps                   int64    `protobuf:"varint,4,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" validate:"min=1,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegAllReq) Reset()         { *m = RegAllReq{} }
func (m *RegAllReq) String() string { return proto.CompactTextString(m) }
func (*RegAllReq) ProtoMessage()    {}
func (*RegAllReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{7}
}
func (m *RegAllReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegAllReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegAllReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegAllReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegAllReq.Merge(m, src)
}
func (m *RegAllReq) XXX_Size() int {
	return m.Size()
}
func (m *RegAllReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegAllReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegAllReq proto.InternalMessageInfo

func (m *RegAllReq) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RegAllReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RegAllReq) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *RegAllReq) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type RegAllReply struct {
	Archives             []*api.Arc `protobuf:"bytes,1,rep,name=archives,proto3" json:"archives,omitempty"`
	Count                int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RegAllReply) Reset()         { *m = RegAllReply{} }
func (m *RegAllReply) String() string { return proto.CompactTextString(m) }
func (*RegAllReply) ProtoMessage()    {}
func (*RegAllReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{8}
}
func (m *RegAllReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegAllReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegAllReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegAllReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegAllReply.Merge(m, src)
}
func (m *RegAllReply) XXX_Size() int {
	return m.Size()
}
func (m *RegAllReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegAllReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegAllReply proto.InternalMessageInfo

func (m *RegAllReply) GetArchives() []*api.Arc {
	if m != nil {
		return m.Archives
	}
	return nil
}

func (m *RegAllReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RegCountReq struct {
	Rid                  []int32  `protobuf:"varint,1,rep,packed,name=rid,proto3" json:"rid,omitempty" form:"rid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegCountReq) Reset()         { *m = RegCountReq{} }
func (m *RegCountReq) String() string { return proto.CompactTextString(m) }
func (*RegCountReq) ProtoMessage()    {}
func (*RegCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{9}
}
func (m *RegCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegCountReq.Merge(m, src)
}
func (m *RegCountReq) XXX_Size() int {
	return m.Size()
}
func (m *RegCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegCountReq proto.InternalMessageInfo

func (m *RegCountReq) GetRid() []int32 {
	if m != nil {
		return m.Rid
	}
	return nil
}

type RegCountReply struct {
	RegCountMap          map[int32]int64 `protobuf:"bytes,1,rep,name=regCountMap,proto3" json:"regCountMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RegCountReply) Reset()         { *m = RegCountReply{} }
func (m *RegCountReply) String() string { return proto.CompactTextString(m) }
func (*RegCountReply) ProtoMessage()    {}
func (*RegCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{10}
}
func (m *RegCountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegCountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegCountReply.Merge(m, src)
}
func (m *RegCountReply) XXX_Size() int {
	return m.Size()
}
func (m *RegCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegCountReply proto.InternalMessageInfo

func (m *RegCountReply) GetRegCountMap() map[int32]int64 {
	if m != nil {
		return m.RegCountMap
	}
	return nil
}

type RecentThrdRegArcReq struct {
	Rid                  int32    `protobuf:"varint,1,opt,name=rid,proto3" json:"rid,omitempty" form:"rid" validate:"required"`
	Pn                   int64    `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" validate:"min=1,required"`
	Ps                   int64    `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" validate:"min=1,max=100,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecentThrdRegArcReq) Reset()         { *m = RecentThrdRegArcReq{} }
func (m *RecentThrdRegArcReq) String() string { return proto.CompactTextString(m) }
func (*RecentThrdRegArcReq) ProtoMessage()    {}
func (*RecentThrdRegArcReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{11}
}
func (m *RecentThrdRegArcReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentThrdRegArcReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentThrdRegArcReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecentThrdRegArcReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentThrdRegArcReq.Merge(m, src)
}
func (m *RecentThrdRegArcReq) XXX_Size() int {
	return m.Size()
}
func (m *RecentThrdRegArcReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentThrdRegArcReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecentThrdRegArcReq proto.InternalMessageInfo

func (m *RecentThrdRegArcReq) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RecentThrdRegArcReq) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *RecentThrdRegArcReq) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type RecentThrdRegArcReply struct {
	Archives             []*api.Arc `protobuf:"bytes,1,rep,name=archives,proto3" json:"archives,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RecentThrdRegArcReply) Reset()         { *m = RecentThrdRegArcReply{} }
func (m *RecentThrdRegArcReply) String() string { return proto.CompactTextString(m) }
func (*RecentThrdRegArcReply) ProtoMessage()    {}
func (*RecentThrdRegArcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{12}
}
func (m *RecentThrdRegArcReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentThrdRegArcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentThrdRegArcReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecentThrdRegArcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentThrdRegArcReply.Merge(m, src)
}
func (m *RecentThrdRegArcReply) XXX_Size() int {
	return m.Size()
}
func (m *RecentThrdRegArcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentThrdRegArcReply.DiscardUnknown(m)
}

var xxx_messageInfo_RecentThrdRegArcReply proto.InternalMessageInfo

func (m *RecentThrdRegArcReply) GetArchives() []*api.Arc {
	if m != nil {
		return m.Archives
	}
	return nil
}

type RecentWeeklyArcReq struct {
	Pn                   int64    `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" validate:"min=1,required"`
	Ps                   int64    `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" validate:"min=1,max=100,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecentWeeklyArcReq) Reset()         { *m = RecentWeeklyArcReq{} }
func (m *RecentWeeklyArcReq) String() string { return proto.CompactTextString(m) }
func (*RecentWeeklyArcReq) ProtoMessage()    {}
func (*RecentWeeklyArcReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{13}
}
func (m *RecentWeeklyArcReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentWeeklyArcReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentWeeklyArcReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecentWeeklyArcReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentWeeklyArcReq.Merge(m, src)
}
func (m *RecentWeeklyArcReq) XXX_Size() int {
	return m.Size()
}
func (m *RecentWeeklyArcReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentWeeklyArcReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecentWeeklyArcReq proto.InternalMessageInfo

func (m *RecentWeeklyArcReq) GetPn() int64 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *RecentWeeklyArcReq) GetPs() int64 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type RecentWeeklyArcReply struct {
	Archives             []*api.Arc `protobuf:"bytes,1,rep,name=archives,proto3" json:"archives,omitempty"`
	Count                int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RecentWeeklyArcReply) Reset()         { *m = RecentWeeklyArcReply{} }
func (m *RecentWeeklyArcReply) String() string { return proto.CompactTextString(m) }
func (*RecentWeeklyArcReply) ProtoMessage()    {}
func (*RecentWeeklyArcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_209ef78bf4cffc6d, []int{14}
}
func (m *RecentWeeklyArcReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentWeeklyArcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentWeeklyArcReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecentWeeklyArcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentWeeklyArcReply.Merge(m, src)
}
func (m *RecentWeeklyArcReply) XXX_Size() int {
	return m.Size()
}
func (m *RecentWeeklyArcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentWeeklyArcReply.DiscardUnknown(m)
}

var xxx_messageInfo_RecentWeeklyArcReply proto.InternalMessageInfo

func (m *RecentWeeklyArcReply) GetArchives() []*api.Arc {
	if m != nil {
		return m.Archives
	}
	return nil
}

func (m *RecentWeeklyArcReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*RegionArcs3Reply)(nil), "archive.service.dynamic.v1.RegionArcs3Reply")
	proto.RegisterType((*RegionArcs3Req)(nil), "archive.service.dynamic.v1.RegionArcs3Req")
	proto.RegisterType((*RegionTagArcs3Reply)(nil), "archive.service.dynamic.v1.RegionTagArcs3Reply")
	proto.RegisterType((*RegionTagArcs3Req)(nil), "archive.service.dynamic.v1.RegionTagArcs3Req")
	proto.RegisterType((*RegionTotalReply)(nil), "archive.service.dynamic.v1.RegionTotalReply")
	proto.RegisterMapType((map[string]int64)(nil), "archive.service.dynamic.v1.RegionTotalReply.ResEntry")
	proto.RegisterType((*NoArgRequest)(nil), "archive.service.dynamic.v1.NoArgRequest")
	proto.RegisterType((*Arcs)(nil), "archive.service.dynamic.v1.Arcs")
	proto.RegisterType((*RegAllReq)(nil), "archive.service.dynamic.v1.RegAllReq")
	proto.RegisterType((*RegAllReply)(nil), "archive.service.dynamic.v1.RegAllReply")
	proto.RegisterType((*RegCountReq)(nil), "archive.service.dynamic.v1.RegCountReq")
	proto.RegisterType((*RegCountReply)(nil), "archive.service.dynamic.v1.RegCountReply")
	proto.RegisterMapType((map[int32]int64)(nil), "archive.service.dynamic.v1.RegCountReply.RegCountMapEntry")
	proto.RegisterType((*RecentThrdRegArcReq)(nil), "archive.service.dynamic.v1.RecentThrdRegArcReq")
	proto.RegisterType((*RecentThrdRegArcReply)(nil), "archive.service.dynamic.v1.RecentThrdRegArcReply")
	proto.RegisterType((*RecentWeeklyArcReq)(nil), "archive.service.dynamic.v1.RecentWeeklyArcReq")
	proto.RegisterType((*RecentWeeklyArcReply)(nil), "archive.service.dynamic.v1.RecentWeeklyArcReply")
}

func init() {
	proto.RegisterFile("go-gateway/app/web-svr/dynamic/service/api/v1/api.proto", fileDescriptor_209ef78bf4cffc6d)
}

var fileDescriptor_209ef78bf4cffc6d = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0x66, 0x9c, 0x78, 0x49, 0x67, 0xa1, 0x5b, 0xa6, 0x8b, 0x88, 0x7c, 0x48, 0xc2, 0x54, 0xd5,
	0x06, 0xda, 0xd8, 0x9b, 0xa6, 0x50, 0x14, 0x51, 0x50, 0x52, 0x3e, 0x84, 0x44, 0x39, 0x58, 0x8b,
	0xa8, 0x10, 0x02, 0x4d, 0x9c, 0xa9, 0xd7, 0xaa, 0x63, 0x4f, 0xc6, 0x8e, 0x8b, 0x7f, 0x00, 0x57,
	0x2e, 0x5c, 0xf8, 0x13, 0xfc, 0x0c, 0x24, 0x8e, 0x1c, 0x39, 0x45, 0x68, 0xf9, 0x07, 0x39, 0x20,
	0x71, 0x43, 0x33, 0x63, 0xe7, 0x93, 0x6d, 0xe2, 0x68, 0xc5, 0x29, 0x9e, 0xc9, 0xfb, 0x3c, 0x9e,
	0x79, 0xde, 0xe7, 0x7d, 0x5f, 0xc3, 0x07, 0x6e, 0xd8, 0x72, 0x49, 0x4c, 0x9f, 0x93, 0xd4, 0x22,
	0x8c, 0x59, 0xcf, 0xe9, 0xa0, 0x15, 0x25, 0xdc, 0x1a, 0xa6, 0x01, 0x19, 0x79, 0x8e, 0x15, 0x51,
	0x9e, 0x78, 0x0e, 0xb5, 0x08, 0xf3, 0xac, 0xa4, 0x2d, 0x7e, 0x4c, 0xc6, 0xc3, 0x38, 0x44, 0x06,
	0xe1, 0xce, 0xb9, 0x97, 0x50, 0x33, 0x8b, 0x30, 0x33, 0x84, 0x99, 0xb4, 0x8d, 0xfb, 0x6b, 0xa4,
	0x84, 0x31, 0x49, 0x9a, 0x41, 0x56, 0x48, 0xe7, 0x8c, 0x46, 0xcb, 0xf5, 0xe2, 0xf3, 0xc9, 0xc0,
	0x74, 0xc2, 0x91, 0xe5, 0x86, 0x6e, 0x68, 0xc9, 0xed, 0xc1, 0xe4, 0xa9, 0x5c, 0xc9, 0x85, 0x7c,
	0x52, 0xe1, 0xf8, 0x4b, 0x78, 0xc3, 0xa6, 0xae, 0x17, 0x06, 0x3d, 0xee, 0x44, 0x1d, 0x9b, 0x32,
	0x3f, 0x45, 0x77, 0x60, 0x99, 0x70, 0x27, 0xaa, 0x82, 0x46, 0xa9, 0x79, 0x78, 0xef, 0x0d, 0x73,
	0xfd, 0x8c, 0x49, 0xdb, 0xec, 0x71, 0xc7, 0x96, 0x41, 0xe8, 0x18, 0xea, 0x4e, 0x38, 0x09, 0xe2,
	0xaa, 0xd6, 0x00, 0xcd, 0x92, 0xad, 0x16, 0xf8, 0x07, 0x0d, 0x5e, 0x5f, 0xe1, 0x1d, 0xa3, 0xfb,
	0xb0, 0xc4, 0xbd, 0xa1, 0x0a, 0xeb, 0xe3, 0xd9, 0xb4, 0x5e, 0x7b, 0x1a, 0xf2, 0x51, 0x17, 0x73,
	0x6f, 0x88, 0x1b, 0x09, 0xf1, 0xbd, 0x21, 0x89, 0x69, 0x17, 0x73, 0x3a, 0x9e, 0x78, 0x9c, 0x0e,
	0xb1, 0x2d, 0xc2, 0xd1, 0x03, 0xa8, 0xb1, 0xa0, 0x5a, 0x92, 0xa0, 0x93, 0xd9, 0xb4, 0x7e, 0x4b,
	0x81, 0x58, 0xb0, 0x8c, 0x19, 0x79, 0xc1, 0xc3, 0xf6, 0xdd, 0x05, 0x52, 0x63, 0x81, 0x04, 0x46,
	0xd5, 0xf2, 0x06, 0x30, 0x7a, 0x31, 0x30, 0x42, 0x16, 0xac, 0x0c, 0x26, 0x91, 0x17, 0xd0, 0x28,
	0xaa, 0xea, 0x0d, 0xd0, 0xbc, 0xd6, 0xbf, 0x39, 0x9b, 0xd6, 0x8f, 0x14, 0x3c, 0xff, 0x07, 0xdb,
	0xf3, 0x20, 0x64, 0xc0, 0x8a, 0x17, 0x7d, 0xe2, 0xf9, 0x31, 0xe5, 0xd5, 0x83, 0x06, 0x68, 0x56,
	0xec, 0xf9, 0x1a, 0x3f, 0x81, 0x37, 0x95, 0x0c, 0x67, 0xc4, 0xbd, 0x5a, 0x85, 0xff, 0x01, 0xf0,
	0xb5, 0x75, 0xea, 0x7d, 0x45, 0x7e, 0x1f, 0x1e, 0xc4, 0xc4, 0xfd, 0xce, 0x1b, 0x66, 0x42, 0xdf,
	0x9e, 0x4d, 0xeb, 0x6f, 0x2a, 0xa0, 0xda, 0xff, 0x6f, 0xac, 0x1e, 0x13, 0xf7, 0xb3, 0x3c, 0x45,
	0xe5, 0x7d, 0x53, 0xa4, 0x17, 0x4e, 0x11, 0xfe, 0x09, 0xe4, 0xae, 0x3d, 0x0b, 0x63, 0xe2, 0x2b,
	0x4d, 0x3f, 0x85, 0x25, 0x4e, 0x73, 0x49, 0xdf, 0x31, 0x2f, 0x2f, 0x2c, 0x73, 0x1d, 0x6a, 0xda,
	0x34, 0xfa, 0x38, 0x88, 0x79, 0x6a, 0x0b, 0x06, 0xe3, 0x5d, 0x58, 0xc9, 0x37, 0xd0, 0x0d, 0x58,
	0x7a, 0x46, 0xd3, 0x2a, 0x10, 0x3e, 0xb0, 0xc5, 0xa3, 0xc8, 0x46, 0x42, 0xfc, 0x09, 0xcd, 0xb3,
	0x21, 0x17, 0x5d, 0xed, 0x3d, 0x80, 0xaf, 0xc3, 0x57, 0xbe, 0x08, 0x7b, 0xdc, 0xb5, 0xe9, 0x78,
	0x42, 0xa3, 0x18, 0x77, 0x60, 0x59, 0xe4, 0xa5, 0x50, 0xb2, 0xf1, 0x1f, 0x00, 0x5e, 0xb3, 0xa9,
	0xdb, 0xf3, 0xfd, 0xa5, 0x74, 0x82, 0x62, 0xe9, 0xbc, 0x05, 0xcb, 0x71, 0xca, 0xd4, 0x09, 0xf5,
	0xfe, 0xd1, 0x6c, 0x5a, 0x3f, 0xcc, 0x92, 0x99, 0x32, 0x8a, 0x6d, 0xf9, 0xe7, 0xff, 0x5f, 0x58,
	0xf8, 0x09, 0x3c, 0xcc, 0x6f, 0x26, 0xf2, 0xd5, 0x81, 0x95, 0x4c, 0x89, 0xad, 0xd2, 0xcc, 0x03,
	0x2f, 0xa9, 0x85, 0x47, 0x92, 0xf9, 0x91, 0x78, 0x5e, 0x51, 0xad, 0xd4, 0xd4, 0x77, 0x56, 0x0d,
	0xff, 0x02, 0xe0, 0xab, 0x0b, 0x16, 0x71, 0xc2, 0x6f, 0xe0, 0x21, 0xcf, 0x36, 0x1e, 0x13, 0x96,
	0x1d, 0xb2, 0xbb, 0xc5, 0x59, 0x0b, 0xfc, 0x7c, 0xf5, 0x98, 0x30, 0x65, 0xaf, 0x65, 0x3a, 0xe3,
	0x03, 0xe9, 0xe1, 0x95, 0x80, 0x65, 0xbb, 0xe9, 0xdb, 0xec, 0xf6, 0x2b, 0x10, 0xbd, 0xc5, 0xa1,
	0x41, 0x7c, 0x76, 0xce, 0x87, 0x42, 0x59, 0xee, 0xac, 0x79, 0x46, 0x2f, 0xda, 0x67, 0xb5, 0xe2,
	0x76, 0xf8, 0x50, 0xda, 0x41, 0xf9, 0xc8, 0x9a, 0x4d, 0xeb, 0x77, 0x2e, 0xb7, 0xc3, 0x88, 0x7c,
	0xff, 0xb0, 0x7d, 0x7a, 0xba, 0x66, 0x8b, 0xcf, 0xe1, 0xeb, 0x9b, 0xd7, 0xd8, 0xd7, 0x20, 0xf8,
	0x47, 0x00, 0x91, 0xa2, 0xfb, 0x8a, 0xd2, 0x67, 0x7e, 0x9a, 0x89, 0xa2, 0xae, 0x07, 0xf6, 0xbd,
	0x9e, 0xb6, 0xff, 0xf5, 0x08, 0x3c, 0xde, 0x38, 0xcf, 0xd5, 0xda, 0xff, 0xde, 0xdf, 0x3a, 0x7c,
	0xf9, 0x23, 0x65, 0x42, 0x44, 0x65, 0x29, 0xe4, 0xed, 0x0d, 0x35, 0x5f, 0xe4, 0xd6, 0xe5, 0x6e,
	0x65, 0xdc, 0x2d, 0xd2, 0x31, 0x91, 0x9b, 0xbf, 0x46, 0x4e, 0x1e, 0xf4, 0xf6, 0x76, 0x70, 0x3e,
	0xa2, 0x76, 0x79, 0xd1, 0xd2, 0xa4, 0x64, 0xf9, 0x77, 0x44, 0x3e, 0xe5, 0x50, 0x6b, 0x87, 0x83,
	0x2e, 0x26, 0xa2, 0x61, 0x15, 0x09, 0x57, 0x55, 0x0f, 0x55, 0x9b, 0x92, 0xcd, 0xfb, 0xf6, 0x16,
	0xb8, 0x6a, 0xd4, 0xc6, 0xc9, 0x2e, 0x61, 0x82, 0xfd, 0x5b, 0x31, 0x5c, 0x54, 0xd5, 0xa3, 0x93,
	0xdd, 0x5a, 0xc9, 0xd8, 0x78, 0x6b, 0xe7, 0x9e, 0x83, 0x12, 0xd1, 0x55, 0x56, 0xab, 0x09, 0x6d,
	0x91, 0x60, 0xa3, 0x85, 0x18, 0xed, 0x62, 0x00, 0xf1, 0xde, 0x08, 0x1e, 0xad, 0xd9, 0x1c, 0x99,
	0xdb, 0x59, 0x96, 0x6b, 0xd4, 0x38, 0x2d, 0x14, 0xcf, 0xfc, 0xb4, 0x7f, 0xfc, 0xdb, 0x45, 0x0d,
	0xfc, 0x7e, 0x51, 0x03, 0x7f, 0x5e, 0xd4, 0xc0, 0xcf, 0x7f, 0xd5, 0x5e, 0xfa, 0x5a, 0x4b, 0xda,
	0x83, 0x03, 0xf9, 0x65, 0xdb, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x42, 0x83, 0x48, 0x95,
	0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DynamicClient is the client API for Dynamic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DynamicClient interface {
	// 分区下动态总数
	RegionTotal(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*RegionTotalReply, error)
	// 分区下最新动态
	RegionArcs3(ctx context.Context, in *RegionArcs3Req, opts ...grpc.CallOption) (*RegionArcs3Reply, error)
	// 分区下热门tag的最新动态
	RegionTagArcs3(ctx context.Context, in *RegionTagArcs3Req, opts ...grpc.CallOption) (*RegionTagArcs3Reply, error)
	// 二级分区稿件
	RegAllArcs(ctx context.Context, in *RegAllReq, opts ...grpc.CallOption) (*RegAllReply, error)
	// 获取分区当天投稿数量
	RegCount(ctx context.Context, in *RegCountReq, opts ...grpc.CallOption) (*RegCountReply, error)
	// 分区下最近三天稿件
	RecentThrdRegArc(ctx context.Context, in *RecentThrdRegArcReq, opts ...grpc.CallOption) (*RecentThrdRegArcReply, error)
	// 最近七天稿件
	RecentWeeklyArc(ctx context.Context, in *RecentWeeklyArcReq, opts ...grpc.CallOption) (*RecentWeeklyArcReply, error)
}

type dynamicClient struct {
	cc *grpc.ClientConn
}

func NewDynamicClient(cc *grpc.ClientConn) DynamicClient {
	return &dynamicClient{cc}
}

func (c *dynamicClient) RegionTotal(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*RegionTotalReply, error) {
	out := new(RegionTotalReply)
	err := c.cc.Invoke(ctx, "/archive.service.dynamic.v1.Dynamic/RegionTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) RegionArcs3(ctx context.Context, in *RegionArcs3Req, opts ...grpc.CallOption) (*RegionArcs3Reply, error) {
	out := new(RegionArcs3Reply)
	err := c.cc.Invoke(ctx, "/archive.service.dynamic.v1.Dynamic/RegionArcs3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) RegionTagArcs3(ctx context.Context, in *RegionTagArcs3Req, opts ...grpc.CallOption) (*RegionTagArcs3Reply, error) {
	out := new(RegionTagArcs3Reply)
	err := c.cc.Invoke(ctx, "/archive.service.dynamic.v1.Dynamic/RegionTagArcs3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) RegAllArcs(ctx context.Context, in *RegAllReq, opts ...grpc.CallOption) (*RegAllReply, error) {
	out := new(RegAllReply)
	err := c.cc.Invoke(ctx, "/archive.service.dynamic.v1.Dynamic/RegAllArcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) RegCount(ctx context.Context, in *RegCountReq, opts ...grpc.CallOption) (*RegCountReply, error) {
	out := new(RegCountReply)
	err := c.cc.Invoke(ctx, "/archive.service.dynamic.v1.Dynamic/RegCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) RecentThrdRegArc(ctx context.Context, in *RecentThrdRegArcReq, opts ...grpc.CallOption) (*RecentThrdRegArcReply, error) {
	out := new(RecentThrdRegArcReply)
	err := c.cc.Invoke(ctx, "/archive.service.dynamic.v1.Dynamic/RecentThrdRegArc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicClient) RecentWeeklyArc(ctx context.Context, in *RecentWeeklyArcReq, opts ...grpc.CallOption) (*RecentWeeklyArcReply, error) {
	out := new(RecentWeeklyArcReply)
	err := c.cc.Invoke(ctx, "/archive.service.dynamic.v1.Dynamic/RecentWeeklyArc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicServer is the server API for Dynamic service.
type DynamicServer interface {
	// 分区下动态总数
	RegionTotal(context.Context, *NoArgRequest) (*RegionTotalReply, error)
	// 分区下最新动态
	RegionArcs3(context.Context, *RegionArcs3Req) (*RegionArcs3Reply, error)
	// 分区下热门tag的最新动态
	RegionTagArcs3(context.Context, *RegionTagArcs3Req) (*RegionTagArcs3Reply, error)
	// 二级分区稿件
	RegAllArcs(context.Context, *RegAllReq) (*RegAllReply, error)
	// 获取分区当天投稿数量
	RegCount(context.Context, *RegCountReq) (*RegCountReply, error)
	// 分区下最近三天稿件
	RecentThrdRegArc(context.Context, *RecentThrdRegArcReq) (*RecentThrdRegArcReply, error)
	// 最近七天稿件
	RecentWeeklyArc(context.Context, *RecentWeeklyArcReq) (*RecentWeeklyArcReply, error)
}

// UnimplementedDynamicServer can be embedded to have forward compatible implementations.
type UnimplementedDynamicServer struct {
}

func (*UnimplementedDynamicServer) RegionTotal(ctx context.Context, req *NoArgRequest) (*RegionTotalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegionTotal not implemented")
}
func (*UnimplementedDynamicServer) RegionArcs3(ctx context.Context, req *RegionArcs3Req) (*RegionArcs3Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegionArcs3 not implemented")
}
func (*UnimplementedDynamicServer) RegionTagArcs3(ctx context.Context, req *RegionTagArcs3Req) (*RegionTagArcs3Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegionTagArcs3 not implemented")
}
func (*UnimplementedDynamicServer) RegAllArcs(ctx context.Context, req *RegAllReq) (*RegAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegAllArcs not implemented")
}
func (*UnimplementedDynamicServer) RegCount(ctx context.Context, req *RegCountReq) (*RegCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegCount not implemented")
}
func (*UnimplementedDynamicServer) RecentThrdRegArc(ctx context.Context, req *RecentThrdRegArcReq) (*RecentThrdRegArcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentThrdRegArc not implemented")
}
func (*UnimplementedDynamicServer) RecentWeeklyArc(ctx context.Context, req *RecentWeeklyArcReq) (*RecentWeeklyArcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentWeeklyArc not implemented")
}

func RegisterDynamicServer(s *grpc.Server, srv DynamicServer) {
	s.RegisterService(&_Dynamic_serviceDesc, srv)
}

func _Dynamic_RegionTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).RegionTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.dynamic.v1.Dynamic/RegionTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).RegionTotal(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_RegionArcs3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionArcs3Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).RegionArcs3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.dynamic.v1.Dynamic/RegionArcs3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).RegionArcs3(ctx, req.(*RegionArcs3Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_RegionTagArcs3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionTagArcs3Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).RegionTagArcs3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.dynamic.v1.Dynamic/RegionTagArcs3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).RegionTagArcs3(ctx, req.(*RegionTagArcs3Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_RegAllArcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).RegAllArcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.dynamic.v1.Dynamic/RegAllArcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).RegAllArcs(ctx, req.(*RegAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_RegCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).RegCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.dynamic.v1.Dynamic/RegCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).RegCount(ctx, req.(*RegCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_RecentThrdRegArc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentThrdRegArcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).RecentThrdRegArc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.dynamic.v1.Dynamic/RecentThrdRegArc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).RecentThrdRegArc(ctx, req.(*RecentThrdRegArcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamic_RecentWeeklyArc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentWeeklyArcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).RecentWeeklyArc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.dynamic.v1.Dynamic/RecentWeeklyArc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).RecentWeeklyArc(ctx, req.(*RecentWeeklyArcReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dynamic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archive.service.dynamic.v1.Dynamic",
	HandlerType: (*DynamicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegionTotal",
			Handler:    _Dynamic_RegionTotal_Handler,
		},
		{
			MethodName: "RegionArcs3",
			Handler:    _Dynamic_RegionArcs3_Handler,
		},
		{
			MethodName: "RegionTagArcs3",
			Handler:    _Dynamic_RegionTagArcs3_Handler,
		},
		{
			MethodName: "RegAllArcs",
			Handler:    _Dynamic_RegAllArcs_Handler,
		},
		{
			MethodName: "RegCount",
			Handler:    _Dynamic_RegCount_Handler,
		},
		{
			MethodName: "RecentThrdRegArc",
			Handler:    _Dynamic_RecentThrdRegArc_Handler,
		},
		{
			MethodName: "RecentWeeklyArc",
			Handler:    _Dynamic_RecentWeeklyArc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/web-svr/dynamic/service/api/v1/api.proto",
}

func (m *RegionArcs3Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionArcs3Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionArcs3Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Arcs) > 0 {
		for iNdEx := len(m.Arcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegionArcs3Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionArcs3Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionArcs3Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFilter {
		i--
		if m.IsFilter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Business) > 0 {
		i -= len(m.Business)
		copy(dAtA[i:], m.Business)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Business)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x18
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *RegionTagArcs3Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionTagArcs3Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionTagArcs3Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Arcs) > 0 {
		for iNdEx := len(m.Arcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegionTagArcs3Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionTagArcs3Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionTagArcs3Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x28
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x20
	}
	if m.TagId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TagId))
		i--
		dAtA[i] = 0x18
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *RegionTotalReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionTotalReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionTotalReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Res) > 0 {
		for k := range m.Res {
			v := m.Res[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoArgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoArgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Arcs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arcs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arcs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Arcs) > 0 {
		for iNdEx := len(m.Arcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegAllReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegAllReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x20
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegAllReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegAllReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegAllReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Archives) > 0 {
		for iNdEx := len(m.Archives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Archives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rid) > 0 {
		dAtA2 := make([]byte, len(m.Rid)*10)
		var j1 int
		for _, num1 := range m.Rid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegCountReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegCountReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegCountMap) > 0 {
		for k := range m.RegCountMap {
			v := m.RegCountMap[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecentThrdRegArcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentThrdRegArcReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecentThrdRegArcReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x18
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x10
	}
	if m.Rid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecentThrdRegArcReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentThrdRegArcReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecentThrdRegArcReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Archives) > 0 {
		for iNdEx := len(m.Archives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Archives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecentWeeklyArcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentWeeklyArcReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecentWeeklyArcReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ps != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
		i--
		dAtA[i] = 0x10
	}
	if m.Pn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecentWeeklyArcReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentWeeklyArcReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecentWeeklyArcReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Archives) > 0 {
		for iNdEx := len(m.Archives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Archives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegionArcs3Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arcs) > 0 {
		for _, e := range m.Arcs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionArcs3Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	l = len(m.Business)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsFilter {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionTagArcs3Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arcs) > 0 {
		for _, e := range m.Arcs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionTagArcs3Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	if m.TagId != 0 {
		n += 1 + sovApi(uint64(m.TagId))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionTotalReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Res) > 0 {
		for k, v := range m.Res {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoArgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Arcs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arcs) > 0 {
		for _, e := range m.Arcs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegAllReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegAllReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rid) > 0 {
		l = 0
		for _, e := range m.Rid {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegCountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegCountMap) > 0 {
		for k, v := range m.RegCountMap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecentThrdRegArcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rid != 0 {
		n += 1 + sovApi(uint64(m.Rid))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecentThrdRegArcReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecentWeeklyArcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecentWeeklyArcReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegionArcs3Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionArcs3Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionArcs3Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arcs = append(m.Arcs, &api.Arc{})
			if err := m.Arcs[len(m.Arcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionArcs3Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionArcs3Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionArcs3Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Business = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFilter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFilter = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionTagArcs3Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionTagArcs3Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionTagArcs3Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arcs = append(m.Arcs, &api.Arc{})
			if err := m.Arcs[len(m.Arcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionTagArcs3Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionTagArcs3Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionTagArcs3Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			m.TagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionTotalReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionTotalReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionTotalReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Res[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoArgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arcs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arcs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arcs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arcs = append(m.Arcs, &api.Arc{})
			if err := m.Arcs[len(m.Arcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegAllReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegAllReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegAllReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &api.Arc{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rid = append(m.Rid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rid) == 0 {
					m.Rid = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rid = append(m.Rid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegCountMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegCountMap == nil {
				m.RegCountMap = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RegCountMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentThrdRegArcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentThrdRegArcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentThrdRegArcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentThrdRegArcReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentThrdRegArcReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentThrdRegArcReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &api.Arc{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentWeeklyArcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentWeeklyArcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentWeeklyArcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecentWeeklyArcReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentWeeklyArcReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentWeeklyArcReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &api.Arc{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
