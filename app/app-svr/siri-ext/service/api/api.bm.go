// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

It is generated from these files:

	api.proto
*/
package api

import (
	"context"

	bm "go-common/library/net/http/blademaster"
	"go-common/library/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathSiriExtPing = "/siri_ext.service.v1.SiriExt/Ping"
var PathSiriExtResolveCommand = "/x/internal/siri-ext/resolve/command"

// SiriExtBMServer is the server API for SiriExt service.
type SiriExtBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	ResolveCommand(ctx context.Context, req *ResolveCommandReq) (resp *ResolveCommandReply, err error)
}

var SiriExtSvc SiriExtBMServer

func siriExtPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SiriExtSvc.Ping(c, p)
	c.JSON(resp, err)
}

func siriExtResolveCommand(c *bm.Context) {
	p := new(ResolveCommandReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SiriExtSvc.ResolveCommand(c, p)
	c.JSON(resp, err)
}

// RegisterSiriExtBMServer Register the blademaster route
func RegisterSiriExtBMServer(e *bm.Engine, server SiriExtBMServer) {
	SiriExtSvc = server
	e.GET("/siri_ext.service.v1.SiriExt/Ping", siriExtPing)
	e.GET("/x/internal/siri-ext/resolve/command", siriExtResolveCommand)
}
