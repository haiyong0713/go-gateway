// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

package bwsonline

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_common_library_time "go-common/library/time"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Piece struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Token                string                      `protobuf:"bytes,3,opt,name=token,proto3" json:"unit"`
	Ctime                go_common_library_time.Time `protobuf:"varint,4,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,5,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Piece) Reset()         { *m = Piece{} }
func (m *Piece) String() string { return proto.CompactTextString(m) }
func (*Piece) ProtoMessage()    {}
func (*Piece) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}
func (m *Piece) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Piece) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Piece.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Piece) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Piece.Merge(m, src)
}
func (m *Piece) XXX_Size() int {
	return m.Size()
}
func (m *Piece) XXX_DiscardUnknown() {
	xxx_messageInfo_Piece.DiscardUnknown(m)
}

var xxx_messageInfo_Piece proto.InternalMessageInfo

func (m *Piece) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Piece) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Piece) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Piece) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Piece) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type Print struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Image                string                      `protobuf:"bytes,3,opt,name=image,proto3" json:"image"`
	PieceId              int64                       `protobuf:"varint,4,opt,name=piece_id,json=pieceId,proto3" json:"piece_id"`
	JumpUrl              string                      `protobuf:"bytes,5,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url"`
	Level                int32                       `protobuf:"varint,6,opt,name=level,proto3" json:"level"`
	PackageId            int64                       `protobuf:"varint,7,opt,name=package_id,json=packageId,proto3" json:"package_id"`
	Intro                string                      `protobuf:"bytes,8,opt,name=intro,proto3" json:"intro"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Bid                  int64                       `protobuf:"varint,11,opt,name=bid,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Print) Reset()         { *m = Print{} }
func (m *Print) String() string { return proto.CompactTextString(m) }
func (*Print) ProtoMessage()    {}
func (*Print) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}
func (m *Print) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Print) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Print.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Print) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Print.Merge(m, src)
}
func (m *Print) XXX_Size() int {
	return m.Size()
}
func (m *Print) XXX_DiscardUnknown() {
	xxx_messageInfo_Print.DiscardUnknown(m)
}

var xxx_messageInfo_Print proto.InternalMessageInfo

func (m *Print) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Print) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Print) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Print) GetPieceId() int64 {
	if m != nil {
		return m.PieceId
	}
	return 0
}

func (m *Print) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *Print) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Print) GetPackageId() int64 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

func (m *Print) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *Print) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Print) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *Print) GetBid() int64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type Dress struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Image                string                      `protobuf:"bytes,3,opt,name=image,proto3" json:"image"`
	Pos                  int64                       `protobuf:"varint,4,opt,name=pos,proto3" json:"pos"`
	Key                  string                      `protobuf:"bytes,5,opt,name=key,proto3" json:"key"`
	Ctime                go_common_library_time.Time `protobuf:"varint,6,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,7,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	GroupID              int64                       `protobuf:"varint,8,opt,name=groupID,proto3" json:"group_id"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Dress) Reset()         { *m = Dress{} }
func (m *Dress) String() string { return proto.CompactTextString(m) }
func (*Dress) ProtoMessage()    {}
func (*Dress) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{2}
}
func (m *Dress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dress.Merge(m, src)
}
func (m *Dress) XXX_Size() int {
	return m.Size()
}
func (m *Dress) XXX_DiscardUnknown() {
	xxx_messageInfo_Dress.DiscardUnknown(m)
}

var xxx_messageInfo_Dress proto.InternalMessageInfo

func (m *Dress) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Dress) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Dress) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Dress) GetPos() int64 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *Dress) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Dress) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Dress) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *Dress) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type UserDress struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	DressId              int64                       `protobuf:"varint,3,opt,name=dress_id,json=dressId,proto3" json:"dress_id"`
	State                int32                       `protobuf:"varint,4,opt,name=state,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,6,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserDress) Reset()         { *m = UserDress{} }
func (m *UserDress) String() string { return proto.CompactTextString(m) }
func (*UserDress) ProtoMessage()    {}
func (*UserDress) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{3}
}
func (m *UserDress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDress.Merge(m, src)
}
func (m *UserDress) XXX_Size() int {
	return m.Size()
}
func (m *UserDress) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDress.DiscardUnknown(m)
}

var xxx_messageInfo_UserDress proto.InternalMessageInfo

func (m *UserDress) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserDress) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserDress) GetDressId() int64 {
	if m != nil {
		return m.DressId
	}
	return 0
}

func (m *UserDress) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *UserDress) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *UserDress) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type AwardPackage struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Intro                string                      `protobuf:"bytes,3,opt,name=intro,proto3" json:"intro"`
	Price                int64                       `protobuf:"varint,4,opt,name=price,proto3" json:"price"`
	TypeId               int64                       `protobuf:"varint,5,opt,name=type_id,json=typeId,proto3" json:"type_id"`
	AwardIds             []int64                     `protobuf:"varint,6,rep,packed,name=award_ids,json=awardIds,proto3" json:"-"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Bid                  int64                       `protobuf:"varint,9,opt,name=bid,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AwardPackage) Reset()         { *m = AwardPackage{} }
func (m *AwardPackage) String() string { return proto.CompactTextString(m) }
func (*AwardPackage) ProtoMessage()    {}
func (*AwardPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{4}
}
func (m *AwardPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwardPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AwardPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AwardPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwardPackage.Merge(m, src)
}
func (m *AwardPackage) XXX_Size() int {
	return m.Size()
}
func (m *AwardPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_AwardPackage.DiscardUnknown(m)
}

var xxx_messageInfo_AwardPackage proto.InternalMessageInfo

func (m *AwardPackage) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AwardPackage) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AwardPackage) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *AwardPackage) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *AwardPackage) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *AwardPackage) GetAwardIds() []int64 {
	if m != nil {
		return m.AwardIds
	}
	return nil
}

func (m *AwardPackage) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *AwardPackage) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *AwardPackage) GetBid() int64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type Award struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Title                string                      `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Intro                string                      `protobuf:"bytes,3,opt,name=intro,proto3" json:"intro"`
	Image                string                      `protobuf:"bytes,4,opt,name=image,proto3" json:"image"`
	TypeId               int32                       `protobuf:"varint,5,opt,name=type_id,json=typeId,proto3" json:"type_id"`
	Num                  int64                       `protobuf:"varint,6,opt,name=num,proto3" json:"num"`
	Token                string                      `protobuf:"bytes,7,opt,name=token,proto3" json:"-"`
	Expire               int64                       `protobuf:"varint,8,opt,name=expire,proto3" json:"-"`
	Ctime                go_common_library_time.Time `protobuf:"varint,9,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,10,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Award) Reset()         { *m = Award{} }
func (m *Award) String() string { return proto.CompactTextString(m) }
func (*Award) ProtoMessage()    {}
func (*Award) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{5}
}
func (m *Award) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Award) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Award.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Award) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Award.Merge(m, src)
}
func (m *Award) XXX_Size() int {
	return m.Size()
}
func (m *Award) XXX_DiscardUnknown() {
	xxx_messageInfo_Award.DiscardUnknown(m)
}

var xxx_messageInfo_Award proto.InternalMessageInfo

func (m *Award) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Award) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Award) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *Award) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Award) GetTypeId() int32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Award) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Award) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Award) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Award) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Award) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func init() {
	proto.RegisterType((*Piece)(nil), "activity.service.Piece")
	proto.RegisterType((*Print)(nil), "activity.service.Print")
	proto.RegisterType((*Dress)(nil), "activity.service.Dress")
	proto.RegisterType((*UserDress)(nil), "activity.service.UserDress")
	proto.RegisterType((*AwardPackage)(nil), "activity.service.AwardPackage")
	proto.RegisterType((*Award)(nil), "activity.service.Award")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xfe, 0x6d, 0xd7, 0x76, 0xbc, 0xad, 0x7e, 0x21, 0x1f, 0xc0, 0xa5, 0x22, 0x8e, 0x22, 0x04,
	0xb9, 0x24, 0x39, 0x70, 0x47, 0xa2, 0xca, 0x25, 0xb7, 0x6a, 0x45, 0x2f, 0x5c, 0x2a, 0xc7, 0x5e,
	0xc2, 0x12, 0xaf, 0xd7, 0x5a, 0xaf, 0x5b, 0xf2, 0x06, 0x3c, 0x02, 0x2f, 0x83, 0xb8, 0x72, 0xe4,
	0x09, 0xac, 0xaa, 0xdc, 0x2c, 0x9e, 0x80, 0x0b, 0x68, 0x67, 0x37, 0xb8, 0x02, 0x8a, 0x50, 0xa2,
	0x8a, 0xcb, 0xce, 0xec, 0xb7, 0x33, 0x3b, 0x99, 0x6f, 0x66, 0xd6, 0x41, 0xfb, 0x8c, 0x67, 0x24,
	0x9f, 0x94, 0x82, 0x4b, 0x1e, 0xde, 0x49, 0x52, 0x49, 0xcf, 0xa9, 0x5c, 0x4f, 0x2a, 0x22, 0xce,
	0x69, 0x4a, 0xee, 0x8f, 0x97, 0x54, 0xbe, 0xaa, 0x17, 0x93, 0x94, 0xb3, 0xe9, 0x92, 0x2f, 0xf9,
	0x14, 0x0c, 0x17, 0xf5, 0x4b, 0xd8, 0xc1, 0x06, 0x34, 0x7d, 0xc1, 0xf0, 0xd2, 0x42, 0xee, 0x09,
	0x25, 0x29, 0x09, 0xef, 0x22, 0x7b, 0x3e, 0x8b, 0xac, 0x81, 0x35, 0x72, 0x8e, 0xbd, 0xb6, 0x89,
	0x6d, 0x9a, 0x61, 0x7b, 0x3e, 0x0b, 0x63, 0xe4, 0x4a, 0x2a, 0x73, 0x12, 0xd9, 0x03, 0x6b, 0x14,
	0x1c, 0x07, 0x6d, 0x13, 0x6b, 0x00, 0x6b, 0x11, 0xf6, 0x91, 0x2b, 0xf9, 0x8a, 0x14, 0x91, 0x03,
	0x06, 0xbd, 0xb6, 0x89, 0xf7, 0xea, 0x82, 0x4a, 0xac, 0xe1, 0xf0, 0x29, 0x72, 0x53, 0x49, 0x19,
	0x89, 0xf6, 0xe0, 0xee, 0x91, 0xba, 0x00, 0x80, 0xaf, 0x4d, 0x7c, 0xb4, 0xe4, 0xe3, 0x94, 0x33,
	0xc6, 0x8b, 0x69, 0x4e, 0x17, 0x22, 0x11, 0xeb, 0xa9, 0x3a, 0x99, 0x3c, 0xa7, 0x8c, 0x60, 0x6d,
	0xa5, 0xfc, 0x19, 0xf8, 0xbb, 0x9d, 0x3f, 0xfb, 0x2b, 0x7f, 0xb0, 0x1a, 0xbe, 0x77, 0x90, 0x7b,
	0x22, 0x68, 0x21, 0xb7, 0x4f, 0x31, 0x46, 0x2e, 0x65, 0xc9, 0x92, 0x98, 0x14, 0xc1, 0x00, 0x00,
	0xac, 0x45, 0xf8, 0x18, 0xf5, 0x4a, 0xc5, 0xe2, 0x19, 0xcd, 0x4c, 0x9a, 0x07, 0x6d, 0x13, 0xff,
	0xc0, 0xb0, 0x0f, 0xda, 0x3c, 0x53, 0x86, 0xaf, 0x6b, 0x56, 0x9e, 0xd5, 0x22, 0x87, 0x7c, 0x02,
	0x6d, 0xb8, 0xc1, 0xb0, 0xaf, 0xb4, 0x53, 0x91, 0xab, 0x90, 0x39, 0x39, 0x27, 0x79, 0xe4, 0x0d,
	0xac, 0x91, 0xab, 0x43, 0x02, 0x80, 0xb5, 0x08, 0xc7, 0x08, 0x95, 0x49, 0xba, 0x4a, 0x96, 0x10,
	0xd4, 0x87, 0xa0, 0xff, 0xb7, 0x4d, 0x7c, 0x0d, 0xc5, 0x81, 0xd1, 0xe7, 0x19, 0xa4, 0x50, 0x48,
	0xc1, 0xa3, 0xde, 0xb5, 0x14, 0x14, 0x80, 0xb5, 0xe8, 0xca, 0x14, 0xec, 0x58, 0x26, 0xb4, 0x55,
	0x99, 0xc2, 0x7b, 0xc8, 0x59, 0xd0, 0x2c, 0xda, 0x07, 0x6f, 0xb7, 0x6d, 0x62, 0x6b, 0x8c, 0x15,
	0x32, 0xfc, 0x60, 0x23, 0x77, 0x26, 0x48, 0x55, 0xdd, 0x62, 0xfd, 0x0e, 0x91, 0x53, 0xf2, 0xca,
	0x94, 0xce, 0x6f, 0x9b, 0x58, 0x6d, 0xb1, 0x5a, 0xd4, 0xd1, 0x8a, 0xac, 0x4d, 0xb1, 0xe0, 0x68,
	0x45, 0xd6, 0x58, 0x2d, 0x1d, 0x65, 0xde, 0x8e, 0x94, 0xf9, 0xdb, 0x51, 0xf6, 0x08, 0xf9, 0x4b,
	0xc1, 0xeb, 0x72, 0x3e, 0x83, 0xaa, 0x9a, 0xa6, 0x03, 0x08, 0x9a, 0xce, 0x1c, 0x0e, 0xdf, 0xda,
	0x28, 0x38, 0xad, 0x88, 0xf8, 0x33, 0x8b, 0x87, 0xc8, 0x61, 0x34, 0x03, 0x0e, 0x0d, 0x07, 0x8c,
	0x66, 0x58, 0x2d, 0xaa, 0x6b, 0x33, 0xe5, 0xab, 0x3a, 0xcd, 0xe9, 0x22, 0x6d, 0x30, 0xec, 0x83,
	0xa6, 0xbb, 0xac, 0x92, 0x89, 0xd4, 0xb3, 0x6e, 0xba, 0x16, 0x00, 0xac, 0x45, 0x47, 0x99, 0xbb,
	0x23, 0x65, 0xde, 0x76, 0x8f, 0xc1, 0x17, 0x1b, 0x1d, 0x3c, 0xbb, 0x48, 0x44, 0x76, 0xa2, 0x27,
	0x63, 0xb7, 0x9e, 0x82, 0x81, 0x72, 0x6e, 0x18, 0xa8, 0x18, 0xb9, 0xa5, 0xa0, 0xe9, 0xe6, 0xdd,
	0x03, 0x03, 0x00, 0xb0, 0x16, 0xe1, 0x43, 0xe4, 0xcb, 0x75, 0x09, 0xe3, 0xab, 0xd9, 0xd8, 0x6f,
	0x9b, 0x78, 0x03, 0x61, 0x4f, 0x29, 0xf3, 0x2c, 0x1c, 0xa2, 0x20, 0x51, 0x3f, 0xf8, 0x8c, 0x66,
	0x55, 0xe4, 0x0d, 0x9c, 0x6e, 0x3a, 0x7a, 0x80, 0xcf, 0xb3, 0xaa, 0x63, 0xd5, 0xdf, 0x91, 0xd5,
	0xde, 0x4e, 0xb3, 0x1b, 0xfc, 0x32, 0xbb, 0xdf, 0x6c, 0xe4, 0x02, 0xdd, 0xb7, 0xcb, 0xb3, 0x1e,
	0xee, 0xbd, 0x1b, 0x86, 0xfb, 0x27, 0x9e, 0xdd, 0xdf, 0xf3, 0x7c, 0x88, 0x9c, 0xa2, 0x66, 0xa6,
	0xaf, 0xa0, 0xfd, 0x8b, 0x9a, 0x61, 0xb5, 0x84, 0x47, 0x9b, 0x2f, 0x9c, 0x0f, 0x11, 0x4c, 0x82,
	0xe6, 0xf3, 0xf6, 0x00, 0x79, 0xe4, 0x4d, 0x49, 0xc5, 0x86, 0x3c, 0x73, 0x6a, 0xc0, 0x7f, 0xfd,
	0xac, 0x1e, 0x1f, 0x7d, 0xbc, 0xea, 0x5b, 0x9f, 0xae, 0xfa, 0xd6, 0xe5, 0x55, 0xdf, 0x7a, 0xf7,
	0xb9, 0xff, 0xdf, 0x8b, 0x60, 0x71, 0x51, 0xf1, 0x22, 0xa7, 0x05, 0x59, 0x78, 0xf0, 0x27, 0xe0,
	0xc9, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x3c, 0xc5, 0x5b, 0x54, 0x08, 0x00, 0x00,
}

func (m *Piece) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Piece) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Piece) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x28
	}
	if m.Ctime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Print) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Print) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Print) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bid != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Bid))
		i--
		dAtA[i] = 0x58
	}
	if m.Mtime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x42
	}
	if m.PackageId != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.PackageId))
		i--
		dAtA[i] = 0x38
	}
	if m.Level != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x30
	}
	if len(m.JumpUrl) > 0 {
		i -= len(m.JumpUrl)
		copy(dAtA[i:], m.JumpUrl)
		i = encodeVarintModel(dAtA, i, uint64(len(m.JumpUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PieceId != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.PieceId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x40
	}
	if m.Mtime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x38
	}
	if m.Ctime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Pos != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Pos))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserDress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x30
	}
	if m.Ctime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.DressId != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.DressId))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AwardPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwardPackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwardPackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Bid != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Bid))
		i--
		dAtA[i] = 0x48
	}
	if m.Mtime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x40
	}
	if m.Ctime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AwardIds) > 0 {
		dAtA2 := make([]byte, len(m.AwardIds)*10)
		var j1 int
		for _, num1 := range m.AwardIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintModel(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.TypeId != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.TypeId))
		i--
		dAtA[i] = 0x28
	}
	if m.Price != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Award) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Award) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Award) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if m.Expire != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Num != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x30
	}
	if m.TypeId != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.TypeId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	offset -= sovModel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Piece) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Print) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.PieceId != 0 {
		n += 1 + sovModel(uint64(m.PieceId))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovModel(uint64(m.Level))
	}
	if m.PackageId != 0 {
		n += 1 + sovModel(uint64(m.PackageId))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	if m.Bid != 0 {
		n += 1 + sovModel(uint64(m.Bid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Dress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Pos != 0 {
		n += 1 + sovModel(uint64(m.Pos))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	if m.GroupID != 0 {
		n += 1 + sovModel(uint64(m.GroupID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserDress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	if m.DressId != 0 {
		n += 1 + sovModel(uint64(m.DressId))
	}
	if m.State != 0 {
		n += 1 + sovModel(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AwardPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovModel(uint64(m.Price))
	}
	if m.TypeId != 0 {
		n += 1 + sovModel(uint64(m.TypeId))
	}
	if len(m.AwardIds) > 0 {
		l = 0
		for _, e := range m.AwardIds {
			l += sovModel(uint64(e))
		}
		n += 1 + sovModel(uint64(l)) + l
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	if m.Bid != 0 {
		n += 1 + sovModel(uint64(m.Bid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Award) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.TypeId != 0 {
		n += 1 + sovModel(uint64(m.TypeId))
	}
	if m.Num != 0 {
		n += 1 + sovModel(uint64(m.Num))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Expire != 0 {
		n += 1 + sovModel(uint64(m.Expire))
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Piece) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Piece: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Piece: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Print) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Print: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Print: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PieceId", wireType)
			}
			m.PieceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PieceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageId", wireType)
			}
			m.PackageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DressId", wireType)
			}
			m.DressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DressId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwardPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwardPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwardPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			m.TypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AwardIds = append(m.AwardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AwardIds) == 0 {
					m.AwardIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AwardIds = append(m.AwardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardIds", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Award) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Award: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Award: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			m.TypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= go_common_library_time.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModel = fmt.Errorf("proto: unexpected end of group")
)
