// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/playurl/service/api/v2/api.proto

package v2

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OnlineBusiness int32

const (
	OnlineBusiness_OnlineUnknown OnlineBusiness = 0
	OnlineBusiness_OnlineUGC     OnlineBusiness = 1
	OnlineBusiness_OnlineOGV     OnlineBusiness = 2
)

var OnlineBusiness_name = map[int32]string{
	0: "OnlineUnknown",
	1: "OnlineUGC",
	2: "OnlineOGV",
}

var OnlineBusiness_value = map[string]int32{
	"OnlineUnknown": 0,
	"OnlineUGC":     1,
	"OnlineOGV":     2,
}

func (x OnlineBusiness) String() string {
	return proto.EnumName(OnlineBusiness_name, int32(x))
}

func (OnlineBusiness) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{0}
}

type Group int32

const (
	Group_UnknownGroup Group = 0
	Group_A            Group = 1
	Group_B            Group = 2
	Group_C            Group = 3
)

var Group_name = map[int32]string{
	0: "UnknownGroup",
	1: "A",
	2: "B",
	3: "C",
}

var Group_value = map[string]int32{
	"UnknownGroup": 0,
	"A":            1,
	"B":            2,
	"C":            3,
}

func (x Group) String() string {
	return proto.EnumName(Group_name, int32(x))
}

func (Group) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{1}
}

type ConfType int32

const (
	// default
	ConfType_NoType ConfType = 0
	//镜像反转
	ConfType_FLIPCONF ConfType = 1
	//视频投屏
	ConfType_CASTCONF ConfType = 2
	//反馈
	ConfType_FEEDBACK ConfType = 3
	//字幕
	ConfType_SUBTITLE ConfType = 4
	//播放速度
	ConfType_PLAYBACKRATE ConfType = 5
	//定时停止播放
	ConfType_TIMEUP ConfType = 6
	//播放方式
	ConfType_PLAYBACKMODE ConfType = 7
	//画面尺寸
	ConfType_SCALEMODE ConfType = 8
	//后台播放
	ConfType_BACKGROUNDPLAY ConfType = 9
	//顶
	ConfType_LIKE ConfType = 10
	//踩
	ConfType_DISLIKE ConfType = 11
	//投币
	ConfType_COIN ConfType = 12
	//充电
	ConfType_ELEC ConfType = 13
	//分享
	ConfType_SHARE ConfType = 14
	//截图/gif
	ConfType_SCREENSHOT ConfType = 15
	//锁屏
	ConfType_LOCKSCREEN ConfType = 16
	//相关推荐
	ConfType_RECOMMEND ConfType = 17
	//倍速
	ConfType_PLAYBACKSPEED ConfType = 18
	//清晰度
	ConfType_DEFINITION ConfType = 19
	//选集
	ConfType_SELECTIONS ConfType = 20
	//下一集
	ConfType_NEXT ConfType = 21
	//编辑弹幕
	ConfType_EDITDM ConfType = 22
	//小窗
	ConfType_SMALLWINDOW ConfType = 23
	//播放震动
	ConfType_SHAKE ConfType = 24
	//外层面板弹幕设置（实验组1）
	ConfType_OUTERDM ConfType = 25
	//三点内弹幕设置（实验组2）
	ConfType_INNERDM ConfType = 26
	//全景
	ConfType_PANORAMA ConfType = 27
	//杜比
	ConfType_DOLBY ConfType = 28
	//滤镜
	ConfType_COLORFILTER ConfType = 29
	//无损音频
	ConfType_LOSSLESS ConfType = 30
)

var ConfType_name = map[int32]string{
	0:  "NoType",
	1:  "FLIPCONF",
	2:  "CASTCONF",
	3:  "FEEDBACK",
	4:  "SUBTITLE",
	5:  "PLAYBACKRATE",
	6:  "TIMEUP",
	7:  "PLAYBACKMODE",
	8:  "SCALEMODE",
	9:  "BACKGROUNDPLAY",
	10: "LIKE",
	11: "DISLIKE",
	12: "COIN",
	13: "ELEC",
	14: "SHARE",
	15: "SCREENSHOT",
	16: "LOCKSCREEN",
	17: "RECOMMEND",
	18: "PLAYBACKSPEED",
	19: "DEFINITION",
	20: "SELECTIONS",
	21: "NEXT",
	22: "EDITDM",
	23: "SMALLWINDOW",
	24: "SHAKE",
	25: "OUTERDM",
	26: "INNERDM",
	27: "PANORAMA",
	28: "DOLBY",
	29: "COLORFILTER",
	30: "LOSSLESS",
}

var ConfType_value = map[string]int32{
	"NoType":         0,
	"FLIPCONF":       1,
	"CASTCONF":       2,
	"FEEDBACK":       3,
	"SUBTITLE":       4,
	"PLAYBACKRATE":   5,
	"TIMEUP":         6,
	"PLAYBACKMODE":   7,
	"SCALEMODE":      8,
	"BACKGROUNDPLAY": 9,
	"LIKE":           10,
	"DISLIKE":        11,
	"COIN":           12,
	"ELEC":           13,
	"SHARE":          14,
	"SCREENSHOT":     15,
	"LOCKSCREEN":     16,
	"RECOMMEND":      17,
	"PLAYBACKSPEED":  18,
	"DEFINITION":     19,
	"SELECTIONS":     20,
	"NEXT":           21,
	"EDITDM":         22,
	"SMALLWINDOW":    23,
	"SHAKE":          24,
	"OUTERDM":        25,
	"INNERDM":        26,
	"PANORAMA":       27,
	"DOLBY":          28,
	"COLORFILTER":    29,
	"LOSSLESS":       30,
}

func (x ConfType) String() string {
	return proto.EnumName(ConfType_name, int32(x))
}

func (ConfType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{2}
}

type NetworkType int32

const (
	NetworkType_NT_UNKNOWN NetworkType = 0
	NetworkType_WIFI       NetworkType = 1
	NetworkType_CELLULAR   NetworkType = 2
	NetworkType_OFFLINE    NetworkType = 3
	NetworkType_OTHERNET   NetworkType = 4
	NetworkType_ETHERNET   NetworkType = 5
)

var NetworkType_name = map[int32]string{
	0: "NT_UNKNOWN",
	1: "WIFI",
	2: "CELLULAR",
	3: "OFFLINE",
	4: "OTHERNET",
	5: "ETHERNET",
}

var NetworkType_value = map[string]int32{
	"NT_UNKNOWN": 0,
	"WIFI":       1,
	"CELLULAR":   2,
	"OFFLINE":    3,
	"OTHERNET":   4,
	"ETHERNET":   5,
}

func (x NetworkType) String() string {
	return proto.EnumName(NetworkType_name, int32(x))
}

func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{3}
}

type TFType int32

const (
	TFType_TF_UNKNOWN TFType = 0
	TFType_U_CARD     TFType = 1
	TFType_U_PKG      TFType = 2
	TFType_C_CARD     TFType = 3
	TFType_C_PKG      TFType = 4
	TFType_T_CARD     TFType = 5
	TFType_T_PKG      TFType = 6
)

var TFType_name = map[int32]string{
	0: "TF_UNKNOWN",
	1: "U_CARD",
	2: "U_PKG",
	3: "C_CARD",
	4: "C_PKG",
	5: "T_CARD",
	6: "T_PKG",
}

var TFType_value = map[string]int32{
	"TF_UNKNOWN": 0,
	"U_CARD":     1,
	"U_PKG":      2,
	"C_CARD":     3,
	"C_PKG":      4,
	"T_CARD":     5,
	"T_PKG":      6,
}

func (x TFType) String() string {
	return proto.EnumName(TFType_name, int32(x))
}

func (TFType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{4}
}

type BusinessSource int32

const (
	// 未知类型
	BusinessSource_UNKNOWN BusinessSource = 0
	// story业务
	BusinessSource_STORY BusinessSource = 1
)

var BusinessSource_name = map[int32]string{
	0: "UNKNOWN",
	1: "STORY",
}

var BusinessSource_value = map[string]int32{
	"UNKNOWN": 0,
	"STORY":   1,
}

func (x BusinessSource) String() string {
	return proto.EnumName(BusinessSource_name, int32(x))
}

func (BusinessSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{5}
}

// ResponseType
type ResponseType int32

const (
	ResponseType_NONE ResponseType = 0
	//flv
	ResponseType_FLV ResponseType = 1
	//mp4
	ResponseType_MP4 ResponseType = 2
	//hls
	ResponseType_HLS ResponseType = 3
)

var ResponseType_name = map[int32]string{
	0: "NONE",
	1: "FLV",
	2: "MP4",
	3: "HLS",
}

var ResponseType_value = map[string]int32{
	"NONE": 0,
	"FLV":  1,
	"MP4":  2,
	"HLS":  3,
}

func (x ResponseType) String() string {
	return proto.EnumName(ResponseType_name, int32(x))
}

func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{6}
}

type Business int32

const (
	//ugc
	Business_UGC Business = 0
	//pgc
	Business_PGC Business = 1
	//pugv
	Business_PUGV Business = 2
)

var Business_name = map[int32]string{
	0: "UGC",
	1: "PGC",
	2: "PUGV",
}

var Business_value = map[string]int32{
	"UGC":  0,
	"PGC":  1,
	"PUGV": 2,
}

func (x Business) String() string {
	return proto.EnumName(Business_name, int32(x))
}

func (Business) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{7}
}

type QnCategory int32

const (
	QnCategory_MixType QnCategory = 0
	QnCategory_Video   QnCategory = 1
	QnCategory_Audio   QnCategory = 2
)

var QnCategory_name = map[int32]string{
	0: "MixType",
	1: "Video",
	2: "Audio",
}

var QnCategory_value = map[string]int32{
	"MixType": 0,
	"Video":   1,
	"Audio":   2,
}

func (x QnCategory) String() string {
	return proto.EnumName(QnCategory_name, int32(x))
}

func (QnCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{8}
}

type RequestType int32

const (
	RequestType_AIRPLAY RequestType = 0
	RequestType_PIP     RequestType = 1
)

var RequestType_name = map[int32]string{
	0: "AIRPLAY",
	1: "PIP",
}

var RequestType_value = map[string]int32{
	"AIRPLAY": 0,
	"PIP":     1,
}

func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}

func (RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{9}
}

type DolbyItem_Type int32

const (
	// NONE
	DolbyItem_NONE DolbyItem_Type = 0
	// 普通杜比音效
	DolbyItem_COMMON DolbyItem_Type = 1
	// 全景杜比音效
	DolbyItem_ATMOS DolbyItem_Type = 2
)

var DolbyItem_Type_name = map[int32]string{
	0: "NONE",
	1: "COMMON",
	2: "ATMOS",
}

var DolbyItem_Type_value = map[string]int32{
	"NONE":   0,
	"COMMON": 1,
	"ATMOS":  2,
}

func (x DolbyItem_Type) String() string {
	return proto.EnumName(DolbyItem_Type_name, int32(x))
}

func (DolbyItem_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{32, 0}
}

type PlayOnlineReq struct {
	// aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty"`
	// cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// business
	Business             OnlineBusiness `protobuf:"varint,3,opt,name=business,proto3,enum=playurl.service.v2.OnlineBusiness" json:"business,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PlayOnlineReq) Reset()         { *m = PlayOnlineReq{} }
func (m *PlayOnlineReq) String() string { return proto.CompactTextString(m) }
func (*PlayOnlineReq) ProtoMessage()    {}
func (*PlayOnlineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{0}
}
func (m *PlayOnlineReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayOnlineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayOnlineReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayOnlineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayOnlineReq.Merge(m, src)
}
func (m *PlayOnlineReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayOnlineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayOnlineReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayOnlineReq proto.InternalMessageInfo

func (m *PlayOnlineReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PlayOnlineReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *PlayOnlineReq) GetBusiness() OnlineBusiness {
	if m != nil {
		return m.Business
	}
	return OnlineBusiness_OnlineUnknown
}

type PlayOnlineReply struct {
	//key:web,total
	//value:count
	Count map[string]int64 `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	//是否不展示在线人数
	IsHide               bool     `protobuf:"varint,2,opt,name=is_hide,json=isHide,proto3" json:"is_hide,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayOnlineReply) Reset()         { *m = PlayOnlineReply{} }
func (m *PlayOnlineReply) String() string { return proto.CompactTextString(m) }
func (*PlayOnlineReply) ProtoMessage()    {}
func (*PlayOnlineReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{1}
}
func (m *PlayOnlineReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayOnlineReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayOnlineReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayOnlineReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayOnlineReply.Merge(m, src)
}
func (m *PlayOnlineReply) XXX_Size() int {
	return m.Size()
}
func (m *PlayOnlineReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayOnlineReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayOnlineReply proto.InternalMessageInfo

func (m *PlayOnlineReply) GetCount() map[string]int64 {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *PlayOnlineReply) GetIsHide() bool {
	if m != nil {
		return m.IsHide
	}
	return false
}

// PlayConfReq 控制面板信息req
type PlayConfReq struct {
	//客户端设备唯一标识
	Buvid string `protobuf:"bytes,1,opt,name=buvid,proto3" json:"buvid,omitempty" validate:"required"`
	//登陆用户mid
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	//平台
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	//build版本号
	Build int32 `protobuf:"varint,4,opt,name=build,proto3" json:"build,omitempty"`
	//app: 手机品牌
	Brand string `protobuf:"bytes,5,opt,name=brand,proto3" json:"brand,omitempty"`
	// app: 手机型号
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	// 1:ugc 2:ogv
	FMode int32 `protobuf:"varint,7,opt,name=fMode,proto3" json:"fMode,omitempty"`
	// 设备指纹信息
	FPLocal              string   `protobuf:"bytes,8,opt,name=fPLocal,proto3" json:"fPLocal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayConfReq) Reset()         { *m = PlayConfReq{} }
func (m *PlayConfReq) String() string { return proto.CompactTextString(m) }
func (*PlayConfReq) ProtoMessage()    {}
func (*PlayConfReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{2}
}
func (m *PlayConfReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayConfReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayConfReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayConfReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayConfReq.Merge(m, src)
}
func (m *PlayConfReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayConfReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayConfReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayConfReq proto.InternalMessageInfo

func (m *PlayConfReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *PlayConfReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PlayConfReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *PlayConfReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *PlayConfReq) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *PlayConfReq) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *PlayConfReq) GetFMode() int32 {
	if m != nil {
		return m.FMode
	}
	return 0
}

func (m *PlayConfReq) GetFPLocal() string {
	if m != nil {
		return m.FPLocal
	}
	return ""
}

// PlayConfReply 控制面板信息reply
type PlayConfReply struct {
	//云控配置信息
	PlayConf             *PlayAbilityConf `protobuf:"bytes,1,opt,name=play_conf,json=playConf,proto3" json:"play_conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PlayConfReply) Reset()         { *m = PlayConfReply{} }
func (m *PlayConfReply) String() string { return proto.CompactTextString(m) }
func (*PlayConfReply) ProtoMessage()    {}
func (*PlayConfReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{3}
}
func (m *PlayConfReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayConfReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayConfReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayConfReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayConfReply.Merge(m, src)
}
func (m *PlayConfReply) XXX_Size() int {
	return m.Size()
}
func (m *PlayConfReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayConfReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayConfReply proto.InternalMessageInfo

func (m *PlayConfReply) GetPlayConf() *PlayAbilityConf {
	if m != nil {
		return m.PlayConf
	}
	return nil
}

// 编辑控制面板
type PlayConfEditReq struct {
	//面板控制信息
	PlayConf []*PlayConfState `protobuf:"bytes,1,rep,name=play_conf,json=playConf,proto3" json:"play_conf,omitempty" validate:"gt=0,required"`
	//客户端设备唯一标识
	Buvid string `protobuf:"bytes,2,opt,name=buvid,proto3" json:"buvid,omitempty" validate:"required"`
	//平台
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	//build版本号
	Build int32 `protobuf:"varint,4,opt,name=build,proto3" json:"build,omitempty"`
	//app: 手机品牌
	Brand string `protobuf:"bytes,5,opt,name=brand,proto3" json:"brand,omitempty"`
	//app: 手机型号
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	//1:ugc 2:ogv
	FMode int32 `protobuf:"varint,7,opt,name=fMode,proto3" json:"fMode,omitempty"`
	// 设备指纹
	FpLocal              string   `protobuf:"bytes,8,opt,name=fp_local,json=fpLocal,proto3" json:"fp_local,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayConfEditReq) Reset()         { *m = PlayConfEditReq{} }
func (m *PlayConfEditReq) String() string { return proto.CompactTextString(m) }
func (*PlayConfEditReq) ProtoMessage()    {}
func (*PlayConfEditReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{4}
}
func (m *PlayConfEditReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayConfEditReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayConfEditReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayConfEditReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayConfEditReq.Merge(m, src)
}
func (m *PlayConfEditReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayConfEditReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayConfEditReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayConfEditReq proto.InternalMessageInfo

func (m *PlayConfEditReq) GetPlayConf() []*PlayConfState {
	if m != nil {
		return m.PlayConf
	}
	return nil
}

func (m *PlayConfEditReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *PlayConfEditReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *PlayConfEditReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *PlayConfEditReq) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *PlayConfEditReq) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *PlayConfEditReq) GetFMode() int32 {
	if m != nil {
		return m.FMode
	}
	return 0
}

func (m *PlayConfEditReq) GetFpLocal() string {
	if m != nil {
		return m.FpLocal
	}
	return ""
}

// 空结构体
type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{5}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

// 云控状态信息
type PlayConfState struct {
	//云控类型
	ConfType ConfType `protobuf:"varint,1,opt,name=conf_type,json=confType,proto3,enum=playurl.service.v2.ConfType" json:"conf_type,omitempty"`
	//true:展示 false:隐藏
	Show bool `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	//云控详情
	FieldValue *FieldValue `protobuf:"bytes,3,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	//播放配置的值
	ConfValue            *ConfValue `protobuf:"bytes,4,opt,name=conf_value,json=confValue,proto3" json:"conf_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PlayConfState) Reset()         { *m = PlayConfState{} }
func (m *PlayConfState) String() string { return proto.CompactTextString(m) }
func (*PlayConfState) ProtoMessage()    {}
func (*PlayConfState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{6}
}
func (m *PlayConfState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayConfState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayConfState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayConfState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayConfState.Merge(m, src)
}
func (m *PlayConfState) XXX_Size() int {
	return m.Size()
}
func (m *PlayConfState) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayConfState.DiscardUnknown(m)
}

var xxx_messageInfo_PlayConfState proto.InternalMessageInfo

func (m *PlayConfState) GetConfType() ConfType {
	if m != nil {
		return m.ConfType
	}
	return ConfType_NoType
}

func (m *PlayConfState) GetShow() bool {
	if m != nil {
		return m.Show
	}
	return false
}

func (m *PlayConfState) GetFieldValue() *FieldValue {
	if m != nil {
		return m.FieldValue
	}
	return nil
}

func (m *PlayConfState) GetConfValue() *ConfValue {
	if m != nil {
		return m.ConfValue
	}
	return nil
}

// 云控详情
type FieldValue struct {
	// Types that are valid to be assigned to Value:
	//	*FieldValue_Switch
	Value                isFieldValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FieldValue) Reset()         { *m = FieldValue{} }
func (m *FieldValue) String() string { return proto.CompactTextString(m) }
func (*FieldValue) ProtoMessage()    {}
func (*FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{7}
}
func (m *FieldValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValue.Merge(m, src)
}
func (m *FieldValue) XXX_Size() int {
	return m.Size()
}
func (m *FieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValue proto.InternalMessageInfo

type isFieldValue_Value interface {
	isFieldValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldValue_Switch struct {
	Switch bool `protobuf:"varint,1,opt,name=switch,proto3,oneof" json:"switch,omitempty"`
}

func (*FieldValue_Switch) isFieldValue_Value() {}

func (m *FieldValue) GetValue() isFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldValue) GetSwitch() bool {
	if x, ok := m.GetValue().(*FieldValue_Switch); ok {
		return x.Switch
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldValue_Switch)(nil),
	}
}

// PlayViewReply 播放页返回结果
type PlayViewReply struct {
	//播放地址列表
	PlayUrl *PlayUrlInfo `protobuf:"bytes,1,opt,name=play_url,json=playUrl,proto3" json:"play_url,omitempty"`
	//云控配置信息-用户维度
	PlayConf *PlayAbilityConf `protobuf:"bytes,2,opt,name=play_conf,json=playConf,proto3" json:"play_conf,omitempty"`
	// Chronos灰度管理
	Chronos *Chronos `protobuf:"bytes,3,opt,name=chronos,proto3" json:"chronos,omitempty"`
	//云控是否可用配置-稿件维度
	PlayArc *PlayArcConf `protobuf:"bytes,4,opt,name=play_arc,json=playArc,proto3" json:"play_arc,omitempty"`
	//播放事件
	Event *Event `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	//ab实验相关的逻辑
	Ab *AB `protobuf:"bytes,6,opt,name=ab,proto3" json:"ab,omitempty"`
	//音量均衡信息
	Volume *VolumeInfo `protobuf:"bytes,7,opt,name=volume,proto3" json:"volume,omitempty"`
	//限免和副标题
	VipConf              *VipConf `protobuf:"bytes,8,opt,name=vip_conf,json=vipConf,proto3" json:"vip_conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayViewReply) Reset()         { *m = PlayViewReply{} }
func (m *PlayViewReply) String() string { return proto.CompactTextString(m) }
func (*PlayViewReply) ProtoMessage()    {}
func (*PlayViewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{8}
}
func (m *PlayViewReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayViewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayViewReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayViewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayViewReply.Merge(m, src)
}
func (m *PlayViewReply) XXX_Size() int {
	return m.Size()
}
func (m *PlayViewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayViewReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayViewReply proto.InternalMessageInfo

func (m *PlayViewReply) GetPlayUrl() *PlayUrlInfo {
	if m != nil {
		return m.PlayUrl
	}
	return nil
}

func (m *PlayViewReply) GetPlayConf() *PlayAbilityConf {
	if m != nil {
		return m.PlayConf
	}
	return nil
}

func (m *PlayViewReply) GetChronos() *Chronos {
	if m != nil {
		return m.Chronos
	}
	return nil
}

func (m *PlayViewReply) GetPlayArc() *PlayArcConf {
	if m != nil {
		return m.PlayArc
	}
	return nil
}

func (m *PlayViewReply) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *PlayViewReply) GetAb() *AB {
	if m != nil {
		return m.Ab
	}
	return nil
}

func (m *PlayViewReply) GetVolume() *VolumeInfo {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *PlayViewReply) GetVipConf() *VipConf {
	if m != nil {
		return m.VipConf
	}
	return nil
}

type VipConf struct {
	//是否限免 1：限免
	LimitFree int32 `protobuf:"varint,1,opt,name=limit_free,json=limitFree,proto3" json:"limit_free,omitempty"`
	//副标题
	Subtitle             string   `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipConf) Reset()         { *m = VipConf{} }
func (m *VipConf) String() string { return proto.CompactTextString(m) }
func (*VipConf) ProtoMessage()    {}
func (*VipConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{9}
}
func (m *VipConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipConf.Merge(m, src)
}
func (m *VipConf) XXX_Size() int {
	return m.Size()
}
func (m *VipConf) XXX_DiscardUnknown() {
	xxx_messageInfo_VipConf.DiscardUnknown(m)
}

var xxx_messageInfo_VipConf proto.InternalMessageInfo

func (m *VipConf) GetLimitFree() int32 {
	if m != nil {
		return m.LimitFree
	}
	return 0
}

func (m *VipConf) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

// 音量均衡信息
type VolumeInfo struct {
	MeasuredI            float64  `protobuf:"fixed64,1,opt,name=measured_i,json=measuredI,proto3" json:"measured_i,omitempty"`
	MeasuredLra          float64  `protobuf:"fixed64,2,opt,name=measured_lra,json=measuredLra,proto3" json:"measured_lra,omitempty"`
	MeasuredTp           float64  `protobuf:"fixed64,3,opt,name=measured_tp,json=measuredTp,proto3" json:"measured_tp,omitempty"`
	MeasuredThreshold    float64  `protobuf:"fixed64,4,opt,name=measured_threshold,json=measuredThreshold,proto3" json:"measured_threshold,omitempty"`
	TargetOffset         float64  `protobuf:"fixed64,5,opt,name=target_offset,json=targetOffset,proto3" json:"target_offset,omitempty"`
	TargetI              float64  `protobuf:"fixed64,6,opt,name=target_i,json=targetI,proto3" json:"target_i,omitempty"`
	TargetTp             float64  `protobuf:"fixed64,7,opt,name=target_tp,json=targetTp,proto3" json:"target_tp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeInfo) Reset()         { *m = VolumeInfo{} }
func (m *VolumeInfo) String() string { return proto.CompactTextString(m) }
func (*VolumeInfo) ProtoMessage()    {}
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{10}
}
func (m *VolumeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VolumeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VolumeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeInfo.Merge(m, src)
}
func (m *VolumeInfo) XXX_Size() int {
	return m.Size()
}
func (m *VolumeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeInfo proto.InternalMessageInfo

func (m *VolumeInfo) GetMeasuredI() float64 {
	if m != nil {
		return m.MeasuredI
	}
	return 0
}

func (m *VolumeInfo) GetMeasuredLra() float64 {
	if m != nil {
		return m.MeasuredLra
	}
	return 0
}

func (m *VolumeInfo) GetMeasuredTp() float64 {
	if m != nil {
		return m.MeasuredTp
	}
	return 0
}

func (m *VolumeInfo) GetMeasuredThreshold() float64 {
	if m != nil {
		return m.MeasuredThreshold
	}
	return 0
}

func (m *VolumeInfo) GetTargetOffset() float64 {
	if m != nil {
		return m.TargetOffset
	}
	return 0
}

func (m *VolumeInfo) GetTargetI() float64 {
	if m != nil {
		return m.TargetI
	}
	return 0
}

func (m *VolumeInfo) GetTargetTp() float64 {
	if m != nil {
		return m.TargetTp
	}
	return 0
}

type AB struct {
	Glance               *Glance  `protobuf:"bytes,1,opt,name=glance,proto3" json:"glance,omitempty"`
	Group                Group    `protobuf:"varint,2,opt,name=group,proto3,enum=playurl.service.v2.Group" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AB) Reset()         { *m = AB{} }
func (m *AB) String() string { return proto.CompactTextString(m) }
func (*AB) ProtoMessage()    {}
func (*AB) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{11}
}
func (m *AB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AB.Merge(m, src)
}
func (m *AB) XXX_Size() int {
	return m.Size()
}
func (m *AB) XXX_DiscardUnknown() {
	xxx_messageInfo_AB.DiscardUnknown(m)
}

var xxx_messageInfo_AB proto.InternalMessageInfo

func (m *AB) GetGlance() *Glance {
	if m != nil {
		return m.Glance
	}
	return nil
}

func (m *AB) GetGroup() Group {
	if m != nil {
		return m.Group
	}
	return Group_UnknownGroup
}

type Glance struct {
	//能否试看(包括:视频有除杜比外大会员清晰度且时长大于2min,登录用户且非大会员，命中ab实验B，C组)
	CanWatch bool `protobuf:"varint,1,opt,name=can_watch,json=canWatch,proto3" json:"can_watch,omitempty"`
	//试看次数
	Times int64 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	//试看时长
	Duration             int64    `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Glance) Reset()         { *m = Glance{} }
func (m *Glance) String() string { return proto.CompactTextString(m) }
func (*Glance) ProtoMessage()    {}
func (*Glance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{12}
}
func (m *Glance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Glance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Glance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Glance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Glance.Merge(m, src)
}
func (m *Glance) XXX_Size() int {
	return m.Size()
}
func (m *Glance) XXX_DiscardUnknown() {
	xxx_messageInfo_Glance.DiscardUnknown(m)
}

var xxx_messageInfo_Glance proto.InternalMessageInfo

func (m *Glance) GetCanWatch() bool {
	if m != nil {
		return m.CanWatch
	}
	return false
}

func (m *Glance) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *Glance) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Event is
type Event struct {
	//震动事件
	Shake                *Shake   `protobuf:"bytes,1,opt,name=shake,proto3" json:"shake,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{13}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetShake() *Shake {
	if m != nil {
		return m.Shake
	}
	return nil
}

// Shake Event
type Shake struct {
	//震动文件地址
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shake) Reset()         { *m = Shake{} }
func (m *Shake) String() string { return proto.CompactTextString(m) }
func (*Shake) ProtoMessage()    {}
func (*Shake) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{14}
}
func (m *Shake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Shake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shake.Merge(m, src)
}
func (m *Shake) XXX_Size() int {
	return m.Size()
}
func (m *Shake) XXX_DiscardUnknown() {
	xxx_messageInfo_Shake.DiscardUnknown(m)
}

var xxx_messageInfo_Shake proto.InternalMessageInfo

func (m *Shake) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

// Chronos灰度管理
type Chronos struct {
	//唯一标志
	Md5 string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
	//文件地址
	File                 string   `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chronos) Reset()         { *m = Chronos{} }
func (m *Chronos) String() string { return proto.CompactTextString(m) }
func (*Chronos) ProtoMessage()    {}
func (*Chronos) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{15}
}
func (m *Chronos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chronos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chronos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chronos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chronos.Merge(m, src)
}
func (m *Chronos) XXX_Size() int {
	return m.Size()
}
func (m *Chronos) XXX_DiscardUnknown() {
	xxx_messageInfo_Chronos.DiscardUnknown(m)
}

var xxx_messageInfo_Chronos proto.InternalMessageInfo

func (m *Chronos) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *Chronos) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

// PlayUrlInfo .
type PlayUrlInfo struct {
	// 视频云信息
	Playurl *ResponseMsg `protobuf:"bytes,1,opt,name=playurl,proto3" json:"playurl,omitempty"`
	// 透传信息
	ExtInfo *ExtInfo `protobuf:"bytes,2,opt,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty"`
	// play 1:升级提示信息
	IsSteinsUpgrade      int32    `protobuf:"varint,3,opt,name=IsSteinsUpgrade,proto3" json:"IsSteinsUpgrade,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayUrlInfo) Reset()         { *m = PlayUrlInfo{} }
func (m *PlayUrlInfo) String() string { return proto.CompactTextString(m) }
func (*PlayUrlInfo) ProtoMessage()    {}
func (*PlayUrlInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{16}
}
func (m *PlayUrlInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayUrlInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayUrlInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayUrlInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayUrlInfo.Merge(m, src)
}
func (m *PlayUrlInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayUrlInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayUrlInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayUrlInfo proto.InternalMessageInfo

func (m *PlayUrlInfo) GetPlayurl() *ResponseMsg {
	if m != nil {
		return m.Playurl
	}
	return nil
}

func (m *PlayUrlInfo) GetExtInfo() *ExtInfo {
	if m != nil {
		return m.ExtInfo
	}
	return nil
}

func (m *PlayUrlInfo) GetIsSteinsUpgrade() int32 {
	if m != nil {
		return m.IsSteinsUpgrade
	}
	return 0
}

// PlayConf 播放三点配置信息
type PlayAbilityConf struct {
	//后台播放
	BackgroundPlayConf *CloudConf `protobuf:"bytes,1,opt,name=background_play_conf,json=backgroundPlayConf,proto3" json:"background_play_conf,omitempty"`
	//镜像反转
	FlipConf *CloudConf `protobuf:"bytes,2,opt,name=flip_conf,json=flipConf,proto3" json:"flip_conf,omitempty"`
	//返回视频的是否支持投屏
	CastConf *CloudConf `protobuf:"bytes,3,opt,name=cast_conf,json=castConf,proto3" json:"cast_conf,omitempty"`
	//反馈
	FeedbackConf *CloudConf `protobuf:"bytes,4,opt,name=feedback_conf,json=feedbackConf,proto3" json:"feedback_conf,omitempty"`
	//字幕
	SubtitleConf *CloudConf `protobuf:"bytes,5,opt,name=subtitle_conf,json=subtitleConf,proto3" json:"subtitle_conf,omitempty"`
	//播放速度
	PlaybackRateConf *CloudConf `protobuf:"bytes,6,opt,name=playback_rate_conf,json=playbackRateConf,proto3" json:"playback_rate_conf,omitempty"`
	//定时停止播放
	TimeUpConf *CloudConf `protobuf:"bytes,7,opt,name=time_up_conf,json=timeUpConf,proto3" json:"time_up_conf,omitempty"`
	//播放方式
	PlaybackModeConf *CloudConf `protobuf:"bytes,8,opt,name=playback_mode_conf,json=playbackModeConf,proto3" json:"playback_mode_conf,omitempty"`
	//画面尺寸
	ScaleModeConf *CloudConf `protobuf:"bytes,9,opt,name=scale_mode_conf,json=scaleModeConf,proto3" json:"scale_mode_conf,omitempty"`
	//顶
	LikeConf *CloudConf `protobuf:"bytes,10,opt,name=like_conf,json=likeConf,proto3" json:"like_conf,omitempty"`
	//踩
	DislikeConf *CloudConf `protobuf:"bytes,11,opt,name=dislike_conf,json=dislikeConf,proto3" json:"dislike_conf,omitempty"`
	//投币
	CoinConf *CloudConf `protobuf:"bytes,12,opt,name=coin_conf,json=coinConf,proto3" json:"coin_conf,omitempty"`
	//充电
	ElecConf *CloudConf `protobuf:"bytes,13,opt,name=elec_conf,json=elecConf,proto3" json:"elec_conf,omitempty"`
	//分享
	ShareConf *CloudConf `protobuf:"bytes,14,opt,name=share_conf,json=shareConf,proto3" json:"share_conf,omitempty"`
	//截图/gif
	ScreenShotConf *CloudConf `protobuf:"bytes,15,opt,name=screen_shot_conf,json=screenShotConf,proto3" json:"screen_shot_conf,omitempty"`
	//锁屏
	LockScreenConf *CloudConf `protobuf:"bytes,16,opt,name=lock_screen_conf,json=lockScreenConf,proto3" json:"lock_screen_conf,omitempty"`
	//相关推荐
	RecommendConf *CloudConf `protobuf:"bytes,17,opt,name=recommend_conf,json=recommendConf,proto3" json:"recommend_conf,omitempty"`
	//倍速
	PlaybackSpeedConf *CloudConf `protobuf:"bytes,18,opt,name=playback_speed_conf,json=playbackSpeedConf,proto3" json:"playback_speed_conf,omitempty"`
	//清晰度
	DefinitionConf *CloudConf `protobuf:"bytes,19,opt,name=definition_conf,json=definitionConf,proto3" json:"definition_conf,omitempty"`
	//选集
	SelectionsConf *CloudConf `protobuf:"bytes,20,opt,name=selections_conf,json=selectionsConf,proto3" json:"selections_conf,omitempty"`
	//下一集
	NextConf *CloudConf `protobuf:"bytes,21,opt,name=next_conf,json=nextConf,proto3" json:"next_conf,omitempty"`
	//编辑弹幕
	EditDmConf *CloudConf `protobuf:"bytes,22,opt,name=edit_dm_conf,json=editDmConf,proto3" json:"edit_dm_conf,omitempty"`
	//小窗
	SmallWindowConf *CloudConf `protobuf:"bytes,23,opt,name=small_window_conf,json=smallWindowConf,proto3" json:"small_window_conf,omitempty"`
	//播放震动
	ShakeConf *CloudConf `protobuf:"bytes,24,opt,name=shake_conf,json=shakeConf,proto3" json:"shake_conf,omitempty"`
	//外层面板弹幕设置（实验组1）
	OuterDmConf *CloudConf `protobuf:"bytes,25,opt,name=outer_dm_conf,json=outerDmConf,proto3" json:"outer_dm_conf,omitempty"`
	//三点内弹幕设置（实验组2）
	InnerDmConf *CloudConf `protobuf:"bytes,26,opt,name=inner_dm_conf,json=innerDmConf,proto3" json:"inner_dm_conf,omitempty"`
	//全景
	PanoramaConf *CloudConf `protobuf:"bytes,27,opt,name=panorama_conf,json=panoramaConf,proto3" json:"panorama_conf,omitempty"`
	//杜比
	DolbyConf *CloudConf `protobuf:"bytes,28,opt,name=dolby_conf,json=dolbyConf,proto3" json:"dolby_conf,omitempty"`
	//滤镜
	ColorFilterConf *CloudConf `protobuf:"bytes,29,opt,name=color_filter_conf,json=colorFilterConf,proto3" json:"color_filter_conf,omitempty"`
	//无损音频
	LossLessConf         *CloudConf `protobuf:"bytes,30,opt,name=loss_less_conf,json=lossLessConf,proto3" json:"loss_less_conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PlayAbilityConf) Reset()         { *m = PlayAbilityConf{} }
func (m *PlayAbilityConf) String() string { return proto.CompactTextString(m) }
func (*PlayAbilityConf) ProtoMessage()    {}
func (*PlayAbilityConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{17}
}
func (m *PlayAbilityConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayAbilityConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayAbilityConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayAbilityConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayAbilityConf.Merge(m, src)
}
func (m *PlayAbilityConf) XXX_Size() int {
	return m.Size()
}
func (m *PlayAbilityConf) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayAbilityConf.DiscardUnknown(m)
}

var xxx_messageInfo_PlayAbilityConf proto.InternalMessageInfo

func (m *PlayAbilityConf) GetBackgroundPlayConf() *CloudConf {
	if m != nil {
		return m.BackgroundPlayConf
	}
	return nil
}

func (m *PlayAbilityConf) GetFlipConf() *CloudConf {
	if m != nil {
		return m.FlipConf
	}
	return nil
}

func (m *PlayAbilityConf) GetCastConf() *CloudConf {
	if m != nil {
		return m.CastConf
	}
	return nil
}

func (m *PlayAbilityConf) GetFeedbackConf() *CloudConf {
	if m != nil {
		return m.FeedbackConf
	}
	return nil
}

func (m *PlayAbilityConf) GetSubtitleConf() *CloudConf {
	if m != nil {
		return m.SubtitleConf
	}
	return nil
}

func (m *PlayAbilityConf) GetPlaybackRateConf() *CloudConf {
	if m != nil {
		return m.PlaybackRateConf
	}
	return nil
}

func (m *PlayAbilityConf) GetTimeUpConf() *CloudConf {
	if m != nil {
		return m.TimeUpConf
	}
	return nil
}

func (m *PlayAbilityConf) GetPlaybackModeConf() *CloudConf {
	if m != nil {
		return m.PlaybackModeConf
	}
	return nil
}

func (m *PlayAbilityConf) GetScaleModeConf() *CloudConf {
	if m != nil {
		return m.ScaleModeConf
	}
	return nil
}

func (m *PlayAbilityConf) GetLikeConf() *CloudConf {
	if m != nil {
		return m.LikeConf
	}
	return nil
}

func (m *PlayAbilityConf) GetDislikeConf() *CloudConf {
	if m != nil {
		return m.DislikeConf
	}
	return nil
}

func (m *PlayAbilityConf) GetCoinConf() *CloudConf {
	if m != nil {
		return m.CoinConf
	}
	return nil
}

func (m *PlayAbilityConf) GetElecConf() *CloudConf {
	if m != nil {
		return m.ElecConf
	}
	return nil
}

func (m *PlayAbilityConf) GetShareConf() *CloudConf {
	if m != nil {
		return m.ShareConf
	}
	return nil
}

func (m *PlayAbilityConf) GetScreenShotConf() *CloudConf {
	if m != nil {
		return m.ScreenShotConf
	}
	return nil
}

func (m *PlayAbilityConf) GetLockScreenConf() *CloudConf {
	if m != nil {
		return m.LockScreenConf
	}
	return nil
}

func (m *PlayAbilityConf) GetRecommendConf() *CloudConf {
	if m != nil {
		return m.RecommendConf
	}
	return nil
}

func (m *PlayAbilityConf) GetPlaybackSpeedConf() *CloudConf {
	if m != nil {
		return m.PlaybackSpeedConf
	}
	return nil
}

func (m *PlayAbilityConf) GetDefinitionConf() *CloudConf {
	if m != nil {
		return m.DefinitionConf
	}
	return nil
}

func (m *PlayAbilityConf) GetSelectionsConf() *CloudConf {
	if m != nil {
		return m.SelectionsConf
	}
	return nil
}

func (m *PlayAbilityConf) GetNextConf() *CloudConf {
	if m != nil {
		return m.NextConf
	}
	return nil
}

func (m *PlayAbilityConf) GetEditDmConf() *CloudConf {
	if m != nil {
		return m.EditDmConf
	}
	return nil
}

func (m *PlayAbilityConf) GetSmallWindowConf() *CloudConf {
	if m != nil {
		return m.SmallWindowConf
	}
	return nil
}

func (m *PlayAbilityConf) GetShakeConf() *CloudConf {
	if m != nil {
		return m.ShakeConf
	}
	return nil
}

func (m *PlayAbilityConf) GetOuterDmConf() *CloudConf {
	if m != nil {
		return m.OuterDmConf
	}
	return nil
}

func (m *PlayAbilityConf) GetInnerDmConf() *CloudConf {
	if m != nil {
		return m.InnerDmConf
	}
	return nil
}

func (m *PlayAbilityConf) GetPanoramaConf() *CloudConf {
	if m != nil {
		return m.PanoramaConf
	}
	return nil
}

func (m *PlayAbilityConf) GetDolbyConf() *CloudConf {
	if m != nil {
		return m.DolbyConf
	}
	return nil
}

func (m *PlayAbilityConf) GetColorFilterConf() *CloudConf {
	if m != nil {
		return m.ColorFilterConf
	}
	return nil
}

func (m *PlayAbilityConf) GetLossLessConf() *CloudConf {
	if m != nil {
		return m.LossLessConf
	}
	return nil
}

// CloudConf .
type CloudConf struct {
	//true:展示 false:隐藏
	Show bool `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
	//云控详情
	FieldValue *FieldValue `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	//播放配置的值
	ConfValue            *ConfValue `protobuf:"bytes,3,opt,name=conf_value,json=confValue,proto3" json:"conf_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CloudConf) Reset()         { *m = CloudConf{} }
func (m *CloudConf) String() string { return proto.CompactTextString(m) }
func (*CloudConf) ProtoMessage()    {}
func (*CloudConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{18}
}
func (m *CloudConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudConf.Merge(m, src)
}
func (m *CloudConf) XXX_Size() int {
	return m.Size()
}
func (m *CloudConf) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudConf.DiscardUnknown(m)
}

var xxx_messageInfo_CloudConf proto.InternalMessageInfo

func (m *CloudConf) GetShow() bool {
	if m != nil {
		return m.Show
	}
	return false
}

func (m *CloudConf) GetFieldValue() *FieldValue {
	if m != nil {
		return m.FieldValue
	}
	return nil
}

func (m *CloudConf) GetConfValue() *ConfValue {
	if m != nil {
		return m.ConfValue
	}
	return nil
}

type ConfValue struct {
	// Types that are valid to be assigned to Value:
	//	*ConfValue_SwitchVal
	//	*ConfValue_SelectedVal
	Value                isConfValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConfValue) Reset()         { *m = ConfValue{} }
func (m *ConfValue) String() string { return proto.CompactTextString(m) }
func (*ConfValue) ProtoMessage()    {}
func (*ConfValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{19}
}
func (m *ConfValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfValue.Merge(m, src)
}
func (m *ConfValue) XXX_Size() int {
	return m.Size()
}
func (m *ConfValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfValue.DiscardUnknown(m)
}

var xxx_messageInfo_ConfValue proto.InternalMessageInfo

type isConfValue_Value interface {
	isConfValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConfValue_SwitchVal struct {
	SwitchVal bool `protobuf:"varint,1,opt,name=switch_val,json=switchVal,proto3,oneof" json:"switch_val,omitempty"`
}
type ConfValue_SelectedVal struct {
	SelectedVal int64 `protobuf:"varint,2,opt,name=selected_val,json=selectedVal,proto3,oneof" json:"selected_val,omitempty"`
}

func (*ConfValue_SwitchVal) isConfValue_Value()   {}
func (*ConfValue_SelectedVal) isConfValue_Value() {}

func (m *ConfValue) GetValue() isConfValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ConfValue) GetSwitchVal() bool {
	if x, ok := m.GetValue().(*ConfValue_SwitchVal); ok {
		return x.SwitchVal
	}
	return false
}

func (m *ConfValue) GetSelectedVal() int64 {
	if x, ok := m.GetValue().(*ConfValue_SelectedVal); ok {
		return x.SelectedVal
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConfValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConfValue_SwitchVal)(nil),
		(*ConfValue_SelectedVal)(nil),
	}
}

// PlayArcConf 播放三点配置信息-稿件维度
type PlayArcConf struct {
	//后台播放
	BackgroundPlayConf *ArcConf `protobuf:"bytes,1,opt,name=background_play_conf,json=backgroundPlayConf,proto3" json:"background_play_conf,omitempty"`
	//镜像反转
	FlipConf *ArcConf `protobuf:"bytes,2,opt,name=flip_conf,json=flipConf,proto3" json:"flip_conf,omitempty"`
	//返回视频的是否支持投屏
	CastConf *ArcConf `protobuf:"bytes,3,opt,name=cast_conf,json=castConf,proto3" json:"cast_conf,omitempty"`
	//反馈
	FeedbackConf *ArcConf `protobuf:"bytes,4,opt,name=feedback_conf,json=feedbackConf,proto3" json:"feedback_conf,omitempty"`
	//字幕
	SubtitleConf *ArcConf `protobuf:"bytes,5,opt,name=subtitle_conf,json=subtitleConf,proto3" json:"subtitle_conf,omitempty"`
	//播放速度
	PlaybackRateConf *ArcConf `protobuf:"bytes,6,opt,name=playback_rate_conf,json=playbackRateConf,proto3" json:"playback_rate_conf,omitempty"`
	//定时停止播放
	TimeUpConf *ArcConf `protobuf:"bytes,7,opt,name=time_up_conf,json=timeUpConf,proto3" json:"time_up_conf,omitempty"`
	//播放方式
	PlaybackModeConf *ArcConf `protobuf:"bytes,8,opt,name=playback_mode_conf,json=playbackModeConf,proto3" json:"playback_mode_conf,omitempty"`
	//画面尺寸
	ScaleModeConf *ArcConf `protobuf:"bytes,9,opt,name=scale_mode_conf,json=scaleModeConf,proto3" json:"scale_mode_conf,omitempty"`
	//顶
	LikeConf *ArcConf `protobuf:"bytes,10,opt,name=like_conf,json=likeConf,proto3" json:"like_conf,omitempty"`
	//踩
	DislikeConf *ArcConf `protobuf:"bytes,11,opt,name=dislike_conf,json=dislikeConf,proto3" json:"dislike_conf,omitempty"`
	//投币
	CoinConf *ArcConf `protobuf:"bytes,12,opt,name=coin_conf,json=coinConf,proto3" json:"coin_conf,omitempty"`
	//充电
	ElecConf *ArcConf `protobuf:"bytes,13,opt,name=elec_conf,json=elecConf,proto3" json:"elec_conf,omitempty"`
	//分享
	ShareConf *ArcConf `protobuf:"bytes,14,opt,name=share_conf,json=shareConf,proto3" json:"share_conf,omitempty"`
	//截图/gif
	ScreenShotConf *ArcConf `protobuf:"bytes,15,opt,name=screen_shot_conf,json=screenShotConf,proto3" json:"screen_shot_conf,omitempty"`
	//锁屏
	LockScreenConf *ArcConf `protobuf:"bytes,16,opt,name=lock_screen_conf,json=lockScreenConf,proto3" json:"lock_screen_conf,omitempty"`
	//相关推荐
	RecommendConf *ArcConf `protobuf:"bytes,17,opt,name=recommend_conf,json=recommendConf,proto3" json:"recommend_conf,omitempty"`
	//倍速
	PlaybackSpeedConf *ArcConf `protobuf:"bytes,18,opt,name=playback_speed_conf,json=playbackSpeedConf,proto3" json:"playback_speed_conf,omitempty"`
	//清晰度
	DefinitionConf *ArcConf `protobuf:"bytes,19,opt,name=definition_conf,json=definitionConf,proto3" json:"definition_conf,omitempty"`
	//选集
	SelectionsConf *ArcConf `protobuf:"bytes,20,opt,name=selections_conf,json=selectionsConf,proto3" json:"selections_conf,omitempty"`
	//下一集
	NextConf *ArcConf `protobuf:"bytes,21,opt,name=next_conf,json=nextConf,proto3" json:"next_conf,omitempty"`
	//编辑弹幕（包含弹幕开关 弹幕设置 弹幕框）
	EditDmConf *ArcConf `protobuf:"bytes,22,opt,name=edit_dm_conf,json=editDmConf,proto3" json:"edit_dm_conf,omitempty"`
	//小窗
	SmallWindowConf *ArcConf `protobuf:"bytes,23,opt,name=small_window_conf,json=smallWindowConf,proto3" json:"small_window_conf,omitempty"`
	//播放震动
	ShakeConf *ArcConf `protobuf:"bytes,24,opt,name=shake_conf,json=shakeConf,proto3" json:"shake_conf,omitempty"`
	//外层面板弹幕设置（实验组1）
	OuterDmConf *ArcConf `protobuf:"bytes,25,opt,name=outer_dm_conf,json=outerDmConf,proto3" json:"outer_dm_conf,omitempty"`
	//三点内弹幕设置（实验组2）
	InnerDmConf *ArcConf `protobuf:"bytes,26,opt,name=inner_dm_conf,json=innerDmConf,proto3" json:"inner_dm_conf,omitempty"`
	//全景
	PanoramaConf *ArcConf `protobuf:"bytes,27,opt,name=panorama_conf,json=panoramaConf,proto3" json:"panorama_conf,omitempty"`
	//杜比
	DolbyConf *ArcConf `protobuf:"bytes,28,opt,name=dolby_conf,json=dolbyConf,proto3" json:"dolby_conf,omitempty"`
	//屏幕录制
	ScreenRecordingConf *ArcConf `protobuf:"bytes,29,opt,name=screen_recording_conf,json=screenRecordingConf,proto3" json:"screen_recording_conf,omitempty"`
	//播放滤镜
	ColorFilterConf *ArcConf `protobuf:"bytes,30,opt,name=color_filter_conf,json=colorFilterConf,proto3" json:"color_filter_conf,omitempty"`
	//无损音频
	LossLessConf         *ArcConf `protobuf:"bytes,31,opt,name=loss_less_conf,json=lossLessConf,proto3" json:"loss_less_conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayArcConf) Reset()         { *m = PlayArcConf{} }
func (m *PlayArcConf) String() string { return proto.CompactTextString(m) }
func (*PlayArcConf) ProtoMessage()    {}
func (*PlayArcConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{20}
}
func (m *PlayArcConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayArcConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayArcConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayArcConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayArcConf.Merge(m, src)
}
func (m *PlayArcConf) XXX_Size() int {
	return m.Size()
}
func (m *PlayArcConf) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayArcConf.DiscardUnknown(m)
}

var xxx_messageInfo_PlayArcConf proto.InternalMessageInfo

func (m *PlayArcConf) GetBackgroundPlayConf() *ArcConf {
	if m != nil {
		return m.BackgroundPlayConf
	}
	return nil
}

func (m *PlayArcConf) GetFlipConf() *ArcConf {
	if m != nil {
		return m.FlipConf
	}
	return nil
}

func (m *PlayArcConf) GetCastConf() *ArcConf {
	if m != nil {
		return m.CastConf
	}
	return nil
}

func (m *PlayArcConf) GetFeedbackConf() *ArcConf {
	if m != nil {
		return m.FeedbackConf
	}
	return nil
}

func (m *PlayArcConf) GetSubtitleConf() *ArcConf {
	if m != nil {
		return m.SubtitleConf
	}
	return nil
}

func (m *PlayArcConf) GetPlaybackRateConf() *ArcConf {
	if m != nil {
		return m.PlaybackRateConf
	}
	return nil
}

func (m *PlayArcConf) GetTimeUpConf() *ArcConf {
	if m != nil {
		return m.TimeUpConf
	}
	return nil
}

func (m *PlayArcConf) GetPlaybackModeConf() *ArcConf {
	if m != nil {
		return m.PlaybackModeConf
	}
	return nil
}

func (m *PlayArcConf) GetScaleModeConf() *ArcConf {
	if m != nil {
		return m.ScaleModeConf
	}
	return nil
}

func (m *PlayArcConf) GetLikeConf() *ArcConf {
	if m != nil {
		return m.LikeConf
	}
	return nil
}

func (m *PlayArcConf) GetDislikeConf() *ArcConf {
	if m != nil {
		return m.DislikeConf
	}
	return nil
}

func (m *PlayArcConf) GetCoinConf() *ArcConf {
	if m != nil {
		return m.CoinConf
	}
	return nil
}

func (m *PlayArcConf) GetElecConf() *ArcConf {
	if m != nil {
		return m.ElecConf
	}
	return nil
}

func (m *PlayArcConf) GetShareConf() *ArcConf {
	if m != nil {
		return m.ShareConf
	}
	return nil
}

func (m *PlayArcConf) GetScreenShotConf() *ArcConf {
	if m != nil {
		return m.ScreenShotConf
	}
	return nil
}

func (m *PlayArcConf) GetLockScreenConf() *ArcConf {
	if m != nil {
		return m.LockScreenConf
	}
	return nil
}

func (m *PlayArcConf) GetRecommendConf() *ArcConf {
	if m != nil {
		return m.RecommendConf
	}
	return nil
}

func (m *PlayArcConf) GetPlaybackSpeedConf() *ArcConf {
	if m != nil {
		return m.PlaybackSpeedConf
	}
	return nil
}

func (m *PlayArcConf) GetDefinitionConf() *ArcConf {
	if m != nil {
		return m.DefinitionConf
	}
	return nil
}

func (m *PlayArcConf) GetSelectionsConf() *ArcConf {
	if m != nil {
		return m.SelectionsConf
	}
	return nil
}

func (m *PlayArcConf) GetNextConf() *ArcConf {
	if m != nil {
		return m.NextConf
	}
	return nil
}

func (m *PlayArcConf) GetEditDmConf() *ArcConf {
	if m != nil {
		return m.EditDmConf
	}
	return nil
}

func (m *PlayArcConf) GetSmallWindowConf() *ArcConf {
	if m != nil {
		return m.SmallWindowConf
	}
	return nil
}

func (m *PlayArcConf) GetShakeConf() *ArcConf {
	if m != nil {
		return m.ShakeConf
	}
	return nil
}

func (m *PlayArcConf) GetOuterDmConf() *ArcConf {
	if m != nil {
		return m.OuterDmConf
	}
	return nil
}

func (m *PlayArcConf) GetInnerDmConf() *ArcConf {
	if m != nil {
		return m.InnerDmConf
	}
	return nil
}

func (m *PlayArcConf) GetPanoramaConf() *ArcConf {
	if m != nil {
		return m.PanoramaConf
	}
	return nil
}

func (m *PlayArcConf) GetDolbyConf() *ArcConf {
	if m != nil {
		return m.DolbyConf
	}
	return nil
}

func (m *PlayArcConf) GetScreenRecordingConf() *ArcConf {
	if m != nil {
		return m.ScreenRecordingConf
	}
	return nil
}

func (m *PlayArcConf) GetColorFilterConf() *ArcConf {
	if m != nil {
		return m.ColorFilterConf
	}
	return nil
}

func (m *PlayArcConf) GetLossLessConf() *ArcConf {
	if m != nil {
		return m.LossLessConf
	}
	return nil
}

// ArcConf 稿件维度
type ArcConf struct {
	//是否可用（可见）
	IsSupport bool `protobuf:"varint,1,opt,name=is_support,json=isSupport,proto3" json:"is_support,omitempty"`
	//是否禁用
	Disabled bool `protobuf:"varint,2,opt,name=disabled,proto3" json:"disabled,omitempty"`
	//提示信息
	ExtraContent *ExtraContent `protobuf:"bytes,3,opt,name=extra_content,json=extraContent,proto3" json:"extra_content,omitempty"`
	//不支持的场景：1:首映
	UnsupportScene       []int64  `protobuf:"varint,4,rep,packed,name=unsupport_scene,json=unsupportScene,proto3" json:"unsupport_scene,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArcConf) Reset()         { *m = ArcConf{} }
func (m *ArcConf) String() string { return proto.CompactTextString(m) }
func (*ArcConf) ProtoMessage()    {}
func (*ArcConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{21}
}
func (m *ArcConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArcConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArcConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArcConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArcConf.Merge(m, src)
}
func (m *ArcConf) XXX_Size() int {
	return m.Size()
}
func (m *ArcConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ArcConf.DiscardUnknown(m)
}

var xxx_messageInfo_ArcConf proto.InternalMessageInfo

func (m *ArcConf) GetIsSupport() bool {
	if m != nil {
		return m.IsSupport
	}
	return false
}

func (m *ArcConf) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *ArcConf) GetExtraContent() *ExtraContent {
	if m != nil {
		return m.ExtraContent
	}
	return nil
}

func (m *ArcConf) GetUnsupportScene() []int64 {
	if m != nil {
		return m.UnsupportScene
	}
	return nil
}

type ExtraContent struct {
	//禁用的原因
	DisabledReason string `protobuf:"bytes,1,opt,name=disabled_reason,json=disabledReason,proto3" json:"disabled_reason,omitempty"`
	//禁用的错误码
	DisabledCode         int64    `protobuf:"varint,2,opt,name=disabled_code,json=disabledCode,proto3" json:"disabled_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtraContent) Reset()         { *m = ExtraContent{} }
func (m *ExtraContent) String() string { return proto.CompactTextString(m) }
func (*ExtraContent) ProtoMessage()    {}
func (*ExtraContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{22}
}
func (m *ExtraContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraContent.Merge(m, src)
}
func (m *ExtraContent) XXX_Size() int {
	return m.Size()
}
func (m *ExtraContent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraContent.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraContent proto.InternalMessageInfo

func (m *ExtraContent) GetDisabledReason() string {
	if m != nil {
		return m.DisabledReason
	}
	return ""
}

func (m *ExtraContent) GetDisabledCode() int64 {
	if m != nil {
		return m.DisabledCode
	}
	return 0
}

type PlayViewReq struct {
	//稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	//稿件cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	//清晰度
	Qn int64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	//平台
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	//默认0 播放器请求端使用的, 功能版本号
	Fnver int32 `protobuf:"varint,5,opt,name=fnver,proto3" json:"fnver,omitempty"`
	//默认0 播放器请求端使用的, 功能标识
	Fnval int32 `protobuf:"varint,6,opt,name=fnval,proto3" json:"fnval,omitempty"`
	//登陆用户mid
	Mid int64 `protobuf:"varint,7,opt,name=mid,proto3" json:"mid,omitempty"`
	//返回备用url的个数（最多可能的个数）
	BackupNum uint32 `protobuf:"varint,8,opt,name=backup_num,json=backupNum,proto3" json:"backup_num,omitempty"`
	//下载参数 0-非下载 1-下载flv 2-下载dash
	Download uint32 `protobuf:"varint,9,opt,name=download,proto3" json:"download,omitempty"`
	//返回url是否强制使用域名(非ip地址), 1-http域名 2-https域名
	ForceHost int32 `protobuf:"varint,10,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	//是否需要4k清晰度
	Fourk bool `protobuf:"varint,11,opt,name=fourk,proto3" json:"fourk,omitempty"`
	//低版本引导升级aid
	UpgradeAid int64 `protobuf:"varint,12,opt,name=upgrade_aid,json=upgradeAid,proto3" json:"upgrade_aid,omitempty"`
	//低版本引导升级cid
	UpgradeCid int64 `protobuf:"varint,13,opt,name=upgrade_cid,json=upgradeCid,proto3" json:"upgrade_cid,omitempty"`
	//设备：phone、ipad
	Device string `protobuf:"bytes,14,opt,name=device,proto3" json:"device,omitempty"`
	//平台：iphone、white、ipad、android、android_i、android_G、iphone_i、ipad_i、android_tv（后面带 I 是表示海外版、android_G 安卓谷歌版）
	MobiApp string `protobuf:"bytes,15,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	//低版本需要（是否校验支持互动视频否 1:是）
	VerifySteins int32 `protobuf:"varint,16,opt,name=verify_steins,json=verifySteins,proto3" json:"verify_steins,omitempty"`
	//是否是h5网页请求
	H5Hq bool `protobuf:"varint,17,opt,name=h5_hq,json=h5Hq,proto3" json:"h5_hq,omitempty"`
	//build版本号
	Build int32 `protobuf:"varint,18,opt,name=build,proto3" json:"build,omitempty"`
	//客户端设备唯一标识
	Buvid string `protobuf:"bytes,19,opt,name=buvid,proto3" json:"buvid,omitempty"`
	//是否开始vip设备管控 1:开启
	VerifyVip int32 `protobuf:"varint,20,opt,name=verify_vip,json=verifyVip,proto3" json:"verify_vip,omitempty"`
	//青少年模式
	TeenagersMode int32 `protobuf:"varint,21,opt,name=teenagersMode,proto3" json:"teenagersMode,omitempty"`
	//网络类型
	NetType NetworkType `protobuf:"varint,22,opt,name=net_type,json=netType,proto3,enum=playurl.service.v2.NetworkType" json:"net_type,omitempty"`
	//免流类型
	TfType TFType `protobuf:"varint,23,opt,name=tf_type,json=tfType,proto3,enum=playurl.service.v2.TFType" json:"tf_type,omitempty"`
	//课堂模式
	LessonsMode int32 `protobuf:"varint,24,opt,name=lessonsMode,proto3" json:"lessonsMode,omitempty"`
	// 业务来源
	BusinessSource BusinessSource `protobuf:"varint,25,opt,name=business_source,json=businessSource,proto3,enum=playurl.service.v2.BusinessSource" json:"business_source,omitempty"`
	// 设备指纹
	FpLocal string `protobuf:"bytes,26,opt,name=fp_local,json=fpLocal,proto3" json:"fp_local,omitempty"`
	//是否开启音量均衡，1开启
	VoiceBalance int64 `protobuf:"varint,27,opt,name=voice_balance,json=voiceBalance,proto3" json:"voice_balance,omitempty"`
	// true代表为大众车载请求，false代表不是大众车载请求，默认为false
	IsDazhongcar         bool     `protobuf:"varint,28,opt,name=is_dazhongcar,json=isDazhongcar,proto3" json:"is_dazhongcar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayViewReq) Reset()         { *m = PlayViewReq{} }
func (m *PlayViewReq) String() string { return proto.CompactTextString(m) }
func (*PlayViewReq) ProtoMessage()    {}
func (*PlayViewReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{23}
}
func (m *PlayViewReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayViewReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayViewReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayViewReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayViewReq.Merge(m, src)
}
func (m *PlayViewReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayViewReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayViewReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayViewReq proto.InternalMessageInfo

func (m *PlayViewReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PlayViewReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *PlayViewReq) GetQn() int64 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *PlayViewReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *PlayViewReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *PlayViewReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *PlayViewReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PlayViewReq) GetBackupNum() uint32 {
	if m != nil {
		return m.BackupNum
	}
	return 0
}

func (m *PlayViewReq) GetDownload() uint32 {
	if m != nil {
		return m.Download
	}
	return 0
}

func (m *PlayViewReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *PlayViewReq) GetFourk() bool {
	if m != nil {
		return m.Fourk
	}
	return false
}

func (m *PlayViewReq) GetUpgradeAid() int64 {
	if m != nil {
		return m.UpgradeAid
	}
	return 0
}

func (m *PlayViewReq) GetUpgradeCid() int64 {
	if m != nil {
		return m.UpgradeCid
	}
	return 0
}

func (m *PlayViewReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *PlayViewReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *PlayViewReq) GetVerifySteins() int32 {
	if m != nil {
		return m.VerifySteins
	}
	return 0
}

func (m *PlayViewReq) GetH5Hq() bool {
	if m != nil {
		return m.H5Hq
	}
	return false
}

func (m *PlayViewReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *PlayViewReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *PlayViewReq) GetVerifyVip() int32 {
	if m != nil {
		return m.VerifyVip
	}
	return 0
}

func (m *PlayViewReq) GetTeenagersMode() int32 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

func (m *PlayViewReq) GetNetType() NetworkType {
	if m != nil {
		return m.NetType
	}
	return NetworkType_NT_UNKNOWN
}

func (m *PlayViewReq) GetTfType() TFType {
	if m != nil {
		return m.TfType
	}
	return TFType_TF_UNKNOWN
}

func (m *PlayViewReq) GetLessonsMode() int32 {
	if m != nil {
		return m.LessonsMode
	}
	return 0
}

func (m *PlayViewReq) GetBusinessSource() BusinessSource {
	if m != nil {
		return m.BusinessSource
	}
	return BusinessSource_UNKNOWN
}

func (m *PlayViewReq) GetFpLocal() string {
	if m != nil {
		return m.FpLocal
	}
	return ""
}

func (m *PlayViewReq) GetVoiceBalance() int64 {
	if m != nil {
		return m.VoiceBalance
	}
	return 0
}

func (m *PlayViewReq) GetIsDazhongcar() bool {
	if m != nil {
		return m.IsDazhongcar
	}
	return false
}

type PlayURLReq struct {
	//稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	//稿件cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	//清晰度
	Qn int64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	//平台
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	//默认0 播放器请求端使用的, 功能版本号
	Fnver int32 `protobuf:"varint,5,opt,name=fnver,proto3" json:"fnver,omitempty"`
	//默认0 播放器请求端使用的, 功能标识
	Fnval int32 `protobuf:"varint,6,opt,name=fnval,proto3" json:"fnval,omitempty"`
	//登录mid
	Mid int64 `protobuf:"varint,7,opt,name=mid,proto3" json:"mid,omitempty"`
	//返回备用url的个数（最多可能的个数）
	BackupNum uint32 `protobuf:"varint,8,opt,name=backup_num,json=backupNum,proto3" json:"backup_num,omitempty"`
	//是否是离线下载请求, 1为请求flv，2请求dash,其他均无效
	Download uint32 `protobuf:"varint,9,opt,name=download,proto3" json:"download,omitempty"`
	//返回url是否强制使用域名(非ip地址), force_host=1使用http域名，force_host=2使用https域名, 0为使用ip地址
	ForceHost int32 `protobuf:"varint,10,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	//是否需要4K视频, fourk=true表示需要4K视频, 其他都是不需要
	Fourk bool `protobuf:"varint,11,opt,name=fourk,proto3" json:"fourk,omitempty"`
	//低版本引导升级aid
	UpgradeAid int64 `protobuf:"varint,12,opt,name=upgrade_aid,json=upgradeAid,proto3" json:"upgrade_aid,omitempty"`
	//低版本引导升级cid
	UpgradeCid int64 `protobuf:"varint,13,opt,name=upgrade_cid,json=upgradeCid,proto3" json:"upgrade_cid,omitempty"`
	//设备：phone、ipad
	Device string `protobuf:"bytes,14,opt,name=device,proto3" json:"device,omitempty"`
	//平台：iphone、white、ipad、android、android_i、android_G、iphone_i、ipad_i、android_tv（后面带 I 是表示海外版、android_G 安卓谷歌版）
	MobiApp string `protobuf:"bytes,15,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	//低版本需要（是否校验支持互动视频否 1:是）
	VerifySteins int32 `protobuf:"varint,16,opt,name=verify_steins,json=verifySteins,proto3" json:"verify_steins,omitempty"`
	//是否是h5网页请求
	H5Hq bool `protobuf:"varint,17,opt,name=h5_hq,json=h5Hq,proto3" json:"h5_hq,omitempty"`
	//build版本号
	Build int32 `protobuf:"varint,18,opt,name=build,proto3" json:"build,omitempty"`
	//客户端设备唯一标识
	Buvid string `protobuf:"bytes,19,opt,name=buvid,proto3" json:"buvid,omitempty"`
	//是否开始vip设备管控 1:开启
	VerifyVip int32 `protobuf:"varint,20,opt,name=verify_vip,json=verifyVip,proto3" json:"verify_vip,omitempty"`
	//网络类型
	NetType NetworkType `protobuf:"varint,21,opt,name=net_type,json=netType,proto3,enum=playurl.service.v2.NetworkType" json:"net_type,omitempty"`
	//免流类型
	TfType TFType `protobuf:"varint,22,opt,name=tf_type,json=tfType,proto3,enum=playurl.service.v2.TFType" json:"tf_type,omitempty"`
	//是否开启音量均衡，1开启
	VoiceBalance int64 `protobuf:"varint,23,opt,name=voice_balance,json=voiceBalance,proto3" json:"voice_balance,omitempty"`
	// true代表为大众车载请求，false代表不是大众车载请求，默认为false
	IsDazhongcar         bool     `protobuf:"varint,24,opt,name=is_dazhongcar,json=isDazhongcar,proto3" json:"is_dazhongcar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayURLReq) Reset()         { *m = PlayURLReq{} }
func (m *PlayURLReq) String() string { return proto.CompactTextString(m) }
func (*PlayURLReq) ProtoMessage()    {}
func (*PlayURLReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{24}
}
func (m *PlayURLReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayURLReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayURLReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayURLReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayURLReq.Merge(m, src)
}
func (m *PlayURLReq) XXX_Size() int {
	return m.Size()
}
func (m *PlayURLReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayURLReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayURLReq proto.InternalMessageInfo

func (m *PlayURLReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *PlayURLReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *PlayURLReq) GetQn() int64 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *PlayURLReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *PlayURLReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *PlayURLReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *PlayURLReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PlayURLReq) GetBackupNum() uint32 {
	if m != nil {
		return m.BackupNum
	}
	return 0
}

func (m *PlayURLReq) GetDownload() uint32 {
	if m != nil {
		return m.Download
	}
	return 0
}

func (m *PlayURLReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *PlayURLReq) GetFourk() bool {
	if m != nil {
		return m.Fourk
	}
	return false
}

func (m *PlayURLReq) GetUpgradeAid() int64 {
	if m != nil {
		return m.UpgradeAid
	}
	return 0
}

func (m *PlayURLReq) GetUpgradeCid() int64 {
	if m != nil {
		return m.UpgradeCid
	}
	return 0
}

func (m *PlayURLReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *PlayURLReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *PlayURLReq) GetVerifySteins() int32 {
	if m != nil {
		return m.VerifySteins
	}
	return 0
}

func (m *PlayURLReq) GetH5Hq() bool {
	if m != nil {
		return m.H5Hq
	}
	return false
}

func (m *PlayURLReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *PlayURLReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *PlayURLReq) GetVerifyVip() int32 {
	if m != nil {
		return m.VerifyVip
	}
	return 0
}

func (m *PlayURLReq) GetNetType() NetworkType {
	if m != nil {
		return m.NetType
	}
	return NetworkType_NT_UNKNOWN
}

func (m *PlayURLReq) GetTfType() TFType {
	if m != nil {
		return m.TfType
	}
	return TFType_TF_UNKNOWN
}

func (m *PlayURLReq) GetVoiceBalance() int64 {
	if m != nil {
		return m.VoiceBalance
	}
	return 0
}

func (m *PlayURLReq) GetIsDazhongcar() bool {
	if m != nil {
		return m.IsDazhongcar
	}
	return false
}

type PlayURLReply struct {
	//播放地址
	Playurl *ResponseMsg `protobuf:"bytes,1,opt,name=playurl,proto3" json:"playurl,omitempty"`
	//音量均衡信息
	Volume               *VolumeInfo `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PlayURLReply) Reset()         { *m = PlayURLReply{} }
func (m *PlayURLReply) String() string { return proto.CompactTextString(m) }
func (*PlayURLReply) ProtoMessage()    {}
func (*PlayURLReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{25}
}
func (m *PlayURLReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayURLReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayURLReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayURLReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayURLReply.Merge(m, src)
}
func (m *PlayURLReply) XXX_Size() int {
	return m.Size()
}
func (m *PlayURLReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayURLReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayURLReply proto.InternalMessageInfo

func (m *PlayURLReply) GetPlayurl() *ResponseMsg {
	if m != nil {
		return m.Playurl
	}
	return nil
}

func (m *PlayURLReply) GetVolume() *VolumeInfo {
	if m != nil {
		return m.Volume
	}
	return nil
}

type ExtInfo struct {
	//vip管控提示信息
	VipControl           *VipControl `protobuf:"bytes,1,opt,name=vip_control,json=vipControl,proto3" json:"vip_control,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ExtInfo) Reset()         { *m = ExtInfo{} }
func (m *ExtInfo) String() string { return proto.CompactTextString(m) }
func (*ExtInfo) ProtoMessage()    {}
func (*ExtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{26}
}
func (m *ExtInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtInfo.Merge(m, src)
}
func (m *ExtInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExtInfo proto.InternalMessageInfo

func (m *ExtInfo) GetVipControl() *VipControl {
	if m != nil {
		return m.VipControl
	}
	return nil
}

// 账号是管控信息
type VipControl struct {
	// 是否触发管控
	Control bool `protobuf:"varint,1,opt,name=control,proto3" json:"control,omitempty"`
	// 管控原因
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipControl) Reset()         { *m = VipControl{} }
func (m *VipControl) String() string { return proto.CompactTextString(m) }
func (*VipControl) ProtoMessage()    {}
func (*VipControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{27}
}
func (m *VipControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipControl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipControl.Merge(m, src)
}
func (m *VipControl) XXX_Size() int {
	return m.Size()
}
func (m *VipControl) XXX_DiscardUnknown() {
	xxx_messageInfo_VipControl.DiscardUnknown(m)
}

var xxx_messageInfo_VipControl proto.InternalMessageInfo

func (m *VipControl) GetControl() bool {
	if m != nil {
		return m.Control
	}
	return false
}

func (m *VipControl) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// ResponseMsg .
type ResponseMsg struct {
	//错误状态码
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//错误描述
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//视频类型 1-flv 2-dash 3-mp4（只标识一个清晰度的格式）
	Type int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	//返回视频的清晰度
	Quality uint32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
	//返回视频的格式
	Format string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	//返回视频的拥有的清晰度格式的列表
	AcceptFormat string `protobuf:"bytes,6,opt,name=accept_format,json=acceptFormat,proto3" json:"accept_format,omitempty"`
	//返回视频的拥有的清晰度描述的列表
	AcceptDescription []string `protobuf:"bytes,7,rep,name=accept_description,json=acceptDescription,proto3" json:"accept_description,omitempty"`
	//返回视频的拥有的清晰度列表
	AcceptQuality []uint32 `protobuf:"varint,8,rep,packed,name=accept_quality,json=acceptQuality,proto3" json:"accept_quality,omitempty"`
	//返回视频的总时长, 单位为ms
	Timelength uint64 `protobuf:"varint,9,opt,name=timelength,proto3" json:"timelength,omitempty"`
	//返回视频的编码号
	VideoCodecid uint32 `protobuf:"varint,10,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid,omitempty"`
	//透传返回请求的fnver
	Fnver uint32 `protobuf:"varint,11,opt,name=fnver,proto3" json:"fnver,omitempty"`
	//透传返回请求的fnval
	Fnval uint32 `protobuf:"varint,12,opt,name=fnval,proto3" json:"fnval,omitempty"`
	//返回视频的是否支持投影
	VideoProject bool `protobuf:"varint,13,opt,name=video_project,json=videoProject,proto3" json:"video_project,omitempty"`
	//返回视频播放url的列表，有durl则没dash字段
	Durl []*ResponseUrl `protobuf:"bytes,14,rep,name=durl,proto3" json:"durl,omitempty"`
	//返回DASH视频的MPD格式文件,有dash则没durl字段
	Dash *ResponseDash `protobuf:"bytes,15,opt,name=dash,proto3" json:"dash,omitempty"`
	//表示cid是否非全二压，1表示非全二压
	NoRexcode int32 `protobuf:"varint,16,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	//返回视频的拥有的清晰度描述的列表
	SupportFormats []*FormatDescription `protobuf:"bytes,17,rep,name=support_formats,json=supportFormats,proto3" json:"support_formats,omitempty"`
	//返回视频拥有的最高清晰度
	HighFormat           *FormatDescription `protobuf:"bytes,18,opt,name=high_format,json=highFormat,proto3" json:"high_format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ResponseMsg) Reset()         { *m = ResponseMsg{} }
func (m *ResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ResponseMsg) ProtoMessage()    {}
func (*ResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{28}
}
func (m *ResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMsg.Merge(m, src)
}
func (m *ResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *ResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMsg proto.InternalMessageInfo

func (m *ResponseMsg) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResponseMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ResponseMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ResponseMsg) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *ResponseMsg) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ResponseMsg) GetAcceptFormat() string {
	if m != nil {
		return m.AcceptFormat
	}
	return ""
}

func (m *ResponseMsg) GetAcceptDescription() []string {
	if m != nil {
		return m.AcceptDescription
	}
	return nil
}

func (m *ResponseMsg) GetAcceptQuality() []uint32 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *ResponseMsg) GetTimelength() uint64 {
	if m != nil {
		return m.Timelength
	}
	return 0
}

func (m *ResponseMsg) GetVideoCodecid() uint32 {
	if m != nil {
		return m.VideoCodecid
	}
	return 0
}

func (m *ResponseMsg) GetFnver() uint32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *ResponseMsg) GetFnval() uint32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *ResponseMsg) GetVideoProject() bool {
	if m != nil {
		return m.VideoProject
	}
	return false
}

func (m *ResponseMsg) GetDurl() []*ResponseUrl {
	if m != nil {
		return m.Durl
	}
	return nil
}

func (m *ResponseMsg) GetDash() *ResponseDash {
	if m != nil {
		return m.Dash
	}
	return nil
}

func (m *ResponseMsg) GetNoRexcode() int32 {
	if m != nil {
		return m.NoRexcode
	}
	return 0
}

func (m *ResponseMsg) GetSupportFormats() []*FormatDescription {
	if m != nil {
		return m.SupportFormats
	}
	return nil
}

func (m *ResponseMsg) GetHighFormat() *FormatDescription {
	if m != nil {
		return m.HighFormat
	}
	return nil
}

// ResponseUrl .
type ResponseUrl struct {
	//视频的分片序列号
	Order uint32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	//视频分片的时长, 单位ms
	Length uint64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	//视频分片的大小, 单位Byte
	Size_ uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	//视频分片的音频头信息
	Ahead string `protobuf:"bytes,4,opt,name=ahead,proto3" json:"ahead,omitempty"`
	//视频分片的视频头信息
	Vhead string `protobuf:"bytes,5,opt,name=vhead,proto3" json:"vhead,omitempty"`
	//视频分片的url地址
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	//视频分片的备用url地址列表
	BackupUrl []string `protobuf:"bytes,7,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	//视频分片的md5,只有离线下载才有值
	Md5                  string   `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseUrl) Reset()         { *m = ResponseUrl{} }
func (m *ResponseUrl) String() string { return proto.CompactTextString(m) }
func (*ResponseUrl) ProtoMessage()    {}
func (*ResponseUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{29}
}
func (m *ResponseUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseUrl.Merge(m, src)
}
func (m *ResponseUrl) XXX_Size() int {
	return m.Size()
}
func (m *ResponseUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseUrl.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseUrl proto.InternalMessageInfo

func (m *ResponseUrl) GetOrder() uint32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *ResponseUrl) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ResponseUrl) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ResponseUrl) GetAhead() string {
	if m != nil {
		return m.Ahead
	}
	return ""
}

func (m *ResponseUrl) GetVhead() string {
	if m != nil {
		return m.Vhead
	}
	return ""
}

func (m *ResponseUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ResponseUrl) GetBackupUrl() []string {
	if m != nil {
		return m.BackupUrl
	}
	return nil
}

func (m *ResponseUrl) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

// ResponseDash .
type ResponseDash struct {
	//dash的信息
	Duration uint32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	//dash的信息
	MinBufferTime float32 `protobuf:"fixed32,2,opt,name=min_buffer_time,json=minBufferTime,proto3" json:"min_buffer_time,omitempty"`
	//dash视频信息
	Video []*DashItem `protobuf:"bytes,3,rep,name=video,proto3" json:"video,omitempty"`
	//dash视频信息
	Audio []*DashItem `protobuf:"bytes,4,rep,name=audio,proto3" json:"audio,omitempty"`
	// dolby
	Dolby *DolbyItem `protobuf:"bytes,5,opt,name=dolby,proto3" json:"dolby,omitempty"`
	//无损音频
	LossLessItem         *LossLessItem `protobuf:"bytes,6,opt,name=loss_less_item,json=lossLessItem,proto3" json:"loss_less_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResponseDash) Reset()         { *m = ResponseDash{} }
func (m *ResponseDash) String() string { return proto.CompactTextString(m) }
func (*ResponseDash) ProtoMessage()    {}
func (*ResponseDash) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{30}
}
func (m *ResponseDash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDash.Merge(m, src)
}
func (m *ResponseDash) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDash) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDash.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDash proto.InternalMessageInfo

func (m *ResponseDash) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ResponseDash) GetMinBufferTime() float32 {
	if m != nil {
		return m.MinBufferTime
	}
	return 0
}

func (m *ResponseDash) GetVideo() []*DashItem {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *ResponseDash) GetAudio() []*DashItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *ResponseDash) GetDolby() *DolbyItem {
	if m != nil {
		return m.Dolby
	}
	return nil
}

func (m *ResponseDash) GetLossLessItem() *LossLessItem {
	if m != nil {
		return m.LossLessItem
	}
	return nil
}

type LossLessItem struct {
	IsLosslessAudio bool `protobuf:"varint,1,opt,name=is_lossless_audio,json=isLosslessAudio,proto3" json:"is_lossless_audio,omitempty"`
	//无损音频信息
	Audio                *DashItem `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LossLessItem) Reset()         { *m = LossLessItem{} }
func (m *LossLessItem) String() string { return proto.CompactTextString(m) }
func (*LossLessItem) ProtoMessage()    {}
func (*LossLessItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{31}
}
func (m *LossLessItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LossLessItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LossLessItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LossLessItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LossLessItem.Merge(m, src)
}
func (m *LossLessItem) XXX_Size() int {
	return m.Size()
}
func (m *LossLessItem) XXX_DiscardUnknown() {
	xxx_messageInfo_LossLessItem.DiscardUnknown(m)
}

var xxx_messageInfo_LossLessItem proto.InternalMessageInfo

func (m *LossLessItem) GetIsLosslessAudio() bool {
	if m != nil {
		return m.IsLosslessAudio
	}
	return false
}

func (m *LossLessItem) GetAudio() *DashItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

// DolbyItem .
type DolbyItem struct {
	//杜比类型
	Type DolbyItem_Type `protobuf:"varint,1,opt,name=type,proto3,enum=playurl.service.v2.DolbyItem_Type" json:"type,omitempty"`
	// 杜比音频信息
	Audio                []*DashItem `protobuf:"bytes,2,rep,name=audio,proto3" json:"audio,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DolbyItem) Reset()         { *m = DolbyItem{} }
func (m *DolbyItem) String() string { return proto.CompactTextString(m) }
func (*DolbyItem) ProtoMessage()    {}
func (*DolbyItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{32}
}
func (m *DolbyItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DolbyItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DolbyItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DolbyItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DolbyItem.Merge(m, src)
}
func (m *DolbyItem) XXX_Size() int {
	return m.Size()
}
func (m *DolbyItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DolbyItem.DiscardUnknown(m)
}

var xxx_messageInfo_DolbyItem proto.InternalMessageInfo

func (m *DolbyItem) GetType() DolbyItem_Type {
	if m != nil {
		return m.Type
	}
	return DolbyItem_NONE
}

func (m *DolbyItem) GetAudio() []*DashItem {
	if m != nil {
		return m.Audio
	}
	return nil
}

// DashSegmentBase .
type DashSegmentBase struct {
	//dash的信息
	Initialization string `protobuf:"bytes,1,opt,name=initialization,proto3" json:"initialization,omitempty"`
	//dash的信息
	IndexRange           string   `protobuf:"bytes,2,opt,name=index_range,json=indexRange,proto3" json:"index_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DashSegmentBase) Reset()         { *m = DashSegmentBase{} }
func (m *DashSegmentBase) String() string { return proto.CompactTextString(m) }
func (*DashSegmentBase) ProtoMessage()    {}
func (*DashSegmentBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{33}
}
func (m *DashSegmentBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DashSegmentBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DashSegmentBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DashSegmentBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DashSegmentBase.Merge(m, src)
}
func (m *DashSegmentBase) XXX_Size() int {
	return m.Size()
}
func (m *DashSegmentBase) XXX_DiscardUnknown() {
	xxx_messageInfo_DashSegmentBase.DiscardUnknown(m)
}

var xxx_messageInfo_DashSegmentBase proto.InternalMessageInfo

func (m *DashSegmentBase) GetInitialization() string {
	if m != nil {
		return m.Initialization
	}
	return ""
}

func (m *DashSegmentBase) GetIndexRange() string {
	if m != nil {
		return m.IndexRange
	}
	return ""
}

// DashItem .
type DashItem struct {
	//dash的清晰度
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//dash的url地址
	BaseUrl string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	//dash的backup url地址
	BackupUrl []string `protobuf:"bytes,3,rep,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	//dash的信息
	Bandwidth uint32 `protobuf:"varint,4,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	//dash的信息
	MimeType string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	//dash的信息
	Codecs string `protobuf:"bytes,6,opt,name=codecs,proto3" json:"codecs,omitempty"`
	//dash的信息
	Width uint32 `protobuf:"varint,7,opt,name=width,proto3" json:"width,omitempty"`
	//dash的信息
	Height uint32 `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	//dash的信息
	FrameRate string `protobuf:"bytes,9,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	//dash的信息
	Sar string `protobuf:"bytes,10,opt,name=sar,proto3" json:"sar,omitempty"`
	//dash的信息
	StartWithSap uint32 `protobuf:"varint,11,opt,name=start_with_sap,json=startWithSap,proto3" json:"start_with_sap,omitempty"`
	//dash的信息
	SegmentBase *DashSegmentBase `protobuf:"bytes,12,opt,name=segment_base,json=segmentBase,proto3" json:"segment_base,omitempty"`
	//dash的信息
	Codecid uint32 `protobuf:"varint,13,opt,name=codecid,proto3" json:"codecid,omitempty"`
	//视频分片的md5,只有dash离线下载才有值
	Md5 string `protobuf:"bytes,14,opt,name=md5,proto3" json:"md5,omitempty"`
	//视频分片的大小, 单位Byte,只有dash离线下载才有值
	Size_ uint64 `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`
	//表示清晰度是否非全二压，1表示非全二压
	//此字段对于dash audio无效
	NoRexcode            int32    `protobuf:"varint,16,opt,name=no_rexcode,json=noRexcode,proto3" json:"no_rexcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DashItem) Reset()         { *m = DashItem{} }
func (m *DashItem) String() string { return proto.CompactTextString(m) }
func (*DashItem) ProtoMessage()    {}
func (*DashItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{34}
}
func (m *DashItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DashItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DashItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DashItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DashItem.Merge(m, src)
}
func (m *DashItem) XXX_Size() int {
	return m.Size()
}
func (m *DashItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DashItem.DiscardUnknown(m)
}

var xxx_messageInfo_DashItem proto.InternalMessageInfo

func (m *DashItem) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DashItem) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *DashItem) GetBackupUrl() []string {
	if m != nil {
		return m.BackupUrl
	}
	return nil
}

func (m *DashItem) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *DashItem) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *DashItem) GetCodecs() string {
	if m != nil {
		return m.Codecs
	}
	return ""
}

func (m *DashItem) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *DashItem) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *DashItem) GetFrameRate() string {
	if m != nil {
		return m.FrameRate
	}
	return ""
}

func (m *DashItem) GetSar() string {
	if m != nil {
		return m.Sar
	}
	return ""
}

func (m *DashItem) GetStartWithSap() uint32 {
	if m != nil {
		return m.StartWithSap
	}
	return 0
}

func (m *DashItem) GetSegmentBase() *DashSegmentBase {
	if m != nil {
		return m.SegmentBase
	}
	return nil
}

func (m *DashItem) GetCodecid() uint32 {
	if m != nil {
		return m.Codecid
	}
	return 0
}

func (m *DashItem) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *DashItem) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *DashItem) GetNoRexcode() int32 {
	if m != nil {
		return m.NoRexcode
	}
	return 0
}

type FormatDescription struct {
	//清晰度qn
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	//清晰度格式
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	//清晰度描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	//6.9版本开始新描述
	NewDescription string `protobuf:"bytes,4,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
	//选中态的清晰度描述
	DisplayDesc string `protobuf:"bytes,5,opt,name=display_desc,json=displayDesc,proto3" json:"display_desc,omitempty"`
	//选中态的清晰度描述的角标
	Superscript string `protobuf:"bytes,6,opt,name=superscript,proto3" json:"superscript,omitempty"`
	//清晰度支持的编码格式
	Codecs               []string `protobuf:"bytes,7,rep,name=codecs,proto3" json:"codecs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FormatDescription) Reset()         { *m = FormatDescription{} }
func (m *FormatDescription) String() string { return proto.CompactTextString(m) }
func (*FormatDescription) ProtoMessage()    {}
func (*FormatDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{35}
}
func (m *FormatDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FormatDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FormatDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FormatDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FormatDescription.Merge(m, src)
}
func (m *FormatDescription) XXX_Size() int {
	return m.Size()
}
func (m *FormatDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_FormatDescription.DiscardUnknown(m)
}

var xxx_messageInfo_FormatDescription proto.InternalMessageInfo

func (m *FormatDescription) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *FormatDescription) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FormatDescription) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FormatDescription) GetNewDescription() string {
	if m != nil {
		return m.NewDescription
	}
	return ""
}

func (m *FormatDescription) GetDisplayDesc() string {
	if m != nil {
		return m.DisplayDesc
	}
	return ""
}

func (m *FormatDescription) GetSuperscript() string {
	if m != nil {
		return m.Superscript
	}
	return ""
}

func (m *FormatDescription) GetCodecs() []string {
	if m != nil {
		return m.Codecs
	}
	return nil
}

type HlsCommonReq struct {
	//稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	//稿件cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	//请求清晰度
	Qn int64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	//平台：ios、android
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	//默认0 播放器请求端使用的, 功能版本号
	Fnver int32 `protobuf:"varint,5,opt,name=fnver,proto3" json:"fnver,omitempty"`
	//默认0 播放器请求端使用的, 功能标识, 每位(为1)标识一个功能
	Fnval int32 `protobuf:"varint,6,opt,name=fnval,proto3" json:"fnval,omitempty"`
	//登陆用户mid
	Mid int64 `protobuf:"varint,7,opt,name=mid,proto3" json:"mid,omitempty"`
	// 兜底返回播放数
	BackupNum uint32 `protobuf:"varint,8,opt,name=backup_num,json=backupNum,proto3" json:"backup_num,omitempty"`
	//区分0:ugc, 1:pgc, 2:pugv请求
	Business Business `protobuf:"varint,9,opt,name=business,proto3,enum=playurl.service.v2.Business" json:"business,omitempty"`
	//返回url是否强制使用域名(非ip地址), force_host=1 返回http域名,2 返回https域名 其他均无效, 默认无效离线下载默认=2
	ForceHost int32 `protobuf:"varint,10,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	//区分 0:airplay投屏和1:画中画请求
	RequestType RequestType `protobuf:"varint,11,opt,name=request_type,json=requestType,proto3,enum=playurl.service.v2.RequestType" json:"request_type,omitempty"`
	//设备：phone、ipad
	Device string `protobuf:"bytes,12,opt,name=device,proto3" json:"device,omitempty"`
	//平台：iphone、white、ipad、android、android_i、android_G、iphone_i、ipad_i、android_tv（后面带 I 是表示海外版、android_G 安卓谷歌版）
	MobiApp string `protobuf:"bytes,13,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 投屏设备 默认其他=0，OTT设备=1
	DeviceType int32 `protobuf:"varint,14,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// 网络类型
	NetType NetworkType `protobuf:"varint,15,opt,name=net_type,json=netType,proto3,enum=playurl.service.v2.NetworkType" json:"net_type,omitempty"`
	// 免流类型
	TfType TFType `protobuf:"varint,16,opt,name=tf_type,json=tfType,proto3,enum=playurl.service.v2.TFType" json:"tf_type,omitempty"`
	//客户端设备号
	Buvid string `protobuf:"bytes,17,opt,name=buvid,proto3" json:"buvid,omitempty"`
	// 是否开启vip管控
	VerifyVip int32 `protobuf:"varint,18,opt,name=verify_vip,json=verifyVip,proto3" json:"verify_vip,omitempty"`
	// 版本号
	Build int32 `protobuf:"varint,19,opt,name=build,proto3" json:"build,omitempty"`
	//区分qn来源 2：audio 1：video请求
	QnCategory QnCategory `protobuf:"varint,20,opt,name=qn_category,json=qnCategory,proto3,enum=playurl.service.v2.QnCategory" json:"qn_category,omitempty"`
	//是否开启dolby
	Dolby int64 `protobuf:"varint,21,opt,name=dolby,proto3" json:"dolby,omitempty"`
	//青少年模式
	TeenagersMode int64 `protobuf:"varint,22,opt,name=teenagers_mode,json=teenagersMode,proto3" json:"teenagers_mode,omitempty"`
	//课堂模式
	LessonsMode          int64    `protobuf:"varint,23,opt,name=lessons_mode,json=lessonsMode,proto3" json:"lessons_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HlsCommonReq) Reset()         { *m = HlsCommonReq{} }
func (m *HlsCommonReq) String() string { return proto.CompactTextString(m) }
func (*HlsCommonReq) ProtoMessage()    {}
func (*HlsCommonReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{36}
}
func (m *HlsCommonReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HlsCommonReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HlsCommonReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HlsCommonReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HlsCommonReq.Merge(m, src)
}
func (m *HlsCommonReq) XXX_Size() int {
	return m.Size()
}
func (m *HlsCommonReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HlsCommonReq.DiscardUnknown(m)
}

var xxx_messageInfo_HlsCommonReq proto.InternalMessageInfo

func (m *HlsCommonReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *HlsCommonReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *HlsCommonReq) GetQn() int64 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *HlsCommonReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *HlsCommonReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *HlsCommonReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *HlsCommonReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *HlsCommonReq) GetBackupNum() uint32 {
	if m != nil {
		return m.BackupNum
	}
	return 0
}

func (m *HlsCommonReq) GetBusiness() Business {
	if m != nil {
		return m.Business
	}
	return Business_UGC
}

func (m *HlsCommonReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *HlsCommonReq) GetRequestType() RequestType {
	if m != nil {
		return m.RequestType
	}
	return RequestType_AIRPLAY
}

func (m *HlsCommonReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *HlsCommonReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *HlsCommonReq) GetDeviceType() int32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *HlsCommonReq) GetNetType() NetworkType {
	if m != nil {
		return m.NetType
	}
	return NetworkType_NT_UNKNOWN
}

func (m *HlsCommonReq) GetTfType() TFType {
	if m != nil {
		return m.TfType
	}
	return TFType_TF_UNKNOWN
}

func (m *HlsCommonReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *HlsCommonReq) GetVerifyVip() int32 {
	if m != nil {
		return m.VerifyVip
	}
	return 0
}

func (m *HlsCommonReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *HlsCommonReq) GetQnCategory() QnCategory {
	if m != nil {
		return m.QnCategory
	}
	return QnCategory_MixType
}

func (m *HlsCommonReq) GetDolby() int64 {
	if m != nil {
		return m.Dolby
	}
	return 0
}

func (m *HlsCommonReq) GetTeenagersMode() int64 {
	if m != nil {
		return m.TeenagersMode
	}
	return 0
}

func (m *HlsCommonReq) GetLessonsMode() int64 {
	if m != nil {
		return m.LessonsMode
	}
	return 0
}

type HlsSchedulerReply struct {
	// 播放列表
	Playurl              *HlsResponseMsg `protobuf:"bytes,1,opt,name=playurl,proto3" json:"playurl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HlsSchedulerReply) Reset()         { *m = HlsSchedulerReply{} }
func (m *HlsSchedulerReply) String() string { return proto.CompactTextString(m) }
func (*HlsSchedulerReply) ProtoMessage()    {}
func (*HlsSchedulerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{37}
}
func (m *HlsSchedulerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HlsSchedulerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HlsSchedulerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HlsSchedulerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HlsSchedulerReply.Merge(m, src)
}
func (m *HlsSchedulerReply) XXX_Size() int {
	return m.Size()
}
func (m *HlsSchedulerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HlsSchedulerReply.DiscardUnknown(m)
}

var xxx_messageInfo_HlsSchedulerReply proto.InternalMessageInfo

func (m *HlsSchedulerReply) GetPlayurl() *HlsResponseMsg {
	if m != nil {
		return m.Playurl
	}
	return nil
}

type MasterSchedulerReply struct {
	// 视频音频和视频相关qn
	Info                 *MasterScheduler `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MasterSchedulerReply) Reset()         { *m = MasterSchedulerReply{} }
func (m *MasterSchedulerReply) String() string { return proto.CompactTextString(m) }
func (*MasterSchedulerReply) ProtoMessage()    {}
func (*MasterSchedulerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{38}
}
func (m *MasterSchedulerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MasterSchedulerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MasterSchedulerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MasterSchedulerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterSchedulerReply.Merge(m, src)
}
func (m *MasterSchedulerReply) XXX_Size() int {
	return m.Size()
}
func (m *MasterSchedulerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterSchedulerReply.DiscardUnknown(m)
}

var xxx_messageInfo_MasterSchedulerReply proto.InternalMessageInfo

func (m *MasterSchedulerReply) GetInfo() *MasterScheduler {
	if m != nil {
		return m.Info
	}
	return nil
}

type MasterScheduler struct {
	//错误状态码
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//错误描述
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//视频meta信息
	Video *M3U8Video `protobuf:"bytes,3,opt,name=Video,proto3" json:"Video,omitempty"`
	//音频meta信息
	Audio *M3U8Audio `protobuf:"bytes,4,opt,name=Audio,proto3" json:"Audio,omitempty"`
	//返回等于或低于请求清晰度的所有hls资源
	Videos               []*M3U8Video `protobuf:"bytes,5,rep,name=videos,proto3" json:"videos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MasterScheduler) Reset()         { *m = MasterScheduler{} }
func (m *MasterScheduler) String() string { return proto.CompactTextString(m) }
func (*MasterScheduler) ProtoMessage()    {}
func (*MasterScheduler) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{39}
}
func (m *MasterScheduler) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MasterScheduler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MasterScheduler.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MasterScheduler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterScheduler.Merge(m, src)
}
func (m *MasterScheduler) XXX_Size() int {
	return m.Size()
}
func (m *MasterScheduler) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterScheduler.DiscardUnknown(m)
}

var xxx_messageInfo_MasterScheduler proto.InternalMessageInfo

func (m *MasterScheduler) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MasterScheduler) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MasterScheduler) GetVideo() *M3U8Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *MasterScheduler) GetAudio() *M3U8Audio {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *MasterScheduler) GetVideos() []*M3U8Video {
	if m != nil {
		return m.Videos
	}
	return nil
}

type M3U8Video struct {
	//视频清晰度
	Qn uint32 `protobuf:"varint,1,opt,name=qn,proto3" json:"qn,omitempty"`
	//带宽
	Bandwidth uint32 `protobuf:"varint,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	//分辨率
	Resolution string `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	//编码格式
	Codecs string `protobuf:"bytes,4,opt,name=codecs,proto3" json:"codecs,omitempty"`
	//清晰度描述
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	//帧率
	FrameRate string `protobuf:"bytes,6,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	//平均带宽
	AverageBandwidth     uint32   `protobuf:"varint,7,opt,name=average_bandwidth,json=averageBandwidth,proto3" json:"average_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *M3U8Video) Reset()         { *m = M3U8Video{} }
func (m *M3U8Video) String() string { return proto.CompactTextString(m) }
func (*M3U8Video) ProtoMessage()    {}
func (*M3U8Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{40}
}
func (m *M3U8Video) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *M3U8Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_M3U8Video.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *M3U8Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M3U8Video.Merge(m, src)
}
func (m *M3U8Video) XXX_Size() int {
	return m.Size()
}
func (m *M3U8Video) XXX_DiscardUnknown() {
	xxx_messageInfo_M3U8Video.DiscardUnknown(m)
}

var xxx_messageInfo_M3U8Video proto.InternalMessageInfo

func (m *M3U8Video) GetQn() uint32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *M3U8Video) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *M3U8Video) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *M3U8Video) GetCodecs() string {
	if m != nil {
		return m.Codecs
	}
	return ""
}

func (m *M3U8Video) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *M3U8Video) GetFrameRate() string {
	if m != nil {
		return m.FrameRate
	}
	return ""
}

func (m *M3U8Video) GetAverageBandwidth() uint32 {
	if m != nil {
		return m.AverageBandwidth
	}
	return 0
}

type M3U8Audio struct {
	//音频qn
	Qn uint32 `protobuf:"varint,1,opt,name=qn,proto3" json:"qn,omitempty"`
	//编码格式
	Codecs string `protobuf:"bytes,2,opt,name=codecs,proto3" json:"codecs,omitempty"`
	//视频qn
	GroupId              uint32   `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *M3U8Audio) Reset()         { *m = M3U8Audio{} }
func (m *M3U8Audio) String() string { return proto.CompactTextString(m) }
func (*M3U8Audio) ProtoMessage()    {}
func (*M3U8Audio) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{41}
}
func (m *M3U8Audio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *M3U8Audio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_M3U8Audio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *M3U8Audio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M3U8Audio.Merge(m, src)
}
func (m *M3U8Audio) XXX_Size() int {
	return m.Size()
}
func (m *M3U8Audio) XXX_DiscardUnknown() {
	xxx_messageInfo_M3U8Audio.DiscardUnknown(m)
}

var xxx_messageInfo_M3U8Audio proto.InternalMessageInfo

func (m *M3U8Audio) GetQn() uint32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *M3U8Audio) GetCodecs() string {
	if m != nil {
		return m.Codecs
	}
	return ""
}

func (m *M3U8Audio) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type HlsResponseMsg struct {
	//错误状态码
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//错误描述
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	//视频类型 1:flv 2:mp4 3:hls
	Type ResponseType `protobuf:"varint,3,opt,name=type,proto3,enum=playurl.service.v2.ResponseType" json:"type,omitempty"`
	//返回视频的清晰度
	Quality uint32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
	//返回视频的格式
	Format string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	//返回视频的总时长, 单位为ms
	Timelength uint64 `protobuf:"varint,6,opt,name=timelength,proto3" json:"timelength,omitempty"`
	//返回视频的编码号
	VideoCodecid uint32 `protobuf:"varint,7,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid,omitempty"`
	//返回视频的是否支持投影
	VideoProject bool `protobuf:"varint,8,opt,name=video_project,json=videoProject,proto3" json:"video_project,omitempty"`
	//返回视频播放url的列表，type为hls时，没有这个字段
	Durl []*ResponseUrl `protobuf:"bytes,9,rep,name=durl,proto3" json:"durl,omitempty"`
	//返回视频拥有的格式列表
	SupportFormats       []*FormatDescription `protobuf:"bytes,10,rep,name=support_formats,json=supportFormats,proto3" json:"support_formats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HlsResponseMsg) Reset()         { *m = HlsResponseMsg{} }
func (m *HlsResponseMsg) String() string { return proto.CompactTextString(m) }
func (*HlsResponseMsg) ProtoMessage()    {}
func (*HlsResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{42}
}
func (m *HlsResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HlsResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HlsResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HlsResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HlsResponseMsg.Merge(m, src)
}
func (m *HlsResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *HlsResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HlsResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HlsResponseMsg proto.InternalMessageInfo

func (m *HlsResponseMsg) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HlsResponseMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HlsResponseMsg) GetType() ResponseType {
	if m != nil {
		return m.Type
	}
	return ResponseType_NONE
}

func (m *HlsResponseMsg) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *HlsResponseMsg) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *HlsResponseMsg) GetTimelength() uint64 {
	if m != nil {
		return m.Timelength
	}
	return 0
}

func (m *HlsResponseMsg) GetVideoCodecid() uint32 {
	if m != nil {
		return m.VideoCodecid
	}
	return 0
}

func (m *HlsResponseMsg) GetVideoProject() bool {
	if m != nil {
		return m.VideoProject
	}
	return false
}

func (m *HlsResponseMsg) GetDurl() []*ResponseUrl {
	if m != nil {
		return m.Durl
	}
	return nil
}

func (m *HlsResponseMsg) GetSupportFormats() []*FormatDescription {
	if m != nil {
		return m.SupportFormats
	}
	return nil
}

type M3U8ResponseMsg struct {
	//错误状态码
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//错误描述
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 音频或视频m3u8信息
	M3U8Data             string   `protobuf:"bytes,3,opt,name=m3u8_data,json=m3u8Data,proto3" json:"m3u8_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *M3U8ResponseMsg) Reset()         { *m = M3U8ResponseMsg{} }
func (m *M3U8ResponseMsg) String() string { return proto.CompactTextString(m) }
func (*M3U8ResponseMsg) ProtoMessage()    {}
func (*M3U8ResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{43}
}
func (m *M3U8ResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *M3U8ResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_M3U8ResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *M3U8ResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M3U8ResponseMsg.Merge(m, src)
}
func (m *M3U8ResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *M3U8ResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_M3U8ResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_M3U8ResponseMsg proto.InternalMessageInfo

func (m *M3U8ResponseMsg) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *M3U8ResponseMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *M3U8ResponseMsg) GetM3U8Data() string {
	if m != nil {
		return m.M3U8Data
	}
	return ""
}

type M3U8SchedulerReply struct {
	// 视频或者音频播放详细信息
	Info                 *M3U8ResponseMsg `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *M3U8SchedulerReply) Reset()         { *m = M3U8SchedulerReply{} }
func (m *M3U8SchedulerReply) String() string { return proto.CompactTextString(m) }
func (*M3U8SchedulerReply) ProtoMessage()    {}
func (*M3U8SchedulerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{44}
}
func (m *M3U8SchedulerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *M3U8SchedulerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_M3U8SchedulerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *M3U8SchedulerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_M3U8SchedulerReply.Merge(m, src)
}
func (m *M3U8SchedulerReply) XXX_Size() int {
	return m.Size()
}
func (m *M3U8SchedulerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_M3U8SchedulerReply.DiscardUnknown(m)
}

var xxx_messageInfo_M3U8SchedulerReply proto.InternalMessageInfo

func (m *M3U8SchedulerReply) GetInfo() *M3U8ResponseMsg {
	if m != nil {
		return m.Info
	}
	return nil
}

type ProjectReq struct {
	//稿件aid
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	//稿件cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	//清晰度
	Qn int64 `protobuf:"varint,3,opt,name=qn,proto3" json:"qn,omitempty"`
	//平台
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	//默认0 播放器请求端使用的, 功能版本号
	Fnver int32 `protobuf:"varint,5,opt,name=fnver,proto3" json:"fnver,omitempty"`
	//默认0 播放器请求端使用的, 功能标识
	Fnval int32 `protobuf:"varint,6,opt,name=fnval,proto3" json:"fnval,omitempty"`
	//登录mid
	Mid int64 `protobuf:"varint,7,opt,name=mid,proto3" json:"mid,omitempty"`
	//返回备用url的个数（最多可能的个数）
	BackupNum uint32 `protobuf:"varint,8,opt,name=backup_num,json=backupNum,proto3" json:"backup_num,omitempty"`
	//是否是离线下载请求, 1为请求flv，2请求dash,其他均无效
	Download uint32 `protobuf:"varint,9,opt,name=download,proto3" json:"download,omitempty"`
	//返回url是否强制使用域名(非ip地址), force_host=1使用http域名，force_host=2使用https域名, 0为使用ip地址
	ForceHost int32 `protobuf:"varint,10,opt,name=force_host,json=forceHost,proto3" json:"force_host,omitempty"`
	//是否需要4K视频, fourk=true表示需要4K视频, 其他都是不需要
	Fourk bool `protobuf:"varint,11,opt,name=fourk,proto3" json:"fourk,omitempty"`
	//设备：phone、ipad
	Device string `protobuf:"bytes,12,opt,name=device,proto3" json:"device,omitempty"`
	//平台：iphone、white、ipad、android、android_i、android_G、iphone_i、ipad_i、android_tv（后面带 I 是表示海外版、android_G 安卓谷歌版）
	MobiApp string `protobuf:"bytes,13,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	// 使用协议 默认乐播=0，自建协议=1，云投屏=2，airplay=3
	Protocol int32 `protobuf:"varint,14,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// 投屏设备 默认其他=0，OTT设备=1
	DeviceType int32 `protobuf:"varint,15,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// 业务 ugc/pgc/pugv
	Business Business `protobuf:"varint,16,opt,name=business,proto3,enum=playurl.service.v2.Business" json:"business,omitempty"`
	//客户端设备唯一标识
	Buvid                string   `protobuf:"bytes,17,opt,name=buvid,proto3" json:"buvid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectReq) Reset()         { *m = ProjectReq{} }
func (m *ProjectReq) String() string { return proto.CompactTextString(m) }
func (*ProjectReq) ProtoMessage()    {}
func (*ProjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{45}
}
func (m *ProjectReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectReq.Merge(m, src)
}
func (m *ProjectReq) XXX_Size() int {
	return m.Size()
}
func (m *ProjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectReq proto.InternalMessageInfo

func (m *ProjectReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ProjectReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ProjectReq) GetQn() int64 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *ProjectReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ProjectReq) GetFnver() int32 {
	if m != nil {
		return m.Fnver
	}
	return 0
}

func (m *ProjectReq) GetFnval() int32 {
	if m != nil {
		return m.Fnval
	}
	return 0
}

func (m *ProjectReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ProjectReq) GetBackupNum() uint32 {
	if m != nil {
		return m.BackupNum
	}
	return 0
}

func (m *ProjectReq) GetDownload() uint32 {
	if m != nil {
		return m.Download
	}
	return 0
}

func (m *ProjectReq) GetForceHost() int32 {
	if m != nil {
		return m.ForceHost
	}
	return 0
}

func (m *ProjectReq) GetFourk() bool {
	if m != nil {
		return m.Fourk
	}
	return false
}

func (m *ProjectReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ProjectReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *ProjectReq) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *ProjectReq) GetDeviceType() int32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *ProjectReq) GetBusiness() Business {
	if m != nil {
		return m.Business
	}
	return Business_UGC
}

func (m *ProjectReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

type ProjectReply struct {
	//播放地址
	Playurl              *ResponseMsg `protobuf:"bytes,1,opt,name=playurl,proto3" json:"playurl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProjectReply) Reset()         { *m = ProjectReply{} }
func (m *ProjectReply) String() string { return proto.CompactTextString(m) }
func (*ProjectReply) ProtoMessage()    {}
func (*ProjectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{46}
}
func (m *ProjectReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectReply.Merge(m, src)
}
func (m *ProjectReply) XXX_Size() int {
	return m.Size()
}
func (m *ProjectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectReply proto.InternalMessageInfo

func (m *ProjectReply) GetPlayurl() *ResponseMsg {
	if m != nil {
		return m.Playurl
	}
	return nil
}

type PlayConfEditReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayConfEditReply) Reset()         { *m = PlayConfEditReply{} }
func (m *PlayConfEditReply) String() string { return proto.CompactTextString(m) }
func (*PlayConfEditReply) ProtoMessage()    {}
func (*PlayConfEditReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{47}
}
func (m *PlayConfEditReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayConfEditReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayConfEditReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayConfEditReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayConfEditReply.Merge(m, src)
}
func (m *PlayConfEditReply) XXX_Size() int {
	return m.Size()
}
func (m *PlayConfEditReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayConfEditReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlayConfEditReply proto.InternalMessageInfo

type ChronosPkgReq struct {
	Aid                  int64    `protobuf:"varint,1,opt,name=aid,proto3" json:"aid,omitempty" validate:"gt=0,required"`
	Cid                  int64    `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" validate:"gt=0,required"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	MobiApp              string   `protobuf:"bytes,4,opt,name=mobi_app,json=mobiApp,proto3" json:"mobi_app,omitempty"`
	Build                int32    `protobuf:"varint,5,opt,name=build,proto3" json:"build,omitempty"`
	Buvid                string   `protobuf:"bytes,6,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChronosPkgReq) Reset()         { *m = ChronosPkgReq{} }
func (m *ChronosPkgReq) String() string { return proto.CompactTextString(m) }
func (*ChronosPkgReq) ProtoMessage()    {}
func (*ChronosPkgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{48}
}
func (m *ChronosPkgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChronosPkgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChronosPkgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChronosPkgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChronosPkgReq.Merge(m, src)
}
func (m *ChronosPkgReq) XXX_Size() int {
	return m.Size()
}
func (m *ChronosPkgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChronosPkgReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChronosPkgReq proto.InternalMessageInfo

func (m *ChronosPkgReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ChronosPkgReq) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ChronosPkgReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChronosPkgReq) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *ChronosPkgReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *ChronosPkgReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *ChronosPkgReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type ChronosPkgReply struct {
	Md5 string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
	// chronos资源包
	File                 string   `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChronosPkgReply) Reset()         { *m = ChronosPkgReply{} }
func (m *ChronosPkgReply) String() string { return proto.CompactTextString(m) }
func (*ChronosPkgReply) ProtoMessage()    {}
func (*ChronosPkgReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9b48162c71d36f6, []int{49}
}
func (m *ChronosPkgReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChronosPkgReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChronosPkgReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChronosPkgReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChronosPkgReply.Merge(m, src)
}
func (m *ChronosPkgReply) XXX_Size() int {
	return m.Size()
}
func (m *ChronosPkgReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChronosPkgReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChronosPkgReply proto.InternalMessageInfo

func (m *ChronosPkgReply) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *ChronosPkgReply) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func init() {
	proto.RegisterEnum("playurl.service.v2.OnlineBusiness", OnlineBusiness_name, OnlineBusiness_value)
	proto.RegisterEnum("playurl.service.v2.Group", Group_name, Group_value)
	proto.RegisterEnum("playurl.service.v2.ConfType", ConfType_name, ConfType_value)
	proto.RegisterEnum("playurl.service.v2.NetworkType", NetworkType_name, NetworkType_value)
	proto.RegisterEnum("playurl.service.v2.TFType", TFType_name, TFType_value)
	proto.RegisterEnum("playurl.service.v2.BusinessSource", BusinessSource_name, BusinessSource_value)
	proto.RegisterEnum("playurl.service.v2.ResponseType", ResponseType_name, ResponseType_value)
	proto.RegisterEnum("playurl.service.v2.Business", Business_name, Business_value)
	proto.RegisterEnum("playurl.service.v2.QnCategory", QnCategory_name, QnCategory_value)
	proto.RegisterEnum("playurl.service.v2.RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("playurl.service.v2.DolbyItem_Type", DolbyItem_Type_name, DolbyItem_Type_value)
	proto.RegisterType((*PlayOnlineReq)(nil), "playurl.service.v2.PlayOnlineReq")
	proto.RegisterType((*PlayOnlineReply)(nil), "playurl.service.v2.PlayOnlineReply")
	proto.RegisterMapType((map[string]int64)(nil), "playurl.service.v2.PlayOnlineReply.CountEntry")
	proto.RegisterType((*PlayConfReq)(nil), "playurl.service.v2.PlayConfReq")
	proto.RegisterType((*PlayConfReply)(nil), "playurl.service.v2.PlayConfReply")
	proto.RegisterType((*PlayConfEditReq)(nil), "playurl.service.v2.PlayConfEditReq")
	proto.RegisterType((*NoReply)(nil), "playurl.service.v2.NoReply")
	proto.RegisterType((*PlayConfState)(nil), "playurl.service.v2.PlayConfState")
	proto.RegisterType((*FieldValue)(nil), "playurl.service.v2.FieldValue")
	proto.RegisterType((*PlayViewReply)(nil), "playurl.service.v2.PlayViewReply")
	proto.RegisterType((*VipConf)(nil), "playurl.service.v2.VipConf")
	proto.RegisterType((*VolumeInfo)(nil), "playurl.service.v2.VolumeInfo")
	proto.RegisterType((*AB)(nil), "playurl.service.v2.AB")
	proto.RegisterType((*Glance)(nil), "playurl.service.v2.Glance")
	proto.RegisterType((*Event)(nil), "playurl.service.v2.Event")
	proto.RegisterType((*Shake)(nil), "playurl.service.v2.Shake")
	proto.RegisterType((*Chronos)(nil), "playurl.service.v2.Chronos")
	proto.RegisterType((*PlayUrlInfo)(nil), "playurl.service.v2.PlayUrlInfo")
	proto.RegisterType((*PlayAbilityConf)(nil), "playurl.service.v2.PlayAbilityConf")
	proto.RegisterType((*CloudConf)(nil), "playurl.service.v2.CloudConf")
	proto.RegisterType((*ConfValue)(nil), "playurl.service.v2.ConfValue")
	proto.RegisterType((*PlayArcConf)(nil), "playurl.service.v2.PlayArcConf")
	proto.RegisterType((*ArcConf)(nil), "playurl.service.v2.ArcConf")
	proto.RegisterType((*ExtraContent)(nil), "playurl.service.v2.ExtraContent")
	proto.RegisterType((*PlayViewReq)(nil), "playurl.service.v2.PlayViewReq")
	proto.RegisterType((*PlayURLReq)(nil), "playurl.service.v2.PlayURLReq")
	proto.RegisterType((*PlayURLReply)(nil), "playurl.service.v2.PlayURLReply")
	proto.RegisterType((*ExtInfo)(nil), "playurl.service.v2.ExtInfo")
	proto.RegisterType((*VipControl)(nil), "playurl.service.v2.VipControl")
	proto.RegisterType((*ResponseMsg)(nil), "playurl.service.v2.ResponseMsg")
	proto.RegisterType((*ResponseUrl)(nil), "playurl.service.v2.ResponseUrl")
	proto.RegisterType((*ResponseDash)(nil), "playurl.service.v2.ResponseDash")
	proto.RegisterType((*LossLessItem)(nil), "playurl.service.v2.LossLessItem")
	proto.RegisterType((*DolbyItem)(nil), "playurl.service.v2.DolbyItem")
	proto.RegisterType((*DashSegmentBase)(nil), "playurl.service.v2.DashSegmentBase")
	proto.RegisterType((*DashItem)(nil), "playurl.service.v2.DashItem")
	proto.RegisterType((*FormatDescription)(nil), "playurl.service.v2.FormatDescription")
	proto.RegisterType((*HlsCommonReq)(nil), "playurl.service.v2.HlsCommonReq")
	proto.RegisterType((*HlsSchedulerReply)(nil), "playurl.service.v2.HlsSchedulerReply")
	proto.RegisterType((*MasterSchedulerReply)(nil), "playurl.service.v2.MasterSchedulerReply")
	proto.RegisterType((*MasterScheduler)(nil), "playurl.service.v2.MasterScheduler")
	proto.RegisterType((*M3U8Video)(nil), "playurl.service.v2.M3u8Video")
	proto.RegisterType((*M3U8Audio)(nil), "playurl.service.v2.M3u8Audio")
	proto.RegisterType((*HlsResponseMsg)(nil), "playurl.service.v2.HlsResponseMsg")
	proto.RegisterType((*M3U8ResponseMsg)(nil), "playurl.service.v2.M3u8ResponseMsg")
	proto.RegisterType((*M3U8SchedulerReply)(nil), "playurl.service.v2.M3u8SchedulerReply")
	proto.RegisterType((*ProjectReq)(nil), "playurl.service.v2.ProjectReq")
	proto.RegisterType((*ProjectReply)(nil), "playurl.service.v2.ProjectReply")
	proto.RegisterType((*PlayConfEditReply)(nil), "playurl.service.v2.PlayConfEditReply")
	proto.RegisterType((*ChronosPkgReq)(nil), "playurl.service.v2.ChronosPkgReq")
	proto.RegisterType((*ChronosPkgReply)(nil), "playurl.service.v2.ChronosPkgReply")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/playurl/service/api/v2/api.proto", fileDescriptor_e9b48162c71d36f6)
}

var fileDescriptor_e9b48162c71d36f6 = []byte{
	// 4858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7b, 0x4d, 0x6c, 0x1b, 0x49,
	0x76, 0xb0, 0xf9, 0x4f, 0x3e, 0xfe, 0xa8, 0x55, 0xfe, 0x93, 0xed, 0xb1, 0x2c, 0xb7, 0x77, 0x66,
	0x0d, 0x7f, 0x9f, 0xe5, 0x40, 0x5e, 0xef, 0x6a, 0x8d, 0xdd, 0x9d, 0xa1, 0x48, 0xca, 0x62, 0x4c,
	0x91, 0x9a, 0x22, 0x65, 0x67, 0x06, 0xb3, 0x69, 0xb4, 0xd8, 0x45, 0xb2, 0xe3, 0x66, 0x37, 0xdd,
	0xdd, 0x94, 0xac, 0xb9, 0xe5, 0x92, 0x5b, 0x8e, 0x01, 0x72, 0x5a, 0xe4, 0xbc, 0x48, 0x6e, 0x0b,
	0xe4, 0x94, 0xdc, 0x02, 0x24, 0xb7, 0x04, 0xb9, 0x26, 0x83, 0xc5, 0x24, 0xd7, 0x5c, 0xf6, 0xba,
	0x97, 0xa0, 0x5e, 0x55, 0x37, 0x9b, 0x14, 0x49, 0xd1, 0x1e, 0x20, 0x39, 0x64, 0x0e, 0x82, 0xea,
	0xbd, 0x7e, 0xef, 0xf5, 0xab, 0x7a, 0xaf, 0xde, 0x4f, 0x55, 0x13, 0x7e, 0xd2, 0x77, 0x1e, 0xf7,
	0x75, 0x9f, 0x9d, 0xe9, 0xe7, 0x4f, 0xf4, 0xd1, 0x88, 0xff, 0x3d, 0xf6, 0x4e, 0xdd, 0x27, 0x23,
	0x4b, 0x3f, 0x1f, 0xbb, 0xd6, 0x13, 0x8f, 0xb9, 0xa7, 0x66, 0x97, 0x3d, 0xd1, 0x47, 0xe6, 0x93,
	0xd3, 0x1d, 0xfe, 0x6f, 0x7b, 0xe4, 0x3a, 0xbe, 0x43, 0x88, 0xa4, 0xd8, 0x96, 0x14, 0xdb, 0xa7,
	0x3b, 0xb7, 0x1f, 0xf7, 0x4d, 0x7f, 0x30, 0x3e, 0xd9, 0xee, 0x3a, 0xc3, 0x27, 0x7d, 0xa7, 0xef,
	0x3c, 0x41, 0xd2, 0x93, 0x71, 0x0f, 0x21, 0x04, 0x70, 0x24, 0x44, 0xa8, 0x1e, 0x14, 0x8f, 0x2c,
	0xfd, 0xbc, 0x65, 0x5b, 0xa6, 0xcd, 0x28, 0x7b, 0x4b, 0x14, 0x48, 0xe8, 0xa6, 0xb1, 0x11, 0xdb,
	0x8a, 0x3d, 0x4c, 0x50, 0x3e, 0xe4, 0x98, 0xae, 0x69, 0x6c, 0xc4, 0x05, 0xa6, 0x6b, 0x1a, 0xe4,
	0x17, 0x90, 0x3d, 0x19, 0x7b, 0xa6, 0xcd, 0x3c, 0x6f, 0x23, 0xb1, 0x15, 0x7b, 0x58, 0xda, 0x51,
	0xb7, 0x2f, 0xaa, 0xb2, 0x2d, 0x84, 0xee, 0x49, 0x4a, 0x1a, 0xf2, 0xa8, 0xbf, 0x8e, 0xc1, 0x5a,
	0xf4, 0xad, 0x23, 0xeb, 0x9c, 0x54, 0x21, 0xd5, 0x75, 0xc6, 0xb6, 0xbf, 0x11, 0xdb, 0x4a, 0x3c,
	0xcc, 0xef, 0x6c, 0xcf, 0x13, 0x38, 0xc3, 0xb3, 0x5d, 0xe1, 0x0c, 0x35, 0xdb, 0x77, 0xcf, 0xa9,
	0x60, 0x26, 0x37, 0x21, 0x63, 0x7a, 0xda, 0xc0, 0x34, 0x18, 0xea, 0x9b, 0xa5, 0x69, 0xd3, 0x3b,
	0x30, 0x0d, 0x76, 0x7b, 0x17, 0x60, 0x42, 0xcd, 0xa7, 0xf4, 0x86, 0x9d, 0xe3, 0x24, 0x73, 0x94,
	0x0f, 0xc9, 0x35, 0x48, 0x9d, 0xea, 0xd6, 0x98, 0xc9, 0x69, 0x0a, 0xe0, 0x79, 0x7c, 0x37, 0xa6,
	0xfe, 0x5b, 0x0c, 0xf2, 0xfc, 0xc5, 0x15, 0xc7, 0xee, 0xf1, 0x05, 0x7a, 0x0c, 0xa9, 0x93, 0xf1,
	0xa9, 0x5c, 0xa2, 0xdc, 0xde, 0xcd, 0xdf, 0x7d, 0x73, 0xef, 0xea, 0xa9, 0x6e, 0x99, 0x86, 0xee,
	0xb3, 0xe7, 0xaa, 0xcb, 0xde, 0x8e, 0x4d, 0x97, 0x19, 0x2a, 0x15, 0x54, 0xfc, 0x55, 0xc3, 0xc9,
	0xea, 0x0d, 0x4d, 0x83, 0xdc, 0x86, 0xec, 0xc8, 0xd2, 0xfd, 0x9e, 0xe3, 0x0e, 0x71, 0xf5, 0x72,
	0x34, 0x84, 0xb9, 0x1a, 0x27, 0x63, 0xd3, 0x32, 0x36, 0x92, 0x5b, 0xb1, 0x87, 0x29, 0x2a, 0x00,
	0xc4, 0xba, 0xba, 0x6d, 0x6c, 0xa4, 0x90, 0x5c, 0x00, 0x1c, 0x3b, 0x74, 0x0c, 0x66, 0x6d, 0xa4,
	0x05, 0x16, 0x01, 0x8e, 0xed, 0x1d, 0x3a, 0x06, 0xdb, 0xc8, 0x08, 0x09, 0x08, 0x90, 0x0d, 0xc8,
	0xf4, 0x8e, 0x1a, 0x4e, 0x57, 0xb7, 0x36, 0xb2, 0x48, 0x1d, 0x80, 0xea, 0xe7, 0xc2, 0x01, 0xc4,
	0xec, 0xb8, 0x21, 0x3e, 0x83, 0x1c, 0x5f, 0x7a, 0xad, 0xeb, 0xd8, 0x3d, 0x9c, 0x63, 0x7e, 0xe7,
	0xc1, 0x22, 0x63, 0x94, 0x4f, 0x4c, 0xcb, 0xf4, 0x05, 0x33, 0x9f, 0x04, 0x8e, 0xd4, 0xbf, 0x89,
	0x0b, 0xf3, 0x72, 0xa0, 0x66, 0x98, 0x3e, 0x5f, 0xb5, 0xaf, 0xa6, 0xa5, 0x72, 0x13, 0xdf, 0x5f,
	0x24, 0x95, 0xf3, 0xb5, 0x7d, 0xdd, 0x67, 0x7b, 0x1f, 0xfd, 0xee, 0x9b, 0x7b, 0x1b, 0x93, 0xc5,
	0xed, 0xfb, 0x3f, 0xff, 0x83, 0xff, 0x3f, 0x59, 0xe1, 0xf0, 0x8d, 0x13, 0x9b, 0xc4, 0x57, 0xb2,
	0xc9, 0xff, 0x86, 0x05, 0x6e, 0x41, 0xb6, 0x37, 0xd2, 0xac, 0x29, 0x13, 0x8c, 0x84, 0x09, 0x72,
	0x90, 0x69, 0x3a, 0xb8, 0xf8, 0xea, 0xbf, 0xc7, 0x26, 0xe6, 0xc0, 0x25, 0x20, 0x3f, 0x85, 0x1c,
	0x5f, 0x33, 0xcd, 0x3f, 0x1f, 0x31, 0x34, 0x47, 0x69, 0xe7, 0xa3, 0x79, 0x0b, 0xc7, 0x39, 0x3a,
	0xe7, 0x23, 0x46, 0xb3, 0x5d, 0x39, 0x22, 0x04, 0x92, 0xde, 0xc0, 0x39, 0x93, 0x3b, 0x01, 0xc7,
	0xe4, 0x53, 0xc8, 0xf7, 0x4c, 0x66, 0x19, 0x9a, 0xf0, 0xf6, 0x04, 0xda, 0x77, 0x73, 0x9e, 0xc0,
	0x7d, 0x4e, 0xf6, 0x8a, 0x53, 0x51, 0xe8, 0x85, 0x63, 0xf2, 0x33, 0x00, 0xd4, 0x47, 0xf0, 0x27,
	0x91, 0xff, 0xee, 0x22, 0x85, 0x04, 0x3b, 0x4e, 0x00, 0x87, 0xea, 0x13, 0x80, 0x89, 0x5c, 0xb2,
	0x01, 0x69, 0xef, 0xcc, 0xf4, 0xbb, 0x03, 0x9c, 0x58, 0xf6, 0xe0, 0x0a, 0x95, 0xf0, 0x5e, 0x46,
	0x6e, 0x47, 0xf5, 0x9f, 0x12, 0x62, 0x41, 0x5e, 0x99, 0xec, 0x4c, 0xf8, 0xe7, 0x73, 0x34, 0xde,
	0xb9, 0x36, 0x76, 0x2d, 0xe9, 0x9e, 0xf7, 0x16, 0x39, 0xd2, 0xb1, 0x6b, 0xd5, 0xed, 0x9e, 0x43,
	0x33, 0x23, 0x01, 0x4c, 0xfb, 0x76, 0xfc, 0x03, 0x7c, 0x9b, 0x3c, 0x83, 0x4c, 0x77, 0xe0, 0x3a,
	0xb6, 0xe3, 0xc9, 0xb5, 0xbb, 0x33, 0x77, 0xee, 0x82, 0x84, 0x06, 0xb4, 0xa1, 0xd2, 0xba, 0xdb,
	0x95, 0x6b, 0xb6, 0x50, 0xe9, 0xb2, 0xdb, 0xc5, 0x77, 0xa2, 0xd2, 0x65, 0xb7, 0x4b, 0x9e, 0x40,
	0x8a, 0x9d, 0x32, 0xdb, 0x47, 0xdf, 0xcb, 0xef, 0xdc, 0x9a, 0xc7, 0x58, 0xe3, 0x04, 0x54, 0xd0,
	0x91, 0x4f, 0x20, 0xae, 0x9f, 0xa0, 0x4f, 0xe6, 0x77, 0x6e, 0xcc, 0xa3, 0x2e, 0xef, 0xd1, 0xb8,
	0x7e, 0x42, 0x7e, 0x0c, 0xe9, 0x53, 0xc7, 0x1a, 0x0f, 0x85, 0xa7, 0x2e, 0x70, 0x83, 0x57, 0x48,
	0x81, 0xcb, 0x28, 0xa9, 0xc9, 0x8f, 0x21, 0x7b, 0x6a, 0x8e, 0xc4, 0x22, 0x66, 0x17, 0x2f, 0xc2,
	0x2b, 0x73, 0x24, 0x26, 0x72, 0x2a, 0x06, 0x6a, 0x15, 0x32, 0x12, 0x47, 0xee, 0x02, 0x58, 0xe6,
	0xd0, 0xf4, 0xb5, 0x9e, 0xcb, 0x84, 0x5b, 0xa7, 0x68, 0x0e, 0x31, 0xfb, 0x2e, 0x63, 0x7c, 0x83,
	0x7a, 0xe3, 0x13, 0xdf, 0xf4, 0x2d, 0x11, 0x90, 0x73, 0x34, 0x84, 0xd5, 0xdf, 0xc7, 0x00, 0x26,
	0x4a, 0x71, 0x49, 0x43, 0xa6, 0x7b, 0x63, 0x97, 0x19, 0x9a, 0x89, 0x92, 0x62, 0x34, 0x17, 0x60,
	0xea, 0xe4, 0x3e, 0x14, 0xc2, 0xc7, 0x96, 0xab, 0xa3, 0xb4, 0x18, 0xcd, 0x07, 0xb8, 0x86, 0xab,
	0x93, 0x7b, 0x10, 0x82, 0x9a, 0x3f, 0x42, 0xb3, 0xc6, 0x68, 0x28, 0xb4, 0x33, 0x22, 0x8f, 0x81,
	0x4c, 0x08, 0x06, 0x2e, 0xf3, 0x06, 0x8e, 0x8c, 0x0f, 0x31, 0xba, 0x1e, 0xd2, 0x05, 0x0f, 0xc8,
	0x03, 0x28, 0xfa, 0xba, 0xdb, 0x67, 0xbe, 0xe6, 0xf4, 0x7a, 0x1e, 0x13, 0x76, 0x8b, 0xd1, 0x82,
	0x40, 0xb6, 0x10, 0xc7, 0xc3, 0x81, 0x24, 0x32, 0xd1, 0x52, 0x31, 0x9a, 0x11, 0x70, 0x9d, 0xdc,
	0x81, 0x9c, 0x7c, 0xe4, 0x8f, 0xd0, 0x32, 0x31, 0x2a, 0x69, 0x3b, 0x23, 0xd5, 0x84, 0x78, 0x79,
	0x8f, 0xec, 0x40, 0xba, 0x6f, 0xe9, 0x76, 0x97, 0xc9, 0x1d, 0x70, 0x7b, 0xde, 0xfa, 0xbf, 0x40,
	0x0a, 0x2a, 0x29, 0xb9, 0x1b, 0xf5, 0x5d, 0x67, 0x3c, 0xc2, 0x25, 0x28, 0xcd, 0x77, 0xa3, 0x17,
	0x9c, 0x80, 0x0a, 0x3a, 0xf5, 0x35, 0xa4, 0x85, 0x08, 0xae, 0x51, 0x57, 0xb7, 0xb5, 0x33, 0x3d,
	0xdc, 0xaa, 0x34, 0xdb, 0xd5, 0xed, 0xd7, 0x1c, 0xe6, 0xe1, 0xce, 0x37, 0x87, 0xcc, 0x0b, 0x32,
	0x27, 0x02, 0xdc, 0x82, 0xc6, 0xd8, 0xd5, 0x7d, 0xd3, 0xb1, 0x71, 0x45, 0x13, 0x34, 0x84, 0xd5,
	0x5d, 0x48, 0xa1, 0xbf, 0x72, 0x95, 0xbc, 0x81, 0xfe, 0x26, 0x98, 0xc5, 0x5c, 0x95, 0xda, 0x9c,
	0x80, 0x0a, 0x3a, 0xf5, 0x0e, 0xa4, 0x10, 0xe6, 0xa1, 0xad, 0x67, 0x5a, 0x4c, 0x66, 0x70, 0x1c,
	0xab, 0x4f, 0x20, 0x23, 0xf7, 0x1d, 0x26, 0x5d, 0xe3, 0x59, 0x90, 0xdf, 0x87, 0xc6, 0xb3, 0x90,
	0x21, 0x1e, 0x61, 0xf8, 0xb5, 0xcc, 0xec, 0x32, 0x4c, 0x90, 0x9f, 0x42, 0x46, 0x2a, 0xb0, 0x2c,
	0xb0, 0x50, 0xe6, 0x8d, 0x1c, 0xdb, 0x63, 0x87, 0x5e, 0x9f, 0x06, 0xf4, 0x7c, 0x4b, 0xb0, 0x77,
	0xbe, 0x66, 0xda, 0x3d, 0x47, 0xc6, 0x95, 0xb9, 0x5b, 0xa2, 0xf6, 0xce, 0x17, 0x01, 0x89, 0x89,
	0x01, 0x79, 0x08, 0x6b, 0x75, 0xaf, 0xed, 0x33, 0xd3, 0xf6, 0x8e, 0x47, 0x7d, 0x57, 0x37, 0x44,
	0x48, 0x4e, 0xd1, 0x59, 0xb4, 0xfa, 0xe7, 0x8a, 0x48, 0xaa, 0x91, 0xb0, 0x44, 0x5a, 0x70, 0xed,
	0x44, 0xef, 0xbe, 0xe1, 0xe6, 0xb2, 0x0d, 0x6d, 0x36, 0x6b, 0xcf, 0x8f, 0xca, 0x96, 0x33, 0x36,
	0x70, 0x5b, 0x92, 0x09, 0x6b, 0x90, 0x71, 0xc8, 0x73, 0xc8, 0xf5, 0xac, 0x60, 0x6b, 0xc7, 0x57,
	0x91, 0x92, 0xe5, 0xf4, 0x01, 0x6f, 0x57, 0xf7, 0x7c, 0xc1, 0x9b, 0x58, 0x89, 0x97, 0xd3, 0x23,
	0xef, 0x1e, 0x14, 0x7b, 0x8c, 0x19, 0x5c, 0x23, 0xc1, 0x9f, 0x5c, 0x85, 0xbf, 0x10, 0xf0, 0x04,
	0x32, 0x82, 0x18, 0x21, 0x64, 0xa4, 0x56, 0x92, 0x11, 0xf0, 0xa0, 0x8c, 0x97, 0x80, 0x25, 0x35,
	0xea, 0xe1, 0xea, 0xbe, 0x14, 0x94, 0x5e, 0x45, 0x90, 0x12, 0x30, 0x52, 0xdd, 0x17, 0xc2, 0x3e,
	0x85, 0x02, 0xdf, 0x0b, 0xda, 0x58, 0xae, 0x67, 0x66, 0x15, 0x31, 0xc0, 0x59, 0x8e, 0x47, 0x17,
	0xb4, 0xe1, 0xa5, 0x45, 0x34, 0xe2, 0xae, 0xaa, 0x0d, 0xaf, 0x3d, 0x50, 0x58, 0x0d, 0xd6, 0xbc,
	0xae, 0x6e, 0xb1, 0x88, 0xa4, 0xdc, 0x2a, 0x92, 0x8a, 0xc8, 0x15, 0x8a, 0x79, 0x0e, 0x39, 0xcb,
	0x7c, 0x23, 0x05, 0xc0, 0x4a, 0x56, 0xe6, 0xf4, 0xc8, 0xfb, 0x19, 0x14, 0x0c, 0xd3, 0x9b, 0xb0,
	0xe7, 0x57, 0x61, 0xcf, 0x4b, 0x96, 0xd0, 0xc7, 0x1c, 0xd3, 0x16, 0xec, 0x85, 0xd5, 0x7c, 0xcc,
	0x31, 0xed, 0x80, 0x97, 0x59, 0xac, 0x2b, 0x78, 0x8b, 0x2b, 0xf1, 0x72, 0x7a, 0xe4, 0xfd, 0x19,
	0x80, 0x37, 0xd0, 0x5d, 0xa9, 0x77, 0x69, 0x15, 0xe6, 0x1c, 0x32, 0x20, 0xf7, 0x0b, 0x50, 0xbc,
	0xae, 0xcb, 0x98, 0xad, 0x79, 0x03, 0x47, 0x6e, 0x90, 0xb5, 0x55, 0x64, 0x94, 0x04, 0x5b, 0x7b,
	0xe0, 0xf8, 0x81, 0x20, 0xcb, 0xe9, 0xbe, 0xd1, 0xa4, 0x34, 0x14, 0xa4, 0xac, 0x24, 0x88, 0xb3,
	0xb5, 0x91, 0x0b, 0x05, 0x55, 0xa1, 0xe4, 0xb2, 0xae, 0x33, 0x1c, 0x32, 0xdb, 0x10, 0x62, 0xd6,
	0x57, 0xf2, 0x85, 0x90, 0x09, 0xa5, 0x1c, 0xc2, 0xd5, 0xd0, 0x3f, 0xbd, 0x11, 0x63, 0x52, 0x14,
	0x59, 0x45, 0xd4, 0x7a, 0xc0, 0xd9, 0xe6, 0x8c, 0x28, 0x6e, 0x1f, 0xd6, 0x0c, 0xd6, 0x33, 0x6d,
	0x93, 0x27, 0x09, 0x21, 0xea, 0xea, 0x4a, 0x93, 0x9b, 0x70, 0x05, 0x72, 0x3c, 0x6e, 0x39, 0x8e,
	0xf0, 0x84, 0x9c, 0x6b, 0xab, 0xad, 0x76, 0xc8, 0x15, 0x38, 0x8c, 0xcd, 0x83, 0x3a, 0x4a, 0xb8,
	0xbe, 0x92, 0xc3, 0x70, 0xfa, 0x60, 0xef, 0x33, 0xc3, 0xf4, 0x35, 0x63, 0x28, 0xd8, 0x6f, 0xac,
	0xb4, 0xf7, 0x39, 0x4b, 0x75, 0x88, 0x02, 0xea, 0xb0, 0xee, 0x0d, 0x75, 0xcb, 0xd2, 0xce, 0x4c,
	0xdb, 0x70, 0xce, 0x84, 0x94, 0x9b, 0xab, 0x48, 0x59, 0x43, 0xbe, 0xd7, 0xc8, 0x16, 0x71, 0xde,
	0x60, 0xd3, 0x6d, 0xac, 0xea, 0xbc, 0x72, 0xcb, 0x95, 0xa1, 0xe8, 0x8c, 0x7d, 0xe6, 0x86, 0x53,
	0xb9, 0xb5, 0xd2, 0xae, 0x45, 0x1e, 0x39, 0x97, 0x32, 0x14, 0x4d, 0xdb, 0x8e, 0x88, 0xb8, 0xbd,
	0x92, 0x08, 0xe4, 0x91, 0x22, 0xf6, 0xa0, 0x38, 0xd2, 0x6d, 0xc7, 0xd5, 0x87, 0xba, 0x10, 0x71,
	0x67, 0xa5, 0xe0, 0x1e, 0xf0, 0x04, 0xeb, 0x60, 0x38, 0xd6, 0x89, 0xcc, 0x91, 0x1f, 0xad, 0xb4,
	0x0e, 0xc8, 0x10, 0x18, 0xa4, 0xeb, 0x58, 0x8e, 0xab, 0xf5, 0x4c, 0x8b, 0x2f, 0x07, 0x0a, 0xb9,
	0xbb, 0x92, 0x41, 0x90, 0x6f, 0x1f, 0xd9, 0x50, 0x54, 0x05, 0x4a, 0x96, 0xe3, 0x79, 0x9a, 0xc5,
	0x3c, 0xe9, 0x9f, 0x9b, 0x2b, 0xcd, 0x86, 0x33, 0x35, 0x98, 0x87, 0xde, 0xa9, 0xfe, 0x2a, 0x06,
	0xb9, 0xf0, 0x59, 0xd8, 0xea, 0xc5, 0x16, 0xb7, 0x7a, 0xf1, 0xef, 0xd8, 0xea, 0x25, 0xde, 0xb3,
	0xd5, 0xfb, 0x12, 0x72, 0x21, 0x9e, 0xdc, 0x03, 0x10, 0x9d, 0x1d, 0x17, 0x16, 0x76, 0x7b, 0x39,
	0x81, 0x7b, 0xa5, 0x5b, 0xe4, 0x01, 0x14, 0xc4, 0xf6, 0x63, 0xa8, 0xaf, 0x28, 0x26, 0x0f, 0xae,
	0xd0, 0x7c, 0x80, 0x7d, 0xa5, 0x5b, 0x93, 0xae, 0xf0, 0x57, 0x8a, 0xa8, 0xdc, 0x64, 0xaf, 0x44,
	0x0e, 0x97, 0x16, 0x42, 0x73, 0x4b, 0xb1, 0xa0, 0xcd, 0x9a, 0x57, 0x06, 0xed, 0x5e, 0x2c, 0x83,
	0x96, 0xca, 0x98, 0x14, 0x41, 0xbb, 0x17, 0x8b, 0xa0, 0xe5, 0x9c, 0x61, 0x09, 0xf4, 0xd9, 0xfc,
	0x12, 0x68, 0x29, 0xf7, 0x74, 0x01, 0xf4, 0xd9, 0xfc, 0x02, 0x68, 0xb9, 0x84, 0xa9, 0xf2, 0xa7,
	0xbe, 0xa4, 0xfc, 0x59, 0x2a, 0xe6, 0x62, 0xf1, 0xf3, 0xf3, 0xb9, 0xc5, 0xcf, 0x52, 0x21, 0xd1,
	0xd2, 0xa7, 0xbe, 0xa4, 0xf4, 0x59, 0x4d, 0x93, 0xb0, 0x62, 0xa9, 0x2c, 0x2a, 0x7c, 0x96, 0xca,
	0x99, 0x29, 0x7b, 0x76, 0x2f, 0x96, 0x3d, 0xcb, 0xed, 0x1a, 0x96, 0x2c, 0xbf, 0x98, 0x5b, 0xf4,
	0x2c, 0x65, 0x9e, 0x2a, 0x79, 0x76, 0x2f, 0x96, 0x3c, 0x97, 0x78, 0x54, 0x50, 0xf0, 0xec, 0x5e,
	0x2c, 0x78, 0x96, 0x73, 0x86, 0xe5, 0xce, 0xf3, 0x39, 0xe5, 0xce, 0x52, 0xd6, 0x48, 0xb1, 0x53,
	0x5b, 0x58, 0xec, 0x2c, 0x95, 0x30, 0x5b, 0xea, 0xd4, 0x16, 0x96, 0x3a, 0xcb, 0xc5, 0xcc, 0x14,
	0x3a, 0x7b, 0x0b, 0x0a, 0x9d, 0xe5, 0xb6, 0x9f, 0x2e, 0x73, 0x5e, 0x2e, 0x2b, 0x73, 0x96, 0x0a,
	0x9a, 0x53, 0xe4, 0x54, 0x17, 0x15, 0x39, 0xcb, 0xa7, 0x35, 0x53, 0xe2, 0x54, 0x17, 0x95, 0x38,
	0x97, 0xac, 0xf1, 0x74, 0x81, 0xb3, 0x7b, 0xb1, 0xc0, 0x59, 0xee, 0x20, 0x61, 0x79, 0xf3, 0xf3,
	0xb9, 0xe5, 0xcd, 0xf2, 0xdd, 0x1d, 0x29, 0x6e, 0x5e, 0x2c, 0x2e, 0x6e, 0x96, 0xca, 0xb8, 0x50,
	0xda, 0x3c, 0x9f, 0x53, 0xda, 0x5c, 0xea, 0xa8, 0x6f, 0x82, 0xf6, 0x6c, 0x6e, 0x61, 0xb3, 0x7c,
	0x67, 0x46, 0xcb, 0x9a, 0x4f, 0xe7, 0x97, 0x35, 0xcb, 0x05, 0x44, 0x8b, 0x9a, 0xcf, 0xe6, 0x17,
	0x35, 0xcb, 0x03, 0xf6, 0x54, 0x49, 0xf3, 0x7c, 0x4e, 0x49, 0xb3, 0x7c, 0xfe, 0x93, 0x82, 0xa6,
	0x05, 0xd7, 0xe5, 0xe6, 0xe2, 0xee, 0xee, 0x1a, 0xa6, 0xdd, 0x8f, 0x16, 0x35, 0x4b, 0xc5, 0x5c,
	0x15, 0x9c, 0x34, 0x60, 0x0c, 0xac, 0x7a, 0xb1, 0x42, 0xda, 0x5c, 0xc1, 0xaa, 0xb3, 0xf5, 0x51,
	0xf9, 0x42, 0x7d, 0x74, 0x6f, 0x85, 0x85, 0x99, 0xaa, 0x8e, 0x7e, 0x13, 0x83, 0x4c, 0x50, 0x1c,
	0xdc, 0x05, 0x30, 0x3d, 0xcd, 0x1b, 0x8f, 0x46, 0x8e, 0xeb, 0xcb, 0x0a, 0x29, 0x67, 0x7a, 0x6d,
	0x81, 0xc0, 0x93, 0x2a, 0xd3, 0xd3, 0x4f, 0x2c, 0x66, 0xc8, 0x93, 0xf2, 0x10, 0x26, 0x35, 0x28,
	0xb2, 0x77, 0xbe, 0x8b, 0xe6, 0xf1, 0x99, 0xed, 0xcb, 0x94, 0xbe, 0xb5, 0xe0, 0x6c, 0xc7, 0xe5,
	0x56, 0xe1, 0x74, 0xb4, 0xc0, 0x22, 0x10, 0xf9, 0x21, 0xac, 0x8d, 0x6d, 0xa9, 0x80, 0xe6, 0x75,
	0x99, 0xcd, 0x36, 0x92, 0x5b, 0x89, 0x87, 0x09, 0x5a, 0x0a, 0xd1, 0x6d, 0x8e, 0x55, 0xbf, 0x82,
	0x42, 0x6d, 0x86, 0x31, 0xd0, 0x45, 0x73, 0x99, 0xee, 0x39, 0xb6, 0x3c, 0xd3, 0x2a, 0x05, 0x68,
	0x8a, 0x58, 0xf2, 0x00, 0x8a, 0x21, 0x61, 0xd7, 0x31, 0x82, 0x6b, 0xac, 0x42, 0x80, 0xac, 0x38,
	0x06, 0x53, 0xff, 0x3a, 0x23, 0xaa, 0x26, 0x71, 0x96, 0xfe, 0x96, 0x6c, 0x47, 0xae, 0xfa, 0x2e,
	0xb9, 0x6a, 0xc1, 0x8b, 0xc0, 0xed, 0xc8, 0x45, 0xe0, 0x65, 0xf4, 0x5d, 0xd3, 0x20, 0x25, 0x88,
	0xbf, 0x0d, 0x4e, 0xff, 0xe2, 0x6f, 0xed, 0xa9, 0x6b, 0x97, 0xe4, 0xc5, 0x6b, 0x97, 0x9e, 0x7d,
	0xca, 0x5c, 0x2c, 0x5a, 0x52, 0x54, 0x00, 0x12, 0xab, 0x8b, 0x0b, 0x16, 0x81, 0xd5, 0xad, 0xe0,
	0x4a, 0x2d, 0x33, 0xb9, 0x52, 0xbb, 0x0b, 0xc0, 0xc3, 0xec, 0x78, 0xa4, 0xd9, 0xe3, 0x21, 0x96,
	0x09, 0x45, 0x9a, 0x13, 0x98, 0xe6, 0x78, 0x88, 0x26, 0x76, 0xce, 0x6c, 0xcb, 0xd1, 0x0d, 0xcc,
	0xfd, 0x45, 0x1a, 0xc2, 0x9c, 0xb5, 0xe7, 0xb8, 0x5d, 0xa6, 0x0d, 0x1c, 0xcf, 0xc7, 0xd4, 0x9e,
	0xa2, 0x39, 0xc4, 0x1c, 0x38, 0x9e, 0x8f, 0x1a, 0x38, 0x63, 0xf7, 0x0d, 0xe6, 0xed, 0x2c, 0x15,
	0x00, 0xb9, 0x07, 0xf9, 0xb1, 0x38, 0x97, 0xd3, 0xf8, 0x0a, 0x16, 0x50, 0x13, 0x90, 0xa8, 0xb2,
	0x69, 0x44, 0x09, 0xf8, 0x92, 0x15, 0xa7, 0x08, 0x2a, 0xa6, 0x41, 0x6e, 0x40, 0xda, 0x60, 0xdc,
	0x75, 0x30, 0xbd, 0xe6, 0xa8, 0x84, 0xc8, 0x2d, 0xc8, 0x0e, 0x9d, 0x13, 0x53, 0xd3, 0x47, 0x23,
	0x4c, 0x9b, 0x39, 0x9a, 0xe1, 0x70, 0x79, 0x34, 0xe2, 0x36, 0x3e, 0x65, 0xae, 0xd9, 0x3b, 0xd7,
	0x3c, 0x3c, 0x19, 0xc4, 0x7c, 0x98, 0xa2, 0x05, 0x81, 0x14, 0xa7, 0x85, 0xe4, 0x2a, 0xa4, 0x06,
	0xcf, 0xb4, 0xc1, 0x5b, 0xcc, 0x73, 0x59, 0x9a, 0x1c, 0x3c, 0x3b, 0x78, 0x3b, 0xb9, 0xd3, 0x22,
	0xb3, 0x77, 0x5a, 0x78, 0x69, 0x76, 0x55, 0xde, 0x69, 0xe1, 0xdd, 0xd8, 0x5d, 0x00, 0xf9, 0x96,
	0x53, 0x73, 0x84, 0x59, 0x25, 0x45, 0x73, 0x02, 0xf3, 0xca, 0x1c, 0x91, 0x1f, 0x40, 0xd1, 0x67,
	0xcc, 0xd6, 0xfb, 0xcc, 0xf5, 0xf0, 0x92, 0xeb, 0x3a, 0x52, 0x4c, 0x23, 0xc9, 0x73, 0xc8, 0xda,
	0xcc, 0x17, 0x77, 0x56, 0x37, 0xf0, 0xb8, 0x79, 0xee, 0x51, 0x6a, 0x93, 0xf9, 0x67, 0x8e, 0xfb,
	0x06, 0xaf, 0xad, 0x32, 0x36, 0xf3, 0xf1, 0xd6, 0xea, 0x29, 0x64, 0x7c, 0x79, 0xdd, 0x75, 0x13,
	0x59, 0xe7, 0x1e, 0x6e, 0x77, 0xf6, 0x91, 0x2b, 0xed, 0x8b, 0xab, 0xae, 0x2d, 0xc8, 0xf3, 0x68,
	0xe1, 0xd8, 0x42, 0xa9, 0x0d, 0x54, 0x2a, 0x8a, 0x22, 0x2f, 0x61, 0x2d, 0xb8, 0x7f, 0xd6, 0x3c,
	0x67, 0xec, 0x76, 0x19, 0x06, 0xfc, 0x05, 0x57, 0xd7, 0xc1, 0xa5, 0x75, 0x1b, 0x29, 0x69, 0xe9,
	0x64, 0x0a, 0x9e, 0xba, 0xcc, 0xbb, 0x3d, 0x75, 0x99, 0x87, 0x56, 0x72, 0xcc, 0x2e, 0xd3, 0x4e,
	0x74, 0x71, 0x42, 0x7f, 0x47, 0xec, 0x44, 0x44, 0xee, 0x09, 0x1c, 0x27, 0x32, 0x3d, 0xcd, 0xd0,
	0xbf, 0x1e, 0x38, 0x76, 0xbf, 0xab, 0xbb, 0x18, 0xba, 0xb3, 0xb4, 0x60, 0x7a, 0xd5, 0x10, 0xa7,
	0xfe, 0x3e, 0x05, 0x80, 0xc7, 0xd3, 0xb4, 0xf1, 0xfd, 0x6e, 0xfd, 0x7e, 0xb7, 0x7e, 0xc8, 0x6e,
	0x8d, 0xee, 0xc3, 0xeb, 0x1f, 0xbe, 0x0f, 0x6f, 0xac, 0xbc, 0x0f, 0x2f, 0x78, 0xff, 0xcd, 0x55,
	0xbc, 0x7f, 0x63, 0x8e, 0xf7, 0xff, 0x69, 0x0c, 0x0a, 0xa1, 0xf7, 0x8f, 0xac, 0xf3, 0xef, 0x76,
	0x3b, 0x13, 0x5c, 0x74, 0xc6, 0xdf, 0xe7, 0xa2, 0x53, 0xfd, 0x43, 0xc8, 0xc8, 0x1b, 0x1b, 0xf2,
	0x29, 0xe4, 0xe5, 0x9d, 0xa7, 0xef, 0x3a, 0x81, 0x06, 0x9b, 0x8b, 0xaf, 0x3d, 0x39, 0x15, 0x85,
	0xd3, 0x70, 0xac, 0xee, 0x02, 0x4c, 0x9e, 0x90, 0x0d, 0xc8, 0x44, 0x45, 0x65, 0x69, 0x00, 0xe2,
	0x76, 0xf1, 0xfa, 0xf2, 0x9e, 0x8a, 0x0f, 0xd5, 0xdf, 0xa4, 0x20, 0x1f, 0x99, 0x16, 0x21, 0x90,
	0xc4, 0x14, 0x1f, 0xc3, 0xbd, 0x81, 0x63, 0x2e, 0x6f, 0xc8, 0x3c, 0x4f, 0xef, 0x07, 0x37, 0x5c,
	0x01, 0xc8, 0xa9, 0xd1, 0x86, 0xe2, 0x5a, 0x09, 0xc7, 0x9c, 0xfa, 0xed, 0x58, 0xb7, 0x4c, 0xff,
	0x1c, 0x77, 0x76, 0x91, 0x06, 0x20, 0x77, 0x74, 0xbe, 0xc1, 0x75, 0x5f, 0x7e, 0xe8, 0x20, 0x21,
	0x6e, 0x32, 0xbd, 0xdb, 0x65, 0x23, 0x5f, 0x93, 0x8f, 0xc5, 0x17, 0x0f, 0x05, 0x81, 0xdc, 0x17,
	0x44, 0x8f, 0x81, 0x48, 0x22, 0x83, 0x79, 0x5d, 0xd7, 0x1c, 0xe1, 0xed, 0x5f, 0x66, 0x2b, 0xf1,
	0x30, 0x47, 0xd7, 0xc5, 0x93, 0xea, 0xe4, 0x01, 0xf9, 0x18, 0x4a, 0x92, 0x3c, 0x50, 0x26, 0xbb,
	0x95, 0x78, 0x58, 0xa4, 0xf2, 0x4d, 0x9f, 0x4b, 0x95, 0x36, 0x01, 0x0f, 0x06, 0x2c, 0x66, 0xf7,
	0xfd, 0x01, 0x06, 0x84, 0x24, 0x8d, 0x60, 0xd0, 0xe5, 0x4c, 0x83, 0x39, 0x58, 0xf7, 0xf0, 0xed,
	0x0b, 0x38, 0xa5, 0x02, 0x22, 0x2b, 0x02, 0x37, 0x09, 0x58, 0x79, 0x7c, 0x38, 0x1b, 0xb0, 0x0a,
	0x21, 0x56, 0x46, 0x70, 0x14, 0x38, 0x72, 0x9d, 0x3f, 0x61, 0x5d, 0x1f, 0xe3, 0x41, 0x56, 0x0a,
	0x3c, 0x12, 0x38, 0xf2, 0x14, 0x92, 0x06, 0x77, 0xc5, 0x12, 0x7e, 0xca, 0xb2, 0xd4, 0x15, 0x8f,
	0x5d, 0x8b, 0x22, 0x31, 0xf9, 0x11, 0x24, 0x0d, 0xdd, 0x1b, 0xc8, 0x7e, 0x78, 0x6b, 0x19, 0x53,
	0x55, 0xf7, 0x06, 0x14, 0xa9, 0xf9, 0x1e, 0xb7, 0x1d, 0xcd, 0x65, 0xef, 0xd0, 0xea, 0x22, 0x8c,
	0xe4, 0x6c, 0x87, 0x0a, 0x04, 0x69, 0xc2, 0x5a, 0x50, 0x5a, 0x0a, 0xdb, 0x78, 0x1b, 0xeb, 0xa8,
	0xd4, 0xc7, 0x73, 0x8f, 0xfa, 0x90, 0x24, 0x62, 0x06, 0x5a, 0x92, 0xdc, 0xe2, 0x89, 0x47, 0xf6,
	0x21, 0x3f, 0x30, 0xfb, 0x83, 0xc0, 0xd0, 0xa2, 0xcd, 0x5d, 0x51, 0x16, 0x70, 0x4e, 0x81, 0x56,
	0xff, 0x3e, 0x36, 0x71, 0xdb, 0x63, 0x17, 0x3f, 0x8b, 0x71, 0x5c, 0x83, 0xb9, 0xd2, 0x6f, 0x05,
	0xc0, 0x1d, 0x4e, 0x5a, 0x36, 0x8e, 0x96, 0x95, 0x10, 0x1e, 0x68, 0x9a, 0x5f, 0x0b, 0xb7, 0x4d,
	0x52, 0x1c, 0x73, 0x09, 0xfa, 0x80, 0xe9, 0x86, 0x4c, 0x47, 0x02, 0xc0, 0x2f, 0xb7, 0x10, 0x2b,
	0x3f, 0xcd, 0x41, 0x80, 0x6f, 0x23, 0x6e, 0x1e, 0xe1, 0xa6, 0x7c, 0x18, 0xc9, 0x3a, 0xfc, 0x81,
	0xf0, 0x4a, 0x99, 0x75, 0xb8, 0x7a, 0xf2, 0xca, 0x38, 0x1b, 0x5e, 0x19, 0xab, 0x7f, 0x1b, 0x87,
	0x42, 0xd4, 0x1c, 0x53, 0x77, 0xda, 0x31, 0x99, 0x98, 0x24, 0x4c, 0x3e, 0x81, 0xb5, 0xa1, 0x69,
	0x6b, 0x27, 0xe3, 0x5e, 0x8f, 0xb9, 0x1a, 0x77, 0x4f, 0x9c, 0x50, 0x9c, 0x16, 0x87, 0xa6, 0xbd,
	0x87, 0xd8, 0x8e, 0x39, 0x64, 0x64, 0x07, 0x52, 0xe8, 0x47, 0x1b, 0x09, 0xb4, 0xd1, 0xdc, 0x4f,
	0x79, 0xf8, 0xcb, 0xea, 0x3e, 0x1b, 0x52, 0x41, 0xca, 0x79, 0xf4, 0xb1, 0x61, 0x3a, 0xd8, 0x34,
	0x5c, 0xca, 0x83, 0xa4, 0xe4, 0x29, 0xa4, 0xb0, 0xd5, 0x5b, 0x76, 0x0b, 0x5a, 0xe5, 0x04, 0x82,
	0x09, 0x69, 0xc9, 0x7e, 0xb4, 0xf1, 0x32, 0x7d, 0x36, 0x94, 0x67, 0x7f, 0x73, 0x3d, 0xb5, 0x21,
	0xfb, 0x2d, 0x14, 0x10, 0x76, 0x5f, 0x1c, 0x52, 0x6d, 0x28, 0x44, 0x9f, 0x92, 0x47, 0xb0, 0x6e,
	0x7a, 0x1a, 0x27, 0x41, 0xc9, 0x62, 0x32, 0x22, 0xee, 0xad, 0x99, 0x5e, 0x43, 0xe2, 0xcb, 0xa8,
	0x78, 0x38, 0x59, 0x11, 0xaa, 0x57, 0x99, 0xac, 0xfa, 0x57, 0x31, 0xc8, 0x85, 0x93, 0x21, 0x3f,
	0x96, 0x11, 0x2f, 0xb6, 0xb8, 0xbc, 0x0b, 0x89, 0xb7, 0x31, 0x7b, 0x89, 0xa8, 0x18, 0x79, 0xf3,
	0xaa, 0xcb, 0xac, 0xfe, 0x10, 0x92, 0x98, 0xf7, 0xb2, 0x90, 0x6c, 0xb6, 0x9a, 0x35, 0xe5, 0x0a,
	0x01, 0x48, 0x57, 0x5a, 0x87, 0x87, 0xad, 0xa6, 0x12, 0x23, 0x39, 0x48, 0x95, 0x3b, 0x87, 0xad,
	0xb6, 0x12, 0x57, 0xbf, 0x84, 0x35, 0xce, 0xdb, 0x66, 0xfd, 0x21, 0xb3, 0xfd, 0x3d, 0xdd, 0x63,
	0xe4, 0x13, 0x28, 0xe1, 0x99, 0x8e, 0x6e, 0x99, 0x5f, 0x4f, 0x9c, 0x2a, 0x47, 0x67, 0xb0, 0xbc,
	0x3a, 0x31, 0x6d, 0x83, 0xbd, 0xd3, 0x5c, 0xdd, 0x0e, 0xe3, 0x3b, 0x20, 0x8a, 0x72, 0x8c, 0xfa,
	0xaf, 0x09, 0xc8, 0x06, 0x8a, 0xf1, 0x32, 0x4e, 0x56, 0x89, 0x45, 0x1a, 0x37, 0x0d, 0x5e, 0xa2,
	0x9c, 0xe8, 0x1e, 0x43, 0xa7, 0x97, 0xa9, 0x81, 0xc3, 0xc7, 0x17, 0x76, 0x44, 0x62, 0x76, 0x47,
	0x7c, 0x04, 0xb9, 0x13, 0xdd, 0x36, 0xce, 0x4c, 0xc3, 0x1f, 0xc8, 0x3c, 0x31, 0x41, 0x90, 0x3b,
	0x90, 0x1b, 0x9a, 0x43, 0x26, 0x0a, 0x04, 0xb1, 0xf5, 0xb2, 0x1c, 0x81, 0xcb, 0x71, 0x03, 0xd2,
	0x18, 0x8d, 0x3d, 0xb9, 0x01, 0x25, 0xc4, 0xf7, 0xaa, 0x10, 0x97, 0x11, 0x31, 0x40, 0x88, 0xba,
	0x01, 0xe9, 0x01, 0x33, 0xfb, 0x03, 0x5f, 0xd6, 0x82, 0x12, 0xc2, 0x62, 0xcf, 0xd5, 0x87, 0x0c,
	0xcf, 0xa2, 0x31, 0xf2, 0xe7, 0x68, 0x0e, 0x31, 0x54, 0xf7, 0x19, 0xdf, 0xb1, 0x9e, 0xee, 0x62,
	0xb8, 0xcf, 0x51, 0x3e, 0x24, 0x3f, 0x80, 0x92, 0xe7, 0xeb, 0xae, 0xaf, 0x9d, 0x99, 0xfe, 0x40,
	0xf3, 0xf4, 0x91, 0x0c, 0xf7, 0x05, 0xc4, 0xbe, 0x36, 0xfd, 0x41, 0x5b, 0x1f, 0x91, 0x7d, 0x28,
	0x78, 0xc2, 0x0c, 0x1a, 0x5f, 0x09, 0x79, 0xa8, 0xfa, 0x60, 0x91, 0xb9, 0x23, 0x26, 0xa3, 0x79,
	0x2f, 0x62, 0x3f, 0xcc, 0xe1, 0x22, 0xe5, 0x14, 0x45, 0x16, 0x95, 0x60, 0x10, 0x4b, 0x4a, 0x53,
	0x9f, 0x9f, 0x60, 0x38, 0x5b, 0x8b, 0x84, 0xb3, 0xe5, 0x71, 0x5d, 0xfd, 0xaf, 0x18, 0xac, 0x5f,
	0x88, 0xb0, 0xd1, 0xd4, 0x1d, 0x5b, 0x94, 0xba, 0xe3, 0x53, 0xa9, 0x7b, 0x0b, 0xf2, 0xd1, 0x74,
	0x2c, 0xbe, 0x77, 0x8c, 0xa2, 0xc8, 0x0f, 0x61, 0xcd, 0x66, 0x67, 0x53, 0x49, 0x5b, 0x44, 0xd8,
	0x92, 0xcd, 0xce, 0xa2, 0x2f, 0xbf, 0x8f, 0x67, 0xd9, 0x78, 0xbd, 0xc2, 0x89, 0xa5, 0xd9, 0xf3,
	0x12, 0xc7, 0x29, 0xf9, 0xdb, 0xbc, 0xf1, 0x88, 0xb9, 0x82, 0x49, 0x9a, 0x3f, 0x8a, 0x8a, 0xf8,
	0x86, 0x88, 0xc1, 0x12, 0x52, 0xff, 0x21, 0x0d, 0x85, 0x03, 0xcb, 0xab, 0x38, 0xc3, 0xa1, 0x63,
	0xff, 0x9f, 0x6a, 0x78, 0x76, 0x23, 0x9f, 0x53, 0xe7, 0x16, 0x7f, 0xe1, 0x79, 0xf1, 0x43, 0xea,
	0xcb, 0xda, 0xa1, 0x3d, 0x28, 0xf0, 0x39, 0x33, 0x4f, 0xb6, 0x00, 0xf9, 0xc5, 0x2d, 0x00, 0x15,
	0x74, 0x18, 0x0e, 0xf3, 0xee, 0x04, 0x88, 0xb4, 0x3e, 0x85, 0x85, 0xad, 0x4f, 0x71, 0xba, 0xf5,
	0xb9, 0xc7, 0x3d, 0x8e, 0x13, 0x89, 0xb7, 0x96, 0x50, 0x2d, 0x10, 0x28, 0x94, 0x19, 0x6d, 0x4b,
	0xd6, 0x3e, 0xbc, 0x2d, 0x51, 0x56, 0x6e, 0x4b, 0xc2, 0xe6, 0x69, 0x7d, 0x71, 0xf3, 0x44, 0x66,
	0x9b, 0xa7, 0xb0, 0x0f, 0xbb, 0x1a, 0xed, 0xc3, 0x3e, 0x85, 0xfc, 0x5b, 0x5b, 0xeb, 0xea, 0x3e,
	0xeb, 0x3b, 0xee, 0x39, 0xb6, 0x5c, 0xa5, 0xf9, 0x8d, 0xc0, 0xe7, 0x76, 0x45, 0x52, 0x51, 0x78,
	0x1b, 0x8e, 0xb9, 0x58, 0x91, 0x99, 0xaf, 0x8b, 0xef, 0xe5, 0x44, 0xea, 0xfd, 0x18, 0x4a, 0xe1,
	0x11, 0x0a, 0xde, 0x54, 0x61, 0xd3, 0x95, 0x98, 0x3d, 0x58, 0xb9, 0x0f, 0x05, 0x79, 0xa8, 0x21,
	0x88, 0x44, 0x7b, 0x15, 0x3d, 0xe8, 0x50, 0x3f, 0x87, 0xf5, 0x03, 0xcb, 0x6b, 0x77, 0x07, 0xcc,
	0x18, 0x5b, 0xcc, 0x15, 0xcd, 0xd3, 0xcf, 0x66, 0x9b, 0xa7, 0xb9, 0x69, 0xf1, 0xc0, 0xf2, 0xe6,
	0xf5, 0x4f, 0x6a, 0x0b, 0xae, 0x1d, 0xea, 0x9e, 0xcf, 0xdc, 0x19, 0xa9, 0x3f, 0x81, 0x24, 0x7e,
	0xf1, 0xb6, 0xe4, 0x2b, 0xf1, 0x59, 0x3e, 0x64, 0x50, 0x7f, 0x1b, 0x83, 0xb5, 0x99, 0x27, 0xef,
	0xd9, 0xd6, 0x3c, 0x85, 0xd4, 0x2b, 0x59, 0x47, 0x2d, 0xac, 0x6f, 0x0e, 0x9f, 0x8e, 0x77, 0x91,
	0x88, 0x0a, 0x5a, 0xce, 0x54, 0x96, 0x85, 0xd4, 0x52, 0x26, 0x24, 0xa2, 0x82, 0x96, 0x3c, 0x83,
	0x34, 0x96, 0x61, 0xde, 0x46, 0x0a, 0xeb, 0x82, 0x4b, 0x5e, 0x25, 0x89, 0xd5, 0x7f, 0x89, 0x41,
	0x2e, 0xc4, 0xca, 0x58, 0x23, 0xb3, 0xf2, 0x5b, 0x7b, 0x3a, 0xb7, 0xc6, 0x67, 0x73, 0xeb, 0x26,
	0x80, 0xcb, 0x3c, 0xc7, 0x1a, 0x47, 0x22, 0x76, 0x04, 0x13, 0x09, 0xa1, 0xc9, 0xa9, 0xf4, 0x4a,
	0x20, 0x69, 0xeb, 0xc3, 0x20, 0x1d, 0xe3, 0x78, 0x26, 0x89, 0xa6, 0x67, 0x93, 0xe8, 0xff, 0x83,
	0x75, 0xfd, 0x94, 0xb9, 0x7a, 0x9f, 0xb7, 0xec, 0x81, 0x42, 0x22, 0x3b, 0x2b, 0xf2, 0xc1, 0x5e,
	0x80, 0x57, 0x9b, 0x62, 0x4a, 0x62, 0x5d, 0x66, 0xa7, 0x34, 0x51, 0x2a, 0x3e, 0xa5, 0xd4, 0x2d,
	0xc8, 0xe2, 0xf7, 0xa4, 0x9a, 0x69, 0xe0, 0x54, 0x8a, 0x34, 0x83, 0x70, 0xdd, 0x50, 0xff, 0x22,
	0x01, 0xa5, 0x69, 0x9f, 0x7b, 0x4f, 0x2f, 0xf8, 0x51, 0xa4, 0xb9, 0x2d, 0x2d, 0x6f, 0xa8, 0x22,
	0x85, 0xde, 0xfb, 0xb7, 0xbf, 0xd3, 0x3d, 0x68, 0xfa, 0xf2, 0x1e, 0x34, 0x33, 0xa7, 0x07, 0xbd,
	0xd0, 0x57, 0x66, 0x97, 0xf4, 0x95, 0xb9, 0xf7, 0xe9, 0x2b, 0xe7, 0xb4, 0x80, 0xf0, 0x1d, 0x5a,
	0x40, 0xf5, 0x2b, 0x58, 0xe3, 0x76, 0xfe, 0x70, 0xbb, 0xf0, 0xe2, 0xf0, 0xe9, 0x78, 0x57, 0x33,
	0x74, 0x5f, 0x0f, 0x7e, 0x61, 0xc1, 0x11, 0x55, 0xdd, 0xd7, 0xd5, 0x43, 0x20, 0x5c, 0xfa, 0x07,
	0xc4, 0x92, 0x69, 0x9d, 0x64, 0x2c, 0xf9, 0xb3, 0x24, 0x80, 0x5c, 0xbd, 0xef, 0x8f, 0x49, 0xbf,
	0xcb, 0x31, 0xe9, 0x07, 0x64, 0x7a, 0x3e, 0x79, 0xd7, 0xf1, 0x9d, 0xae, 0x63, 0xc9, 0x34, 0x1f,
	0xc2, 0xb3, 0x55, 0xc0, 0xda, 0x85, 0x2a, 0x20, 0x5a, 0xf6, 0x28, 0xef, 0x55, 0xf6, 0xcc, 0x4d,
	0xe7, 0x6a, 0x1d, 0x0a, 0xa1, 0x1f, 0x7c, 0xb7, 0x03, 0x43, 0xf5, 0x2a, 0xac, 0x4f, 0xff, 0x80,
	0x69, 0x64, 0x9d, 0xab, 0xff, 0x19, 0x83, 0xa2, 0xfc, 0xc0, 0xfc, 0xe8, 0x4d, 0xff, 0x7f, 0xc2,
	0xd7, 0xa4, 0x4f, 0x24, 0x26, 0x3e, 0x11, 0xb5, 0x45, 0x72, 0xda, 0x16, 0x61, 0xb9, 0x92, 0x9a,
	0x7b, 0x6c, 0x9c, 0x8e, 0x56, 0x3e, 0x51, 0xa7, 0xcd, 0x4c, 0x3b, 0xad, 0xfa, 0x13, 0x58, 0x8b,
	0xce, 0x92, 0xaf, 0xe4, 0x4a, 0x9f, 0xd3, 0x3f, 0x2a, 0x43, 0x69, 0xfa, 0x17, 0x7f, 0x64, 0x1d,
	0x8a, 0x02, 0x73, 0x6c, 0xbf, 0xb1, 0x9d, 0x33, 0x5b, 0xb9, 0x42, 0x8a, 0x90, 0x93, 0xa8, 0x17,
	0x15, 0x25, 0x36, 0x01, 0x5b, 0x2f, 0x5e, 0x29, 0xf1, 0x47, 0xdb, 0x90, 0xc2, 0x9f, 0x20, 0x10,
	0x05, 0x0a, 0x92, 0x07, 0x61, 0xe5, 0x0a, 0x49, 0x41, 0xac, 0xac, 0xc4, 0xf8, 0xbf, 0x3d, 0x25,
	0xce, 0xff, 0x55, 0x94, 0xc4, 0xa3, 0xbf, 0x4b, 0x40, 0x36, 0xf8, 0xe1, 0x13, 0xef, 0xbc, 0x9b,
	0x0e, 0x1f, 0x29, 0x57, 0x48, 0x01, 0xb2, 0xfb, 0x8d, 0xfa, 0x51, 0xa5, 0xd5, 0xdc, 0x57, 0x62,
	0x1c, 0xaa, 0x94, 0xdb, 0x1d, 0x84, 0xe2, 0xf8, 0xac, 0x56, 0xab, 0xee, 0x95, 0x2b, 0x2f, 0x95,
	0x04, 0x87, 0xda, 0xc7, 0x7b, 0x9d, 0x7a, 0xa7, 0x51, 0x53, 0x92, 0xfc, 0xbd, 0x47, 0x8d, 0xf2,
	0x17, 0xfc, 0x19, 0x2d, 0x77, 0x6a, 0x4a, 0x8a, 0x4b, 0xed, 0xd4, 0x0f, 0x6b, 0xc7, 0x47, 0x4a,
	0x3a, 0xfa, 0xf4, 0xb0, 0x55, 0xad, 0x29, 0x19, 0xae, 0x7f, 0xbb, 0x52, 0x6e, 0xd4, 0x10, 0xcc,
	0x12, 0x02, 0x25, 0xfe, 0xf0, 0x05, 0x6d, 0x1d, 0x37, 0xab, 0x9c, 0x54, 0xc9, 0x91, 0x2c, 0x24,
	0x1b, 0xf5, 0x97, 0x35, 0x05, 0x48, 0x1e, 0x32, 0xd5, 0x7a, 0x1b, 0x81, 0x3c, 0x47, 0x57, 0x5a,
	0xf5, 0xa6, 0x52, 0xe0, 0xa3, 0x5a, 0xa3, 0x56, 0x51, 0x8a, 0x24, 0x07, 0xa9, 0xf6, 0x41, 0x99,
	0xd6, 0x94, 0x12, 0x29, 0x01, 0xb4, 0x2b, 0xb4, 0x56, 0x6b, 0xb6, 0x0f, 0x5a, 0x1d, 0x65, 0x8d,
	0xc3, 0x8d, 0x56, 0xe5, 0xa5, 0xc0, 0x29, 0x0a, 0x7f, 0x31, 0xad, 0x55, 0x5a, 0x87, 0x87, 0xb5,
	0x66, 0x55, 0x59, 0xe7, 0x2b, 0x1d, 0x68, 0xd6, 0x3e, 0xaa, 0xd5, 0xaa, 0x0a, 0xe1, 0x1c, 0xd5,
	0xda, 0x7e, 0xbd, 0x59, 0xef, 0xd4, 0x5b, 0x4d, 0xe5, 0x2a, 0x4a, 0xe4, 0xef, 0xe1, 0x60, 0x5b,
	0xb9, 0x86, 0x47, 0x16, 0xb5, 0x3f, 0xea, 0x28, 0xd7, 0xf9, 0x14, 0x6b, 0xd5, 0x7a, 0xa7, 0x7a,
	0xa8, 0xdc, 0x20, 0x6b, 0x90, 0x6f, 0x1f, 0x96, 0x1b, 0x8d, 0xd7, 0xf5, 0x66, 0xb5, 0xf5, 0x5a,
	0xb9, 0x29, 0x75, 0x7a, 0x59, 0x53, 0x36, 0xb8, 0xfe, 0xad, 0xe3, 0x4e, 0x8d, 0x56, 0x0f, 0x95,
	0x5b, 0x1c, 0xa8, 0x37, 0x9b, 0x08, 0xdc, 0xe6, 0x8b, 0x78, 0x54, 0x6e, 0xb6, 0x68, 0xf9, 0xb0,
	0xac, 0xdc, 0xe1, 0x2c, 0xd5, 0x56, 0x63, 0xef, 0x0b, 0xe5, 0x23, 0x2e, 0xae, 0xd2, 0x6a, 0xb4,
	0xe8, 0x7e, 0xbd, 0xd1, 0xa9, 0x51, 0xe5, 0x2e, 0xa7, 0x6c, 0xb4, 0xda, 0xed, 0x46, 0xad, 0xdd,
	0x56, 0x36, 0x1f, 0xfd, 0x31, 0xe4, 0x23, 0x45, 0x3e, 0x57, 0xb1, 0xd9, 0xd1, 0x8e, 0x9b, 0x2f,
	0x9b, 0xad, 0xd7, 0x4d, 0xe5, 0x0a, 0x57, 0xf1, 0x75, 0x7d, 0xbf, 0x2e, 0x2d, 0x58, 0x6b, 0x34,
	0x8e, 0x1b, 0x65, 0xaa, 0xc4, 0x51, 0x91, 0xfd, 0xfd, 0x46, 0xbd, 0x59, 0x13, 0x06, 0x6c, 0x75,
	0x0e, 0x6a, 0xb4, 0x59, 0xeb, 0x28, 0x49, 0x0e, 0xd5, 0x02, 0x28, 0xf5, 0xe8, 0x97, 0x90, 0x16,
	0x9d, 0x00, 0x17, 0xdd, 0xd9, 0x8f, 0x88, 0x06, 0x48, 0x1f, 0x6b, 0x95, 0x32, 0xad, 0x8a, 0x63,
	0x9a, 0x63, 0xed, 0xe8, 0xe5, 0x0b, 0x25, 0x8e, 0xa7, 0x37, 0x02, 0x9d, 0xe0, 0xe8, 0x0a, 0xa2,
	0x93, 0xe8, 0x04, 0x02, 0x9d, 0xe2, 0xe8, 0x0e, 0xa2, 0xd3, 0x8f, 0x1e, 0x42, 0x69, 0xfa, 0xa2,
	0x90, 0x6b, 0x36, 0x79, 0x07, 0x5f, 0xba, 0x4e, 0x8b, 0x7e, 0xa1, 0xc4, 0x1e, 0x3d, 0x9d, 0x1c,
	0x25, 0xce, 0x9c, 0x17, 0x65, 0x20, 0xb1, 0xdf, 0x78, 0xa5, 0xc4, 0xf8, 0xe0, 0xf0, 0xe8, 0x47,
	0x4a, 0x9c, 0x0f, 0x0e, 0x1a, 0x6d, 0x25, 0xf1, 0xe8, 0x13, 0xc8, 0x86, 0x5b, 0x29, 0x03, 0x09,
	0xbe, 0x63, 0x90, 0xfe, 0x08, 0xb7, 0x4e, 0x16, 0x92, 0x47, 0xc7, 0xb8, 0x6b, 0x9e, 0x00, 0x4c,
	0x7a, 0x0d, 0xae, 0xc2, 0xa1, 0xf9, 0x4e, 0xee, 0x83, 0x9c, 0x2c, 0x93, 0xe5, 0x61, 0x14, 0x2f,
	0xdc, 0x94, 0xf8, 0xa3, 0x07, 0x90, 0x8f, 0xf4, 0x7b, 0x9c, 0xa3, 0x5c, 0xa7, 0xe8, 0xae, 0x42,
	0x7e, 0xfd, 0x48, 0x89, 0xed, 0x7c, 0x93, 0x86, 0x8c, 0xbc, 0x80, 0x21, 0x2f, 0x27, 0xc3, 0xcd,
	0x85, 0x3f, 0xb6, 0xc3, 0x6b, 0xca, 0xdb, 0x5b, 0x4b, 0x9f, 0xf3, 0x68, 0xc2, 0x85, 0xc9, 0x6a,
	0x67, 0xbe, 0xb0, 0x30, 0x99, 0x2f, 0x10, 0x16, 0x0d, 0xf2, 0x4d, 0xc8, 0x06, 0x9f, 0x34, 0x90,
	0x85, 0x3f, 0xa9, 0x93, 0x1f, 0x3c, 0xdc, 0xbe, 0xbf, 0x9c, 0x80, 0xcb, 0xfb, 0x52, 0xdc, 0x3a,
	0x05, 0x91, 0x9f, 0x3c, 0x58, 0xf6, 0x23, 0x55, 0xf9, 0xe3, 0xd6, 0xdb, 0x1f, 0x5f, 0x4e, 0x14,
	0xd1, 0x15, 0x3f, 0x4a, 0xb9, 0xb7, 0x8c, 0x65, 0xa9, 0xae, 0x93, 0x5f, 0xea, 0x76, 0x00, 0x26,
	0x91, 0x9a, 0xdc, 0x5f, 0xf2, 0x43, 0x44, 0x91, 0xaf, 0x6e, 0x3f, 0xb8, 0x8c, 0x84, 0x4b, 0x7d,
	0x8d, 0xc7, 0x30, 0x93, 0xbe, 0x6c, 0x6b, 0x41, 0xa7, 0x18, 0x1e, 0xd4, 0xcc, 0x9f, 0xfe, 0xc5,
	0x1e, 0xf4, 0x97, 0x17, 0x7b, 0xbe, 0xcb, 0x65, 0x3f, 0x5c, 0xa5, 0xa9, 0x44, 0xf1, 0x5f, 0x40,
	0x71, 0xaa, 0xac, 0x5c, 0x41, 0xf8, 0x27, 0x8b, 0xaa, 0xcc, 0x19, 0xd1, 0x1d, 0x71, 0x11, 0x2f,
	0x32, 0x15, 0xb9, 0x7f, 0xd9, 0x4f, 0xd3, 0x17, 0x2c, 0xf4, 0xcc, 0xaf, 0xd7, 0xf7, 0xae, 0xfd,
	0xe3, 0xb7, 0x9b, 0xb1, 0x7f, 0xfe, 0x76, 0x33, 0xf6, 0xdb, 0x6f, 0x37, 0x63, 0x7f, 0xf9, 0x1f,
	0x9b, 0x57, 0xbe, 0x8c, 0x9f, 0xee, 0x9c, 0xa4, 0xb1, 0x80, 0x7a, 0xfa, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x0d, 0xe9, 0x04, 0x2f, 0x15, 0x40, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayURLClient is the client API for PlayURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayURLClient interface {
	// 获取播放地址
	PlayURL(ctx context.Context, in *PlayURLReq, opts ...grpc.CallOption) (*PlayURLReply, error)
	// 获取投屏地址
	Project(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*ProjectReply, error)
	// 获取播放地址和云控配置信息
	PlayView(ctx context.Context, in *PlayViewReq, opts ...grpc.CallOption) (*PlayViewReply, error)
	// 编辑云控的配置面板信息
	PlayConfEdit(ctx context.Context, in *PlayConfEditReq, opts ...grpc.CallOption) (*PlayConfEditReply, error)
	// 云控配置信息
	PlayConf(ctx context.Context, in *PlayConfReq, opts ...grpc.CallOption) (*PlayConfReply, error)
	// chronos配置信息
	ChronosPkg(ctx context.Context, in *ChronosPkgReq, opts ...grpc.CallOption) (*ChronosPkgReply, error)
	//画中画&airplay投屏-获取hls播放列表
	HlsScheduler(ctx context.Context, in *HlsCommonReq, opts ...grpc.CallOption) (*HlsSchedulerReply, error)
	//画中画&airplay投屏-获取m3u8
	MasterScheduler(ctx context.Context, in *HlsCommonReq, opts ...grpc.CallOption) (*MasterSchedulerReply, error)
	//画中画&airplay投屏-获取m3u8 metadata
	M3U8Scheduler(ctx context.Context, in *HlsCommonReq, opts ...grpc.CallOption) (*M3U8SchedulerReply, error)
	//在线人数查询接口
	PlayOnline(ctx context.Context, in *PlayOnlineReq, opts ...grpc.CallOption) (*PlayOnlineReply, error)
}

type playURLClient struct {
	cc *grpc.ClientConn
}

func NewPlayURLClient(cc *grpc.ClientConn) PlayURLClient {
	return &playURLClient{cc}
}

func (c *playURLClient) PlayURL(ctx context.Context, in *PlayURLReq, opts ...grpc.CallOption) (*PlayURLReply, error) {
	out := new(PlayURLReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/PlayURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) Project(ctx context.Context, in *ProjectReq, opts ...grpc.CallOption) (*ProjectReply, error) {
	out := new(ProjectReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/Project", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) PlayView(ctx context.Context, in *PlayViewReq, opts ...grpc.CallOption) (*PlayViewReply, error) {
	out := new(PlayViewReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/PlayView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) PlayConfEdit(ctx context.Context, in *PlayConfEditReq, opts ...grpc.CallOption) (*PlayConfEditReply, error) {
	out := new(PlayConfEditReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/PlayConfEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) PlayConf(ctx context.Context, in *PlayConfReq, opts ...grpc.CallOption) (*PlayConfReply, error) {
	out := new(PlayConfReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/PlayConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) ChronosPkg(ctx context.Context, in *ChronosPkgReq, opts ...grpc.CallOption) (*ChronosPkgReply, error) {
	out := new(ChronosPkgReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/ChronosPkg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) HlsScheduler(ctx context.Context, in *HlsCommonReq, opts ...grpc.CallOption) (*HlsSchedulerReply, error) {
	out := new(HlsSchedulerReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/HlsScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) MasterScheduler(ctx context.Context, in *HlsCommonReq, opts ...grpc.CallOption) (*MasterSchedulerReply, error) {
	out := new(MasterSchedulerReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/MasterScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) M3U8Scheduler(ctx context.Context, in *HlsCommonReq, opts ...grpc.CallOption) (*M3U8SchedulerReply, error) {
	out := new(M3U8SchedulerReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/M3u8Scheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playURLClient) PlayOnline(ctx context.Context, in *PlayOnlineReq, opts ...grpc.CallOption) (*PlayOnlineReply, error) {
	out := new(PlayOnlineReply)
	err := c.cc.Invoke(ctx, "/playurl.service.v2.PlayURL/PlayOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayURLServer is the server API for PlayURL service.
type PlayURLServer interface {
	// 获取播放地址
	PlayURL(context.Context, *PlayURLReq) (*PlayURLReply, error)
	// 获取投屏地址
	Project(context.Context, *ProjectReq) (*ProjectReply, error)
	// 获取播放地址和云控配置信息
	PlayView(context.Context, *PlayViewReq) (*PlayViewReply, error)
	// 编辑云控的配置面板信息
	PlayConfEdit(context.Context, *PlayConfEditReq) (*PlayConfEditReply, error)
	// 云控配置信息
	PlayConf(context.Context, *PlayConfReq) (*PlayConfReply, error)
	// chronos配置信息
	ChronosPkg(context.Context, *ChronosPkgReq) (*ChronosPkgReply, error)
	//画中画&airplay投屏-获取hls播放列表
	HlsScheduler(context.Context, *HlsCommonReq) (*HlsSchedulerReply, error)
	//画中画&airplay投屏-获取m3u8
	MasterScheduler(context.Context, *HlsCommonReq) (*MasterSchedulerReply, error)
	//画中画&airplay投屏-获取m3u8 metadata
	M3U8Scheduler(context.Context, *HlsCommonReq) (*M3U8SchedulerReply, error)
	//在线人数查询接口
	PlayOnline(context.Context, *PlayOnlineReq) (*PlayOnlineReply, error)
}

// UnimplementedPlayURLServer can be embedded to have forward compatible implementations.
type UnimplementedPlayURLServer struct {
}

func (*UnimplementedPlayURLServer) PlayURL(ctx context.Context, req *PlayURLReq) (*PlayURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayURL not implemented")
}
func (*UnimplementedPlayURLServer) Project(ctx context.Context, req *ProjectReq) (*ProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Project not implemented")
}
func (*UnimplementedPlayURLServer) PlayView(ctx context.Context, req *PlayViewReq) (*PlayViewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayView not implemented")
}
func (*UnimplementedPlayURLServer) PlayConfEdit(ctx context.Context, req *PlayConfEditReq) (*PlayConfEditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayConfEdit not implemented")
}
func (*UnimplementedPlayURLServer) PlayConf(ctx context.Context, req *PlayConfReq) (*PlayConfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayConf not implemented")
}
func (*UnimplementedPlayURLServer) ChronosPkg(ctx context.Context, req *ChronosPkgReq) (*ChronosPkgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChronosPkg not implemented")
}
func (*UnimplementedPlayURLServer) HlsScheduler(ctx context.Context, req *HlsCommonReq) (*HlsSchedulerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HlsScheduler not implemented")
}
func (*UnimplementedPlayURLServer) MasterScheduler(ctx context.Context, req *HlsCommonReq) (*MasterSchedulerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterScheduler not implemented")
}
func (*UnimplementedPlayURLServer) M3U8Scheduler(ctx context.Context, req *HlsCommonReq) (*M3U8SchedulerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method M3U8Scheduler not implemented")
}
func (*UnimplementedPlayURLServer) PlayOnline(ctx context.Context, req *PlayOnlineReq) (*PlayOnlineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayOnline not implemented")
}

func RegisterPlayURLServer(s *grpc.Server, srv PlayURLServer) {
	s.RegisterService(&_PlayURL_serviceDesc, srv)
}

func _PlayURL_PlayURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).PlayURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/PlayURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).PlayURL(ctx, req.(*PlayURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_Project_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).Project(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/Project",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).Project(ctx, req.(*ProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_PlayView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).PlayView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/PlayView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).PlayView(ctx, req.(*PlayViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_PlayConfEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayConfEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).PlayConfEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/PlayConfEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).PlayConfEdit(ctx, req.(*PlayConfEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_PlayConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayConfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).PlayConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/PlayConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).PlayConf(ctx, req.(*PlayConfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_ChronosPkg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChronosPkgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).ChronosPkg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/ChronosPkg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).ChronosPkg(ctx, req.(*ChronosPkgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_HlsScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HlsCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).HlsScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/HlsScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).HlsScheduler(ctx, req.(*HlsCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_MasterScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HlsCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).MasterScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/MasterScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).MasterScheduler(ctx, req.(*HlsCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_M3U8Scheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HlsCommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).M3U8Scheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/M3U8Scheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).M3U8Scheduler(ctx, req.(*HlsCommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayURL_PlayOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayURLServer).PlayOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playurl.service.v2.PlayURL/PlayOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayURLServer).PlayOnline(ctx, req.(*PlayOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlayURL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "playurl.service.v2.PlayURL",
	HandlerType: (*PlayURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayURL",
			Handler:    _PlayURL_PlayURL_Handler,
		},
		{
			MethodName: "Project",
			Handler:    _PlayURL_Project_Handler,
		},
		{
			MethodName: "PlayView",
			Handler:    _PlayURL_PlayView_Handler,
		},
		{
			MethodName: "PlayConfEdit",
			Handler:    _PlayURL_PlayConfEdit_Handler,
		},
		{
			MethodName: "PlayConf",
			Handler:    _PlayURL_PlayConf_Handler,
		},
		{
			MethodName: "ChronosPkg",
			Handler:    _PlayURL_ChronosPkg_Handler,
		},
		{
			MethodName: "HlsScheduler",
			Handler:    _PlayURL_HlsScheduler_Handler,
		},
		{
			MethodName: "MasterScheduler",
			Handler:    _PlayURL_MasterScheduler_Handler,
		},
		{
			MethodName: "M3u8Scheduler",
			Handler:    _PlayURL_M3U8Scheduler_Handler,
		},
		{
			MethodName: "PlayOnline",
			Handler:    _PlayURL_PlayOnline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/playurl/service/api/v2/api.proto",
}

func (m *PlayOnlineReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayOnlineReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayOnlineReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayOnlineReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayOnlineReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayOnlineReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsHide {
		i--
		if m.IsHide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Count) > 0 {
		for k := range m.Count {
			v := m.Count[k]
			baseI := i
			i = encodeVarintApi(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlayConfReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayConfReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayConfReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FPLocal) > 0 {
		i -= len(m.FPLocal)
		copy(dAtA[i:], m.FPLocal)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FPLocal)))
		i--
		dAtA[i] = 0x42
	}
	if m.FMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FMode))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Brand) > 0 {
		i -= len(m.Brand)
		copy(dAtA[i:], m.Brand)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Brand)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayConfReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayConfReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayConfReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayConf != nil {
		{
			size, err := m.PlayConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayConfEditReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayConfEditReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayConfEditReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FpLocal) > 0 {
		i -= len(m.FpLocal)
		copy(dAtA[i:], m.FpLocal)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FpLocal)))
		i--
		dAtA[i] = 0x42
	}
	if m.FMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.FMode))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Brand) > 0 {
		i -= len(m.Brand)
		copy(dAtA[i:], m.Brand)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Brand)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayConf) > 0 {
		for iNdEx := len(m.PlayConf) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayConf[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PlayConfState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayConfState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayConfState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfValue != nil {
		{
			size, err := m.ConfValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FieldValue != nil {
		{
			size, err := m.FieldValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Show {
		i--
		if m.Show {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ConfType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ConfType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FieldValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FieldValue_Switch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValue_Switch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Switch {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *PlayViewReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayViewReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayViewReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipConf != nil {
		{
			size, err := m.VipConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Volume != nil {
		{
			size, err := m.Volume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Ab != nil {
		{
			size, err := m.Ab.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PlayArc != nil {
		{
			size, err := m.PlayArc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Chronos != nil {
		{
			size, err := m.Chronos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PlayConf != nil {
		{
			size, err := m.PlayConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PlayUrl != nil {
		{
			size, err := m.PlayUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VipConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x12
	}
	if m.LimitFree != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LimitFree))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VolumeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetTp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetTp))))
		i--
		dAtA[i] = 0x39
	}
	if m.TargetI != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetI))))
		i--
		dAtA[i] = 0x31
	}
	if m.TargetOffset != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetOffset))))
		i--
		dAtA[i] = 0x29
	}
	if m.MeasuredThreshold != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeasuredThreshold))))
		i--
		dAtA[i] = 0x21
	}
	if m.MeasuredTp != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeasuredTp))))
		i--
		dAtA[i] = 0x19
	}
	if m.MeasuredLra != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeasuredLra))))
		i--
		dAtA[i] = 0x11
	}
	if m.MeasuredI != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MeasuredI))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *AB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Group != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Group))
		i--
		dAtA[i] = 0x10
	}
	if m.Glance != nil {
		{
			size, err := m.Glance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Glance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Glance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Glance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Times != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x10
	}
	if m.CanWatch {
		i--
		if m.CanWatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Shake != nil {
		{
			size, err := m.Shake.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Shake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Shake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintApi(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Chronos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chronos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chronos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintApi(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayUrlInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayUrlInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayUrlInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSteinsUpgrade != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsSteinsUpgrade))
		i--
		dAtA[i] = 0x18
	}
	if m.ExtInfo != nil {
		{
			size, err := m.ExtInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Playurl != nil {
		{
			size, err := m.Playurl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayAbilityConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayAbilityConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayAbilityConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LossLessConf != nil {
		{
			size, err := m.LossLessConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.ColorFilterConf != nil {
		{
			size, err := m.ColorFilterConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.DolbyConf != nil {
		{
			size, err := m.DolbyConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.PanoramaConf != nil {
		{
			size, err := m.PanoramaConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.InnerDmConf != nil {
		{
			size, err := m.InnerDmConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.OuterDmConf != nil {
		{
			size, err := m.OuterDmConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.ShakeConf != nil {
		{
			size, err := m.ShakeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.SmallWindowConf != nil {
		{
			size, err := m.SmallWindowConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.EditDmConf != nil {
		{
			size, err := m.EditDmConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.NextConf != nil {
		{
			size, err := m.NextConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.SelectionsConf != nil {
		{
			size, err := m.SelectionsConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.DefinitionConf != nil {
		{
			size, err := m.DefinitionConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.PlaybackSpeedConf != nil {
		{
			size, err := m.PlaybackSpeedConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.RecommendConf != nil {
		{
			size, err := m.RecommendConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.LockScreenConf != nil {
		{
			size, err := m.LockScreenConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ScreenShotConf != nil {
		{
			size, err := m.ScreenShotConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.ShareConf != nil {
		{
			size, err := m.ShareConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ElecConf != nil {
		{
			size, err := m.ElecConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CoinConf != nil {
		{
			size, err := m.CoinConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.DislikeConf != nil {
		{
			size, err := m.DislikeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.LikeConf != nil {
		{
			size, err := m.LikeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ScaleModeConf != nil {
		{
			size, err := m.ScaleModeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PlaybackModeConf != nil {
		{
			size, err := m.PlaybackModeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TimeUpConf != nil {
		{
			size, err := m.TimeUpConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PlaybackRateConf != nil {
		{
			size, err := m.PlaybackRateConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SubtitleConf != nil {
		{
			size, err := m.SubtitleConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FeedbackConf != nil {
		{
			size, err := m.FeedbackConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CastConf != nil {
		{
			size, err := m.CastConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FlipConf != nil {
		{
			size, err := m.FlipConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BackgroundPlayConf != nil {
		{
			size, err := m.BackgroundPlayConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CloudConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfValue != nil {
		{
			size, err := m.ConfValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FieldValue != nil {
		{
			size, err := m.FieldValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Show {
		i--
		if m.Show {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConfValue_SwitchVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfValue_SwitchVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.SwitchVal {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ConfValue_SelectedVal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfValue_SelectedVal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintApi(dAtA, i, uint64(m.SelectedVal))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *PlayArcConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayArcConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayArcConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LossLessConf != nil {
		{
			size, err := m.LossLessConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.ColorFilterConf != nil {
		{
			size, err := m.ColorFilterConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.ScreenRecordingConf != nil {
		{
			size, err := m.ScreenRecordingConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.DolbyConf != nil {
		{
			size, err := m.DolbyConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.PanoramaConf != nil {
		{
			size, err := m.PanoramaConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.InnerDmConf != nil {
		{
			size, err := m.InnerDmConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.OuterDmConf != nil {
		{
			size, err := m.OuterDmConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.ShakeConf != nil {
		{
			size, err := m.ShakeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.SmallWindowConf != nil {
		{
			size, err := m.SmallWindowConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.EditDmConf != nil {
		{
			size, err := m.EditDmConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.NextConf != nil {
		{
			size, err := m.NextConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.SelectionsConf != nil {
		{
			size, err := m.SelectionsConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.DefinitionConf != nil {
		{
			size, err := m.DefinitionConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.PlaybackSpeedConf != nil {
		{
			size, err := m.PlaybackSpeedConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.RecommendConf != nil {
		{
			size, err := m.RecommendConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.LockScreenConf != nil {
		{
			size, err := m.LockScreenConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ScreenShotConf != nil {
		{
			size, err := m.ScreenShotConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.ShareConf != nil {
		{
			size, err := m.ShareConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ElecConf != nil {
		{
			size, err := m.ElecConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CoinConf != nil {
		{
			size, err := m.CoinConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.DislikeConf != nil {
		{
			size, err := m.DislikeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.LikeConf != nil {
		{
			size, err := m.LikeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ScaleModeConf != nil {
		{
			size, err := m.ScaleModeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.PlaybackModeConf != nil {
		{
			size, err := m.PlaybackModeConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TimeUpConf != nil {
		{
			size, err := m.TimeUpConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PlaybackRateConf != nil {
		{
			size, err := m.PlaybackRateConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SubtitleConf != nil {
		{
			size, err := m.SubtitleConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FeedbackConf != nil {
		{
			size, err := m.FeedbackConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CastConf != nil {
		{
			size, err := m.CastConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FlipConf != nil {
		{
			size, err := m.FlipConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BackgroundPlayConf != nil {
		{
			size, err := m.BackgroundPlayConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArcConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArcConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArcConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UnsupportScene) > 0 {
		dAtA80 := make([]byte, len(m.UnsupportScene)*10)
		var j79 int
		for _, num1 := range m.UnsupportScene {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA80[j79] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j79++
			}
			dAtA80[j79] = uint8(num)
			j79++
		}
		i -= j79
		copy(dAtA[i:], dAtA80[:j79])
		i = encodeVarintApi(dAtA, i, uint64(j79))
		i--
		dAtA[i] = 0x22
	}
	if m.ExtraContent != nil {
		{
			size, err := m.ExtraContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsSupport {
		i--
		if m.IsSupport {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtraContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtraContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DisabledCode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DisabledCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DisabledReason) > 0 {
		i -= len(m.DisabledReason)
		copy(dAtA[i:], m.DisabledReason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisabledReason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayViewReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayViewReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayViewReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDazhongcar {
		i--
		if m.IsDazhongcar {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.VoiceBalance != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoiceBalance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if len(m.FpLocal) > 0 {
		i -= len(m.FpLocal)
		copy(dAtA[i:], m.FpLocal)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FpLocal)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.BusinessSource != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BusinessSource))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.LessonsMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LessonsMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.TfType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TfType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.NetType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NetType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.VerifyVip != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VerifyVip))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.H5Hq {
		i--
		if m.H5Hq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.VerifySteins != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VerifySteins))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x72
	}
	if m.UpgradeCid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpgradeCid))
		i--
		dAtA[i] = 0x68
	}
	if m.UpgradeAid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpgradeAid))
		i--
		dAtA[i] = 0x60
	}
	if m.Fourk {
		i--
		if m.Fourk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x50
	}
	if m.Download != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Download))
		i--
		dAtA[i] = 0x48
	}
	if m.BackupNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BackupNum))
		i--
		dAtA[i] = 0x40
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x38
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x30
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x22
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayURLReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayURLReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayURLReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDazhongcar {
		i--
		if m.IsDazhongcar {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.VoiceBalance != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VoiceBalance))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.TfType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TfType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.NetType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NetType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.VerifyVip != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VerifyVip))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.H5Hq {
		i--
		if m.H5Hq {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.VerifySteins != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VerifySteins))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x72
	}
	if m.UpgradeCid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpgradeCid))
		i--
		dAtA[i] = 0x68
	}
	if m.UpgradeAid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.UpgradeAid))
		i--
		dAtA[i] = 0x60
	}
	if m.Fourk {
		i--
		if m.Fourk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x50
	}
	if m.Download != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Download))
		i--
		dAtA[i] = 0x48
	}
	if m.BackupNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BackupNum))
		i--
		dAtA[i] = 0x40
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x38
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x30
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x22
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayURLReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayURLReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayURLReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Volume != nil {
		{
			size, err := m.Volume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Playurl != nil {
		{
			size, err := m.Playurl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VipControl != nil {
		{
			size, err := m.VipControl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VipControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Control {
		i--
		if m.Control {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HighFormat != nil {
		{
			size, err := m.HighFormat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.SupportFormats) > 0 {
		for iNdEx := len(m.SupportFormats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupportFormats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.NoRexcode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoRexcode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Dash != nil {
		{
			size, err := m.Dash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Durl) > 0 {
		for iNdEx := len(m.Durl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Durl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.VideoProject {
		i--
		if m.VideoProject {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x60
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x58
	}
	if m.VideoCodecid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VideoCodecid))
		i--
		dAtA[i] = 0x50
	}
	if m.Timelength != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timelength))
		i--
		dAtA[i] = 0x48
	}
	if len(m.AcceptQuality) > 0 {
		dAtA88 := make([]byte, len(m.AcceptQuality)*10)
		var j87 int
		for _, num := range m.AcceptQuality {
			for num >= 1<<7 {
				dAtA88[j87] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j87++
			}
			dAtA88[j87] = uint8(num)
			j87++
		}
		i -= j87
		copy(dAtA[i:], dAtA88[:j87])
		i = encodeVarintApi(dAtA, i, uint64(j87))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AcceptDescription) > 0 {
		for iNdEx := len(m.AcceptDescription) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AcceptDescription[iNdEx])
			copy(dAtA[i:], m.AcceptDescription[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.AcceptDescription[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.AcceptFormat) > 0 {
		i -= len(m.AcceptFormat)
		copy(dAtA[i:], m.AcceptFormat)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AcceptFormat)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Quality != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BackupUrl) > 0 {
		for iNdEx := len(m.BackupUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BackupUrl[iNdEx])
			copy(dAtA[i:], m.BackupUrl[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.BackupUrl[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Vhead) > 0 {
		i -= len(m.Vhead)
		copy(dAtA[i:], m.Vhead)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Vhead)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ahead) > 0 {
		i -= len(m.Ahead)
		copy(dAtA[i:], m.Ahead)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ahead)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.Length != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Order != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseDash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LossLessItem != nil {
		{
			size, err := m.LossLessItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Dolby != nil {
		{
			size, err := m.Dolby.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Audio) > 0 {
		for iNdEx := len(m.Audio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Audio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Video) > 0 {
		for iNdEx := len(m.Video) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Video[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinBufferTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinBufferTime))))
		i--
		dAtA[i] = 0x15
	}
	if m.Duration != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LossLessItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LossLessItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LossLessItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Audio != nil {
		{
			size, err := m.Audio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsLosslessAudio {
		i--
		if m.IsLosslessAudio {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DolbyItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DolbyItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DolbyItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Audio) > 0 {
		for iNdEx := len(m.Audio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Audio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DashSegmentBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DashSegmentBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DashSegmentBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IndexRange) > 0 {
		i -= len(m.IndexRange)
		copy(dAtA[i:], m.IndexRange)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IndexRange)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Initialization) > 0 {
		i -= len(m.Initialization)
		copy(dAtA[i:], m.Initialization)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Initialization)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DashItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DashItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DashItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoRexcode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NoRexcode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0x72
	}
	if m.Codecid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Codecid))
		i--
		dAtA[i] = 0x68
	}
	if m.SegmentBase != nil {
		{
			size, err := m.SegmentBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.StartWithSap != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StartWithSap))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Sar) > 0 {
		i -= len(m.Sar)
		copy(dAtA[i:], m.Sar)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sar)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FrameRate) > 0 {
		i -= len(m.FrameRate)
		copy(dAtA[i:], m.FrameRate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FrameRate)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x40
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Codecs) > 0 {
		i -= len(m.Codecs)
		copy(dAtA[i:], m.Codecs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Codecs)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Bandwidth != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BackupUrl) > 0 {
		for iNdEx := len(m.BackupUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BackupUrl[iNdEx])
			copy(dAtA[i:], m.BackupUrl[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.BackupUrl[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BaseUrl) > 0 {
		i -= len(m.BaseUrl)
		copy(dAtA[i:], m.BaseUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.BaseUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FormatDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FormatDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FormatDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Codecs) > 0 {
		for iNdEx := len(m.Codecs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Codecs[iNdEx])
			copy(dAtA[i:], m.Codecs[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Codecs[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Superscript) > 0 {
		i -= len(m.Superscript)
		copy(dAtA[i:], m.Superscript)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Superscript)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DisplayDesc) > 0 {
		i -= len(m.DisplayDesc)
		copy(dAtA[i:], m.DisplayDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.DisplayDesc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewDescription) > 0 {
		i -= len(m.NewDescription)
		copy(dAtA[i:], m.NewDescription)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NewDescription)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x12
	}
	if m.Quality != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HlsCommonReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HlsCommonReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HlsCommonReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LessonsMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LessonsMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.TeenagersMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TeenagersMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Dolby != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Dolby))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.QnCategory != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.QnCategory))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.VerifyVip != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VerifyVip))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.TfType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TfType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.NetType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NetType))
		i--
		dAtA[i] = 0x78
	}
	if m.DeviceType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x70
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x62
	}
	if m.RequestType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x58
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x50
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x48
	}
	if m.BackupNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BackupNum))
		i--
		dAtA[i] = 0x40
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x38
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x30
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x22
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HlsSchedulerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HlsSchedulerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HlsSchedulerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Playurl != nil {
		{
			size, err := m.Playurl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MasterSchedulerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterSchedulerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MasterSchedulerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MasterScheduler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterScheduler) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MasterScheduler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Videos) > 0 {
		for iNdEx := len(m.Videos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Videos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Audio != nil {
		{
			size, err := m.Audio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Video != nil {
		{
			size, err := m.Video.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *M3U8Video) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3U8Video) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *M3U8Video) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AverageBandwidth != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.AverageBandwidth))
		i--
		dAtA[i] = 0x38
	}
	if len(m.FrameRate) > 0 {
		i -= len(m.FrameRate)
		copy(dAtA[i:], m.FrameRate)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FrameRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Codecs) > 0 {
		i -= len(m.Codecs)
		copy(dAtA[i:], m.Codecs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Codecs)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Resolution) > 0 {
		i -= len(m.Resolution)
		copy(dAtA[i:], m.Resolution)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Resolution)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Bandwidth != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x10
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *M3U8Audio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3U8Audio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *M3U8Audio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GroupId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Codecs) > 0 {
		i -= len(m.Codecs)
		copy(dAtA[i:], m.Codecs)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Codecs)))
		i--
		dAtA[i] = 0x12
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HlsResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HlsResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HlsResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SupportFormats) > 0 {
		for iNdEx := len(m.SupportFormats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupportFormats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Durl) > 0 {
		for iNdEx := len(m.Durl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Durl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.VideoProject {
		i--
		if m.VideoProject {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.VideoCodecid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.VideoCodecid))
		i--
		dAtA[i] = 0x38
	}
	if m.Timelength != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Timelength))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Quality != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *M3U8ResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3U8ResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *M3U8ResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.M3U8Data) > 0 {
		i -= len(m.M3U8Data)
		copy(dAtA[i:], m.M3U8Data)
		i = encodeVarintApi(dAtA, i, uint64(len(m.M3U8Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *M3U8SchedulerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *M3U8SchedulerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *M3U8SchedulerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProjectReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Business != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DeviceType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x78
	}
	if m.Protocol != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x70
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x62
	}
	if m.Fourk {
		i--
		if m.Fourk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ForceHost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ForceHost))
		i--
		dAtA[i] = 0x50
	}
	if m.Download != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Download))
		i--
		dAtA[i] = 0x48
	}
	if m.BackupNum != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BackupNum))
		i--
		dAtA[i] = 0x40
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x38
	}
	if m.Fnval != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x30
	}
	if m.Fnver != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x22
	}
	if m.Qn != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Qn))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProjectReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Playurl != nil {
		{
			size, err := m.Playurl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayConfEditReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayConfEditReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayConfEditReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ChronosPkgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChronosPkgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChronosPkgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0x32
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Aid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChronosPkgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChronosPkgReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChronosPkgReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintApi(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Md5) > 0 {
		i -= len(m.Md5)
		copy(dAtA[i:], m.Md5)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Md5)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayOnlineReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayOnlineReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Count) > 0 {
		for k, v := range m.Count {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.IsHide {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayConfReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FMode != 0 {
		n += 1 + sovApi(uint64(m.FMode))
	}
	l = len(m.FPLocal)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayConfReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayConf != nil {
		l = m.PlayConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayConfEditReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayConf) > 0 {
		for _, e := range m.PlayConf {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FMode != 0 {
		n += 1 + sovApi(uint64(m.FMode))
	}
	l = len(m.FpLocal)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayConfState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfType != 0 {
		n += 1 + sovApi(uint64(m.ConfType))
	}
	if m.Show {
		n += 2
	}
	if m.FieldValue != nil {
		l = m.FieldValue.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ConfValue != nil {
		l = m.ConfValue.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldValue_Switch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *PlayViewReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayUrl != nil {
		l = m.PlayUrl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayConf != nil {
		l = m.PlayConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Chronos != nil {
		l = m.Chronos.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlayArc != nil {
		l = m.PlayArc.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ab != nil {
		l = m.Ab.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Volume != nil {
		l = m.Volume.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VipConf != nil {
		l = m.VipConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LimitFree != 0 {
		n += 1 + sovApi(uint64(m.LimitFree))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VolumeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MeasuredI != 0 {
		n += 9
	}
	if m.MeasuredLra != 0 {
		n += 9
	}
	if m.MeasuredTp != 0 {
		n += 9
	}
	if m.MeasuredThreshold != 0 {
		n += 9
	}
	if m.TargetOffset != 0 {
		n += 9
	}
	if m.TargetI != 0 {
		n += 9
	}
	if m.TargetTp != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Glance != nil {
		l = m.Glance.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Group != 0 {
		n += 1 + sovApi(uint64(m.Group))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Glance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanWatch {
		n += 2
	}
	if m.Times != 0 {
		n += 1 + sovApi(uint64(m.Times))
	}
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shake != nil {
		l = m.Shake.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Shake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Chronos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayUrlInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Playurl != nil {
		l = m.Playurl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ExtInfo != nil {
		l = m.ExtInfo.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsSteinsUpgrade != 0 {
		n += 1 + sovApi(uint64(m.IsSteinsUpgrade))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayAbilityConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackgroundPlayConf != nil {
		l = m.BackgroundPlayConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FlipConf != nil {
		l = m.FlipConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CastConf != nil {
		l = m.CastConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FeedbackConf != nil {
		l = m.FeedbackConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SubtitleConf != nil {
		l = m.SubtitleConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlaybackRateConf != nil {
		l = m.PlaybackRateConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TimeUpConf != nil {
		l = m.TimeUpConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlaybackModeConf != nil {
		l = m.PlaybackModeConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ScaleModeConf != nil {
		l = m.ScaleModeConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LikeConf != nil {
		l = m.LikeConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DislikeConf != nil {
		l = m.DislikeConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CoinConf != nil {
		l = m.CoinConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ElecConf != nil {
		l = m.ElecConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShareConf != nil {
		l = m.ShareConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ScreenShotConf != nil {
		l = m.ScreenShotConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LockScreenConf != nil {
		l = m.LockScreenConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.RecommendConf != nil {
		l = m.RecommendConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.PlaybackSpeedConf != nil {
		l = m.PlaybackSpeedConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DefinitionConf != nil {
		l = m.DefinitionConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SelectionsConf != nil {
		l = m.SelectionsConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.NextConf != nil {
		l = m.NextConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.EditDmConf != nil {
		l = m.EditDmConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SmallWindowConf != nil {
		l = m.SmallWindowConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ShakeConf != nil {
		l = m.ShakeConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.OuterDmConf != nil {
		l = m.OuterDmConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.InnerDmConf != nil {
		l = m.InnerDmConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.PanoramaConf != nil {
		l = m.PanoramaConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DolbyConf != nil {
		l = m.DolbyConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ColorFilterConf != nil {
		l = m.ColorFilterConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.LossLessConf != nil {
		l = m.LossLessConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloudConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Show {
		n += 2
	}
	if m.FieldValue != nil {
		l = m.FieldValue.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ConfValue != nil {
		l = m.ConfValue.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfValue_SwitchVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ConfValue_SelectedVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovApi(uint64(m.SelectedVal))
	return n
}
func (m *PlayArcConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackgroundPlayConf != nil {
		l = m.BackgroundPlayConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FlipConf != nil {
		l = m.FlipConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CastConf != nil {
		l = m.CastConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FeedbackConf != nil {
		l = m.FeedbackConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SubtitleConf != nil {
		l = m.SubtitleConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlaybackRateConf != nil {
		l = m.PlaybackRateConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.TimeUpConf != nil {
		l = m.TimeUpConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PlaybackModeConf != nil {
		l = m.PlaybackModeConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ScaleModeConf != nil {
		l = m.ScaleModeConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LikeConf != nil {
		l = m.LikeConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DislikeConf != nil {
		l = m.DislikeConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CoinConf != nil {
		l = m.CoinConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ElecConf != nil {
		l = m.ElecConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ShareConf != nil {
		l = m.ShareConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ScreenShotConf != nil {
		l = m.ScreenShotConf.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LockScreenConf != nil {
		l = m.LockScreenConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.RecommendConf != nil {
		l = m.RecommendConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.PlaybackSpeedConf != nil {
		l = m.PlaybackSpeedConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DefinitionConf != nil {
		l = m.DefinitionConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SelectionsConf != nil {
		l = m.SelectionsConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.NextConf != nil {
		l = m.NextConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.EditDmConf != nil {
		l = m.EditDmConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SmallWindowConf != nil {
		l = m.SmallWindowConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ShakeConf != nil {
		l = m.ShakeConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.OuterDmConf != nil {
		l = m.OuterDmConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.InnerDmConf != nil {
		l = m.InnerDmConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.PanoramaConf != nil {
		l = m.PanoramaConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.DolbyConf != nil {
		l = m.DolbyConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ScreenRecordingConf != nil {
		l = m.ScreenRecordingConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.ColorFilterConf != nil {
		l = m.ColorFilterConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.LossLessConf != nil {
		l = m.LossLessConf.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArcConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSupport {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	if m.ExtraContent != nil {
		l = m.ExtraContent.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.UnsupportScene) > 0 {
		l = 0
		for _, e := range m.UnsupportScene {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtraContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisabledReason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DisabledCode != 0 {
		n += 1 + sovApi(uint64(m.DisabledCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayViewReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.BackupNum != 0 {
		n += 1 + sovApi(uint64(m.BackupNum))
	}
	if m.Download != 0 {
		n += 1 + sovApi(uint64(m.Download))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk {
		n += 2
	}
	if m.UpgradeAid != 0 {
		n += 1 + sovApi(uint64(m.UpgradeAid))
	}
	if m.UpgradeCid != 0 {
		n += 1 + sovApi(uint64(m.UpgradeCid))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VerifySteins != 0 {
		n += 2 + sovApi(uint64(m.VerifySteins))
	}
	if m.H5Hq {
		n += 3
	}
	if m.Build != 0 {
		n += 2 + sovApi(uint64(m.Build))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.VerifyVip != 0 {
		n += 2 + sovApi(uint64(m.VerifyVip))
	}
	if m.TeenagersMode != 0 {
		n += 2 + sovApi(uint64(m.TeenagersMode))
	}
	if m.NetType != 0 {
		n += 2 + sovApi(uint64(m.NetType))
	}
	if m.TfType != 0 {
		n += 2 + sovApi(uint64(m.TfType))
	}
	if m.LessonsMode != 0 {
		n += 2 + sovApi(uint64(m.LessonsMode))
	}
	if m.BusinessSource != 0 {
		n += 2 + sovApi(uint64(m.BusinessSource))
	}
	l = len(m.FpLocal)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.VoiceBalance != 0 {
		n += 2 + sovApi(uint64(m.VoiceBalance))
	}
	if m.IsDazhongcar {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayURLReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.BackupNum != 0 {
		n += 1 + sovApi(uint64(m.BackupNum))
	}
	if m.Download != 0 {
		n += 1 + sovApi(uint64(m.Download))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk {
		n += 2
	}
	if m.UpgradeAid != 0 {
		n += 1 + sovApi(uint64(m.UpgradeAid))
	}
	if m.UpgradeCid != 0 {
		n += 1 + sovApi(uint64(m.UpgradeCid))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.VerifySteins != 0 {
		n += 2 + sovApi(uint64(m.VerifySteins))
	}
	if m.H5Hq {
		n += 3
	}
	if m.Build != 0 {
		n += 2 + sovApi(uint64(m.Build))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.VerifyVip != 0 {
		n += 2 + sovApi(uint64(m.VerifyVip))
	}
	if m.NetType != 0 {
		n += 2 + sovApi(uint64(m.NetType))
	}
	if m.TfType != 0 {
		n += 2 + sovApi(uint64(m.TfType))
	}
	if m.VoiceBalance != 0 {
		n += 2 + sovApi(uint64(m.VoiceBalance))
	}
	if m.IsDazhongcar {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayURLReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Playurl != nil {
		l = m.Playurl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Volume != nil {
		l = m.Volume.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VipControl != nil {
		l = m.VipControl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Control {
		n += 2
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Quality != 0 {
		n += 1 + sovApi(uint64(m.Quality))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AcceptFormat)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.AcceptDescription) > 0 {
		for _, s := range m.AcceptDescription {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Timelength != 0 {
		n += 1 + sovApi(uint64(m.Timelength))
	}
	if m.VideoCodecid != 0 {
		n += 1 + sovApi(uint64(m.VideoCodecid))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.VideoProject {
		n += 2
	}
	if len(m.Durl) > 0 {
		for _, e := range m.Durl {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Dash != nil {
		l = m.Dash.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NoRexcode != 0 {
		n += 2 + sovApi(uint64(m.NoRexcode))
	}
	if len(m.SupportFormats) > 0 {
		for _, e := range m.SupportFormats {
			l = e.Size()
			n += 2 + l + sovApi(uint64(l))
		}
	}
	if m.HighFormat != nil {
		l = m.HighFormat.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovApi(uint64(m.Order))
	}
	if m.Length != 0 {
		n += 1 + sovApi(uint64(m.Length))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	l = len(m.Ahead)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Vhead)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.BackupUrl) > 0 {
		for _, s := range m.BackupUrl {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseDash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovApi(uint64(m.Duration))
	}
	if m.MinBufferTime != 0 {
		n += 5
	}
	if len(m.Video) > 0 {
		for _, e := range m.Video {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Audio) > 0 {
		for _, e := range m.Audio {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Dolby != nil {
		l = m.Dolby.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LossLessItem != nil {
		l = m.LossLessItem.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LossLessItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLosslessAudio {
		n += 2
	}
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DolbyItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if len(m.Audio) > 0 {
		for _, e := range m.Audio {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DashSegmentBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Initialization)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IndexRange)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DashItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.BackupUrl) > 0 {
		for _, s := range m.BackupUrl {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Bandwidth != 0 {
		n += 1 + sovApi(uint64(m.Bandwidth))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Codecs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	l = len(m.FrameRate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sar)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartWithSap != 0 {
		n += 1 + sovApi(uint64(m.StartWithSap))
	}
	if m.SegmentBase != nil {
		l = m.SegmentBase.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Codecid != 0 {
		n += 1 + sovApi(uint64(m.Codecid))
	}
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.NoRexcode != 0 {
		n += 2 + sovApi(uint64(m.NoRexcode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FormatDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quality != 0 {
		n += 1 + sovApi(uint64(m.Quality))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NewDescription)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.DisplayDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Superscript)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Codecs) > 0 {
		for _, s := range m.Codecs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HlsCommonReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.BackupNum != 0 {
		n += 1 + sovApi(uint64(m.BackupNum))
	}
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.RequestType != 0 {
		n += 1 + sovApi(uint64(m.RequestType))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DeviceType != 0 {
		n += 1 + sovApi(uint64(m.DeviceType))
	}
	if m.NetType != 0 {
		n += 1 + sovApi(uint64(m.NetType))
	}
	if m.TfType != 0 {
		n += 2 + sovApi(uint64(m.TfType))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.VerifyVip != 0 {
		n += 2 + sovApi(uint64(m.VerifyVip))
	}
	if m.Build != 0 {
		n += 2 + sovApi(uint64(m.Build))
	}
	if m.QnCategory != 0 {
		n += 2 + sovApi(uint64(m.QnCategory))
	}
	if m.Dolby != 0 {
		n += 2 + sovApi(uint64(m.Dolby))
	}
	if m.TeenagersMode != 0 {
		n += 2 + sovApi(uint64(m.TeenagersMode))
	}
	if m.LessonsMode != 0 {
		n += 2 + sovApi(uint64(m.LessonsMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HlsSchedulerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Playurl != nil {
		l = m.Playurl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MasterSchedulerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MasterScheduler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Videos) > 0 {
		for _, e := range m.Videos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *M3U8Video) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovApi(uint64(m.Bandwidth))
	}
	l = len(m.Resolution)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Codecs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FrameRate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AverageBandwidth != 0 {
		n += 1 + sovApi(uint64(m.AverageBandwidth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *M3U8Audio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	l = len(m.Codecs)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HlsResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Quality != 0 {
		n += 1 + sovApi(uint64(m.Quality))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Timelength != 0 {
		n += 1 + sovApi(uint64(m.Timelength))
	}
	if m.VideoCodecid != 0 {
		n += 1 + sovApi(uint64(m.VideoCodecid))
	}
	if m.VideoProject {
		n += 2
	}
	if len(m.Durl) > 0 {
		for _, e := range m.Durl {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.SupportFormats) > 0 {
		for _, e := range m.SupportFormats {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *M3U8ResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.M3U8Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *M3U8SchedulerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProjectReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Qn != 0 {
		n += 1 + sovApi(uint64(m.Qn))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fnver != 0 {
		n += 1 + sovApi(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovApi(uint64(m.Fnval))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.BackupNum != 0 {
		n += 1 + sovApi(uint64(m.BackupNum))
	}
	if m.Download != 0 {
		n += 1 + sovApi(uint64(m.Download))
	}
	if m.ForceHost != 0 {
		n += 1 + sovApi(uint64(m.ForceHost))
	}
	if m.Fourk {
		n += 2
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Protocol != 0 {
		n += 1 + sovApi(uint64(m.Protocol))
	}
	if m.DeviceType != 0 {
		n += 1 + sovApi(uint64(m.DeviceType))
	}
	if m.Business != 0 {
		n += 2 + sovApi(uint64(m.Business))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProjectReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Playurl != nil {
		l = m.Playurl.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayConfEditReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChronosPkgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovApi(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovApi(uint64(m.Cid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChronosPkgReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Md5)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayOnlineReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayOnlineReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayOnlineReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= OnlineBusiness(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayOnlineReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayOnlineReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayOnlineReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Count == nil {
				m.Count = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Count[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHide = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayConfReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayConfReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayConfReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FMode", wireType)
			}
			m.FMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPLocal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FPLocal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayConfReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayConfReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayConfReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayConf == nil {
				m.PlayConf = &PlayAbilityConf{}
			}
			if err := m.PlayConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayConfEditReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayConfEditReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayConfEditReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayConf = append(m.PlayConf, &PlayConfState{})
			if err := m.PlayConf[len(m.PlayConf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FMode", wireType)
			}
			m.FMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpLocal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpLocal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayConfState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayConfState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayConfState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfType", wireType)
			}
			m.ConfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfType |= ConfType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Show = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldValue == nil {
				m.FieldValue = &FieldValue{}
			}
			if err := m.FieldValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfValue == nil {
				m.ConfValue = &ConfValue{}
			}
			if err := m.ConfValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &FieldValue_Switch{b}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayViewReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayViewReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayViewReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayUrl == nil {
				m.PlayUrl = &PlayUrlInfo{}
			}
			if err := m.PlayUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayConf == nil {
				m.PlayConf = &PlayAbilityConf{}
			}
			if err := m.PlayConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chronos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chronos == nil {
				m.Chronos = &Chronos{}
			}
			if err := m.Chronos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayArc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayArc == nil {
				m.PlayArc = &PlayArcConf{}
			}
			if err := m.PlayArc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ab == nil {
				m.Ab = &AB{}
			}
			if err := m.Ab.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Volume == nil {
				m.Volume = &VolumeInfo{}
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipConf == nil {
				m.VipConf = &VipConf{}
			}
			if err := m.VipConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitFree", wireType)
			}
			m.LimitFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitFree |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasuredI", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeasuredI = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasuredLra", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeasuredLra = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasuredTp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeasuredTp = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeasuredThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MeasuredThreshold = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetOffset", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetOffset = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetI", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetI = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTp", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetTp = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Glance == nil {
				m.Glance = &Glance{}
			}
			if err := m.Glance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= Group(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Glance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Glance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Glance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanWatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanWatch = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shake == nil {
				m.Shake = &Shake{}
			}
			if err := m.Shake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chronos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chronos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chronos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayUrlInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayUrlInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayUrlInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playurl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playurl == nil {
				m.Playurl = &ResponseMsg{}
			}
			if err := m.Playurl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtInfo == nil {
				m.ExtInfo = &ExtInfo{}
			}
			if err := m.ExtInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSteinsUpgrade", wireType)
			}
			m.IsSteinsUpgrade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSteinsUpgrade |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayAbilityConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayAbilityConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayAbilityConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundPlayConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackgroundPlayConf == nil {
				m.BackgroundPlayConf = &CloudConf{}
			}
			if err := m.BackgroundPlayConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlipConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlipConf == nil {
				m.FlipConf = &CloudConf{}
			}
			if err := m.FlipConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CastConf == nil {
				m.CastConf = &CloudConf{}
			}
			if err := m.CastConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedbackConf == nil {
				m.FeedbackConf = &CloudConf{}
			}
			if err := m.FeedbackConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtitleConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubtitleConf == nil {
				m.SubtitleConf = &CloudConf{}
			}
			if err := m.SubtitleConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaybackRateConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaybackRateConf == nil {
				m.PlaybackRateConf = &CloudConf{}
			}
			if err := m.PlaybackRateConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUpConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeUpConf == nil {
				m.TimeUpConf = &CloudConf{}
			}
			if err := m.TimeUpConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaybackModeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaybackModeConf == nil {
				m.PlaybackModeConf = &CloudConf{}
			}
			if err := m.PlaybackModeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleModeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScaleModeConf == nil {
				m.ScaleModeConf = &CloudConf{}
			}
			if err := m.ScaleModeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeConf == nil {
				m.LikeConf = &CloudConf{}
			}
			if err := m.LikeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DislikeConf == nil {
				m.DislikeConf = &CloudConf{}
			}
			if err := m.DislikeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinConf == nil {
				m.CoinConf = &CloudConf{}
			}
			if err := m.CoinConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElecConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElecConf == nil {
				m.ElecConf = &CloudConf{}
			}
			if err := m.ElecConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareConf == nil {
				m.ShareConf = &CloudConf{}
			}
			if err := m.ShareConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenShotConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScreenShotConf == nil {
				m.ScreenShotConf = &CloudConf{}
			}
			if err := m.ScreenShotConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockScreenConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockScreenConf == nil {
				m.LockScreenConf = &CloudConf{}
			}
			if err := m.LockScreenConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecommendConf == nil {
				m.RecommendConf = &CloudConf{}
			}
			if err := m.RecommendConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaybackSpeedConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaybackSpeedConf == nil {
				m.PlaybackSpeedConf = &CloudConf{}
			}
			if err := m.PlaybackSpeedConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefinitionConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefinitionConf == nil {
				m.DefinitionConf = &CloudConf{}
			}
			if err := m.DefinitionConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionsConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelectionsConf == nil {
				m.SelectionsConf = &CloudConf{}
			}
			if err := m.SelectionsConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextConf == nil {
				m.NextConf = &CloudConf{}
			}
			if err := m.NextConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDmConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EditDmConf == nil {
				m.EditDmConf = &CloudConf{}
			}
			if err := m.EditDmConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWindowConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallWindowConf == nil {
				m.SmallWindowConf = &CloudConf{}
			}
			if err := m.SmallWindowConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShakeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShakeConf == nil {
				m.ShakeConf = &CloudConf{}
			}
			if err := m.ShakeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterDmConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OuterDmConf == nil {
				m.OuterDmConf = &CloudConf{}
			}
			if err := m.OuterDmConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerDmConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerDmConf == nil {
				m.InnerDmConf = &CloudConf{}
			}
			if err := m.InnerDmConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanoramaConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PanoramaConf == nil {
				m.PanoramaConf = &CloudConf{}
			}
			if err := m.PanoramaConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DolbyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DolbyConf == nil {
				m.DolbyConf = &CloudConf{}
			}
			if err := m.DolbyConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorFilterConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColorFilterConf == nil {
				m.ColorFilterConf = &CloudConf{}
			}
			if err := m.ColorFilterConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossLessConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LossLessConf == nil {
				m.LossLessConf = &CloudConf{}
			}
			if err := m.LossLessConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Show = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldValue == nil {
				m.FieldValue = &FieldValue{}
			}
			if err := m.FieldValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfValue == nil {
				m.ConfValue = &ConfValue{}
			}
			if err := m.ConfValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &ConfValue_SwitchVal{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedVal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &ConfValue_SelectedVal{v}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayArcConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayArcConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayArcConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundPlayConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackgroundPlayConf == nil {
				m.BackgroundPlayConf = &ArcConf{}
			}
			if err := m.BackgroundPlayConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlipConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlipConf == nil {
				m.FlipConf = &ArcConf{}
			}
			if err := m.FlipConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CastConf == nil {
				m.CastConf = &ArcConf{}
			}
			if err := m.CastConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedbackConf == nil {
				m.FeedbackConf = &ArcConf{}
			}
			if err := m.FeedbackConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtitleConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubtitleConf == nil {
				m.SubtitleConf = &ArcConf{}
			}
			if err := m.SubtitleConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaybackRateConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaybackRateConf == nil {
				m.PlaybackRateConf = &ArcConf{}
			}
			if err := m.PlaybackRateConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUpConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeUpConf == nil {
				m.TimeUpConf = &ArcConf{}
			}
			if err := m.TimeUpConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaybackModeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaybackModeConf == nil {
				m.PlaybackModeConf = &ArcConf{}
			}
			if err := m.PlaybackModeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleModeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScaleModeConf == nil {
				m.ScaleModeConf = &ArcConf{}
			}
			if err := m.ScaleModeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeConf == nil {
				m.LikeConf = &ArcConf{}
			}
			if err := m.LikeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DislikeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DislikeConf == nil {
				m.DislikeConf = &ArcConf{}
			}
			if err := m.DislikeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoinConf == nil {
				m.CoinConf = &ArcConf{}
			}
			if err := m.CoinConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElecConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElecConf == nil {
				m.ElecConf = &ArcConf{}
			}
			if err := m.ElecConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareConf == nil {
				m.ShareConf = &ArcConf{}
			}
			if err := m.ShareConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenShotConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScreenShotConf == nil {
				m.ScreenShotConf = &ArcConf{}
			}
			if err := m.ScreenShotConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockScreenConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockScreenConf == nil {
				m.LockScreenConf = &ArcConf{}
			}
			if err := m.LockScreenConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecommendConf == nil {
				m.RecommendConf = &ArcConf{}
			}
			if err := m.RecommendConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaybackSpeedConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaybackSpeedConf == nil {
				m.PlaybackSpeedConf = &ArcConf{}
			}
			if err := m.PlaybackSpeedConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefinitionConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefinitionConf == nil {
				m.DefinitionConf = &ArcConf{}
			}
			if err := m.DefinitionConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionsConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelectionsConf == nil {
				m.SelectionsConf = &ArcConf{}
			}
			if err := m.SelectionsConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextConf == nil {
				m.NextConf = &ArcConf{}
			}
			if err := m.NextConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditDmConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EditDmConf == nil {
				m.EditDmConf = &ArcConf{}
			}
			if err := m.EditDmConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallWindowConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallWindowConf == nil {
				m.SmallWindowConf = &ArcConf{}
			}
			if err := m.SmallWindowConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShakeConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShakeConf == nil {
				m.ShakeConf = &ArcConf{}
			}
			if err := m.ShakeConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterDmConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OuterDmConf == nil {
				m.OuterDmConf = &ArcConf{}
			}
			if err := m.OuterDmConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerDmConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InnerDmConf == nil {
				m.InnerDmConf = &ArcConf{}
			}
			if err := m.InnerDmConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PanoramaConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PanoramaConf == nil {
				m.PanoramaConf = &ArcConf{}
			}
			if err := m.PanoramaConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DolbyConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DolbyConf == nil {
				m.DolbyConf = &ArcConf{}
			}
			if err := m.DolbyConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenRecordingConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScreenRecordingConf == nil {
				m.ScreenRecordingConf = &ArcConf{}
			}
			if err := m.ScreenRecordingConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorFilterConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ColorFilterConf == nil {
				m.ColorFilterConf = &ArcConf{}
			}
			if err := m.ColorFilterConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossLessConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LossLessConf == nil {
				m.LossLessConf = &ArcConf{}
			}
			if err := m.LossLessConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArcConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArcConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArcConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSupport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSupport = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraContent == nil {
				m.ExtraContent = &ExtraContent{}
			}
			if err := m.ExtraContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnsupportScene = append(m.UnsupportScene, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnsupportScene) == 0 {
					m.UnsupportScene = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnsupportScene = append(m.UnsupportScene, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsupportScene", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledCode", wireType)
			}
			m.DisabledCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisabledCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayViewReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayViewReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayViewReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupNum", wireType)
			}
			m.BackupNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Download", wireType)
			}
			m.Download = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Download |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fourk = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeAid", wireType)
			}
			m.UpgradeAid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeAid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeCid", wireType)
			}
			m.UpgradeCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifySteins", wireType)
			}
			m.VerifySteins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifySteins |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5Hq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.H5Hq = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyVip", wireType)
			}
			m.VerifyVip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyVip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetType", wireType)
			}
			m.NetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetType |= NetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfType", wireType)
			}
			m.TfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TfType |= TFType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonsMode", wireType)
			}
			m.LessonsMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LessonsMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessSource", wireType)
			}
			m.BusinessSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessSource |= BusinessSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FpLocal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FpLocal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceBalance", wireType)
			}
			m.VoiceBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoiceBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDazhongcar", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDazhongcar = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayURLReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayURLReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayURLReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupNum", wireType)
			}
			m.BackupNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Download", wireType)
			}
			m.Download = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Download |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fourk = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeAid", wireType)
			}
			m.UpgradeAid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeAid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeCid", wireType)
			}
			m.UpgradeCid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeCid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifySteins", wireType)
			}
			m.VerifySteins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifySteins |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H5Hq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.H5Hq = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyVip", wireType)
			}
			m.VerifyVip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyVip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetType", wireType)
			}
			m.NetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetType |= NetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfType", wireType)
			}
			m.TfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TfType |= TFType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoiceBalance", wireType)
			}
			m.VoiceBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoiceBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDazhongcar", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDazhongcar = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayURLReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayURLReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayURLReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playurl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playurl == nil {
				m.Playurl = &ResponseMsg{}
			}
			if err := m.Playurl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Volume == nil {
				m.Volume = &VolumeInfo{}
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VipControl == nil {
				m.VipControl = &VipControl{}
			}
			if err := m.VipControl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Control = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptDescription = append(m.AcceptDescription, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelength", wireType)
			}
			m.Timelength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timelength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCodecid", wireType)
			}
			m.VideoCodecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoCodecid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoProject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoProject = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Durl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Durl = append(m.Durl, &ResponseUrl{})
			if err := m.Durl[len(m.Durl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dash == nil {
				m.Dash = &ResponseDash{}
			}
			if err := m.Dash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRexcode", wireType)
			}
			m.NoRexcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoRexcode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportFormats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportFormats = append(m.SupportFormats, &FormatDescription{})
			if err := m.SupportFormats[len(m.SupportFormats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighFormat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HighFormat == nil {
				m.HighFormat = &FormatDescription{}
			}
			if err := m.HighFormat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ahead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ahead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vhead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vhead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupUrl = append(m.BackupUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBufferTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinBufferTime = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Video = append(m.Video, &DashItem{})
			if err := m.Video[len(m.Video)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audio = append(m.Audio, &DashItem{})
			if err := m.Audio[len(m.Audio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dolby", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dolby == nil {
				m.Dolby = &DolbyItem{}
			}
			if err := m.Dolby.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossLessItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LossLessItem == nil {
				m.LossLessItem = &LossLessItem{}
			}
			if err := m.LossLessItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LossLessItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LossLessItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LossLessItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLosslessAudio", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLosslessAudio = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &DashItem{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DolbyItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DolbyItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DolbyItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DolbyItem_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audio = append(m.Audio, &DashItem{})
			if err := m.Audio[len(m.Audio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashSegmentBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashSegmentBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashSegmentBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initialization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupUrl = append(m.BackupUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codecs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartWithSap", wireType)
			}
			m.StartWithSap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartWithSap |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SegmentBase == nil {
				m.SegmentBase = &DashSegmentBase{}
			}
			if err := m.SegmentBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecid", wireType)
			}
			m.Codecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codecid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRexcode", wireType)
			}
			m.NoRexcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoRexcode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FormatDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FormatDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FormatDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Superscript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Superscript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codecs = append(m.Codecs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HlsCommonReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HlsCommonReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HlsCommonReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupNum", wireType)
			}
			m.BackupNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= Business(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= RequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetType", wireType)
			}
			m.NetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetType |= NetworkType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfType", wireType)
			}
			m.TfType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TfType |= TFType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyVip", wireType)
			}
			m.VerifyVip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyVip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QnCategory", wireType)
			}
			m.QnCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QnCategory |= QnCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dolby", wireType)
			}
			m.Dolby = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dolby |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeenagersMode", wireType)
			}
			m.TeenagersMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeenagersMode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonsMode", wireType)
			}
			m.LessonsMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LessonsMode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HlsSchedulerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HlsSchedulerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HlsSchedulerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playurl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playurl == nil {
				m.Playurl = &HlsResponseMsg{}
			}
			if err := m.Playurl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterSchedulerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterSchedulerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterSchedulerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &MasterScheduler{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterScheduler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterScheduler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterScheduler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Video == nil {
				m.Video = &M3U8Video{}
			}
			if err := m.Video.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &M3U8Audio{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Videos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Videos = append(m.Videos, &M3U8Video{})
			if err := m.Videos[len(m.Videos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3U8Video) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3u8Video: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3u8Video: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resolution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codecs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrameRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBandwidth", wireType)
			}
			m.AverageBandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBandwidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3U8Audio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3u8Audio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3u8Audio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codecs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HlsResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HlsResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HlsResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ResponseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelength", wireType)
			}
			m.Timelength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timelength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCodecid", wireType)
			}
			m.VideoCodecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoCodecid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoProject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoProject = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Durl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Durl = append(m.Durl, &ResponseUrl{})
			if err := m.Durl[len(m.Durl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportFormats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportFormats = append(m.SupportFormats, &FormatDescription{})
			if err := m.SupportFormats[len(m.SupportFormats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3U8ResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3u8ResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3u8ResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M3U8Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.M3U8Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *M3U8SchedulerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: M3u8SchedulerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: M3u8SchedulerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &M3U8ResponseMsg{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupNum", wireType)
			}
			m.BackupNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Download", wireType)
			}
			m.Download = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Download |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceHost", wireType)
			}
			m.ForceHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForceHost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fourk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fourk = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= Business(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playurl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playurl == nil {
				m.Playurl = &ResponseMsg{}
			}
			if err := m.Playurl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayConfEditReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayConfEditReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayConfEditReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChronosPkgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChronosPkgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChronosPkgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChronosPkgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChronosPkgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChronosPkgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Md5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Md5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
