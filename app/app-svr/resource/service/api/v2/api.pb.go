// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package v2

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// NoArgRequest
type NoArgRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoArgRequest) Reset()         { *m = NoArgRequest{} }
func (m *NoArgRequest) String() string { return proto.CompactTextString(m) }
func (*NoArgRequest) ProtoMessage()    {}
func (*NoArgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *NoArgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoArgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoArgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoArgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoArgRequest.Merge(m, src)
}
func (m *NoArgRequest) XXX_Size() int {
	return m.Size()
}
func (m *NoArgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoArgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoArgRequest proto.InternalMessageInfo

// web特殊卡 resp
type WebSpecialCardResp struct {
	// web详情页相关推荐卡片设置
	Card                 []*WebSpecialCard `protobuf:"bytes,1,rep,name=card,proto3" json:"card"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WebSpecialCardResp) Reset()         { *m = WebSpecialCardResp{} }
func (m *WebSpecialCardResp) String() string { return proto.CompactTextString(m) }
func (*WebSpecialCardResp) ProtoMessage()    {}
func (*WebSpecialCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *WebSpecialCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebSpecialCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebSpecialCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebSpecialCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebSpecialCardResp.Merge(m, src)
}
func (m *WebSpecialCardResp) XXX_Size() int {
	return m.Size()
}
func (m *WebSpecialCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_WebSpecialCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_WebSpecialCardResp proto.InternalMessageInfo

func (m *WebSpecialCardResp) GetCard() []*WebSpecialCard {
	if m != nil {
		return m.Card
	}
	return nil
}

// web特殊卡信息
type WebSpecialCard struct {
	//web特殊卡id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	//卡片类型 1:web特殊卡
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	//卡片title
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	//卡片描述
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc"`
	//卡片封面
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	//跳转类型 re_type=1 url链接
	ReType int32 `protobuf:"varint,6,opt,name=re_type,proto3" json:"re_type"`
	//跳转值
	ReValue string `protobuf:"bytes,7,opt,name=re_value,proto3" json:"re_value"`
	//创建人
	Person string `protobuf:"bytes,8,opt,name=person,proto3" json:"person"`
	//创建时间
	Ctime int64 `protobuf:"varint,9,opt,name=ctime,proto3" json:"ctime"`
	//修改时间
	Mtime                int64    `protobuf:"varint,10,opt,name=mtime,proto3" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebSpecialCard) Reset()         { *m = WebSpecialCard{} }
func (m *WebSpecialCard) String() string { return proto.CompactTextString(m) }
func (*WebSpecialCard) ProtoMessage()    {}
func (*WebSpecialCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *WebSpecialCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebSpecialCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebSpecialCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebSpecialCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebSpecialCard.Merge(m, src)
}
func (m *WebSpecialCard) XXX_Size() int {
	return m.Size()
}
func (m *WebSpecialCard) XXX_DiscardUnknown() {
	xxx_messageInfo_WebSpecialCard.DiscardUnknown(m)
}

var xxx_messageInfo_WebSpecialCard proto.InternalMessageInfo

func (m *WebSpecialCard) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WebSpecialCard) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *WebSpecialCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *WebSpecialCard) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *WebSpecialCard) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *WebSpecialCard) GetReType() int32 {
	if m != nil {
		return m.ReType
	}
	return 0
}

func (m *WebSpecialCard) GetReValue() string {
	if m != nil {
		return m.ReValue
	}
	return ""
}

func (m *WebSpecialCard) GetPerson() string {
	if m != nil {
		return m.Person
	}
	return ""
}

func (m *WebSpecialCard) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *WebSpecialCard) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

// 通用黑白名单校验 {
type CheckCommonBWListReq struct {
	// 小名单物料oid，为了通用性，目前使用string
	Oid string `protobuf:"bytes,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// 黑白名单token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// 是否取反
	IsReverse bool `protobuf:"varint,3,opt,name=is_reverse,proto3" json:"is_reverse"`
	// 用户ip, 当为空时，从context获取
	UserIp string `protobuf:"bytes,4,opt,name=user_ip,proto3" json:"user_ip"`
	// 大名单物料oid
	LargeOid *LargeOidContent `protobuf:"bytes,5,opt,name=large_oid,proto3" json:"large_oid"`
	// 黑白名单灰度分桶token
	LargeToken           string   `protobuf:"bytes,6,opt,name=large_token,proto3" json:"large_token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCommonBWListReq) Reset()         { *m = CheckCommonBWListReq{} }
func (m *CheckCommonBWListReq) String() string { return proto.CompactTextString(m) }
func (*CheckCommonBWListReq) ProtoMessage()    {}
func (*CheckCommonBWListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *CheckCommonBWListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckCommonBWListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckCommonBWListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckCommonBWListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCommonBWListReq.Merge(m, src)
}
func (m *CheckCommonBWListReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckCommonBWListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCommonBWListReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCommonBWListReq proto.InternalMessageInfo

func (m *CheckCommonBWListReq) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *CheckCommonBWListReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CheckCommonBWListReq) GetIsReverse() bool {
	if m != nil {
		return m.IsReverse
	}
	return false
}

func (m *CheckCommonBWListReq) GetUserIp() string {
	if m != nil {
		return m.UserIp
	}
	return ""
}

func (m *CheckCommonBWListReq) GetLargeOid() *LargeOidContent {
	if m != nil {
		return m.LargeOid
	}
	return nil
}

func (m *CheckCommonBWListReq) GetLargeToken() string {
	if m != nil {
		return m.LargeToken
	}
	return ""
}

type LargeOidContent struct {
	Buvid                string   `protobuf:"bytes,1,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LargeOidContent) Reset()         { *m = LargeOidContent{} }
func (m *LargeOidContent) String() string { return proto.CompactTextString(m) }
func (*LargeOidContent) ProtoMessage()    {}
func (*LargeOidContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *LargeOidContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LargeOidContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LargeOidContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LargeOidContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LargeOidContent.Merge(m, src)
}
func (m *LargeOidContent) XXX_Size() int {
	return m.Size()
}
func (m *LargeOidContent) XXX_DiscardUnknown() {
	xxx_messageInfo_LargeOidContent.DiscardUnknown(m)
}

var xxx_messageInfo_LargeOidContent proto.InternalMessageInfo

func (m *LargeOidContent) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *LargeOidContent) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

// 通用黑白名单校验 {
type CheckCommonBWListRep struct {
	// 物料oid，为了通用性，目前使用string
	IsInList             bool     `protobuf:"varint,1,opt,name=is_in_list,proto3" json:"is_in_list"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCommonBWListRep) Reset()         { *m = CheckCommonBWListRep{} }
func (m *CheckCommonBWListRep) String() string { return proto.CompactTextString(m) }
func (*CheckCommonBWListRep) ProtoMessage()    {}
func (*CheckCommonBWListRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *CheckCommonBWListRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckCommonBWListRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckCommonBWListRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckCommonBWListRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCommonBWListRep.Merge(m, src)
}
func (m *CheckCommonBWListRep) XXX_Size() int {
	return m.Size()
}
func (m *CheckCommonBWListRep) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCommonBWListRep.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCommonBWListRep proto.InternalMessageInfo

func (m *CheckCommonBWListRep) GetIsInList() bool {
	if m != nil {
		return m.IsInList
	}
	return false
}

// 通用黑白名单校验-批量 {
type CheckCommonBWListBatchReq struct {
	// 物料oid，为了通用性，目前使用string
	Oids []string `protobuf:"bytes,1,rep,name=oids,proto3" json:"oids"`
	// 黑白名单token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	// 是否取反
	IsReverse bool `protobuf:"varint,3,opt,name=is_reverse,proto3" json:"is_reverse"`
	// 用户ip, 当为空时，从context获取
	UserIp               string   `protobuf:"bytes,4,opt,name=user_ip,proto3" json:"user_ip"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCommonBWListBatchReq) Reset()         { *m = CheckCommonBWListBatchReq{} }
func (m *CheckCommonBWListBatchReq) String() string { return proto.CompactTextString(m) }
func (*CheckCommonBWListBatchReq) ProtoMessage()    {}
func (*CheckCommonBWListBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *CheckCommonBWListBatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckCommonBWListBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckCommonBWListBatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckCommonBWListBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCommonBWListBatchReq.Merge(m, src)
}
func (m *CheckCommonBWListBatchReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckCommonBWListBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCommonBWListBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCommonBWListBatchReq proto.InternalMessageInfo

func (m *CheckCommonBWListBatchReq) GetOids() []string {
	if m != nil {
		return m.Oids
	}
	return nil
}

func (m *CheckCommonBWListBatchReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CheckCommonBWListBatchReq) GetIsReverse() bool {
	if m != nil {
		return m.IsReverse
	}
	return false
}

func (m *CheckCommonBWListBatchReq) GetUserIp() string {
	if m != nil {
		return m.UserIp
	}
	return ""
}

// 通用黑白名单校验-批量 {
type CheckCommonBWListBatchRep struct {
	// 物料oid，为了通用性，目前使用string
	IsInList             map[string]bool `protobuf:"bytes,1,rep,name=is_in_list,proto3" json:"is_in_list" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CheckCommonBWListBatchRep) Reset()         { *m = CheckCommonBWListBatchRep{} }
func (m *CheckCommonBWListBatchRep) String() string { return proto.CompactTextString(m) }
func (*CheckCommonBWListBatchRep) ProtoMessage()    {}
func (*CheckCommonBWListBatchRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *CheckCommonBWListBatchRep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckCommonBWListBatchRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckCommonBWListBatchRep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckCommonBWListBatchRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCommonBWListBatchRep.Merge(m, src)
}
func (m *CheckCommonBWListBatchRep) XXX_Size() int {
	return m.Size()
}
func (m *CheckCommonBWListBatchRep) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCommonBWListBatchRep.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCommonBWListBatchRep proto.InternalMessageInfo

func (m *CheckCommonBWListBatchRep) GetIsInList() map[string]bool {
	if m != nil {
		return m.IsInList
	}
	return nil
}

// app特殊卡 resp
type AppSpecialCardResp struct {
	// app特殊卡
	Card                 []*AppSpecialCard `protobuf:"bytes,1,rep,name=card,proto3" json:"card"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AppSpecialCardResp) Reset()         { *m = AppSpecialCardResp{} }
func (m *AppSpecialCardResp) String() string { return proto.CompactTextString(m) }
func (*AppSpecialCardResp) ProtoMessage()    {}
func (*AppSpecialCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *AppSpecialCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppSpecialCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppSpecialCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppSpecialCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSpecialCardResp.Merge(m, src)
}
func (m *AppSpecialCardResp) XXX_Size() int {
	return m.Size()
}
func (m *AppSpecialCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSpecialCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppSpecialCardResp proto.InternalMessageInfo

func (m *AppSpecialCardResp) GetCard() []*AppSpecialCard {
	if m != nil {
		return m.Card
	}
	return nil
}

// app相关推荐-特殊卡信息
type AppSpecialCard struct {
	//特殊卡id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//特殊卡片标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//特殊卡描述
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	//双列封面
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	//跳转类型 0:url 1:游戏小卡 2:稿件 3:PGC 4:直播 6:专栏 7:每日精选 8:歌单 9:歌曲 10:相簿 11:小视频 12:特殊小卡 14:PGC-seasion-id
	ReType int32 `protobuf:"varint,5,opt,name=re_type,proto3" json:"re_type"`
	//跳转值
	ReValue string `protobuf:"bytes,6,opt,name=re_value,proto3" json:"re_value"`
	//角标文字
	Corner string `protobuf:"bytes,7,opt,name=corner,proto3" json:"corner,omitempty"`
	//特殊卡片类型 1:特殊小卡 2:特殊大卡 3:置顶卡 4:频道卡 5:特殊大卡B
	Card int32 `protobuf:"varint,8,opt,name=card,proto3" json:"card,omitempty"`
	//单列封面
	Scover string `protobuf:"bytes,9,opt,name=scover,proto3" json:"scover,omitempty"`
	//gif封面
	Gifcover string `protobuf:"bytes,10,opt,name=gifcover,proto3" json:"gifcover,omitempty"`
	//频道卡背景图
	Bgcover string `protobuf:"bytes,11,opt,name=bgcover,proto3" json:"bgcover,omitempty"`
	//频道卡推荐理由
	Reason string `protobuf:"bytes,12,opt,name=reason,proto3" json:"reason,omitempty"`
	//强制跳转tab的uri
	TabUri string `protobuf:"bytes,13,opt,name=tab_uri,proto3" json:"tab_uri"`
	//强化角标日间模式
	PowerPicSun string `protobuf:"bytes,14,opt,name=power_pic_sun,proto3" json:"power_pic_sun"`
	//强化角标夜晚模式
	PowerPicNight string `protobuf:"bytes,15,opt,name=power_pic_night,proto3" json:"power_pic_night"`
	//大卡卡片大小
	Size_ string `protobuf:"bytes,16,opt,name=size,proto3" json:"size,omitempty"`
	//角标-宽
	Width int64 `protobuf:"varint,17,opt,name=width,proto3" json:"width,omitempty"`
	//角标-高
	Height int64 `protobuf:"varint,18,opt,name=height,proto3" json:"height,omitempty"`
	// 特殊小卡，pgc-ep跳转类型时候的url参数
	Url                  string   `protobuf:"bytes,19,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppSpecialCard) Reset()         { *m = AppSpecialCard{} }
func (m *AppSpecialCard) String() string { return proto.CompactTextString(m) }
func (*AppSpecialCard) ProtoMessage()    {}
func (*AppSpecialCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *AppSpecialCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppSpecialCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppSpecialCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppSpecialCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSpecialCard.Merge(m, src)
}
func (m *AppSpecialCard) XXX_Size() int {
	return m.Size()
}
func (m *AppSpecialCard) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSpecialCard.DiscardUnknown(m)
}

var xxx_messageInfo_AppSpecialCard proto.InternalMessageInfo

func (m *AppSpecialCard) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppSpecialCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppSpecialCard) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *AppSpecialCard) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppSpecialCard) GetReType() int32 {
	if m != nil {
		return m.ReType
	}
	return 0
}

func (m *AppSpecialCard) GetReValue() string {
	if m != nil {
		return m.ReValue
	}
	return ""
}

func (m *AppSpecialCard) GetCorner() string {
	if m != nil {
		return m.Corner
	}
	return ""
}

func (m *AppSpecialCard) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *AppSpecialCard) GetScover() string {
	if m != nil {
		return m.Scover
	}
	return ""
}

func (m *AppSpecialCard) GetGifcover() string {
	if m != nil {
		return m.Gifcover
	}
	return ""
}

func (m *AppSpecialCard) GetBgcover() string {
	if m != nil {
		return m.Bgcover
	}
	return ""
}

func (m *AppSpecialCard) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AppSpecialCard) GetTabUri() string {
	if m != nil {
		return m.TabUri
	}
	return ""
}

func (m *AppSpecialCard) GetPowerPicSun() string {
	if m != nil {
		return m.PowerPicSun
	}
	return ""
}

func (m *AppSpecialCard) GetPowerPicNight() string {
	if m != nil {
		return m.PowerPicNight
	}
	return ""
}

func (m *AppSpecialCard) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func (m *AppSpecialCard) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *AppSpecialCard) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *AppSpecialCard) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// 物料req
type MaterialReq struct {
	Id                   []int64  `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaterialReq) Reset()         { *m = MaterialReq{} }
func (m *MaterialReq) String() string { return proto.CompactTextString(m) }
func (*MaterialReq) ProtoMessage()    {}
func (*MaterialReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *MaterialReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaterialReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaterialReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaterialReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterialReq.Merge(m, src)
}
func (m *MaterialReq) XXX_Size() int {
	return m.Size()
}
func (m *MaterialReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterialReq.DiscardUnknown(m)
}

var xxx_messageInfo_MaterialReq proto.InternalMessageInfo

func (m *MaterialReq) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

// 物料resp
type MaterialResp struct {
	Material             []*Material `protobuf:"bytes,1,rep,name=material,json=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MaterialResp) Reset()         { *m = MaterialResp{} }
func (m *MaterialResp) String() string { return proto.CompactTextString(m) }
func (*MaterialResp) ProtoMessage()    {}
func (*MaterialResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *MaterialResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaterialResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaterialResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaterialResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaterialResp.Merge(m, src)
}
func (m *MaterialResp) XXX_Size() int {
	return m.Size()
}
func (m *MaterialResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MaterialResp.DiscardUnknown(m)
}

var xxx_messageInfo_MaterialResp proto.InternalMessageInfo

func (m *MaterialResp) GetMaterial() []*Material {
	if m != nil {
		return m.Material
	}
	return nil
}

// 物料信息
type Material struct {
	//物料唯一ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//描述
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	//双列封面
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	//gif封面
	Gifcover string `protobuf:"bytes,5,opt,name=gifcover,proto3" json:"gifcover,omitempty"`
	//角标文字
	Corner string `protobuf:"bytes,6,opt,name=corner,proto3" json:"corner,omitempty"`
	//角标白天模式
	PowerPicSun string `protobuf:"bytes,7,opt,name=power_pic_sun,proto3" json:"power_pic_sun"`
	//强化角标夜间模式
	PowerPicNight string `protobuf:"bytes,8,opt,name=power_pic_night,proto3" json:"power_pic_night"`
	//推荐理由类型 0:无（默认）1:编辑推荐  3:自定义推荐
	Reason int32 `protobuf:"varint,9,opt,name=reason,proto3" json:"reason,omitempty"`
	//推荐理由自定义内容，对应reason=3
	ReasonContent string `protobuf:"bytes,10,opt,name=reason_content,proto3" json:"reason_content"`
	//宽
	Width int64 `protobuf:"varint,11,opt,name=width,proto3" json:"width,omitempty"`
	//高
	Height               int64    `protobuf:"varint,12,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Material) Reset()         { *m = Material{} }
func (m *Material) String() string { return proto.CompactTextString(m) }
func (*Material) ProtoMessage()    {}
func (*Material) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *Material) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Material) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Material.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Material) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Material.Merge(m, src)
}
func (m *Material) XXX_Size() int {
	return m.Size()
}
func (m *Material) XXX_DiscardUnknown() {
	xxx_messageInfo_Material.DiscardUnknown(m)
}

var xxx_messageInfo_Material proto.InternalMessageInfo

func (m *Material) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Material) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Material) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Material) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Material) GetGifcover() string {
	if m != nil {
		return m.Gifcover
	}
	return ""
}

func (m *Material) GetCorner() string {
	if m != nil {
		return m.Corner
	}
	return ""
}

func (m *Material) GetPowerPicSun() string {
	if m != nil {
		return m.PowerPicSun
	}
	return ""
}

func (m *Material) GetPowerPicNight() string {
	if m != nil {
		return m.PowerPicNight
	}
	return ""
}

func (m *Material) GetReason() int32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *Material) GetReasonContent() string {
	if m != nil {
		return m.ReasonContent
	}
	return ""
}

func (m *Material) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Material) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// app相关推荐PGC关联 req
type AppRcmdRelatePgcRequest struct {
	// pgc seasonID
	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MobiApp string `protobuf:"bytes,2,opt,name=mobi_app,proto3" json:"mobi_app"`
	Device  string `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	//版本
	Build                int32    `protobuf:"varint,4,opt,name=build,proto3" json:"build,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppRcmdRelatePgcRequest) Reset()         { *m = AppRcmdRelatePgcRequest{} }
func (m *AppRcmdRelatePgcRequest) String() string { return proto.CompactTextString(m) }
func (*AppRcmdRelatePgcRequest) ProtoMessage()    {}
func (*AppRcmdRelatePgcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *AppRcmdRelatePgcRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppRcmdRelatePgcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppRcmdRelatePgcRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppRcmdRelatePgcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppRcmdRelatePgcRequest.Merge(m, src)
}
func (m *AppRcmdRelatePgcRequest) XXX_Size() int {
	return m.Size()
}
func (m *AppRcmdRelatePgcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppRcmdRelatePgcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppRcmdRelatePgcRequest proto.InternalMessageInfo

func (m *AppRcmdRelatePgcRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppRcmdRelatePgcRequest) GetMobiApp() string {
	if m != nil {
		return m.MobiApp
	}
	return ""
}

func (m *AppRcmdRelatePgcRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AppRcmdRelatePgcRequest) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

// app相关推荐PGC关联 resp
type AppRcmdRelatePgcResp struct {
	//特殊卡主键ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//特殊卡片标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	//特殊卡片描述
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	//双列封面
	Cover string `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	//单列封面
	Scover string `protobuf:"bytes,5,opt,name=scover,proto3" json:"scover,omitempty"`
	//跳转类型 0:url 1:游戏小卡 2:稿件 3:PGC 4:直播 6:专栏 7:每日精选 8:歌单 9:歌曲 10:相簿 11:小视频 12:特殊小卡 14:PGC-seasion-id
	ReType int32 `protobuf:"varint,6,opt,name=re_type,proto3" json:"re_type"`
	//跳转参数
	ReValue string `protobuf:"bytes,7,opt,name=re_value,proto3" json:"re_value"`
	//角标文字
	Corner string `protobuf:"bytes,8,opt,name=corner,proto3" json:"corner,omitempty"`
	//卡片类型 1:特殊小卡 2:特殊大卡 3:置顶卡 4:频道卡 5:特殊大卡B
	Card int32 `protobuf:"varint,9,opt,name=card,proto3" json:"card,omitempty"`
	//特殊大卡参数 如果是1020*300则封面比例为34 如果是1020*378则封面比例为27
	Size_ string `protobuf:"bytes,10,opt,name=size,proto3" json:"size,omitempty"`
	//位置
	Position int32 `protobuf:"varint,11,opt,name=position,proto3" json:"position,omitempty"`
	//推荐理由
	RecReason            string   `protobuf:"bytes,12,opt,name=rec_reason,proto3" json:"rec_reason"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppRcmdRelatePgcResp) Reset()         { *m = AppRcmdRelatePgcResp{} }
func (m *AppRcmdRelatePgcResp) String() string { return proto.CompactTextString(m) }
func (*AppRcmdRelatePgcResp) ProtoMessage()    {}
func (*AppRcmdRelatePgcResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *AppRcmdRelatePgcResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppRcmdRelatePgcResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppRcmdRelatePgcResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppRcmdRelatePgcResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppRcmdRelatePgcResp.Merge(m, src)
}
func (m *AppRcmdRelatePgcResp) XXX_Size() int {
	return m.Size()
}
func (m *AppRcmdRelatePgcResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppRcmdRelatePgcResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppRcmdRelatePgcResp proto.InternalMessageInfo

func (m *AppRcmdRelatePgcResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppRcmdRelatePgcResp) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppRcmdRelatePgcResp) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *AppRcmdRelatePgcResp) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppRcmdRelatePgcResp) GetScover() string {
	if m != nil {
		return m.Scover
	}
	return ""
}

func (m *AppRcmdRelatePgcResp) GetReType() int32 {
	if m != nil {
		return m.ReType
	}
	return 0
}

func (m *AppRcmdRelatePgcResp) GetReValue() string {
	if m != nil {
		return m.ReValue
	}
	return ""
}

func (m *AppRcmdRelatePgcResp) GetCorner() string {
	if m != nil {
		return m.Corner
	}
	return ""
}

func (m *AppRcmdRelatePgcResp) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *AppRcmdRelatePgcResp) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func (m *AppRcmdRelatePgcResp) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *AppRcmdRelatePgcResp) GetRecReason() string {
	if m != nil {
		return m.RecReason
	}
	return ""
}

// 获取特殊卡req
type SpecialCardReq struct {
	// 特殊卡id
	Ids                  []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids" form:"ids,split" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecialCardReq) Reset()         { *m = SpecialCardReq{} }
func (m *SpecialCardReq) String() string { return proto.CompactTextString(m) }
func (*SpecialCardReq) ProtoMessage()    {}
func (*SpecialCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *SpecialCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialCardReq.Merge(m, src)
}
func (m *SpecialCardReq) XXX_Size() int {
	return m.Size()
}
func (m *SpecialCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialCardReq proto.InternalMessageInfo

func (m *SpecialCardReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

// 特殊卡resp
type SpecialCardResp struct {
	// 特殊卡信息 <特殊卡Id,特殊卡信息>
	SpecialCard          map[int64]*AppSpecialCard `protobuf:"bytes,1,rep,name=special_card,proto3" json:"special_card" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SpecialCardResp) Reset()         { *m = SpecialCardResp{} }
func (m *SpecialCardResp) String() string { return proto.CompactTextString(m) }
func (*SpecialCardResp) ProtoMessage()    {}
func (*SpecialCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *SpecialCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialCardResp.Merge(m, src)
}
func (m *SpecialCardResp) XXX_Size() int {
	return m.Size()
}
func (m *SpecialCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialCardResp proto.InternalMessageInfo

func (m *SpecialCardResp) GetSpecialCard() map[int64]*AppSpecialCard {
	if m != nil {
		return m.SpecialCard
	}
	return nil
}

func init() {
	proto.RegisterType((*NoArgRequest)(nil), "resource.service.v2.NoArgRequest")
	proto.RegisterType((*WebSpecialCardResp)(nil), "resource.service.v2.WebSpecialCardResp")
	proto.RegisterType((*WebSpecialCard)(nil), "resource.service.v2.WebSpecialCard")
	proto.RegisterType((*CheckCommonBWListReq)(nil), "resource.service.v2.CheckCommonBWListReq")
	proto.RegisterType((*LargeOidContent)(nil), "resource.service.v2.LargeOidContent")
	proto.RegisterType((*CheckCommonBWListRep)(nil), "resource.service.v2.CheckCommonBWListRep")
	proto.RegisterType((*CheckCommonBWListBatchReq)(nil), "resource.service.v2.CheckCommonBWListBatchReq")
	proto.RegisterType((*CheckCommonBWListBatchRep)(nil), "resource.service.v2.CheckCommonBWListBatchRep")
	proto.RegisterMapType((map[string]bool)(nil), "resource.service.v2.CheckCommonBWListBatchRep.IsInListEntry")
	proto.RegisterType((*AppSpecialCardResp)(nil), "resource.service.v2.AppSpecialCardResp")
	proto.RegisterType((*AppSpecialCard)(nil), "resource.service.v2.AppSpecialCard")
	proto.RegisterType((*MaterialReq)(nil), "resource.service.v2.MaterialReq")
	proto.RegisterType((*MaterialResp)(nil), "resource.service.v2.MaterialResp")
	proto.RegisterType((*Material)(nil), "resource.service.v2.Material")
	proto.RegisterType((*AppRcmdRelatePgcRequest)(nil), "resource.service.v2.AppRcmdRelatePgcRequest")
	proto.RegisterType((*AppRcmdRelatePgcResp)(nil), "resource.service.v2.AppRcmdRelatePgcResp")
	proto.RegisterType((*SpecialCardReq)(nil), "resource.service.v2.SpecialCardReq")
	proto.RegisterType((*SpecialCardResp)(nil), "resource.service.v2.SpecialCardResp")
	proto.RegisterMapType((map[int64]*AppSpecialCard)(nil), "resource.service.v2.SpecialCardResp.SpecialCardEntry")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0xb7, 0x24, 0x4b, 0x96, 0x46, 0xb6, 0x6c, 0xaf, 0x8d, 0x7c, 0xfc, 0x84, 0xc4, 0x74, 0x98,
	0x7c, 0xf8, 0x9c, 0x22, 0x55, 0x50, 0x17, 0x45, 0x1b, 0xb7, 0x45, 0x61, 0x19, 0x8d, 0x11, 0x20,
	0x6d, 0xd2, 0x4d, 0x81, 0x00, 0x05, 0x0a, 0x82, 0x22, 0xd7, 0xf2, 0xc2, 0x14, 0x49, 0x2f, 0x57,
	0x0a, 0x9c, 0x5b, 0x6f, 0x7d, 0x84, 0x02, 0x7d, 0x8a, 0x5e, 0xfa, 0x08, 0x45, 0x8e, 0xbd, 0x17,
	0x25, 0x8a, 0xe4, 0xc6, 0x63, 0x9f, 0xa0, 0xd8, 0x5d, 0x52, 0xfc, 0x23, 0xc5, 0x51, 0x82, 0xf4,
	0x42, 0xce, 0xcc, 0xce, 0x0e, 0x77, 0x67, 0x7e, 0xfb, 0x9b, 0x25, 0xb4, 0xac, 0x80, 0xf6, 0x02,
	0xe6, 0x73, 0x1f, 0x6d, 0x31, 0x12, 0xfa, 0x63, 0x66, 0x93, 0x5e, 0x48, 0xd8, 0x84, 0xda, 0xa4,
	0x37, 0xd9, 0xef, 0xbe, 0x3f, 0xa4, 0xfc, 0x74, 0x3c, 0xe8, 0xd9, 0xfe, 0xe8, 0xce, 0xd0, 0x1f,
	0xfa, 0x77, 0xa4, 0xef, 0x60, 0x7c, 0x22, 0x35, 0xa9, 0x48, 0x49, 0xc5, 0xe8, 0xae, 0x9f, 0x30,
	0xdf, 0xe3, 0x81, 0x35, 0x24, 0xca, 0x60, 0x74, 0x60, 0xf5, 0x6b, 0xff, 0x90, 0x0d, 0x31, 0x39,
	0x1f, 0x93, 0x90, 0x1b, 0x4f, 0x00, 0x3d, 0x21, 0x83, 0xc7, 0x01, 0xb1, 0xa9, 0xe5, 0x1e, 0x59,
	0xcc, 0xc1, 0x24, 0x0c, 0xd0, 0x21, 0x2c, 0xdb, 0x16, 0x73, 0xb4, 0xca, 0x6e, 0x6d, 0xaf, 0xbd,
	0x7f, 0xa3, 0x37, 0x67, 0x25, 0xbd, 0xe2, 0xb4, 0x7e, 0x33, 0x8e, 0x74, 0x39, 0x09, 0xcb, 0xa7,
	0xf1, 0x67, 0x15, 0x3a, 0x45, 0x17, 0x74, 0x05, 0xaa, 0x54, 0xc4, 0xac, 0xec, 0xd5, 0xfa, 0x8d,
	0x38, 0xd2, 0xab, 0xd4, 0xc1, 0x55, 0xea, 0xa0, 0xab, 0xb0, 0xcc, 0x2f, 0x02, 0xa2, 0x55, 0x77,
	0x2b, 0x7b, 0x75, 0x15, 0x48, 0xe8, 0x58, 0x3e, 0x91, 0x0e, 0x75, 0x4e, 0xb9, 0x4b, 0xb4, 0xda,
	0x6e, 0x65, 0xaf, 0xd5, 0x6f, 0xc5, 0x91, 0xae, 0x0c, 0x58, 0xbd, 0xc4, 0x74, 0x87, 0x84, 0xb6,
	0xb6, 0x2c, 0xc7, 0xe5, 0x74, 0xa1, 0x63, 0xf9, 0x14, 0xd3, 0x6d, 0x7f, 0x42, 0x98, 0x56, 0xcf,
	0xa6, 0x4b, 0x03, 0x56, 0x2f, 0xf4, 0x3f, 0x58, 0x61, 0xc4, 0x94, 0x0b, 0x68, 0xc8, 0x05, 0xb4,
	0xe3, 0x48, 0x4f, 0x4d, 0x38, 0x15, 0xd0, 0x1e, 0x34, 0x19, 0x31, 0x27, 0x96, 0x3b, 0x26, 0xda,
	0x8a, 0x0c, 0xb5, 0x1a, 0x47, 0xfa, 0xd4, 0x86, 0xa7, 0x12, 0x32, 0xa0, 0x11, 0x10, 0x16, 0xfa,
	0x9e, 0xd6, 0x94, 0x7e, 0x10, 0x47, 0x7a, 0x62, 0xc1, 0xc9, 0x5b, 0xae, 0x8a, 0xd3, 0x11, 0xd1,
	0x5a, 0x32, 0x1b, 0x6a, 0x55, 0xc2, 0x80, 0xd5, 0x4b, 0x38, 0x8c, 0xa4, 0x03, 0x64, 0x0e, 0x23,
	0xe5, 0x20, 0x5f, 0xc6, 0xcf, 0x55, 0xd8, 0x3e, 0x3a, 0x25, 0xf6, 0xd9, 0x91, 0x3f, 0x1a, 0xf9,
	0x5e, 0xff, 0xc9, 0x03, 0x1a, 0x72, 0x4c, 0xce, 0xd1, 0x06, 0xd4, 0xfc, 0x24, 0xcd, 0x2d, 0x2c,
	0x44, 0xb4, 0x0d, 0x75, 0xee, 0x9f, 0x11, 0x4f, 0x26, 0xb8, 0x85, 0x95, 0x82, 0x7a, 0x00, 0x34,
	0x34, 0x19, 0x99, 0x10, 0x16, 0xaa, 0xe4, 0x36, 0xfb, 0x9d, 0x38, 0xd2, 0x73, 0x56, 0x9c, 0x93,
	0x45, 0x9e, 0xc6, 0x21, 0x61, 0x26, 0x0d, 0x92, 0x4c, 0xcb, 0x3c, 0x25, 0x26, 0x9c, 0x0a, 0xe8,
	0x1b, 0x68, 0xb9, 0x16, 0x1b, 0x12, 0x53, 0x2c, 0x42, 0xe4, 0xbc, 0xbd, 0x7f, 0x73, 0x2e, 0x7e,
	0x1e, 0x08, 0xaf, 0x87, 0xd4, 0x39, 0xf2, 0x3d, 0x4e, 0x3c, 0xde, 0x5f, 0x8b, 0x23, 0x3d, 0x9b,
	0x8a, 0x33, 0x11, 0x7d, 0x00, 0x6d, 0xa5, 0xa8, 0x5d, 0x34, 0xe4, 0xd7, 0xd7, 0xe3, 0x48, 0xcf,
	0x9b, 0x71, 0x5e, 0x31, 0xee, 0xc2, 0x7a, 0x29, 0xbe, 0xc8, 0xc2, 0x60, 0x3c, 0x99, 0x66, 0x46,
	0x29, 0x22, 0x5b, 0x23, 0xea, 0xc8, 0xcc, 0xd4, 0xb0, 0x10, 0x8d, 0x7b, 0x73, 0xf3, 0x1a, 0x24,
	0xf9, 0xa2, 0x9e, 0xe9, 0xd2, 0x90, 0xcb, 0x20, 0x59, 0xbe, 0x12, 0x2b, 0xce, 0xc9, 0xc6, 0x2f,
	0x15, 0xf8, 0xef, 0x4c, 0xa0, 0xbe, 0xc5, 0xed, 0x53, 0x51, 0xa5, 0xab, 0xb0, 0xec, 0x53, 0x27,
	0x94, 0x27, 0x2c, 0x01, 0xad, 0xd0, 0xb1, 0x7c, 0x4a, 0xcc, 0x67, 0x15, 0x4b, 0x30, 0x2f, 0x77,
	0xf9, 0xaf, 0x16, 0xcf, 0xf8, 0xed, 0x92, 0x35, 0x07, 0xc8, 0x2d, 0x65, 0x40, 0x70, 0xc3, 0x67,
	0x73, 0x6b, 0xfb, 0xca, 0x18, 0xbd, 0xfb, 0xe1, 0x7d, 0x4f, 0x18, 0xbe, 0xf4, 0x38, 0xbb, 0xb8,
	0x2c, 0x7f, 0xdd, 0x4f, 0x61, 0xad, 0xe0, 0x2c, 0x4a, 0x75, 0x46, 0x2e, 0x52, 0x60, 0x9f, 0x91,
	0x0b, 0x51, 0x52, 0x75, 0x20, 0x45, 0x9a, 0x9a, 0x58, 0x29, 0x07, 0xd5, 0x4f, 0x2a, 0x82, 0xd6,
	0x0e, 0x83, 0xe0, 0x6d, 0x68, 0xad, 0x38, 0x6d, 0x86, 0xd6, 0x7e, 0x5d, 0x86, 0x4e, 0xd1, 0x05,
	0x75, 0x32, 0x5a, 0x93, 0x74, 0xb6, 0x9d, 0x12, 0x56, 0x7a, 0xdc, 0x24, 0x4b, 0xa1, 0x84, 0xa5,
	0x24, 0x8b, 0x25, 0xdc, 0xb4, 0x9d, 0x72, 0xd3, 0xb2, 0xf2, 0x9c, 0x21, 0xa4, 0xfa, 0x82, 0x84,
	0xd4, 0xb8, 0x94, 0x90, 0xae, 0x40, 0xc3, 0xf6, 0x99, 0x47, 0x98, 0x22, 0x2e, 0x9c, 0x68, 0x62,
	0x49, 0x32, 0x1d, 0x82, 0xa6, 0xea, 0x6a, 0x7f, 0xc2, 0x37, 0x54, 0x6b, 0x6a, 0x29, 0x5f, 0xa5,
	0xa1, 0x2e, 0x34, 0x87, 0xf4, 0x44, 0x8d, 0x80, 0x1c, 0x99, 0xea, 0x48, 0x83, 0x95, 0xc1, 0x50,
	0x0d, 0xb5, 0xe5, 0x50, 0xaa, 0x8a, 0x68, 0x8c, 0x58, 0x82, 0x0a, 0x57, 0x55, 0x34, 0xa5, 0x89,
	0x2d, 0x72, 0x6b, 0x60, 0x8e, 0x19, 0xd5, 0xd6, 0x32, 0x38, 0x26, 0x26, 0x9c, 0x0a, 0xe8, 0x63,
	0x58, 0x0b, 0xfc, 0xa7, 0x84, 0x99, 0x01, 0xb5, 0xcd, 0x70, 0xec, 0x69, 0x1d, 0xe9, 0xbc, 0x19,
	0x47, 0x7a, 0x71, 0x00, 0x17, 0x55, 0xf4, 0x39, 0xac, 0x67, 0x06, 0x8f, 0x0e, 0x4f, 0xb9, 0xb6,
	0x2e, 0xa7, 0x6e, 0xc5, 0x91, 0x5e, 0x1e, 0xc2, 0x65, 0x83, 0x48, 0x4c, 0x48, 0x9f, 0x11, 0x6d,
	0x43, 0xd5, 0x4a, 0xc8, 0xa2, 0x56, 0x4f, 0xa9, 0xc3, 0x4f, 0xb5, 0x4d, 0x59, 0x68, 0xa5, 0x88,
	0x0d, 0x9e, 0x12, 0x19, 0x1f, 0x49, 0x73, 0xa2, 0x09, 0xac, 0x8e, 0x99, 0xab, 0x6d, 0x29, 0xac,
	0x8e, 0x99, 0x6b, 0x5c, 0x83, 0xf6, 0x57, 0x16, 0x27, 0x8c, 0x5a, 0xae, 0x38, 0xff, 0x29, 0x68,
	0x6a, 0x0a, 0x34, 0xc6, 0x43, 0x58, 0xcd, 0x86, 0xc3, 0x00, 0x7d, 0x01, 0xcd, 0x51, 0xa2, 0x27,
	0x70, 0xbd, 0x36, 0x17, 0xae, 0xe9, 0x24, 0x05, 0x54, 0x79, 0x88, 0xe4, 0xd3, 0xf8, 0xb1, 0x06,
	0xcd, 0x74, 0xf0, 0x9d, 0x43, 0x34, 0x8f, 0x86, 0x7a, 0x09, 0x0d, 0x19, 0xda, 0x1a, 0x05, 0xb4,
	0xcd, 0x14, 0x73, 0xe5, 0xed, 0x8b, 0xd9, 0x7c, 0x83, 0x62, 0x66, 0x18, 0x6c, 0x49, 0x9c, 0xa7,
	0x18, 0x3c, 0x80, 0x8e, 0x92, 0x4c, 0x5b, 0x75, 0x08, 0x85, 0xeb, 0x3e, 0x8a, 0x23, 0xbd, 0x34,
	0x82, 0x4b, 0x7a, 0x06, 0x86, 0xf6, 0x7c, 0x30, 0xac, 0xe6, 0xc1, 0x60, 0xfc, 0x50, 0x81, 0xff,
	0x1c, 0x06, 0x01, 0xb6, 0x47, 0x0e, 0x26, 0xae, 0xc5, 0xc9, 0xa3, 0xa1, 0x9d, 0xdc, 0xbf, 0x66,
	0x2a, 0xb3, 0x07, 0xcd, 0x91, 0x3f, 0xa0, 0xa6, 0x15, 0x04, 0x09, 0xf9, 0xcb, 0x53, 0x9d, 0xda,
	0xf0, 0x54, 0x12, 0x5f, 0x73, 0x88, 0x80, 0x41, 0x52, 0xaf, 0x44, 0x53, 0x7d, 0x8e, 0xba, 0x8e,
	0xac, 0x58, 0x1d, 0x2b, 0xc5, 0xf8, 0xa3, 0x0a, 0xdb, 0xb3, 0x6b, 0x08, 0x83, 0x77, 0x0e, 0x8d,
	0x8c, 0x40, 0xea, 0x05, 0x02, 0x79, 0xe7, 0xd7, 0xac, 0x0c, 0x67, 0xcd, 0xb9, 0xac, 0xd6, 0xca,
	0xb1, 0x5a, 0x7a, 0xa0, 0x21, 0x77, 0xa0, 0xbb, 0xd0, 0x0c, 0xfc, 0x90, 0x72, 0xea, 0x7b, 0xb2,
	0x8c, 0x75, 0x3c, 0xd5, 0x45, 0x7b, 0x65, 0xc4, 0x36, 0xf3, 0xdc, 0xa5, 0x7a, 0x55, 0x66, 0xc5,
	0x39, 0xd9, 0x78, 0x0c, 0x9d, 0x42, 0xaf, 0x39, 0x47, 0x87, 0x50, 0x4b, 0xdb, 0x7b, 0xad, 0x7f,
	0x27, 0x8e, 0x74, 0xa1, 0xfe, 0x1d, 0xe9, 0x37, 0x4f, 0x7c, 0x36, 0x3a, 0x30, 0xa8, 0x13, 0xde,
	0x0e, 0x03, 0x97, 0x72, 0x63, 0x77, 0x62, 0xb9, 0xd4, 0xb1, 0x38, 0x39, 0x30, 0x18, 0x39, 0x1f,
	0x53, 0x46, 0x1c, 0x03, 0x0b, 0x67, 0xe3, 0x65, 0x05, 0xd6, 0xcb, 0x1d, 0xec, 0x0c, 0x56, 0x43,
	0x65, 0x32, 0x73, 0x9d, 0xec, 0xa3, 0xb9, 0xd4, 0x50, 0x9a, 0x9b, 0xd7, 0x55, 0xf7, 0xdd, 0x88,
	0x23, 0xbd, 0x10, 0x0e, 0x17, 0xb4, 0xae, 0x0d, 0x1b, 0xe5, 0x39, 0xf9, 0x26, 0x5c, 0x53, 0x4d,
	0xf8, 0x6e, 0xbe, 0x09, 0x2f, 0xd6, 0x55, 0x73, 0x9d, 0x7a, 0xff, 0x79, 0x03, 0x9a, 0x38, 0x99,
	0x81, 0x2c, 0xd8, 0x3c, 0x26, 0xbc, 0xf4, 0xdb, 0x70, 0x7d, 0x6e, 0xc4, 0xfc, 0x5f, 0x4c, 0xf7,
	0xff, 0x0b, 0xfc, 0xa1, 0x88, 0x1c, 0x18, 0x4b, 0xc9, 0x27, 0x4a, 0x2d, 0xfc, 0xad, 0x3f, 0x31,
	0x7b, 0xc9, 0x30, 0x96, 0xd0, 0xf7, 0xd0, 0x39, 0x26, 0x3c, 0x1f, 0xff, 0xc6, 0xeb, 0x0b, 0x74,
	0xde, 0xbd, 0xb9, 0x48, 0x15, 0x8d, 0x25, 0x14, 0xc0, 0x96, 0xda, 0x41, 0xe1, 0x30, 0xa3, 0xdb,
	0xaf, 0x5a, 0xe0, 0x3c, 0xde, 0xe9, 0xde, 0x5a, 0xd0, 0x5b, 0x7e, 0xf1, 0x0c, 0x36, 0x67, 0x6e,
	0x74, 0xe8, 0xd6, 0x62, 0x37, 0x3f, 0xb1, 0xb3, 0x85, 0x5d, 0xc5, 0xc7, 0x9e, 0xc1, 0x95, 0xf9,
	0xd7, 0x47, 0xd4, 0x7b, 0xa3, 0xbb, 0xe6, 0x79, 0xf7, 0xcd, 0xfc, 0xc5, 0xb7, 0x4f, 0x00, 0x1d,
	0x13, 0x7e, 0x4f, 0xfc, 0x33, 0x3f, 0xb2, 0x86, 0xe4, 0xc8, 0xf7, 0x4e, 0xe8, 0x10, 0xbd, 0x37,
	0x37, 0xce, 0xac, 0xe3, 0xab, 0x8b, 0x58, 0x8e, 0xf8, 0x2d, 0xb4, 0x8f, 0x09, 0x9f, 0xb6, 0xe7,
	0xdd, 0x4b, 0x5b, 0xbb, 0x08, 0x7b, 0xfd, 0x35, 0x1e, 0xa2, 0x4c, 0xfd, 0xed, 0xe7, 0x2f, 0x76,
	0x2a, 0xbf, 0xbf, 0xd8, 0xa9, 0xfc, 0xf5, 0x62, 0xa7, 0xf2, 0xd3, 0xcb, 0x9d, 0xa5, 0xef, 0xaa,
	0x93, 0xfd, 0x41, 0x43, 0xfe, 0xf8, 0x7f, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x86,
	0x25, 0x33, 0x5a, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceClient interface {
	//获取web特殊卡信息
	GetWebSpecialCard(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*WebSpecialCardResp, error)
	//获取app特殊卡
	GetAppSpecialCard(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*AppSpecialCardResp, error)
	//获取特殊卡
	GetSpecialCard(ctx context.Context, in *SpecialCardReq, opts ...grpc.CallOption) (*SpecialCardResp, error)
	//获取app相关推荐Pgc关联 特殊卡信息
	GetAppRcmdRelatePgc(ctx context.Context, in *AppRcmdRelatePgcRequest, opts ...grpc.CallOption) (*AppRcmdRelatePgcResp, error)
	// 判定通用黑白名单
	CheckCommonBWList(ctx context.Context, in *CheckCommonBWListReq, opts ...grpc.CallOption) (*CheckCommonBWListRep, error)
	// 批量判定通用黑白名单
	CheckCommonBWListBatch(ctx context.Context, in *CheckCommonBWListBatchReq, opts ...grpc.CallOption) (*CheckCommonBWListBatchRep, error)
	// 版头
	// GetFrontPageConfig 获取参数对应的版头
	GetFrontPageConfig(ctx context.Context, in *GetFrontPageConfigReq, opts ...grpc.CallOption) (*FrontPageConfig, error)
	//获取物料详细信息
	GetMaterial(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*MaterialResp, error)
}

type resourceClient struct {
	cc *grpc.ClientConn
}

func NewResourceClient(cc *grpc.ClientConn) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) GetWebSpecialCard(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*WebSpecialCardResp, error) {
	out := new(WebSpecialCardResp)
	err := c.cc.Invoke(ctx, "/resource.service.v2.Resource/GetWebSpecialCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetAppSpecialCard(ctx context.Context, in *NoArgRequest, opts ...grpc.CallOption) (*AppSpecialCardResp, error) {
	out := new(AppSpecialCardResp)
	err := c.cc.Invoke(ctx, "/resource.service.v2.Resource/GetAppSpecialCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetSpecialCard(ctx context.Context, in *SpecialCardReq, opts ...grpc.CallOption) (*SpecialCardResp, error) {
	out := new(SpecialCardResp)
	err := c.cc.Invoke(ctx, "/resource.service.v2.Resource/GetSpecialCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetAppRcmdRelatePgc(ctx context.Context, in *AppRcmdRelatePgcRequest, opts ...grpc.CallOption) (*AppRcmdRelatePgcResp, error) {
	out := new(AppRcmdRelatePgcResp)
	err := c.cc.Invoke(ctx, "/resource.service.v2.Resource/GetAppRcmdRelatePgc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) CheckCommonBWList(ctx context.Context, in *CheckCommonBWListReq, opts ...grpc.CallOption) (*CheckCommonBWListRep, error) {
	out := new(CheckCommonBWListRep)
	err := c.cc.Invoke(ctx, "/resource.service.v2.Resource/CheckCommonBWList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) CheckCommonBWListBatch(ctx context.Context, in *CheckCommonBWListBatchReq, opts ...grpc.CallOption) (*CheckCommonBWListBatchRep, error) {
	out := new(CheckCommonBWListBatchRep)
	err := c.cc.Invoke(ctx, "/resource.service.v2.Resource/CheckCommonBWListBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetFrontPageConfig(ctx context.Context, in *GetFrontPageConfigReq, opts ...grpc.CallOption) (*FrontPageConfig, error) {
	out := new(FrontPageConfig)
	err := c.cc.Invoke(ctx, "/resource.service.v2.Resource/GetFrontPageConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetMaterial(ctx context.Context, in *MaterialReq, opts ...grpc.CallOption) (*MaterialResp, error) {
	out := new(MaterialResp)
	err := c.cc.Invoke(ctx, "/resource.service.v2.Resource/GetMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
type ResourceServer interface {
	//获取web特殊卡信息
	GetWebSpecialCard(context.Context, *NoArgRequest) (*WebSpecialCardResp, error)
	//获取app特殊卡
	GetAppSpecialCard(context.Context, *NoArgRequest) (*AppSpecialCardResp, error)
	//获取特殊卡
	GetSpecialCard(context.Context, *SpecialCardReq) (*SpecialCardResp, error)
	//获取app相关推荐Pgc关联 特殊卡信息
	GetAppRcmdRelatePgc(context.Context, *AppRcmdRelatePgcRequest) (*AppRcmdRelatePgcResp, error)
	// 判定通用黑白名单
	CheckCommonBWList(context.Context, *CheckCommonBWListReq) (*CheckCommonBWListRep, error)
	// 批量判定通用黑白名单
	CheckCommonBWListBatch(context.Context, *CheckCommonBWListBatchReq) (*CheckCommonBWListBatchRep, error)
	// 版头
	// GetFrontPageConfig 获取参数对应的版头
	GetFrontPageConfig(context.Context, *GetFrontPageConfigReq) (*FrontPageConfig, error)
	//获取物料详细信息
	GetMaterial(context.Context, *MaterialReq) (*MaterialResp, error)
}

// UnimplementedResourceServer can be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (*UnimplementedResourceServer) GetWebSpecialCard(ctx context.Context, req *NoArgRequest) (*WebSpecialCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebSpecialCard not implemented")
}
func (*UnimplementedResourceServer) GetAppSpecialCard(ctx context.Context, req *NoArgRequest) (*AppSpecialCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSpecialCard not implemented")
}
func (*UnimplementedResourceServer) GetSpecialCard(ctx context.Context, req *SpecialCardReq) (*SpecialCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialCard not implemented")
}
func (*UnimplementedResourceServer) GetAppRcmdRelatePgc(ctx context.Context, req *AppRcmdRelatePgcRequest) (*AppRcmdRelatePgcResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRcmdRelatePgc not implemented")
}
func (*UnimplementedResourceServer) CheckCommonBWList(ctx context.Context, req *CheckCommonBWListReq) (*CheckCommonBWListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCommonBWList not implemented")
}
func (*UnimplementedResourceServer) CheckCommonBWListBatch(ctx context.Context, req *CheckCommonBWListBatchReq) (*CheckCommonBWListBatchRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCommonBWListBatch not implemented")
}
func (*UnimplementedResourceServer) GetFrontPageConfig(ctx context.Context, req *GetFrontPageConfigReq) (*FrontPageConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontPageConfig not implemented")
}
func (*UnimplementedResourceServer) GetMaterial(ctx context.Context, req *MaterialReq) (*MaterialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterial not implemented")
}

func RegisterResourceServer(s *grpc.Server, srv ResourceServer) {
	s.RegisterService(&_Resource_serviceDesc, srv)
}

func _Resource_GetWebSpecialCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetWebSpecialCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v2.Resource/GetWebSpecialCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetWebSpecialCard(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetAppSpecialCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetAppSpecialCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v2.Resource/GetAppSpecialCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetAppSpecialCard(ctx, req.(*NoArgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetSpecialCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecialCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetSpecialCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v2.Resource/GetSpecialCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetSpecialCard(ctx, req.(*SpecialCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetAppRcmdRelatePgc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRcmdRelatePgcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetAppRcmdRelatePgc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v2.Resource/GetAppRcmdRelatePgc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetAppRcmdRelatePgc(ctx, req.(*AppRcmdRelatePgcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_CheckCommonBWList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCommonBWListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).CheckCommonBWList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v2.Resource/CheckCommonBWList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).CheckCommonBWList(ctx, req.(*CheckCommonBWListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_CheckCommonBWListBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCommonBWListBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).CheckCommonBWListBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v2.Resource/CheckCommonBWListBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).CheckCommonBWListBatch(ctx, req.(*CheckCommonBWListBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetFrontPageConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontPageConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetFrontPageConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v2.Resource/GetFrontPageConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetFrontPageConfig(ctx, req.(*GetFrontPageConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.service.v2.Resource/GetMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetMaterial(ctx, req.(*MaterialReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resource.service.v2.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWebSpecialCard",
			Handler:    _Resource_GetWebSpecialCard_Handler,
		},
		{
			MethodName: "GetAppSpecialCard",
			Handler:    _Resource_GetAppSpecialCard_Handler,
		},
		{
			MethodName: "GetSpecialCard",
			Handler:    _Resource_GetSpecialCard_Handler,
		},
		{
			MethodName: "GetAppRcmdRelatePgc",
			Handler:    _Resource_GetAppRcmdRelatePgc_Handler,
		},
		{
			MethodName: "CheckCommonBWList",
			Handler:    _Resource_CheckCommonBWList_Handler,
		},
		{
			MethodName: "CheckCommonBWListBatch",
			Handler:    _Resource_CheckCommonBWListBatch_Handler,
		},
		{
			MethodName: "GetFrontPageConfig",
			Handler:    _Resource_GetFrontPageConfig_Handler,
		},
		{
			MethodName: "GetMaterial",
			Handler:    _Resource_GetMaterial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *NoArgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoArgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *WebSpecialCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebSpecialCardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebSpecialCardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Card) > 0 {
		for iNdEx := len(m.Card) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Card[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WebSpecialCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebSpecialCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebSpecialCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x50
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Person) > 0 {
		i -= len(m.Person)
		copy(dAtA[i:], m.Person)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Person)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReValue) > 0 {
		i -= len(m.ReValue)
		copy(dAtA[i:], m.ReValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckCommonBWListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckCommonBWListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckCommonBWListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LargeToken) > 0 {
		i -= len(m.LargeToken)
		copy(dAtA[i:], m.LargeToken)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LargeToken)))
		i--
		dAtA[i] = 0x32
	}
	if m.LargeOid != nil {
		{
			size, err := m.LargeOid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserIp) > 0 {
		i -= len(m.UserIp)
		copy(dAtA[i:], m.UserIp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsReverse {
		i--
		if m.IsReverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Oid) > 0 {
		i -= len(m.Oid)
		copy(dAtA[i:], m.Oid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Oid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LargeOidContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LargeOidContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LargeOidContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Buvid) > 0 {
		i -= len(m.Buvid)
		copy(dAtA[i:], m.Buvid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckCommonBWListRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckCommonBWListRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckCommonBWListRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsInList {
		i--
		if m.IsInList {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckCommonBWListBatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckCommonBWListBatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckCommonBWListBatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserIp) > 0 {
		i -= len(m.UserIp)
		copy(dAtA[i:], m.UserIp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsReverse {
		i--
		if m.IsReverse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Oids) > 0 {
		for iNdEx := len(m.Oids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Oids[iNdEx])
			copy(dAtA[i:], m.Oids[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Oids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckCommonBWListBatchRep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckCommonBWListBatchRep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckCommonBWListBatchRep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IsInList) > 0 {
		for k := range m.IsInList {
			v := m.IsInList[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppSpecialCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppSpecialCardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppSpecialCardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Card) > 0 {
		for iNdEx := len(m.Card) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Card[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppSpecialCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppSpecialCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppSpecialCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Size_) > 0 {
		i -= len(m.Size_)
		copy(dAtA[i:], m.Size_)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Size_)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PowerPicNight) > 0 {
		i -= len(m.PowerPicNight)
		copy(dAtA[i:], m.PowerPicNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PowerPicNight)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PowerPicSun) > 0 {
		i -= len(m.PowerPicSun)
		copy(dAtA[i:], m.PowerPicSun)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PowerPicSun)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.TabUri) > 0 {
		i -= len(m.TabUri)
		copy(dAtA[i:], m.TabUri)
		i = encodeVarintApi(dAtA, i, uint64(len(m.TabUri)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Bgcover) > 0 {
		i -= len(m.Bgcover)
		copy(dAtA[i:], m.Bgcover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Bgcover)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Gifcover) > 0 {
		i -= len(m.Gifcover)
		copy(dAtA[i:], m.Gifcover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gifcover)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Scover) > 0 {
		i -= len(m.Scover)
		copy(dAtA[i:], m.Scover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Scover)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Card != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Card))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Corner) > 0 {
		i -= len(m.Corner)
		copy(dAtA[i:], m.Corner)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Corner)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReValue) > 0 {
		i -= len(m.ReValue)
		copy(dAtA[i:], m.ReValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReValue)))
		i--
		dAtA[i] = 0x32
	}
	if m.ReType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaterialReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaterialReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaterialReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA3 := make([]byte, len(m.Id)*10)
		var j2 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintApi(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MaterialResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaterialResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaterialResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Material) > 0 {
		for iNdEx := len(m.Material) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Material[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Material) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Material) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Material) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Height != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x60
	}
	if m.Width != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ReasonContent) > 0 {
		i -= len(m.ReasonContent)
		copy(dAtA[i:], m.ReasonContent)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReasonContent)))
		i--
		dAtA[i] = 0x52
	}
	if m.Reason != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PowerPicNight) > 0 {
		i -= len(m.PowerPicNight)
		copy(dAtA[i:], m.PowerPicNight)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PowerPicNight)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PowerPicSun) > 0 {
		i -= len(m.PowerPicSun)
		copy(dAtA[i:], m.PowerPicSun)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PowerPicSun)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Corner) > 0 {
		i -= len(m.Corner)
		copy(dAtA[i:], m.Corner)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Corner)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gifcover) > 0 {
		i -= len(m.Gifcover)
		copy(dAtA[i:], m.Gifcover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gifcover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppRcmdRelatePgcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppRcmdRelatePgcRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppRcmdRelatePgcRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Build != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MobiApp) > 0 {
		i -= len(m.MobiApp)
		copy(dAtA[i:], m.MobiApp)
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobiApp)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppRcmdRelatePgcResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppRcmdRelatePgcResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppRcmdRelatePgcResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RecReason) > 0 {
		i -= len(m.RecReason)
		copy(dAtA[i:], m.RecReason)
		i = encodeVarintApi(dAtA, i, uint64(len(m.RecReason)))
		i--
		dAtA[i] = 0x62
	}
	if m.Position != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Size_) > 0 {
		i -= len(m.Size_)
		copy(dAtA[i:], m.Size_)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Size_)))
		i--
		dAtA[i] = 0x52
	}
	if m.Card != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Card))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Corner) > 0 {
		i -= len(m.Corner)
		copy(dAtA[i:], m.Corner)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Corner)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReValue) > 0 {
		i -= len(m.ReValue)
		copy(dAtA[i:], m.ReValue)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReValue)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ReType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Scover) > 0 {
		i -= len(m.Scover)
		copy(dAtA[i:], m.Scover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Scover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialCardReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialCardReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		dAtA5 := make([]byte, len(m.Ids)*10)
		var j4 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintApi(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpecialCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialCardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialCardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpecialCard) > 0 {
		for k := range m.SpecialCard {
			v := m.SpecialCard[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintApi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintApi(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintApi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NoArgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebSpecialCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Card) > 0 {
		for _, e := range m.Card {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebSpecialCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReType != 0 {
		n += 1 + sovApi(uint64(m.ReType))
	}
	l = len(m.ReValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Person)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckCommonBWListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Oid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsReverse {
		n += 2
	}
	l = len(m.UserIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LargeOid != nil {
		l = m.LargeOid.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LargeToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LargeOidContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckCommonBWListRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsInList {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckCommonBWListBatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oids) > 0 {
		for _, s := range m.Oids {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsReverse {
		n += 2
	}
	l = len(m.UserIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckCommonBWListBatchRep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IsInList) > 0 {
		for k, v := range m.IsInList {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppSpecialCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Card) > 0 {
		for _, e := range m.Card {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppSpecialCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReType != 0 {
		n += 1 + sovApi(uint64(m.ReType))
	}
	l = len(m.ReValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Corner)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Card != 0 {
		n += 1 + sovApi(uint64(m.Card))
	}
	l = len(m.Scover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gifcover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Bgcover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TabUri)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PowerPicSun)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PowerPicNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 2 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 2 + sovApi(uint64(m.Height))
	}
	l = len(m.Url)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MaterialReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MaterialResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Material) > 0 {
		for _, e := range m.Material {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Material) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Gifcover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Corner)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PowerPicSun)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PowerPicNight)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovApi(uint64(m.Reason))
	}
	l = len(m.ReasonContent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppRcmdRelatePgcRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.MobiApp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppRcmdRelatePgcResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Scover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ReType != 0 {
		n += 1 + sovApi(uint64(m.ReType))
	}
	l = len(m.ReValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Corner)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Card != 0 {
		n += 1 + sovApi(uint64(m.Card))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovApi(uint64(m.Position))
	}
	l = len(m.RecReason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpecialCard) > 0 {
		for k, v := range m.SpecialCard {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoArgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebSpecialCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebSpecialCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebSpecialCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = append(m.Card, &WebSpecialCard{})
			if err := m.Card[len(m.Card)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebSpecialCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebSpecialCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebSpecialCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReType", wireType)
			}
			m.ReType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Person", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Person = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckCommonBWListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckCommonBWListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckCommonBWListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReverse = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LargeOid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LargeOid == nil {
				m.LargeOid = &LargeOidContent{}
			}
			if err := m.LargeOid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LargeToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LargeToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LargeOidContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LargeOidContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LargeOidContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckCommonBWListRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckCommonBWListRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckCommonBWListRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInList", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInList = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckCommonBWListBatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckCommonBWListBatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckCommonBWListBatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oids = append(m.Oids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReverse = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckCommonBWListBatchRep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckCommonBWListBatchRep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckCommonBWListBatchRep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsInList == nil {
				m.IsInList = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IsInList[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSpecialCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSpecialCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSpecialCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = append(m.Card, &AppSpecialCard{})
			if err := m.Card[len(m.Card)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSpecialCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSpecialCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSpecialCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReType", wireType)
			}
			m.ReType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifcover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifcover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bgcover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bgcover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicSun", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPicSun = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPicNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaterialReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaterialReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaterialReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaterialResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaterialResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaterialResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Material", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Material = append(m.Material, &Material{})
			if err := m.Material[len(m.Material)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Material) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Material: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Material: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifcover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifcover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicSun", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPicSun = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerPicNight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerPicNight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReasonContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppRcmdRelatePgcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppRcmdRelatePgcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppRcmdRelatePgcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobiApp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobiApp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppRcmdRelatePgcResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppRcmdRelatePgcResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppRcmdRelatePgcResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReType", wireType)
			}
			m.ReType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpecialCard == nil {
				m.SpecialCard = make(map[int64]*AppSpecialCard)
			}
			var mapkey int64
			var mapvalue *AppSpecialCard
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AppSpecialCard{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpecialCard[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
