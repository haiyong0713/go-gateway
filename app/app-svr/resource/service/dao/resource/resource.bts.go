// Code generated by kratos tool btsgen. DO NOT EDIT.

/*
  Package resource is a generated cache proxy package.
  It is generated from:
  type _bts interface {
		// bts: -nullcache=&pb.FrontPage{Id:-1} -check_null_code=$==nil -struct_name=Dao
		DefaultPage(ctx context.Context, request *pb.FrontPageReq) (*pb.FrontPage, error)
		// bts: -check_null_code=$==nil -struct_name=Dao
		OnlinePage(ctx context.Context, request *pb.FrontPageReq) ([]*pb.FrontPage, error)
		// bts:  -check_null_code=$==nil -struct_name=Dao
		HiddenPage(ctx context.Context, request *pb.FrontPageReq) ([]*pb.FrontPage, error)
	}
*/

package resource

import (
	"context"

	"go-common/library/cache"
	pb "go-gateway/app/app-svr/resource/service/api/v1"
)

var _ _bts

// DefaultPage get data from cache if miss will call source method, then add to cache.
func (d *Dao) DefaultPage(c context.Context, request *pb.FrontPageReq) (res *pb.FrontPage, err error) {
	addCache := true
	res, err = d.CacheDefaultPage(c, request)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res == nil {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:DefaultPage")
		return
	}
	cache.MetricMisses.Inc("bts:DefaultPage")
	res, err = d.RawDefaultPage(c, request)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &pb.FrontPage{Id: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheDefaultPage(c, request, miss)
	})
	return
}

// OnlinePage get data from cache if miss will call source method, then add to cache.
func (d *Dao) OnlinePage(c context.Context, request *pb.FrontPageReq) (res []*pb.FrontPage, err error) {
	addCache := true
	res, err = d.CacheOnlinePage(c, request)
	if err != nil {
		addCache = false
		err = nil
	}
	if len(res) != 0 {
		cache.MetricHits.Inc("bts:OnlinePage")
		return
	}
	cache.MetricMisses.Inc("bts:OnlinePage")
	res, err = d.RawOnlinePage(c, request)
	if err != nil {
		return
	}
	miss := res
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheOnlinePage(c, request, miss)
	})
	return
}

// HiddenPage get data from cache if miss will call source method, then add to cache.
func (d *Dao) HiddenPage(c context.Context, request *pb.FrontPageReq) (res []*pb.FrontPage, err error) {
	addCache := true
	res, err = d.CacheHiddenPage(c, request)
	if err != nil {
		addCache = false
		err = nil
	}
	if len(res) != 0 {
		cache.MetricHits.Inc("bts:HiddenPage")
		return
	}
	cache.MetricMisses.Inc("bts:HiddenPage")
	res, err = d.RawHiddenPage(c, request)
	if err != nil {
		return
	}
	miss := res
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheHiddenPage(c, request, miss)
	})
	return
}
