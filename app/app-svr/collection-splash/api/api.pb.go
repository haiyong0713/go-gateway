// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/collection-splash/api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddSplashReq struct {
	ImgName              string   `protobuf:"bytes,1,opt,name=img_name,json=imgName,proto3" json:"img_name,omitempty" form:"img_name"`
	ImgUrlNormal         string   `protobuf:"bytes,2,opt,name=img_url_normal,json=imgUrlNormal,proto3" json:"img_url_normal,omitempty" form:"img_url_normal"`
	ImgUrlFull           string   `protobuf:"bytes,3,opt,name=img_url_full,json=imgUrlFull,proto3" json:"img_url_full,omitempty" form:"img_url_full"`
	ImgUrlPad            string   `protobuf:"bytes,4,opt,name=img_url_pad,json=imgUrlPad,proto3" json:"img_url_pad,omitempty" form:"img_url_pad"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddSplashReq) Reset()         { *m = AddSplashReq{} }
func (m *AddSplashReq) String() string { return proto.CompactTextString(m) }
func (*AddSplashReq) ProtoMessage()    {}
func (*AddSplashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586b0f90b73e367, []int{0}
}
func (m *AddSplashReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddSplashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddSplashReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddSplashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddSplashReq.Merge(m, src)
}
func (m *AddSplashReq) XXX_Size() int {
	return m.Size()
}
func (m *AddSplashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddSplashReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddSplashReq proto.InternalMessageInfo

func (m *AddSplashReq) GetImgName() string {
	if m != nil {
		return m.ImgName
	}
	return ""
}

func (m *AddSplashReq) GetImgUrlNormal() string {
	if m != nil {
		return m.ImgUrlNormal
	}
	return ""
}

func (m *AddSplashReq) GetImgUrlFull() string {
	if m != nil {
		return m.ImgUrlFull
	}
	return ""
}

func (m *AddSplashReq) GetImgUrlPad() string {
	if m != nil {
		return m.ImgUrlPad
	}
	return ""
}

type UpdateSplashReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	ImgName              string   `protobuf:"bytes,2,opt,name=img_name,json=imgName,proto3" json:"img_name,omitempty" form:"img_name"`
	ImgUrlNormal         string   `protobuf:"bytes,3,opt,name=img_url_normal,json=imgUrlNormal,proto3" json:"img_url_normal,omitempty" form:"img_url_normal"`
	ImgUrlFull           string   `protobuf:"bytes,4,opt,name=img_url_full,json=imgUrlFull,proto3" json:"img_url_full,omitempty" form:"img_url_full"`
	ImgUrlPad            string   `protobuf:"bytes,5,opt,name=img_url_pad,json=imgUrlPad,proto3" json:"img_url_pad,omitempty" form:"img_url_pad"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSplashReq) Reset()         { *m = UpdateSplashReq{} }
func (m *UpdateSplashReq) String() string { return proto.CompactTextString(m) }
func (*UpdateSplashReq) ProtoMessage()    {}
func (*UpdateSplashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586b0f90b73e367, []int{1}
}
func (m *UpdateSplashReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSplashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSplashReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSplashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSplashReq.Merge(m, src)
}
func (m *UpdateSplashReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSplashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSplashReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSplashReq proto.InternalMessageInfo

func (m *UpdateSplashReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateSplashReq) GetImgName() string {
	if m != nil {
		return m.ImgName
	}
	return ""
}

func (m *UpdateSplashReq) GetImgUrlNormal() string {
	if m != nil {
		return m.ImgUrlNormal
	}
	return ""
}

func (m *UpdateSplashReq) GetImgUrlFull() string {
	if m != nil {
		return m.ImgUrlFull
	}
	return ""
}

func (m *UpdateSplashReq) GetImgUrlPad() string {
	if m != nil {
		return m.ImgUrlPad
	}
	return ""
}

type SplashReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplashReq) Reset()         { *m = SplashReq{} }
func (m *SplashReq) String() string { return proto.CompactTextString(m) }
func (*SplashReq) ProtoMessage()    {}
func (*SplashReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586b0f90b73e367, []int{2}
}
func (m *SplashReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplashReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplashReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplashReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplashReq.Merge(m, src)
}
func (m *SplashReq) XXX_Size() int {
	return m.Size()
}
func (m *SplashReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SplashReq.DiscardUnknown(m)
}

var xxx_messageInfo_SplashReq proto.InternalMessageInfo

func (m *SplashReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SetSplashReply struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetSplashReply) Reset()         { *m = SetSplashReply{} }
func (m *SetSplashReply) String() string { return proto.CompactTextString(m) }
func (*SetSplashReply) ProtoMessage()    {}
func (*SetSplashReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586b0f90b73e367, []int{3}
}
func (m *SetSplashReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSplashReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSplashReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSplashReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSplashReply.Merge(m, src)
}
func (m *SetSplashReply) XXX_Size() int {
	return m.Size()
}
func (m *SetSplashReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSplashReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetSplashReply proto.InternalMessageInfo

func (m *SetSplashReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SplashReply struct {
	Splash               *Splash  `protobuf:"bytes,1,opt,name=splash,proto3" json:"splash"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplashReply) Reset()         { *m = SplashReply{} }
func (m *SplashReply) String() string { return proto.CompactTextString(m) }
func (*SplashReply) ProtoMessage()    {}
func (*SplashReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586b0f90b73e367, []int{4}
}
func (m *SplashReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplashReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplashReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplashReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplashReply.Merge(m, src)
}
func (m *SplashReply) XXX_Size() int {
	return m.Size()
}
func (m *SplashReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SplashReply.DiscardUnknown(m)
}

var xxx_messageInfo_SplashReply proto.InternalMessageInfo

func (m *SplashReply) GetSplash() *Splash {
	if m != nil {
		return m.Splash
	}
	return nil
}

type SplashListReply struct {
	List                 []*Splash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SplashListReply) Reset()         { *m = SplashListReply{} }
func (m *SplashListReply) String() string { return proto.CompactTextString(m) }
func (*SplashListReply) ProtoMessage()    {}
func (*SplashListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586b0f90b73e367, []int{5}
}
func (m *SplashListReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplashListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SplashListReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SplashListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplashListReply.Merge(m, src)
}
func (m *SplashListReply) XXX_Size() int {
	return m.Size()
}
func (m *SplashListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SplashListReply.DiscardUnknown(m)
}

var xxx_messageInfo_SplashListReply proto.InternalMessageInfo

func (m *SplashListReply) GetList() []*Splash {
	if m != nil {
		return m.List
	}
	return nil
}

type Splash struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ImgName              string   `protobuf:"bytes,2,opt,name=img_name,proto3" json:"img_name"`
	Mode                 int64    `protobuf:"varint,3,opt,name=mode,proto3" json:"mode"`
	ImgUrl               string   `protobuf:"bytes,4,opt,name=img_url,proto3" json:"img_url"`
	ImgUrlNormal         string   `protobuf:"bytes,5,opt,name=img_url_normal,proto3" json:"img_url_normal"`
	ImgUrlFull           string   `protobuf:"bytes,6,opt,name=img_url_full,proto3" json:"img_url_full"`
	ImgUrlPad            string   `protobuf:"bytes,7,opt,name=img_url_pad,proto3" json:"img_url_pad"`
	LogoHide             int64    `protobuf:"varint,8,opt,name=logo_hide,proto3" json:"logo_hide"`
	LogoMode             int64    `protobuf:"varint,9,opt,name=logo_mode,proto3" json:"logo_mode"`
	LogoImgUrl           string   `protobuf:"bytes,10,opt,name=logo_img_url,proto3" json:"logo_img_url"`
	Ctime                int64    `protobuf:"varint,11,opt,name=ctime,proto3" json:"ctime"`
	Mtime                int64    `protobuf:"varint,12,opt,name=mtime,proto3" json:"mtime"`
	IsDeleted            bool     `protobuf:"varint,13,opt,name=is_deleted,proto3" json:"is_deleted"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Splash) Reset()         { *m = Splash{} }
func (m *Splash) String() string { return proto.CompactTextString(m) }
func (*Splash) ProtoMessage()    {}
func (*Splash) Descriptor() ([]byte, []int) {
	return fileDescriptor_6586b0f90b73e367, []int{6}
}
func (m *Splash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Splash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Splash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Splash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Splash.Merge(m, src)
}
func (m *Splash) XXX_Size() int {
	return m.Size()
}
func (m *Splash) XXX_DiscardUnknown() {
	xxx_messageInfo_Splash.DiscardUnknown(m)
}

var xxx_messageInfo_Splash proto.InternalMessageInfo

func (m *Splash) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Splash) GetImgName() string {
	if m != nil {
		return m.ImgName
	}
	return ""
}

func (m *Splash) GetMode() int64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Splash) GetImgUrl() string {
	if m != nil {
		return m.ImgUrl
	}
	return ""
}

func (m *Splash) GetImgUrlNormal() string {
	if m != nil {
		return m.ImgUrlNormal
	}
	return ""
}

func (m *Splash) GetImgUrlFull() string {
	if m != nil {
		return m.ImgUrlFull
	}
	return ""
}

func (m *Splash) GetImgUrlPad() string {
	if m != nil {
		return m.ImgUrlPad
	}
	return ""
}

func (m *Splash) GetLogoHide() int64 {
	if m != nil {
		return m.LogoHide
	}
	return 0
}

func (m *Splash) GetLogoMode() int64 {
	if m != nil {
		return m.LogoMode
	}
	return 0
}

func (m *Splash) GetLogoImgUrl() string {
	if m != nil {
		return m.LogoImgUrl
	}
	return ""
}

func (m *Splash) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Splash) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *Splash) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func init() {
	proto.RegisterType((*AddSplashReq)(nil), "collection.splash.v1.AddSplashReq")
	proto.RegisterType((*UpdateSplashReq)(nil), "collection.splash.v1.UpdateSplashReq")
	proto.RegisterType((*SplashReq)(nil), "collection.splash.v1.SplashReq")
	proto.RegisterType((*SetSplashReply)(nil), "collection.splash.v1.SetSplashReply")
	proto.RegisterType((*SplashReply)(nil), "collection.splash.v1.SplashReply")
	proto.RegisterType((*SplashListReply)(nil), "collection.splash.v1.SplashListReply")
	proto.RegisterType((*Splash)(nil), "collection.splash.v1.Splash")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/collection-splash/api/api.proto", fileDescriptor_6586b0f90b73e367)
}

var fileDescriptor_6586b0f90b73e367 = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0xae, 0x6c, 0xc7, 0xb1, 0x69, 0x27, 0x0e, 0x98, 0x26, 0x55, 0xdd, 0xd4, 0x74, 0x84, 0x06,
	0x30, 0x50, 0x58, 0x46, 0xd2, 0x22, 0x40, 0x7d, 0xe8, 0x8f, 0xfb, 0x73, 0x69, 0x9a, 0x2e, 0x18,
	0xf8, 0xb2, 0x7b, 0x30, 0x14, 0x8b, 0x51, 0x08, 0x50, 0xa6, 0x22, 0xcb, 0x59, 0xe4, 0x4d, 0xf6,
	0x11, 0xf6, 0x09, 0x16, 0xfb, 0x08, 0x7b, 0xdc, 0x27, 0x20, 0x16, 0xd9, 0x9b, 0x8e, 0x7e, 0x82,
	0x85, 0x48, 0xc9, 0x92, 0x9c, 0x5f, 0x24, 0x07, 0x49, 0x9c, 0x99, 0xef, 0xfb, 0x88, 0x19, 0xcd,
	0x90, 0xe0, 0xd0, 0xe1, 0x5d, 0xc7, 0x0a, 0xc8, 0x6b, 0xeb, 0xaa, 0x67, 0x79, 0x5e, 0xf4, 0x74,
	0xa7, 0x97, 0x7e, 0x6f, 0xcc, 0x19, 0x23, 0xe3, 0x80, 0xf2, 0x49, 0x77, 0xea, 0x31, 0x6b, 0x7a,
	0xde, 0xb3, 0x3c, 0x1a, 0x3d, 0xa6, 0xe7, 0xf3, 0x80, 0xc3, 0xaf, 0x53, 0x80, 0xa9, 0x00, 0xe6,
	0xe5, 0x7e, 0xb3, 0xeb, 0xd0, 0xe0, 0x7c, 0x76, 0x6a, 0x8e, 0xb9, 0xdb, 0x73, 0xb8, 0xc3, 0x7b,
	0x12, 0x7c, 0x3a, 0x3b, 0x93, 0x96, 0x34, 0xe4, 0x4a, 0x89, 0x34, 0xbf, 0x73, 0x38, 0x77, 0x18,
	0x49, 0x51, 0xc4, 0xf5, 0x82, 0xab, 0x38, 0xb8, 0x13, 0x07, 0xe5, 0xbe, 0x93, 0x09, 0x0f, 0xac,
	0x68, 0xb3, 0xa9, 0x8a, 0x1a, 0x73, 0x0d, 0xd4, 0xff, 0xb0, 0xed, 0x13, 0xb9, 0x35, 0x26, 0x17,
	0xd0, 0x04, 0x15, 0xea, 0x3a, 0xa3, 0x89, 0xe5, 0x12, 0x5d, 0x6b, 0x6b, 0x9d, 0xea, 0x60, 0x73,
	0x2e, 0x50, 0xe3, 0x8c, 0xfb, 0x6e, 0xdf, 0x48, 0x22, 0x06, 0x5e, 0xa5, 0xae, 0x73, 0x6c, 0xb9,
	0x04, 0xfe, 0x06, 0xd6, 0x23, 0xef, 0xcc, 0x67, 0xa3, 0x09, 0xf7, 0x5d, 0x8b, 0xe9, 0x05, 0xc9,
	0xfa, 0x76, 0x2e, 0xd0, 0x56, 0xca, 0x4a, 0xe3, 0x06, 0xae, 0x53, 0xd7, 0x19, 0xfa, 0xec, 0x58,
	0x9a, 0xf0, 0x17, 0x50, 0x4f, 0x00, 0x67, 0x33, 0xc6, 0xf4, 0xa2, 0xa4, 0x7f, 0x33, 0x17, 0x68,
	0x33, 0x4f, 0x8f, 0xa2, 0x06, 0x06, 0x8a, 0xfc, 0xcf, 0x8c, 0x31, 0x78, 0x08, 0x6a, 0x49, 0xd0,
	0xb3, 0x6c, 0xbd, 0x24, 0x99, 0xdb, 0x73, 0x81, 0x60, 0x9e, 0xe9, 0x59, 0xb6, 0x81, 0xab, 0x8a,
	0xf8, 0xc2, 0xb2, 0x8d, 0xb7, 0x05, 0xd0, 0x18, 0x7a, 0xb6, 0x15, 0x90, 0x34, 0xef, 0x7d, 0x50,
	0xa0, 0xb6, 0xcc, 0xb8, 0x38, 0xd8, 0x9d, 0x0b, 0xf4, 0x7d, 0x2c, 0x61, 0x1b, 0xed, 0x4b, 0x8b,
	0xd1, 0x08, 0xdc, 0x37, 0x7c, 0x72, 0x31, 0xa3, 0x3e, 0xb1, 0x0d, 0x5c, 0xa0, 0x76, 0xae, 0x54,
	0x85, 0x27, 0x95, 0xaa, 0xf8, 0xbc, 0x52, 0x95, 0x9e, 0x5c, 0xaa, 0x95, 0xc7, 0x96, 0xea, 0x57,
	0x50, 0x7d, 0x4e, 0x8d, 0x8c, 0x0e, 0x58, 0x3f, 0x21, 0x41, 0x22, 0xe1, 0xb1, 0x2b, 0xb8, 0x9d,
	0x11, 0x29, 0x87, 0x02, 0x15, 0xa8, 0x2d, 0x91, 0xff, 0x83, 0x5a, 0x16, 0xf6, 0x3b, 0x28, 0xab,
	0x79, 0x90, 0xd0, 0xda, 0xc1, 0x8e, 0x79, 0xdb, 0xa4, 0x98, 0x8a, 0x32, 0x00, 0xa1, 0x40, 0x31,
	0x1e, 0xc7, 0x5f, 0xe3, 0x3f, 0xd0, 0x50, 0xd1, 0x23, 0x3a, 0x0d, 0x94, 0x68, 0x1f, 0x94, 0x18,
	0x9d, 0x06, 0xba, 0xd6, 0x2e, 0x3e, 0x28, 0x59, 0x09, 0x05, 0x92, 0x68, 0x2c, 0xdf, 0xc6, 0xbb,
	0x12, 0x28, 0xab, 0xd0, 0x5d, 0x29, 0xc0, 0xce, 0x8d, 0x86, 0xa8, 0x87, 0x02, 0x2d, 0x7c, 0x78,
	0xb1, 0x82, 0x3b, 0xa0, 0xe4, 0x72, 0x9b, 0xc8, 0x06, 0x28, 0xaa, 0xad, 0x22, 0x1b, 0xcb, 0x37,
	0xdc, 0x03, 0xab, 0xf1, 0xff, 0x88, 0x7f, 0x71, 0x2d, 0x14, 0x28, 0x71, 0xe1, 0x64, 0x01, 0xfb,
	0x37, 0xfa, 0x49, 0xfd, 0x56, 0x18, 0x0a, 0xb4, 0x14, 0xc1, 0x4b, 0x36, 0xfc, 0x79, 0xa9, 0x95,
	0xca, 0x92, 0xb9, 0x11, 0x0a, 0x94, 0xf3, 0xe3, 0x9c, 0x05, 0xf7, 0xf3, 0x5d, 0xb4, 0x2a, 0x49,
	0x8d, 0x50, 0xa0, 0xac, 0x1b, 0x67, 0x0d, 0xf8, 0x23, 0xa8, 0x32, 0xee, 0xf0, 0xd1, 0x39, 0xb5,
	0x89, 0x5e, 0x91, 0xe9, 0xae, 0x85, 0x02, 0xa5, 0x4e, 0x9c, 0x2e, 0x17, 0x60, 0x59, 0x9b, 0xea,
	0x12, 0x58, 0x16, 0x28, 0x5d, 0x46, 0x29, 0x48, 0x23, 0x29, 0x15, 0x48, 0x53, 0xc8, 0xfa, 0x71,
	0xce, 0x82, 0x08, 0xac, 0x8c, 0x03, 0xea, 0x12, 0xbd, 0x26, 0xe5, 0xab, 0xa1, 0x40, 0xca, 0x81,
	0xd5, 0x27, 0x02, 0xb8, 0x12, 0x50, 0x4f, 0x01, 0xae, 0x02, 0xc8, 0x0f, 0x34, 0x01, 0xa0, 0xd3,
	0x91, 0x4d, 0x18, 0x09, 0x88, 0xad, 0xaf, 0xb5, 0xb5, 0x4e, 0x65, 0xb0, 0x1e, 0x0a, 0x94, 0xf1,
	0xe2, 0xcc, 0xfa, 0xe0, 0x7d, 0x11, 0x6c, 0xfc, 0xb9, 0x68, 0xb4, 0xb8, 0x85, 0x86, 0xa0, 0xba,
	0x38, 0x76, 0xa1, 0x71, 0x7b, 0x23, 0x66, 0xcf, 0xe5, 0xe6, 0x0f, 0x77, 0x34, 0x6b, 0x7e, 0xb8,
	0x5e, 0x81, 0x7a, 0xf6, 0x60, 0x83, 0x7b, 0xb7, 0xb3, 0x96, 0x0e, 0xbf, 0x47, 0x8a, 0x0f, 0x41,
	0xfd, 0x2f, 0x99, 0x53, 0x2c, 0x8e, 0xee, 0x9b, 0x9f, 0xc7, 0xcb, 0x1e, 0x2d, 0xe6, 0xea, 0x41,
	0xc1, 0xdd, 0xfb, 0x01, 0x91, 0xda, 0xbf, 0x00, 0xa4, 0x53, 0x0f, 0xb7, 0x4d, 0x75, 0xfb, 0x99,
	0xc9, 0xd5, 0x68, 0xfe, 0x1d, 0x5d, 0x8d, 0xcd, 0xbd, 0xfb, 0x84, 0x16, 0xe7, 0xc5, 0x60, 0xeb,
	0xc3, 0x75, 0x4b, 0xfb, 0x78, 0xdd, 0xd2, 0x3e, 0x5d, 0xb7, 0xb4, 0x37, 0x9f, 0x5b, 0x5f, 0xbd,
	0x2c, 0x5a, 0x1e, 0x3d, 0x2d, 0x4b, 0xb5, 0x9f, 0xbe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x65, 0xde,
	0x8d, 0xef, 0xf5, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectionSplashClient is the client API for CollectionSplash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectionSplashClient interface {
	AddSplash(ctx context.Context, in *AddSplashReq, opts ...grpc.CallOption) (*SetSplashReply, error)
	UpdateSplash(ctx context.Context, in *UpdateSplashReq, opts ...grpc.CallOption) (*SetSplashReply, error)
	DeleteSplash(ctx context.Context, in *SplashReq, opts ...grpc.CallOption) (*SetSplashReply, error)
	Splash(ctx context.Context, in *SplashReq, opts ...grpc.CallOption) (*SplashReply, error)
	SplashList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SplashListReply, error)
}

type collectionSplashClient struct {
	cc *grpc.ClientConn
}

func NewCollectionSplashClient(cc *grpc.ClientConn) CollectionSplashClient {
	return &collectionSplashClient{cc}
}

func (c *collectionSplashClient) AddSplash(ctx context.Context, in *AddSplashReq, opts ...grpc.CallOption) (*SetSplashReply, error) {
	out := new(SetSplashReply)
	err := c.cc.Invoke(ctx, "/collection.splash.v1.CollectionSplash/AddSplash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSplashClient) UpdateSplash(ctx context.Context, in *UpdateSplashReq, opts ...grpc.CallOption) (*SetSplashReply, error) {
	out := new(SetSplashReply)
	err := c.cc.Invoke(ctx, "/collection.splash.v1.CollectionSplash/UpdateSplash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSplashClient) DeleteSplash(ctx context.Context, in *SplashReq, opts ...grpc.CallOption) (*SetSplashReply, error) {
	out := new(SetSplashReply)
	err := c.cc.Invoke(ctx, "/collection.splash.v1.CollectionSplash/DeleteSplash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSplashClient) Splash(ctx context.Context, in *SplashReq, opts ...grpc.CallOption) (*SplashReply, error) {
	out := new(SplashReply)
	err := c.cc.Invoke(ctx, "/collection.splash.v1.CollectionSplash/Splash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSplashClient) SplashList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SplashListReply, error) {
	out := new(SplashListReply)
	err := c.cc.Invoke(ctx, "/collection.splash.v1.CollectionSplash/SplashList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionSplashServer is the server API for CollectionSplash service.
type CollectionSplashServer interface {
	AddSplash(context.Context, *AddSplashReq) (*SetSplashReply, error)
	UpdateSplash(context.Context, *UpdateSplashReq) (*SetSplashReply, error)
	DeleteSplash(context.Context, *SplashReq) (*SetSplashReply, error)
	Splash(context.Context, *SplashReq) (*SplashReply, error)
	SplashList(context.Context, *empty.Empty) (*SplashListReply, error)
}

// UnimplementedCollectionSplashServer can be embedded to have forward compatible implementations.
type UnimplementedCollectionSplashServer struct {
}

func (*UnimplementedCollectionSplashServer) AddSplash(ctx context.Context, req *AddSplashReq) (*SetSplashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSplash not implemented")
}
func (*UnimplementedCollectionSplashServer) UpdateSplash(ctx context.Context, req *UpdateSplashReq) (*SetSplashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSplash not implemented")
}
func (*UnimplementedCollectionSplashServer) DeleteSplash(ctx context.Context, req *SplashReq) (*SetSplashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSplash not implemented")
}
func (*UnimplementedCollectionSplashServer) Splash(ctx context.Context, req *SplashReq) (*SplashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Splash not implemented")
}
func (*UnimplementedCollectionSplashServer) SplashList(ctx context.Context, req *empty.Empty) (*SplashListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplashList not implemented")
}

func RegisterCollectionSplashServer(s *grpc.Server, srv CollectionSplashServer) {
	s.RegisterService(&_CollectionSplash_serviceDesc, srv)
}

func _CollectionSplash_AddSplash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSplashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSplashServer).AddSplash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.splash.v1.CollectionSplash/AddSplash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSplashServer).AddSplash(ctx, req.(*AddSplashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSplash_UpdateSplash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSplashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSplashServer).UpdateSplash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.splash.v1.CollectionSplash/UpdateSplash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSplashServer).UpdateSplash(ctx, req.(*UpdateSplashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSplash_DeleteSplash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSplashServer).DeleteSplash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.splash.v1.CollectionSplash/DeleteSplash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSplashServer).DeleteSplash(ctx, req.(*SplashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSplash_Splash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSplashServer).Splash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.splash.v1.CollectionSplash/Splash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSplashServer).Splash(ctx, req.(*SplashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSplash_SplashList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSplashServer).SplashList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collection.splash.v1.CollectionSplash/SplashList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSplashServer).SplashList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectionSplash_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collection.splash.v1.CollectionSplash",
	HandlerType: (*CollectionSplashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSplash",
			Handler:    _CollectionSplash_AddSplash_Handler,
		},
		{
			MethodName: "UpdateSplash",
			Handler:    _CollectionSplash_UpdateSplash_Handler,
		},
		{
			MethodName: "DeleteSplash",
			Handler:    _CollectionSplash_DeleteSplash_Handler,
		},
		{
			MethodName: "Splash",
			Handler:    _CollectionSplash_Splash_Handler,
		},
		{
			MethodName: "SplashList",
			Handler:    _CollectionSplash_SplashList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-gateway/app/app-svr/collection-splash/api/api.proto",
}

func (m *AddSplashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSplashReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddSplashReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImgUrlPad) > 0 {
		i -= len(m.ImgUrlPad)
		copy(dAtA[i:], m.ImgUrlPad)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlPad)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ImgUrlFull) > 0 {
		i -= len(m.ImgUrlFull)
		copy(dAtA[i:], m.ImgUrlFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlFull)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImgUrlNormal) > 0 {
		i -= len(m.ImgUrlNormal)
		copy(dAtA[i:], m.ImgUrlNormal)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlNormal)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImgName) > 0 {
		i -= len(m.ImgName)
		copy(dAtA[i:], m.ImgName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSplashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSplashReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSplashReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImgUrlPad) > 0 {
		i -= len(m.ImgUrlPad)
		copy(dAtA[i:], m.ImgUrlPad)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlPad)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImgUrlFull) > 0 {
		i -= len(m.ImgUrlFull)
		copy(dAtA[i:], m.ImgUrlFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlFull)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ImgUrlNormal) > 0 {
		i -= len(m.ImgUrlNormal)
		copy(dAtA[i:], m.ImgUrlNormal)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlNormal)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImgName) > 0 {
		i -= len(m.ImgName)
		copy(dAtA[i:], m.ImgName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SplashReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplashReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplashReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetSplashReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSplashReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSplashReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SplashReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplashReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplashReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Splash != nil {
		{
			size, err := m.Splash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SplashListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplashListReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SplashListReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Splash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Splash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Splash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Mtime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
		i--
		dAtA[i] = 0x60
	}
	if m.Ctime != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.LogoImgUrl) > 0 {
		i -= len(m.LogoImgUrl)
		copy(dAtA[i:], m.LogoImgUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LogoImgUrl)))
		i--
		dAtA[i] = 0x52
	}
	if m.LogoMode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LogoMode))
		i--
		dAtA[i] = 0x48
	}
	if m.LogoHide != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LogoHide))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ImgUrlPad) > 0 {
		i -= len(m.ImgUrlPad)
		copy(dAtA[i:], m.ImgUrlPad)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlPad)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ImgUrlFull) > 0 {
		i -= len(m.ImgUrlFull)
		copy(dAtA[i:], m.ImgUrlFull)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlFull)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ImgUrlNormal) > 0 {
		i -= len(m.ImgUrlNormal)
		copy(dAtA[i:], m.ImgUrlNormal)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrlNormal)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImgUrl) > 0 {
		i -= len(m.ImgUrl)
		copy(dAtA[i:], m.ImgUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrl)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ImgName) > 0 {
		i -= len(m.ImgName)
		copy(dAtA[i:], m.ImgName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddSplashReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImgName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlNormal)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlFull)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlPad)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSplashReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ImgName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlNormal)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlFull)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlPad)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SplashReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSplashReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SplashReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Splash != nil {
		l = m.Splash.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SplashListReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Splash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.ImgName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovApi(uint64(m.Mode))
	}
	l = len(m.ImgUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlNormal)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlFull)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgUrlPad)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.LogoHide != 0 {
		n += 1 + sovApi(uint64(m.LogoHide))
	}
	if m.LogoMode != 0 {
		n += 1 + sovApi(uint64(m.LogoMode))
	}
	l = len(m.LogoImgUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.IsDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddSplashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSplashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSplashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlNormal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlNormal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlPad", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlPad = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSplashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSplashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSplashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlNormal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlNormal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlPad", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlPad = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplashReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplashReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplashReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSplashReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSplashReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSplashReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplashReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplashReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplashReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Splash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Splash == nil {
				m.Splash = &Splash{}
			}
			if err := m.Splash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplashListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplashListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplashListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Splash{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Splash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Splash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Splash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlNormal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlNormal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlFull", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlFull = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrlPad", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrlPad = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoHide", wireType)
			}
			m.LogoHide = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoHide |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoMode", wireType)
			}
			m.LogoMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogoMode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
