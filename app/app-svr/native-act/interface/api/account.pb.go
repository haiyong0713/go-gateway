// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-gateway/app/app-svr/native-act/interface/api/account.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 官方认证状态
type OfficialInfo struct {
	// 认证角色（0 未认证，1 UP主认证，2 身份认证，3 企业认证，4 政府认证，5 媒体认证，6 其他认证，7 垂直领域认证）
	Role int32 `protobuf:"varint,1,opt,name=role,proto3" json:"role,omitempty"`
	// 认证称号
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// 认证后缀
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// 组件格式（12 推荐用户-横卡，26 推荐用户-竖卡）
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialInfo) Reset()         { *m = OfficialInfo{} }
func (m *OfficialInfo) String() string { return proto.CompactTextString(m) }
func (*OfficialInfo) ProtoMessage()    {}
func (*OfficialInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d899724c83f7d3, []int{0}
}
func (m *OfficialInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfficialInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialInfo.Merge(m, src)
}
func (m *OfficialInfo) XXX_Size() int {
	return m.Size()
}
func (m *OfficialInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialInfo proto.InternalMessageInfo

func (m *OfficialInfo) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *OfficialInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OfficialInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *OfficialInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type VipInfo struct {
	Type       int32     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Status     int32     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	DueDate    int64     `protobuf:"varint,3,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	VipPayType int32     `protobuf:"varint,4,opt,name=vip_pay_type,json=vipPayType,proto3" json:"vip_pay_type,omitempty"`
	ThemeType  int32     `protobuf:"varint,5,opt,name=theme_type,json=themeType,proto3" json:"theme_type,omitempty"`
	Label      *VipLabel `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// 大会员角标，0：无角标，1：粉色大会员角标，2：绿色小会员角标
	AvatarSubscript int32 `protobuf:"varint,7,opt,name=avatar_subscript,json=avatarSubscript,proto3" json:"avatar_subscript,omitempty"`
	// 昵称色值，可能为空，色值示例：#FFFB9E60
	NicknameColor string `protobuf:"bytes,8,opt,name=nickname_color,json=nicknameColor,proto3" json:"nickname_color,omitempty"`
	Role          int64  `protobuf:"varint,9,opt,name=role,proto3" json:"role,omitempty"`
	// 大会员角标链接 仅pc、h5使用
	AvatarSubscriptUrl   string   `protobuf:"bytes,10,opt,name=avatar_subscript_url,json=avatarSubscriptUrl,proto3" json:"avatar_subscript_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipInfo) Reset()         { *m = VipInfo{} }
func (m *VipInfo) String() string { return proto.CompactTextString(m) }
func (*VipInfo) ProtoMessage()    {}
func (*VipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d899724c83f7d3, []int{1}
}
func (m *VipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipInfo.Merge(m, src)
}
func (m *VipInfo) XXX_Size() int {
	return m.Size()
}
func (m *VipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VipInfo proto.InternalMessageInfo

func (m *VipInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VipInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *VipInfo) GetDueDate() int64 {
	if m != nil {
		return m.DueDate
	}
	return 0
}

func (m *VipInfo) GetVipPayType() int32 {
	if m != nil {
		return m.VipPayType
	}
	return 0
}

func (m *VipInfo) GetThemeType() int32 {
	if m != nil {
		return m.ThemeType
	}
	return 0
}

func (m *VipInfo) GetLabel() *VipLabel {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *VipInfo) GetAvatarSubscript() int32 {
	if m != nil {
		return m.AvatarSubscript
	}
	return 0
}

func (m *VipInfo) GetNicknameColor() string {
	if m != nil {
		return m.NicknameColor
	}
	return ""
}

func (m *VipInfo) GetRole() int64 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *VipInfo) GetAvatarSubscriptUrl() string {
	if m != nil {
		return m.AvatarSubscriptUrl
	}
	return ""
}

type VipLabel struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// 文本值
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// 对应颜色类型，在mod资源中通过：$app_theme_type.$label_theme获取对应标签的颜色配置信息
	LabelTheme string `protobuf:"bytes,4,opt,name=label_theme,json=labelTheme,proto3" json:"label_theme,omitempty"`
	// 文本颜色, 仅pc、h5使用
	TextColor string `protobuf:"bytes,5,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`
	// 背景样式：1:填充 2:描边 3:填充 + 描边 4:背景不填充 + 背景不描边 仅pc、h5使用
	BgStyle int32 `protobuf:"varint,6,opt,name=bg_style,json=bgStyle,proto3" json:"bg_style,omitempty"`
	// 背景色：#FFFB9E60 仅pc、h5使用
	BgColor string `protobuf:"bytes,7,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	// 边框：#FFFB9E60 仅pc、h5使用
	BorderColor          string   `protobuf:"bytes,8,opt,name=border_color,json=borderColor,proto3" json:"border_color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipLabel) Reset()         { *m = VipLabel{} }
func (m *VipLabel) String() string { return proto.CompactTextString(m) }
func (*VipLabel) ProtoMessage()    {}
func (*VipLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_56d899724c83f7d3, []int{2}
}
func (m *VipLabel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VipLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VipLabel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VipLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipLabel.Merge(m, src)
}
func (m *VipLabel) XXX_Size() int {
	return m.Size()
}
func (m *VipLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_VipLabel.DiscardUnknown(m)
}

var xxx_messageInfo_VipLabel proto.InternalMessageInfo

func (m *VipLabel) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *VipLabel) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *VipLabel) GetLabelTheme() string {
	if m != nil {
		return m.LabelTheme
	}
	return ""
}

func (m *VipLabel) GetTextColor() string {
	if m != nil {
		return m.TextColor
	}
	return ""
}

func (m *VipLabel) GetBgStyle() int32 {
	if m != nil {
		return m.BgStyle
	}
	return 0
}

func (m *VipLabel) GetBgColor() string {
	if m != nil {
		return m.BgColor
	}
	return ""
}

func (m *VipLabel) GetBorderColor() string {
	if m != nil {
		return m.BorderColor
	}
	return ""
}

func init() {
	proto.RegisterType((*OfficialInfo)(nil), "bilibili.app.nativeact.v1.OfficialInfo")
	proto.RegisterType((*VipInfo)(nil), "bilibili.app.nativeact.v1.VipInfo")
	proto.RegisterType((*VipLabel)(nil), "bilibili.app.nativeact.v1.VipLabel")
}

func init() {
	proto.RegisterFile("go-gateway/app/app-svr/native-act/interface/api/account.proto", fileDescriptor_56d899724c83f7d3)
}

var fileDescriptor_56d899724c83f7d3 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x25, 0xbb, 0x9b, 0xa6, 0x71, 0xcb, 0x87, 0xa2, 0x15, 0x4a, 0x91, 0x28, 0xa5, 0x08, 0xa9,
	0x1c, 0x9a, 0xf0, 0x71, 0xe2, 0xc0, 0x05, 0xb8, 0x20, 0x21, 0x81, 0xb2, 0xcb, 0x1e, 0xb8, 0x84,
	0x89, 0xeb, 0xa6, 0x16, 0x69, 0x6c, 0x39, 0x93, 0xb0, 0xfd, 0x27, 0xfc, 0xa4, 0x95, 0xb8, 0xf0,
	0x13, 0xa0, 0xf0, 0x43, 0x90, 0xc7, 0x2d, 0x1f, 0x2b, 0x71, 0xb0, 0x34, 0xf3, 0x9e, 0xdf, 0x9b,
	0xf1, 0x4b, 0xd8, 0xb3, 0x52, 0xcd, 0x4b, 0x40, 0xf1, 0x09, 0x36, 0x29, 0x68, 0x6d, 0xcf, 0xbc,
	0xe9, 0x4c, 0x5a, 0x03, 0xca, 0x4e, 0xcc, 0x81, 0x63, 0x2a, 0x6b, 0x14, 0x66, 0x09, 0x5c, 0xa4,
	0xa0, 0x65, 0x0a, 0x9c, 0xab, 0xb6, 0xc6, 0x44, 0x1b, 0x85, 0x2a, 0x1a, 0x15, 0xb2, 0x92, 0xf6,
	0x24, 0xa0, 0x75, 0xe2, 0x44, 0xc0, 0x31, 0xe9, 0x1e, 0xdd, 0x9a, 0x97, 0x12, 0x57, 0x6d, 0x91,
	0x70, 0xb5, 0x4e, 0x4b, 0x55, 0xaa, 0x94, 0x14, 0x45, 0xbb, 0xa4, 0x8e, 0x1a, 0xaa, 0x9c, 0xd3,
	0xf4, 0x03, 0x1b, 0xbe, 0x59, 0x2e, 0x25, 0x97, 0x50, 0xbd, 0xaa, 0x97, 0x2a, 0x8a, 0xd8, 0x91,
	0x51, 0x95, 0x88, 0xbd, 0x89, 0x37, 0xf3, 0x33, 0xaa, 0xa3, 0x63, 0xe6, 0xa3, 0xc4, 0x4a, 0xc4,
	0x07, 0x13, 0x6f, 0x16, 0x66, 0xae, 0xb1, 0x37, 0x17, 0xa2, 0xe1, 0xf1, 0x21, 0x81, 0x54, 0x5b,
	0x0c, 0x37, 0x5a, 0xc4, 0x47, 0x4e, 0x6d, 0xeb, 0xe9, 0xcf, 0x03, 0x16, 0x9c, 0x49, 0xbd, 0x77,
	0x27, 0xde, 0xfb, 0xc3, 0x47, 0x37, 0x59, 0xaf, 0x41, 0xc0, 0xb6, 0x21, 0x7b, 0x3f, 0xdb, 0x75,
	0xd1, 0x88, 0xf5, 0x17, 0xad, 0xc8, 0x17, 0x80, 0x82, 0x66, 0x1c, 0x66, 0xc1, 0xa2, 0x15, 0x2f,
	0x01, 0x45, 0x34, 0x61, 0xc3, 0x4e, 0xea, 0x5c, 0xc3, 0x26, 0xff, 0x6b, 0x1c, 0xeb, 0xa4, 0x7e,
	0x0b, 0x9b, 0x53, 0x6b, 0x7a, 0x9b, 0x31, 0x5c, 0x89, 0xb5, 0x70, 0xbc, 0x4f, 0x7c, 0x48, 0x08,
	0xd1, 0x4f, 0x99, 0x5f, 0x41, 0x21, 0xaa, 0xb8, 0x37, 0xf1, 0x66, 0x83, 0xc7, 0xf7, 0x92, 0xff,
	0xe6, 0x99, 0x9c, 0x49, 0xfd, 0xda, 0x5e, 0xcd, 0x9c, 0x22, 0x7a, 0xc0, 0x6e, 0x40, 0x07, 0x08,
	0x26, 0x6f, 0xda, 0xa2, 0xe1, 0x46, 0x6a, 0x8c, 0x03, 0xf2, 0xbf, 0xee, 0xf0, 0x93, 0x3d, 0x1c,
	0xdd, 0x67, 0xd7, 0x6a, 0xc9, 0x3f, 0xd6, 0xb0, 0x16, 0x39, 0x57, 0x95, 0x32, 0x71, 0x9f, 0xb2,
	0xba, 0xba, 0x47, 0x5f, 0x58, 0xf0, 0x77, 0xe4, 0x21, 0x3d, 0xd2, 0x45, 0xfe, 0x90, 0x1d, 0x5f,
	0x9e, 0x92, 0xb7, 0xa6, 0x8a, 0x19, 0x19, 0x44, 0x97, 0x26, 0xbd, 0x33, 0xd5, 0xf4, 0x8b, 0xc7,
	0xfa, 0xfb, 0x5d, 0xad, 0xa5, 0x06, 0x5c, 0x51, 0xce, 0x61, 0x46, 0x35, 0x65, 0x2f, 0xce, 0x71,
	0xff, 0xbd, 0x6c, 0x1d, 0xdd, 0x61, 0x03, 0x7a, 0x55, 0x4e, 0xd1, 0x50, 0x8e, 0x61, 0xc6, 0x08,
	0x3a, 0xb5, 0x08, 0xe5, 0x28, 0xce, 0x71, 0xb7, 0xbe, 0x4f, 0x7c, 0x68, 0x11, 0xb7, 0xfa, 0x88,
	0xf5, 0x8b, 0x32, 0x6f, 0x70, 0x53, 0x09, 0x8a, 0xd2, 0xcf, 0x82, 0xa2, 0x3c, 0xb1, 0xed, 0x8e,
	0x72, 0xba, 0x80, 0x74, 0x41, 0x51, 0x3a, 0xd5, 0x5d, 0x36, 0x2c, 0x94, 0x59, 0x08, 0xf3, 0x4f,
	0x2a, 0x03, 0x87, 0xd1, 0x95, 0xe7, 0xa3, 0x8b, 0xef, 0x63, 0xef, 0x62, 0x3b, 0xf6, 0xbe, 0x6e,
	0xc7, 0xde, 0xb7, 0xed, 0xd8, 0xfb, 0xfc, 0x63, 0x7c, 0xe5, 0xfd, 0x21, 0x68, 0x59, 0xf4, 0xe8,
	0xc7, 0x7d, 0xf2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x67, 0x46, 0x2b, 0x67, 0x43, 0x03, 0x00, 0x00,
}

func (m *OfficialInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfficialInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Role != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AvatarSubscriptUrl) > 0 {
		i -= len(m.AvatarSubscriptUrl)
		copy(dAtA[i:], m.AvatarSubscriptUrl)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.AvatarSubscriptUrl)))
		i--
		dAtA[i] = 0x52
	}
	if m.Role != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x48
	}
	if len(m.NicknameColor) > 0 {
		i -= len(m.NicknameColor)
		copy(dAtA[i:], m.NicknameColor)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.NicknameColor)))
		i--
		dAtA[i] = 0x42
	}
	if m.AvatarSubscript != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.AvatarSubscript))
		i--
		dAtA[i] = 0x38
	}
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ThemeType != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.ThemeType))
		i--
		dAtA[i] = 0x28
	}
	if m.VipPayType != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.VipPayType))
		i--
		dAtA[i] = 0x20
	}
	if m.DueDate != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.DueDate))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VipLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipLabel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VipLabel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BorderColor) > 0 {
		i -= len(m.BorderColor)
		copy(dAtA[i:], m.BorderColor)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.BorderColor)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BgColor) > 0 {
		i -= len(m.BgColor)
		copy(dAtA[i:], m.BgColor)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.BgColor)))
		i--
		dAtA[i] = 0x3a
	}
	if m.BgStyle != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.BgStyle))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TextColor) > 0 {
		i -= len(m.TextColor)
		copy(dAtA[i:], m.TextColor)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.TextColor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LabelTheme) > 0 {
		i -= len(m.LabelTheme)
		copy(dAtA[i:], m.LabelTheme)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.LabelTheme)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OfficialInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovAccount(uint64(m.Role))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAccount(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAccount(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovAccount(uint64(m.Status))
	}
	if m.DueDate != 0 {
		n += 1 + sovAccount(uint64(m.DueDate))
	}
	if m.VipPayType != 0 {
		n += 1 + sovAccount(uint64(m.VipPayType))
	}
	if m.ThemeType != 0 {
		n += 1 + sovAccount(uint64(m.ThemeType))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.AvatarSubscript != 0 {
		n += 1 + sovAccount(uint64(m.AvatarSubscript))
	}
	l = len(m.NicknameColor)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovAccount(uint64(m.Role))
	}
	l = len(m.AvatarSubscriptUrl)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VipLabel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.LabelTheme)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.TextColor)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.BgStyle != 0 {
		n += 1 + sovAccount(uint64(m.BgStyle))
	}
	l = len(m.BgColor)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.BorderColor)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccount(x uint64) (n int) {
	return sovAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OfficialInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			m.DueDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipPayType", wireType)
			}
			m.VipPayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipPayType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThemeType", wireType)
			}
			m.ThemeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThemeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &VipLabel{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarSubscript", wireType)
			}
			m.AvatarSubscript = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvatarSubscript |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicknameColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NicknameColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarSubscriptUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarSubscriptUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelTheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelTheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgStyle", wireType)
			}
			m.BgStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgStyle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorderColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorderColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccount = fmt.Errorf("proto: unexpected end of group")
)
