// Code generated by kratos tool btsgen. DO NOT EDIT.

/*
  Package kvstore is a generated cache proxy package.
  It is generated from:
  type _bts interface {
		// bts: -struct_name=KVStore -batch=2 -max_group=20 -batch_err=break -nullcache=&DummyMessage{HasData:false} -check_null_code=$.HasData==false
		UserPreferenceBytes(ctx context.Context, keys []string) (map[string]*DummyMessage, error)
	}
*/

package kvstore

import (
	"context"
	"sync"

	"go-common/library/cache"
	"go-common/library/sync/errgroup.v2"
)

var _ _bts

// UserPreferenceBytes get data from cache if miss will call source method, then add to cache.
func (d *KVStore) UserPreferenceBytes(c context.Context, keys []string) (res map[string]*DummyMessage, err error) {
	if len(keys) == 0 {
		return
	}
	addCache := true
	if res, err = d.CacheUserPreferenceBytes(c, keys); err != nil {
		addCache = false
		res = nil
		err = nil
	}
	var miss []string
	for _, key := range keys {
		if (res == nil) || (res[key] == nil) {
			miss = append(miss, key)
		}
	}
	cache.MetricHits.Add(float64(len(keys)-len(miss)), "bts:UserPreferenceBytes")
	for k, v := range res {
		if v.HasData == false {
			delete(res, k)
		}
	}
	missLen := len(miss)
	if missLen == 0 {
		return
	}
	missData := make(map[string]*DummyMessage, missLen)
	cache.MetricMisses.Add(float64(missLen), "bts:UserPreferenceBytes")
	var mutex sync.Mutex
	group := errgroup.WithCancel(c)
	if missLen > 20 {
		group.GOMAXPROCS(20)
	}
	var run = func(ms []string) {
		group.Go(func(ctx context.Context) (err error) {
			data, err := d.RawUserPreferenceBytes(ctx, ms)
			mutex.Lock()
			for k, v := range data {
				missData[k] = v
			}
			mutex.Unlock()
			return
		})
	}
	var (
		i int
		n = missLen / 2
	)
	for i = 0; i < n; i++ {
		run(miss[i*2 : (i+1)*2])
	}
	if len(miss[i*2:]) > 0 {
		run(miss[i*2:])
	}
	err = group.Wait()
	if res == nil {
		res = make(map[string]*DummyMessage, len(keys))
	}
	for k, v := range missData {
		res[k] = v
	}
	if err != nil {
		return
	}
	for _, key := range miss {
		if res[key] == nil {
			missData[key] = &DummyMessage{HasData: false}
		}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheUserPreferenceBytes(c, missData)
	})
	return
}
