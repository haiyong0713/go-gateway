// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: double.proto

package api

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	go_gateway_app_app_svr_app_card_interface_model "go-gateway/app/app-svr/app-card/interface/model"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DoubleCards struct {
	// Types that are valid to be assigned to Card:
	//	*DoubleCards_SmallCoverV2
	//	*DoubleCards_OnePicV2
	//	*DoubleCards_ThreePicV2
	Card                 isDoubleCards_Card `protobuf_oneof:"Card"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DoubleCards) Reset()         { *m = DoubleCards{} }
func (m *DoubleCards) String() string { return proto.CompactTextString(m) }
func (*DoubleCards) ProtoMessage()    {}
func (*DoubleCards) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{0}
}
func (m *DoubleCards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoubleCards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoubleCards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoubleCards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoubleCards.Merge(m, src)
}
func (m *DoubleCards) XXX_Size() int {
	return m.Size()
}
func (m *DoubleCards) XXX_DiscardUnknown() {
	xxx_messageInfo_DoubleCards.DiscardUnknown(m)
}

var xxx_messageInfo_DoubleCards proto.InternalMessageInfo

type isDoubleCards_Card interface {
	isDoubleCards_Card()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DoubleCards_SmallCoverV2 struct {
	SmallCoverV2 *SmallCoverV2 `protobuf:"bytes,1,opt,name=small_cover_v2,json=smallCoverV2,proto3,oneof" json:"small_cover_v2,omitempty"`
}
type DoubleCards_OnePicV2 struct {
	OnePicV2 *OnePicV2 `protobuf:"bytes,2,opt,name=one_pic_v2,json=onePicV2,proto3,oneof" json:"one_pic_v2,omitempty"`
}
type DoubleCards_ThreePicV2 struct {
	ThreePicV2 *ThreePicV2 `protobuf:"bytes,3,opt,name=three_pic_v2,json=threePicV2,proto3,oneof" json:"three_pic_v2,omitempty"`
}

func (*DoubleCards_SmallCoverV2) isDoubleCards_Card() {}
func (*DoubleCards_OnePicV2) isDoubleCards_Card()     {}
func (*DoubleCards_ThreePicV2) isDoubleCards_Card()   {}

func (m *DoubleCards) GetCard() isDoubleCards_Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *DoubleCards) GetSmallCoverV2() *SmallCoverV2 {
	if x, ok := m.GetCard().(*DoubleCards_SmallCoverV2); ok {
		return x.SmallCoverV2
	}
	return nil
}

func (m *DoubleCards) GetOnePicV2() *OnePicV2 {
	if x, ok := m.GetCard().(*DoubleCards_OnePicV2); ok {
		return x.OnePicV2
	}
	return nil
}

func (m *DoubleCards) GetThreePicV2() *ThreePicV2 {
	if x, ok := m.GetCard().(*DoubleCards_ThreePicV2); ok {
		return x.ThreePicV2
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DoubleCards) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DoubleCards_SmallCoverV2)(nil),
		(*DoubleCards_OnePicV2)(nil),
		(*DoubleCards_ThreePicV2)(nil),
	}
}

type SmallCoverV2 struct {
	*Base                     `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverGif                  string                                                     `protobuf:"bytes,2,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	CoverBlur                 go_gateway_app_app_svr_app_card_interface_model.BlurStatus `protobuf:"varint,3,opt,name=cover_blur,json=coverBlur,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.BlurStatus" json:"cover_blur,omitempty"`
	CoverLeftText_1           string                                                     `protobuf:"bytes,4,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1           go_gateway_app_app_svr_app_card_interface_model.Icon       `protobuf:"varint,5,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2           string                                                     `protobuf:"bytes,6,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2           go_gateway_app_app_svr_app_card_interface_model.Icon       `protobuf:"varint,7,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverRightText            string                                                     `protobuf:"bytes,8,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon            go_gateway_app_app_svr_app_card_interface_model.Icon       `protobuf:"varint,9,opt,name=cover_right_icon,json=coverRightIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string                                                     `protobuf:"bytes,10,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Subtitle                  string                                                     `protobuf:"bytes,11,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Badge                     string                                                     `protobuf:"bytes,12,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReason                string                                                     `protobuf:"bytes,13,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Desc                      string                                                     `protobuf:"bytes,14,opt,name=desc,proto3" json:"desc,omitempty"`
	Avatar                    *Avatar                                                    `protobuf:"bytes,15,opt,name=avatar,proto3" json:"avatar,omitempty"`
	OfficialIcon              go_gateway_app_app_svr_app_card_interface_model.Icon       `protobuf:"varint,16,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	CanPlay                   int32                                                      `protobuf:"varint,17,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	RcmdReasonStyle           *ReasonStyle                                               `protobuf:"bytes,18,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	RcmdReasonStyleV2         *ReasonStyle                                               `protobuf:"bytes,19,opt,name=rcmd_reason_style_v2,json=rcmdReasonStyleV2,proto3" json:"rcmd_reason_style_v2,omitempty"`
	LikeButton                *LikeButton                                                `protobuf:"bytes,20,opt,name=like_button,json=likeButton,proto3" json:"like_button,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                                   `json:"-"`
	XXX_unrecognized          []byte                                                     `json:"-"`
	XXX_sizecache             int32                                                      `json:"-"`
}

func (m *SmallCoverV2) Reset()         { *m = SmallCoverV2{} }
func (m *SmallCoverV2) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV2) ProtoMessage()    {}
func (*SmallCoverV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{1}
}
func (m *SmallCoverV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV2.Merge(m, src)
}
func (m *SmallCoverV2) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV2) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV2.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV2 proto.InternalMessageInfo

func (m *SmallCoverV2) GetCoverGif() string {
	if m != nil {
		return m.CoverGif
	}
	return ""
}

func (m *SmallCoverV2) GetCoverBlur() go_gateway_app_app_svr_app_card_interface_model.BlurStatus {
	if m != nil {
		return m.CoverBlur
	}
	return 0
}

func (m *SmallCoverV2) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *SmallCoverV2) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *SmallCoverV2) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *SmallCoverV2) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *SmallCoverV2) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *SmallCoverV2) GetCoverRightIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverRightIcon
	}
	return 0
}

func (m *SmallCoverV2) GetCoverRightBackgroundColor() string {
	if m != nil {
		return m.CoverRightBackgroundColor
	}
	return ""
}

func (m *SmallCoverV2) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *SmallCoverV2) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *SmallCoverV2) GetRcmdReason() string {
	if m != nil {
		return m.RcmdReason
	}
	return ""
}

func (m *SmallCoverV2) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *SmallCoverV2) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *SmallCoverV2) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

func (m *SmallCoverV2) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *SmallCoverV2) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

func (m *SmallCoverV2) GetRcmdReasonStyleV2() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyleV2
	}
	return nil
}

func (m *SmallCoverV2) GetLikeButton() *LikeButton {
	if m != nil {
		return m.LikeButton
	}
	return nil
}

type SmallCoverV3 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Avatar               *Avatar                                              `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CoverLeftText        string                                               `protobuf:"bytes,3,opt,name=cover_left_text,json=coverLeftText,proto3" json:"cover_left_text,omitempty"`
	CoverRightButton     *Button                                              `protobuf:"bytes,4,opt,name=cover_right_button,json=coverRightButton,proto3" json:"cover_right_button,omitempty"`
	RcmdReason           string                                               `protobuf:"bytes,5,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Desc                 string                                               `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	OfficialIcon         go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,7,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	CanPlay              int32                                                `protobuf:"varint,8,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	RcmdReasonStyle      *ReasonStyle                                         `protobuf:"bytes,9,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *SmallCoverV3) Reset()         { *m = SmallCoverV3{} }
func (m *SmallCoverV3) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV3) ProtoMessage()    {}
func (*SmallCoverV3) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{2}
}
func (m *SmallCoverV3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV3.Merge(m, src)
}
func (m *SmallCoverV3) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV3) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV3.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV3 proto.InternalMessageInfo

func (m *SmallCoverV3) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *SmallCoverV3) GetCoverLeftText() string {
	if m != nil {
		return m.CoverLeftText
	}
	return ""
}

func (m *SmallCoverV3) GetCoverRightButton() *Button {
	if m != nil {
		return m.CoverRightButton
	}
	return nil
}

func (m *SmallCoverV3) GetRcmdReason() string {
	if m != nil {
		return m.RcmdReason
	}
	return ""
}

func (m *SmallCoverV3) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *SmallCoverV3) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

func (m *SmallCoverV3) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *SmallCoverV3) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

type MiddleCoverV2 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Ratio                int32    `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Badge                string   `protobuf:"bytes,4,opt,name=badge,proto3" json:"badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MiddleCoverV2) Reset()         { *m = MiddleCoverV2{} }
func (m *MiddleCoverV2) String() string { return proto.CompactTextString(m) }
func (*MiddleCoverV2) ProtoMessage()    {}
func (*MiddleCoverV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{3}
}
func (m *MiddleCoverV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiddleCoverV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiddleCoverV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiddleCoverV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiddleCoverV2.Merge(m, src)
}
func (m *MiddleCoverV2) XXX_Size() int {
	return m.Size()
}
func (m *MiddleCoverV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MiddleCoverV2.DiscardUnknown(m)
}

var xxx_messageInfo_MiddleCoverV2 proto.InternalMessageInfo

func (m *MiddleCoverV2) GetRatio() int32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *MiddleCoverV2) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *MiddleCoverV2) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

type LargeCoverV2 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Avatar               *Avatar                                              `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Badge                string                                               `protobuf:"bytes,3,opt,name=badge,proto3" json:"badge,omitempty"`
	CoverRightButton     *Button                                              `protobuf:"bytes,4,opt,name=cover_right_button,json=coverRightButton,proto3" json:"cover_right_button,omitempty"`
	CoverLeftText_1      string                                               `protobuf:"bytes,5,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,6,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2      string                                               `protobuf:"bytes,7,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,8,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	RcmdReason           string                                               `protobuf:"bytes,9,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	OfficialIcon         go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,10,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	CanPlay              int32                                                `protobuf:"varint,11,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	RcmdReasonStyle      *ReasonStyle                                         `protobuf:"bytes,12,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	ShowTop              int32                                                `protobuf:"varint,13,opt,name=show_top,json=showTop,proto3" json:"show_top,omitempty"`
	ShowBottom           int32                                                `protobuf:"varint,14,opt,name=show_bottom,json=showBottom,proto3" json:"show_bottom,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *LargeCoverV2) Reset()         { *m = LargeCoverV2{} }
func (m *LargeCoverV2) String() string { return proto.CompactTextString(m) }
func (*LargeCoverV2) ProtoMessage()    {}
func (*LargeCoverV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{4}
}
func (m *LargeCoverV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LargeCoverV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LargeCoverV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LargeCoverV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LargeCoverV2.Merge(m, src)
}
func (m *LargeCoverV2) XXX_Size() int {
	return m.Size()
}
func (m *LargeCoverV2) XXX_DiscardUnknown() {
	xxx_messageInfo_LargeCoverV2.DiscardUnknown(m)
}

var xxx_messageInfo_LargeCoverV2 proto.InternalMessageInfo

func (m *LargeCoverV2) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *LargeCoverV2) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *LargeCoverV2) GetCoverRightButton() *Button {
	if m != nil {
		return m.CoverRightButton
	}
	return nil
}

func (m *LargeCoverV2) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *LargeCoverV2) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *LargeCoverV2) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *LargeCoverV2) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *LargeCoverV2) GetRcmdReason() string {
	if m != nil {
		return m.RcmdReason
	}
	return ""
}

func (m *LargeCoverV2) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

func (m *LargeCoverV2) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *LargeCoverV2) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

func (m *LargeCoverV2) GetShowTop() int32 {
	if m != nil {
		return m.ShowTop
	}
	return 0
}

func (m *LargeCoverV2) GetShowBottom() int32 {
	if m != nil {
		return m.ShowBottom
	}
	return 0
}

type ThreeItemV2 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	TitleIcon            go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,2,opt,name=title_icon,json=titleIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"title_icon,omitempty"`
	MoreUri              string                                               `protobuf:"bytes,3,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	MoreText             string                                               `protobuf:"bytes,4,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	Items                []*ThreeItemV2Item                                   `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ThreeItemV2) Reset()         { *m = ThreeItemV2{} }
func (m *ThreeItemV2) String() string { return proto.CompactTextString(m) }
func (*ThreeItemV2) ProtoMessage()    {}
func (*ThreeItemV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{5}
}
func (m *ThreeItemV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemV2.Merge(m, src)
}
func (m *ThreeItemV2) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemV2.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemV2 proto.InternalMessageInfo

func (m *ThreeItemV2) GetTitleIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.TitleIcon
	}
	return 0
}

func (m *ThreeItemV2) GetMoreUri() string {
	if m != nil {
		return m.MoreUri
	}
	return ""
}

func (m *ThreeItemV2) GetMoreText() string {
	if m != nil {
		return m.MoreText
	}
	return ""
}

func (m *ThreeItemV2) GetItems() []*ThreeItemV2Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type ThreeItemV2Item struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftIcon        go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,2,opt,name=cover_left_icon,json=coverLeftIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon,omitempty"`
	DescText_1           string                                               `protobuf:"bytes,3,opt,name=desc_text_1,json=descText1,proto3" json:"desc_text_1,omitempty"`
	DescIcon_1           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,4,opt,name=desc_icon_1,json=descIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"desc_icon_1,omitempty"`
	DescText_2           string                                               `protobuf:"bytes,5,opt,name=desc_text_2,json=descText2,proto3" json:"desc_text_2,omitempty"`
	DescIcon_2           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,6,opt,name=desc_icon_2,json=descIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"desc_icon_2,omitempty"`
	Badge                string                                               `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *ThreeItemV2Item) Reset()         { *m = ThreeItemV2Item{} }
func (m *ThreeItemV2Item) String() string { return proto.CompactTextString(m) }
func (*ThreeItemV2Item) ProtoMessage()    {}
func (*ThreeItemV2Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{6}
}
func (m *ThreeItemV2Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreeItemV2Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreeItemV2Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreeItemV2Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreeItemV2Item.Merge(m, src)
}
func (m *ThreeItemV2Item) XXX_Size() int {
	return m.Size()
}
func (m *ThreeItemV2Item) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreeItemV2Item.DiscardUnknown(m)
}

var xxx_messageInfo_ThreeItemV2Item proto.InternalMessageInfo

func (m *ThreeItemV2Item) GetCoverLeftIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon
	}
	return 0
}

func (m *ThreeItemV2Item) GetDescText_1() string {
	if m != nil {
		return m.DescText_1
	}
	return ""
}

func (m *ThreeItemV2Item) GetDescIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.DescIcon_1
	}
	return 0
}

func (m *ThreeItemV2Item) GetDescText_2() string {
	if m != nil {
		return m.DescText_2
	}
	return ""
}

func (m *ThreeItemV2Item) GetDescIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.DescIcon_2
	}
	return 0
}

func (m *ThreeItemV2Item) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

type SmallCoverV4 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverBadge           string                                               `protobuf:"bytes,2,opt,name=cover_badge,json=coverBadge,proto3" json:"cover_badge,omitempty"`
	Desc                 string                                               `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	TitleRightText       string                                               `protobuf:"bytes,4,opt,name=title_right_text,json=titleRightText,proto3" json:"title_right_text,omitempty"`
	TitleRightPic        go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=title_right_pic,json=titleRightPic,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"title_right_pic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *SmallCoverV4) Reset()         { *m = SmallCoverV4{} }
func (m *SmallCoverV4) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV4) ProtoMessage()    {}
func (*SmallCoverV4) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{7}
}
func (m *SmallCoverV4) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV4.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV4.Merge(m, src)
}
func (m *SmallCoverV4) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV4) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV4.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV4 proto.InternalMessageInfo

func (m *SmallCoverV4) GetCoverBadge() string {
	if m != nil {
		return m.CoverBadge
	}
	return ""
}

func (m *SmallCoverV4) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *SmallCoverV4) GetTitleRightText() string {
	if m != nil {
		return m.TitleRightText
	}
	return ""
}

func (m *SmallCoverV4) GetTitleRightPic() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.TitleRightPic
	}
	return 0
}

type TwoItemV2 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Items                []*TwoItemV2Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TwoItemV2) Reset()         { *m = TwoItemV2{} }
func (m *TwoItemV2) String() string { return proto.CompactTextString(m) }
func (*TwoItemV2) ProtoMessage()    {}
func (*TwoItemV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{8}
}
func (m *TwoItemV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwoItemV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwoItemV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwoItemV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoItemV2.Merge(m, src)
}
func (m *TwoItemV2) XXX_Size() int {
	return m.Size()
}
func (m *TwoItemV2) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoItemV2.DiscardUnknown(m)
}

var xxx_messageInfo_TwoItemV2 proto.InternalMessageInfo

func (m *TwoItemV2) GetItems() []*TwoItemV2Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type TwoItemV2Item struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Badge                string                                               `protobuf:"bytes,2,opt,name=badge,proto3" json:"badge,omitempty"`
	CoverLeftText_1      string                                               `protobuf:"bytes,3,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,4,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *TwoItemV2Item) Reset()         { *m = TwoItemV2Item{} }
func (m *TwoItemV2Item) String() string { return proto.CompactTextString(m) }
func (*TwoItemV2Item) ProtoMessage()    {}
func (*TwoItemV2Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{9}
}
func (m *TwoItemV2Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwoItemV2Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwoItemV2Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwoItemV2Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoItemV2Item.Merge(m, src)
}
func (m *TwoItemV2Item) XXX_Size() int {
	return m.Size()
}
func (m *TwoItemV2Item) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoItemV2Item.DiscardUnknown(m)
}

var xxx_messageInfo_TwoItemV2Item proto.InternalMessageInfo

func (m *TwoItemV2Item) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *TwoItemV2Item) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *TwoItemV2Item) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

type MultiItem struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	MoreUri              string         `protobuf:"bytes,2,opt,name=more_uri,json=moreUri,proto3" json:"more_uri,omitempty"`
	MoreText             string         `protobuf:"bytes,3,opt,name=more_text,json=moreText,proto3" json:"more_text,omitempty"`
	Items                []*DoubleCards `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MultiItem) Reset()         { *m = MultiItem{} }
func (m *MultiItem) String() string { return proto.CompactTextString(m) }
func (*MultiItem) ProtoMessage()    {}
func (*MultiItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{10}
}
func (m *MultiItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiItem.Merge(m, src)
}
func (m *MultiItem) XXX_Size() int {
	return m.Size()
}
func (m *MultiItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiItem.DiscardUnknown(m)
}

var xxx_messageInfo_MultiItem proto.InternalMessageInfo

func (m *MultiItem) GetMoreUri() string {
	if m != nil {
		return m.MoreUri
	}
	return ""
}

func (m *MultiItem) GetMoreText() string {
	if m != nil {
		return m.MoreText
	}
	return ""
}

func (m *MultiItem) GetItems() []*DoubleCards {
	if m != nil {
		return m.Items
	}
	return nil
}

type ThreePicV2 struct {
	*Base                     `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	LeftCover                 string                                               `protobuf:"bytes,2,opt,name=left_cover,json=leftCover,proto3" json:"left_cover,omitempty"`
	RightCover_1              string                                               `protobuf:"bytes,3,opt,name=right_cover_1,json=rightCover1,proto3" json:"right_cover_1,omitempty"`
	RightCover_2              string                                               `protobuf:"bytes,4,opt,name=right_cover_2,json=rightCover2,proto3" json:"right_cover_2,omitempty"`
	CoverLeftText_1           string                                               `protobuf:"bytes,5,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,6,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2           string                                               `protobuf:"bytes,7,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,8,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverRightText            string                                               `protobuf:"bytes,9,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon            go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,10,opt,name=cover_right_icon,json=coverRightIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string                                               `protobuf:"bytes,11,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Badge                     string                                               `protobuf:"bytes,12,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReason                string                                               `protobuf:"bytes,13,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Desc                      string                                               `protobuf:"bytes,14,opt,name=desc,proto3" json:"desc,omitempty"`
	Avatar                    *Avatar                                              `protobuf:"bytes,15,opt,name=avatar,proto3" json:"avatar,omitempty"`
	RcmdReasonStyle           *ReasonStyle                                         `protobuf:"bytes,16,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                             `json:"-"`
	XXX_unrecognized          []byte                                               `json:"-"`
	XXX_sizecache             int32                                                `json:"-"`
}

func (m *ThreePicV2) Reset()         { *m = ThreePicV2{} }
func (m *ThreePicV2) String() string { return proto.CompactTextString(m) }
func (*ThreePicV2) ProtoMessage()    {}
func (*ThreePicV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{11}
}
func (m *ThreePicV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreePicV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreePicV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreePicV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreePicV2.Merge(m, src)
}
func (m *ThreePicV2) XXX_Size() int {
	return m.Size()
}
func (m *ThreePicV2) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreePicV2.DiscardUnknown(m)
}

var xxx_messageInfo_ThreePicV2 proto.InternalMessageInfo

func (m *ThreePicV2) GetLeftCover() string {
	if m != nil {
		return m.LeftCover
	}
	return ""
}

func (m *ThreePicV2) GetRightCover_1() string {
	if m != nil {
		return m.RightCover_1
	}
	return ""
}

func (m *ThreePicV2) GetRightCover_2() string {
	if m != nil {
		return m.RightCover_2
	}
	return ""
}

func (m *ThreePicV2) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *ThreePicV2) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *ThreePicV2) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *ThreePicV2) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *ThreePicV2) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *ThreePicV2) GetCoverRightIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverRightIcon
	}
	return 0
}

func (m *ThreePicV2) GetCoverRightBackgroundColor() string {
	if m != nil {
		return m.CoverRightBackgroundColor
	}
	return ""
}

func (m *ThreePicV2) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *ThreePicV2) GetRcmdReason() string {
	if m != nil {
		return m.RcmdReason
	}
	return ""
}

func (m *ThreePicV2) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ThreePicV2) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *ThreePicV2) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

type OnePicV2 struct {
	*Base                     `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftIcon_1           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,2,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2           string                                               `protobuf:"bytes,3,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverRightText            string                                               `protobuf:"bytes,4,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon            go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=cover_right_icon,json=coverRightIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string                                               `protobuf:"bytes,6,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Badge                     string                                               `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReason                string                                               `protobuf:"bytes,8,opt,name=rcmd_reason,json=rcmdReason,proto3" json:"rcmd_reason,omitempty"`
	Avatar                    *Avatar                                              `protobuf:"bytes,9,opt,name=avatar,proto3" json:"avatar,omitempty"`
	RcmdReasonStyle           *ReasonStyle                                         `protobuf:"bytes,10,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                             `json:"-"`
	XXX_unrecognized          []byte                                               `json:"-"`
	XXX_sizecache             int32                                                `json:"-"`
}

func (m *OnePicV2) Reset()         { *m = OnePicV2{} }
func (m *OnePicV2) String() string { return proto.CompactTextString(m) }
func (*OnePicV2) ProtoMessage()    {}
func (*OnePicV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{12}
}
func (m *OnePicV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnePicV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnePicV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnePicV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnePicV2.Merge(m, src)
}
func (m *OnePicV2) XXX_Size() int {
	return m.Size()
}
func (m *OnePicV2) XXX_DiscardUnknown() {
	xxx_messageInfo_OnePicV2.DiscardUnknown(m)
}

var xxx_messageInfo_OnePicV2 proto.InternalMessageInfo

func (m *OnePicV2) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *OnePicV2) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *OnePicV2) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *OnePicV2) GetCoverRightIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverRightIcon
	}
	return 0
}

func (m *OnePicV2) GetCoverRightBackgroundColor() string {
	if m != nil {
		return m.CoverRightBackgroundColor
	}
	return ""
}

func (m *OnePicV2) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *OnePicV2) GetRcmdReason() string {
	if m != nil {
		return m.RcmdReason
	}
	return ""
}

func (m *OnePicV2) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *OnePicV2) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

type LargeCoverV3 struct {
	*Base                 `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverGif              string                                               `protobuf:"bytes,2,opt,name=cover_gif,json=coverGif,proto3" json:"cover_gif,omitempty"`
	Avatar                *Avatar                                              `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	TopRcmdReasonStyle    *ReasonStyle                                         `protobuf:"bytes,4,opt,name=top_rcmd_reason_style,json=topRcmdReasonStyle,proto3" json:"top_rcmd_reason_style,omitempty"`
	BottomRcmdReasonStyle *ReasonStyle                                         `protobuf:"bytes,5,opt,name=bottom_rcmd_reason_style,json=bottomRcmdReasonStyle,proto3" json:"bottom_rcmd_reason_style,omitempty"`
	CoverLeftText_1       string                                               `protobuf:"bytes,6,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1       go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,7,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2       string                                               `protobuf:"bytes,8,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2       go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,9,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverRightText        string                                               `protobuf:"bytes,10,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	Desc                  string                                               `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	OfficialIcon          go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,12,opt,name=official_icon,json=officialIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"official_icon,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                             `json:"-"`
	XXX_unrecognized      []byte                                               `json:"-"`
	XXX_sizecache         int32                                                `json:"-"`
}

func (m *LargeCoverV3) Reset()         { *m = LargeCoverV3{} }
func (m *LargeCoverV3) String() string { return proto.CompactTextString(m) }
func (*LargeCoverV3) ProtoMessage()    {}
func (*LargeCoverV3) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{13}
}
func (m *LargeCoverV3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LargeCoverV3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LargeCoverV3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LargeCoverV3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LargeCoverV3.Merge(m, src)
}
func (m *LargeCoverV3) XXX_Size() int {
	return m.Size()
}
func (m *LargeCoverV3) XXX_DiscardUnknown() {
	xxx_messageInfo_LargeCoverV3.DiscardUnknown(m)
}

var xxx_messageInfo_LargeCoverV3 proto.InternalMessageInfo

func (m *LargeCoverV3) GetCoverGif() string {
	if m != nil {
		return m.CoverGif
	}
	return ""
}

func (m *LargeCoverV3) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *LargeCoverV3) GetTopRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.TopRcmdReasonStyle
	}
	return nil
}

func (m *LargeCoverV3) GetBottomRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.BottomRcmdReasonStyle
	}
	return nil
}

func (m *LargeCoverV3) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *LargeCoverV3) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *LargeCoverV3) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *LargeCoverV3) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *LargeCoverV3) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *LargeCoverV3) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *LargeCoverV3) GetOfficialIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.OfficialIcon
	}
	return 0
}

type ThreePicV3 struct {
	*Base                     `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	LeftCover                 string                                               `protobuf:"bytes,2,opt,name=left_cover,json=leftCover,proto3" json:"left_cover,omitempty"`
	RightCover_1              string                                               `protobuf:"bytes,3,opt,name=right_cover_1,json=rightCover1,proto3" json:"right_cover_1,omitempty"`
	RightCover_2              string                                               `protobuf:"bytes,4,opt,name=right_cover_2,json=rightCover2,proto3" json:"right_cover_2,omitempty"`
	CoverLeftText_1           string                                               `protobuf:"bytes,5,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,6,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2           string                                               `protobuf:"bytes,7,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,8,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverRightText            string                                               `protobuf:"bytes,9,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon            go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,10,opt,name=cover_right_icon,json=coverRightIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string                                               `protobuf:"bytes,11,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Badge                     string                                               `protobuf:"bytes,12,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReasonStyle           *ReasonStyle                                         `protobuf:"bytes,13,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                             `json:"-"`
	XXX_unrecognized          []byte                                               `json:"-"`
	XXX_sizecache             int32                                                `json:"-"`
}

func (m *ThreePicV3) Reset()         { *m = ThreePicV3{} }
func (m *ThreePicV3) String() string { return proto.CompactTextString(m) }
func (*ThreePicV3) ProtoMessage()    {}
func (*ThreePicV3) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{14}
}
func (m *ThreePicV3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreePicV3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreePicV3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreePicV3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreePicV3.Merge(m, src)
}
func (m *ThreePicV3) XXX_Size() int {
	return m.Size()
}
func (m *ThreePicV3) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreePicV3.DiscardUnknown(m)
}

var xxx_messageInfo_ThreePicV3 proto.InternalMessageInfo

func (m *ThreePicV3) GetLeftCover() string {
	if m != nil {
		return m.LeftCover
	}
	return ""
}

func (m *ThreePicV3) GetRightCover_1() string {
	if m != nil {
		return m.RightCover_1
	}
	return ""
}

func (m *ThreePicV3) GetRightCover_2() string {
	if m != nil {
		return m.RightCover_2
	}
	return ""
}

func (m *ThreePicV3) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *ThreePicV3) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *ThreePicV3) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *ThreePicV3) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *ThreePicV3) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *ThreePicV3) GetCoverRightIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverRightIcon
	}
	return 0
}

func (m *ThreePicV3) GetCoverRightBackgroundColor() string {
	if m != nil {
		return m.CoverRightBackgroundColor
	}
	return ""
}

func (m *ThreePicV3) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *ThreePicV3) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

type OnePicV3 struct {
	*Base                     `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1           string                                               `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverRightText            string                                               `protobuf:"bytes,4,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon            go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=cover_right_icon,json=coverRightIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_right_icon,omitempty"`
	CoverRightBackgroundColor string                                               `protobuf:"bytes,6,opt,name=cover_right_background_color,json=coverRightBackgroundColor,proto3" json:"cover_right_background_color,omitempty"`
	Badge                     string                                               `protobuf:"bytes,7,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReasonStyle           *ReasonStyle                                         `protobuf:"bytes,8,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                             `json:"-"`
	XXX_unrecognized          []byte                                               `json:"-"`
	XXX_sizecache             int32                                                `json:"-"`
}

func (m *OnePicV3) Reset()         { *m = OnePicV3{} }
func (m *OnePicV3) String() string { return proto.CompactTextString(m) }
func (*OnePicV3) ProtoMessage()    {}
func (*OnePicV3) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{15}
}
func (m *OnePicV3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnePicV3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnePicV3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnePicV3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnePicV3.Merge(m, src)
}
func (m *OnePicV3) XXX_Size() int {
	return m.Size()
}
func (m *OnePicV3) XXX_DiscardUnknown() {
	xxx_messageInfo_OnePicV3.DiscardUnknown(m)
}

var xxx_messageInfo_OnePicV3 proto.InternalMessageInfo

func (m *OnePicV3) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *OnePicV3) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *OnePicV3) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *OnePicV3) GetCoverRightIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverRightIcon
	}
	return 0
}

func (m *OnePicV3) GetCoverRightBackgroundColor() string {
	if m != nil {
		return m.CoverRightBackgroundColor
	}
	return ""
}

func (m *OnePicV3) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *OnePicV3) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

type SmallCoverV7 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SmallCoverV7) Reset()         { *m = SmallCoverV7{} }
func (m *SmallCoverV7) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV7) ProtoMessage()    {}
func (*SmallCoverV7) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{16}
}
func (m *SmallCoverV7) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV7) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV7.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV7) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV7.Merge(m, src)
}
func (m *SmallCoverV7) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV7) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV7.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV7 proto.InternalMessageInfo

func (m *SmallCoverV7) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type SmallCoverV9 struct {
	*Base                     `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1           string                                               `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2           string                                               `protobuf:"bytes,4,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2           go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverRightText            string                                               `protobuf:"bytes,6,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightIcon            go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,7,opt,name=cover_right_icon,json=coverRightIcon,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_right_icon,omitempty"`
	CanPlay                   int32                                                `protobuf:"varint,8,opt,name=can_play,json=canPlay,proto3" json:"can_play,omitempty"`
	RcmdReasonStyle           *ReasonStyle                                         `protobuf:"bytes,9,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	Up                        *Up                                                  `protobuf:"bytes,10,opt,name=up,proto3" json:"up,omitempty"`
	LeftCoverBadgeStyle       *ReasonStyle                                         `protobuf:"bytes,11,opt,name=left_cover_badge_style,json=leftCoverBadgeStyle,proto3" json:"left_cover_badge_style,omitempty"`
	LeftBottomRcmdReasonStyle *ReasonStyle                                         `protobuf:"bytes,12,opt,name=left_bottom_rcmd_reason_style,json=leftBottomRcmdReasonStyle,proto3" json:"left_bottom_rcmd_reason_style,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                                             `json:"-"`
	XXX_unrecognized          []byte                                               `json:"-"`
	XXX_sizecache             int32                                                `json:"-"`
}

func (m *SmallCoverV9) Reset()         { *m = SmallCoverV9{} }
func (m *SmallCoverV9) String() string { return proto.CompactTextString(m) }
func (*SmallCoverV9) ProtoMessage()    {}
func (*SmallCoverV9) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{17}
}
func (m *SmallCoverV9) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverV9) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverV9.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverV9) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverV9.Merge(m, src)
}
func (m *SmallCoverV9) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverV9) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverV9.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverV9 proto.InternalMessageInfo

func (m *SmallCoverV9) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *SmallCoverV9) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *SmallCoverV9) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *SmallCoverV9) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *SmallCoverV9) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *SmallCoverV9) GetCoverRightIcon() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverRightIcon
	}
	return 0
}

func (m *SmallCoverV9) GetCanPlay() int32 {
	if m != nil {
		return m.CanPlay
	}
	return 0
}

func (m *SmallCoverV9) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

func (m *SmallCoverV9) GetUp() *Up {
	if m != nil {
		return m.Up
	}
	return nil
}

func (m *SmallCoverV9) GetLeftCoverBadgeStyle() *ReasonStyle {
	if m != nil {
		return m.LeftCoverBadgeStyle
	}
	return nil
}

func (m *SmallCoverV9) GetLeftBottomRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.LeftBottomRcmdReasonStyle
	}
	return nil
}

type SmallCoverConvergeV2 struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	CoverLeftText_1      string                                               `protobuf:"bytes,2,opt,name=cover_left_text_1,json=coverLeftText1,proto3" json:"cover_left_text_1,omitempty"`
	CoverLeftIcon_1      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,3,opt,name=cover_left_icon_1,json=coverLeftIcon1,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_1,omitempty"`
	CoverLeftText_2      string                                               `protobuf:"bytes,4,opt,name=cover_left_text_2,json=coverLeftText2,proto3" json:"cover_left_text_2,omitempty"`
	CoverLeftIcon_2      go_gateway_app_app_svr_app_card_interface_model.Icon `protobuf:"varint,5,opt,name=cover_left_icon_2,json=coverLeftIcon2,proto3,casttype=go-gateway/app/app-svr/app-card/interface/model.Icon" json:"cover_left_icon_2,omitempty"`
	CoverRightText       string                                               `protobuf:"bytes,6,opt,name=cover_right_text,json=coverRightText,proto3" json:"cover_right_text,omitempty"`
	CoverRightTopText    string                                               `protobuf:"bytes,7,opt,name=cover_right_top_text,json=coverRightTopText,proto3" json:"cover_right_top_text,omitempty"`
	RcmdReasonStyle      *ReasonStyle                                         `protobuf:"bytes,8,opt,name=rcmd_reason_style,json=rcmdReasonStyle,proto3" json:"rcmd_reason_style,omitempty"`
	RcmdReasonStyleV2    *ReasonStyle                                         `protobuf:"bytes,9,opt,name=rcmd_reason_style_v2,json=rcmdReasonStyleV2,proto3" json:"rcmd_reason_style_v2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *SmallCoverConvergeV2) Reset()         { *m = SmallCoverConvergeV2{} }
func (m *SmallCoverConvergeV2) String() string { return proto.CompactTextString(m) }
func (*SmallCoverConvergeV2) ProtoMessage()    {}
func (*SmallCoverConvergeV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{18}
}
func (m *SmallCoverConvergeV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallCoverConvergeV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallCoverConvergeV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallCoverConvergeV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallCoverConvergeV2.Merge(m, src)
}
func (m *SmallCoverConvergeV2) XXX_Size() int {
	return m.Size()
}
func (m *SmallCoverConvergeV2) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallCoverConvergeV2.DiscardUnknown(m)
}

var xxx_messageInfo_SmallCoverConvergeV2 proto.InternalMessageInfo

func (m *SmallCoverConvergeV2) GetCoverLeftText_1() string {
	if m != nil {
		return m.CoverLeftText_1
	}
	return ""
}

func (m *SmallCoverConvergeV2) GetCoverLeftIcon_1() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_1
	}
	return 0
}

func (m *SmallCoverConvergeV2) GetCoverLeftText_2() string {
	if m != nil {
		return m.CoverLeftText_2
	}
	return ""
}

func (m *SmallCoverConvergeV2) GetCoverLeftIcon_2() go_gateway_app_app_svr_app_card_interface_model.Icon {
	if m != nil {
		return m.CoverLeftIcon_2
	}
	return 0
}

func (m *SmallCoverConvergeV2) GetCoverRightText() string {
	if m != nil {
		return m.CoverRightText
	}
	return ""
}

func (m *SmallCoverConvergeV2) GetCoverRightTopText() string {
	if m != nil {
		return m.CoverRightTopText
	}
	return ""
}

func (m *SmallCoverConvergeV2) GetRcmdReasonStyle() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle
	}
	return nil
}

func (m *SmallCoverConvergeV2) GetRcmdReasonStyleV2() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyleV2
	}
	return nil
}

type SmallChannelSpecial struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	BgCover              string       `protobuf:"bytes,2,opt,name=bg_cover,json=bgCover,proto3" json:"bg_cover,omitempty"`
	Desc_1               string       `protobuf:"bytes,3,opt,name=desc_1,json=desc1,proto3" json:"desc_1,omitempty"`
	Desc_2               string       `protobuf:"bytes,4,opt,name=desc_2,json=desc2,proto3" json:"desc_2,omitempty"`
	Badge                string       `protobuf:"bytes,5,opt,name=badge,proto3" json:"badge,omitempty"`
	RcmdReasonStyle_2    *ReasonStyle `protobuf:"bytes,6,opt,name=rcmd_reason_style_2,json=rcmdReasonStyle2,proto3" json:"rcmd_reason_style_2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SmallChannelSpecial) Reset()         { *m = SmallChannelSpecial{} }
func (m *SmallChannelSpecial) String() string { return proto.CompactTextString(m) }
func (*SmallChannelSpecial) ProtoMessage()    {}
func (*SmallChannelSpecial) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{19}
}
func (m *SmallChannelSpecial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmallChannelSpecial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmallChannelSpecial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmallChannelSpecial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmallChannelSpecial.Merge(m, src)
}
func (m *SmallChannelSpecial) XXX_Size() int {
	return m.Size()
}
func (m *SmallChannelSpecial) XXX_DiscardUnknown() {
	xxx_messageInfo_SmallChannelSpecial.DiscardUnknown(m)
}

var xxx_messageInfo_SmallChannelSpecial proto.InternalMessageInfo

func (m *SmallChannelSpecial) GetBgCover() string {
	if m != nil {
		return m.BgCover
	}
	return ""
}

func (m *SmallChannelSpecial) GetDesc_1() string {
	if m != nil {
		return m.Desc_1
	}
	return ""
}

func (m *SmallChannelSpecial) GetDesc_2() string {
	if m != nil {
		return m.Desc_2
	}
	return ""
}

func (m *SmallChannelSpecial) GetBadge() string {
	if m != nil {
		return m.Badge
	}
	return ""
}

func (m *SmallChannelSpecial) GetRcmdReasonStyle_2() *ReasonStyle {
	if m != nil {
		return m.RcmdReasonStyle_2
	}
	return nil
}

type Text struct {
	*Base                `protobuf:"bytes,1,opt,name=base,proto3,embedded=base" json:""`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Text) Reset()         { *m = Text{} }
func (m *Text) String() string { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()    {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_f31389d691c7df92, []int{20}
}
func (m *Text) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Text.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(m, src)
}
func (m *Text) XXX_Size() int {
	return m.Size()
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*DoubleCards)(nil), "bilibili.app.card.v1.DoubleCards")
	proto.RegisterType((*SmallCoverV2)(nil), "bilibili.app.card.v1.SmallCoverV2")
	proto.RegisterType((*SmallCoverV3)(nil), "bilibili.app.card.v1.SmallCoverV3")
	proto.RegisterType((*MiddleCoverV2)(nil), "bilibili.app.card.v1.MiddleCoverV2")
	proto.RegisterType((*LargeCoverV2)(nil), "bilibili.app.card.v1.LargeCoverV2")
	proto.RegisterType((*ThreeItemV2)(nil), "bilibili.app.card.v1.ThreeItemV2")
	proto.RegisterType((*ThreeItemV2Item)(nil), "bilibili.app.card.v1.ThreeItemV2Item")
	proto.RegisterType((*SmallCoverV4)(nil), "bilibili.app.card.v1.SmallCoverV4")
	proto.RegisterType((*TwoItemV2)(nil), "bilibili.app.card.v1.TwoItemV2")
	proto.RegisterType((*TwoItemV2Item)(nil), "bilibili.app.card.v1.TwoItemV2Item")
	proto.RegisterType((*MultiItem)(nil), "bilibili.app.card.v1.MultiItem")
	proto.RegisterType((*ThreePicV2)(nil), "bilibili.app.card.v1.ThreePicV2")
	proto.RegisterType((*OnePicV2)(nil), "bilibili.app.card.v1.OnePicV2")
	proto.RegisterType((*LargeCoverV3)(nil), "bilibili.app.card.v1.LargeCoverV3")
	proto.RegisterType((*ThreePicV3)(nil), "bilibili.app.card.v1.ThreePicV3")
	proto.RegisterType((*OnePicV3)(nil), "bilibili.app.card.v1.OnePicV3")
	proto.RegisterType((*SmallCoverV7)(nil), "bilibili.app.card.v1.SmallCoverV7")
	proto.RegisterType((*SmallCoverV9)(nil), "bilibili.app.card.v1.SmallCoverV9")
	proto.RegisterType((*SmallCoverConvergeV2)(nil), "bilibili.app.card.v1.SmallCoverConvergeV2")
	proto.RegisterType((*SmallChannelSpecial)(nil), "bilibili.app.card.v1.SmallChannelSpecial")
	proto.RegisterType((*Text)(nil), "bilibili.app.card.v1.Text")
}

func init() { proto.RegisterFile("double.proto", fileDescriptor_f31389d691c7df92) }

var fileDescriptor_f31389d691c7df92 = []byte{
	// 1717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0xdb, 0xc6,
	0x12, 0x8f, 0x3e, 0x28, 0x89, 0x23, 0xc9, 0x1f, 0xb4, 0xf3, 0x40, 0xfb, 0x25, 0x76, 0x1e, 0x1f,
	0x5a, 0xb8, 0x87, 0xc8, 0x10, 0x1d, 0x20, 0x49, 0x0b, 0xa4, 0x88, 0x1c, 0xa0, 0x49, 0x90, 0xa0,
	0x06, 0xed, 0xb8, 0x45, 0xd0, 0x40, 0x21, 0xa9, 0x95, 0x4c, 0x84, 0xe2, 0x12, 0xd4, 0xca, 0x89,
	0x6f, 0xe9, 0xad, 0xe9, 0xbd, 0x40, 0xcf, 0x3d, 0xf4, 0xdc, 0x53, 0xfb, 0x27, 0xb4, 0xc7, 0xfc,
	0x05, 0x6e, 0x91, 0x1e, 0x0a, 0x14, 0x45, 0xdb, 0x73, 0x4e, 0xc5, 0xee, 0x92, 0x12, 0x29, 0xd3,
	0x2e, 0x23, 0x2a, 0x2a, 0xda, 0xfa, 0x60, 0x85, 0xbb, 0x3b, 0x9c, 0x99, 0x9d, 0xfd, 0xcd, 0xc7,
	0x0e, 0x03, 0x95, 0x16, 0xee, 0x1b, 0x36, 0xaa, 0xb9, 0x1e, 0x26, 0x58, 0x5a, 0x34, 0x2c, 0xdb,
	0xa2, 0x7f, 0x35, 0xdd, 0x75, 0x6b, 0xa6, 0xee, 0xb5, 0x6a, 0xfb, 0xf5, 0xe5, 0x8b, 0x1d, 0x8b,
	0xec, 0xf5, 0x8d, 0x9a, 0x89, 0xbb, 0xeb, 0x1d, 0xdc, 0xc1, 0xeb, 0x8c, 0xd8, 0xe8, 0xb7, 0xd9,
	0x88, 0x0d, 0xd8, 0x13, 0x67, 0xb2, 0x5c, 0x31, 0x71, 0xb7, 0x8b, 0x1d, 0x3e, 0x52, 0x7e, 0xca,
	0x40, 0xf9, 0x06, 0x93, 0xb1, 0xa9, 0x7b, 0xad, 0x9e, 0x74, 0x1b, 0x66, 0x7a, 0x5d, 0xdd, 0xb6,
	0x9b, 0x26, 0xde, 0x47, 0x5e, 0x73, 0x5f, 0x95, 0x33, 0x17, 0x32, 0x6b, 0x65, 0x55, 0xa9, 0xc5,
	0xc9, 0xae, 0x6d, 0x53, 0xda, 0x4d, 0x4a, 0xba, 0xab, 0xde, 0x3c, 0xa3, 0x55, 0x7a, 0xa1, 0xb1,
	0x74, 0x0d, 0x00, 0x3b, 0xa8, 0xe9, 0x5a, 0x26, 0xe5, 0x93, 0x65, 0x7c, 0x56, 0xe2, 0xf9, 0xbc,
	0xef, 0xa0, 0x2d, 0xcb, 0x64, 0x3c, 0x4a, 0xd8, 0x7f, 0x96, 0x6e, 0x40, 0x85, 0xec, 0x79, 0x68,
	0xc0, 0x21, 0xc7, 0x38, 0x5c, 0x88, 0xe7, 0xb0, 0x43, 0x29, 0x03, 0x1e, 0x40, 0x06, 0xa3, 0x46,
	0x01, 0xf2, 0x74, 0x6b, 0xca, 0x57, 0x22, 0x54, 0xc2, 0xea, 0x4a, 0x57, 0x20, 0x6f, 0xe8, 0x3d,
	0xe4, 0x6f, 0x70, 0x39, 0x9e, 0x6d, 0x43, 0xef, 0xa1, 0x46, 0xe9, 0xf9, 0xe1, 0x6a, 0xe6, 0xe7,
	0xc3, 0xd5, 0x33, 0x1a, 0x7b, 0x43, 0xfa, 0x2f, 0x88, 0xdc, 0x3c, 0x1d, 0xab, 0xcd, 0xf6, 0x25,
	0x6a, 0x25, 0x36, 0xf1, 0x9e, 0xd5, 0x96, 0x1e, 0x00, 0xf0, 0x45, 0xc3, 0xee, 0x7b, 0x4c, 0x67,
	0xa1, 0x71, 0xed, 0xe5, 0xe1, 0xea, 0xdb, 0x1d, 0x7c, 0xb1, 0xa3, 0x13, 0xf4, 0x58, 0x3f, 0x58,
	0xd7, 0x5d, 0x97, 0xfe, 0x5d, 0xec, 0xed, 0x7b, 0xec, 0x5f, 0x2a, 0x6d, 0xdd, 0x72, 0x08, 0xf2,
	0xda, 0xba, 0x89, 0xd6, 0xbb, 0xb8, 0x85, 0xec, 0x5a, 0xc3, 0xee, 0x7b, 0xdb, 0x44, 0x27, 0xfd,
	0x9e, 0xc6, 0xc5, 0xd1, 0x09, 0xe9, 0x2d, 0x98, 0xe7, 0xec, 0x6d, 0xd4, 0x26, 0x4d, 0x82, 0x9e,
	0x90, 0x66, 0x5d, 0xce, 0x33, 0x1d, 0x66, 0xd8, 0xc2, 0x1d, 0xd4, 0x26, 0x3b, 0xe8, 0x09, 0xa9,
	0x4b, 0x66, 0x84, 0xd4, 0x32, 0xb1, 0xd3, 0xac, 0xcb, 0x02, 0x53, 0xe8, 0xca, 0xcb, 0xc3, 0xd5,
	0x4b, 0xaf, 0xaa, 0xd0, 0x2d, 0x13, 0x3b, 0x21, 0x21, 0x74, 0x58, 0x8f, 0xd3, 0x47, 0x95, 0x0b,
	0x31, 0xfa, 0xa8, 0x71, 0xfa, 0xa8, 0x72, 0x71, 0xa2, 0xfa, 0xa8, 0xd2, 0x1a, 0xcc, 0x71, 0x21,
	0x9e, 0xd5, 0xd9, 0xe3, 0x0a, 0xc9, 0xa5, 0x90, 0x3a, 0x1a, 0x9d, 0xa6, 0xfa, 0x48, 0x46, 0x94,
	0x92, 0xea, 0x23, 0x8b, 0x13, 0xd1, 0x86, 0xc9, 0xa0, 0x63, 0xe9, 0x5d, 0x38, 0x17, 0x96, 0x61,
	0xe8, 0xe6, 0xa3, 0x8e, 0x87, 0xfb, 0x4e, 0xab, 0x69, 0x62, 0x1b, 0x7b, 0x32, 0x30, 0xcd, 0x96,
	0x86, 0x6f, 0x35, 0x06, 0x14, 0x9b, 0x94, 0x40, 0x5a, 0x86, 0x52, 0xaf, 0x6f, 0x10, 0x8b, 0xd8,
	0x48, 0x2e, 0x73, 0xa4, 0x05, 0x63, 0x69, 0x11, 0x04, 0x43, 0x6f, 0x75, 0x90, 0x5c, 0x61, 0x0b,
	0x7c, 0x20, 0xad, 0x42, 0xd9, 0x33, 0xbb, 0xad, 0xa6, 0x87, 0xf4, 0x1e, 0x76, 0xe4, 0x2a, 0x5b,
	0x03, 0x3a, 0xa5, 0xb1, 0x19, 0x49, 0x82, 0x7c, 0x0b, 0xf5, 0x4c, 0x79, 0x86, 0xad, 0xb0, 0x67,
	0xe9, 0x12, 0x14, 0xf4, 0x7d, 0x9d, 0xe8, 0x9e, 0x3c, 0xcb, 0xbc, 0xe1, 0x5c, 0xbc, 0x37, 0x5c,
	0x67, 0x34, 0x9a, 0x4f, 0x2b, 0x3d, 0x80, 0x2a, 0x6e, 0xb7, 0x2d, 0xd3, 0xd2, 0x6d, 0x6e, 0xbe,
	0xb9, 0x94, 0xe6, 0xab, 0x04, 0xec, 0x98, 0xf1, 0x96, 0xa0, 0x64, 0xea, 0x4e, 0xd3, 0xb5, 0xf5,
	0x03, 0x79, 0x9e, 0x72, 0xd6, 0x8a, 0xa6, 0xee, 0x6c, 0xd9, 0xfa, 0x81, 0x74, 0x17, 0xe6, 0x43,
	0x9b, 0x6c, 0xf6, 0xc8, 0x81, 0x8d, 0x64, 0x89, 0xa9, 0xfe, 0xbf, 0x78, 0xd5, 0xf9, 0xe6, 0xb7,
	0x29, 0xa1, 0x36, 0x3b, 0xb4, 0x06, 0x9b, 0x90, 0x34, 0x58, 0x3c, 0xc2, 0x8e, 0x46, 0x9c, 0x85,
	0xa4, 0x1c, 0xe7, 0x47, 0x38, 0xee, 0xaa, 0xd2, 0x75, 0x28, 0xdb, 0xd6, 0x23, 0xd4, 0x34, 0xfa,
	0x84, 0x60, 0x47, 0x5e, 0x3c, 0x29, 0x78, 0xdd, 0xb1, 0x1e, 0xa1, 0x06, 0xa3, 0xd3, 0xc0, 0x1e,
	0x3c, 0x2b, 0xbf, 0xe7, 0x22, 0x21, 0x6b, 0x23, 0x45, 0xc8, 0x1a, 0x1e, 0x70, 0xf6, 0x15, 0x0e,
	0xf8, 0x4d, 0x98, 0x1d, 0x71, 0x6e, 0x16, 0xd0, 0x44, 0xad, 0x1a, 0x71, 0x6d, 0xe9, 0x36, 0x48,
	0x11, 0x98, 0xf3, 0x2d, 0xe7, 0x4f, 0x92, 0xe4, 0x6f, 0x77, 0x2e, 0x04, 0x7d, 0x36, 0x33, 0x8a,
	0x5f, 0xe1, 0x58, 0xfc, 0x16, 0x42, 0xf8, 0x3d, 0x82, 0xc4, 0xe2, 0x6b, 0x43, 0x62, 0x29, 0x01,
	0x12, 0xc5, 0x71, 0x91, 0xa8, 0x3c, 0xcb, 0x40, 0xf5, 0xae, 0xd5, 0x6a, 0xd9, 0x28, 0x7d, 0x9a,
	0x5a, 0x04, 0xc1, 0xd3, 0x89, 0x85, 0xd9, 0x91, 0x0b, 0x1a, 0x1f, 0x0c, 0xcc, 0x97, 0x0b, 0x99,
	0x6f, 0x10, 0x49, 0xf2, 0xa1, 0x48, 0xa2, 0x7c, 0x59, 0x80, 0xca, 0x1d, 0xdd, 0xeb, 0x4c, 0x40,
	0x95, 0xf1, 0xe0, 0x37, 0x50, 0x2b, 0x17, 0x0e, 0x70, 0x93, 0x04, 0x5b, 0x6c, 0x36, 0x15, 0x92,
	0x67, 0xd3, 0xc2, 0x34, 0xb2, 0x69, 0x31, 0x79, 0x36, 0x2d, 0x4d, 0x38, 0x9b, 0x8e, 0x38, 0xa3,
	0x78, 0xc4, 0x19, 0x8f, 0x38, 0x1e, 0xbc, 0x36, 0xc7, 0x2b, 0x27, 0x70, 0xbc, 0xca, 0xd8, 0x29,
	0x60, 0x09, 0x4a, 0xbd, 0x3d, 0xfc, 0xb8, 0x49, 0xb0, 0xcb, 0x72, 0xa6, 0xa0, 0x15, 0xe9, 0x78,
	0x07, 0xbb, 0xd4, 0x08, 0x6c, 0xc9, 0xc0, 0x84, 0xe0, 0x2e, 0xcb, 0x9b, 0x82, 0x06, 0x74, 0xaa,
	0xc1, 0x66, 0x94, 0xcf, 0xb2, 0x50, 0x66, 0xf5, 0xe7, 0x2d, 0x82, 0xba, 0xa9, 0xfc, 0xe4, 0x03,
	0x00, 0x96, 0xdb, 0xb9, 0x2d, 0xb3, 0x29, 0x6d, 0x29, 0x32, 0x5e, 0x81, 0x21, 0xbb, 0xd8, 0x43,
	0xcd, 0xbe, 0x67, 0xf9, 0xde, 0x54, 0xa4, 0xe3, 0x7b, 0x9e, 0x45, 0xab, 0x59, 0xb6, 0xc4, 0xc2,
	0x3b, 0x0f, 0x00, 0x8c, 0x96, 0x45, 0xf6, 0x77, 0x40, 0xb0, 0x08, 0xea, 0xf6, 0x64, 0xe1, 0x42,
	0x6e, 0xad, 0xac, 0xbe, 0x71, 0x42, 0xf1, 0xcd, 0x37, 0x4f, 0x7f, 0x35, 0xfe, 0x8e, 0xf2, 0x4d,
	0x0e, 0x66, 0x47, 0x96, 0x52, 0xd8, 0xe6, 0x61, 0x24, 0x19, 0x4d, 0xc4, 0x40, 0xd5, 0x08, 0xdc,
	0xa5, 0x15, 0x28, 0xd3, 0x70, 0x18, 0xc4, 0x01, 0x6e, 0x27, 0x91, 0x4e, 0xf1, 0x10, 0xf0, 0xa1,
	0xbf, 0xee, 0x3b, 0x7f, 0x3e, 0xed, 0xf1, 0x50, 0x66, 0xdc, 0xef, 0x23, 0x92, 0x55, 0x3f, 0x02,
	0x0d, 0x24, 0xab, 0x51, 0xc9, 0x6a, 0xea, 0xb0, 0x33, 0x90, 0xac, 0x0e, 0x63, 0x6c, 0x31, 0x1c,
	0xfa, 0x9f, 0x65, 0x23, 0x95, 0xc7, 0xa5, 0x14, 0xc7, 0xb6, 0x0a, 0x65, 0xff, 0x3e, 0xc4, 0xc4,
	0xf0, 0xeb, 0x12, 0xbf, 0x22, 0x35, 0x58, 0x3c, 0x8f, 0x4b, 0x48, 0x6b, 0x30, 0xc7, 0xfd, 0x20,
	0x54, 0xc5, 0xfb, 0x97, 0x1c, 0x36, 0x3f, 0xac, 0xe2, 0x1f, 0xc2, 0x6c, 0x98, 0xd2, 0xb5, 0xcc,
	0xd4, 0x57, 0x9c, 0xea, 0x50, 0xc4, 0x96, 0x65, 0x2a, 0x4f, 0x33, 0x20, 0xee, 0x3c, 0xc6, 0xa9,
	0x7d, 0xfb, 0x6a, 0xe0, 0x4a, 0x59, 0xe6, 0x4a, 0xff, 0x3f, 0xc6, 0x95, 0x02, 0x49, 0x61, 0x47,
	0xfa, 0x2d, 0x03, 0xd5, 0xc8, 0x42, 0xba, 0xaa, 0x20, 0x7c, 0x12, 0x7e, 0x52, 0x8d, 0x4d, 0x84,
	0xb9, 0xe4, 0x89, 0x30, 0x3f, 0xd9, 0x44, 0xa8, 0x7c, 0x9d, 0x01, 0xf1, 0x6e, 0xdf, 0x26, 0x56,
	0xca, 0xdd, 0x86, 0xe3, 0x5e, 0xf6, 0x84, 0xb8, 0x97, 0x1b, 0x89, 0x7b, 0x97, 0x83, 0xc3, 0xca,
	0xb3, 0xc3, 0x3a, 0x26, 0xa3, 0x84, 0x3a, 0x27, 0xc1, 0x51, 0xfd, 0x52, 0x00, 0x18, 0xf6, 0x22,
	0x52, 0x68, 0x7e, 0x1e, 0x80, 0x19, 0x98, 0x19, 0xc6, 0xd7, 0x5d, 0xa4, 0x33, 0xcc, 0x25, 0x25,
	0x05, 0xaa, 0x1c, 0xf1, 0xfc, 0x2c, 0x82, 0xc3, 0x2a, 0xb3, 0x49, 0x46, 0x52, 0x1f, 0xa5, 0x51,
	0x7d, 0x17, 0x0a, 0xd1, 0xa8, 0xa7, 0x15, 0xd0, 0x18, 0xfd, 0x04, 0x31, 0x71, 0x3f, 0x01, 0xa6,
	0xdc, 0x4f, 0x28, 0xff, 0x59, 0x3f, 0xe1, 0x2f, 0xef, 0x19, 0xc4, 0x96, 0x6d, 0x73, 0x63, 0xdf,
	0x97, 0xbe, 0xcf, 0x43, 0x29, 0x68, 0x1e, 0xa6, 0x70, 0xb6, 0x58, 0x68, 0x67, 0xa7, 0x01, 0xed,
	0x5c, 0x2c, 0xb4, 0xe3, 0x50, 0x97, 0x4f, 0x8c, 0x3a, 0x61, 0xca, 0xa8, 0x2b, 0x24, 0x46, 0x5d,
	0xf1, 0x04, 0xd4, 0x95, 0x8e, 0xa0, 0x6e, 0x88, 0x30, 0x31, 0x2d, 0xc2, 0x60, 0x6c, 0x84, 0x7d,
	0x1a, 0xbd, 0x05, 0x6f, 0xbc, 0xae, 0xbe, 0xf1, 0x70, 0xb3, 0xb9, 0x57, 0xd8, 0xec, 0x0e, 0x9c,
	0x25, 0xd8, 0x6d, 0x1e, 0xdd, 0x70, 0x3e, 0xe9, 0x86, 0x25, 0x82, 0x5d, 0x6d, 0xe4, 0x32, 0x74,
	0x1f, 0x64, 0x7e, 0xd9, 0x89, 0x61, 0x2c, 0x24, 0x65, 0x7c, 0x96, 0xb3, 0x18, 0xe5, 0x1d, 0x9b,
	0x70, 0x0a, 0xc9, 0x13, 0x4e, 0x71, 0x1a, 0x5e, 0x59, 0x4a, 0x9e, 0x70, 0xc4, 0x29, 0x24, 0x1c,
	0x88, 0x75, 0xfd, 0x20, 0x28, 0x97, 0x4f, 0x6a, 0x84, 0x55, 0x26, 0x79, 0x1f, 0x57, 0x3e, 0x0e,
	0x57, 0x37, 0x1b, 0xa7, 0xd5, 0xcd, 0x69, 0x75, 0xf3, 0x37, 0xa8, 0x6e, 0x62, 0x13, 0x42, 0x75,
	0xec, 0x84, 0xf0, 0xc9, 0xb0, 0xe4, 0x48, 0xe3, 0x01, 0xb1, 0xd0, 0xcc, 0x26, 0x87, 0x66, 0x6e,
	0xc2, 0xd0, 0xfc, 0x57, 0x94, 0x1c, 0xb1, 0x50, 0x28, 0x8d, 0x0d, 0x85, 0x8f, 0x22, 0x5d, 0x92,
	0xcb, 0x29, 0xd0, 0x10, 0xc4, 0xf2, 0xec, 0x30, 0x96, 0x2b, 0xdf, 0x16, 0x22, 0xec, 0xaf, 0xfe,
	0x83, 0xc0, 0x16, 0x1b, 0x07, 0xf3, 0xc9, 0xe3, 0xa0, 0x30, 0x85, 0x38, 0x58, 0x48, 0x0c, 0xfe,
	0xe2, 0x84, 0xc1, 0x3f, 0xb5, 0xcf, 0x4d, 0xd2, 0x1a, 0x64, 0xfb, 0xae, 0x5f, 0x1c, 0xcb, 0xf1,
	0xef, 0xdf, 0x73, 0xb5, 0x6c, 0xdf, 0x95, 0x76, 0xe1, 0x3f, 0xc3, 0x84, 0xcd, 0x7b, 0x79, 0xbe,
	0xf4, 0x72, 0x52, 0xe9, 0x0b, 0x83, 0xfc, 0xce, 0x1a, 0x7f, 0x5c, 0x03, 0x13, 0xce, 0x33, 0xbe,
	0xc7, 0xd6, 0x9b, 0x89, 0x5b, 0xfa, 0x4b, 0x94, 0x4f, 0x23, 0xae, 0xe6, 0x54, 0x7e, 0xcd, 0xc3,
	0xe2, 0xd0, 0x93, 0x36, 0xb1, 0xb3, 0x8f, 0xbc, 0x0e, 0x4a, 0x75, 0x63, 0x3c, 0xf5, 0xa8, 0x49,
	0x79, 0xd4, 0x3a, 0x2c, 0x46, 0x28, 0xb1, 0xcb, 0xa9, 0x79, 0xe0, 0x9e, 0x0f, 0x51, 0x63, 0x97,
	0xbd, 0x30, 0xd9, 0x20, 0x7e, 0xec, 0xc7, 0x7f, 0x71, 0xfc, 0x8f, 0xff, 0xca, 0xd3, 0x2c, 0x2c,
	0x70, 0xc0, 0xed, 0xe9, 0x8e, 0x83, 0xec, 0x6d, 0x17, 0xd1, 0x1a, 0x3a, 0x5d, 0x23, 0xd3, 0xe8,
	0x44, 0xca, 0xe5, 0xa2, 0xd1, 0xe1, 0xc5, 0xf2, 0x59, 0x28, 0xb0, 0x8f, 0x03, 0x41, 0x95, 0x2c,
	0xd0, 0x51, 0x7d, 0x30, 0x1d, 0xc0, 0x80, 0x4d, 0x87, 0x1a, 0xfe, 0x42, 0x38, 0x31, 0x6e, 0xc1,
	0xc2, 0x51, 0x23, 0xf0, 0x0f, 0x0d, 0x89, 0x6c, 0x30, 0x37, 0x62, 0x03, 0x55, 0xb9, 0x0f, 0x79,
	0x76, 0x5a, 0xe3, 0x6f, 0x59, 0x86, 0xa2, 0x89, 0x1d, 0x82, 0x1c, 0x12, 0xec, 0xd8, 0x1f, 0x36,
	0x6e, 0x7e, 0xf7, 0x62, 0x25, 0xf3, 0xfc, 0xc5, 0x4a, 0xe6, 0x87, 0x17, 0x2b, 0x99, 0xcf, 0x7f,
	0x5c, 0x39, 0x03, 0x2b, 0x26, 0xee, 0xd6, 0x0c, 0xdd, 0xb5, 0x7a, 0xb1, 0x02, 0xb6, 0x32, 0xf7,
	0x73, 0xba, 0x6b, 0x7d, 0x91, 0x9d, 0x69, 0x5c, 0xdf, 0xba, 0xb5, 0xa9, 0x7b, 0xad, 0xdd, 0x3a,
	0xfd, 0x35, 0x0a, 0xec, 0xbf, 0xc1, 0x6d, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x5b, 0xe1,
	0x09, 0x69, 0x27, 0x00, 0x00,
}

func (m *DoubleCards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoubleCards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoubleCards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Card != nil {
		{
			size := m.Card.Size()
			i -= size
			if _, err := m.Card.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DoubleCards_SmallCoverV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoubleCards_SmallCoverV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SmallCoverV2 != nil {
		{
			size, err := m.SmallCoverV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DoubleCards_OnePicV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoubleCards_OnePicV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OnePicV2 != nil {
		{
			size, err := m.OnePicV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DoubleCards_ThreePicV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoubleCards_ThreePicV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ThreePicV2 != nil {
		{
			size, err := m.ThreePicV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SmallCoverV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LikeButton != nil {
		{
			size, err := m.LikeButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.RcmdReasonStyleV2 != nil {
		{
			size, err := m.RcmdReasonStyleV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.CanPlay != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RcmdReason) > 0 {
		i -= len(m.RcmdReason)
		copy(dAtA[i:], m.RcmdReason)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RcmdReason)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Subtitle) > 0 {
		i -= len(m.Subtitle)
		copy(dAtA[i:], m.Subtitle)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Subtitle)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CoverRightBackgroundColor) > 0 {
		i -= len(m.CoverRightBackgroundColor)
		copy(dAtA[i:], m.CoverRightBackgroundColor)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightBackgroundColor)))
		i--
		dAtA[i] = 0x52
	}
	if m.CoverRightIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverRightIcon))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x42
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverBlur != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverBlur))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverGif) > 0 {
		i -= len(m.CoverGif)
		copy(dAtA[i:], m.CoverGif)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverGif)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CanPlay != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x40
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RcmdReason) > 0 {
		i -= len(m.RcmdReason)
		copy(dAtA[i:], m.RcmdReason)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RcmdReason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CoverRightButton != nil {
		{
			size, err := m.CoverRightButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoverLeftText) > 0 {
		i -= len(m.CoverLeftText)
		copy(dAtA[i:], m.CoverLeftText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MiddleCoverV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiddleCoverV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiddleCoverV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ratio != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.Ratio))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LargeCoverV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LargeCoverV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LargeCoverV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShowBottom != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.ShowBottom))
		i--
		dAtA[i] = 0x70
	}
	if m.ShowTop != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.ShowTop))
		i--
		dAtA[i] = 0x68
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.CanPlay != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x58
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RcmdReason) > 0 {
		i -= len(m.RcmdReason)
		copy(dAtA[i:], m.RcmdReason)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RcmdReason)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CoverRightButton != nil {
		{
			size, err := m.CoverRightButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDouble(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MoreText) > 0 {
		i -= len(m.MoreText)
		copy(dAtA[i:], m.MoreText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.MoreText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MoreUri) > 0 {
		i -= len(m.MoreUri)
		copy(dAtA[i:], m.MoreUri)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.MoreUri)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TitleIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.TitleIcon))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreeItemV2Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreeItemV2Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreeItemV2Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DescIcon_2 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.DescIcon_2))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DescText_2) > 0 {
		i -= len(m.DescText_2)
		copy(dAtA[i:], m.DescText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.DescText_2)))
		i--
		dAtA[i] = 0x2a
	}
	if m.DescIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.DescIcon_1))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DescText_1) > 0 {
		i -= len(m.DescText_1)
		copy(dAtA[i:], m.DescText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.DescText_1)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CoverLeftIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverV4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV4) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV4) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TitleRightPic != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.TitleRightPic))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TitleRightText) > 0 {
		i -= len(m.TitleRightText)
		copy(dAtA[i:], m.TitleRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.TitleRightText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverBadge) > 0 {
		i -= len(m.CoverBadge)
		copy(dAtA[i:], m.CoverBadge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverBadge)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TwoItemV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwoItemV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TwoItemV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDouble(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TwoItemV2Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwoItemV2Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TwoItemV2Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDouble(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MoreText) > 0 {
		i -= len(m.MoreText)
		copy(dAtA[i:], m.MoreText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.MoreText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MoreUri) > 0 {
		i -= len(m.MoreUri)
		copy(dAtA[i:], m.MoreUri)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.MoreUri)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreePicV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreePicV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreePicV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RcmdReason) > 0 {
		i -= len(m.RcmdReason)
		copy(dAtA[i:], m.RcmdReason)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RcmdReason)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CoverRightBackgroundColor) > 0 {
		i -= len(m.CoverRightBackgroundColor)
		copy(dAtA[i:], m.CoverRightBackgroundColor)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightBackgroundColor)))
		i--
		dAtA[i] = 0x5a
	}
	if m.CoverRightIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverRightIcon))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RightCover_2) > 0 {
		i -= len(m.RightCover_2)
		copy(dAtA[i:], m.RightCover_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RightCover_2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RightCover_1) > 0 {
		i -= len(m.RightCover_1)
		copy(dAtA[i:], m.RightCover_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RightCover_1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LeftCover) > 0 {
		i -= len(m.LeftCover)
		copy(dAtA[i:], m.LeftCover)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.LeftCover)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OnePicV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnePicV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnePicV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RcmdReason) > 0 {
		i -= len(m.RcmdReason)
		copy(dAtA[i:], m.RcmdReason)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RcmdReason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CoverRightBackgroundColor) > 0 {
		i -= len(m.CoverRightBackgroundColor)
		copy(dAtA[i:], m.CoverRightBackgroundColor)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightBackgroundColor)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoverRightIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverRightIcon))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LargeCoverV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LargeCoverV3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LargeCoverV3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OfficialIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.OfficialIcon))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x52
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x42
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x32
	}
	if m.BottomRcmdReasonStyle != nil {
		{
			size, err := m.BottomRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TopRcmdReasonStyle != nil {
		{
			size, err := m.TopRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoverGif) > 0 {
		i -= len(m.CoverGif)
		copy(dAtA[i:], m.CoverGif)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverGif)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreePicV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreePicV3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreePicV3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CoverRightBackgroundColor) > 0 {
		i -= len(m.CoverRightBackgroundColor)
		copy(dAtA[i:], m.CoverRightBackgroundColor)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightBackgroundColor)))
		i--
		dAtA[i] = 0x5a
	}
	if m.CoverRightIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverRightIcon))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RightCover_2) > 0 {
		i -= len(m.RightCover_2)
		copy(dAtA[i:], m.RightCover_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RightCover_2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RightCover_1) > 0 {
		i -= len(m.RightCover_1)
		copy(dAtA[i:], m.RightCover_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.RightCover_1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LeftCover) > 0 {
		i -= len(m.LeftCover)
		copy(dAtA[i:], m.LeftCover)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.LeftCover)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OnePicV3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnePicV3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnePicV3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CoverRightBackgroundColor) > 0 {
		i -= len(m.CoverRightBackgroundColor)
		copy(dAtA[i:], m.CoverRightBackgroundColor)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightBackgroundColor)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoverRightIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverRightIcon))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverV7) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV7) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV7) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverV9) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverV9) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverV9) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeftBottomRcmdReasonStyle != nil {
		{
			size, err := m.LeftBottomRcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.LeftCoverBadgeStyle != nil {
		{
			size, err := m.LeftCoverBadgeStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Up != nil {
		{
			size, err := m.Up.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CanPlay != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CanPlay))
		i--
		dAtA[i] = 0x40
	}
	if m.CoverRightIcon != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverRightIcon))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallCoverConvergeV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallCoverConvergeV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallCoverConvergeV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyleV2 != nil {
		{
			size, err := m.RcmdReasonStyleV2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RcmdReasonStyle != nil {
		{
			size, err := m.RcmdReasonStyle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.CoverRightTopText) > 0 {
		i -= len(m.CoverRightTopText)
		copy(dAtA[i:], m.CoverRightTopText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightTopText)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CoverRightText) > 0 {
		i -= len(m.CoverRightText)
		copy(dAtA[i:], m.CoverRightText)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverRightText)))
		i--
		dAtA[i] = 0x32
	}
	if m.CoverLeftIcon_2 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_2))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CoverLeftText_2) > 0 {
		i -= len(m.CoverLeftText_2)
		copy(dAtA[i:], m.CoverLeftText_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_2)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoverLeftIcon_1 != 0 {
		i = encodeVarintDouble(dAtA, i, uint64(m.CoverLeftIcon_1))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CoverLeftText_1) > 0 {
		i -= len(m.CoverLeftText_1)
		copy(dAtA[i:], m.CoverLeftText_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.CoverLeftText_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmallChannelSpecial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmallChannelSpecial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmallChannelSpecial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RcmdReasonStyle_2 != nil {
		{
			size, err := m.RcmdReasonStyle_2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Badge) > 0 {
		i -= len(m.Badge)
		copy(dAtA[i:], m.Badge)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Badge)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Desc_2) > 0 {
		i -= len(m.Desc_2)
		copy(dAtA[i:], m.Desc_2)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc_2)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc_1) > 0 {
		i -= len(m.Desc_1)
		copy(dAtA[i:], m.Desc_1)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Desc_1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BgCover) > 0 {
		i -= len(m.BgCover)
		copy(dAtA[i:], m.BgCover)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.BgCover)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Text) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintDouble(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDouble(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDouble(dAtA []byte, offset int, v uint64) int {
	offset -= sovDouble(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DoubleCards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Card != nil {
		n += m.Card.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoubleCards_SmallCoverV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmallCoverV2 != nil {
		l = m.SmallCoverV2.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	return n
}
func (m *DoubleCards_OnePicV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnePicV2 != nil {
		l = m.OnePicV2.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	return n
}
func (m *DoubleCards_ThreePicV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ThreePicV2 != nil {
		l = m.ThreePicV2.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	return n
}
func (m *SmallCoverV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverGif)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverBlur != 0 {
		n += 1 + sovDouble(uint64(m.CoverBlur))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverRightIcon != 0 {
		n += 1 + sovDouble(uint64(m.CoverRightIcon))
	}
	l = len(m.CoverRightBackgroundColor)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Subtitle)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.RcmdReason)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 2 + sovDouble(uint64(m.OfficialIcon))
	}
	if m.CanPlay != 0 {
		n += 2 + sovDouble(uint64(m.CanPlay))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 2 + l + sovDouble(uint64(l))
	}
	if m.RcmdReasonStyleV2 != nil {
		l = m.RcmdReasonStyleV2.Size()
		n += 2 + l + sovDouble(uint64(l))
	}
	if m.LikeButton != nil {
		l = m.LikeButton.Size()
		n += 2 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverV3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverRightButton != nil {
		l = m.CoverRightButton.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.RcmdReason)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovDouble(uint64(m.OfficialIcon))
	}
	if m.CanPlay != 0 {
		n += 1 + sovDouble(uint64(m.CanPlay))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MiddleCoverV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.Ratio != 0 {
		n += 1 + sovDouble(uint64(m.Ratio))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LargeCoverV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverRightButton != nil {
		l = m.CoverRightButton.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.RcmdReason)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovDouble(uint64(m.OfficialIcon))
	}
	if m.CanPlay != 0 {
		n += 1 + sovDouble(uint64(m.CanPlay))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.ShowTop != 0 {
		n += 1 + sovDouble(uint64(m.ShowTop))
	}
	if m.ShowBottom != 0 {
		n += 1 + sovDouble(uint64(m.ShowBottom))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.TitleIcon != 0 {
		n += 1 + sovDouble(uint64(m.TitleIcon))
	}
	l = len(m.MoreUri)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.MoreText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDouble(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreeItemV2Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon))
	}
	l = len(m.DescText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.DescIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.DescIcon_1))
	}
	l = len(m.DescText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.DescIcon_2 != 0 {
		n += 1 + sovDouble(uint64(m.DescIcon_2))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverV4) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverBadge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.TitleRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.TitleRightPic != 0 {
		n += 1 + sovDouble(uint64(m.TitleRightPic))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TwoItemV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDouble(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TwoItemV2Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MultiItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.MoreUri)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.MoreText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDouble(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreePicV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.LeftCover)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.RightCover_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.RightCover_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverRightIcon != 0 {
		n += 1 + sovDouble(uint64(m.CoverRightIcon))
	}
	l = len(m.CoverRightBackgroundColor)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.RcmdReason)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 2 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OnePicV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverRightIcon != 0 {
		n += 1 + sovDouble(uint64(m.CoverRightIcon))
	}
	l = len(m.CoverRightBackgroundColor)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.RcmdReason)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LargeCoverV3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverGif)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.TopRcmdReasonStyle != nil {
		l = m.TopRcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.BottomRcmdReasonStyle != nil {
		l = m.BottomRcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.OfficialIcon != 0 {
		n += 1 + sovDouble(uint64(m.OfficialIcon))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ThreePicV3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.LeftCover)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.RightCover_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.RightCover_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverRightIcon != 0 {
		n += 1 + sovDouble(uint64(m.CoverRightIcon))
	}
	l = len(m.CoverRightBackgroundColor)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OnePicV3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverRightIcon != 0 {
		n += 1 + sovDouble(uint64(m.CoverRightIcon))
	}
	l = len(m.CoverRightBackgroundColor)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverV7) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverV9) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverRightIcon != 0 {
		n += 1 + sovDouble(uint64(m.CoverRightIcon))
	}
	if m.CanPlay != 0 {
		n += 1 + sovDouble(uint64(m.CanPlay))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.Up != nil {
		l = m.Up.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.LeftCoverBadgeStyle != nil {
		l = m.LeftCoverBadgeStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.LeftBottomRcmdReasonStyle != nil {
		l = m.LeftBottomRcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallCoverConvergeV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverLeftText_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_1 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_1))
	}
	l = len(m.CoverLeftText_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.CoverLeftIcon_2 != 0 {
		n += 1 + sovDouble(uint64(m.CoverLeftIcon_2))
	}
	l = len(m.CoverRightText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.CoverRightTopText)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.RcmdReasonStyle != nil {
		l = m.RcmdReasonStyle.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.RcmdReasonStyleV2 != nil {
		l = m.RcmdReasonStyleV2.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SmallChannelSpecial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.BgCover)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Desc_1)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Desc_2)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Badge)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.RcmdReasonStyle_2 != nil {
		l = m.RcmdReasonStyle_2.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovDouble(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovDouble(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDouble(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDouble(x uint64) (n int) {
	return sovDouble(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DoubleCards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoubleCards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoubleCards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallCoverV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SmallCoverV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &DoubleCards_SmallCoverV2{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnePicV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OnePicV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &DoubleCards_OnePicV2{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreePicV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ThreePicV2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Card = &DoubleCards_ThreePicV2{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverGif", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverGif = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBlur", wireType)
			}
			m.CoverBlur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverBlur |= go_gateway_app_app_svr_app_card_interface_model.BlurStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightIcon", wireType)
			}
			m.CoverRightIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverRightIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightBackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightBackgroundColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyleV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyleV2 == nil {
				m.RcmdReasonStyleV2 = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyleV2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LikeButton == nil {
				m.LikeButton = &LikeButton{}
			}
			if err := m.LikeButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoverRightButton == nil {
				m.CoverRightButton = &Button{}
			}
			if err := m.CoverRightButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MiddleCoverV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiddleCoverV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiddleCoverV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			m.Ratio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ratio |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LargeCoverV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LargeCoverV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LargeCoverV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoverRightButton == nil {
				m.CoverRightButton = &Button{}
			}
			if err := m.CoverRightButton.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowTop", wireType)
			}
			m.ShowTop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowTop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowBottom", wireType)
			}
			m.ShowBottom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowBottom |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleIcon", wireType)
			}
			m.TitleIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ThreeItemV2Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreeItemV2Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreeItemV2Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreeItemV2Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon", wireType)
			}
			m.CoverLeftIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescIcon_1", wireType)
			}
			m.DescIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescIcon_2", wireType)
			}
			m.DescIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverBadge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverBadge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleRightPic", wireType)
			}
			m.TitleRightPic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleRightPic |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwoItemV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwoItemV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwoItemV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TwoItemV2Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwoItemV2Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwoItemV2Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwoItemV2Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &DoubleCards{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreePicV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreePicV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreePicV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightCover_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightCover_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightCover_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightCover_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightIcon", wireType)
			}
			m.CoverRightIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverRightIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightBackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightBackgroundColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnePicV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnePicV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnePicV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightIcon", wireType)
			}
			m.CoverRightIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverRightIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightBackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightBackgroundColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RcmdReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LargeCoverV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LargeCoverV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LargeCoverV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverGif", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverGif = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopRcmdReasonStyle == nil {
				m.TopRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.TopRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BottomRcmdReasonStyle == nil {
				m.BottomRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.BottomRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIcon", wireType)
			}
			m.OfficialIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreePicV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreePicV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreePicV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightCover_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightCover_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightCover_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightCover_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightIcon", wireType)
			}
			m.CoverRightIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverRightIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightBackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightBackgroundColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnePicV3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnePicV3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnePicV3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightIcon", wireType)
			}
			m.CoverRightIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverRightIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightBackgroundColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightBackgroundColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV7) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV7: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV7: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverV9) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverV9: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverV9: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightIcon", wireType)
			}
			m.CoverRightIcon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverRightIcon |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPlay", wireType)
			}
			m.CanPlay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanPlay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Up == nil {
				m.Up = &Up{}
			}
			if err := m.Up.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCoverBadgeStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftCoverBadgeStyle == nil {
				m.LeftCoverBadgeStyle = &ReasonStyle{}
			}
			if err := m.LeftCoverBadgeStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftBottomRcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftBottomRcmdReasonStyle == nil {
				m.LeftBottomRcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.LeftBottomRcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallCoverConvergeV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallCoverConvergeV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallCoverConvergeV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_1", wireType)
			}
			m.CoverLeftIcon_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_1 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftText_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverLeftText_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverLeftIcon_2", wireType)
			}
			m.CoverLeftIcon_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoverLeftIcon_2 |= go_gateway_app_app_svr_app_card_interface_model.Icon(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverRightTopText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverRightTopText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle == nil {
				m.RcmdReasonStyle = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyleV2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyleV2 == nil {
				m.RcmdReasonStyleV2 = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyleV2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmallChannelSpecial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmallChannelSpecial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmallChannelSpecial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Badge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcmdReasonStyle_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RcmdReasonStyle_2 == nil {
				m.RcmdReasonStyle_2 = &ReasonStyle{}
			}
			if err := m.RcmdReasonStyle_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Text) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &Base{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDouble
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDouble
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDouble(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDouble
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDouble(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDouble
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDouble
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDouble
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDouble
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDouble
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDouble        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDouble          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDouble = fmt.Errorf("proto: unexpected end of group")
)
