// Code generated by kratos tool btsgen. DO NOT EDIT.

/*
  Package poll is a generated cache proxy package.
  It is generated from:
  type _bts interface {
		// bts: -nullcache=&model.PollVoteUserStat{Id:-1} -check_null_code=$!=nil&&$.Id==-1 -struct_name=Dao
		LastPollVoteUserStat(ctx context.Context, mid int64, pollID int64) (*model.PollVoteUserStat, error)

		// bts: -nullcache=&model.PollVoteUserStat{Id:-1} -check_null_code=$!=nil&&$.Id==-1 -struct_name=Dao
		PollVoteUserStatByDate(ctx context.Context, mid int64, pollID int64, date time.Time) (*model.PollVoteUserStat, error)
	}
*/

package poll

import (
	"context"

	"go-common/library/cache"
	model "go-gateway/app/web-svr/activity/interface/model/poll"
	"time"
)

var _ _bts

// LastPollVoteUserStat get data from cache if miss will call source method, then add to cache.
func (d *Dao) LastPollVoteUserStat(c context.Context, mid int64, pollID int64) (res *model.PollVoteUserStat, err error) {
	addCache := true
	res, err = d.CacheLastPollVoteUserStat(c, mid, pollID)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res != nil && res.Id == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:LastPollVoteUserStat")
		return
	}
	cache.MetricMisses.Inc("bts:LastPollVoteUserStat")
	res, err = d.RawLastPollVoteUserStat(c, mid, pollID)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.PollVoteUserStat{Id: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCacheLastPollVoteUserStat(c, mid, miss, pollID)
	})
	return
}

// PollVoteUserStatByDate get data from cache if miss will call source method, then add to cache.
func (d *Dao) PollVoteUserStatByDate(c context.Context, mid int64, pollID int64, date time.Time) (res *model.PollVoteUserStat, err error) {
	addCache := true
	res, err = d.CachePollVoteUserStatByDate(c, mid, pollID, date)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res != nil && res.Id == -1 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:PollVoteUserStatByDate")
		return
	}
	cache.MetricMisses.Inc("bts:PollVoteUserStatByDate")
	res, err = d.RawPollVoteUserStatByDate(c, mid, pollID, date)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.PollVoteUserStat{Id: -1}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCachePollVoteUserStatByDate(c, mid, miss, pollID, date)
	})
	return
}
