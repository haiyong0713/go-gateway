// Code generated by kratos tool redisgen. DO NOT EDIT.

/*
  Package kvstore is a generated redis cache package.
  It is generated from:
  type _redis interface {
		// redis: -struct_name=KVStore -key=StorePreferenceCacheKey -encode=json
		CacheUserPreferenceBytes(ctx context.Context, keys []string) (map[string]*DummyMessage, error)

		// redis: -struct_name=KVStore -key=StorePreferenceCacheKey -expire=d.cfg.PreferenceExpire -encode=json
		AddCacheUserPreferenceBytes(ctx context.Context, values map[string]*DummyMessage) error

		// redis: -struct_name=KVStore -key=StorePreferenceCacheKey
		DelCacheUserPreferenceBytes(ctx context.Context, keys []string) error
	}
*/

package kvstore

import (
	"context"
	"encoding/json"

	"go-common/library/cache/redis"
	"go-common/library/log"
)

var _ _redis

// CacheUserPreferenceBytes get data from redis
func (d *KVStore) CacheUserPreferenceBytes(c context.Context, ids []string) (res map[string]*DummyMessage, err error) {
	l := len(ids)
	if l == 0 {
		return
	}
	keysMap := make(map[string]string, l)
	idxMap := make(map[int]string, l)
	args := redis.Args{}
	for idx, id := range ids {
		key := StorePreferenceCacheKey(id)
		idxMap[idx] = key
		keysMap[key] = id
		args = args.Add(key)
	}
	values, err := redis.ByteSlices(d.redis.Do(c, "MGET", args...))
	if err != nil {
		log.Errorc(c, "d.CacheUserPreferenceBytes() error(%v)", err)
		return
	}
	for idx, temp := range values {
		if temp == nil {
			continue
		}
		var v *DummyMessage
		v = &DummyMessage{}
		err = json.Unmarshal(temp, v)
		if err != nil {
			log.Errorc(c, "d.CacheUserPreferenceBytes() err: %+v", err)
			return
		}
		if res == nil {
			res = make(map[string]*DummyMessage, len(values))
		}
		key := idxMap[idx]
		res[keysMap[key]] = v
	}
	return
}

// AddCacheUserPreferenceBytes Set data to redis
func (d *KVStore) AddCacheUserPreferenceBytes(c context.Context, values map[string]*DummyMessage) (err error) {
	if len(values) == 0 {
		return
	}
	p := d.redis.Pipeline()
	for id, val := range values {
		key := StorePreferenceCacheKey(id)
		var bs []byte
		bs, err = json.Marshal(val)
		if err != nil {
			log.Errorc(c, "d.AddCacheUserPreferenceBytes() err: %+v", err)
			return
		}
		expire := d.cfg.PreferenceExpire
		p.Send("set", key, bs, "ex", expire)
	}
	if _, err = p.Exec(c); err != nil {
		log.Errorc(c, "d.AddCacheUserPreferenceBytes() err: %v", err)
	}
	return
}

// DelCacheUserPreferenceBytes delete data from redis
func (d *KVStore) DelCacheUserPreferenceBytes(c context.Context, ids []string) (err error) {
	if len(ids) == 0 {
		return
	}
	args := redis.Args{}
	for _, id := range ids {
		key := StorePreferenceCacheKey(id)
		args = args.Add(key)
	}
	if _, err = d.redis.Do(c, "del", args...); err != nil {
		log.Errorc(c, "d.DelCacheUserPreferenceBytes() err: %+v", err)
		return
	}
	return
}
