// Code generated by kratos tool btsgen. DO NOT EDIT.

/*
  Package dao is a generated cache proxy package.
  It is generated from:
  type Dao interface {
		Close()
		Ping(ctx context.Context) (err error)
		// bts: -nullcache=[]*model.MemberPrivacy{{ID:-1}} -check_null_code=len($)==1&&$[0]!=nil&&$[0].ID==-1 -singleflight=true
		PrivacySetting(ctx context.Context, req *pb.PrivacySettingReq) (reply []*model.MemberPrivacy, err error)
		UpdatePrivacySetting(ctx context.Context, req *pb.UpdatePrivacysReq) error
	}
*/

package dao

import (
	"context"

	"go-common/library/cache"
	pb "go-gateway/app/web-svr/space/service/api"
	"go-gateway/app/web-svr/space/service/internal/model"

	"golang.org/x/sync/singleflight"
)

var cacheSingleFlights = [1]*singleflight.Group{{}}

// PrivacySetting get data from cache if miss will call source method, then add to cache.
func (d *dao) PrivacySetting(c context.Context, req *pb.PrivacySettingReq) (res []*model.MemberPrivacy, err error) {
	addCache := true
	res, err = d.CachePrivacySetting(c, req)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if len(res) == 1 && res[0] != nil && res[0].ID == -1 {
			res = nil
		}
	}()
	if len(res) != 0 {
		cache.MetricHits.Inc("bts:PrivacySetting")
		return
	}
	var rr interface{}
	sf := d.cacheSFPrivacySetting(req)
	rr, err, _ = cacheSingleFlights[0].Do(sf, func() (r interface{}, e error) {
		cache.MetricMisses.Inc("bts:PrivacySetting")
		r, e = d.RawPrivacySetting(c, req)
		return
	})
	res = rr.([]*model.MemberPrivacy)
	if err != nil {
		return
	}
	miss := res
	if len(miss) == 0 {
		miss = []*model.MemberPrivacy{{ID: -1}}
	}
	if !addCache {
		return
	}
	d.cache.Do(c, func(c context.Context) {
		d.AddCachePrivacySetting(c, req, miss)
	})
	return
}
