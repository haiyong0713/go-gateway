// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-common/app/interface/openplatform/article/model/search/search.proto

/*
Package bili_search_rpc_tagbox is a generated protocol buffer package.

It is generated from these files:

	go-common/app/interface/openplatform/article/model/search/search.proto

It has these top-level messages:

	SourceTypeConst
	TagboxRequest
	TagboxResponse
*/
package bili_search_rpc_tagbox

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SourceTypeConst struct {
	SOURCE_ARTICLE   *string `protobuf:"bytes,1,opt,name=SOURCE_ARTICLE,json=SOURCEARTICLE,def=article" json:"SOURCE_ARTICLE,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SourceTypeConst) Reset()                    { *m = SourceTypeConst{} }
func (m *SourceTypeConst) String() string            { return proto.CompactTextString(m) }
func (*SourceTypeConst) ProtoMessage()               {}
func (*SourceTypeConst) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{0} }

const Default_SourceTypeConst_SOURCE_ARTICLE string = "article"

func (m *SourceTypeConst) GetSOURCE_ARTICLE() string {
	if m != nil && m.SOURCE_ARTICLE != nil {
		return *m.SOURCE_ARTICLE
	}
	return Default_SourceTypeConst_SOURCE_ARTICLE
}

type TagboxRequest struct {
	Id               *int32  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	SourceType       *string `protobuf:"bytes,2,req,name=source_type,json=sourceType" json:"source_type,omitempty"`
	Content          *string `protobuf:"bytes,3,req,name=content" json:"content,omitempty"`
	Trackid          *int32  `protobuf:"varint,4,req,name=trackid" json:"trackid,omitempty"`
	Remarks          *string `protobuf:"bytes,5,opt,name=remarks" json:"remarks,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagboxRequest) Reset()                    { *m = TagboxRequest{} }
func (m *TagboxRequest) String() string            { return proto.CompactTextString(m) }
func (*TagboxRequest) ProtoMessage()               {}
func (*TagboxRequest) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{1} }

func (m *TagboxRequest) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TagboxRequest) GetSourceType() string {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return ""
}

func (m *TagboxRequest) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *TagboxRequest) GetTrackid() int32 {
	if m != nil && m.Trackid != nil {
		return *m.Trackid
	}
	return 0
}

func (m *TagboxRequest) GetRemarks() string {
	if m != nil && m.Remarks != nil {
		return *m.Remarks
	}
	return ""
}

type TagboxResponse struct {
	ExecCode         *int32   `protobuf:"varint,1,req,name=exec_code,json=execCode" json:"exec_code,omitempty"`
	Id               *int32   `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	Keywords         []string `protobuf:"bytes,3,rep,name=keywords" json:"keywords,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TagboxResponse) Reset()                    { *m = TagboxResponse{} }
func (m *TagboxResponse) String() string            { return proto.CompactTextString(m) }
func (*TagboxResponse) ProtoMessage()               {}
func (*TagboxResponse) Descriptor() ([]byte, []int) { return fileDescriptorSearch, []int{2} }

func (m *TagboxResponse) GetExecCode() int32 {
	if m != nil && m.ExecCode != nil {
		return *m.ExecCode
	}
	return 0
}

func (m *TagboxResponse) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TagboxResponse) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func init() {
	proto.RegisterType((*SourceTypeConst)(nil), "bili.search.rpc.tagbox.SourceTypeConst")
	proto.RegisterType((*TagboxRequest)(nil), "bili.search.rpc.tagbox.TagboxRequest")
	proto.RegisterType((*TagboxResponse)(nil), "bili.search.rpc.tagbox.TagboxResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TagboxService service

type TagboxServiceClient interface {
	Segment(ctx context.Context, in *TagboxRequest, opts ...grpc.CallOption) (*TagboxResponse, error)
}

type tagboxServiceClient struct {
	cc *grpc.ClientConn
}

func NewTagboxServiceClient(cc *grpc.ClientConn) TagboxServiceClient {
	return &tagboxServiceClient{cc}
}

func (c *tagboxServiceClient) Segment(ctx context.Context, in *TagboxRequest, opts ...grpc.CallOption) (*TagboxResponse, error) {
	out := new(TagboxResponse)
	err := grpc.Invoke(ctx, "/bili.search.rpc.tagbox.TagboxService/segment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TagboxService service

type TagboxServiceServer interface {
	Segment(context.Context, *TagboxRequest) (*TagboxResponse, error)
}

func RegisterTagboxServiceServer(s *grpc.Server, srv TagboxServiceServer) {
	s.RegisterService(&_TagboxService_serviceDesc, srv)
}

func _TagboxService_Segment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagboxServiceServer).Segment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bili.search.rpc.tagbox.TagboxService/Segment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagboxServiceServer).Segment(ctx, req.(*TagboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagboxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bili.search.rpc.tagbox.TagboxService",
	HandlerType: (*TagboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "segment",
			Handler:    _TagboxService_Segment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go-common/app/interface/openplatform/article/model/search/search.proto",
}

func (m *SourceTypeConst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SourceTypeConst) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SOURCE_ARTICLE != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(*m.SOURCE_ARTICLE)))
		i += copy(dAtA[i:], *m.SOURCE_ARTICLE)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagboxRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(*m.Id))
	}
	if m.SourceType == nil {
		return 0, proto.NewRequiredNotSetError("source_type")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(*m.SourceType)))
		i += copy(dAtA[i:], *m.SourceType)
	}
	if m.Content == nil {
		return 0, proto.NewRequiredNotSetError("content")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(*m.Content)))
		i += copy(dAtA[i:], *m.Content)
	}
	if m.Trackid == nil {
		return 0, proto.NewRequiredNotSetError("trackid")
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSearch(dAtA, i, uint64(*m.Trackid))
	}
	if m.Remarks != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSearch(dAtA, i, uint64(len(*m.Remarks)))
		i += copy(dAtA[i:], *m.Remarks)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagboxResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExecCode == nil {
		return 0, proto.NewRequiredNotSetError("exec_code")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSearch(dAtA, i, uint64(*m.ExecCode))
	}
	if m.Id == nil {
		return 0, proto.NewRequiredNotSetError("id")
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSearch(dAtA, i, uint64(*m.Id))
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSearch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SourceTypeConst) Size() (n int) {
	var l int
	_ = l
	if m.SOURCE_ARTICLE != nil {
		l = len(*m.SOURCE_ARTICLE)
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagboxRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovSearch(uint64(*m.Id))
	}
	if m.SourceType != nil {
		l = len(*m.SourceType)
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Content != nil {
		l = len(*m.Content)
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Trackid != nil {
		n += 1 + sovSearch(uint64(*m.Trackid))
	}
	if m.Remarks != nil {
		l = len(*m.Remarks)
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagboxResponse) Size() (n int) {
	var l int
	_ = l
	if m.ExecCode != nil {
		n += 1 + sovSearch(uint64(*m.ExecCode))
	}
	if m.Id != nil {
		n += 1 + sovSearch(uint64(*m.Id))
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSearch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSearch(x uint64) (n int) {
	return sovSearch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SourceTypeConst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceTypeConst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceTypeConst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SOURCE_ARTICLE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SOURCE_ARTICLE = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagboxRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SourceType = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Content = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trackid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Trackid = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Remarks = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("source_type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("content")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("trackid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagboxResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecCode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("exec_code")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSearch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSearch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSearch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearch   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("go-common/app/interface/openplatform/article/model/search/search.proto", fileDescriptorSearch)
}

var fileDescriptorSearch = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x86, 0x59, 0xb9, 0xc6, 0xd6, 0x16, 0xdb, 0xa0, 0x43, 0x59, 0x5c, 0x70, 0x85, 0xa1, 0x45,
	0x97, 0x4a, 0xd0, 0x63, 0x6f, 0xae, 0x70, 0xa1, 0x50, 0x28, 0xac, 0x5d, 0x68, 0x4f, 0x66, 0xbd,
	0x1a, 0x3b, 0x8b, 0x25, 0xcd, 0x66, 0x77, 0x9d, 0xd8, 0xb7, 0x3c, 0x41, 0x9e, 0x2b, 0xc7, 0x3c,
	0x42, 0xf0, 0x93, 0x04, 0xc9, 0x92, 0x21, 0x10, 0xc8, 0x49, 0xfc, 0xf3, 0x89, 0xf9, 0xbf, 0x1d,
	0xfa, 0x73, 0x8b, 0x5f, 0x25, 0x16, 0x05, 0x96, 0x89, 0xd0, 0x3a, 0x51, 0xa5, 0x03, 0xb3, 0x11,
	0x12, 0x12, 0xd4, 0x50, 0xea, 0x5c, 0xb8, 0x0d, 0x9a, 0x22, 0x11, 0xc6, 0x29, 0x99, 0x43, 0x52,
	0x60, 0x06, 0x79, 0x62, 0x41, 0x18, 0x79, 0xd5, 0x7c, 0x62, 0x6d, 0xd0, 0x61, 0xf0, 0x61, 0xad,
	0x72, 0x15, 0x37, 0x23, 0xa3, 0x65, 0xec, 0xc4, 0x76, 0x8d, 0x87, 0xe9, 0x8c, 0x8e, 0x16, 0xb8,
	0x37, 0x12, 0x96, 0x47, 0x0d, 0x29, 0x96, 0xd6, 0x05, 0x31, 0x1d, 0x2e, 0xfe, 0xfc, 0xe5, 0xe9,
	0x7c, 0x35, 0xe3, 0xcb, 0x5f, 0xe9, 0xef, 0x39, 0x23, 0x21, 0x89, 0xfc, 0xef, 0xbd, 0xa6, 0x85,
	0x0f, 0xce, 0xb8, 0xa1, 0xd3, 0x7b, 0x42, 0x07, 0xcb, 0x7a, 0x1b, 0x87, 0xeb, 0x3d, 0x58, 0x17,
	0x0c, 0xa9, 0xa7, 0x32, 0x46, 0x42, 0x2f, 0xea, 0x72, 0x4f, 0x65, 0xc1, 0x27, 0xfa, 0xde, 0xd6,
	0x25, 0x2b, 0x77, 0xd4, 0xc0, 0xbc, 0xd0, 0x8b, 0x7c, 0x4e, 0xed, 0xa5, 0x37, 0x60, 0xb4, 0x27,
	0xb1, 0x74, 0x50, 0x3a, 0xd6, 0xa9, 0x61, 0x1b, 0x2b, 0xe2, 0x8c, 0x90, 0x3b, 0x95, 0xb1, 0x77,
	0xf5, 0xbe, 0x36, 0x56, 0xc4, 0x40, 0x21, 0xcc, 0xce, 0xb2, 0x6e, 0xe5, 0xc7, 0xdb, 0x38, 0xfd,
	0x4f, 0x87, 0xad, 0x8f, 0xd5, 0x58, 0x5a, 0x08, 0x3e, 0x52, 0x1f, 0x0e, 0x20, 0x57, 0x12, 0x33,
	0x68, 0xbc, 0xfa, 0xd5, 0x20, 0xc5, 0x0c, 0x1a, 0x5b, 0xef, 0x62, 0x3b, 0xa6, 0xfd, 0x1d, 0x1c,
	0x6f, 0xd1, 0x64, 0x96, 0x75, 0xc2, 0x4e, 0xe4, 0xf3, 0x4b, 0xfe, 0xa6, 0xda, 0xa7, 0x2e, 0xc0,
	0xdc, 0x28, 0x09, 0xc1, 0x3f, 0xda, 0xb3, 0xb0, 0x2d, 0x2a, 0xd5, 0xcf, 0xf1, 0xeb, 0x37, 0x8e,
	0x5f, 0x1c, 0x67, 0xfc, 0xe5, 0xad, 0xdf, 0xce, 0xce, 0x3f, 0x46, 0x0f, 0xa7, 0x09, 0x79, 0x3c,
	0x4d, 0xc8, 0xd3, 0x69, 0x42, 0xee, 0x08, 0x79, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x97, 0x74,
	0x50, 0x0b, 0x02, 0x00, 0x00,
}
