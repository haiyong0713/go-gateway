// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: go-gateway/app/app-svr/fawkes/service/api/app/open/open.proto

/*
Package open is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

It is generated from these files:

	go-gateway/app/app-svr/fawkes/service/api/app/open/open.proto
*/
package open

import (
	"context"

	bm "go-common/library/net/http/blademaster"
	"go-common/library/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathOpenCreateProject = "/x/admin/fawkes/app/open/project/add"
var PathOpenGetProjectInfo = "/x/admin/fawkes/app/open/project/info"
var PathOpenGetProjectInfoList = "/x/admin/fawkes/app/open/project/info/list"
var PathOpenUpdateProject = "/x/admin/fawkes/app/open/project/update"
var PathOpenActiveProject = "/x/admin/fawkes/app/open/project/active"
var PathOpenAddPath = "/x/admin/fawkes/app/open/project/path/enable"
var PathOpenUpdatePath = "/x/admin/fawkes/app/open/project/path/appkey/update"
var PathOpenDeletePath = "/x/admin/fawkes/app/open/project/path/disable"
var PathOpenPathList = "/x/admin/fawkes/app/open/project/path/list"
var PathOpenGetOpenApiList = "/x/admin/fawkes/app/open/project/apis"

// OpenBMServer is the server API for Open service.
type OpenBMServer interface {
	// 新增项目
	CreateProject(ctx context.Context, req *CreateProjectReq) (resp *google_protobuf1.Empty, err error)

	// 获取项目信息
	GetProjectInfo(ctx context.Context, req *GetProjectInfoReq) (resp *GetProjectInfoResp, err error)

	// 获取项目信息列表
	GetProjectInfoList(ctx context.Context, req *GetProjectInfoListReq) (resp *GetProjectInfoListResp, err error)

	// 更新项目信息
	UpdateProject(ctx context.Context, req *UpdateProjectReq) (resp *google_protobuf1.Empty, err error)

	// 删除项目
	ActiveProject(ctx context.Context, req *ActiveProjectReq) (resp *google_protobuf1.Empty, err error)

	// 新建接口权限信息
	AddPath(ctx context.Context, req *AddPathReq) (resp *google_protobuf1.Empty, err error)

	// 更新接口appKey
	UpdatePath(ctx context.Context, req *UpdatePathReq) (resp *google_protobuf1.Empty, err error)

	// 删除接口权限信息
	DeletePath(ctx context.Context, req *DeletePathReq) (resp *DeletePathResp, err error)

	// 接口权限详情列表
	PathList(ctx context.Context, req *PathListReq) (resp *PathListResp, err error)

	// 获取api列表
	GetOpenApiList(ctx context.Context, req *GetOpenApiListReq) (resp *GetOpenApiListResp, err error)
}

var OpenSvc OpenBMServer

func openCreateProject(c *bm.Context) {
	p := new(CreateProjectReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.CreateProject(c, p)
	c.JSON(resp, err)
}

func openGetProjectInfo(c *bm.Context) {
	p := new(GetProjectInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.GetProjectInfo(c, p)
	c.JSON(resp, err)
}

func openGetProjectInfoList(c *bm.Context) {
	p := new(GetProjectInfoListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.GetProjectInfoList(c, p)
	c.JSON(resp, err)
}

func openUpdateProject(c *bm.Context) {
	p := new(UpdateProjectReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.UpdateProject(c, p)
	c.JSON(resp, err)
}

func openActiveProject(c *bm.Context) {
	p := new(ActiveProjectReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.ActiveProject(c, p)
	c.JSON(resp, err)
}

func openAddPath(c *bm.Context) {
	p := new(AddPathReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.AddPath(c, p)
	c.JSON(resp, err)
}

func openUpdatePath(c *bm.Context) {
	p := new(UpdatePathReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.UpdatePath(c, p)
	c.JSON(resp, err)
}

func openDeletePath(c *bm.Context) {
	p := new(DeletePathReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.DeletePath(c, p)
	c.JSON(resp, err)
}

func openPathList(c *bm.Context) {
	p := new(PathListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.PathList(c, p)
	c.JSON(resp, err)
}

func openGetOpenApiList(c *bm.Context) {
	p := new(GetOpenApiListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := OpenSvc.GetOpenApiList(c, p)
	c.JSON(resp, err)
}

// RegisterOpenBMServer Register the blademaster route
func RegisterOpenBMServer(e *bm.Engine, server OpenBMServer) {
	OpenSvc = server
	e.POST("/x/admin/fawkes/app/open/project/add", openCreateProject)
	e.GET("/x/admin/fawkes/app/open/project/info", openGetProjectInfo)
	e.GET("/x/admin/fawkes/app/open/project/info/list", openGetProjectInfoList)
	e.POST("/x/admin/fawkes/app/open/project/update", openUpdateProject)
	e.POST("/x/admin/fawkes/app/open/project/active", openActiveProject)
	e.POST("/x/admin/fawkes/app/open/project/path/enable", openAddPath)
	e.POST("/x/admin/fawkes/app/open/project/path/appkey/update", openUpdatePath)
	e.POST("/x/admin/fawkes/app/open/project/path/disable", openDeletePath)
	e.GET("/x/admin/fawkes/app/open/project/path/list", openPathList)
	e.GET("/x/admin/fawkes/app/open/project/apis", openGetOpenApiList)
}
