// Code generated by kratos tool mcgen. DO NOT EDIT.

/*
  Package poll is a generated mc cache package.
  It is generated from:
  type _mc interface {
		// mc: -key=keyLastPollVoteUserStat -struct_name=Dao
		CacheLastPollVoteUserStat(ctx context.Context, mid int64, pollID int64) (*model.PollVoteUserStat, error)

		// mc: -key=keyLastPollVoteUserStat -expire=172800 -encode=pb -struct_name=Dao
		AddCacheLastPollVoteUserStat(c context.Context, mid int64, value *model.PollVoteUserStat, pollID int64) error

		// mc: -key=keyLastPollVoteUserStat -struct_name=Dao
		DelCacheLastPollVoteUserStat(ctx context.Context, mid int64, pollID int64) error

		// mc: -key=keyPollVoteUserStatByDate -struct_name=Dao
		CachePollVoteUserStatByDate(ctx context.Context, mid int64, pollID int64, date time.Time) (*model.PollVoteUserStat, error)

		// mc: -key=keyPollVoteUserStatByDate -expire=172800 -encode=pb -struct_name=Dao
		AddCachePollVoteUserStatByDate(c context.Context, mid int64, value *model.PollVoteUserStat, pollID int64, date time.Time) error

		// mc: -key=keyPollVoteUserStatByDate -struct_name=Dao
		DelCachePollVoteUserStatByDate(ctx context.Context, mid int64, pollID int64, date time.Time) error
	}
*/

package poll

import (
	"context"
	"fmt"

	"go-common/library/cache/memcache"
	"go-common/library/log"
	model "go-gateway/app/web-svr/activity/interface/model/poll"
	"time"
)

var _ _mc

// CacheLastPollVoteUserStat get data from mc
func (d *Dao) CacheLastPollVoteUserStat(c context.Context, id int64, pollID int64) (res *model.PollVoteUserStat, err error) {
	key := keyLastPollVoteUserStat(id, pollID)
	res = &model.PollVoteUserStat{}
	if err = d.mc.Get(c, key).Scan(res); err != nil {
		res = nil
		if err == memcache.ErrNotFound {
			err = nil
		}
	}
	if err != nil {
		log.Errorv(c, log.KV("CacheLastPollVoteUserStat", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// AddCacheLastPollVoteUserStat Set data to mc
func (d *Dao) AddCacheLastPollVoteUserStat(c context.Context, id int64, val *model.PollVoteUserStat, pollID int64) (err error) {
	if val == nil {
		return
	}
	key := keyLastPollVoteUserStat(id, pollID)
	item := &memcache.Item{Key: key, Object: val, Expiration: 172800, Flags: memcache.FlagProtobuf}
	if err = d.mc.Set(c, item); err != nil {
		log.Errorv(c, log.KV("AddCacheLastPollVoteUserStat", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// DelCacheLastPollVoteUserStat delete data from mc
func (d *Dao) DelCacheLastPollVoteUserStat(c context.Context, id int64, pollID int64) (err error) {
	key := keyLastPollVoteUserStat(id, pollID)
	if err = d.mc.Delete(c, key); err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		log.Errorv(c, log.KV("DelCacheLastPollVoteUserStat", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// CachePollVoteUserStatByDate get data from mc
func (d *Dao) CachePollVoteUserStatByDate(c context.Context, id int64, pollID int64, date time.Time) (res *model.PollVoteUserStat, err error) {
	key := keyPollVoteUserStatByDate(id, pollID, date)
	res = &model.PollVoteUserStat{}
	if err = d.mc.Get(c, key).Scan(res); err != nil {
		res = nil
		if err == memcache.ErrNotFound {
			err = nil
		}
	}
	if err != nil {
		log.Errorv(c, log.KV("CachePollVoteUserStatByDate", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// AddCachePollVoteUserStatByDate Set data to mc
func (d *Dao) AddCachePollVoteUserStatByDate(c context.Context, id int64, val *model.PollVoteUserStat, pollID int64, date time.Time) (err error) {
	if val == nil {
		return
	}
	key := keyPollVoteUserStatByDate(id, pollID, date)
	item := &memcache.Item{Key: key, Object: val, Expiration: 172800, Flags: memcache.FlagProtobuf}
	if err = d.mc.Set(c, item); err != nil {
		log.Errorv(c, log.KV("AddCachePollVoteUserStatByDate", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// DelCachePollVoteUserStatByDate delete data from mc
func (d *Dao) DelCachePollVoteUserStatByDate(c context.Context, id int64, pollID int64, date time.Time) (err error) {
	key := keyPollVoteUserStatByDate(id, pollID, date)
	if err = d.mc.Delete(c, key); err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		log.Errorv(c, log.KV("DelCachePollVoteUserStatByDate", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}
